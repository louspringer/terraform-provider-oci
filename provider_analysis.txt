
=== ./internal/provider/provider_test.go ===
func TestUnitResourcePrincipal_basic(t *testing.T) {
	t.Skip("Run manually with a valid Resource Principle Session Token.")
func TestUnitResourcePrincipal_regionOverride(t *testing.T) {
	//Prerequisite: Before running this test, Please export OCI_RESOURCE_PRINCIPAL_RPST and OCI_RESOURCE_PRINCIPAL_PRIVATE_PEM
func (d *mockResourceData) GetOkExists(_ string) (interface{}, bool) {
	if d.state == "1" {
func TestUnit_RegisterResourceMap(t *testing.T) {
	tests := []struct {
func TestUnit_DataSourcesMap(t *testing.T) {
	tests := []struct {

=== ./internal/provider/provider.go ===
func DataSourcesMap() map[string]*schema.Resource {
	// Register some aliases of registered datasources. These are registered for convenience and legacy reasons.
func ResourcesMap() map[string]*schema.Resource {
	// Register some aliases of registered resources. These are registered for convenience and legacy reasons.
func ProviderConfig(d *schema.ResourceData) (interface{}, error) {
	tf_resource.DefinedTagsToSuppress = IgnoreDefinedTags(d)
func GetSdkConfigProvider(d *schema.ResourceData, clients *tf_client.OracleClients) (oci_common.ConfigurationProvider, error) {

func getConfigProviders(d *schema.ResourceData, auth string) ([]oci_common.ConfigurationProvider, error) {
	var configProviders []oci_common.ConfigurationProvider
func (p ResourceDataConfigProvider) AuthType() (oci_common.AuthConfig, error) {
	return oci_common.AuthConfig{
func (p ResourceDataConfigProvider) TenancyOCID() (string, error) {
	if boatTenancyOCID := utils.GetEnvSettingWithBlankDefault(globalvar.BoatTenancyOcidAttrName); boatTenancyOCID != "" {
func (p ResourceDataConfigProvider) UserOCID() (string, error) {
	if userOCID, ok := p.D.GetOkExists(globalvar.UserOcidAttrName); ok {
func (p ResourceDataConfigProvider) KeyFingerprint() (string, error) {
	if fingerprint, ok := p.D.GetOkExists(globalvar.FingerprintAttrName); ok {
func (p ResourceDataConfigProvider) Region() (string, error) {
	if region, ok := p.D.GetOkExists(globalvar.RegionAttrName); ok {
func IgnoreDefinedTags(d schemaResourceData) []string {
	if ignoreTags, ok := d.GetOkExists(globalvar.DefinedTagsToIgnore); ok {
func realmSpecificServiceEndpointTemplateEnabled(d schemaResourceData) string {
	if flag, ok := d.GetOkExists(globalvar.RealmSpecificServiceEndpointTemplateEnabled); ok {
func (p ResourceDataConfigProvider) KeyID() (string, error) {
	tenancy, err := p.TenancyOCID()
func (p ResourceDataConfigProvider) PrivateRSAKey() (key *rsa.PrivateKey, err error) {
	password := ""

=== ./internal/integrationtest/devops_build_pipeline_wait_stage_test.go ===
func TestDevopsBuildPipelineWaitStageResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestDevopsBuildPipelineWaitStageResource_basic")

=== ./internal/integrationtest/resource_scheduler_schedule_resource_type_test.go ===
func TestResourceSchedulerScheduleResourceTypeResource_basic(t *testing.T) {
	//httpreplay.SetScenario("TestResourceSchedulerScheduleResourceTypeResource_basic")

=== ./internal/integrationtest/database_autonomous_database_resource_test.go ===
func TestResourceDatabaseAutonomousDatabaseDedicated(t *testing.T) {
	shouldSkipADBDtest := os.Getenv("TF_VAR_should_skip_adbd_test")
func TestResourceDatabaseAutonomousDatabaseResource_preview(t *testing.T) {
	t.Skip("Skip this test as this is a seasonal feature only when Dbaas has a preview to be released.")
func TestResourceDatabaseAutonomousDatabaseResource_longtermBackup(t *testing.T) {

func TestResourceDatabaseAutonomousDatabaseResource_dataSafeStatus(t *testing.T) {
	httpreplay.SetScenario("TestResourceDatabaseAutonomousDatabaseResource_dataSafeStatus")
func TestResourceDatabaseAutonomousDatabaseResource_FromBackupId(t *testing.T) {
	httpreplay.SetScenario("TestResourceDatabaseAutonomousDatabaseResource_FromBackupFromId")
func TestResourceDatabaseAutonomousDatabaseResource_FromBackupTimestamp(t *testing.T) {
	httpreplay.SetScenario("TestResourceDatabaseAutonomousDatabaseResource_FromBackupTimestamp")
func TestResourceDatabaseAutonomousDatabaseResource_privateEndpoint(t *testing.T) {
	httpreplay.SetScenario("TestResourceDatabaseAutonomousDatabaseResource_privateEndPoint")
func TestResourceDatabaseAutonomousDatabaseResource_privateEndpointWithPublicAccess(t *testing.T) {
	httpreplay.SetScenario("TestResourceDatabaseAutonomousDatabaseResource_privateEndPointWithPublicAccess")
func TestResourceDatabaseAutonomousDatabaseResource_dbVersion(t *testing.T) {
	httpreplay.SetScenario("TestResourceDatabaseAutonomousDatabaseResource_dbVersion")
func TestResourceDatabaseAutonomousDatabaseResource_dataGuard(t *testing.T) {
	httpreplay.SetScenario("TestResourceDatabaseAutonomousDatabaseResource_dataGuard")
func TestResourceDatabaseExaccAutonomousDatabaseResource_dataGuard(t *testing.T) {
	shouldSkipEXACCtest := utils.GetEnvSettingWithDefault("TF_VAR_should_skip_exacc_test", "false")
func TestResourceDatabaseExaccAutonomousDatabaseResource(t *testing.T) {
	shouldSkipEXACCtest := utils.GetEnvSettingWithDefault("TF_VAR_should_skip_exacc_test", "false")
func TestResourceDatabaseInMemoryExaccAutonomousDatabaseResource_dataGuard(t *testing.T) {
	httpreplay.SetScenario("TestResourceDatabaseExaccAutonomousDatabaseResource_dataGuard")
func TestResourceDatabaseInMemoryExaccAutonomousDatabaseResource(t *testing.T) {
	httpreplay.SetScenario("TestResourceDatabaseExaccAutonomousDatabaseResource")
func TestResourceDatabaseDevTierExaccAutonomousDatabaseResource(t *testing.T) {
	httpreplay.SetScenario("TestResourceDatabaseDevTierExaccAutonomousDatabaseResource")
func TestResourceDatabaseAutonomousDatabaseResource_switchover(t *testing.T) {
	httpreplay.SetScenario("TestResourceDatabaseAutonomousDatabaseResource_switchover")
func TestResourceDatabaseAutonomousDatabaseResource_refreshableClone(t *testing.T) {
	httpreplay.SetScenario("TestResourceDatabaseAutonomousDatabaseResource_refreshableClone")
func TestResourceDatabaseAutonomousDatabaseResource_AJD(t *testing.T) {
	httpreplay.SetScenario("TestResourceDatabaseAutonomousDatabaseResource_AJD")
func TestResourceDatabaseAutonomousDatabaseResource_APEX(t *testing.T) {
	httpreplay.SetScenario("TestResourceDatabaseAutonomousDatabaseResource_APEX")
func TestResourceDatabaseAutonomousDatabaseResource_ConfigureKey(t *testing.T) {
	httpreplay.SetScenario("TestResourceDatabaseAutonomousDatabaseResource_ConfigureKey")
func TestResourceDatabaseAutonomousDatabaseResource_CrossRegionClone(t *testing.T) {
	httpreplay.SetScenario("TestResourceDatabaseAutonomousDatabaseResource_CrossRegionClone")
func TestDatabaseAutonomousDatabaseResource_ecpu(t *testing.T) {
	httpreplay.SetScenario("TestDatabaseAutonomousDatabaseResource_ecpu")
func TestDatabaseAutonomousDatabaseResource_ElasticResourcePool(t *testing.T) {
	httpreplay.SetScenario("TestDatabaseAutonomousDatabaseResource_ElasticResourcePool")
func TestDatabaseAutonomousDatabaseResource_DeveloperDatabases(t *testing.T) {
	httpreplay.SetScenario("TestDatabaseAutonomousDatabaseResource_scheduledOperations")
func TestDatabaseAutonomousDatabaseResource_scheduledOperations(t *testing.T) {

func TestDatabaseAutonomousDatabaseResource_dbTools(t *testing.T) {
	httpreplay.SetScenario("TestDatabaseAutonomousDatabaseResource_scheduledOperations")

=== ./internal/integrationtest/database_autonomous_vm_cluster_acd_resource_usage_test.go ===
func TestDatabaseAutonomousVmClusterAcdResourceUsageResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestDatabaseAutonomousVmClusterAcdResourceUsageResource_basic")

=== ./internal/integrationtest/osub_organization_subscription_organization_subscription_test.go ===
func TestOsubOrganizationSubscriptionOrganizationSubscriptionResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestOsubOrganizationSubscriptionOrganizationSubscriptionResource_basic")

=== ./internal/integrationtest/logging_unified_agent_scenario_test.go ===
func TestLoggingUnifiedAgentConfigurationLogTailResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestLoggingUnifiedAgentConfigurationResource_basic")

=== ./internal/integrationtest/jms_fleet_performance_tuning_analysis_result_test.go ===
func TestJmsFleetPerformanceTuningAnalysisResultResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestJmsFleetPerformanceTuningAnalysisResultResource_basic")

=== ./internal/integrationtest/optimizer_resource_action_test.go ===
func TestOptimizerResourceActionResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestOptimizerResourceActionResource_basic")

=== ./internal/integrationtest/core_drg_route_table_test.go ===
func TestCoreDrgRouteTableResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestCoreDrgRouteTableResource_basic")
func sweepCoreDrgRouteTableResource(compartment string) error {
	virtualNetworkClient := acctest.GetTestClients(&schema.ResourceData{}).VirtualNetworkClient()

=== ./internal/integrationtest/zpr_zpr_policy_test.go ===
func TestZprZprPolicyResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestZprZprPolicyResource_basic")
func sweepZprZprPolicyResource(compartment string) error {
	zprClient := acctest.GetTestClients(&schema.ResourceData{}).ZprClient()

=== ./internal/integrationtest/core_ip_inventory_subnet_cidr_test.go ===
func TestCoreIpInventorySubnetCidrResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestCoreIpInventorySubnetCidrResource_basic")

=== ./internal/integrationtest/core_instance_credentials_test.go ===
func TestCoreInstanceCredentialResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestCoreInstanceCredentialResource_basic")

=== ./internal/integrationtest/metering_computation_scheduled_run_test.go ===
func TestMeteringComputationScheduledRunResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestMeteringComputationScheduledRunResource_basic")

=== ./internal/integrationtest/core_virtual_circuit_bandwidth_shape_test.go ===
func TestCoreVirtualCircuitBandwidthShapeResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestCoreVirtualCircuitBandwidthShapeResource_basic")

=== ./internal/integrationtest/autoscaling_auto_scaling_configuration_test.go ===
func TestAutoScalingAutoScalingConfigurationResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestAutoScalingAutoScalingConfigurationResource_basic")
func sweepAutoScalingAutoScalingConfigurationResource(compartment string) error {
	autoScalingClient := acctest.GetTestClients(&schema.ResourceData{}).AutoScalingClient()

=== ./internal/integrationtest/database_cloud_database_management_test.go ===
func TestDatabaseCloudDatabaseManagementResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestDatabaseCloudDatabaseManagementResource_basic")

=== ./internal/integrationtest/bds_bds_instance_test.go ===
func TestBdsBdsInstanceResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestBdsBdsInstanceResource_basic")
func sweepBdsBdsInstanceResource(compartment string) error {
	bdsClient := acctest.GetTestClients(&schema.ResourceData{}).BdsClient()

=== ./internal/integrationtest/golden_gate_deployment_certificate_test.go ===
func TestGoldenGateDeploymentCertificateResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestGoldenGateDeploymentCertificateResource_basic")

=== ./internal/integrationtest/identity_tag_resource_test.go ===
func TestResourceIdentityTagDeletion(t *testing.T) {
	httpreplay.SetScenario("TestIdentityTagDeletion")
func TestResourceIdentityDefaultTag_required(t *testing.T) {
	httpreplay.SetScenario("TestResourceIdentityDefaultTag_required")

=== ./internal/integrationtest/database_vm_cluster_patch_history_entry_test.go ===
func TestDatabaseVmClusterPatchHistoryEntryResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestDatabaseVmClusterPatchHistoryEntryResource_basic")

=== ./internal/integrationtest/devops_deploy_stage_oke_blue_green_traffic_shift_test.go ===
func TestDevopsDeployStageResource_okeBlueGreenTrafficShift(t *testing.T) {
	httpreplay.SetScenario("TestDevopsDeployStageResource_okeBlueGreenTrafficShift")

=== ./internal/integrationtest/devops_deploy_stage_compute_instance_group_canary_approval_test.go ===
func TestDevopsDeployStageResource_computeInstanceGroupCanaryApproval(t *testing.T) {
	httpreplay.SetScenario("TestDevopsDeployStageResource_computeInstanceGroupCanaryApproval")

=== ./internal/integrationtest/apm_synthetics_public_vantage_point_test.go ===
func TestApmSyntheticsPublicVantagePointResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestApmSyntheticsPublicVantagePointResource_basic")

=== ./internal/integrationtest/network_load_balancer_listener_test.go ===
func TestNetworkLoadBalancerListenerResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestNetworkLoadBalancerListenerResource_basic")
func sweepNetworkLoadBalancerListenerResource(compartment string) error {
	networkLoadBalancerClient := acctest.GetTestClients(&schema.ResourceData{}).NetworkLoadBalancerClient()

=== ./internal/integrationtest/waf_network_address_list_test.go ===
func TestWafNetworkAddressListResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestWafNetworkAddressListResource_basic")
func sweepWafNetworkAddressListResource(compartment string) error {
	wafClient := acctest.GetTestClients(&schema.ResourceData{}).WafClient()

=== ./internal/integrationtest/objectstorage_bucket_resource_test.go ===
func TestResourceBucket_retentionRules(t *testing.T) {
	httpreplay.SetScenario("TestObjectStorageBucketResource_retentionRules")

=== ./internal/integrationtest/data_safe_audit_policy_management_test.go ===
func TestDataSafeAuditPolicyManagementResource_basic(t *testing.T) {
	t.Skip("Create operation is not available for Audit Policy Management resource")

=== ./internal/integrationtest/oce_oce_instance_test.go ===
func TestOceOceInstanceResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestOceOceInstanceResource_basic")
func sweepOceOceInstanceResource(compartment string) error {
	OceInstanceClient := acctest.GetTestClients(&schema.ResourceData{}).OceInstanceClient()

=== ./internal/integrationtest/core_volume_test.go ===
func TestCoreVolumeResource_basic(t *testing.T) {
	if httpreplay.ShouldRetryImmediately() {
func TestCoreVolumeDeltaRestoreResource_basic(t *testing.T) {
	if httpreplay.ShouldRetryImmediately() {
func TestCoreVolumeResource_expectError(t *testing.T) {
	httpreplay.SetScenario("TestCoreVolumeResource_expectError")
func TestCoreVolumeResource_int64_interpolation(t *testing.T) {
	httpreplay.SetScenario("TestCoreVolumeResource_int64_interpolation")
func TestCoreVolumeResource_validations(t *testing.T) {
	httpreplay.SetScenario("TestCoreVolumeResource_validations")
func sweepCoreVolumeResource(compartment string) error {
	blockstorageClient := acctest.GetTestClients(&schema.ResourceData{}).BlockstorageClient()

=== ./internal/integrationtest/database_management_managed_databases_reset_database_parameter_test.go ===
func TestDatabaseManagementManagedDatabasesResetDatabaseParameterResource_basic(t *testing.T) {
	//t.Skip("Skip this test till Database Management service provides a better way of testing this. It requires a live managed database instance")

=== ./internal/integrationtest/data_safe_audit_event_analytic_test.go ===
func TestDataSafeAuditEventAnalyticResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestDataSafeAuditEventAnalyticResource_basic")

=== ./internal/integrationtest/data_safe_database_security_config_management_test.go ===
func TestDataSafeDatabaseSecurityConfigManagementResource_basic(t *testing.T) {
	t.Skip("Skipping this test as the target ocid is hardcoded and may not exist when the test runs")

=== ./internal/integrationtest/mysql_mysql_db_system_test.go ===
func TestMysqlMysqlDbSystemResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestMysqlMysqlDbSystemResource_basic")
func sweepMysqlMysqlDbSystemResource(compartment string) error {
	dbSystemClient := acctest.GetTestClients(&schema.ResourceData{}).DbSystemClient()

=== ./internal/integrationtest/identity_identity_provider_group_test.go ===
func TestIdentityIdentityProviderGroupResource_basic(t *testing.T) {
	metadataFile := utils.GetEnvSettingWithBlankDefault("identity_provider_metadata_file")

=== ./internal/integrationtest/cloud_guard_managed_list_test.go ===
func TestCloudGuardManagedListResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestCloudGuardManagedListResource_basic")
func sweepCloudGuardManagedListResource(compartment string) error {
	cloudGuardClient := acctest.GetTestClients(&schema.ResourceData{}).CloudGuardClient()

=== ./internal/integrationtest/datascience_model_deployment_scaling_policy_test.go ===
func TestDatascienceModelDeploymentScalingPolicyResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestDatascienceModelDeploymentScalingPolicyResource_basic")

=== ./internal/integrationtest/load_balancer_certificate_resource_test.go ===
func (s *ResourceLoadBalancerCertificateTestSuite) SetupTest() {
	s.Providers = acctest.TestAccProviders
func (s *ResourceLoadBalancerCertificateTestSuite) TestAccResourceLoadBalancerCertificate_basic() {
	resource.UnitTest(s.T(), resource.TestCase{
func TestResourceLoadBalancerCertificateTestSuite(t *testing.T) {
	httpreplay.SetScenario("TestResourceLoadBalancerCertificateTestSuite")

=== ./internal/integrationtest/recovery_protected_database_test.go ===
func TestRecoveryProtectedDatabaseResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestRecoveryProtectedDatabaseResource_basic")
func sweepRecoveryProtectedDatabaseResource(compartment string) error {
	databaseRecoveryClient := acctest.GetTestClients(&schema.ResourceData{}).DatabaseRecoveryClient()

=== ./internal/integrationtest/mysql_mysql_db_system_resource_test.go ===
func TestMysqlMysqlDbSystemResource_sourcePitr(t *testing.T) {
	httpreplay.SetScenario("TestMysqlMysqlDbSystemResource_sourcePitr")
func TestMysqlMysqlDbSystemResource_sourceBackup(t *testing.T) {
	httpreplay.SetScenario("TestMysqlMysqlDbSystemResource_sourceBackup")
func TestMysqlMysqlDbSystemResource_sourceImport(t *testing.T) {
	httpreplay.SetScenario("TestMysqlMysqlDbSystemResource_sourceImport")
func TestMysqlMysqlDbSystemResource_HA(t *testing.T) {
	httpreplay.SetScenario("TestMysqlMysqlDbSystemResource_HA")
func TestMysqlMysqlDbSystemResource_crashRecovery(t *testing.T) {
	httpreplay.SetScenario("TestMysqlMysqlDbSystemResource_crashRecovery")
func TestMysqlMysqlDbSystemResource_dataStorageSizeGB(t *testing.T) {
	httpreplay.SetScenario("TestMysqlMysqlDbSystemResource_dataStorageSizeGB")
func TestMysqlMysqlDbSystemResource_HA_enable(t *testing.T) {
	httpreplay.SetScenario("TestMysqlMysqlDbSystemResource_HA")
func TestMysqlMysqlDbSystemResource_updateConfigurationIdAndShape(t *testing.T) {
	httpreplay.SetScenario("TestMysqlMysqlDbSystemResource_updateConfigurationIdAndShape")
func TestMysqlMysqlDbSystemResource_databaseManagement(t *testing.T) {
	httpreplay.SetScenario("TestMysqlMysqlDbSystemResource_databaseManagement")
func TestMysqlMysqlDbSystemResource_secureConnections(t *testing.T) {
	httpreplay.SetScenario("TestMysqlMysqlDbSystemResource_secureConnections")
func TestMysqlMysqlDbSystemResource_hostnameLabel(t *testing.T) {
	httpreplay.SetScenario("TestMysqlMysqlDbSystemResource_hostnameLabel")

=== ./internal/integrationtest/data_safe_audit_profile_collected_audit_volume_test.go ===
func TestDataSafeAuditProfileCollectedAuditVolumeResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestDataSafeAuditProfileCollectedAuditVolumeResource_basic")

=== ./internal/integrationtest/identity_domains_kmsi_setting_test.go ===
func TestIdentityDomainsKmsiSettingResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestIdentityDomainsKmsiSettingResource_basic")

=== ./internal/integrationtest/osmanagement_software_source_test.go ===
func TestOsmanagementSoftwareSourceResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestOsmanagementSoftwareSourceResource_basic")
func sweepOsmanagementSoftwareSourceResource(compartment string) error {
	osManagementClient := acctest.GetTestClients(&schema.ResourceData{}).OsManagementClient()

=== ./internal/integrationtest/fleet_apps_management_fleet_product_test.go ===
func TestFleetAppsManagementFleetProductResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestFleetAppsManagementFleetProductResource_basic")

=== ./internal/integrationtest/database_management_external_exadata_infrastructure_exadata_management_test.go ===
func TestDatabaseManagementExternalExadataInfrastructureExadataManagementResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestDatabaseManagementExternalExadataInfrastructureExadataManagementResource_basic")

=== ./internal/integrationtest/devops_deploy_stage_oke_test.go ===
func TestDevopsDeployStageResource_deployOke(t *testing.T) {
	httpreplay.SetScenario("TestDevopsDeployStageResource_deployOke")

=== ./internal/integrationtest/database_management_managed_databases_user_system_privilege_test.go ===
func TestDatabaseManagementManagedDatabasesUserSystemPrivilegeResource_basic(t *testing.T) {
	//t.Skip("Skip this test till Database Management service provides a better way of testing this. It requires a live managed database instance")

=== ./internal/integrationtest/identity_domains_group_test.go ===
func TestIdentityDomainsGroupResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestIdentityDomainsGroupResource_basic")
func sweepIdentityDomainsGroupResource(compartment string) error {
	identityDomainsClient := acctest.GetTestClients(&schema.ResourceData{}).IdentityDomainsClient()

=== ./internal/integrationtest/os_management_hub_managed_instance_group_install_windows_updates_management_test.go ===
func TestOsManagementHubManagedInstanceGroupInstallWindowsUpdatesManagementResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestOsManagementHubManagedInstanceGroupInstallWindowsUpdatesManagementResource_basic")

=== ./internal/integrationtest/osmanagement_software_source_module_stream_test.go ===
func TestOsmanagementSoftwareSourceModuleStreamResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestOsmanagementSoftwareSourceModuleStreamResource_basic")

=== ./internal/integrationtest/kms_key_restore_test.go ===
func TestResourceKmsKeyRestore_basic(t *testing.T) {
	t.Skip("Skip this test till KMS provides a better way of testing this.")

=== ./internal/integrationtest/database_management_managed_database_test.go ===
func TestDatabaseManagementManagedDatabaseResource_basic(t *testing.T) {
	//t.Skip("Skip this test till Database Management service provides a better way of testing this. It requires a live managed database instance")

=== ./internal/integrationtest/core_cpe_test.go ===
func TestCoreCpeResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestCoreCpeResource_basic")
func sweepCoreCpeResource(compartment string) error {
	virtualNetworkClient := acctest.GetTestClients(&schema.ResourceData{}).VirtualNetworkClient()

=== ./internal/integrationtest/database_pluggable_database_test.go ===
func TestDatabasePluggableDatabaseResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestDatabasePluggableDatabaseResource_basic")
func sweepDatabasePluggableDatabaseResource(compartment string) error {
	databaseClient := acctest.GetTestClients(&schema.ResourceData{}).DatabaseClient()

=== ./internal/integrationtest/security_attribute_security_attribute_namespace_test.go ===
func TestSecurityAttributeSecurityAttributeNamespaceResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestSecurityAttributeSecurityAttributeNamespaceResource_basic")
func sweepSecurityAttributeSecurityAttributeNamespaceResource(compartment string) error {
	securityAttributeClient := acctest.GetTestClients(&schema.ResourceData{}).SecurityAttributeClient()

=== ./internal/integrationtest/data_safe_audit_profile_management_test.go ===
func TestDataSafeAuditProfileManagementResource_basic(t *testing.T) {
	t.Skip("Create operation is not available for Audit Profile Management resource")

=== ./internal/integrationtest/network_load_balancer_network_load_balancers_backend_sets_unified_test.go ===
func TestNetworkLoadBalancerNetworkLoadBalancersBackendSetsUnifiedResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestNetworkLoadBalancerNetworkLoadBalancersBackendSetsUnifiedResource_basic")
func sweepNetworkLoadBalancerNetworkLoadBalancersBackendSetsUnifiedResource(compartment string) error {
	networkLoadBalancerClient := acctest.GetTestClients(&schema.ResourceData{}).NetworkLoadBalancerClient()

=== ./internal/integrationtest/database_database_software_image_test.go ===
func TestDatabaseDatabaseSoftwareImageResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestDatabaseDatabaseSoftwareImageResource_basic")
func sweepDatabaseDatabaseSoftwareImageResource(compartment string) error {
	databaseClient := acctest.GetTestClients(&schema.ResourceData{}).DatabaseClient()

=== ./internal/integrationtest/dns_steering_policy_test.go ===
func TestDnsSteeringPolicyResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestDnsSteeringPolicyResource_basic")
func sweepDnsSteeringPolicyResource(compartment string) error {
	dnsClient := acctest.GetTestClients(&schema.ResourceData{}).DnsClient()

=== ./internal/integrationtest/database_management_database_dbm_features_management_test.go ===
func TestDatabaseManagementDatabaseDbmFeaturesManagementResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestDatabaseManagementDatabaseDbmFeaturesManagementResource_basic")

=== ./internal/integrationtest/os_management_hub_managed_instance_group_install_packages_management_test.go ===
func TestOsManagementHubManagedInstanceGroupInstallPackagesManagementResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestOsManagementHubManagedInstanceGroupInstallPackagesManagementResource_basic")

=== ./internal/integrationtest/objectstorage_namespace_test.go ===
func TestObjectStorageNamespaceResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestObjectStorageNamespaceResource_basic")

=== ./internal/integrationtest/data_safe_masking_policy_health_report_log_test.go ===
func TestDataSafeMaskingPolicyHealthReportLogResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestDataSafeMaskingPolicyHealthReportLogResource_basic")

=== ./internal/integrationtest/data_safe_security_assessment_test.go ===
func TestDataSafeSecurityAssessmentResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestDataSafeSecurityAssessmentResource_basic")
func sweepDataSafeSecurityAssessmentResource(compartment string) error {
	dataSafeClient := acctest.GetTestClients(&schema.ResourceData{}).DataSafeClient()

=== ./internal/integrationtest/data_safe_sql_collection_log_insight_test.go ===
func TestDataSafeSqlCollectionLogInsightResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestDataSafeSqlCollectionLogInsightResource_basic")

=== ./internal/integrationtest/database_external_database_connector_tcps_test.go ===
func TestDatabaseExternalDatabaseTcpsConnectorResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestDatabaseExternalDatabaseTcpsConnectorResource_basic")
func sweepDatabaseExternalDatabaseTcpsConnectorResource(compartment string) error {
	databaseClient := acctest.GetTestClients(&schema.ResourceData{}).DatabaseClient()

=== ./internal/integrationtest/containerengine_work_request_log_entry_test.go ===
func TestContainerengineWorkRequestLogEntryResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestContainerengineWorkRequestLogEntryResource_basic")

=== ./internal/integrationtest/database_db_system_helper_test.go ===
func sweepDatabaseDbSystemResource(compartment string) error {
	databaseClient := acctest.GetTestClients(&schema.ResourceData{}).DatabaseClient()

=== ./internal/integrationtest/data_safe_set_user_assessment_baseline_management_test.go ===
func TestDataSafeSetUserAssessmentBaselineManagementResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestDataSafeSetUserAssessmentBaselineManagementResource_basic")

=== ./internal/integrationtest/opsi_host_insight_resource_test.go ===
func TestResourceOpsiHostInsight(t *testing.T) {
	httpreplay.SetScenario("TestResourceOpsiHostInsight")

=== ./internal/integrationtest/identity_domains_authentication_factor_setting_test.go ===
func TestIdentityDomainsAuthenticationFactorSettingResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestIdentityDomainsAuthenticationFactorSettingResource_basic")

=== ./internal/integrationtest/metering_computation_usage_carbon_emission_test.go ===
func TestMeteringComputationUsageCarbonEmissionResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestMeteringComputationUsageCarbonEmissionResource_basic")

=== ./internal/integrationtest/opsi_macs_cloud_database_insight_test.go ===
func TestOpsiMacsCloudDatabaseInsightResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestOpsiMacsCloudDatabaseInsightResource_basic")
func sweepOpsiMacsCloudDatabaseInsightResource(compartment string) error {
	operationsInsightsClient := acctest.GetTestClients(&schema.ResourceData{}).OperationsInsightsClient()

=== ./internal/integrationtest/database_management_managed_my_sql_database_configuration_data_test.go ===
func TestDatabaseManagementManagedMySqlDatabaseConfigurationDataResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestDatabaseManagementManagedMySqlDatabaseConfigurationDataResource_basic")

=== ./internal/integrationtest/identity_domains_my_pending_approval_test.go ===
func TestIdentityDomainsMyPendingApprovalResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestIdentityDomainsMyPendingApprovalResource_basic")

=== ./internal/integrationtest/database_exadb_vm_cluster_update_test.go ===
func TestDatabaseExadbVmClusterUpdateResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestDatabaseExadbVmClusterUpdateResource_basic")

=== ./internal/integrationtest/database_db_home_patch_test.go ===
func TestDatabaseDbHomePatchResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestDatabaseDbHomePatchResource_basic")

=== ./internal/integrationtest/core_boot_volume_backup_test.go ===
func TestCoreBootVolumeBackupResource_basic(t *testing.T) {
	if httpreplay.ShouldRetryImmediately() {
func sweepCoreBootVolumeBackupResource(compartment string) error {
	blockstorageClient := acctest.GetTestClients(&schema.ResourceData{}).BlockstorageClient()

=== ./internal/integrationtest/streaming_connect_harness_test.go ===
func TestStreamingConnectHarnessResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestStreamingConnectHarnessResource_basic")
func sweepStreamingConnectHarnessResource(compartment string) error {
	streamAdminClient := acctest.GetTestClients(&schema.ResourceData{}).StreamAdminClient()

=== ./internal/integrationtest/opa_opa_instance_test.go ===
func TestOpaOpaInstanceResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestOpaOpaInstanceResource_basic")
func sweepOpaOpaInstanceResource(compartment string) error {
	opaInstanceClient := acctest.GetTestClients(&schema.ResourceData{}).OpaInstanceClient()

=== ./internal/integrationtest/network_load_balancer_backend_health_test.go ===
func TestNetworkLoadBalancerBackendHealthResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestNetworkLoadBalancerBackendHealthResource_basic")

=== ./internal/integrationtest/core_instance_maintenance_event_test.go ===
func TestCoreInstanceMaintenanceEventResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestCoreInstanceMaintenanceEventResource_basic")

=== ./internal/integrationtest/load_balancer_load_balancer_shape_test.go ===
func TestLoadBalancerLoadBalancerShapeResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestLoadBalancerLoadBalancerShapeResource_basic")

=== ./internal/integrationtest/dataintegration_workspace_application_patch_test.go ===
func TestDataintegrationWorkspaceApplicationPatchResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestDataintegrationWorkspaceApplicationPatchResource_basic")
func sweepDataintegrationWorkspaceApplicationPatchResource(compartment string) error {
	dataIntegrationClient := acctest.GetTestClients(&schema.ResourceData{}).DataIntegrationClient()

=== ./internal/integrationtest/opsi_database_insight_test.go ===
func TestOpsiDatabaseInsightResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestOpsiDatabaseInsightResource_basic")
func sweepOpsiDatabaseInsightResource(compartment string) error {
	operationsInsightsClient := acctest.GetTestClients(&schema.ResourceData{}).OperationsInsightsClient()

=== ./internal/integrationtest/cloud_bridge_agent_test.go ===
func TestCloudBridgeAgentResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestCloudBridgeAgentResource_basic")
func sweepCloudBridgeAgentResource(compartment string) error {
	ocbAgentSvcClient := acctest.GetTestClients(&schema.ResourceData{}).OcbAgentSvcClient()

=== ./internal/integrationtest/core_ipsec_config_test.go ===
func TestCoreIpSecConnectionDeviceConfigResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestCoreIpSecConnectionDeviceConfigResource_basic")

=== ./internal/integrationtest/objectstorage_private_endpoint_resource_test.go ===
func TestResourcePrivateEndpoint(t *testing.T) {
	httpreplay.SetScenario("TestObjectStoragePrivateEndpointResource_resource")

=== ./internal/integrationtest/load_balancer_backend_set_test.go ===
func TestLoadBalancerBackendSetResourceOciCerts_basic(t *testing.T) {
	httpreplay.SetScenario("TestLoadBalancerBackendSetResource_basic")
func TestLoadBalancerBackendSetResourceLB_basic(t *testing.T) {
	httpreplay.SetScenario("TestLoadBalancerBackendSetResource_basic")
func TestLoadBalancerBackendSetResourceLBCertToOciCerts_combo(t *testing.T) {
	httpreplay.SetScenario("TestLoadBalancerBackendSetResource_basic")
func TestLoadBalancerBackendSetResourceOciCertsToLBCert_combo(t *testing.T) {
	httpreplay.SetScenario("TestLoadBalancerBackendSetResource_basic")
func sweepLoadBalancerBackendSetResource(compartment string) error {
	loadBalancerClient := acctest.GetTestClients(&schema.ResourceData{}).LoadBalancerClient()

=== ./internal/integrationtest/desktops_desktop_test.go ===
func TestDesktopsDesktopResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestDesktopsDesktopResource_basic")
func sweepDesktopsDesktopResource(compartment string) error {
	desktopServiceClient := acctest.GetTestClients(&schema.ResourceData{}).DesktopServiceClient()

=== ./internal/integrationtest/os_management_hub_errata_test.go ===
func TestOsManagementHubErrataResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestOsManagementHubErrataResource_basic")

=== ./internal/integrationtest/stack_monitoring_monitored_resources_search_test.go ===
func TestStackMonitoringMonitoredResourcesSearchResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestStackMonitoringMonitoredResourcesSearchResource_basic")

=== ./internal/integrationtest/data_safe_masking_policy_masking_schema_test.go ===
func TestDataSafeMaskingPolicyMaskingSchemaResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestDataSafeMaskingPolicyMaskingSchemaResource_basic")

=== ./internal/integrationtest/dns_record_test.go ===
func TestDnsRecordsResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestDnsRecordsResource_basic")
func TestDnsRecordsResource_datasources(t *testing.T) {
	httpreplay.SetScenario("TestDnsRecordsResource_datasources")
func TestDnsRecordsResource_diffSuppression(t *testing.T) {
	httpreplay.SetScenario("TestDnsRecordsResource_diffSuppression")
func TestDnsRecordsResource_badUpdate(t *testing.T) {
	httpreplay.SetScenario("TestDnsRecordsResource_badUpdate")

=== ./internal/integrationtest/dns_zone_resource_test.go ===
func TestDnsZoneResource_default(t *testing.T) {
	httpreplay.SetScenario("TestDnsZoneResource_default")

=== ./internal/integrationtest/core_ipsec_algorithm_test.go ===
func TestCoreIpsecAlgorithmResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestCoreIpsecAlgorithmResource_basic")

=== ./internal/integrationtest/ocvp_retrieve_password_test.go ===
func TestRetrievePasswordDataSource_basic(t *testing.T) {
	httpreplay.SetScenario("TestRetrievePasswordDataSource_basic")

=== ./internal/integrationtest/kms_replication_status_test.go ===
func TestKmsReplicationStatusResource_basic(t *testing.T) {
	t.Skip("Skip this test because virtual private vault is needed")

=== ./internal/integrationtest/limits_limit_value_test.go ===
func TestLimitsLimitValueResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestLimitsLimitValueResource_basic")
func TestLimitsLimitValueResource_subscription(t *testing.T) {
	httpreplay.SetScenario("TestLimitsLimitValueResource_subscription")

=== ./internal/integrationtest/osmanagement_managed_instance_event_report_test.go ===
func TestOsmanagementManagedInstanceEventReportResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestOsmanagementManagedInstanceEventReportResource_basic")

=== ./internal/integrationtest/media_services_stream_packaging_config_test.go ===
func TestMediaServicesStreamPackagingConfigResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestMediaServicesStreamPackagingConfigResource_basic")
func sweepMediaServicesStreamPackagingConfigResource(compartment string) error {
	mediaServicesClient := acctest.GetTestClients(&schema.ResourceData{}).MediaServicesClient()

=== ./internal/integrationtest/management_agent_management_agent_install_key_test.go ===
func TestManagementAgentManagementAgentInstallKeyResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestManagementAgentManagementAgentInstallKeyResource_basic")
func sweepManagementAgentManagementAgentInstallKeyResource(compartment string) error {
	managementAgentClient := acctest.GetTestClients(&schema.ResourceData{}).ManagementAgentClient()

=== ./internal/integrationtest/osub_subscription_ratecard_test.go ===
func TestOsubSubscriptionRatecardResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestOsubSubscriptionRatecardResource_basic")

=== ./internal/integrationtest/core_virtual_circuit_realm_test.go ===
func TestGovSpecificCoreVirtualCircuitResource_basic(t *testing.T) {
	if !strings.Contains(utils.GetEnvSettingWithBlankDefault("enabled_tests"), "IPv6") {

=== ./internal/integrationtest/delegate_access_control_delegation_control_resource_test.go ===
func TestDelegateAccessControlDelegationControlResourceResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestDelegateAccessControlDelegationControlResourceResource_basic")

=== ./internal/integrationtest/os_management_hub_lifecycle_stage_promote_software_source_management_test.go ===
func TestOsManagementHubLifecycleStagePromoteSoftwareSourceManagementResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestOsManagementHubLifecycleStagePromoteSoftwareSourceManagementResource_basic")

=== ./internal/integrationtest/limits_service_test.go ===
func TestLimitsServiceResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestLimitsServiceResource_basic")
func TestLimitsServiceResource_with_subscription(t *testing.T) {
	httpreplay.SetScenario("TestLimitsServiceResource_with_subscription")

=== ./internal/integrationtest/waas_purge_cache_test.go ===
func TestWaasPurgeCacheResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestWaasPurgeCacheResource_basic")

=== ./internal/integrationtest/os_management_hub_entitlement_test.go ===
func TestOsManagementHubEntitlementResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestOsManagementHubEntitlementResource_basic")

=== ./internal/integrationtest/database_external_pluggable_database_test.go ===
func TestDatabaseExternalPluggableDatabaseResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestDatabaseExternalPluggableDatabaseResource_basic")
func sweepDatabaseExternalPluggableDatabaseResource(compartment string) error {
	databaseClient := acctest.GetTestClients(&schema.ResourceData{}).DatabaseClient()

=== ./internal/integrationtest/delegate_access_control_service_provider_test.go ===
func TestDelegateAccessControlServiceProviderResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestDelegateAccessControlServiceProviderResource_basic")

=== ./internal/integrationtest/mysql_shape_test.go ===
func TestMysqlShapeResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestMysqlShapeResource_basic")

=== ./internal/integrationtest/os_management_hub_management_station_test.go ===
func TestOsManagementHubManagementStationResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestOsManagementHubManagementStationResource_basic")
func sweepOsManagementHubManagementStationResource(compartment string) error {
	managementStationClient := acctest.GetTestClients(&schema.ResourceData{}).ManagementStationClient()

=== ./internal/integrationtest/recovery_protection_policy_test.go ===
func TestRecoveryProtectionPolicyResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestRecoveryProtectionPolicyResource_basic")
func sweepRecoveryProtectionPolicyResource(compartment string) error {
	databaseRecoveryClient := acctest.GetTestClients(&schema.ResourceData{}).DatabaseRecoveryClient()

=== ./internal/integrationtest/marketplace_accepted_agreement_test.go ===
func TestMarketplaceAcceptedAgreementResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestMarketplaceAcceptedAgreementResource_basic")
func sweepMarketplaceAcceptedAgreementResource(compartment string) error {
	marketplaceClient := acctest.GetTestClients(&schema.ResourceData{}).MarketplaceClient()

=== ./internal/integrationtest/stack_monitoring_monitored_resources_list_member_test.go ===
func TestStackMonitoringMonitoredResourcesListMemberResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestStackMonitoringMonitoredResourcesListMemberResource_basic")

=== ./internal/integrationtest/health_checks_http_probe_test.go ===
func TestHealthChecksHttpProbeResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestHealthChecksHttpProbeResource_basic")

=== ./internal/integrationtest/data_safe_audit_trail_test.go ===
func TestDataSafeAuditTrailResource_basic(t *testing.T) {
	t.Skip("Create operation is not available for Audit Trail resource")
func sweepDataSafeAuditTrailResource(compartment string) error {
	dataSafeClient := acctest.GetTestClients(&schema.ResourceData{}).DataSafeClient()

=== ./internal/integrationtest/generic_artifacts_content_artifact_by_path_test.go ===
func TestGenericArtifactsContentArtifactByPathResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestGenericArtifactsContentArtifactByPathResource_basic")
func TestGenericArtifactsContentArtifactByPathResource_uploadFile(t *testing.T) {
	httpreplay.SetScenario("TestGenericArtifactsContentArtifactByPathResource_uploadFile")

=== ./internal/integrationtest/jms_java_downloads_java_download_record_test.go ===
func TestJmsJavaDownloadsJavaDownloadRecordResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestJmsJavaDownloadsJavaDownloadRecordResource_basic")

=== ./internal/integrationtest/log_analytics_namespace_rules_summary_test.go ===
func TestLogAnalyticsNamespaceRulesSummaryResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestLogAnalyticsNamespaceRulesSummaryResource_basic")

=== ./internal/integrationtest/data_safe_masking_policy_masking_object_test.go ===
func TestDataSafeMaskingPolicyMaskingObjectResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestDataSafeMaskingPolicyMaskingObjectResource_basic")

=== ./internal/integrationtest/core_tunnel_security_association_test.go ===
func TestCoreTunnelSecurityAssociationResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestCoreTunnelSecurityAssociationResource_basic")

=== ./internal/integrationtest/cloud_guard_adhoc_query_test.go ===
func TestCloudGuardAdhocQueryResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestCloudGuardAdhocQueryResource_basic")
func sweepCloudGuardAdhocQueryResource(compartment string) error {
	cloudGuardClient := acctest.GetTestClients(&schema.ResourceData{}).CloudGuardClient()

=== ./internal/integrationtest/vulnerability_scanning_host_scan_recipe_qualys_test.go ===
func TestVulnerabilityScanningHostScanRecipeResource_Qualys_basic(t *testing.T) {
	httpreplay.SetScenario("TestVulnerabilityScanningHostScanRecipeResource_Qualys_basic")

=== ./internal/integrationtest/osp_gateway_subscription_test.go ===
func TestOspGatewaySubscriptionResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestOspGatewaySubscriptionResource_basic")

=== ./internal/integrationtest/os_management_hub_software_source_module_stream_profile_test.go ===
func TestOsManagementHubSoftwareSourceModuleStreamProfileResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestOsManagementHubSoftwareSourceModuleStreamProfileResource_basic")

=== ./internal/integrationtest/license_manager_top_utilized_product_license_test.go ===
func TestLicenseManagerTopUtilizedProductLicenseResource_basic(t *testing.T) {
	t.Skip("The response to this API may take upto 4 hours to populate and there is no work request ID to track it")

=== ./internal/integrationtest/usage_proxy_subscription_redemption_test.go ===
func TestUsageProxySubscriptionRedemptionResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestUsageProxySubscriptionRedemptionResource_basic")

=== ./internal/integrationtest/containerengine_migrate_to_native_vcn_statu_test.go ===
func TestContainerengineMigrateToNativeVcnStatusResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestContainerengineMigrateToNativeVcnStatusResource_basic")

=== ./internal/integrationtest/devops_project_test.go ===
func TestDevopsProjectResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestDevopsProjectResource_basic")
func sweepDevopsProjectResource(compartment string) error {
	projectClient := acctest.GetTestClients(&schema.ResourceData{}).DevopsClient()

=== ./internal/integrationtest/certificates_management_association_test.go ===
func TestCertificatesManagementAssociationResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestCertificatesManagementAssociationResource_basic")

=== ./internal/integrationtest/management_agent_management_agent_plugin_count_test.go ===
func TestManagementAgentManagementAgentPluginCountResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestManagementAgentManagementAgentPluginCountResource_basic")

=== ./internal/integrationtest/container_instances_container_instance_test.go ===
func TestContainerInstancesContainerInstanceResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestContainerInstancesContainerInstanceResource_basic")
func sweepContainerInstancesContainerInstanceResource(compartment string) error {
	containerInstanceClient := acctest.GetTestClients(&schema.ResourceData{}).ContainerInstanceClient()

=== ./internal/integrationtest/database_cloud_autonomous_vm_cluster_resource_usage_test.go ===
func TestDatabaseCloudAutonomousVmClusterResourceUsageResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestDatabaseCloudAutonomousVmClusterResourceUsageResource_basic")

=== ./internal/integrationtest/jms_fleet_export_setting_test.go ===
func TestJmsFleetExportSettingResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestJmsFleetExportSettingResource_basic")

=== ./internal/integrationtest/data_safe_alert_policy_rule_test.go ===
func TestDataSafeAlertPolicyRuleResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestDataSafeAlertPolicyRuleResource_basic")
func sweepDataSafeAlertPolicyRuleResource(compartment string) error {
	dataSafeClient := acctest.GetTestClients(&schema.ResourceData{}).DataSafeClient()

=== ./internal/integrationtest/datascience_storage_mounts_test.go ===
func TestDatascienceJobResourceWithStorageMountConfigurationDetailsList_basic(t *testing.T) {
	httpreplay.SetScenario("TestDatascienceJobResourceWithStorageMountConfigurationDetailsList_basic")
func TestDatascienceNotebookSessionResourceWithStorageMountConfigurationDetailsList_basic(t *testing.T) {
	httpreplay.SetScenario("TestDatascienceNotebookSessionResourceWithStorageMountConfigurationDetailsList_basic")

=== ./internal/integrationtest/database_autonomous_database_software_image_test.go ===
func TestDatabaseExaccAutonomousDatabaseSoftwareImageResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestDatabaseExaccAutonomousDatabaseSoftwareImageResource_basic")
func TestDatabaseAutonomousDatabaseSoftwareImageResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestDatabaseAutonomousDatabaseSoftwareImageResource_basic")
func sweepDatabaseAutonomousDatabaseSoftwareImageResource(compartment string) error {
	databaseClient := acctest.GetTestClients(&schema.ResourceData{}).DatabaseClient()

=== ./internal/integrationtest/em_warehouse_em_warehouse_resource_usage_test.go ===
func TestEmWarehouseEmWarehouseResourceUsageResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestEmWarehouseEmWarehouseResourceUsageResource_basic")

=== ./internal/integrationtest/identity_db_credential_test.go ===
func TestIdentityDbCredentialResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestIdentityDbCredentialResource_basic")

=== ./internal/integrationtest/bds_bds_instance_get_os_patch_test.go ===
func TestBdsBdsInstanceGetOsPatchResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestBdsBdsInstanceGetOsPatchResource_basic")

=== ./internal/integrationtest/devops_build_pipeline_uim_deliver_artifact_stage_test.go ===
func TestDevopsBuildPipelineStageUIMDeliverArtifactResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestDevopsBuildPipelineStageUIMDeliverArtifactResource_basic")

=== ./internal/integrationtest/objectstorage_object_version_test.go ===
func TestObjectStorageObjectVersionResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestObjectStorageObjectVersionResource_basic")

=== ./internal/integrationtest/service_mesh_ingress_gateway_route_table_test.go ===
func TestServiceMeshIngressGatewayRouteTableResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestServiceMeshIngressGatewayRouteTableResource_basic")
func sweepServiceMeshIngressGatewayRouteTableResource(compartment string) error {
	serviceMeshClient := acctest.GetTestClients(&schema.ResourceData{}).ServiceMeshClient()

=== ./internal/integrationtest/containerengine_cluster_start_credential_rotation_management_test.go ===
func TestContainerengineClusterStartCredentialRotationManagementResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestContainerengineClusterStartCredentialRotationManagementResource_basic")

=== ./internal/integrationtest/devops_repository_commit_test.go ===
func TestDevopsRepositoryCommitResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestDevopsRepositoryCommitResource_basic")

=== ./internal/integrationtest/capacity_management_internal_occ_handover_resource_block_detail_test.go ===
func TestCapacityManagementInternalOccHandoverResourceBlockDetailResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestCapacityManagementInternalOccHandoverResourceBlockDetailResource_basic")

=== ./internal/integrationtest/management_agent_management_agent_get_auto_upgradable_config_test.go ===
func TestManagementAgentManagementAgentGetAutoUpgradableConfigResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestManagementAgentManagementAgentGetAutoUpgradableConfigResource_basic")

=== ./internal/integrationtest/datascience_pipeline_run_test.go ===
func TestDatasciencePipelineRunResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestDatasciencePipelineRunResource_basic")
func sweepDatasciencePipelineRunResource(compartment string) error {
	dataScienceClient := acctest.GetTestClients(&schema.ResourceData{}).DataScienceClient()

=== ./internal/integrationtest/media_services_stream_distribution_channel_test.go ===
func TestMediaServicesStreamDistributionChannelResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestMediaServicesStreamDistributionChannelResource_basic")
func sweepMediaServicesStreamDistributionChannelResource(compartment string) error {
	mediaServicesClient := acctest.GetTestClients(&schema.ResourceData{}).MediaServicesClient()

=== ./internal/integrationtest/objectstorage_replication_policy_test.go ===
func TestObjectStorageReplicationPolicyResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestObjectStorageReplicationPolicyResource_basic")
func sweepObjectStorageReplicationPolicyResource(compartment string) error {
	objectStorageClient := acctest.GetTestClients(&schema.ResourceData{}).ObjectStorageClient()

=== ./internal/integrationtest/security_attribute_security_attribute_test.go ===
func TestSecurityAttributeSecurityAttributeResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestSecurityAttributeSecurityAttributeResource_basic")
func sweepSecurityAttributeSecurityAttributeResource(compartment string) error {
	securityAttributeClient := acctest.GetTestClients(&schema.ResourceData{}).SecurityAttributeClient()

=== ./internal/integrationtest/psql_shape_test.go ===
func TestPsqlShapeResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestPsqlShapeResource_basic")

=== ./internal/integrationtest/metering_computation_usage_carbon_emissions_query_test.go ===
func TestMeteringComputationUsageCarbonEmissionsQueryResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestMeteringComputationUsageCarbonEmissionsQueryResource_basic")
func sweepMeteringComputationUsageCarbonEmissionsQueryResource(compartment string) error {
	usageapiClient := acctest.GetTestClients(&schema.ResourceData{}).UsageapiClient()

=== ./internal/integrationtest/load_balancer_backend_health_test.go ===
func TestLoadBalancerBackendHealthResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestLoadBalancerBackendHealthResource_basic")

=== ./internal/integrationtest/core_ipsec_connection_tunnel_error_test.go ===
func TestCoreIpsecConnectionTunnelErrorResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestCoreIpsecConnectionTunnelErrorResource_basic")

=== ./internal/integrationtest/golden_gate_deployment_backup_test.go ===
func TestGoldenGateDeploymentBackupResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestGoldenGateDeploymentBackupResource_basic")
func sweepGoldenGateDeploymentBackupResource(compartment string) error {
	goldenGateClient := acctest.GetTestClients(&schema.ResourceData{}).GoldenGateClient()

=== ./internal/integrationtest/database_migration_job_test.go ===
func TestDatabaseMigrationJobResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestDatabaseMigrationJobResource_basic")
func sweepDatabaseMigrationJobResource(compartment string) error {
	databaseMigrationClient := acctest.GetTestClients(&schema.ResourceData{}).DatabaseMigrationClient()

=== ./internal/integrationtest/optimizer_recommendation_test.go ===
func TestOptimizerRecommendationResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestOptimizerRecommendationResource_basic")

=== ./internal/integrationtest/data_safe_security_assessment_comparison_test.go ===
func TestDataSafeSecurityAssessmentComparisonResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestDataSafeSecurityAssessmentComparisonResource_basic")

=== ./internal/integrationtest/database_backup_destination_test.go ===
func TestDatabaseBackupDestinationResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestDatabaseBackupDestinationResource_basic")
func sweepDatabaseBackupDestinationResource(compartment string) error {
	databaseClient := acctest.GetTestClients(&schema.ResourceData{}).DatabaseClient()

=== ./internal/integrationtest/os_management_hub_lifecycle_environment_test.go ===
func TestOsManagementHubLifecycleEnvironmentResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestOsManagementHubLifecycleEnvironmentResource_basic")
func sweepOsManagementHubLifecycleEnvironmentResource(compartment string) error {
	lifecycleEnvironmentClient := acctest.GetTestClients(&schema.ResourceData{}).LifecycleEnvironmentClient()

=== ./internal/integrationtest/core_console_history_data_test.go ===
func TestCoreConsoleHistoryContentResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestCoreConsoleHistoryContentResource_basic")

=== ./internal/integrationtest/data_safe_sensitive_data_model_sensitive_type_test.go ===
func TestDataSafeSensitiveDataModelSensitiveTypeResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestDataSafeSensitiveDataModelSensitiveTypeResource_basic")

=== ./internal/integrationtest/log_analytics_log_analytics_resource_categories_management_test.go ===
func TestLogAnalyticsLogAnalyticsResourceCategoriesManagementResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestLogAnalyticsLogAnalyticsResourceCategoriesManagementResource_basic")

=== ./internal/integrationtest/kms_key_version_test.go ===
func TestKmsExternalKeyVersionResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestKmsExternalKeyVersionResource_basic")
func TestKmsKeyVersionResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestKmsKeyVersionResource_basic")

=== ./internal/integrationtest/core_nat_gateway_test.go ===
func TestCoreNatGatewayResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestCoreNatGatewayResource_basic")
func sweepCoreNatGatewayResource(compartment string) error {
	virtualNetworkClient := acctest.GetTestClients(&schema.ResourceData{}).VirtualNetworkClient()

=== ./internal/integrationtest/bds_bds_instance_patch_history_test.go ===
func TestBdsBdsInstancePatchHistoryResource_basic(t *testing.T) {
	t.Skip("Run manual with an older cluster with patch available")

=== ./internal/integrationtest/data_safe_compare_user_assessment_test.go ===
func TestDataSafeCompareUserAssessmentResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestDataSafeCompareUserAssessmentResource_basic")

=== ./internal/integrationtest/identity_smtp_credential_test.go ===
func TestIdentitySmtpCredentialResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestIdentitySmtpCredentialResource_basic")

=== ./internal/integrationtest/os_management_hub_managed_instance_group_detach_software_sources_management_test.go ===
func TestOsManagementHubManagedInstanceGroupDetachSoftwareSourcesManagementResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestOsManagementHubManagedInstanceGroupDetachSoftwareSourcesManagementResource_basic")

=== ./internal/integrationtest/database_management_job_executions_status_test.go ===
func TestDatabaseManagementJobExecutionsStatusResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestDatabaseManagementJobExecutionsStatusResource_basic")

=== ./internal/integrationtest/kms_vault_replication_test.go ===
func TestKmsVaultReplicationResource_basic(t *testing.T) {
	t.Skip("Skip this test because virtual private vault is needed")

=== ./internal/integrationtest/data_safe_sql_firewall_policy_management_test.go ===
func TestDataSafeSqlFirewallPolicyManagementResource_basic(t *testing.T) {
	t.Skip("Skipping this test as the target ocid, policy ocid and dbUserName are hardcoded and may not exist when the test runs")
func sweepDataSafeSqlFirewallPolicyManagementResource(compartment string) error {
	dataSafeClient := acctest.GetTestClients(&schema.ResourceData{}).DataSafeClient()

=== ./internal/integrationtest/database_gi_version_test.go ===
func TestDatabaseGiVersionResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestDatabaseGiVersionResource_basic")

=== ./internal/integrationtest/os_management_hub_managed_instance_attach_profile_management_test.go ===
func TestOsManagementHubManagedInstanceAttachProfileManagementResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestOsManagementHubManagedInstanceAttachProfileManagementResource_basic")

=== ./internal/integrationtest/core_ipv6_test.go ===
func TestCoreIpv6Resource_basic(t *testing.T) {
	httpreplay.SetScenario("TestCoreIpv6Resource_basic")
func sweepCoreIpv6Resource(compartment string) error {
	virtualNetworkClient := acctest.GetTestClients(&schema.ResourceData{}).VirtualNetworkClient()

=== ./internal/integrationtest/cloud_guard_cloud_guard_configuration_test.go ===
func TestCloudGuardCloudGuardConfigurationResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestCloudGuardCloudGuardConfigurationResource_basic")

=== ./internal/integrationtest/opsi_mds_mysql_database_insight_test.go ===
func TestOpsiMdsMySqlDatabaseInsightResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestOpsiMdsMySqlDatabaseInsightResource_basic")
func sweepOpsiMdsMySqlDatabaseInsightResource(compartment string) error {
	operationsInsightsClient := acctest.GetTestClients(&schema.ResourceData{}).OperationsInsightsClient()

=== ./internal/integrationtest/license_manager_configuration_test.go ===
func TestLicenseManagerConfigurationResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestLicenseManagerConfigurationResource_basic")

=== ./internal/integrationtest/devops_deploy_stage_compute_instance_group_canary_traffic_shift_test.go ===
func TestDevopsDeployStageResource_computeInstanceGroupCanaryTrafficShift(t *testing.T) {
	httpreplay.SetScenario("TestDevopsDeployStageResource_computeInstanceGroupCanaryTrafficShift")

=== ./internal/integrationtest/stack_monitoring_baselineable_metric_test.go ===
func TestStackMonitoringBaselineableMetricResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestStackMonitoringBaselineableMetricResource_basic")
func sweepStackMonitoringBaselineableMetricResource(compartment string) error {
	stackMonitoringClient := acctest.GetTestClients(&schema.ResourceData{}).StackMonitoringClient()

=== ./internal/integrationtest/database_exadb_vm_cluster_pluggable_database_local_clone_test.go ===
func TestDatabaseExaDbVmClusterPluggableDatabaseResource_localThinClone(t *testing.T) {
	httpreplay.SetScenario("TestDatabaseExaDbVmClusterPluggableDatabaseResource_localThinClone")

=== ./internal/integrationtest/delegate_access_control_delegation_subscription_test.go ===
func TestDelegateAccessControlDelegationSubscriptionResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestDelegateAccessControlDelegationSubscriptionResource_basic")
func sweepDelegateAccessControlDelegationSubscriptionResource(compartment string) error {
	delegateAccessControlClient := acctest.GetTestClients(&schema.ResourceData{}).DelegateAccessControlClient()

=== ./internal/integrationtest/data_safe_user_assessment_profile_test.go ===
func TestDataSafeUserAssessmentProfileResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestDataSafeUserAssessmentProfileResource_basic")

=== ./internal/integrationtest/load_balancer_listener_resource_test.go ===
func (s *ResourceLoadBalancerListenerTestSuite) SetupTest() {
	s.Providers = acctest.TestAccProviders
func (s *ResourceLoadBalancerListenerTestSuite) TestAccResourceLoadBalancerListener_basic() {
	var resId, resId2 string
func TestResourceLoadBalancerListenerTestSuite(t *testing.T) {
	httpreplay.SetScenario("TestResourceLoadBalancerListenerTestSuite")

=== ./internal/integrationtest/adm_remediation_recipe_test.go ===
func TestAdmRemediationRecipeResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestAdmRemediationRecipeResource_basic")
func sweepAdmRemediationRecipeResource(compartment string) error {
	applicationDependencyManagementClient := acctest.GetTestClients(&schema.ResourceData{}).ApplicationDependencyManagementClient()

=== ./internal/integrationtest/identity_api_key_resource_test.go ===
func (s *ResourceIdentityAPIKeyTestSuite) SetupTest() {
	_, tokenFn := acctest.TokenizeWithHttpReplay("api_key")
func (s *ResourceIdentityAPIKeyTestSuite) TestAccResourceIdentityAPIKey_basic() {
	_, tokenFn := acctest.TokenizeWithHttpReplay("api_key_2")
func TestResourceIdentityAPIKeyTestSuite(t *testing.T) {
	t.Skip("Run manually with a valid api key")

=== ./internal/integrationtest/devops_repository_fork_test.go ===
func TestDevopsForkRepositoryResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestDevopsForkRepositoryResource_basic")
func sweepDevopsForkRepositoryResource(compartment string) error {
	devopsClient := acctest.GetTestClients(&schema.ResourceData{}).DevopsClient()

=== ./internal/integrationtest/devops_deploy_artifact_helm_attestation_test.go ===
func TestDevopsDeployArtifactResource_helmattestation(t *testing.T) {
	httpreplay.SetScenario("TestDevopsDeployArtifactResource_helmattestation")

=== ./internal/integrationtest/onesubscription_ratecard_test.go ===
func TestOnesubscriptionRatecardResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestOnesubscriptionRatecardResource_basic")

=== ./internal/integrationtest/database_maintenance_run_history_test.go ===
func TestDatabaseMaintenanceRunHistoryResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestDatabaseMaintenanceRunHistoryResource_basic")

=== ./internal/integrationtest/generative_ai_agent_data_ingestion_job_test.go ===
func TestGenerativeAiAgentDataIngestionJobResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestGenerativeAiAgentDataIngestionJobResource_basic")
func sweepGenerativeAiAgentDataIngestionJobResource(compartment string) error {
	generativeAiAgentClient := acctest.GetTestClients(&schema.ResourceData{}).GenerativeAiAgentClient()

=== ./internal/integrationtest/oda_oda_private_endpoint_test.go ===
func TestOdaOdaPrivateEndpointResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestOdaOdaPrivateEndpointResource_basic")
func sweepOdaOdaPrivateEndpointResource(compartment string) error {
	managementClient := acctest.GetTestClients(&schema.ResourceData{}).ManagementClient()

=== ./internal/integrationtest/identity_tag_namespace_test.go ===
func TestIdentityTagNamespaceResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestIdentityTagNamespaceResource_basic")
func sweepIdentityTagNamespaceResource(compartment string) error {
	// prevent tag deletion when testing, as its a time consuming and sequential operation permitted one per tenancy.

=== ./internal/integrationtest/management_agent_management_agent_data_source_test.go ===
func TestManagementAgentManagementAgentDataSourceResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestManagementAgentManagementAgentDataSourceResource_basic")
func getManagementAgentManagementAgentDataSourceKeyCompositeId(resourceName string) resource.ImportStateIdFunc {
	return func(s *terraform.State) (string, error) {
func testAccCheckManagementAgentManagementAgentDataSourceDestroy(s *terraform.State) error {
	noResourceFound := true
func sweepManagementAgentManagementAgentDataSourceResource(compartment string) error {
	managementAgentClient := acctest.GetTestClients(&schema.ResourceData{}).ManagementAgentClient()
func getManagementAgentManagementAgentDataSourceIds(compartment string) ([]string, error) {
	ids := acctest.GetResourceIdsToSweep(compartment, "ManagementAgentDataSourceId")
func ManagementAgentManagementAgentDataSourceSweepWaitCondition(response common.OCIOperationResponse) bool {
	// Only stop if the resource is available beyond 3 mins. As there could be an issue for the sweeper to delete the resource and manual intervention required.
func ManagementAgentManagementAgentDataSourceSweepResponseFetchOperation(client *tf_client.OracleClients, resourceId *string, retryPolicy *common.RetryPolicy) error {
	_, err := client.ManagementAgentClient().GetDataSource(context.Background(), oci_management_agent.GetDataSourceRequest{RequestMetadata: common.RequestMetadata{

=== ./internal/integrationtest/data_safe_sensitive_data_models_sensitive_column_test.go ===
func TestDataSafeSensitiveDataModelsSensitiveColumnResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestDataSafeSensitiveDataModelsSensitiveColumnResource_basic")
func sweepDataSafeSensitiveDataModelsSensitiveColumnResource(compartment string) error {
	dataSafeClient := acctest.GetTestClients(&schema.ResourceData{}).DataSafeClient()

=== ./internal/integrationtest/database_pluggable_databases_remote_clone_test.go ===
func TestDatabasePluggableDatabasesRemoteCloneResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestDatabasePluggableDatabasesRemoteCloneResource_basic")

=== ./internal/integrationtest/database_management_managed_database_attention_log_count_test.go ===
func TestDatabaseManagementManagedDatabaseAttentionLogCountResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestDatabaseManagementManagedDatabaseAttentionLogCountResource_basic")

=== ./internal/integrationtest/database_oneoff_patch_test.go ===
func TestDatabaseOneoffPatchResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestDatabaseOneoffPatchResource_basic")
func sweepDatabaseOneoffPatchResource(compartment string) error {
	databaseClient := acctest.GetTestClients(&schema.ResourceData{}).DatabaseClient()

=== ./internal/integrationtest/streaming_stream_test.go ===
func TestStreamingStreamResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestStreamingStreamResource_basic")
func sweepStreamingStreamResource(compartment string) error {
	streamAdminClient := acctest.GetTestClients(&schema.ResourceData{}).StreamAdminClient()

=== ./internal/integrationtest/database_exadata_infrastructure_compute_test.go ===
func TestDatabaseExadataInfrastructureComputeManagedResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestDatabaseExadataInfrastructureComputeManagedResource_basic")

=== ./internal/integrationtest/jms_java_family_test.go ===
func TestJmsJavaFamilyResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestJmsJavaFamilyResource_basic")

=== ./internal/integrationtest/apm_traces_query_quick_pick_test.go ===
func TestApmTracesQueryQuickPickResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestApmTracesQueryQuickPickResource_basic")

=== ./internal/integrationtest/database_exadb_vm_cluster_update_history_entry_test.go ===
func TestDatabaseExadbVmClusterUpdateHistoryEntryResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestDatabaseExadbVmClusterUpdateHistoryEntryResource_basic")

=== ./internal/integrationtest/generative_ai_agent_agent_endpoint_test.go ===
func TestGenerativeAiAgentAgentEndpointResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestGenerativeAiAgentAgentEndpointResource_basic")
func sweepGenerativeAiAgentAgentEndpointResource(compartment string) error {
	generativeAiAgentClient := acctest.GetTestClients(&schema.ResourceData{}).GenerativeAiAgentClient()

=== ./internal/integrationtest/os_management_hub_managed_instance_module_test.go ===
func TestOsManagementHubManagedInstanceModuleResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestOsManagementHubManagedInstanceModuleResource_basic")

=== ./internal/integrationtest/database_externalnoncontainerdatabases_stack_monitoring_test.go ===
func TestDatabaseExternalnoncontainerdatabasesStackMonitoringResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestDatabaseExternalnoncontainerdatabasesStackMonitoringResource_basic")

=== ./internal/integrationtest/osmanagement_managed_instance_module_stream_test.go ===
func TestOsmanagementManagedInstanceModuleStreamResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestOsmanagementManagedInstanceModuleStreamResource_basic")

=== ./internal/integrationtest/database_management_externalcontainerdatabase_external_container_dbm_features_management_test.go ===
func TestDatabaseManagementExternalcontainerdatabaseExternalContainerDbmFeaturesManagementResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestDatabaseManagementExternalcontainerdatabaseExternalContainerDbmFeaturesManagementResource_basic")

=== ./internal/integrationtest/stack_monitoring_maintenance_windows_retry_failed_operation_test.go ===
func TestStackMonitoringMaintenanceWindowsRetryFailedOperationResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestStackMonitoringMaintenanceWindowsRetryFailedOperationResource_basic")

=== ./internal/integrationtest/containerengine_cluster_kube_config_test.go ===
func TestContainerengineClusterKubeConfigResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestContainerengineClusterKubeConfigResource_basic")

=== ./internal/integrationtest/bds_bds_instance_patch_test.go ===
func TestBdsBdsInstancePatchResource_basic(t *testing.T) {
	t.Skip("Run manual with an older cluster with patch available")

=== ./internal/integrationtest/metering_computation_schedule_test.go ===
func TestMeteringComputationScheduleResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestMeteringComputationScheduleResource_basic")
func sweepMeteringComputationScheduleResource(compartment string) error {
	usageapiClient := acctest.GetTestClients(&schema.ResourceData{}).UsageapiClient()

=== ./internal/integrationtest/data_safe_audit_policy_test.go ===
func TestDataSafeAuditPolicyResource_basic(t *testing.T) {
	t.Skip("Create operation is not available for Audit Policy resource")

=== ./internal/integrationtest/jms_java_downloads_java_download_report_test.go ===
func TestJmsJavaDownloadsJavaDownloadReportResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestJmsJavaDownloadsJavaDownloadReportResource_basic")
func sweepJmsJavaDownloadsJavaDownloadReportResource(compartment string) error {
	javaDownloadClient := acctest.GetTestClients(&schema.ResourceData{}).JavaDownloadClient()

=== ./internal/integrationtest/streaming_stream_resource_test.go ===
func TestStreamingStreamWithStreamPoolIdResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestStreamingStreamResource_basic")

=== ./internal/integrationtest/functions_application_test.go ===
func TestFunctionsApplicationResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestFunctionsApplicationResource_basic")
func sweepFunctionsApplicationResource(compartment string) error {
	functionsManagementClient := acctest.GetTestClients(&schema.ResourceData{}).FunctionsManagementClient()

=== ./internal/integrationtest/load_balancer_backend_resource_test.go ===
func (s *ResourceLoadBalancerBackendTestSuite) SetupTest() {
	s.Providers = acctest.TestAccProviders
func (s *ResourceLoadBalancerBackendTestSuite) TestAccResourceLoadBalancerBackend_basic() {
	var res, res2 string
func TestResourceLoadBalancerBackendTestSuite(t *testing.T) {
	httpreplay.SetScenario("TestResourceLoadBalancerBackendTestSuite")

=== ./internal/integrationtest/adm_remediation_run_application_dependency_recommendation_test.go ===
func TestAdmRemediationRunApplicationDependencyRecommendationResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestAdmRemediationRunApplicationDependencyRecommendationResource_basic")

=== ./internal/integrationtest/data_safe_set_user_assessment_baseline_test.go ===
func TestDataSafeSetUserAssessmentBaselineResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestDataSafeSetUserAssessmentBaselineResource_basic")

=== ./internal/integrationtest/jms_java_downloads_java_download_token_test.go ===
func TestJmsJavaDownloadsJavaDownloadTokenResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestJmsJavaDownloadsJavaDownloadTokenResource_basic")
func sweepJmsJavaDownloadsJavaDownloadTokenResource(compartment string) error {
	javaDownloadClient := acctest.GetTestClients(&schema.ResourceData{}).JavaDownloadClient()

=== ./internal/integrationtest/database_management_managed_databases_change_database_parameter_test.go ===
func TestDatabaseManagementManagedDatabasesChangeDatabaseParameterResource_basic(t *testing.T) {
	//t.Skip("Skip this test till Database Management service provides a better way of testing this. It requires a live managed database instance")

=== ./internal/integrationtest/identity_domains_oauth_partner_certificate_test.go ===
func TestIdentityDomainsOAuthPartnerCertificateResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestIdentityDomainsOAuthPartnerCertificateResource_basic")
func sweepIdentityDomainsOAuthPartnerCertificateResource(compartment string) error {
	identityDomainsClient := acctest.GetTestClients(&schema.ResourceData{}).IdentityDomainsClient()

=== ./internal/integrationtest/database_db_systems_upgrade_test.go ===
func TestDatabaseDbSystemsUpgradeResource_basic(t *testing.T) {


=== ./internal/integrationtest/database_management_external_asm_configuration_test.go ===
func TestDatabaseManagementExternalAsmConfigurationResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestDatabaseManagementExternalAsmConfigurationResource_basic")

=== ./internal/integrationtest/data_safe_audit_profile_available_audit_volume_test.go ===
func TestDataSafeAuditProfileAvailableAuditVolumeResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestDataSafeAuditProfileAvailableAuditVolumeResource_basic")

=== ./internal/integrationtest/network_load_balancer_network_load_balancer_test.go ===
func TestNetworkLoadBalancerNetworkLoadBalancerResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestNetworkLoadBalancerNetworkLoadBalancerResource_basic")
func sweepNetworkLoadBalancerNetworkLoadBalancerResource(compartment string) error {
	networkLoadBalancerClient := acctest.GetTestClients(&schema.ResourceData{}).NetworkLoadBalancerClient()

=== ./internal/integrationtest/waa_web_app_acceleration_policy_test.go ===
func TestWaaWebAppAccelerationPolicyResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestWaaWebAppAccelerationPolicyResource_basic")
func sweepWaaWebAppAccelerationPolicyResource(compartment string) error {
	waaClient := acctest.GetTestClients(&schema.ResourceData{}).WaaClient()

=== ./internal/integrationtest/osmanagement_managed_instance_test.go ===
func TestOsmanagementManagedInstanceResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestOsmanagementManagedInstanceResource_basic")

=== ./internal/integrationtest/database_db_node_console_history_content_test.go ===
func TestDatabaseDbNodeConsoleHistoryContentResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestDatabaseDbNodeConsoleHistoryContentResource_basic")

=== ./internal/integrationtest/apm_synthetics_script_resource_test.go ===
func TestApmSyntheticsScriptResource(t *testing.T) {
	httpreplay.SetScenario("TestApmSyntheticsScriptResource_js")

=== ./internal/integrationtest/identity_domains_my_completed_approval_test.go ===
func TestIdentityDomainsMyCompletedApprovalResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestIdentityDomainsMyCompletedApprovalResource_basic")

=== ./internal/integrationtest/metering_computation_usage_statement_email_recipients_group_test.go ===
func TestMeteringComputationUsageStatementEmailRecipientsGroupResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestMeteringComputationUsageStatementEmailRecipientsGroupResource_basic")
func sweepMeteringComputationUsageStatementEmailRecipientsGroupResource(compartment string) error {
	usageapiClient := acctest.GetTestClients(&schema.ResourceData{}).UsageapiClient()

=== ./internal/integrationtest/vulnerability_scanning_host_scan_target_test.go ===
func TestVulnerabilityScanningHostScanTargetResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestVulnerabilityScanningHostScanTargetResource_basic")
func sweepVulnerabilityScanningHostScanTargetResource(compartment string) error {
	vulnerabilityScanningClient := acctest.GetTestClients(&schema.ResourceData{}).VulnerabilityScanningClient()

=== ./internal/integrationtest/load_balancer_hostname_test.go ===
func TestLoadBalancerHostnameResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestLoadBalancerHostnameResource_basic")
func sweepLoadBalancerHostnameResource(compartment string) error {
	loadBalancerClient := acctest.GetTestClients(&schema.ResourceData{}).LoadBalancerClient()

=== ./internal/integrationtest/opsi_awr_hub_awr_snapshot_test.go ===
func TestOpsiAwrHubAwrSnapshotResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestOpsiAwrHubAwrSnapshotResource_basic")

=== ./internal/integrationtest/management_agent_management_agent_count_test.go ===
func TestManagementAgentManagementAgentCountResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestManagementAgentManagementAgentCountResource_basic")

=== ./internal/integrationtest/osp_gateway_address_test.go ===
func TestOspGatewayAddressResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestOspGatewayAddressResource_basic")

=== ./internal/integrationtest/database_management_external_cluster_instance_test.go ===
func TestDatabaseManagementExternalClusterInstanceResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestDatabaseManagementExternalClusterInstanceResource_basic")

=== ./internal/integrationtest/dataflow_invoke_run_test.go ===
func TestDataflowInvokeRunResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestDataflowInvokeRunResource_basic")
func sweepDataflowInvokeRunResource(compartment string) error {
	dataFlowClient := acctest.GetTestClients(&schema.ResourceData{}).DataFlowClient()

=== ./internal/integrationtest/database_vm_cluster_patch_test.go ===
func TestDatabaseVmClusterPatchResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestDatabaseVmClusterPatchResource_basic")

=== ./internal/integrationtest/blockchain_blockchain_platform_patch_test.go ===
func TestBlockchainBlockchainPlatformPatchResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestBlockchainBlockchainPlatformPatchResource_basic")

=== ./internal/integrationtest/database_management_external_db_system_database_managements_management_test.go ===
func TestDatabaseManagementExternalDbSystemDatabaseManagementsManagementResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestDatabaseManagementExternalDbSystemDatabaseManagementsManagementResource_basic")

=== ./internal/integrationtest/apm_synthetics_script_test.go ===
func TestApmSyntheticsScriptResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestApmSyntheticsScriptResource_basic")
func sweepApmSyntheticsScriptResource(compartment string) error {
	apmSyntheticClient := acctest.GetTestClients(&schema.ResourceData{}).ApmSyntheticClient()

=== ./internal/integrationtest/desktops_desktop_pool_volume_test.go ===
func TestDesktopsDesktopPoolVolumeResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestDesktopsDesktopPoolVolumeResource_basic")

=== ./internal/integrationtest/network_firewall_network_firewall_policy_address_list_test.go ===
func TestNetworkFirewallNetworkFirewallPolicyAddressListResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestNetworkFirewallNetworkFirewallPolicyAddressListResource_basic")
func sweepNetworkFirewallNetworkFirewallPolicyAddressListResource(compartment string) error {
	networkFirewallClient := acctest.GetTestClients(&schema.ResourceData{}).NetworkFirewallClient()

=== ./internal/integrationtest/datascience_fast_launch_job_config_test.go ===
func TestDatascienceFastLaunchJobConfigResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestDatascienceFastLaunchJobConfigResource_basic")

=== ./internal/integrationtest/file_storage_outbound_connector_test.go ===
func TestFileStorageOutboundConnectorResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestFileStorageOutboundConnectorResource_basic")
func sweepFileStorageOutboundConnectorResource(compartment string) error {
	fileStorageClient := acctest.GetTestClients(&schema.ResourceData{}).FileStorageClient()

=== ./internal/integrationtest/devops_deploy_artifact_test.go ===
func TestDevopsDeployArtifactResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestDevopsDeployArtifactResource_basic")
func sweepDevopsDeployArtifactResource(compartment string) error {
	deployArtifactClient := acctest.GetTestClients(&schema.ResourceData{}).DevopsClient()

=== ./internal/integrationtest/os_management_hub_software_package_test.go ===
func TestOsManagementHubSoftwarePackageResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestOsManagementHubSoftwarePackageResource_basic")

=== ./internal/integrationtest/license_manager_top_utilized_resource_test.go ===
func TestLicenseManagerTopUtilizedResourceResource_basic(t *testing.T) {
	t.Skip("The response to this API may take upto 4 hours to populate and there is no work request ID to track it")

=== ./internal/integrationtest/artifacts_generic_artifact_test.go ===
func TestArtifactsGenericArtifactResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestArtifactsGenericArtifactResource_basic")
func sweepArtifactsGenericArtifactResource(compartment string) error {
	artifactsClient := acctest.GetTestClients(&schema.ResourceData{}).ArtifactsClient()

=== ./internal/integrationtest/network_firewall_network_firewall_policy_service_list_test.go ===
func TestNetworkFirewallNetworkFirewallPolicyServiceListResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestNetworkFirewallNetworkFirewallPolicyServiceListResource_basic")
func sweepNetworkFirewallNetworkFirewallPolicyServiceListResource(compartment string) error {
	networkFirewallClient := acctest.GetTestClients(&schema.ResourceData{}).NetworkFirewallClient()

=== ./internal/integrationtest/database_database_backup_test.go ===
func TestDatabaseDatabaseBackupResource_basic(t *testing.T) {
	// Skip the test because CreateDatabaseFromBackupDetails missing some parameters

=== ./internal/integrationtest/database_management_managed_database_user_proxied_for_user_test.go ===
func TestDatabaseManagementManagedDatabaseUserProxiedForUserResource_basic(t *testing.T) {
	//t.Skip("Skip this test till Database Management service provides a better way of testing this. It requires a live managed database instance")

=== ./internal/integrationtest/stack_monitoring_monitored_resource_task_test.go ===
func TestStackMonitoringMonitoredResourceTaskResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestStackMonitoringMonitoredResourceTaskResource_basic")

=== ./internal/integrationtest/data_safe_calculate_audit_volume_collected_test.go ===
func TestDataSafeCalculateAuditVolumeCollectedResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestDataSafeCalculateAuditVolumeCollectedResource_basic")

=== ./internal/integrationtest/database_db_system_resource_allvm_test.go ===
func TestResourceDatabaseDBSystemAllVM(t *testing.T) {
	if strings.Contains(utils.GetEnvSettingWithBlankDefault("suppressed_tests"), "DBSystem_allVM") {

=== ./internal/integrationtest/em_warehouse_em_warehouse_test.go ===
func TestEmWarehouseEmWarehouseResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestEmWarehouseEmWarehouseResource_basic")
func sweepEmWarehouseEmWarehouseResource(compartment string) error {
	emWarehouseClient := acctest.GetTestClients(&schema.ResourceData{}).EmWarehouseClient()

=== ./internal/integrationtest/database_data_guard_association_resource_test.go ===
func TestResourceDatabaseDataGuardAssociation_Exadatabasic(t *testing.T) {
	httpreplay.SetScenario("TestResourceDatabaseDataGuardAssociation_Exadatabasic")
func TestResourceDatabaseDataGuardAssociation_ExadataExistingVMClusterbasic(t *testing.T) {
	httpreplay.SetScenario("TestResourceDatabaseDataGuardAssociation_ExadataExistingVMClusterbasic")
func TestResourceDatabaseDataGuardAssociation_ExadataExistingDBHome(t *testing.T) {
	httpreplay.SetScenario("TestResourceDatabaseDataGuardAssociation_ExadataExistingDBHome")
func TestResourceDatabaseDataGuardAssociation_ExadataExistingVMClusterSetup(t *testing.T) {
	httpreplay.SetScenario("TestResourceDatabaseDataGuardAssociation_ExadataExistingVMClusterSetup")

=== ./internal/integrationtest/data_safe_sql_firewall_allowed_sql_test.go ===
func TestDataSafeSqlFirewallAllowedSqlResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestDataSafeSqlFirewallAllowedSqlResource_basic")
func sweepDataSafeSqlFirewallAllowedSqlResource(compartment string) error {
	dataSafeClient := acctest.GetTestClients(&schema.ResourceData{}).DataSafeClient()

=== ./internal/integrationtest/osmanagement_software_source_module_stream_profile_test.go ===
func TestOsmanagementSoftwareSourceModuleStreamProfileResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestOsmanagementSoftwareSourceModuleStreamProfileResource_basic")

=== ./internal/integrationtest/os_management_hub_software_package_software_source_test.go ===
func TestOsManagementHubSoftwarePackageSoftwareSourceResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestOsManagementHubSoftwarePackageSoftwareSourceResource_basic")

=== ./internal/integrationtest/log_analytics_log_analytics_log_group_test.go ===
func TestLogAnalyticsLogAnalyticsLogGroupResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestLogAnalyticsLogAnalyticsLogGroupResource_basic")
func sweepLogAnalyticsLogAnalyticsLogGroupResource(compartment string) error {
	logAnalyticsClient := acctest.GetTestClients(&schema.ResourceData{}).LogAnalyticsClient()

=== ./internal/integrationtest/capacity_management_internal_occ_handover_resource_block_test.go ===
func TestCapacityManagementInternalOccHandoverResourceBlockResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestCapacityManagementInternalOccHandoverResourceBlockResource_basic")

=== ./internal/integrationtest/data_safe_security_assessment_security_feature_analytic_test.go ===
func TestDataSafeSecurityAssessmentSecurityFeatureAnalyticResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestDataSafeSecurityAssessmentSecurityFeatureAnalyticResource_basic")

=== ./internal/integrationtest/core_subnet_realm_test.go ===
func TestGovSpecificCoreSubnetResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestGovSpecificCoreSubnetResource_basic")

=== ./internal/integrationtest/metering_computation_query_test.go ===
func TestMeteringComputationQueryResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestMeteringComputationQueryResource_basic")
func sweepMeteringComputationQueryResource(compartment string) error {
	usageapiClient := acctest.GetTestClients(&schema.ResourceData{}).UsageapiClient()

=== ./internal/integrationtest/fleet_software_update_fsu_collection_test.go ===
func TestFleetSoftwareUpdateFsuCollectionResource_DB_19(t *testing.T) {
	httpreplay.SetScenario("TestFleetSoftwareUpdateFsuCollectionResource_basic")
func TestFleetSoftwareUpdateFsuCollectionResource_GI_19(t *testing.T) {
	httpreplay.SetScenario("TestFleetSoftwareUpdateFsuCollectionGIResource_basic")
func TestFleetSoftwareUpdateFsuCollectionResource_DB_23ai(t *testing.T) {
	httpreplay.SetScenario("TestFleetSoftwareUpdateFsuCollectionResource_basic")
func TestFleetSoftwareUpdateFsuCollectionResource_GI_23ai(t *testing.T) {
	httpreplay.SetScenario("TestFleetSoftwareUpdateFsuCollectionGIResource_basic")
func sweepFleetSoftwareUpdateFsuCollectionResource(compartment string) error {
	fleetSoftwareUpdateClient := acctest.GetTestClients(&schema.ResourceData{}).FleetSoftwareUpdateClient()

=== ./internal/integrationtest/database_autonomous_database_instance_wallet_management_test.go ===
func TestDatabaseAutonomousDatabaseInstanceWalletManagementResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestDatabaseAutonomousDatabaseInstanceWalletManagementResource_basic")

=== ./internal/integrationtest/database_management_named_credential_test.go ===
func TestDatabaseManagementNamedCredentialResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestDatabaseManagementNamedCredentialResource_basic")
func sweepDatabaseManagementNamedCredentialResource(compartment string) error {
	dbManagementClient := acctest.GetTestClients(&schema.ResourceData{}).DbManagementClient()

=== ./internal/integrationtest/usage_proxy_subscription_product_test.go ===
func TestUsageProxySubscriptionProductResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestUsageProxySubscriptionProductResource_basic")

=== ./internal/integrationtest/fleet_apps_management_announcement_test.go ===
func TestFleetAppsManagementAnnouncementResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestFleetAppsManagementAnnouncementResource_basic")

=== ./internal/integrationtest/os_management_hub_management_station_mirror_test.go ===
func TestOsManagementHubManagementStationMirrorResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestOsManagementHubManagementStationMirrorResource_basic")

=== ./internal/integrationtest/devops_deployment_pipeline_redployment_test.go ===
func TestDevopsDeploymentResource_pipelineRedeployment(t *testing.T) {
	httpreplay.SetScenario("TestDevopsDeploymentResource_pipelineRedeployment")

=== ./internal/integrationtest/opsi_operations_insights_warehouse_test.go ===
func TestOpsiOperationsInsightsWarehouseResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestOpsiOperationsInsightsWarehouseResource_basic")
func sweepOpsiOperationsInsightsWarehouseResource(compartment string) error {
	operationsInsightsClient := acctest.GetTestClients(&schema.ResourceData{}).OperationsInsightsClient()

=== ./internal/integrationtest/osmanagement_managed_instance_stream_profile_test.go ===
func TestOsmanagementManagedInstanceStreamProfileResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestOsmanagementManagedInstanceStreamProfileResource_basic")

=== ./internal/integrationtest/data_safe_sql_firewall_violation_test.go ===
func TestDataSafeSqlFirewallViolationResource_basic(t *testing.T) {
	t.Skip("Create operation is not available for SQL Firewall Violation resource")

=== ./internal/integrationtest/database_autonomous_database_resource_from_backup_with_latest_test.go ===
func TestResourceDatabaseAutonomousDatabaseResource_FromBackupWithLatest(t *testing.T) {
	httpreplay.SetScenario("TestResourceDatabaseAutonomousDatabaseResource_FromBackupWithLatest")

=== ./internal/integrationtest/data_safe_audit_profile_test.go ===
func TestDataSafeAuditProfileResource_basic(t *testing.T) {
	t.Skip("Create/Delete operation is not available for Audit Profile resource")

=== ./internal/integrationtest/database_management_managed_database_sql_plan_baseline_test.go ===
func TestDatabaseManagementManagedDatabaseSqlPlanBaselineResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestDatabaseManagementManagedDatabaseSqlPlanBaselineResource_basic")

=== ./internal/integrationtest/dataflow_application_test.go ===
func TestDataflowApplicationResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestDataflowApplicationResource_basic")
func sweepDataflowApplicationResource(compartment string) error {
	dataFlowClient := acctest.GetTestClients(&schema.ResourceData{}).DataFlowClient()

=== ./internal/integrationtest/onesubscription_billing_schedule_test.go ===
func TestOnesubscriptionBillingScheduleResource_basic(t *testing.T) {
	t.Skip("Skipping Test:TestOnesubscriptionBillingScheduleResource_basic")

=== ./internal/integrationtest/data_safe_sdm_masking_policy_difference_test.go ===
func TestDataSafeSdmMaskingPolicyDifferenceResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestDataSafeSdmMaskingPolicyDifferenceResource_basic")
func sweepDataSafeSdmMaskingPolicyDifferenceResource(compartment string) error {
	dataSafeClient := acctest.GetTestClients(&schema.ResourceData{}).DataSafeClient()

=== ./internal/integrationtest/database_vm_cluster_network_download_config_file_test.go ===
func TestDatabaseVmClusterNetworkDownloadConfigFileResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestDatabaseVmClusterNetworkDownloadConfigFileResource_basic")

=== ./internal/integrationtest/core_compute_capacity_report_test.go ===
func TestCoreComputeCapacityReportResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestCoreComputeCapacityReportResource_basic")
func TestCoreComputeCapacityReportResource_withShapeConfig(t *testing.T) {
	httpreplay.SetScenario("TestCoreComputeCapacityReportResource_withShapeConfig")

=== ./internal/integrationtest/log_analytics_namespace_storage_recalled_data_size_test.go ===
func TestLogAnalyticsNamespaceStorageRecalledDataSizeResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestLogAnalyticsNamespaceStorageRecalledDataSizeResource_basic")

=== ./internal/integrationtest/os_management_hub_managed_instance_installed_windows_update_test.go ===
func TestOsManagementHubManagedInstanceInstalledWindowsUpdateResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestOsManagementHubManagedInstanceInstalledWindowsUpdateResource_basic")

=== ./internal/integrationtest/identity_group_test.go ===
func TestIdentityGroupResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestIdentityGroupResource_basic")

=== ./internal/integrationtest/opsi_host_insight_em_host_test.go ===
func TestOpsiEmHostInsightResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestOpsiEmHostInsightResource_basic")
func sweepOpsiEmHostInsightResource(compartment string) error {
	operationsInsightsClient := acctest.GetTestClients(&schema.ResourceData{}).OperationsInsightsClient()

=== ./internal/integrationtest/usage_proxy_resource_quota_test.go ===
func TestUsageProxyResourceQuotaResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestUsageProxyResourceQuotaResource_basic")

=== ./internal/integrationtest/identity_domains_self_registration_profile_test.go ===
func TestIdentityDomainsSelfRegistrationProfileResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestIdentityDomainsSelfRegistrationProfileResource_basic")
func sweepIdentityDomainsSelfRegistrationProfileResource(compartment string) error {
	identityDomainsClient := acctest.GetTestClients(&schema.ResourceData{}).IdentityDomainsClient()

=== ./internal/integrationtest/resourcemanager_private_endpoint_test.go ===
func TestResourcemanagerPrivateEndpointResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestResourcemanagerPrivateEndpointResource_basic")
func testAccCheckResourcemanagerPrivateEndpointDestroy(s *terraform.State) error {
	noResourceFound := true
func sweepResourcemanagerPrivateEndpointResource(compartment string) error {
	resourceManagerClient := acctest.GetTestClients(&schema.ResourceData{}).ResourceManagerClient()
func getResourcemanagerPrivateEndpointIds(compartment string) ([]string, error) {
	ids := acctest.GetResourceIdsToSweep(compartment, "PrivateEndpointId")
func ResourcemanagerPrivateEndpointSweepWaitCondition(response common.OCIOperationResponse) bool {
	// Only stop if the resource is available beyond 3 mins. As there could be an issue for the sweeper to delete the resource and manual intervention required.
func ResourcemanagerPrivateEndpointSweepResponseFetchOperation(client *tf_client.OracleClients, resourceId *string, retryPolicy *common.RetryPolicy) error {
	_, err := client.ResourceManagerClient().GetPrivateEndpoint(context.Background(), oci_resourcemanager.GetPrivateEndpointRequest{

=== ./internal/integrationtest/mysql_mysql_backup_test.go ===
func TestMysqlMysqlBackupResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestMysqlMysqlBackupResource_basic")
func sweepMysqlMysqlBackupResource(compartment string) error {
	dbBackupsClient := acctest.GetTestClients(&schema.ResourceData{}).DbBackupsClient()

=== ./internal/integrationtest/logging_log_group_test.go ===
func TestLoggingLogGroupResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestLoggingLogGroupResource_basic")
func sweepLoggingLogGroupResource(compartment string) error {
	loggingManagementClient := acctest.GetTestClients(&schema.ResourceData{}).LoggingManagementClient()

=== ./internal/integrationtest/identity_authentication_policy_test.go ===
func TestIdentityAuthenticationPolicyResource_basic(t *testing.T) {
	t.Skip("Skip this test as this might lock users out of the tenancy and they will not be able to login through console")

=== ./internal/integrationtest/apm_apm_domain_test.go ===
func TestApmApmDomainResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestApmApmDomainResource_basic")
func sweepApmApmDomainResource(compartment string) error {
	apmDomainClient := acctest.GetTestClients(&schema.ResourceData{}).ApmDomainClient()

=== ./internal/integrationtest/database_exadb_vm_cluster_pluggable_database_remote_clone_test.go ===
func TestDatabaseExaDbVmClusterPluggableDatabaseResource_remoteThinClone(t *testing.T) {
	httpreplay.SetScenario("TestDatabaseExaDbVmClusterPluggableDatabaseResource_remoteThinClone")

=== ./internal/integrationtest/functions_function_test.go ===
func TestFunctionsFunctionResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestFunctionsFunctionResource_basic")
func sweepFunctionsFunctionResource(compartment string) error {
	functionsManagementClient := acctest.GetTestClients(&schema.ResourceData{}).FunctionsManagementClient()

=== ./internal/integrationtest/devops_repository_mirror_record_test.go ===
func TestDevopsRepositoryMirrorRecordResource_basic(t *testing.T) {
	if !strings.Contains(utils.GetEnvSettingWithBlankDefault("enabled_tests"), "RepositoryMirrorRecord") {

=== ./internal/integrationtest/devops_repository_archive_content_test.go ===
func TestDevopsRepositoryArchiveContentResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestDevopsRepositoryArchiveContentResource_basic")

=== ./internal/integrationtest/data_safe_masking_report_management_test.go ===
func TestDataSafeMaskingReportManagementResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestDataSafeMaskingReportManagementResource_basic")

=== ./internal/integrationtest/devops_trigger_bitbucket_server_test.go ===
func TestDevopsBitbucketServerTriggerResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestDevopsBitbucketServerTriggerResource_basic")

=== ./internal/integrationtest/os_management_hub_software_source_package_group_test.go ===
func TestOsManagementHubSoftwareSourcePackageGroupResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestOsManagementHubSoftwareSourcePackageGroupResource_basic")

=== ./internal/integrationtest/data_labeling_service_dataset_test.go ===
func TestDataLabelingServiceDatasetResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestDataLabelingServiceDatasetResource_basic")
func sweepDataLabelingServiceDatasetResource(compartment string) error {
	dataLabelingManagementClient := acctest.GetTestClients(&schema.ResourceData{}).DataLabelingManagementClient()

=== ./internal/integrationtest/fleet_apps_management_fleet_property_test.go ===
func TestFleetAppsManagementFleetPropertyResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestFleetAppsManagementFleetPropertyResource_basic")
func sweepFleetAppsManagementFleetPropertyResource(compartment string) error {
	fleetAppsManagementClient := acctest.GetTestClients(&schema.ResourceData{}).FleetAppsManagementClient()

=== ./internal/integrationtest/database_management_managed_database_sql_plan_baseline_job_test.go ===
func TestDatabaseManagementManagedDatabaseSqlPlanBaselineJobResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestDatabaseManagementManagedDatabaseSqlPlanBaselineJobResource_basic")

=== ./internal/integrationtest/ai_vision_project_test.go ===
func TestAiVisionProjectResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestAiVisionProjectResource_basic")
func sweepAiVisionProjectResource(compartment string) error {
	aiServiceVisionClient := acctest.GetTestClients(&schema.ResourceData{}).AiServiceVisionClient()

=== ./internal/integrationtest/file_storage_file_system_test.go ===
func TestFileStorageFileSystemResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestFileStorageFileSystemResource_basic")
func sweepFileStorageFileSystemResource(compartment string) error {
	fileStorageClient := acctest.GetTestClients(&schema.ResourceData{}).FileStorageClient()

=== ./internal/integrationtest/os_management_hub_managed_instance_group_attach_software_sources_management_test.go ===
func TestOsManagementHubManagedInstanceGroupAttachSoftwareSourcesManagementResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestOsManagementHubManagedInstanceGroupAttachSoftwareSourcesManagementResource_basic")

=== ./internal/integrationtest/health_checks_ping_probe_result_test.go ===
func TestHealthChecksPingProbeResultResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestHealthChecksPingProbeResultResource_basic")

=== ./internal/integrationtest/devops_deploy_artifact_generic_test.go ===
func TestDevopsDeployArtifactResource_generic(t *testing.T) {
	httpreplay.SetScenario("TestDevopsDeployArtifactResource_generic")

=== ./internal/integrationtest/core_service_test.go ===
func TestCoreServiceResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestCoreServiceResource_basic")

=== ./internal/integrationtest/capacity_management_occ_availability_catalog_test.go ===
func TestCapacityManagementOccAvailabilityCatalogResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestCapacityManagementOccAvailabilityCatalogResource_basic")
func sweepCapacityManagementOccAvailabilityCatalogResource(compartment string) error {
	capacityManagementClient := acctest.GetTestClients(&schema.ResourceData{}).CapacityManagementClient()

=== ./internal/integrationtest/data_safe_masking_policies_masking_column_test.go ===
func TestDataSafeMaskingPoliciesMaskingColumnResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestDataSafeMaskingPoliciesMaskingColumnResource_basic	")
func sweepDataSafeMaskingPoliciesMaskingColumnResource(compartment string) error {
	dataSafeClient := acctest.GetTestClients(&schema.ResourceData{}).DataSafeClient()

=== ./internal/integrationtest/database_management_managed_database_optimizer_statistics_advisor_execution_test.go ===
func TestDatabaseManagementManagedDatabaseOptimizerStatisticsAdvisorExecutionResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestDatabaseManagementManagedDatabaseOptimizerStatisticsAdvisorExecutionResource_basic")

=== ./internal/integrationtest/artifacts_container_configuration_test.go ===
func TestArtifactsContainerConfigurationResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestArtifactsContainerConfigurationResource_basic")

=== ./internal/integrationtest/devops_deploy_stage_helm_test.go ===
func TestDevopsDeployStageResource_deployHelm(t *testing.T) {
	httpreplay.SetScenario("TestDevopsDeployStageResource_deployHelm")

=== ./internal/integrationtest/os_management_hub_software_source_test.go ===
func TestOsManagementHubSoftwareSourceResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestOsManagementHubSoftwareSourceResource_basic")
func sweepOsManagementHubSoftwareSourceResource(compartment string) error {
	softwareSourceClient := acctest.GetTestClients(&schema.ResourceData{}).SoftwareSourceClient()

=== ./internal/integrationtest/data_safe_security_policy_deployment_security_policy_entry_state_test.go ===
func TestDataSafeSecurityPolicyDeploymentSecurityPolicyEntryStateResource_basic(t *testing.T) {
	t.Skip("Skipping this test as the security policy deployment ocid and entry state id are hardcoded and may not exist when the test runs")

=== ./internal/integrationtest/devops_deploy_stage_oke_canary_traffic_shift_test.go ===
func TestDevopsDeployStageResource_okeCanaryTrafficShift(t *testing.T) {
	httpreplay.SetScenario("TestDevopsDeployStageResource_okeCanaryTrafficShift")

=== ./internal/integrationtest/cloud_migrations_migration_plan_test.go ===
func TestCloudMigrationsMigrationPlanResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestCloudMigrationsMigrationPlanResource_basic")
func sweepCloudMigrationsMigrationPlanResource(compartment string) error {
	migrationClient := acctest.GetTestClients(&schema.ResourceData{}).MigrationClient()

=== ./internal/integrationtest/containerengine_node_pool_test.go ===
func TestContainerengineNodePoolResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestContainerengineNodePoolResource_basic")
func sweepContainerengineNodePoolResource(compartment string) error {
	containerEngineClient := acctest.GetTestClients(&schema.ResourceData{}).ContainerEngineClient()

=== ./internal/integrationtest/identity_policy_test.go ===
func TestIdentityPolicyResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestIdentityPolicyResource_basic")

=== ./internal/integrationtest/core_volume_attachment_test.go ===
func TestCoreVolumeAttachmentResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestCoreVolumeAttachmentResource_basic")
func sweepCoreVolumeAttachmentResource(compartment string) error {
	computeClient := acctest.GetTestClients(&schema.ResourceData{}).ComputeClient()

=== ./internal/integrationtest/resource_scheduler_schedule_defined_tag_filter_test.go ===
func TestResourceSchedulerScheduleDefinedTagResourceFilter(t *testing.T) {
	httpreplay.SetScenario("TestResourceSchedulerScheduleDefinedTagResourceFilter")

=== ./internal/integrationtest/identity_domains_approval_workflow_assignment_test.go ===
func TestIdentityDomainsApprovalWorkflowAssignmentResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestIdentityDomainsApprovalWorkflowAssignmentResource_basic")
func sweepIdentityDomainsApprovalWorkflowAssignmentResource(compartment string) error {
	identityDomainsClient := acctest.GetTestClients(&schema.ResourceData{}).IdentityDomainsClient()

=== ./internal/integrationtest/data_safe_unset_user_assessment_baseline_management_test.go ===
func TestDataSafeUnsetUserAssessmentBaselineManagementResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestDataSafeUnsetUserAssessmentBaselineManagementResource_basic")

=== ./internal/integrationtest/database_exadata_infrastructure_storage_test.go ===
func TestDatabaseExadataInfrastructureStorageResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestDatabaseExadataInfrastructureStorageResource_basic")

=== ./internal/integrationtest/database_external_database_connector_test.go ===
func TestDatabaseExternalDatabaseConnectorResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestDatabaseExternalDatabaseConnectorResource_basic")
func sweepDatabaseExternalDatabaseConnectorResource(compartment string) error {
	databaseClient := acctest.GetTestClients(&schema.ResourceData{}).DatabaseClient()

=== ./internal/integrationtest/objectstorage_bucket_test.go ===
func TestObjectStorageBucketResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestObjectStorageBucketResource_basic")
func sweepObjectStorageBucketResource(compartment string) error {
	objectStorageClient := acctest.GetTestClients(&schema.ResourceData{}).ObjectStorageClient()

=== ./internal/integrationtest/os_management_hub_event_test.go ===
func TestOsManagementHubEventResource_basic(t *testing.T) {
	/*	httpreplay.SetScenario("TestOsManagementHubEventResource_basic")
func sweepOsManagementHubEventResource(compartment string) error {
	eventClient := acctest.GetTestClients(&schema.ResourceData{}).OsmhEventClient()

=== ./internal/integrationtest/core_volume_group_test.go ===
func TestCoreVolumeGroupResource_basic(t *testing.T) {
	if httpreplay.ShouldRetryImmediately() {
func sweepCoreVolumeGroupResource(compartment string) error {
	blockstorageClient := acctest.GetTestClients(&schema.ResourceData{}).BlockstorageClient()

=== ./internal/integrationtest/golden_gate_database_registration_test.go ===
func TestGoldenGateDatabaseRegistrationResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestGoldenGateDatabaseRegistrationResource_basic")
func sweepGoldenGateDatabaseRegistrationResource(compartment string) error {
	goldenGateClient := acctest.GetTestClients(&schema.ResourceData{}).GoldenGateClient()

=== ./internal/integrationtest/psql_backup_test.go ===
func TestPsqlBackupResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestPsqlBackupResource_basic")
func sweepPsqlBackupResource(compartment string) error {
	postgresqlClient := acctest.GetTestClients(&schema.ResourceData{}).PostgresqlClient()

=== ./internal/integrationtest/log_analytics_namespace_ingest_time_rule_test.go ===
func TestLogAnalyticsNamespaceIngestTimeRuleResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestLogAnalyticsNamespaceIngestTimeRuleResource_basic")
func sweepLogAnalyticsNamespaceIngestTimeRuleResource(compartment string) error {
	logAnalyticsClient := acctest.GetTestClients(&schema.ResourceData{}).LogAnalyticsClient()

=== ./internal/integrationtest/stack_monitoring_monitored_resources_associate_monitored_resource_test.go ===
func TestStackMonitoringMonitoredResourcesAssociateMonitoredResourceResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestStackMonitoringMonitoredResourcesAssociateMonitoredResourceResource_basic")

=== ./internal/integrationtest/database_cloud_vm_cluster_iorm_config_test.go ===
func TestDatabaseCloudVmClusterIormConfigResource_basic(t *testing.T) {


=== ./internal/integrationtest/database_db_system_resource_exadata_test.go ===
func TestResourceDatabaseDBSystemExaData(t *testing.T) {
	httpreplay.SetScenario("TestResourceDatabaseDBSystemExaData")

=== ./internal/integrationtest/capacity_management_occ_customer_group_test.go ===
func TestCapacityManagementOccCustomerGroupResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestCapacityManagementOccCustomerGroupResource_basic")
func sweepCapacityManagementOccCustomerGroupResource(compartment string) error {
	capacityManagementClient := acctest.GetTestClients(&schema.ResourceData{}).CapacityManagementClient()

=== ./internal/integrationtest/bds_bds_instance_patch_action_test.go ===
func TestBdsBdsInstancePatchActionResource_basic(t *testing.T) {
	//t.Skip("Run manual with an older cluster with patch available")

=== ./internal/integrationtest/network_firewall_network_firewall_policy_application_group_test.go ===
func TestNetworkFirewallNetworkFirewallPolicyApplicationGroupResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestNetworkFirewallNetworkFirewallPolicyApplicationGroupResource_basic")
func sweepNetworkFirewallNetworkFirewallPolicyApplicationGroupResource(compartment string) error {
	networkFirewallClient := acctest.GetTestClients(&schema.ResourceData{}).NetworkFirewallClient()

=== ./internal/integrationtest/datascience_model_deployment_shape_test.go ===
func TestDatascienceModelDeploymentShapeResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestDatascienceModelDeploymentShapeResource_basic")

=== ./internal/integrationtest/monitoring_metric_test.go ===
func TestMonitoringMetricResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestMonitoringMetricResource_basic")

=== ./internal/integrationtest/identity_domains_social_identity_provider_test.go ===
func TestIdentityDomainsSocialIdentityProviderResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestIdentityDomainsSocialIdentityProviderResource_basic")
func sweepIdentityDomainsSocialIdentityProviderResource(compartment string) error {
	identityDomainsClient := acctest.GetTestClients(&schema.ResourceData{}).IdentityDomainsClient()

=== ./internal/integrationtest/devops_trigger_gitlab_test.go ===
func TestDevopsGitlabTriggerResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestDevopsGitlabTriggerResource_basic")

=== ./internal/integrationtest/audit_audit_event_test.go ===
func TestAuditAuditEventResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestAuditAuditEventResource_basic")

=== ./internal/integrationtest/dns_zone_stage_dnssec_key_version_test.go ===
func TestDnsZoneStageDnssecKeyVersionResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestDnsZoneStageDnssecKeyVersionResource_basic")

=== ./internal/integrationtest/core_internet_gateway_resource_test.go ===
func (s *ResourceCoreInternetGatewayTestSuite) SetupTest() {
	s.Providers = acctest.TestAccProviders
func (s *ResourceCoreInternetGatewayTestSuite) TestAccResourceCoreInternetGateway_basic() {
	var resId, resId2 string
func TestResourceCoreInternetGatewayTestSuite(t *testing.T) {
	httpreplay.SetScenario("TestResourceCoreInternetGatewayTestSuite")

=== ./internal/integrationtest/osmanagement_software_source_stream_profile_test.go ===
func TestOsmanagementSoftwareSourceStreamProfileResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestOsmanagementSoftwareSourceStreamProfileResource_basic")

=== ./internal/integrationtest/fleet_apps_management_scheduler_definition_test.go ===
func TestFleetAppsManagementSchedulerDefinitionResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestFleetAppsManagementSchedulerDefinitionResource_basic")
func sweepFleetAppsManagementSchedulerDefinitionResource(compartment string) error {
	fleetAppsManagementOperationsClient := acctest.GetTestClients(&schema.ResourceData{}).FleetAppsManagementOperationsClient()

=== ./internal/integrationtest/database_migration_migration_object_type_test.go ===
func TestDatabaseMigrationMigrationObjectTypeResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestDatabaseMigrationMigrationObjectTypeResource_basic")

=== ./internal/integrationtest/devops_build_pipeline_bitbucket_server_build_stage_test.go ===
func TestDevopsBuildPipelineBuildStageBitbucketServerResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestDevopsBuildPipelineBuildStageBitbucketServerResource_basic")

=== ./internal/integrationtest/log_analytics_namespace_storage_recall_count_test.go ===
func TestLogAnalyticsNamespaceStorageRecallCountResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestLogAnalyticsNamespaceStorageRecallCountResource_basic")

=== ./internal/integrationtest/core_dedicated_vm_host_shape_test.go ===
func TestCoreDedicatedVmHostShapeResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestCoreDedicatedVmHostShapeResource_basic")

=== ./internal/integrationtest/core_volume_backup_test.go ===
func TestCoreVolumeBackupResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestCoreVolumeBackupResource_basic")
func sweepCoreVolumeBackupResource(compartment string) error {
	blockstorageClient := acctest.GetTestClients(&schema.ResourceData{}).BlockstorageClient()

=== ./internal/integrationtest/database_management_managed_database_sql_tuning_advisor_tasks_summary_report_test.go ===
func TestDatabaseManagementManagedDatabaseSqlTuningAdvisorTasksSummaryReportResource_basic(t *testing.T) {
	//t.Skip("Skip this test till Database Management service provides a better way of testing this. It requires a live managed database instance")

=== ./internal/integrationtest/identity_domains_resource_type_schema_attribute_test.go ===
func TestIdentityDomainsResourceTypeSchemaAttributeResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestIdentityDomainsResourceTypeSchemaAttributeResource_basic")

=== ./internal/integrationtest/fleet_apps_management_task_record_test.go ===
func TestFleetAppsManagementTaskRecordResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestFleetAppsManagementTaskRecordResource_basic")

=== ./internal/integrationtest/identity_user_group_membership_resource_test.go ===
func (s *ResourceIdentityUserGroupMembershipTestSuite) SetupTest() {
	token, tokenFn := acctest.TokenizeWithHttpReplay("identity_user_group_resource")
func (s *ResourceIdentityUserGroupMembershipTestSuite) TestAccResourceUserGroupMemberships_basic() {
	var resId, resId2 string
func TestResourceIdentityUserGroupMembershipTestSuite(t *testing.T) {
	httpreplay.SetScenario("TestResourceIdentityUserGroupMembershipTestSuite")

=== ./internal/integrationtest/identity_user_capabilities_management_resource_test.go ===
func (s *ResourceIdentityUserCapabilitiesManagementTestSuite) SetupTest() {
	s.Providers = acctest.TestAccProviders
func (s *ResourceIdentityUserCapabilitiesManagementTestSuite) TestAccResourceIdentityUserCapabilitiesManagement_basic() {
	_, tokenFn := acctest.TokenizeWithHttpReplay("identity_management_resource")
func TestResourceIdentityUserCapabilitiesManagementTestSuite(t *testing.T) {
	httpreplay.SetScenario("TestResourceIdentityUserCapabilitiesManagementTestSuite")

=== ./internal/integrationtest/data_safe_masking_analytic_test.go ===
func TestDataSafeMaskingAnalyticResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestDataSafeMaskingAnalyticResource_basic")

=== ./internal/integrationtest/bds_odh_auto_scaling_configuration_test.go ===
func TestBdsOdhAutoScalingConfigurationResource(t *testing.T) {
	httpreplay.SetScenario("TestBdsOdhAutoScalingConfigurationResource")

=== ./internal/integrationtest/data_safe_generate_on_prem_connector_configuration_test.go ===
func TestDataSafeGenerateOnPremConnectorConfigurationResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestDataSafeGenerateOnPremConnectorConfigurationResource_basic")

=== ./internal/integrationtest/data_safe_security_policy_report_database_table_access_entry_test.go ===
func TestDataSafeSecurityPolicyReportDatabaseTableAccessEntryResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestDataSafeSecurityPolicyReportDatabaseTableAccessEntryResource_basic")

=== ./internal/integrationtest/datacatalog_catalog_test.go ===
func TestDatacatalogCatalogResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestDatacatalogCatalogResource_basic")
func sweepDatacatalogCatalogResource(compartment string) error {
	dataCatalogClient := acctest.GetTestClients(&schema.ResourceData{}).DataCatalogClient()

=== ./internal/integrationtest/identity_domains_my_smtp_credential_test.go ===
func TestIdentityDomainsMySmtpCredentialResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestIdentityDomainsMySmtpCredentialResource_basic")
func sweepIdentityDomainsMySmtpCredentialResource(compartment string) error {
	identityDomainsClient := acctest.GetTestClients(&schema.ResourceData{}).IdentityDomainsClient()

=== ./internal/integrationtest/core_public_ip_pool_capacity_test.go ===
func TestResourceCorePublicIpPoolCapacity_basic(t *testing.T) {
	httpreplay.SetScenario("TestCorePublicIpPoolCapacityResource_basic")

=== ./internal/integrationtest/onesubscription_organization_subscription_test.go ===
func TestOnesubscriptionOrganizationSubscriptionResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestOnesubscriptionOrganizationSubscriptionResource_basic")

=== ./internal/integrationtest/data_safe_sql_firewall_policy_test.go ===
func TestDataSafeSqlFirewallPolicyResource_basic(t *testing.T) {
	t.Skip("Skipping this test as the policy ocid is hardcoded and may not exist when the test runs")
func sweepDataSafeSqlFirewallPolicyResource(compartment string) error {
	dataSafeClient := acctest.GetTestClients(&schema.ResourceData{}).DataSafeClient()

=== ./internal/integrationtest/database_external_pluggable_database_management_test.go ===
func TestDatabaseExternalPluggableDatabaseManagementResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestDatabaseExternalPluggableDatabaseManagementResource_basic")

=== ./internal/integrationtest/database_management_managed_database_user_object_privilege_test.go ===
func TestDatabaseManagementManagedDatabaseUserObjectPrivilegeResource_basic(t *testing.T) {
	//t.Skip("Skip this test till Database Management service provides a better way of testing this. It requires a live managed database instance")

=== ./internal/integrationtest/fleet_apps_management_inventory_resource_test.go ===
func TestFleetAppsManagementInventoryResourceResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestFleetAppsManagementInventoryResourceResource_basic")

=== ./internal/integrationtest/devops_build_pipeline_gitlab_build_stage_test.go ===
func TestDevopsBuildPipelineBuildStageGitlabResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestDevopsBuildPipelineBuildStageGitlabResource_basic")

=== ./internal/integrationtest/database_management_managed_database_user_test.go ===
func TestDatabaseManagementManagedDatabaseUserResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestDatabaseManagementManagedDatabaseUserResource_basic")

=== ./internal/integrationtest/identity_policy_scenario_test.go ===
func (s *ResourceIdentityPolicyTestSuite) SetupTest() {
	s.Token, s.TokenFn = acctest.TokenizeWithHttpReplay("identity_policy")
func (s *ResourceIdentityPolicyTestSuite) TestAccResourceIdentityPolicy_basic() {
	var policyHash string
func (s *ResourceIdentityPolicyTestSuite) TestAccResourceIdentityPolicy_emptyStatement() {
	resource.Test(s.T(), resource.TestCase{
func (s *ResourceIdentityPolicyTestSuite) TestAccResourceIdentityPolicy_formattingDiff() {
	var lastUpdateETag, policyHash string
func TestResourceIdentityPolicyTestSuite(t *testing.T) {
	httpreplay.SetScenario("TestResourceIdentityPolicyTestSuite")

=== ./internal/integrationtest/core_ipsec_connection_tunnel_test.go ===
func TestCoreIpSecConnectionTunnelResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestCoreIpSecConnectionTunnelResource_basic")

=== ./internal/integrationtest/core_subnet_test.go ===
func TestCoreSubnetResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestCoreSubnetResource_basic")
func sweepCoreSubnetResource(compartment string) error {
	virtualNetworkClient := acctest.GetTestClients(&schema.ResourceData{}).VirtualNetworkClient()

=== ./internal/integrationtest/devops_repository_ref_tag_test.go ===
func TestDevopsRepositoryTagRefResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestDevopsRepositoryTagRefResource_basic")
func sweepDevopsRepositoryTagRefResource(compartment string) error {
	devopsClient := acctest.GetTestClients(&schema.ResourceData{}).DevopsClient()

=== ./internal/integrationtest/generative_ai_model_test.go ===
func TestGenerativeAiModelResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestGenerativeAiModelResource_basic")
func sweepGenerativeAiModelResource(compartment string) error {
	generativeAiClient := acctest.GetTestClients(&schema.ResourceData{}).GenerativeAiClient()

=== ./internal/integrationtest/devops_repository_object_content_test.go ===
func TestDevopsRepositoryObjectContentResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestDevopsRepositoryObjectContentResource_basic")

=== ./internal/integrationtest/containerengine_node_pool_resource_test.go ===
func TestResourceContainerengineNodePool_regionalsubnet(t *testing.T) {
	httpreplay.SetScenario("TestResourceContainerengineNodePool_regionalsubnet")
func TestResourceContainerengineNodePool_OnlyUpdateFaultDomain(t *testing.T) {
	httpreplay.SetScenario("TestResourceContainerengineNodePool_OnlyUpdateFaultDomain")
func TestContainerengineNodePoolResource_image(t *testing.T) {
	httpreplay.SetScenario("TestContainerengineNodePoolResource_image")
func TestContainerengineNodePoolResource_nodeSourceDetails(t *testing.T) {
	httpreplay.SetScenario("TestContainerengineNodePoolResource_nodeSourceDetails")
func TestContainerengineNodePoolResource_flexibleShapes(t *testing.T) {
	httpreplay.SetScenario("TestContainerengineNodePoolResource_flexibleShapes")
func TestResourceContainerengineNodePool_qps(t *testing.T) {
	httpreplay.SetScenario("TestResourceContainerengineNodePool_qps")

=== ./internal/integrationtest/psql_db_system_test.go ===
func TestPsqlDbSystemResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestPsqlDbSystemResource_basic")
func sweepPsqlDbSystemResource(compartment string) error {
	postgresqlClient := acctest.GetTestClients(&schema.ResourceData{}).PostgresqlClient()

=== ./internal/integrationtest/database_management_managed_database_user_role_test.go ===
func TestDatabaseManagementManagedDatabaseUserRoleResource_basic(t *testing.T) {
	//t.Skip("Skip this test till Database Management service provides a better way of testing this. It requires a live managed database instance")

=== ./internal/integrationtest/database_management_external_exadata_infrastructure_test.go ===
func TestDatabaseManagementExternalExadataInfrastructureResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestDatabaseManagementExternalExadataInfrastructureResource_basic")
func sweepDatabaseManagementExternalExadataInfrastructureResource(compartment string) error {
	dbManagementClient := acctest.GetTestClients(&schema.ResourceData{}).DbManagementClient()

=== ./internal/integrationtest/core_image_test.go ===
func TestCoreImageResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestCoreImageResource_basic")
func sweepCoreImageResource(compartment string) error {
	computeClient := acctest.GetTestClients(&schema.ResourceData{}).ComputeClient()

=== ./internal/integrationtest/sch_service_connector_test.go ===
func TestSchServiceConnectorResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestSchServiceConnectorResource_basic")
func sweepSchServiceConnectorResource(compartment string) error {
	serviceConnectorClient := acctest.GetTestClients(&schema.ResourceData{}).ServiceConnectorClient()

=== ./internal/integrationtest/bds_bds_instance_metastore_config_activation_test.go ===
func TestBdsBdsInstanceMetastoreConfigResource_activation(t *testing.T) {
	httpreplay.SetScenario("TestBdsBdsInstanceMetastoreConfigResource_activation")

=== ./internal/integrationtest/network_firewall_network_firewall_policy_application_test.go ===
func TestNetworkFirewallNetworkFirewallPolicyApplicationResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestNetworkFirewallNetworkFirewallPolicyApplicationResource_basic")
func sweepNetworkFirewallNetworkFirewallPolicyApplicationResource(compartment string) error {
	networkFirewallClient := acctest.GetTestClients(&schema.ResourceData{}).NetworkFirewallClient()

=== ./internal/integrationtest/core_instance_console_connection_test.go ===
func TestCoreInstanceConsoleConnectionResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestCoreInstanceConsoleConnectionResource_basic")
func sweepCoreInstanceConsoleConnectionResource(compartment string) error {
	computeClient := acctest.GetTestClients(&schema.ResourceData{}).ComputeClient()

=== ./internal/integrationtest/database_database_upgrade_resource_test.go ===
func TestDatabaseDatabaseUpgradeResource_DbSoftwareImage(t *testing.T) {
	if strings.Contains(utils.GetEnvSettingWithBlankDefault("suppressed_tests"), "Database_upgrade") {

=== ./internal/integrationtest/marketplace_listing_package_test.go ===
func TestMarketplaceListingPackageResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestMarketplaceListingPackageResource_basic")

=== ./internal/integrationtest/operator_access_control_operator_control_assignment_test.go ===
func TestOperatorAccessControlOperatorControlAssignmentResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestOperatorAccessControlOperatorControlAssignmentResource_basic")
func sweepOperatorAccessControlOperatorControlAssignmentResource(compartment string) error {
	operatorControlAssignmentClient := acctest.GetTestClients(&schema.ResourceData{}).OperatorControlAssignmentClient()

=== ./internal/integrationtest/psql_default_configuration_test.go ===
func TestPsqlDefaultConfigurationResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestPsqlDefaultConfigurationResource_basic")

=== ./internal/integrationtest/psql_configuration_test.go ===
func TestPsqlConfigurationResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestPsqlConfigurationResource_basic")
func sweepPsqlConfigurationResource(compartment string) error {
	postgresqlClient := acctest.GetTestClients(&schema.ResourceData{}).PostgresqlClient()

=== ./internal/integrationtest/certificates_management_ca_bundle_test.go ===
func TestCertificatesManagementCaBundleResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestCertificatesManagementCaBundleResource_basic")
func sweepCertificatesManagementCaBundleResource(compartment string) error {
	certificatesManagementClient := acctest.GetTestClients(&schema.ResourceData{}).CertificatesManagementClient()

=== ./internal/integrationtest/marketplace_publication_package_test.go ===
func TestMarketplacePublicationPackageResource_basic(t *testing.T) {
	t.Skip("Skip this test till Marketplace automates background processes and reduces the turnaround time.")

=== ./internal/integrationtest/database_db_home_resource_test.go ===
func TestAccResourceDatabaseDBHomeWithPointInTimeRecovery(t *testing.T) {
	if !strings.Contains(utils.GetEnvSettingWithBlankDefault("enabled_tests"), "timeStampForPointInTimeRecovery") {
func TestDatabaseDbHomeResource_createFromCloudVmCluster(t *testing.T) {
	httpreplay.SetScenario("TestDatabaseDbHomeResource_createFromCloudVmCluster")

=== ./internal/integrationtest/cloud_bridge_appliance_image_test.go ===
func TestCloudBridgeApplianceImageResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestCloudBridgeApplianceImageResource_basic")

=== ./internal/integrationtest/data_safe_security_policy_management_test.go ===
func TestDataSafeSecurityPolicyManagementResource_basic(t *testing.T) {
	t.Skip("Skipping this test as the target ocid is hardcoded and may not exist when the test runs")

=== ./internal/integrationtest/identity_domains_my_device_test.go ===
func TestIdentityDomainsMyDeviceResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestIdentityDomainsMyDeviceResource_basic")
func sweepIdentityDomainsMyDeviceResource(compartment string) error {
	identityDomainsClient := acctest.GetTestClients(&schema.ResourceData{}).IdentityDomainsClient()

=== ./internal/integrationtest/core_instance_test.go ===
func TestCoreInstanceResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestCoreInstanceResource_basic")
func TestCoreInstanceResource_updateBootVolumeKmsKey(t *testing.T) {
	httpreplay.SetScenario("TestCoreInstanceResource_updateBootVolumeKmsKey")
func TestCoreInstanceResource_clusterPlacementGroup(t *testing.T) {
	httpreplay.SetScenario("TestCoreInstanceResource_clusterPlacementGroup")
func TestCoreInstanceResource_capacityReservation(t *testing.T) {
	httpreplay.SetScenario("TestCoreInstanceResource_capacityReservation")
func TestCoreInstanceResource_flexShape(t *testing.T) {
	httpreplay.SetScenario("TestCoreFlexInstanceResource_basic")
func TestCoreInstanceResource_ConfidentialflexShape(t *testing.T) {
	httpreplay.SetScenario("TestCoreFlexInstanceResource_basic")
func TestAccResourceCoreFungibleInstance_UpdateShapeConfig(t *testing.T) {
	httpreplay.SetScenario("TestAccResourceCoreFungibleInstance_UpdateShapeConfig")
func TestAccResourceCoreInstance_UpdatePlatformConfig(t *testing.T) {
	httpreplay.SetScenario("TestAccResourceCoreFungibleInstance_UpdatePlatformConfig")
func TestAccResourceCoreInstance_UpdateSourceDetails(t *testing.T) {
	httpreplay.SetScenario("TestAccResourceCoreInstance_UpdateSourceDetails")
func TestCoreInstanceResource_aailInstanceConfiguration(t *testing.T) {

func TestCoreInstanceResource_imageSourceWithImageFilters(t *testing.T) {

func TestCoreInstanceResource_AssignIpv6(t *testing.T) {

func sweepCoreInstanceResource(compartment string) error {
	computeClient := acctest.GetTestClients(&schema.ResourceData{}).ComputeClient()

=== ./internal/integrationtest/service_catalog_service_catalog_test.go ===
func TestServiceCatalogServiceCatalogResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestServiceCatalogServiceCatalogResource_basic")
func sweepServiceCatalogServiceCatalogResource(compartment string) error {
	serviceCatalogClient := acctest.GetTestClients(&schema.ResourceData{}).ServiceCatalogClient()

=== ./internal/integrationtest/apm_traces_trace_snapshot_data_test.go ===
func TestApmTracesTraceSnapshotDataResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestApmTracesTraceSnapshotDataResource_basic")

=== ./internal/integrationtest/database_db_system_resource_ampere_a1_vm_test.go ===
func TestResourceDatabaseDBSystemAmpereA1VM(t *testing.T) {
	const sourceDataBaseSystem = `

=== ./internal/integrationtest/core_ipsec_connection_tunnel_route_test.go ===
func TestCoreIpsecConnectionTunnelRouteResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestCoreIpsecConnectionTunnelRouteResource_basic")

=== ./internal/integrationtest/opsi_host_insight_em_host_resource_test.go ===
func TestResourceOpsiEmHostInsight(t *testing.T) {
	httpreplay.SetScenario("TestResourceOpsiEmHostInsight")

=== ./internal/integrationtest/fusion_apps_fusion_environment_family_limits_and_usage_test.go ===
func TestFusionAppsFusionEnvironmentFamilyLimitsAndUsageResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestFusionAppsFusionEnvironmentFamilyLimitsAndUsageResource_basic")

=== ./internal/integrationtest/database_management_external_exadata_storage_server_top_sql_cpu_activity_test.go ===
func TestDatabaseManagementExternalExadataStorageServerTopSqlCpuActivityResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestDatabaseManagementExternalExadataStorageServerTopSqlCpuActivityResource_basic")

=== ./internal/integrationtest/opsi_mds_mysql_database_insight_resource_test.go ===
func TestOpsiResourceMdsMySqlDatabaseInsight(t *testing.T) {
	httpreplay.SetScenario("TestOpsiResourceMdsMySqlDatabaseInsight")

=== ./internal/integrationtest/core_vnic_attachment_resource_test.go ===
func (s *ResourceCoreVnicAttachmentTestSuite) SetupTest() {
	s.Providers = acctest.TestAccProviders
func (s *ResourceCoreVnicAttachmentTestSuite) TestAccResourceCoreVnicAttachment_basic() {

func TestResourceCoreVnicAttachmentTestSuite(t *testing.T) {
	httpreplay.SetScenario("TestResourceCoreVnicAttachmentTestSuite")

=== ./internal/integrationtest/cloud_guard_adhoc_query_result_content_test.go ===
func TestCloudGuardAdhocQueryResultContentResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestCloudGuardAdhocQueryResultContentResource_basic")

=== ./internal/integrationtest/containerengine_work_request_test.go ===
func TestContainerengineWorkRequestResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestContainerengineWorkRequestResource_basic")

=== ./internal/integrationtest/marketplace_listing_package_agreement_test.go ===
func TestMarketplaceListingPackageAgreementResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestMarketplaceListingPackageAgreementResource_basic")

=== ./internal/integrationtest/database_backup_cancel_management_test.go ===
func TestDatabaseBackupCancelManagementResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestDatabaseBackupCancelManagementResource_basic")

=== ./internal/integrationtest/os_management_hub_software_source_add_packages_management_test.go ===
func TestOsManagementHubSoftwareSourceAddPackagesManagementResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestOsManagementHubSoftwareSourceAddPackagesManagementResource_basic")

=== ./internal/integrationtest/datascience_model_provenance_test.go ===
func TestDatascienceModelProvenanceResource_basic(t *testing.T) {
	t.Skip("Skip this test till data science team provides an execution for the test within few hours")

=== ./internal/integrationtest/data_safe_report_test.go ===
func TestDataSafeReportResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestDataSafeReportResource_basic")

=== ./internal/integrationtest/data_safe_security_policy_deployment_management_test.go ===
func TestDataSafeSecurityPolicyDeploymentManagementResource_basic(t *testing.T) {
	t.Skip("Skipping this test as the target ocid is hardcoded and may not exist when the test runs")

=== ./internal/integrationtest/datacatalog_connection_test.go ===
func TestDatacatalogConnectionResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestDatacatalogConnectionResource_basic")

=== ./internal/integrationtest/opsi_pecomanaged_database_insight_resource_test.go ===
func TestOpsiPecomanagedResourceDatabaseInsight(t *testing.T) {
	httpreplay.SetScenario("TestOpsiPecomanagedResourceDatabaseInsight")

=== ./internal/integrationtest/devops_deploy_artifact_helm_test.go ===
func TestDevopsDeployArtifactResource_helm(t *testing.T) {
	httpreplay.SetScenario("TestDevopsDeployArtifactResource_helm")

=== ./internal/integrationtest/ai_vision_model_test.go ===
func TestAiVisionModelResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestAiVisionModelResource_basic")
func sweepAiVisionModelResource(compartment string) error {
	aiServiceVisionClient := acctest.GetTestClients(&schema.ResourceData{}).AiServiceVisionClient()

=== ./internal/integrationtest/redis_redis_cluster_node_test.go ===
func TestRedisRedisClusterNodeResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestRedisRedisClusterNodeResource_basic")

=== ./internal/integrationtest/delegate_access_control_delegation_control_test.go ===
func TestDelegateAccessControlDelegationControlResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestDelegateAccessControlDelegationControlResource_basic")
func sweepDelegateAccessControlDelegationControlResource(compartment string) error {
	delegateAccessControlClient := acctest.GetTestClients(&schema.ResourceData{}).DelegateAccessControlClient()

=== ./internal/integrationtest/file_storage_file_system_resource_test.go ===
func TestFileStorageFileSystemResource_removeKMSKey(t *testing.T) {

func TestFileStorageFileSystemResource_cloneFromSnapshot(t *testing.T) {
	httpreplay.SetScenario("TestFileStorageFileSystemResource_cloneFromSnapshot")

=== ./internal/integrationtest/fusion_apps_fusion_environment_test.go ===
func TestFusionAppsFusionEnvironmentResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestFusionAppsFusionEnvironmentResource_basic")
func sweepFusionAppsFusionEnvironmentResource(compartment string) error {
	fusionApplicationsClient := acctest.GetTestClients(&schema.ResourceData{}).FusionApplicationsClient()

=== ./internal/integrationtest/container_instances_container_instance_shape_test.go ===
func TestContainerInstancesContainerInstanceShapeResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestContainerInstancesContainerInstanceShapeResource_basic")

=== ./internal/integrationtest/waf_web_app_firewall_policy_update_test.go ===
func TestWafWebAppFirewallPolicyResourceOptionalsUpdate_basic(t *testing.T) {
	var (

=== ./internal/integrationtest/jms_fleet_installation_site_test.go ===
func TestJmsFleetInstallationSiteResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestJmsFleetInstallationSiteResource_basic")

=== ./internal/integrationtest/core_network_security_group_security_rule_resource_test.go ===
func TestAccResourceCoreNetworkSecurityGroupSecurityRule_scenarios(t *testing.T) {
	httpreplay.SetScenario("TestAccResourceCoreNetworkSecurityGroupSecurityRule_multipleRules")

=== ./internal/integrationtest/database_management_external_exadata_storage_server_iorm_plan_test.go ===
func TestDatabaseManagementExternalExadataStorageServerIormPlanResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestDatabaseManagementExternalExadataStorageServerIormPlanResource_basic")

=== ./internal/integrationtest/database_db_system_compute_performance_test.go ===
func TestDatabaseDbSystemComputePerformanceResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestDatabaseDbSystemComputePerformanceResource_basic")

=== ./internal/integrationtest/identity_domains_my_group_test.go ===
func TestIdentityDomainsMyGroupResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestIdentityDomainsMyGroupResource_basic")

=== ./internal/integrationtest/database_infrastructure_target_version_test.go ===
func TestDatabaseInfrastructureTargetVersionResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestDatabaseInfrastructureTargetVersionResource_basic")

=== ./internal/integrationtest/devops_repository_file_diff_test.go ===
func TestDevopsRepositoryFileDiffResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestDevopsRepositoryFileDiffResource_basic")

=== ./internal/integrationtest/bastion_bastion_internal_test.go ===
func TestBastionBastionResource_internal(t *testing.T) {
	httpreplay.SetScenario("TestBastionBastionResource_internal")

=== ./internal/integrationtest/core_dhcp_options_test.go ===
func TestCoreDhcpOptionsResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestCoreDhcpOptionsResource_basic")
func sweepCoreDhcpOptionsResource(compartment string) error {
	virtualNetworkClient := acctest.GetTestClients(&schema.ResourceData{}).VirtualNetworkClient()

=== ./internal/integrationtest/bds_auto_scaling_configuration_test.go ===
func TestBdsAutoScalingConfigurationResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestBdsAutoScalingConfigurationResource_basic")

=== ./internal/integrationtest/identity_domains_network_perimeter_test.go ===
func TestIdentityDomainsNetworkPerimeterResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestIdentityDomainsNetworkPerimeterResource_basic")
func sweepIdentityDomainsNetworkPerimeterResource(compartment string) error {
	identityDomainsClient := acctest.GetTestClients(&schema.ResourceData{}).IdentityDomainsClient()

=== ./internal/integrationtest/os_management_hub_managed_instance_group_available_package_test.go ===
func TestOsManagementHubManagedInstanceGroupAvailablePackageResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestOsManagementHubManagedInstanceGroupAvailablePackageResource_basic")

=== ./internal/integrationtest/os_management_hub_managed_instance_update_packages_management_test.go ===
func TestOsManagementHubManagedInstanceUpdatePackagesManagementResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestOsManagementHubManagedInstanceUpdatePackagesManagementResource_basic")

=== ./internal/integrationtest/core_route_table_resource_test.go ===
func TestResourceCoreRouteTable_deprecatedCidrBlock(t *testing.T) {
	httpreplay.SetScenario("TestResourceCoreRouteTable_deprecatedCidrBlock")
func TestResourceCoreRouteTable_defaultResource(t *testing.T) {
	httpreplay.SetScenario("TestResourceCoreRouteTable_defaultResource")
func TestResourceCoreRouteTable_resourceDiscovery_crossCompartment(t *testing.T) {
	httpreplay.SetScenario("TestResourceCoreDHCPOptions_resourceDiscovery_crossCompartment")

=== ./internal/integrationtest/load_balancer_listener_rule_test.go ===
func TestLoadBalancerListenerRuleResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestLoadBalancerListenerRuleResource_basic")

=== ./internal/integrationtest/recovery_recovery_service_subnet_test.go ===
func TestRecoveryRecoveryServiceSubnetResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestRecoveryRecoveryServiceSubnetResource_basic")
func TestRecoveryRecoveryServiceSubnetResourceWithSubnetId(t *testing.T) {

func sweepRecoveryRecoveryServiceSubnetResource(compartment string) error {
	databaseRecoveryClient := acctest.GetTestClients(&schema.ResourceData{}).DatabaseRecoveryClient()

=== ./internal/integrationtest/data_safe_sql_collection_test.go ===
func TestDataSafeSqlCollectionResource_basic(t *testing.T) {
	t.Skip("Skipping this test as the target ocid and dbUserName are hardcoded and may not exist when the test runs")
func sweepDataSafeSqlCollectionResource(compartment string) error {
	dataSafeClient := acctest.GetTestClients(&schema.ResourceData{}).DataSafeClient()

=== ./internal/integrationtest/database_management_managed_database_sql_tuning_advisor_tasks_execution_plan_stats_comparision_test.go ===
func TestDatabaseManagementManagedDatabaseSqlTuningAdvisorTasksExecutionPlanStatsComparisionResource_basic(t *testing.T) {
	//t.Skip("Skip this test till Database Management service provides a better way of testing this. It requires a live managed database instance")

=== ./internal/integrationtest/capacity_management_internal_occ_availability_catalog_test.go ===
func TestCapacityManagementInternalOccAvailabilityCatalogResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestCapacityManagementInternalOccAvailabilityCatalogResource_basic")

=== ./internal/integrationtest/core_vcn_realm_test.go ===
func TestGovSpecificCoreVcnResource_basic(t *testing.T) {
	//if !strings.Contains(utils.GetEnvSettingWithBlankDefault("enabled_tests"), "IPv6") {

=== ./internal/integrationtest/apm_synthetics_result_test.go ===
func TestApmSyntheticsResultResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestApmSyntheticsResultResource_basic")

=== ./internal/integrationtest/objectstorage_object_lifecycle_policy_test.go ===
func TestObjectStorageObjectLifecyclePolicyResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestObjectStorageObjectLifecyclePolicyResource_basic")

=== ./internal/integrationtest/adm_remediation_run_test.go ===
func TestAdmRemediationRunResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestAdmRemediationRunResource_basic")
func sweepAdmRemediationRunResource(compartment string) error {
	applicationDependencyManagementClient := acctest.GetTestClients(&schema.ResourceData{}).ApplicationDependencyManagementClient()

=== ./internal/integrationtest/database_tools_database_tools_connection_test.go ===
func TestDatabaseToolsConnectionOracleResource_basic(t *testing.T) {
	config := acctest.ProviderTestConfig()

=== ./internal/integrationtest/data_safe_security_policy_report_role_grant_path_test.go ===
func TestDataSafeSecurityPolicyReportRoleGrantPathResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestDataSafeSecurityPolicyReportRoleGrantPathResource_basic")

=== ./internal/integrationtest/vbs_inst_vbs_instance_test.go ===
func TestVbsInstVbsInstanceResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestVbsInstVbsInstanceResource_basic")
func sweepVbsInstVbsInstanceResource(compartment string) error {
	vbsInstanceClient := acctest.GetTestClients(&schema.ResourceData{}).VbsInstanceClient()

=== ./internal/integrationtest/golden_gate_deployment_test.go ===
func TestGoldenGateDeploymentResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestGoldenGateDeploymentResource_basic")
func sweepGoldenGateDeploymentResource(compartment string) error {
	goldenGateClient := acctest.GetTestClients(&schema.ResourceData{}).GoldenGateClient()

=== ./internal/integrationtest/opsi_pecomanaged_exadata_insight_dbmpe_test.go ===
func TestPeComanagedExadataInsightDbmpeResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestPeComanagedExadataInsightDbmpeResource_basic")
func sweepPeComanagedExadataInsightDbmpeResource(compartment string) error {
	operationsInsightsClient := acctest.GetTestClients(&schema.ResourceData{}).OperationsInsightsClient()

=== ./internal/integrationtest/opsi_macs_cloud_database_insight_resource_test.go ===
func TestOpsiMacsCloudResourceDatabaseInsight(t *testing.T) {
	httpreplay.SetScenario("TestOpsiMacsCloudResourceDatabaseInsight")

=== ./internal/integrationtest/identity_domains_api_key_test.go ===
func TestIdentityDomainsApiKeyResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestIdentityDomainsApiKeyResource_basic")
func sweepIdentityDomainsApiKeyResource(compartment string) error {
	identityDomainsClient := acctest.GetTestClients(&schema.ResourceData{}).IdentityDomainsClient()

=== ./internal/integrationtest/compute_cloud_at_customer_ccc_infrastructure_test.go ===
func TestComputeCloudAtCustomerCccInfrastructureResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestComputeCloudAtCustomerCccInfrastructureResource_basic")
func sweepComputeCloudAtCustomerCccInfrastructureResource(compartment string) error {
	computeCloudAtCustomerClient := acctest.GetTestClients(&schema.ResourceData{}).ComputeCloudAtCustomerClient()

=== ./internal/integrationtest/dataintegration_workspace_application_schedule_test.go ===
func TestDataintegrationWorkspaceApplicationScheduleResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestDataintegrationWorkspaceApplicationScheduleResource_basic")
func sweepDataintegrationWorkspaceApplicationScheduleResource(compartment string) error {
	dataIntegrationClient := acctest.GetTestClients(&schema.ResourceData{}).DataIntegrationClient()

=== ./internal/integrationtest/identity_tag_test.go ===
func TestIdentityTagResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestIdentityTagResource_basic")
func sweepIdentityTagResource(compartment string) error {
	// prevent tag deletion when testing, as its a time consuming and sequential operation permitted one per tenancy.

=== ./internal/integrationtest/identity_domains_cloud_gate_server_test.go ===
func TestIdentityDomainsCloudGateServerResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestIdentityDomainsCloudGateServerResource_basic")
func sweepIdentityDomainsCloudGateServerResource(compartment string) error {
	identityDomainsClient := acctest.GetTestClients(&schema.ResourceData{}).IdentityDomainsClient()

=== ./internal/integrationtest/blockchain_osn_test.go ===
func TestBlockchainOsnResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestBlockchainOsnResource_basic")
func sweepBlockchainOsnResource(compartment string) error {
	blockchainPlatformClient := acctest.GetTestClients(&schema.ResourceData{}).BlockchainPlatformClient()

=== ./internal/integrationtest/dns_zone_promote_dnssec_key_version_test.go ===
func TestDnsZonePromoteDnssecKeyVersionResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestDnsZonePromoteDnssecKeyVersionResource_basic")

=== ./internal/integrationtest/devops_deploy_stage_oke_canary_approval_test.go ===
func TestDevopsDeployStageResource_okeCanaryApproval(t *testing.T) {
	httpreplay.SetScenario("TestDevopsDeployStageResource_okeCanaryApproval")

=== ./internal/integrationtest/database_management_pluggabledatabase_pluggable_database_dbm_features_management_test.go ===
func TestDatabaseManagementPluggabledatabasePluggableDatabaseDbmFeaturesManagementResource_basic(t *testing.T) {
	//t.Skip("Skipping as PDB enablement is dependent on CDB enablement")

=== ./internal/integrationtest/database_migration_connection_test.go ===
func TestDatabaseMigrationConnectionResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestDatabaseMigrationConnectionResource_basic")
func sweepDatabaseMigrationConnectionResource(compartment string) error {
	databaseMigrationClient := acctest.GetTestClients(&schema.ResourceData{}).DatabaseMigrationClient()

=== ./internal/integrationtest/network_firewall_network_firewall_policy_decryption_profile_test.go ===
func TestNetworkFirewallNetworkFirewallPolicyDecryptionProfileResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestNetworkFirewallNetworkFirewallPolicyDecryptionProfileResource_basic")
func sweepNetworkFirewallNetworkFirewallPolicyDecryptionProfileResource(compartment string) error {
	networkFirewallClient := acctest.GetTestClients(&schema.ResourceData{}).NetworkFirewallClient()

=== ./internal/integrationtest/core_peer_region_for_remote_peering_test.go ===
func TestCorePeerRegionForRemotePeeringResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestCorePeerRegionForRemotePeeringResource_basic")

=== ./internal/integrationtest/fleet_apps_management_fleet_credential_test.go ===
func TestFleetAppsManagementFleetCredentialResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestFleetAppsManagementFleetCredentialResource_basic")
func sweepFleetAppsManagementFleetCredentialResource(compartment string) error {
	fleetAppsManagementClient := acctest.GetTestClients(&schema.ResourceData{}).FleetAppsManagementClient()

=== ./internal/integrationtest/analytics_analytics_instance_private_access_channel_test.go ===
func TestAnalyticsAnalyticsInstancePrivateAccessChannelResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestAnalyticsAnalyticsInstancePrivateAccessChannelResource_basic")

=== ./internal/integrationtest/os_management_hub_lifecycle_stage_detach_managed_instances_management_test.go ===
func TestOsManagementHubLifecycleStageDetachManagedInstancesManagementResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestOsManagementHubLifecycleStageDetachManagedInstancesManagementResource_basic")

=== ./internal/integrationtest/vulnerability_scanning_host_scan_recipe_test.go ===
func TestVulnerabilityScanningHostScanRecipeResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestVulnerabilityScanningHostScanRecipeResource_basic")
func sweepVulnerabilityScanningHostScanRecipeResource(compartment string) error {
	vulnerabilityScanningClient := acctest.GetTestClients(&schema.ResourceData{}).VulnerabilityScanningClient()

=== ./internal/integrationtest/devops_repository_test.go ===
func TestDevopsRepositoryResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestDevopsRepositoryResource_basic")
func sweepDevopsRepositoryResource(compartment string) error {
	devopsClient := acctest.GetTestClients(&schema.ResourceData{}).DevopsClient()

=== ./internal/integrationtest/database_autonomous_database_saas_admin_user_test.go ===
func TestDatabaseAutonomousDatabaseSaasAdminUserResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestDatabaseAutonomousDatabaseSaasAdminUserResource_basic")

=== ./internal/integrationtest/identity_cost_tracking_tag_test.go ===
func TestIdentityCostTrackingTagResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestIdentityCostTrackingTagResource_basic")

=== ./internal/integrationtest/identity_domains_account_mgmt_info_test.go ===
func TestIdentityDomainsAccountMgmtInfoResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestIdentityDomainsAccountMgmtInfoResource_basic")

=== ./internal/integrationtest/opsi_awr_hub_source_awrhubsources_management_test.go ===
func TestOpsiAwrHubSourceAwrhubsourcesManagementResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestOpsiAwrHubSourceAwrhubsourcesManagementResource_basic")

=== ./internal/integrationtest/network_load_balancer_network_load_balancer_health_test.go ===
func TestNetworkLoadBalancerNetworkLoadBalancerHealthResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestNetworkLoadBalancerNetworkLoadBalancerHealthResource_basic")

=== ./internal/integrationtest/load_balancer_load_balancer_realm_test.go ===
func TestGovSpecificLoadBalancerLoadBalancerResource_basic(t *testing.T) {
	if !strings.Contains(utils.GetEnvSettingWithBlankDefault("enabled_tests"), "IPv6") {

=== ./internal/integrationtest/identity_import_standard_tags_management_test.go ===
func TestIdentityImportStandardTagsManagementResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestIdentityImportStandardTagsManagementResource_basic")

=== ./internal/integrationtest/blockchain_peer_test.go ===
func TestBlockchainPeerResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestBlockchainPeerResource_basic")
func sweepBlockchainPeerResource(compartment string) error {
	blockchainPlatformClient := acctest.GetTestClients(&schema.ResourceData{}).BlockchainPlatformClient()

=== ./internal/integrationtest/apm_config_options_test.go ===
func TestApmConfigOptionsResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestApmConfigOptionsResource_basic")
func sweepApmConfigOptionsResource(compartment string) error {
	configClient := acctest.GetTestClients(&schema.ResourceData{}).ConfigClient()

=== ./internal/integrationtest/database_autonomous_container_database_resource_usage_test.go ===
func TestDatabaseAutonomousContainerDatabaseResourceUsageResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestDatabaseAutonomousContainerDatabaseResourceUsageResource_basic")

=== ./internal/integrationtest/database_management_external_exadata_storage_grid_test.go ===
func TestDatabaseManagementExternalExadataStorageGridResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestDatabaseManagementExternalExadataStorageGridResource_basic")

=== ./internal/integrationtest/kms_sign_test.go ===
func TestKmsSignResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestKmsSignResource_basic")

=== ./internal/integrationtest/identity_domains_cloud_gate_mapping_test.go ===
func TestIdentityDomainsCloudGateMappingResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestIdentityDomainsCloudGateMappingResource_basic")
func sweepIdentityDomainsCloudGateMappingResource(compartment string) error {
	identityDomainsClient := acctest.GetTestClients(&schema.ResourceData{}).IdentityDomainsClient()

=== ./internal/integrationtest/database_flex_component_test.go ===
func TestDatabaseFlexComponentResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestDatabaseFlexComponentResource_basic")

=== ./internal/integrationtest/stack_monitoring_baselineable_metrics_evaluate_test.go ===
func TestStackMonitoringBaselineableMetricsEvaluateResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestStackMonitoringBaselineableMetricsEvaluateResource_basic")

=== ./internal/integrationtest/containerengine_cluster_workload_mapping_test.go ===
func TestContainerengineClusterWorkloadMappingResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestContainerengineClusterWorkloadMappingResource_basic")
func sweepContainerengineClusterWorkloadMappingResource(compartment string) error {
	containerEngineClient := acctest.GetTestClients(&schema.ResourceData{}).ContainerEngineClient()

=== ./internal/integrationtest/devops_deploy_artifact_ocir_test.go ===
func TestDevopsDeployArtifactResource_ocir(t *testing.T) {
	httpreplay.SetScenario("TestDevopsDeployArtifactResource_ocir")

=== ./internal/integrationtest/ocvp_sddc_test.go ===
func TestOcvpSddcResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestOcvpSddcResource_basic")
func sweepOcvpSddcResource(compartment string) error {
	sddcClient := acctest.GetTestClients(&schema.ResourceData{}).SddcClient()

=== ./internal/integrationtest/apm_synthetics_dedicated_vantage_point_test.go ===
func TestApmSyntheticsDedicatedVantagePointResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestApmSyntheticsDedicatedVantagePointResource_basic")
func sweepApmSyntheticsDedicatedVantagePointResource(compartment string) error {
	apmSyntheticClient := acctest.GetTestClients(&schema.ResourceData{}).ApmSyntheticClient()

=== ./internal/integrationtest/data_safe_audit_policy_analytic_test.go ===
func TestDataSafeAuditPolicyAnalyticResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestDataSafeAuditPolicyAnalyticResource_basic")

=== ./internal/integrationtest/golden_gate_deployment_environment_test.go ===
func TestGoldenGateDeploymentEnvironmentResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestGoldenGateDeploymentEnvironmentResource_basic")

=== ./internal/integrationtest/core_dedicated_vm_host_resource_test.go ===
func TestResourceCoreDedicatedVmHost_DenseIO2ShapeDVH(t *testing.T) {
	httpreplay.SetScenario("TestResourceCoreDedicatedVmHost_DenseIO2ShapeDVH")
func TestResourceCoreDedicatedVmHost_E2ShapeDVH(t *testing.T) {
	httpreplay.SetScenario("TestCoreDedicatedVmHostResource_E2ShapeDVH")
func TestResourceCoreDedicatedVmHost_E3ShapeDVH(t *testing.T) {
	httpreplay.SetScenario("TestCoreDedicatedVmHostResource_E3ShapeDVH")

=== ./internal/integrationtest/kms_verify_test.go ===
func TestKmsVerifyResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestKmsVerifyResource_basic")

=== ./internal/integrationtest/database_management_external_exadata_storage_server_test.go ===
func TestDatabaseManagementExternalExadataStorageServerResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestDatabaseManagementExternalExadataStorageServerResource_basic")

=== ./internal/integrationtest/identity_domains_oci_console_sign_on_policy_consent_test.go ===
func TestIdentityDomainsOciConsoleSignOnPolicyConsentResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestIdentityDomainsOciConsoleSignOnPolicyConsentResource_basic")

=== ./internal/integrationtest/usage_proxy_resource_test.go ===
func TestUsageProxyResourceResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestUsageProxyResourceResource_basic")

=== ./internal/integrationtest/database_db_system_resource_intel_x9_vm_test.go ===
func TestResourceDatabaseDBSystemIntelX9(t *testing.T) {
	const sourceDataBaseSystem = `

=== ./internal/integrationtest/core_volume_backup_copy_test.go ===
func TestResourceCoreVolumeBackup_copy(t *testing.T) {
	httpreplay.SetScenario("TestResourceCoreVolumeBackup_copy")

=== ./internal/integrationtest/core_byoip_allocated_range_test.go ===
func TestCoreByoipAllocatedRangeResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestCoreByoipAllocatedRangeResource_basic")

=== ./internal/integrationtest/fleet_apps_management_onboarding_policy_test.go ===
func TestFleetAppsManagementOnboardingPolicyResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestFleetAppsManagementOnboardingPolicyResource_basic")

=== ./internal/integrationtest/fusion_apps_fusion_environment_admin_user_test.go ===
func TestFusionAppsFusionEnvironmentAdminUserResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestFusionAppsFusionEnvironmentAdminUserResource_basic")
func sweepFusionAppsFusionEnvironmentAdminUserResource(compartment string) error {
	fusionApplicationsClient := acctest.GetTestClients(&schema.ResourceData{}).FusionApplicationsClient()

=== ./internal/integrationtest/os_management_hub_software_source_software_package_test.go ===
func TestOsManagementHubSoftwareSourceSoftwarePackageResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestOsManagementHubSoftwareSourceSoftwarePackageResource_basic")

=== ./internal/integrationtest/health_checks_vantage_point_test.go ===
func TestHealthChecksVantagePointResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestHealthChecksVantagePointResource_basic")

=== ./internal/integrationtest/log_analytics_log_analytics_object_collection_rule_test.go ===
func TestLogAnalyticsLogAnalyticsObjectCollectionRuleResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestLogAnalyticsLogAnalyticsObjectCollectionRuleResource_basic")
func sweepLogAnalyticsLogAnalyticsObjectCollectionRuleResource(compartment string) error {
	logAnalyticsClient := acctest.GetTestClients(&schema.ResourceData{}).LogAnalyticsClient()

=== ./internal/integrationtest/file_storage_snapshot_test.go ===
func TestFileStorageSnapshotResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestFileStorageSnapshotResource_basic")

=== ./internal/integrationtest/database_management_external_exadata_storage_server_open_alert_history_test.go ===
func TestDatabaseManagementExternalExadataStorageServerOpenAlertHistoryResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestDatabaseManagementExternalExadataStorageServerOpenAlertHistoryResource_basic")

=== ./internal/integrationtest/core_dedicated_vm_host_test.go ===
func TestCoreDedicatedVmHostResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestCoreDedicatedVmHostResource_basic")
func sweepCoreDedicatedVmHostResource(compartment string) error {
	computeClient := acctest.GetTestClients(&schema.ResourceData{}).ComputeClient()

=== ./internal/integrationtest/core_drg_route_distribution_test.go ===
func TestCoreDrgRouteDistributionResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestCoreDrgRouteDistributionResource_basic")
func sweepCoreDrgRouteDistributionResource(compartment string) error {
	virtualNetworkClient := acctest.GetTestClients(&schema.ResourceData{}).VirtualNetworkClient()

=== ./internal/integrationtest/core_volume_backup_policy_test.go ===
func TestCoreVolumeBackupPolicyResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestCoreVolumeBackupPolicyResource_basic")
func sweepCoreVolumeBackupPolicyResource(compartment string) error {
	blockstorageClient := acctest.GetTestClients(&schema.ResourceData{}).BlockstorageClient()

=== ./internal/integrationtest/core_fast_connect_provider_service_test.go ===
func TestCoreFastConnectProviderServiceResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestCoreFastConnectProviderServiceResource_basic")

=== ./internal/integrationtest/events_rule_test.go ===
func TestEventsRuleResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestEventsRuleResource_basic")
func sweepEventsRuleResource(compartment string) error {
	eventsClient := acctest.GetTestClients(&schema.ResourceData{}).EventsClient()

=== ./internal/integrationtest/core_compute_image_capability_schema_test.go ===
func TestCoreComputeImageCapabilitySchemaResource_basic(t *testing.T) {

func sweepCoreComputeImageCapabilitySchemaResource(compartment string) error {
	computeClient := acctest.GetTestClients(&schema.ResourceData{}).ComputeClient()

=== ./internal/integrationtest/limits_limit_definition_test.go ===
func TestLimitsLimitDefinitionResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestLimitsLimitDefinitionResource_basic")
func TestLimitsLimitDefinitionResource_subscription_support(t *testing.T) {
	httpreplay.SetScenario("TestLimitsLimitDefinitionResource_subscription_support")

=== ./internal/integrationtest/network_firewall_network_firewall_policy_service_test.go ===
func TestNetworkFirewallNetworkFirewallPolicyServiceResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestNetworkFirewallNetworkFirewallPolicyServiceResource_basic")
func sweepNetworkFirewallNetworkFirewallPolicyServiceResource(compartment string) error {
	networkFirewallClient := acctest.GetTestClients(&schema.ResourceData{}).NetworkFirewallClient()

=== ./internal/integrationtest/waa_web_app_acceleration_test.go ===
func TestWaaWebAppAccelerationResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestWaaWebAppAccelerationResource_basic")
func sweepWaaWebAppAccelerationResource(compartment string) error {
	waaClient := acctest.GetTestClients(&schema.ResourceData{}).WaaClient()

=== ./internal/integrationtest/vulnerability_scanning_container_scan_target_test.go ===
func TestVulnerabilityScanningContainerScanTargetResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestVulnerabilityScanningContainerScanTargetResource_basic")
func sweepVulnerabilityScanningContainerScanTargetResource(compartment string) error {
	vulnerabilityScanningClient := acctest.GetTestClients(&schema.ResourceData{}).VulnerabilityScanningClient()

=== ./internal/integrationtest/media_services_system_media_workflow_test.go ===
func TestMediaServicesSystemMediaWorkflowResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestMediaServicesSystemMediaWorkflowResource_basic")

=== ./internal/integrationtest/database_db_version_test.go ===
func TestDatabaseDbVersionResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestDatabaseDbVersionResource_basic")

=== ./internal/integrationtest/usage_proxy_subscription_redeemable_user_test.go ===
func TestUsageProxySubscriptionRedeemableUserResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestUsageProxySubscriptionRedeemableUserResource_basic")
func sweepUsageProxySubscriptionRedeemableUserResource(compartment string) error {
	rewardsClient := acctest.GetTestClients(&schema.ResourceData{}).RewardsClient()

=== ./internal/integrationtest/zpr_configuration_test.go ===
func TestZprConfigurationResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestZprConfigurationResource_basic")

=== ./internal/integrationtest/identity_domains_grant_test.go ===
func TestIdentityDomainsGrantResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestIdentityDomainsGrantResource_basic")
func sweepIdentityDomainsGrantResource(compartment string) error {
	identityDomainsClient := acctest.GetTestClients(&schema.ResourceData{}).IdentityDomainsClient()

=== ./internal/integrationtest/data_safe_security_assessment_security_feature_test.go ===
func TestDataSafeSecurityAssessmentSecurityFeatureResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestDataSafeSecurityAssessmentSecurityFeatureResource_basic")

=== ./internal/integrationtest/datacatalog_metastore_test.go ===
func TestDatacatalogMetastoreResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestDatacatalogMetastoreResource_basic")
func sweepDatacatalogMetastoreResource(compartment string) error {
	dataCatalogClient := acctest.GetTestClients(&schema.ResourceData{}).DataCatalogClient()

=== ./internal/integrationtest/cloud_guard_security_zone_test.go ===
func TestCloudGuardSecurityZoneResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestCloudGuardSecurityZoneResource_basic")
func sweepCloudGuardSecurityZoneResource(compartment string) error {
	cloudGuardClient := acctest.GetTestClients(&schema.ResourceData{}).CloudGuardClient()

=== ./internal/integrationtest/database_tools_database_tools_connection_mysql_test.go ===
func TestDatabaseToolsConnectionMySqlResource_basic(t *testing.T) {
	config := acctest.ProviderTestConfig()

=== ./internal/integrationtest/osp_gateway_invoices_invoice_line_test.go ===
func TestOspGatewayInvoicesInvoiceLineResource_basic(t *testing.T) {
	t.Skip("Invoice tests are not supported due to test resource unavailability.")

=== ./internal/integrationtest/database_management_external_cluster_test.go ===
func TestDatabaseManagementExternalClusterResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestDatabaseManagementExternalClusterResource_basic")

=== ./internal/integrationtest/core_ipsec_status_test.go ===
func TestCoreIpSecConnectionDeviceStatusResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestCoreIpSecConnectionDeviceStatusResource_basic")

=== ./internal/integrationtest/jms_java_downloads_java_download_report_content_test.go ===
func TestJmsJavaDownloadsJavaDownloadReportContentResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestJmsJavaDownloadsJavaDownloadReportContentResource_basic")

=== ./internal/integrationtest/fusion_apps_fusion_environment_time_available_for_refresh_test.go ===
func TestFusionAppsFusionEnvironmentTimeAvailableForRefreshResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestFusionAppsFusionEnvironmentTimeAvailableForRefreshResource_basic")

=== ./internal/integrationtest/data_safe_audit_archive_retrieval_test.go ===
func TestDataSafeAuditArchiveRetrievalResource_basic(t *testing.T) {
	t.Skip("Skip this test as this is an infrequent operation depending on internal Audit data archival to have completed.")
func sweepDataSafeAuditArchiveRetrievalResource(compartment string) error {
	dataSafeClient := acctest.GetTestClients(&schema.ResourceData{}).DataSafeClient()

=== ./internal/integrationtest/containerengine_work_request_error_test.go ===
func TestContainerengineWorkRequestErrorResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestContainerengineWorkRequestErrorResource_basic")

=== ./internal/integrationtest/jms_fleet_export_status_test.go ===
func TestJmsFleetExportStatusResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestJmsFleetExportStatusResource_basic")

=== ./internal/integrationtest/bds_bds_instance_os_patch_action_test.go ===
func TestBdsBdsInstanceOSPatchActionResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestBdsBdsInstanceOSPatchActionResource_basic")

=== ./internal/integrationtest/database_backup_destination_resource_test.go ===
func TestResourceDatabaseBackupDestination_basic(t *testing.T) {
	httpreplay.SetScenario("TestDatabaseBackupDestinationResource_basic")

=== ./internal/integrationtest/resourcemanager_stack_test.go ===
func TestResourcemanagerStackResource_basic(t *testing.T) {
	if strings.Contains(utils.GetEnvSettingWithBlankDefault("suppressed_tests"), "TestResourcemanagerStackResource_basic") {
func sweepResourcemanagerStackResource(compartment string) error {
	resourceManagerClient := acctest.GetTestClients(&schema.ResourceData{}).ResourceManagerClient()
func getResourcemanagerStackIds(compartment string) ([]string, error) {
	ids := acctest.GetResourceIdsToSweep(compartment, "StackId")
func ResourcemanagerStackSweepWaitCondition(response common.OCIOperationResponse) bool {
	// Only stop if the resource is available beyond 3 mins. As there could be an issue for the sweeper to delete the resource and manual intervention required.
func ResourcemanagerStackSweepResponseFetchOperation(client *tf_client.OracleClients, resourceId *string, retryPolicy *common.RetryPolicy) error {
	_, err := client.ResourceManagerClient().GetStack(context.Background(), oci_resourcemanager.GetStackRequest{

=== ./internal/integrationtest/identity_domains_cloud_gate_test.go ===
func TestIdentityDomainsCloudGateResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestIdentityDomainsCloudGateResource_basic")
func sweepIdentityDomainsCloudGateResource(compartment string) error {
	identityDomainsClient := acctest.GetTestClients(&schema.ResourceData{}).IdentityDomainsClient()

=== ./internal/integrationtest/datascience_notebook_session_flex_test.go ===
func TestDatascienceNotebookSessionResource_flex(t *testing.T) {
	httpreplay.SetScenario("TestDatascienceNotebookSessionResource_flex")

=== ./internal/integrationtest/database_cloud_exadata_infrastructure_test.go ===
func TestDatabaseCloudExadataInfrastructureResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestDatabaseCloudExadataInfrastructureResource_basic")
func TestDatabaseCloudExadataInfrastructureResourceMVM(t *testing.T) {
	t.Skip("Skip test because Exacs MVM needs specific compartments enabled`")
func sweepDatabaseCloudExadataInfrastructureResource(compartment string) error {
	databaseClient := acctest.GetTestClients(&schema.ResourceData{}).DatabaseClient()

=== ./internal/integrationtest/marketplace_category_test.go ===
func TestMarketplaceCategoryResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestMarketplaceCategoryResource_basic")

=== ./internal/integrationtest/identity_user_resource_test.go ===
func (s *ResourceIdentityUserTestSuite) SetupTest() {
	s.Providers = acctest.TestAccProviders
func (s *ResourceIdentityUserTestSuite) TestAccResourceIdentityUser_basic() {
	var resId, resId2 string
func TestResourceIdentityUserTestSuite(t *testing.T) {
	if httpreplay.ModeRecordReplay() {

=== ./internal/integrationtest/database_management_external_exadata_storage_connector_test.go ===
func TestDatabaseManagementExternalExadataStorageConnectorResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestDatabaseManagementExternalExadataStorageConnectorResource_basic")
func sweepDatabaseManagementExternalExadataStorageConnectorResource(compartment string) error {
	dbManagementClient := acctest.GetTestClients(&schema.ResourceData{}).DbManagementClient()

=== ./internal/integrationtest/database_db_node_test.go ===
func TestDatabaseDbNodeResource_basic_exacc(t *testing.T) {
	httpreplay.SetScenario("TestDatabaseDbNodeResource_basic_exacc")

=== ./internal/integrationtest/waas_address_list_test.go ===
func TestWaasAddressListResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestWaasAddressListResource_basic")
func sweepWaasAddressListResource(compartment string) error {
	waasClient := acctest.GetTestClients(&schema.ResourceData{}).WaasClient()

=== ./internal/integrationtest/database_management_managed_database_optimizer_statistics_advisor_execution_script_test.go ===
func TestDatabaseManagementManagedDatabaseOptimizerStatisticsAdvisorExecutionScriptResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestDatabaseManagementManagedDatabaseOptimizerStatisticsAdvisorExecutionScriptResource_basic")

=== ./internal/integrationtest/ocvp_supported_host_shape_test.go ===
func TestOcvpSupportedHostShapeResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestOcvpSupportedHostShapeResource_basic")

=== ./internal/integrationtest/osp_gateway_address_rule_test.go ===
func TestOspGatewayAddressRuleResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestOspGatewayAddressRuleResource_basic")

=== ./internal/integrationtest/database_management_external_db_node_test.go ===
func TestDatabaseManagementExternalDbNodeResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestDatabaseManagementExternalDbNodeResource_basic")

=== ./internal/integrationtest/apm_synthetics_monitor_test.go ===
func TestApmSyntheticsFtpMonitorResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestApmSyntheticsFtpMonitorResource_basic")
func TestApmSyntheticsSqlMonitorResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestApmSyntheticsScriptedBrowserMonitorResource_basic")
func TestApmSyntheticsScriptedBrowserMonitorResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestApmSyntheticsScriptedBrowserMonitorResource_basic")
func TestApmSyntheticsBrowserMonitorResource(t *testing.T) {
	httpreplay.SetScenario("TestApmSyntheticsMonitorResource_basic")
func TestApmSyntheticsRestMonitorResource(t *testing.T) {
	httpreplay.SetScenario("TestApmSyntheticsRestMonitorResource_basic")
func TestApmSyntheticsNetworkMonitorResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestApmSyntheticsNetworkMonitorResource_basic")
func TestApmSyntheticsDNSSecMonitorResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestApmSyntheticsDNSSecMonitorResource_basic")
func TestApmSyntheticsDNSServerMonitorResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestApmSyntheticsDNSServerMonitorResource_basic")
func TestApmSyntheticsDNSTraceMonitorResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestApmSyntheticsDNSTraceMonitorResource_basic")
func sweepApmSyntheticsMonitorResource(compartment string) error {
	apmSyntheticClient := acctest.GetTestClients(&schema.ResourceData{}).ApmSyntheticClient()

=== ./internal/integrationtest/data_safe_user_assessment_profile_analytic_test.go ===
func TestDataSafeUserAssessmentProfileAnalyticResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestDataSafeUserAssessmentProfileAnalyticResource_basic")

=== ./internal/integrationtest/identity_auth_token_test.go ===
func TestIdentityAuthTokenResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestIdentityAuthTokenResource_basic")

=== ./internal/integrationtest/identity_domains_security_question_test.go ===
func TestIdentityDomainsSecurityQuestionResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestIdentityDomainsSecurityQuestionResource_basic")
func sweepIdentityDomainsSecurityQuestionResource(compartment string) error {
	identityDomainsClient := acctest.GetTestClients(&schema.ResourceData{}).IdentityDomainsClient()

=== ./internal/integrationtest/core_instance_pool_load_balancer_attachment_test.go ===
func TestCoreInstancePoolLoadBalancerAttachmentResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestCoreInstancePoolLoadBalancerAttachmentResource_basic")

=== ./internal/integrationtest/demand_signal_occ_demand_signal_test.go ===
func TestDemandSignalOccDemandSignalResource_basic(t *testing.T) {
	fmt.Println(DemandSignalOccDemandSignalOccDemandSignalsRepresentation)
func sweepDemandSignalOccDemandSignalResource(compartment string) error {
	occDemandSignalClient := acctest.GetTestClients(&schema.ResourceData{}).OccDemandSignalClient()

=== ./internal/integrationtest/identity_domains_policy_test.go ===
func TestIdentityDomainsPolicyResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestIdentityDomainsPolicyResource_basic")
func sweepIdentityDomainsPolicyResource(compartment string) error {
	identityDomainsClient := acctest.GetTestClients(&schema.ResourceData{}).IdentityDomainsClient()

=== ./internal/integrationtest/file_storage_export_test.go ===
func TestFileStorageExportResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestFileStorageExportResource_basic")
func sweepFileStorageExportResource(compartment string) error {
	fileStorageClient := acctest.GetTestClients(&schema.ResourceData{}).FileStorageClient()

=== ./internal/integrationtest/nosql_table_test.go ===
func TestNosqlTableResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestNosqlTableResource_basic")
func sweepNosqlTableResource(compartment string) error {
	nosqlClient := acctest.GetTestClients(&schema.ResourceData{}).NosqlClient()

=== ./internal/integrationtest/devops_repository_setting_test.go ===
func TestDevopsRepositorySettingResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestDevopsRepositorySettingResource_basic")

=== ./internal/integrationtest/psql_db_system_connection_detail_test.go ===
func TestPsqlDbSystemConnectionDetailResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestPsqlDbSystemConnectionDetailResource_basic")

=== ./internal/integrationtest/core_security_list_test.go ===
func TestCoreSecurityListResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestCoreSecurityListResource_basic")
func sweepCoreSecurityListResource(compartment string) error {
	virtualNetworkClient := acctest.GetTestClients(&schema.ResourceData{}).VirtualNetworkClient()

=== ./internal/integrationtest/network_load_balancer_backend_test.go ===
func TestNetworkLoadBalancerBackendResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestNetworkLoadBalancerBackendResource_basic")
func sweepNetworkLoadBalancerBackendResource(compartment string) error {
	networkLoadBalancerClient := acctest.GetTestClients(&schema.ResourceData{}).NetworkLoadBalancerClient()

=== ./internal/integrationtest/jms_fleet_java_migration_analysis_result_test.go ===
func TestJmsFleetJavaMigrationAnalysisResultResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestJmsFleetJavaMigrationAnalysisResultResource_basic")

=== ./internal/integrationtest/service_mesh_virtual_deployment_test.go ===
func TestServiceMeshVirtualDeploymentResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestServiceMeshVirtualDeploymentResource_basic")
func sweepServiceMeshVirtualDeploymentResource(compartment string) error {
	serviceMeshClient := acctest.GetTestClients(&schema.ResourceData{}).ServiceMeshClient()

=== ./internal/integrationtest/capacity_management_occ_customer_group_occ_customer_test.go ===
func TestCapacityManagementOccCustomerGroupOccCustomerResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestCapacityManagementOccCustomerGroupOccCustomerResource_basic")

=== ./internal/integrationtest/identity_iam_work_request_test.go ===
func TestIdentityIamWorkRequestResource_basic(t *testing.T) {
	t.Skip("Skip this test because henosis tenancy is needed")

=== ./internal/integrationtest/data_safe_user_assessment_user_test.go ===
func TestDataSafeUserAssessmentUserResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestDataSafeUserAssessmentUserResource_basic")

=== ./internal/integrationtest/media_services_media_asset_distribution_channel_attachment_test.go ===
func TestMediaServicesMediaAssetDistributionChannelAttachmentResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestMediaServicesMediaAssetDistributionChannelAttachmentResource_basic")
func sweepMediaServicesMediaAssetDistributionChannelAttachmentResource(compartment string) error {
	mediaServicesClient := acctest.GetTestClients(&schema.ResourceData{}).MediaServicesClient()

=== ./internal/integrationtest/network_firewall_network_firewall_test.go ===
func TestNetworkFirewallNetworkFirewallResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestNetworkFirewallNetworkFirewallResource_basic")
func sweepNetworkFirewallNetworkFirewallResource(compartment string) error {
	networkFirewallClient := acctest.GetTestClients(&schema.ResourceData{}).NetworkFirewallClient()

=== ./internal/integrationtest/marketplace_publication_test.go ===
func TestMarketplacePublicationResource_basic(t *testing.T) {
	t.Skip("Skip this test till Marketplace automates background processes and reduces the turnaround time.")
func sweepMarketplacePublicationResource(compartment string) error {
	marketplaceClient := acctest.GetTestClients(&schema.ResourceData{}).MarketplaceClient()

=== ./internal/integrationtest/cloud_guard_saved_query_test.go ===
func TestCloudGuardSavedQueryResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestCloudGuardSavedQueryResource_basic")
func sweepCloudGuardSavedQueryResource(compartment string) error {
	cloudGuardClient := acctest.GetTestClients(&schema.ResourceData{}).CloudGuardClient()

=== ./internal/integrationtest/logging_unified_agent_configuration_test.go ===
func TestLoggingUnifiedAgentConfigurationResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestLoggingUnifiedAgentConfigurationResource_basic")
func sweepLoggingUnifiedAgentConfigurationResource(compartment string) error {
	loggingManagementClient := acctest.GetTestClients(&schema.ResourceData{}).LoggingManagementClient()

=== ./internal/integrationtest/database_management_managed_database_sql_tuning_set_test.go ===
func TestDatabaseManagementManagedDatabaseSqlTuningSetResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestDatabaseManagementManagedDatabaseSqlTuningSetResource_basic")

=== ./internal/integrationtest/identity_customer_secret_key_test.go ===
func TestIdentityCustomerSecretKeyResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestIdentityCustomerSecretKeyResource_basic")

=== ./internal/integrationtest/service_mesh_virtual_service_route_table_test.go ===
func TestServiceMeshVirtualServiceRouteTableResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestServiceMeshVirtualServiceRouteTableResource_basic")
func sweepServiceMeshVirtualServiceRouteTableResource(compartment string) error {
	serviceMeshClient := acctest.GetTestClients(&schema.ResourceData{}).ServiceMeshClient()

=== ./internal/integrationtest/database_database_upgrade_test.go ===
func TestDatabaseDatabaseUpgradeResource_basic(t *testing.T) {
	if strings.Contains(utils.GetEnvSettingWithBlankDefault("suppressed_tests"), "Database_upgrade") {

=== ./internal/integrationtest/database_system_version_test.go ===
func TestDatabaseSystemVersionResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestDatabaseSystemVersionResource_basic")

=== ./internal/integrationtest/os_management_hub_managed_instance_available_windows_update_test.go ===
func TestOsManagementHubManagedInstanceAvailableWindowsUpdateResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestOsManagementHubManagedInstanceAvailableWindowsUpdateResource_basic")

=== ./internal/integrationtest/database_tools_database_tools_connection_generic_jdbc_test.go ===
func TestDatabaseToolsDatabaseToolsConnectionGenericJdbcResource_basic(t *testing.T) {
	config := acctest.ProviderTestConfig()

=== ./internal/integrationtest/limits_resource_availability_test.go ===
func TestLimitsResourceAvailabilityResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestLimitsResourceAvailabilityResource_basic")
func TestLimitsResourceAvailabilityResource_subscription(t *testing.T) {
	httpreplay.SetScenario("TestLimitsResourceAvailabilityResource_subscription")

=== ./internal/integrationtest/optimizer_profile_test.go ===
func TestOptimizerProfileResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestOptimizerProfileResource_basic")
func sweepOptimizerProfileResource(compartment string) error {
	optimizerClient := acctest.GetTestClients(&schema.ResourceData{}).OptimizerClient()

=== ./internal/integrationtest/identity_iam_work_request_error_test.go ===
func TestIdentityIamWorkRequestErrorResource_basic(t *testing.T) {
	t.Skip("Skip this test because henosis tenancy is needed")

=== ./internal/integrationtest/database_management_external_listener_test.go ===
func TestDatabaseManagementExternalListenerResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestDatabaseManagementExternalListenerResource_basic")

=== ./internal/integrationtest/adm_remediation_run_stage_test.go ===
func TestAdmRemediationRunStageResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestAdmRemediationRunStageResource_basic")

=== ./internal/integrationtest/devops_repository_protected_branch_test.go ===
func TestDevopsRepositoryProtectedBranchResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestDevopsRepositoryProtectedBranchResource_basic")

=== ./internal/integrationtest/identity_domains_my_request_test.go ===
func TestIdentityDomainsMyRequestResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestIdentityDomainsMyRequestResource_basic")

=== ./internal/integrationtest/load_balancer_backend_set_health_test.go ===
func TestLoadBalancerBackendSetHealthResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestLoadBalancerBackendSetHealthResource_basic")

=== ./internal/integrationtest/core_boot_volume_test.go ===
func TestCoreBootVolumeResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestCoreBootVolumeResource_basic")
func TestCoreBootVolumeDeltaRestoreResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestCoreBootVolumeDeltaRestoreResource_basic")
func sweepCoreBootVolumeResource(compartment string) error {
	blockstorageClient := acctest.GetTestClients(&schema.ResourceData{}).BlockstorageClient()

=== ./internal/integrationtest/identity_domains_my_customer_secret_key_test.go ===
func TestIdentityDomainsMyCustomerSecretKeyResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestIdentityDomainsMyCustomerSecretKeyResource_basic")
func sweepIdentityDomainsMyCustomerSecretKeyResource(compartment string) error {
	identityDomainsClient := acctest.GetTestClients(&schema.ResourceData{}).IdentityDomainsClient()

=== ./internal/integrationtest/fusion_apps_fusion_environment_refresh_activity_test.go ===
func TestFusionAppsFusionEnvironmentRefreshActivityResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestFusionAppsFusionEnvironmentRefreshActivityResource_basic")

=== ./internal/integrationtest/devops_deploy_stage_test.go ===
func TestDevopsDeployStageResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestDevopsDeployStageResource_basic")
func sweepDevopsDeployStageResource(compartment string) error {
	deployStageClient := acctest.GetTestClients(&schema.ResourceData{}).DevopsClient()

=== ./internal/integrationtest/cloud_guard_detector_recipe_test.go ===
func TestCloudGuardDetectorRecipeResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestCloudGuardDetectorRecipeResource_basic")
func TestCloudGuardDetectorRecipeResource_updateOptionalParamsWithoutDestroy(t *testing.T) {
	httpreplay.SetScenario("TestCloudGuardDetectorRecipeResource_basic")
func sweepCloudGuardDetectorRecipeResource(compartment string) error {
	cloudGuardClient := acctest.GetTestClients(&schema.ResourceData{}).CloudGuardClient()

=== ./internal/integrationtest/os_management_hub_software_source_vendor_test.go ===
func TestOsManagementHubSoftwareSourceVendorResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestOsManagementHubSoftwareSourceVendorResource_basic")

=== ./internal/integrationtest/opsi_operations_insights_warehouse_user_test.go ===
func TestOpsiOperationsInsightsWarehouseUserResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestOpsiOperationsInsightsWarehouseUserResource_basic")
func sweepOpsiOperationsInsightsWarehouseUserResource(compartment string) error {
	operationsInsightsClient := acctest.GetTestClients(&schema.ResourceData{}).OperationsInsightsClient()

=== ./internal/integrationtest/data_safe_user_assessment_user_access_analytic_test.go ===
func TestDataSafeUserAssessmentUserAccessAnalyticResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestDataSafeUserAssessmentUserAccessAnalyticResource_basic")

=== ./internal/integrationtest/database_vm_cluster_update_history_entry_test.go ===
func TestDatabaseVmClusterUpdateHistoryEntryResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestDatabaseVmClusterUpdateHistoryEntryResource_basic")

=== ./internal/integrationtest/datascience_model_artifact_export_test.go ===
func TestDatascienceModelArtifactExportResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestDatascienceModelArtifactExportResource_basic")

=== ./internal/integrationtest/mysql_heat_wave_cluster_test.go ===
func TestMysqlHeatWaveClusterResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestMysqlHeatWaveClusterResource_basic")
func sweepMysqlHeatWaveClusterResource(compartment string) error {
	dbSystemClient := acctest.GetTestClients(&schema.ResourceData{}).DbSystemClient()

=== ./internal/integrationtest/dataflow_application_submit_test.go ===
func TestDataflowApplicationResource_SparkSubmit(t *testing.T) {
	httpreplay.SetScenario("TestDataflowApplicationResource_SparkSubmit")

=== ./internal/integrationtest/core_compute_capacity_reservation_instance_test.go ===
func TestCoreComputeCapacityReservationInstanceResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestCoreComputeCapacityReservationInstanceResource_basic")

=== ./internal/integrationtest/dns_tsig_key_test.go ===
func TestDnsTsigKeyResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestDnsTsigKeyResource_basic")
func sweepDnsTsigKeyResource(compartment string) error {
	dnsClient := acctest.GetTestClients(&schema.ResourceData{}).DnsClient()

=== ./internal/integrationtest/dataintegration_workspace_application_task_schedule_test.go ===
func TestDataintegrationWorkspaceApplicationTaskScheduleResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestDataintegrationWorkspaceApplicationTaskScheduleResource_basic")
func sweepDataintegrationWorkspaceApplicationTaskScheduleResource(compartment string) error {
	dataIntegrationClient := acctest.GetTestClients(&schema.ResourceData{}).DataIntegrationClient()

=== ./internal/integrationtest/jms_fleet_crypto_analysis_result_test.go ===
func TestJmsFleetCryptoAnalysisResultResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestJmsFleetCryptoAnalysisResultResource_basic")

=== ./internal/integrationtest/database_management_external_db_system_connector_test.go ===
func TestDatabaseManagementExternalDbSystemConnectorResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestDatabaseManagementExternalDbSystemConnectorResource_basic")
func sweepDatabaseManagementExternalDbSystemConnectorResource(compartment string) error {
	dbManagementClient := acctest.GetTestClients(&schema.ResourceData{}).DbManagementClient()

=== ./internal/integrationtest/core_volume_group_backup_copy_test.go ===
func TestResourceCoreVolumeGroupBackup_copy(t *testing.T) {
	httpreplay.SetScenario("TestResourceCoreVolumeGroupBackup_copy")

=== ./internal/integrationtest/dataflow_run_log_test.go ===
func TestDataflowRunLogResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestDataflowRunLogResource_basic")

=== ./internal/integrationtest/kms_ekms_private_endpoint_test.go ===
func TestKmsEkmsPrivateEndpointResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestKmsEkmsPrivateEndpointResource_basic")
func sweepKmsEkmsPrivateEndpointResource(compartment string) error {
	ekmClient := acctest.GetTestClients(&schema.ResourceData{}).EkmClient()

=== ./internal/integrationtest/containerengine_cluster_option_test.go ===
func TestContainerengineClusterOptionResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestContainerengineClusterOptionResource_basic")

=== ./internal/integrationtest/database_exadata_iorm_config_test.go ===
func TestDatabaseExadataIormConfigResource_basic(t *testing.T) {
	if strings.Contains(utils.GetEnvSettingWithBlankDefault("suppressed_tests"), "DBSystem_Exadata") {

=== ./internal/integrationtest/email_suppression_test.go ===
func TestEmailSuppressionResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestEmailSuppressionResource_basic")
func sweepEmailSuppressionResource(compartment string) error {
	emailClient := acctest.GetTestClients(&schema.ResourceData{}).EmailClient()

=== ./internal/integrationtest/identity_domains_my_auth_token_test.go ===
func TestIdentityDomainsMyAuthTokenResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestIdentityDomainsMyAuthTokenResource_basic")
func sweepIdentityDomainsMyAuthTokenResource(compartment string) error {
	identityDomainsClient := acctest.GetTestClients(&schema.ResourceData{}).IdentityDomainsClient()

=== ./internal/integrationtest/os_management_hub_scheduled_job_test.go ===
func TestOsManagementHubScheduledJobResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestOsManagementHubScheduledJobResource_basic")
func sweepOsManagementHubScheduledJobResource(compartment string) error {
	scheduledJobClient := acctest.GetTestClients(&schema.ResourceData{}).ScheduledJobClient()

=== ./internal/integrationtest/devops_deploy_stage_compute_instance_group_canary_deploy_test.go ===
func TestDevopsDeployStageResource_computeInstanceGroupCanaryDeploy(t *testing.T) {
	httpreplay.SetScenario("TestDevopsDeployStageResource_computeInstanceGroupCanaryDeploy")

=== ./internal/integrationtest/datascience_model_deployment_byoc_test.go ===
func TestDatascienceModelDeploymentBYOCResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestDatascienceModelDeploymentBYOCResource_basic")

=== ./internal/integrationtest/em_warehouse_em_warehouse_etl_run_test.go ===
func TestEmWarehouseEmWarehouseEtlRunResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestEmWarehouseEmWarehouseEtlRunResource_basic")

=== ./internal/integrationtest/dataintegration_workspace_task_test.go ===
func TestDataintegrationWorkspaceTaskResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestDataintegrationWorkspaceTaskResource_basic")
func sweepDataintegrationWorkspaceTaskResource(compartment string) error {
	dataIntegrationClient := acctest.GetTestClients(&schema.ResourceData{}).DataIntegrationClient()

=== ./internal/integrationtest/data_safe_sql_firewall_allowed_sql_analytic_test.go ===
func TestDataSafeSqlFirewallAllowedSqlAnalyticResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestDataSafeSqlFirewallAllowedSqlAnalyticResource_basic")

=== ./internal/integrationtest/log_analytics_log_analytics_category_test.go ===
func TestLogAnalyticsLogAnalyticsCategoryResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestLogAnalyticsLogAnalyticsCategoryResource_basic")

=== ./internal/integrationtest/identity_idp_group_mapping_test.go ===
func TestIdentityIdpGroupMappingResource_basic(t *testing.T) {
	metadataFile := utils.GetEnvSettingWithBlankDefault("identity_provider_metadata_file")

=== ./internal/integrationtest/log_analytics_namespace_rule_test.go ===
func TestLogAnalyticsNamespaceRuleResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestLogAnalyticsNamespaceRuleResource_basic")

=== ./internal/integrationtest/mysql_mysql_version_test.go ===
func TestMysqlMysqlVersionResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestMysqlMysqlVersionResource_basic")

=== ./internal/integrationtest/network_load_balancer_network_load_balancers_policy_test.go ===
func TestNetworkLoadBalancerNetworkLoadBalancersPolicyResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestNetworkLoadBalancerNetworkLoadBalancersPolicyResource_basic")

=== ./internal/integrationtest/objectstorage_namespace_metadata_test.go ===
func TestResourceNamespaceMetadata_basic(t *testing.T) {
	httpreplay.SetScenario("TestObjectStorageNamespaceMetadataResource_basic")

=== ./internal/integrationtest/jms_list_jre_usage_test.go ===
func TestJmsListJreUsageResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestJmsListJreUsageResource_basic")

=== ./internal/integrationtest/marketplace_publisher_test.go ===
func TestMarketplacePublisherResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestMarketplacePublisherResource_basic")

=== ./internal/integrationtest/identity_tag_default_test.go ===
func TestIdentityTagDefaultResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestIdentityTagDefaultResource_basic")

=== ./internal/integrationtest/apigateway_api_content_test.go ===
func TestApigatewayApiContentResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestApigatewayApiContentResource_basic")

=== ./internal/integrationtest/core_shape_test.go ===
func TestCoreShapeResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestCoreShapeResource_basic")

=== ./internal/integrationtest/core_compute_capacity_topology_compute_network_block_test.go ===
func TestCoreComputeCapacityTopologyComputeNetworkBlockResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestCoreComputeCapacityTopologyComputeNetworkBlockResource_basic")

=== ./internal/integrationtest/core_app_catalog_listing_test.go ===
func TestCoreAppCatalogListingResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestCoreAppCatalogListingResource_basic")

=== ./internal/integrationtest/email_email_return_path_test.go ===
func TestEmailEmailReturnPathResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestEmailEmailReturnPathResource_basic")
func sweepEmailEmailReturnPathResource(compartment string) error {
	emailClient := acctest.GetTestClients(&schema.ResourceData{}).EmailClient()

=== ./internal/integrationtest/email_dkim_test.go ===
func TestEmailDkimResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestEmailDkimResource_basic")
func sweepEmailDkimResource(compartment string) error {
	emailClient := acctest.GetTestClients(&schema.ResourceData{}).EmailClient()

=== ./internal/integrationtest/database_exadata_infrastructure_download_config_file_test.go ===
func TestDatabaseExadataInfrastructureDownloadConfigFileResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestDatabaseExadataInfrastructureDownloadConfigFileResource_basic")

=== ./internal/integrationtest/core_private_ip_resource_test.go ===
func (s *ResourcePrivateIPTestSuite) SetupTest() {
	s.Providers = acctest.TestAccProviders
func (s *ResourcePrivateIPTestSuite) TestAccCoreResourcePrivateIP_basic() {
	var resId string
func (s *ResourcePrivateIPTestSuite) TestAccCoreResourcePrivateIPVlan_basic() {
	resource.Test(s.T(), resource.TestCase{
func TestResourceCorePrivateIPTestSuite(t *testing.T) {
	httpreplay.SetScenario("TestResourceCorePrivateIPTestSuite")

=== ./internal/integrationtest/artifacts_container_image_test.go ===
func TestArtifactsContainerImageResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestArtifactsContainerImageResource_basic")
func sweepArtifactsContainerImageResource(compartment string) error {
	artifactsClient := acctest.GetTestClients(&schema.ResourceData{}).ArtifactsClient()

=== ./internal/integrationtest/identity_ui_password_test.go ===
func TestIdentityUiPasswordResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestIdentityUiPasswordResource_basic")

=== ./internal/integrationtest/test_representation_helper_test.go ===
func TestUnitGenerateResourceRepresentationFromMap(t *testing.T) {
	assert := assert.New(t)

=== ./internal/integrationtest/containerengine_cluster_complete_credential_rotation_management_test.go ===
func TestContainerengineClusterCompleteCredentialRotationManagementResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestContainerengineClusterCompleteCredentialRotationManagementResource_basic")

=== ./internal/integrationtest/stack_monitoring_config_test.go ===
func TestStackMonitoringConfigResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestStackMonitoringConfigResource_basic")
func sweepStackMonitoringConfigResource(compartment string) error {
	stackMonitoringClient := acctest.GetTestClients(&schema.ResourceData{}).StackMonitoringClient()

=== ./internal/integrationtest/core_remote_peering_connection_test.go ===
func TestCoreRemotePeeringConnectionResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestCoreRemotePeeringConnectionResource_basic")
func sweepCoreRemotePeeringConnectionResource(compartment string) error {
	virtualNetworkClient := acctest.GetTestClients(&schema.ResourceData{}).VirtualNetworkClient()

=== ./internal/integrationtest/osub_subscription_commitment_test.go ===
func TestOsubSubscriptionCommitmentResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestOsubSubscriptionCommitmentResource_basic")

=== ./internal/integrationtest/kms_key_resource_test.go ===
func TestKmsKeyResource_ResourceDiscovery(t *testing.T) {
	httpreplay.SetScenario("TestKmsKeyResource_ResourceDiscovery")

=== ./internal/integrationtest/desktops_desktop_pool_test.go ===
func TestDesktopsDesktopPoolResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestDesktopsDesktopPoolResource_basic")
func TestDesktopsDesktopPoolResource_session_lifecycle_disconnect(t *testing.T) {
	httpreplay.SetScenario("TestDesktopsDesktopPoolResource_session_lifecycle_disconnect")
func sweepDesktopsDesktopPoolResource(compartment string) error {
	desktopServiceClient := acctest.GetTestClients(&schema.ResourceData{}).DesktopServiceClient()

=== ./internal/integrationtest/fleet_apps_management_fleet_test.go ===
func TestFleetAppsManagementFleetResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestFleetAppsManagementFleetResource_basic")
func sweepFleetAppsManagementFleetResource(compartment string) error {
	fleetAppsManagementClient := acctest.GetTestClients(&schema.ResourceData{}).FleetAppsManagementClient()

=== ./internal/integrationtest/database_migration_migration_test.go ===
func TestDatabaseMigrationMigrationResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestDatabaseMigrationMigrationResource_basic")
func sweepDatabaseMigrationMigrationResource(compartment string) error {
	databaseMigrationClient := acctest.GetTestClients(&schema.ResourceData{}).DatabaseMigrationClient()

=== ./internal/integrationtest/database_vm_cluster_remove_virtual_machine_test.go ===
func TestDatabaseVmClusterRemoveVirtualMachineResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestDatabaseVmClusterRemoveVirtualMachineResource_basic")

=== ./internal/integrationtest/ai_language_model_type_test.go ===
func TestAiLanguageModelTypeResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestAiLanguageModelTypeResource_basic")

=== ./internal/integrationtest/golden_gate_trail_file_test.go ===
func TestGoldenGateTrailFileResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestGoldenGateTrailFileResource_basic")

=== ./internal/integrationtest/core_vlan_test.go ===
func TestCoreVlanResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestCoreVlanResource_basic")
func sweepCoreVlanResource(compartment string) error {
	virtualNetworkClient := acctest.GetTestClients(&schema.ResourceData{}).VirtualNetworkClient()

=== ./internal/integrationtest/log_analytics_namespace_ingest_time_rules_management_test.go ===
func TestLogAnalyticsNamespaceIngestTimeRulesManagementResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestLogAnalyticsNamespaceIngestTimeRulesManagementResource_basic")

=== ./internal/integrationtest/cloud_guard_problem_entity_test.go ===
func TestCloudGuardProblemEntityResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestCloudGuardProblemEntityResource_basic")

=== ./internal/integrationtest/globally_distributed_database_private_endpoint_test.go ===
func TestGloballyDistributedDatabasePrivateEndpointResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestGloballyDistributedDatabasePrivateEndpointResource_basic")
func sweepGloballyDistributedDatabasePrivateEndpointResource(compartment string) error {
	shardedDatabaseServiceClient := acctest.GetTestClients(&schema.ResourceData{}).ShardedDatabaseServiceClient()

=== ./internal/integrationtest/database_management_managed_database_user_consumer_group_privilege_test.go ===
func TestDatabaseManagementManagedDatabaseUserConsumerGroupPrivilegeResource_basic(t *testing.T) {
	//t.Skip("Skip this test till Database Management service provides a better way of testing this. It requires a live managed database instance")

=== ./internal/integrationtest/stack_monitoring_discovery_job_test.go ===
func TestStackMonitoringDiscoveryJobResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestStackMonitoringDiscoveryJobResource_basic")
func sweepStackMonitoringDiscoveryJobResource(compartment string) error {
	stackMonitoringClient := acctest.GetTestClients(&schema.ResourceData{}).StackMonitoringClient()

=== ./internal/integrationtest/database_management_managed_database_sql_tuning_advisor_tasks_recommendation_test.go ===
func TestDatabaseManagementManagedDatabaseSqlTuningAdvisorTasksRecommendationResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestDatabaseManagementManagedDatabaseSqlTuningAdvisorTasksRecommendationResource_basic")

=== ./internal/integrationtest/database_tools_database_tools_private_endpoint_test.go ===
func TestDatabaseToolsDatabaseToolsPrivateEndpointResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestDatabaseToolsDatabaseToolsPrivateEndpointResource_basic")
func sweepDatabaseToolsDatabaseToolsPrivateEndpointResource(compartment string) error {
	databaseToolsClient := acctest.GetTestClients(&schema.ResourceData{}).DatabaseToolsClient()

=== ./internal/integrationtest/core_vnic_attachment_test.go ===
func TestCoreVnicAttachmentResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestCoreVnicAttachmentResource_basic")
func TestCoreVnicAttachmentResource_AssignIpv6(t *testing.T) {
	httpreplay.SetScenario("TestCoreVnicAttachmentResource_AssignIpv6")
func sweepCoreVnicAttachmentResource(compartment string) error {
	computeClient := acctest.GetTestClients(&schema.ResourceData{}).ComputeClient()

=== ./internal/integrationtest/dataintegration_workspace_export_request_test.go ===
func TestDataintegrationWorkspaceExportRequestResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestDataintegrationWorkspaceExportRequestResource_basic")
func sweepDataintegrationWorkspaceExportRequestResource(compartment string) error {
	dataIntegrationClient := acctest.GetTestClients(&schema.ResourceData{}).DataIntegrationClient()

=== ./internal/integrationtest/database_key_store_test.go ===
func TestDatabaseKeyStoreResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestDatabaseKeyStoreResource_basic")
func sweepDatabaseKeyStoreResource(compartment string) error {
	databaseClient := acctest.GetTestClients(&schema.ResourceData{}).DatabaseClient()

=== ./internal/integrationtest/os_management_hub_managed_instance_group_attach_managed_instances_management_test.go ===
func TestOsManagementHubManagedInstanceGroupAttachManagedInstancesManagementResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestOsManagementHubManagedInstanceGroupAttachManagedInstancesManagementResource_basic")

=== ./internal/integrationtest/identity_domains_user_db_credential_test.go ===
func TestIdentityDomainsUserDbCredentialResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestIdentityDomainsUserDbCredentialResource_basic")
func sweepIdentityDomainsUserDbCredentialResource(compartment string) error {
	identityDomainsClient := acctest.GetTestClients(&schema.ResourceData{}).IdentityDomainsClient()

=== ./internal/integrationtest/integration_integration_instance_test.go ===
func TestIntegrationIntegrationInstanceResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestIntegrationIntegrationInstanceResource_basic")
func TestIntegrationIntegrationInstanceResource_idcsAt(t *testing.T) {
	httpreplay.SetScenario("TestIntegrationIntegrationInstanceResource_idcsAt")
func sweepIntegrationIntegrationInstanceResource(compartment string) error {
	integrationInstanceClient := acctest.GetTestClients(&schema.ResourceData{}).IntegrationInstanceClient()

=== ./internal/integrationtest/operator_access_control_access_request_audit_log_report_test.go ===
func TestOperatorAccessControlAccessRequestAuditLogReportResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestOperatorAccessControlAccessRequestAuditLogReportResource_basic")

=== ./internal/integrationtest/mysql_channel_test.go ===
func TestMysqlChannelResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestMysqlChannelResource_basic")
func sweepMysqlChannelResource(compartment string) error {
	channelsClient := acctest.GetTestClients(&schema.ResourceData{}).ChannelsClient()

=== ./internal/integrationtest/delegate_access_control_service_provider_action_test.go ===
func TestDelegateAccessControlServiceProviderActionResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestDelegateAccessControlServiceProviderActionResource_basic")

=== ./internal/integrationtest/core_vtap_test.go ===
func TestCoreVtapResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestCoreVtapResource_basic")
func sweepCoreVtapResource(compartment string) error {
	virtualNetworkClient := acctest.GetTestClients(&schema.ResourceData{}).VirtualNetworkClient()

=== ./internal/integrationtest/budget_alert_rule_test.go ===
func TestBudgetAlertRuleResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestBudgetAlertRuleResource_basic")
func sweepBudgetAlertRuleResource(compartment string) error {
	budgetClient := acctest.GetTestClients(&schema.ResourceData{}).BudgetClient()

=== ./internal/integrationtest/cloud_migrations_replication_schedule_test.go ===
func TestCloudMigrationsReplicationScheduleResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestCloudMigrationsReplicationScheduleResource_basic")
func sweepCloudMigrationsReplicationScheduleResource(compartment string) error {
	migrationClient := acctest.GetTestClients(&schema.ResourceData{}).MigrationClient()

=== ./internal/integrationtest/identity_domains_my_app_test.go ===
func TestIdentityDomainsMyAppResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestIdentityDomainsMyAppResource_basic")

=== ./internal/integrationtest/load_balancer_load_balancer_test.go ===
func TestLoadBalancerLoadBalancerResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestLoadBalancerLoadBalancerResource_basic")
func sweepLoadBalancerLoadBalancerResource(compartment string) error {
	loadBalancerClient := acctest.GetTestClients(&schema.ResourceData{}).LoadBalancerClient()

=== ./internal/integrationtest/file_storage_mount_target_test.go ===
func TestFileStorageMountTargetResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestFileStorageMountTargetResource_basic")
func TestFileStorageMountTargetResource_failedWorkRequest(t *testing.T) {
	httpreplay.SetScenario("TestFileStorageMountTargetResource_failedWorkRequest")
func TestFileStorageMountTargetResource_hpmtTest(t *testing.T) {
	httpreplay.SetScenario("TestFileStorageMountTargetResource_hpmtTest")
func sweepFileStorageMountTargetResource(compartment string) error {
	fileStorageClient := acctest.GetTestClients(&schema.ResourceData{}).FileStorageClient()

=== ./internal/integrationtest/osmanagement_managed_instance_group_test.go ===
func TestOsmanagementManagedInstanceGroupResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestOsmanagementManagedInstanceGroupResource_basic")
func sweepOsmanagementManagedInstanceGroupResource(compartment string) error {
	osManagementClient := acctest.GetTestClients(&schema.ResourceData{}).OsManagementClient()

=== ./internal/integrationtest/database_autonomous_database_test.go ===
func TestDatabaseAutonomousDatabaseResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestDatabaseAutonomousDatabaseResource_basic")
func sweepDatabaseAutonomousDatabaseResource(compartment string) error {
	databaseClient := acctest.GetTestClients(&schema.ResourceData{}).DatabaseClient()

=== ./internal/integrationtest/mysql_replica_test.go ===
func TestMysqlReplicaResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestMysqlReplicaResource_basic")
func sweepMysqlReplicaResource(compartment string) error {
	replicasClient := acctest.GetTestClients(&schema.ResourceData{}).ReplicasClient()

=== ./internal/integrationtest/database_autonomous_database_dataguard_association_test.go ===
func TestDatabaseAutonomousDatabaseDataguardAssociationResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestDatabaseAutonomousDatabaseDataguardAssociationResource_basic")

=== ./internal/integrationtest/os_management_hub_management_station_synchronize_mirrors_management_test.go ===
func TestOsManagementHubManagementStationSynchronizeMirrorsManagementResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestOsManagementHubManagementStationSynchronizeMirrorsManagementResource_basic")

=== ./internal/integrationtest/osp_gateway_invoice_test.go ===
func TestOspGatewayInvoiceResource_basic(t *testing.T) {
	t.Skip("Invoice tests are not supported due to test resource unavailability.")

=== ./internal/integrationtest/opsi_autonomous_database_insight_test.go ===
func TestOpsiAutonomousDatabaseInsightResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestOpsiAutonomousDatabaseInsightResource_basic")
func sweepOpsiAutonomousDatabaseInsightResource(compartment string) error {
	operationsInsightsClient := acctest.GetTestClients(&schema.ResourceData{}).OperationsInsightsClient()

=== ./internal/integrationtest/core_compute_global_image_capability_schema_test.go ===
func TestCoreComputeGlobalImageCapabilitySchemaResource_basic(t *testing.T) {


=== ./internal/integrationtest/database_management_managed_database_optimizer_statistics_collection_aggregation_test.go ===
func TestDatabaseManagementManagedDatabaseOptimizerStatisticsCollectionAggregationResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestDatabaseManagementManagedDatabaseOptimizerStatisticsCollectionAggregationsResource_basic")

=== ./internal/integrationtest/database_autonomous_db_preview_version_test.go ===
func TestDatabaseAutonomousDbPreviewVersionResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestDatabaseAutonomousDbPreviewVersionResource_basic")

=== ./internal/integrationtest/metering_computation_clean_energy_usage_test.go ===
func TestMeteringComputationCleanEnergyUsageResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestMeteringComputationCleanEnergyUsageResource_basic")

=== ./internal/integrationtest/database_db_node_console_connection_resource_test.go ===
func TestDatabaseDbNodeConsoleConnectionResource_basic_exacc_only(t *testing.T) {
	httpreplay.SetScenario("TestDatabaseDbNodeConsoleConnectionResource_basic_exacc_only")

=== ./internal/integrationtest/identity_ui_password_resource_test.go ===
func (s *ResourceIdentityUIPasswordTestSuite) SetupTest() {
	_, tokenFn := acctest.TokenizeWithHttpReplay("ui_pass_resource")
func (s *ResourceIdentityUIPasswordTestSuite) TestAccIdentityUIPassword_basic() {
	resource.Test(s.T(), resource.TestCase{
func TestResourceIdentityUIPasswordTestSuite(t *testing.T) {
	httpreplay.SetScenario("TestResourceIdentityUIPasswordTestSuite")

=== ./internal/integrationtest/usage_proxy_usagelimit_test.go ===
func TestUsageProxyUsagelimitResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestUsageProxyUsagelimitResource_basic")

=== ./internal/integrationtest/identity_network_source_test.go ===
func TestIdentityNetworkSourceResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestIdentityNetworkSourceResource_basic")
func sweepIdentityNetworkSourceResource(compartment string) error {
	identityClient := acctest.GetTestClients(&schema.ResourceData{}).IdentityClient()

=== ./internal/integrationtest/delegate_access_control_delegated_resource_access_request_history_test.go ===
func TestDelegateAccessControlDelegatedResourceAccessRequestHistoryResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestDelegateAccessControlDelegatedResourceAccessRequestHistoryResource_basic")

=== ./internal/integrationtest/network_load_balancer_backend_sets_health_test.go ===
func TestNetworkLoadBalancerBackendSetHealthResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestNetworkLoadBalancerBackendSetHealthResource_basic")

=== ./internal/integrationtest/waf_protection_capability_group_tag_test.go ===
func TestWafProtectionCapabilityGroupTagResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestWafProtectionCapabilityGroupTagResource_basic")

=== ./internal/integrationtest/core_drg_route_table_route_rule_test.go ===
func TestCoreDrgRouteTableRouteRuleResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestCoreDrgRouteTableRouteRuleResource_basic")

=== ./internal/integrationtest/database_management_managed_databases_database_parameter_test.go ===
func TestDatabaseManagementManagedDatabasesDatabaseParameterResource_basic(t *testing.T) {
	// t.Skip("Skip this test till Database Management service provides a better way of testing this. It requires a live managed database instance")

=== ./internal/integrationtest/file_storage_export_set_test.go ===
func TestFileStorageExportSetResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestFileStorageExportSetResource_basic")

=== ./internal/integrationtest/core_network_security_group_test.go ===
func TestCoreNetworkSecurityGroupResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestCoreNetworkSecurityGroupResource_basic")
func sweepCoreNetworkSecurityGroupResource(compartment string) error {
	virtualNetworkClient := acctest.GetTestClients(&schema.ResourceData{}).VirtualNetworkClient()

=== ./internal/integrationtest/devops_deploy_stage_manual_approval_test.go ===
func TestDevopsDeployStageResource_ManualApproval(t *testing.T) {
	httpreplay.SetScenario("TestDevopsDeployStageResource_ManualApproval")

=== ./internal/integrationtest/stack_monitoring_maintenance_window_test.go ===
func TestStackMonitoringMaintenanceWindowResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestStackMonitoringMaintenanceWindowResource_basic")
func sweepStackMonitoringMaintenanceWindowResource(compartment string) error {
	stackMonitoringClient := acctest.GetTestClients(&schema.ResourceData{}).StackMonitoringClient()

=== ./internal/integrationtest/database_external_non_container_database_management_test.go ===
func TestDatabaseExternalNonContainerDatabaseManagementResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestDatabaseExternalNonContainerDatabaseManagementResource_basic")

=== ./internal/integrationtest/log_analytics_log_analytics_unprocessed_data_bucket_test.go ===
func TestLogAnalyticsLogAnalyticsUnprocessedDataBucketResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestLogAnalyticsLogAnalyticsUnprocessedDataBucketResource_basic")

=== ./internal/integrationtest/service_mesh_ingress_gateway_test.go ===
func TestServiceMeshIngressGatewayResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestServiceMeshIngressGatewayResource_basic")
func sweepServiceMeshIngressGatewayResource(compartment string) error {
	serviceMeshClient := acctest.GetTestClients(&schema.ResourceData{}).ServiceMeshClient()

=== ./internal/integrationtest/osub_billing_schedule_billing_schedule_test.go ===
func TestOsubBillingScheduleBillingScheduleResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestOsubBillingScheduleBillingScheduleResource_basic")

=== ./internal/integrationtest/database_db_system_resource_intel_x7_to_x9_vm_test.go ===
func TestResourceDatabaseDBSystemIntelX7ToX9(t *testing.T) {
	const sourceDataBaseSystem = `

=== ./internal/integrationtest/database_management_managed_database_addm_task_test.go ===
func TestDatabaseManagementManagedDatabaseAddmTaskResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestDatabaseManagementManagedDatabaseAddmTaskResource_basic")

=== ./internal/integrationtest/opsi_news_report_test.go ===
func TestOpsiNewsReportResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestOpsiNewsReportResource_basic")
func sweepOpsiNewsReportResource(compartment string) error {
	operationsInsightsClient := acctest.GetTestClients(&schema.ResourceData{}).OperationsInsightsClient()

=== ./internal/integrationtest/data_safe_security_policy_deployment_test.go ===
func TestDataSafeSecurityPolicyDeploymentResource_basic(t *testing.T) {
	t.Skip("Skipping this test as the security policy deployment ocid is hardcoded and may not exist when the test runs")

=== ./internal/integrationtest/identity_domains_setting_test.go ===
func TestIdentityDomainsSettingResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestIdentityDomainsSettingResource_basic")

=== ./internal/integrationtest/core_volume_attachment_resource_test.go ===
func (s *ResourceCoreVolumeAttachmentTestSuite) SetupTest() {
	s.Providers = acctest.TestAccProviders
func (s *ResourceCoreVolumeAttachmentTestSuite) TestResourceCoreVolumeAttachment_basic() {
	var resId, resId2 string
func TestResourceCoreVolumeAttachmentTestSuite(t *testing.T) {
	httpreplay.SetScenario("TestResourceCoreVolumeAttachmentTestSuite")

=== ./internal/integrationtest/stack_monitoring_monitored_resource_type_test.go ===
func TestStackMonitoringMonitoredResourceTypeResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestStackMonitoringMonitoredResourceTypeResource_basic")
func testAccCheckStackMonitoringMonitoredResourceTypeDestroy(s *terraform.State) error {
	noResourceFound := true
func sweepStackMonitoringMonitoredResourceTypeResource(compartment string) error {
	stackMonitoringClient := acctest.GetTestClients(&schema.ResourceData{}).StackMonitoringClient()
func getStackMonitoringMonitoredResourceTypeIds(compartment string) ([]string, error) {
	ids := acctest.GetResourceIdsToSweep(compartment, "MonitoredResourceTypeId")
func StackMonitoringMonitoredResourceTypeSweepWaitCondition(response common.OCIOperationResponse) bool {
	// Only stop if the resource is available beyond 3 mins. As there could be an issue for the sweeper to delete the resource and manual intervention required.
func StackMonitoringMonitoredResourceTypeSweepResponseFetchOperation(client *tf_client.OracleClients, resourceId *string, retryPolicy *common.RetryPolicy) error {
	_, err := client.StackMonitoringClient().GetMonitoredResourceType(context.Background(), oci_stack_monitoring.GetMonitoredResourceTypeRequest{

=== ./internal/integrationtest/opsi_enterprise_manager_bridge_test.go ===
func TestOpsiEnterpriseManagerBridgeResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestOpsiEnterpriseManagerBridgeResource_basic")
func sweepOpsiEnterpriseManagerBridgeResource(compartment string) error {
	operationsInsightsClient := acctest.GetTestClients(&schema.ResourceData{}).OperationsInsightsClient()

=== ./internal/integrationtest/core_virtual_circuit_test.go ===
func TestCoreVirtualCircuitResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestCoreVirtualCircuitResource_basic")
func sweepCoreVirtualCircuitResource(compartment string) error {
	virtualNetworkClient := acctest.GetTestClients(&schema.ResourceData{}).VirtualNetworkClient()

=== ./internal/integrationtest/data_safe_list_user_grant_test.go ===
func TestDataSafeListUserGrantResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestDataSafeListUserGrantResource_basic")

=== ./internal/integrationtest/apigateway_subscriber_test.go ===
func TestApigatewaySubscriberResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestApigatewaySubscriberResource_basic")
func sweepApigatewaySubscriberResource(compartment string) error {
	subscribersClient := acctest.GetTestClients(&schema.ResourceData{}).SubscribersClient()

=== ./internal/integrationtest/cloud_guard_data_source_test.go ===
func TestCloudGuardDataSourceResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestCloudGuardDataSourceResource_basic")
func TestCloudGuardDataSourceResourceScheduledQuery_basic(t *testing.T) {
	httpreplay.SetScenario("TestCloudGuardDataSourceResourceScheduledQuery_basic")
func testAccCheckCloudGuardDataSourceDestroy(s *terraform.State) error {
	noResourceFound := true
func sweepCloudGuardDataSourceResource(compartment string) error {
	cloudGuardClient := acctest.GetTestClients(&schema.ResourceData{}).CloudGuardClient()
func getCloudGuardDataSourceIds(compartment string) ([]string, error) {
	ids := acctest.GetResourceIdsToSweep(compartment, "DataSourceId")
func CloudGuardDataSourceSweepWaitCondition(response common.OCIOperationResponse) bool {
	// Only stop if the resource is available beyond 3 mins. As there could be an issue for the sweeper to delete the resource and manual intervention required.
func CloudGuardDataSourceSweepResponseFetchOperation(client *tf_client.OracleClients, resourceId *string, retryPolicy *common.RetryPolicy) error {
	_, err := client.CloudGuardClient().GetDataSource(context.Background(), oci_cloud_guard.GetDataSourceRequest{

=== ./internal/integrationtest/database_management_managed_database_sql_tuning_advisor_tasks_sql_execution_plan_test.go ===
func TestDatabaseManagementManagedDatabaseSqlTuningAdvisorTasksSqlExecutionPlanResource_basic(t *testing.T) {
	//t.Skip("Skip this test till Database Management service provides a better way of testing this. It requires a live managed database instance")

=== ./internal/integrationtest/database_db_node_resource_test.go ===
func TestDatabaseDbNodeResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestDatabaseDbNodeResource_basic")

=== ./internal/integrationtest/waas_protection_rule_test.go ===
func TestWaasProtectionRuleResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestWaasProtectionRuleResource_basic")

=== ./internal/integrationtest/jms_fleet_blocklist_test.go ===
func TestJmsFleetBlocklistResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestJmsFleetBlocklistResource_basic")

=== ./internal/integrationtest/cloud_guard_security_recipe_test.go ===
func TestCloudGuardSecurityRecipeResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestCloudGuardSecurityRecipeResource_basic")
func sweepCloudGuardSecurityRecipeResource(compartment string) error {
	cloudGuardClient := acctest.GetTestClients(&schema.ResourceData{}).CloudGuardClient()

=== ./internal/integrationtest/globally_distributed_database_sharded_database_test.go ===
func TestGloballyDistributedDatabaseShardedDatabaseResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestGloballyDistributedDatabaseShardedDatabaseResource_basic")
func sweepGloballyDistributedDatabaseShardedDatabaseResource(compartment string) error {
	shardedDatabaseServiceClient := acctest.GetTestClients(&schema.ResourceData{}).ShardedDatabaseServiceClient()

=== ./internal/integrationtest/opsi_operations_insights_warehouse_download_warehouse_wallet_test.go ===
func TestOpsiOperationsInsightsWarehouseDownloadWarehouseWalletResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestOpsiOperationsInsightsWarehouseDownloadWarehouseWalletResource_basic")

=== ./internal/integrationtest/database_management_external_asm_instance_test.go ===
func TestDatabaseManagementExternalAsmInstanceResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestDatabaseManagementExternalAsmInstanceResource_basic")

=== ./internal/integrationtest/devops_connection_gitlab_test.go ===
func TestDevopsGitlabConnectionResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestDevopsGitlabConnectionResource_basic")

=== ./internal/integrationtest/load_balancer_ssl_cipher_suite_test.go ===
func TestLoadBalancerSslCipherSuiteResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestLoadBalancerSslCipherSuiteResource_basic")
func sweepLoadBalancerSslCipherSuiteResource(compartment string) error {
	loadBalancerClient := acctest.GetTestClients(&schema.ResourceData{}).LoadBalancerClient()

=== ./internal/integrationtest/database_pluggable_database_resource_test.go ===
func TestDatabaseExaccPluggableDatabaseResource(t *testing.T) {
	httpreplay.SetScenario("TestDatabaseExaccPluggableDatabaseResource")

=== ./internal/integrationtest/database_cloud_exadata_infrastructure_un_allocated_resource_test.go ===
func TestDatabaseCloudExadataInfrastructureUnAllocatedResourceResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestDatabaseCloudExadataInfrastructureUnAllocatedResourceResource_basic")

=== ./internal/integrationtest/core_vnic_test.go ===
func TestCoreVnicResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestCoreVnicResource_basic")
func TestCoreVnicResource_AssignIpv6(t *testing.T) {
	httpreplay.SetScenario("TestCoreVnicResource_AssignIpv6")

=== ./internal/integrationtest/opsi_pecomanaged_exadata_insight_tcps_test.go ===
func TestPeComanagedExadataInsightTcpsResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestPeComanagedExadataInsightTcpsResource_basic")
func sweepPeComanagedExadataInsightTcpsResource(compartment string) error {
	operationsInsightsClient := acctest.GetTestClients(&schema.ResourceData{}).OperationsInsightsClient()

=== ./internal/integrationtest/kms_decrypted_data_test.go ===
func TestKmsDecryptedDataResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestKmsDecryptedDataResource_basic")

=== ./internal/integrationtest/jms_java_downloads_java_license_test.go ===
func TestJmsJavaDownloadsJavaLicenseResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestJmsJavaDownloadsJavaLicenseResource_basic")

=== ./internal/integrationtest/database_management_external_database_test.go ===
func TestDatabaseManagementExternalDatabaseResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestDatabaseManagementExternalDatabaseResource_basic")

=== ./internal/integrationtest/database_db_system_resource_clone_test.go ===
func TestResourceDatabaseDBSystemClone(t *testing.T) {
	if strings.Contains(utils.GetEnvSettingWithBlankDefault("suppressed_tests"), "DBSystem_clone") {

=== ./internal/integrationtest/core_drg_route_distribution_statement_resource_test.go ===
func TestCoreDrgRouteDistributionStatementResource_DrgAttachmentId(t *testing.T) {
	httpreplay.SetScenario("TestCoreDrgRouteDistributionStatementResource_DrgAttachmentId")

=== ./internal/integrationtest/core_service_gateway_test.go ===
func TestCoreServiceGatewayResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestCoreServiceGatewayResource_basic")
func sweepCoreServiceGatewayResource(compartment string) error {
	virtualNetworkClient := acctest.GetTestClients(&schema.ResourceData{}).VirtualNetworkClient()

=== ./internal/integrationtest/cloud_migrations_migration_test.go ===
func TestCloudMigrationsMigrationResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestCloudMigrationsMigrationResource_basic")
func sweepCloudMigrationsMigrationResource(compartment string) error {
	migrationClient := acctest.GetTestClients(&schema.ResourceData{}).MigrationClient()

=== ./internal/integrationtest/apm_synthetics_on_premise_vantage_point_test.go ===
func TestApmSyntheticsOnPremiseVantagePointResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestApmSyntheticsOnPremiseVantagePointResource_basic")
func sweepApmSyntheticsOnPremiseVantagePointResource(compartment string) error {
	apmSyntheticClient := acctest.GetTestClients(&schema.ResourceData{}).ApmSyntheticClient()

=== ./internal/integrationtest/data_safe_user_assessment_comparison_test.go ===
func TestDataSafeUserAssessmentComparisonResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestDataSafeUserAssessmentComparisonResource_basic")

=== ./internal/integrationtest/vulnerability_scanning_container_scan_recipe_test.go ===
func TestVulnerabilityScanningContainerScanRecipeResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestVulnerabilityScanningContainerScanRecipeResource_basic")
func sweepVulnerabilityScanningContainerScanRecipeResource(compartment string) error {
	vulnerabilityScanningClient := acctest.GetTestClients(&schema.ResourceData{}).VulnerabilityScanningClient()

=== ./internal/integrationtest/psql_db_system_primary_db_instance_test.go ===
func TestPsqlDbSystemPrimaryDbInstanceResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestPsqlDbSystemPrimaryDbInstanceResource_basic")

=== ./internal/integrationtest/metering_computation_custom_table_test.go ===
func TestMeteringComputationCustomTableResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestMeteringComputationCustomTableResource_basic")
func sweepMeteringComputationCustomTableResource(compartment string) error {
	usageapiClient := acctest.GetTestClients(&schema.ResourceData{}).UsageapiClient()

=== ./internal/integrationtest/database_autonomous_vm_cluster_resource_usage_test.go ===
func TestDatabaseAutonomousVmClusterResourceUsageResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestDatabaseAutonomousVmClusterResourceUsageResource_basic")

=== ./internal/integrationtest/log_analytics_log_analytics_log_groups_summary_test.go ===
func TestLogAnalyticsLogAnalyticsLogGroupsSummaryResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestLogAnalyticsLogAnalyticsLogGroupsSummaryResource_basic")

=== ./internal/integrationtest/devops_deploy_stage_oke_blue_green_test.go ===
func TestDevopsDeployStageResource_okeBlueGreenDeploy(t *testing.T) {
	httpreplay.SetScenario("TestDevopsDeployStageResource_okeBlueGreenDeploy")

=== ./internal/integrationtest/operator_access_control_operator_action_test.go ===
func TestOperatorAccessControlOperatorActionResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestOperatorAccessControlOperatorActionResource_basic")

=== ./internal/integrationtest/data_safe_database_security_config_test.go ===
func TestDataSafeDatabaseSecurityConfigResource_basic(t *testing.T) {
	t.Skip("Skipping this test as the database security config ocid is hardcoded and may not exist when the test runs")

=== ./internal/integrationtest/identity_tenancy_test.go ===
func TestIdentityTenancyResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestIdentityTenancyResource_basic")

=== ./internal/integrationtest/datascience_model_version_set_test.go ===
func TestDatascienceModelVersionSetResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestDatascienceModelVersionSetResource_basic")
func sweepDatascienceModelVersionSetResource(compartment string) error {
	dataScienceClient := acctest.GetTestClients(&schema.ResourceData{}).DataScienceClient()

=== ./internal/integrationtest/waas_waas_policy_resource_test.go ===
func TestResourceWaasWaasPolicyResource_basic(t *testing.T) {


=== ./internal/integrationtest/containerengine_addon_option_test.go ===
func TestContainerengineAddonOptionResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestContainerengineAddonOptionResource_basic")

=== ./internal/integrationtest/marketplace_listing_tax_test.go ===
func TestMarketplaceListingTaxResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestMarketplaceListingTaxResource_basic")

=== ./internal/integrationtest/mysql_mysql_backup_copy_test.go ===
func TestMysqlMysqlBackupResource_copy(t *testing.T) {
	httpreplay.SetScenario("TestMysqlMysqlBackupResource_crossRegionCopy")

=== ./internal/integrationtest/cloud_guard_resource_vulnerability_test.go ===
func TestCloudGuardResourceVulnerabilityResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestCloudGuardResourceVulnerabilityResource_basic")

=== ./internal/integrationtest/data_safe_data_safe_configuration_test.go ===
func TestDataSafeDataSafeConfigurationResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestDataSafeDataSafeConfigurationResource_basic")

=== ./internal/integrationtest/fleet_apps_management_fleet_resource_test.go ===
func TestFleetAppsManagementFleetResourceResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestFleetAppsManagementFleetResourceResource_basic")
func testAccCheckFleetAppsManagementFleetResourceDestroy(s *terraform.State) error {
	noResourceFound := true
func sweepFleetAppsManagementFleetResourceResource(compartment string) error {
	fleetAppsManagementClient := acctest.GetTestClients(&schema.ResourceData{}).FleetAppsManagementClient()
func getFleetAppsManagementFleetResourceIds(compartment string) ([]string, error) {
	ids := acctest.GetResourceIdsToSweep(compartment, "FleetResourceId")
func FleetAppsManagementFleetResourceSweepWaitCondition(response common.OCIOperationResponse) bool {
	// Only stop if the resource is available beyond 3 mins. As there could be an issue for the sweeper to delete the resource and manual intervention required.
func FleetAppsManagementFleetResourceSweepResponseFetchOperation(client *tf_client.OracleClients, resourceId *string, retryPolicy *common.RetryPolicy) error {
	_, err := client.FleetAppsManagementClient().GetFleetResource(context.Background(), oci_fleet_apps_management.GetFleetResourceRequest{

=== ./internal/integrationtest/core_instance_device_test.go ===
func TestCoreInstanceDeviceResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestCoreInstanceDeviceResource_basic")

=== ./internal/integrationtest/identity_iam_work_request_log_test.go ===
func TestIdentityIamWorkRequestLogResource_basic(t *testing.T) {
	t.Skip("Skip this test because henosis tenancy is needed")

=== ./internal/integrationtest/ai_anomaly_detection_detect_anomaly_job_test.go ===
func TestAiAnomalyDetectionDetectAnomalyJobResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestAiAnomalyDetectionDetectAnomalyJobResource_basic")
func sweepAiAnomalyDetectionDetectAnomalyJobResource(compartment string) error {
	anomalyDetectionClient := acctest.GetTestClients(&schema.ResourceData{}).AnomalyDetectionClient()

=== ./internal/integrationtest/service_catalog_service_catalog_association_test.go ===
func TestServiceCatalogServiceCatalogAssociationResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestServiceCatalogServiceCatalogAssociationResource_basic")
func sweepServiceCatalogServiceCatalogAssociationResource(compartment string) error {
	serviceCatalogClient := acctest.GetTestClients(&schema.ResourceData{}).ServiceCatalogClient()

=== ./internal/integrationtest/media_services_media_workflow_job_test.go ===
func TestMediaServicesMediaWorkflowJobResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestMediaServicesMediaWorkflowJobResource_basic")
func sweepMediaServicesMediaWorkflowJobResource(compartment string) error {
	mediaServicesClient := acctest.GetTestClients(&schema.ResourceData{}).MediaServicesClient()

=== ./internal/integrationtest/os_management_hub_managed_instance_errata_test.go ===
func TestOsManagementHubManagedInstanceErrataResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestOsManagementHubManagedInstanceErrataResource_basic")

=== ./internal/integrationtest/database_migration_job_advisor_report_test.go ===
func TestDatabaseMigrationJobAdvisorReportResource_basic(t *testing.T) {
	t.Skip("Skip this job creation is an independent operation after validating the migration")

=== ./internal/integrationtest/data_safe_unset_security_assessment_baseline_management_test.go ===
func TestDataSafeUnsetSecurityAssessmentBaselineManagementResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestDataSafeUnsetSecurityAssessmentBaselineManagementResource_basic")

=== ./internal/integrationtest/data_safe_security_assessment_finding_test.go ===
func TestDataSafeSecurityAssessmentFindingResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestDataSafeSecurityAssessmentFindingResource_basic")

=== ./internal/integrationtest/service_manager_proxy_service_environment_test.go ===
func TestServiceManagerProxyServiceEnvironmentResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestServiceManagerProxyServiceEnvironmentResource_basic")

=== ./internal/integrationtest/load_balancer_certificate_test.go ===
func TestLoadBalancerCertificateResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestLoadBalancerCertificateResource_basic")
func sweepLoadBalancerCertificateResource(compartment string) error {
	loadBalancerClient := acctest.GetTestClients(&schema.ResourceData{}).LoadBalancerClient()

=== ./internal/integrationtest/network_load_balancer_network_load_balancers_protocol_test.go ===
func TestNetworkLoadBalancerNetworkLoadBalancersProtocolResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestNetworkLoadBalancerNetworkLoadBalancersProtocolResource_basic")

=== ./internal/integrationtest/dataintegration_workspace_import_request_test.go ===
func TestDataintegrationWorkspaceImportRequestResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestDataintegrationWorkspaceImportRequestResource_basic")
func sweepDataintegrationWorkspaceImportRequestResource(compartment string) error {
	dataIntegrationClient := acctest.GetTestClients(&schema.ResourceData{}).DataIntegrationClient()

=== ./internal/integrationtest/adm_knowledge_base_test.go ===
func TestAdmKnowledgeBaseResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestAdmKnowledgeBaseResource_basic")
func sweepAdmKnowledgeBaseResource(compartment string) error {
	applicationDependencyManagementClient := acctest.GetTestClients(&schema.ResourceData{}).ApplicationDependencyManagementClient()

=== ./internal/integrationtest/limits_quota_test.go ===
func TestLimitsQuotaResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestLimitsQuotaResource_basic")
func TestLimitsQuotaResource_basic_no_lock(t *testing.T) {
	httpreplay.SetScenario("TestLimitsQuotaResource_basic")
func sweepLimitsQuotaResource(compartment string) error {
	quotasClient := acctest.GetTestClients(&schema.ResourceData{}).QuotasClient()

=== ./internal/integrationtest/dataflow_pool_test.go ===
func TestDataflowPoolResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestDataflowPoolResource_basic")
func sweepDataflowPoolResource(compartment string) error {
	dataFlowClient := acctest.GetTestClients(&schema.ResourceData{}).DataFlowClient()

=== ./internal/integrationtest/generative_ai_agent_knowledge_base_test.go ===
func TestGenerativeAiAgentKnowledgeBaseResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestGenerativeAiAgentKnowledgeBaseResource_basic")
func sweepGenerativeAiAgentKnowledgeBaseResource(compartment string) error {
	generativeAiAgentClient := acctest.GetTestClients(&schema.ResourceData{}).GenerativeAiAgentClient()

=== ./internal/integrationtest/database_management_external_asm_disk_group_test.go ===
func TestDatabaseManagementExternalAsmDiskGroupResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestDatabaseManagementExternalAsmDiskGroupResource_basic")

=== ./internal/integrationtest/database_management_external_db_system_stack_monitorings_management_test.go ===
func TestDatabaseManagementExternalDbSystemStackMonitoringsManagementResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestDatabaseManagementExternalDbSystemStackMonitoringsManagementResource_basic")

=== ./internal/integrationtest/identity_domains_dynamic_resource_group_test.go ===
func TestIdentityDomainsDynamicResourceGroupResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestIdentityDomainsDynamicResourceGroupResource_basic")
func testAccCheckIdentityDomainsDynamicResourceGroupDestroy(s *terraform.State) error {
	noResourceFound := true
func sweepIdentityDomainsDynamicResourceGroupResource(compartment string) error {
	identityDomainsClient := acctest.GetTestClients(&schema.ResourceData{}).IdentityDomainsClient()
func getIdentityDomainsDynamicResourceGroupIds(compartment string) ([]string, error) {
	ids := acctest.GetResourceIdsToSweep(compartment, "DynamicResourceGroupId")

=== ./internal/integrationtest/opsi_operations_insights_private_endpoint_test.go ===
func TestOpsiOperationsInsightsPrivateEndpointResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestOpsiOperationsInsightsPrivateEndpointResource_basic")
func sweepOpsiOperationsInsightsPrivateEndpointResource(compartment string) error {
	operationsInsightsClient := acctest.GetTestClients(&schema.ResourceData{}).OperationsInsightsClient()

=== ./internal/integrationtest/desktops_desktop_pool_desktop_test.go ===
func TestDesktopsDesktopPoolDesktopResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestDesktopsDesktopPoolDesktopResource_basic")

=== ./internal/integrationtest/identity_domains_identity_propagation_trust_test.go ===
func TestIdentityDomainsIdentityPropagationTrustResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestIdentityDomainsIdentityPropagationTrustResource_basic")
func sweepIdentityDomainsIdentityPropagationTrustResource(compartment string) error {
	identityDomainsClient := acctest.GetTestClients(&schema.ResourceData{}).IdentityDomainsClient()

=== ./internal/integrationtest/cloud_migrations_target_asset_test.go ===
func TestCloudMigrationsTargetAssetResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestCloudMigrationsTargetAssetResource_basic")
func sweepCloudMigrationsTargetAssetResource(compartment string) error {
	migrationClient := acctest.GetTestClients(&schema.ResourceData{}).MigrationClient()

=== ./internal/integrationtest/database_exadata_infrastructure_test.go ===
func TestDatabaseExadataInfrastructureResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestDatabaseExadataInfrastructureResource_basic")
func sweepDatabaseExadataInfrastructureResource(compartment string) error {
	databaseClient := acctest.GetTestClients(&schema.ResourceData{}).DatabaseClient()

=== ./internal/integrationtest/analytics_analytics_instance_test.go ===
func TestAnalyticsAnalyticsInstanceResource_basic(t *testing.T) {
	if strings.Contains(utils.GetEnvSettingWithBlankDefault("suppressed_tests"), "TestAnalyticsAnalyticsInstanceResource_basic") {
func sweepAnalyticsAnalyticsInstanceResource(compartment string) error {
	analyticsClient := acctest.GetTestClients(&schema.ResourceData{}).AnalyticsClient()

=== ./internal/integrationtest/core_dhcp_options_resource_test.go ===
func TestResourceCoreDHCPOptions_basic(t *testing.T) {
	httpreplay.SetScenario("TestResourceCoreDHCPOptions_basic")
func TestResourceCoreDHCPOptions_avoidServiceDefault(t *testing.T) {
	httpreplay.SetScenario("TestResourceCoreDHCPOptions_avoidServiceDefault")
func TestResourceCoreDHCPOptions_changeOptionsServerType(t *testing.T) {
	httpreplay.SetScenario("TestResourceCoreDHCPOptions_changeOptionsServerType")
func TestResourceCoreDHCPOptions_changeOptionsOrder(t *testing.T) {
	httpreplay.SetScenario("TestResourceCoreDHCPOptions_changeOptionsOrder")
func TestResourceCoreDHCPOptions_resourceDiscovery_crossCompartment(t *testing.T) {
	httpreplay.SetScenario("TestResourceCoreDHCPOptions_resourceDiscovery_crossCompartment")

=== ./internal/integrationtest/opsi_host_insight_test.go ===
func TestOpsiHostInsightResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestOpsiHostInsightResource_basic")
func sweepOpsiHostInsightResource(compartment string) error {
	operationsInsightsClient := acctest.GetTestClients(&schema.ResourceData{}).OperationsInsightsClient()

=== ./internal/integrationtest/devops_connection_test.go ===
func TestDevopsConnectionResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestDevopsConnectionResource_basic")
func sweepDevopsConnectionResource(compartment string) error {
	devopsClient := acctest.GetTestClients(&schema.ResourceData{}).DevopsClient()

=== ./internal/integrationtest/recovery_protected_database_fetch_configuration_test.go ===
func TestRecoveryProtectedDatabaseFetchConfigurationResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestRecoveryProtectedDatabaseFetchConfigurationResource_basic")

=== ./internal/integrationtest/data_safe_alert_test.go ===
func TestDataSafeAlertResource_basic(t *testing.T) {
	t.Skip("Create operation is not available for Alert resource")

=== ./internal/integrationtest/devops_build_pipeline_stage_test.go ===
func TestDevopsBuildPipelineStageResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestDevopsBuildPipelineStageResource_basic")
func sweepDevopsBuildPipelineStageResource(compartment string) error {
	devopsClient := acctest.GetTestClients(&schema.ResourceData{}).DevopsClient()

=== ./internal/integrationtest/ocvp_supported_vmware_software_version_test.go ===
func TestOcvpSupportedVmwareSoftwareVersionResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestOcvpSupportedVmwareSoftwareVersionResource_basic")

=== ./internal/integrationtest/service_mesh_access_policy_test.go ===
func TestServiceMeshAccessPolicyResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestServiceMeshAccessPolicyResource_basic")
func sweepServiceMeshAccessPolicyResource(compartment string) error {
	serviceMeshClient := acctest.GetTestClients(&schema.ResourceData{}).ServiceMeshClient()

=== ./internal/integrationtest/database_management_managed_database_optimizer_statistics_collection_operation_test.go ===
func TestDatabaseManagementManagedDatabaseOptimizerStatisticsCollectionOperationResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestDatabaseManagementManagedDatabaseOptimizerStatisticsCollectionOperationResource_basic")

=== ./internal/integrationtest/database_external_non_container_database_operations_insights_management_test.go ===
func TestDatabaseExternalNonContainerDatabaseOperationsInsightsManagementResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestDatabaseExternalNonContainerDatabaseOperationsInsightsManagementResource_basic")

=== ./internal/integrationtest/identity_user_test.go ===
func TestIdentityUserResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestIdentityUserResource_basic")

=== ./internal/integrationtest/media_services_media_workflow_task_declaration_test.go ===
func TestMediaServicesMediaWorkflowTaskDeclarationResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestMediaServicesMediaWorkflowTaskDeclarationResource_basic")

=== ./internal/integrationtest/log_analytics_log_analytics_entities_summary_test.go ===
func TestLogAnalyticsLogAnalyticsEntitiesSummaryResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestLogAnalyticsLogAnalyticsEntitiesSummaryResource_basic")

=== ./internal/integrationtest/generic_artifacts_content_generic_artifacts_content_test.go ===
func TestGenericArtifactsContentGenericArtifactsContentResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestGenericArtifactsContentGenericArtifactsContentResource_basic")

=== ./internal/integrationtest/opsi_database_insight_resource_test.go ===
func TestOpsiResourceDatabaseInsight(t *testing.T) {
	httpreplay.SetScenario("TestOpsiResourceDatabaseInsight")

=== ./internal/integrationtest/identity_region_subscription_test.go ===
func TestIdentityRegionSubscriptionResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestIdentityRegionSubscriptionResource_basic")

=== ./internal/integrationtest/core_volume_backup_resource_test.go ===
func (s *ResourceCoreVolumeBackupTestSuite) SetupTest() {
	s.Providers = acctest.TestAccProviders
func (s *ResourceCoreVolumeBackupTestSuite) TestAccResourceCoreVolumeBackup_basic() {
	var resId, resId2 string
func TestResourceCoreVolumeBackupTestSuite(t *testing.T) {
	httpreplay.SetScenario("TestResourceCoreVolumeBackupTestSuite")

=== ./internal/integrationtest/operator_access_control_access_request_test.go ===
func TestOperatorAccessControlAccessRequestResource_basic(t *testing.T) {
	t.Skip("Access Requests are created outside customer api. Access requests may not be available all the time")

=== ./internal/integrationtest/cloud_bridge_asset_test.go ===
func TestCloudBridgeAssetResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestCloudBridgeAssetResource_basic")
func sweepCloudBridgeAssetResource(compartment string) error {
	inventoryClient := acctest.GetTestClients(&schema.ResourceData{}).InventoryClient()

=== ./internal/integrationtest/os_management_hub_managed_instance_installed_package_test.go ===
func TestOsManagementHubManagedInstanceInstalledPackageResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestOsManagementHubManagedInstanceInstalledPackageResource_basic")

=== ./internal/integrationtest/devops_repository_file_line_test.go ===
func TestDevopsRepositoryFileLineResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestDevopsRepositoryFileLineResource_basic")

=== ./internal/integrationtest/cloud_bridge_inventory_test.go ===
func TestCloudBridgeInventoryResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestCloudBridgeInventoryResource_basic")
func sweepCloudBridgeInventoryResource(compartment string) error {
	inventoryClient := acctest.GetTestClients(&schema.ResourceData{}).InventoryClient()

=== ./internal/integrationtest/database_autonomous_exadata_infrastructure_shape_test.go ===
func TestDatabaseAutonomousExadataInfrastructureShapeResource_basic(t *testing.T) {
	t.Skip("Skip this test as AEI and its api no longer exists.")

=== ./internal/integrationtest/license_manager_product_license_test.go ===
func TestLicenseManagerProductLicenseResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestLicenseManagerProductLicenseResource_basic")
func sweepLicenseManagerProductLicenseResource(compartment string) error {
	licenseManagerClient := acctest.GetTestClients(&schema.ResourceData{}).LicenseManagerClient()

=== ./internal/integrationtest/data_safe_sensitive_data_model_test.go ===
func TestDataSafeSensitiveDataModelResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestDataSafeSensitiveDataModelResource_basic")
func sweepDataSafeSensitiveDataModelResource(compartment string) error {
	dataSafeClient := acctest.GetTestClients(&schema.ResourceData{}).DataSafeClient()

=== ./internal/integrationtest/bastion_bastion_test.go ===
func TestBastionBastionResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestBastionBastionResource_basic")
func sweepBastionBastionResource(compartment string) error {
	bastionClient := acctest.GetTestClients(&schema.ResourceData{}).BastionClient()

=== ./internal/integrationtest/database_management_db_management_private_endpoint_associated_database_test.go ===
func TestDatabaseManagementDbManagementPrivateEndpointAssociatedDatabaseResource_basic(t *testing.T) {
	t.Skip("Skip this test till Database Management service provides a better way of testing this. It requires a live managed database instance")

=== ./internal/integrationtest/onesubscription_commitment_test.go ===
func TestOnesubscriptionCommitmentResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestOnesubscriptionCommitmentResource_basic")

=== ./internal/integrationtest/stack_monitoring_process_set_test.go ===
func TestStackMonitoringProcessSetResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestStackMonitoringProcessSetResource_basic")
func sweepStackMonitoringProcessSetResource(compartment string) error {
	stackMonitoringClient := acctest.GetTestClients(&schema.ResourceData{}).StackMonitoringClient()

=== ./internal/integrationtest/devops_deploy_stage_compute_instance_blue_green_traffic_shift_test.go ===
func TestDevopsDeployStageResource_computeInstanceGroupBlueGreenTrafficShift(t *testing.T) {
	httpreplay.SetScenario("TestDevopsDeployStageResource_computeInstanceGroupBlueGreenTrafficShift")

=== ./internal/integrationtest/email_sender_test.go ===
func TestEmailSenderResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestEmailSenderResource_basic")
func sweepEmailSenderResource(compartment string) error {
	emailClient := acctest.GetTestClients(&schema.ResourceData{}).EmailClient()

=== ./internal/integrationtest/data_safe_audit_trail_management_test.go ===
func TestDataSafeAuditTrailManagementResource_basic(t *testing.T) {
	t.Skip("Create operation is not available for Audit Trail Management resource")

=== ./internal/integrationtest/core_app_catalog_subscription_test.go ===
func TestCoreAppCatalogSubscriptionResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestCoreAppCatalogSubscriptionResource_basic")
func sweepCoreAppCatalogSubscriptionResource(compartment string) error {
	computeClient := acctest.GetTestClients(&schema.ResourceData{}).ComputeClient()

=== ./internal/integrationtest/core_instance_maintenance_reboot_test.go ===
func TestCoreInstanceMaintenanceRebootResource_basic(t *testing.T) {
	t.Skip("Skipping this test as the instance ocid is hardcoded and may not exist when the test runs")

=== ./internal/integrationtest/data_safe_security_assessment_finding_analytic_test.go ===
func TestDataSafeSecurityAssessmentFindingAnalyticResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestDataSafeSecurityAssessmentFindingAnalyticResource_basic")

=== ./internal/integrationtest/load_balancer_rule_set_resource_test.go ===
func TestLoadBalancerRuleSetResource_allowAction(t *testing.T) {
	httpreplay.SetScenario("TestLoadBalancerRuleSetResource_allowAction")

=== ./internal/integrationtest/opsi_operations_insights_warehouse_rotate_warehouse_wallet_test.go ===
func TestOpsiOperationsInsightsWarehouseRotateWarehouseWalletResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestOpsiOperationsInsightsWarehouseRotateWarehouseWalletResource_basic")

=== ./internal/integrationtest/datacatalog_catalog_private_endpoint_test.go ===
func TestDatacatalogCatalogPrivateEndpointResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestDatacatalogCatalogPrivateEndpointResource_basic")
func sweepDatacatalogCatalogPrivateEndpointResource(compartment string) error {
	dataCatalogClient := acctest.GetTestClients(&schema.ResourceData{}).DataCatalogClient()

=== ./internal/integrationtest/database_database_test.go ===
func TestDatabaseDatabaseResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestDatabaseDatabaseResource_basic")
func sweepDatabaseDatabaseResource(compartment string) error {
	databaseClient := acctest.GetTestClients(&schema.ResourceData{}).DatabaseClient()

=== ./internal/integrationtest/oda_oda_instance_test.go ===
func TestOdaOdaInstanceResource_basic(t *testing.T) {
	if httpreplay.ShouldRetryImmediately() {
func sweepOdaOdaInstanceResource(compartment string) error {
	odaClient := acctest.GetTestClients(&schema.ResourceData{}).OdaClient()

=== ./internal/integrationtest/core_cross_connect_test.go ===
func TestCoreCrossConnectResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestCoreCrossConnectResource_basic")
func sweepCoreCrossConnectResource(compartment string) error {
	virtualNetworkClient := acctest.GetTestClients(&schema.ResourceData{}).VirtualNetworkClient()

=== ./internal/integrationtest/certificates_management_certificate_authority_version_test.go ===
func TestCertificatesManagementCertificateAuthorityVersionResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestCertificatesManagementCertificateAuthorityVersionResource_basic")

=== ./internal/integrationtest/devops_deploy_stage_compute_instance_group_blue_green_test.go ===
func TestDevopsDeployStageResource_computeInstanceGroupBlueGreenDeploy(t *testing.T) {
	httpreplay.SetScenario("TestDevopsDeployStageResource_computeInstanceGroupBlueGreenDeploy")

=== ./internal/integrationtest/devops_deploy_stage_compute_instance_group_test.go ===
func TestDevopsDeployStageResource_computeInstanceGroupDeploy(t *testing.T) {
	httpreplay.SetScenario("TestDevopsDeployStageResource_computeInstanceGroupDeploy")

=== ./internal/integrationtest/core_instance_configuration_test.go ===
func TestCoreInstanceConfigurationResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestCoreInstanceConfigurationResource_basic")
func TestCoreInstanceConfigurationResourceOptions_basic(t *testing.T) {
	httpreplay.SetScenario("TestCoreInstanceConfigurationResourceOptions_basic")
func TestCoreInstanceConfigurationResourceIpv6_basic(t *testing.T) {
	httpreplay.SetScenario("TestCoreInstanceConfigurationResourceIpv6_basic")
func sweepCoreInstanceConfigurationResource(compartment string) error {
	computeManagementClient := acctest.GetTestClients(&schema.ResourceData{}).ComputeManagementClient()

=== ./internal/integrationtest/log_analytics_log_sets_count_test.go ===
func TestLogAnalyticsLogSetsCountResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestLogAnalyticsLogSetsCountResource_basic")

=== ./internal/integrationtest/load_balancer_path_route_set_test.go ===
func TestLoadBalancerPathRouteSetResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestLoadBalancerPathRouteSetResource_basic")
func sweepLoadBalancerPathRouteSetResource(compartment string) error {
	loadBalancerClient := acctest.GetTestClients(&schema.ResourceData{}).LoadBalancerClient()

=== ./internal/integrationtest/dataintegration_workspace_project_test.go ===
func TestDataintegrationWorkspaceProjectResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestDataintegrationWorkspaceProjectResource_basic")
func sweepDataintegrationWorkspaceProjectResource(compartment string) error {
	dataIntegrationClient := acctest.GetTestClients(&schema.ResourceData{}).DataIntegrationClient()

=== ./internal/integrationtest/appmgmt_control_monitored_instance_test.go ===
func TestAppmgmtControlMonitoredInstanceResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestAppmgmtControlMonitoredInstanceResource_basic")

=== ./internal/integrationtest/artifacts_container_repository_test.go ===
func TestArtifactsContainerRepositoryResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestArtifactsContainerRepositoryResource_basic")
func sweepArtifactsContainerRepositoryResource(compartment string) error {
	artifactsClient := acctest.GetTestClients(&schema.ResourceData{}).ArtifactsClient()

=== ./internal/integrationtest/identity_domains_auth_token_test.go ===
func TestIdentityDomainsAuthTokenResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestIdentityDomainsAuthTokenResource_basic")
func sweepIdentityDomainsAuthTokenResource(compartment string) error {
	identityDomainsClient := acctest.GetTestClients(&schema.ResourceData{}).IdentityDomainsClient()

=== ./internal/integrationtest/objectstorage_private_endpoint_test.go ===
func TestObjectStoragePrivateEndpointResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestObjectStoragePrivateEndpointResource_basic")
func sweepObjectStoragePrivateEndpointResource(compartment string) error {
	objectStorageClient := acctest.GetTestClients(&schema.ResourceData{}).ObjectStorageClient()

=== ./internal/integrationtest/file_storage_replication_target_test.go ===
func TestFileStorageReplicationTargetResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestFileStorageReplicationTargetResource_basic")
func sweepFileStorageReplicationTargetResource(compartment string) error {
	fileStorageClient := acctest.GetTestClients(&schema.ResourceData{}).FileStorageClient()

=== ./internal/integrationtest/waas_custom_protection_rule_test.go ===
func TestWaasCustomProtectionRuleResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestWaasCustomProtectionRuleResource_basic")
func sweepWaasCustomProtectionRuleResource(compartment string) error {
	waasClient := acctest.GetTestClients(&schema.ResourceData{}).WaasClient()

=== ./internal/integrationtest/core_ipsec_test.go ===
func TestCoreIpSecConnectionResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestCoreIpSecConnectionResource_basic")
func sweepCoreIpSecConnectionResource(compartment string) error {
	virtualNetworkClient := acctest.GetTestClients(&schema.ResourceData{}).VirtualNetworkClient()

=== ./internal/integrationtest/cloud_guard_target_test.go ===
func TestCloudGuardTargetResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestCloudGuardTargetResource_basic")
func sweepCloudGuardTargetResource(compartment string) error {
	cloudGuardClient := acctest.GetTestClients(&schema.ResourceData{}).CloudGuardClient()

=== ./internal/integrationtest/network_firewall_network_firewall_policy_test.go ===
func TestNetworkFirewallNetworkFirewallPolicyResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestNetworkFirewallNetworkFirewallPolicyResource_basic")
func sweepNetworkFirewallNetworkFirewallPolicyResource(compartment string) error {
	networkFirewallClient := acctest.GetTestClients(&schema.ResourceData{}).NetworkFirewallClient()

=== ./internal/integrationtest/database_management_managed_my_sql_database_sql_data_test.go ===
func TestDatabaseManagementManagedMySqlDatabaseSqlDataResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestDatabaseManagementManagedMySqlDatabaseSqlDataResource_basic")

=== ./internal/integrationtest/log_analytics_log_analytics_import_custom_content_test.go ===
func TestLogAnalyticsLogAnalyticsImportCustomContentResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestLogAnalyticsLogAnalyticsImportCustomContentResource_basic")

=== ./internal/integrationtest/devops_repository_author_test.go ===
func TestDevopsRepositoryAuthorResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestDevopsRepositoryAuthorResource_basic")

=== ./internal/integrationtest/database_cloud_autonomous_vm_cluster_test.go ===
func TestDatabaseCloudAutonomousVmClusterResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestDatabaseCloudAutonomousVmClusterResource_basic")
func sweepDatabaseCloudAutonomousVmClusterResource(compartment string) error {
	databaseClient := acctest.GetTestClients(&schema.ResourceData{}).DatabaseClient()

=== ./internal/integrationtest/network_load_balancer_backend_set_test.go ===
func TestNetworkLoadBalancerBackendSetResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestNetworkLoadBalancerBackendSetResource_basic")
func sweepNetworkLoadBalancerBackendSetResource(compartment string) error {
	networkLoadBalancerClient := acctest.GetTestClients(&schema.ResourceData{}).NetworkLoadBalancerClient()

=== ./internal/integrationtest/data_safe_discovery_analytic_test.go ===
func TestDataSafeDiscoveryAnalyticResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestDataSafeDiscoveryAnalyticResource_basic")

=== ./internal/integrationtest/opsi_pecomanaged_database_insight_tcps_test.go ===
func TestOpsiPecomanagedDatabaseInsightTcpsResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestOpsiPecomanagedDatabaseInsightTcpsResource_basic")
func sweepOpsiPecomanagedDatabaseInsightTcpsResource(compartment string) error {
	operationsInsightsClient := acctest.GetTestClients(&schema.ResourceData{}).OperationsInsightsClient()

=== ./internal/integrationtest/log_analytics_namespace_scheduled_task_test.go ===
func TestLogAnalyticsNamespaceScheduledTaskResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestLogAnalyticsNamespaceScheduledTaskResource_basic")
func sweepLogAnalyticsNamespaceScheduledTaskResource(compartment string) error {
	logAnalyticsClient := acctest.GetTestClients(&schema.ResourceData{}).LogAnalyticsClient()

=== ./internal/integrationtest/database_management_managed_databases_user_proxy_user_test.go ===
func TestDatabaseManagementManagedDatabasesUserProxyUserResource_basic(t *testing.T) {
	//t.Skip("Skip this test till Database Management service provides a better way of testing this. It requires a live managed database instance")

=== ./internal/integrationtest/core_cross_connect_group_test.go ===
func TestCoreCrossConnectGroupResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestCoreCrossConnectGroupResource_basic")
func sweepCoreCrossConnectGroupResource(compartment string) error {
	virtualNetworkClient := acctest.GetTestClients(&schema.ResourceData{}).VirtualNetworkClient()

=== ./internal/integrationtest/database_management_managed_my_sql_database_test.go ===
func TestDatabaseManagementManagedMySqlDatabaseResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestDatabaseManagementManagedMySqlDatabaseResource_basic")

=== ./internal/integrationtest/identity_domains_notification_setting_test.go ===
func TestIdentityDomainsNotificationSettingResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestIdentityDomainsNotificationSettingResource_basic")

=== ./internal/integrationtest/computeinstanceagent_instance_agent_plugin_test.go ===
func TestComputeinstanceagentInstanceAgentPluginResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestComputeinstanceagentInstanceAgentPluginResource_basic")

=== ./internal/integrationtest/database_db_system_resource_frombackup_test.go ===
func TestResourceDatabaseDBSystemFromBackup(t *testing.T) {
	if strings.Contains(utils.GetEnvSettingWithBlankDefault("suppressed_tests"), "DBSystem_basic") {

=== ./internal/integrationtest/identity_domains_branding_setting_test.go ===
func TestIdentityDomainsBrandingSettingResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestIdentityDomainsBrandingSettingResource_basic")

=== ./internal/integrationtest/file_storage_filesystem_snapshot_policy_test.go ===
func TestFileStorageFilesystemSnapshotPolicyResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestFileStorageFilesystemSnapshotPolicyResource_basic")
func sweepFileStorageFilesystemSnapshotPolicyResource(compartment string) error {
	fileStorageClient := acctest.GetTestClients(&schema.ResourceData{}).FileStorageClient()

=== ./internal/integrationtest/containerengine_addon_test.go ===
func TestContainerengineAddonResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestContainerengineAddonResource_basic")
func sweepContainerengineAddonResource(compartment string) error {
	containerEngineClient := acctest.GetTestClients(&schema.ResourceData{}).ContainerEngineClient()

=== ./internal/integrationtest/optimizer_enrollment_status_test.go ===
func TestOptimizerEnrollmentStatusResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestOptimizerEnrollmentStatusResource_basic")

=== ./internal/integrationtest/core_internet_gateway_test.go ===
func TestCoreInternetGatewayResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestCoreInternetGatewayResource_basic")
func sweepCoreInternetGatewayResource(compartment string) error {
	virtualNetworkClient := acctest.GetTestClients(&schema.ResourceData{}).VirtualNetworkClient()

=== ./internal/integrationtest/load_balancer_load_balancer_policy_test.go ===
func TestLoadBalancerLoadBalancerPolicyResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestLoadBalancerLoadBalancerPolicyResource_basic")

=== ./internal/integrationtest/monitoring_metric_data_test.go ===
func TestMonitoringMetricDataResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestMonitoringMetricDataResource_basic")

=== ./internal/integrationtest/fusion_apps_fusion_environment_data_masking_activity_test.go ===
func TestFusionAppsFusionEnvironmentDataMaskingActivityResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestFusionAppsFusionEnvironmentDataMaskingActivityResource_basic")

=== ./internal/integrationtest/redis_redis_cluster_test.go ===
func TestRedisRedisClusterResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestRedisRedisClusterResource_basic")
func sweepRedisRedisClusterResource(compartment string) error {
	redisClusterClient := acctest.GetTestClients(&schema.ResourceData{}).RedisClusterClient()

=== ./internal/integrationtest/identity_data_plane_generate_scoped_access_token_test.go ===
func TestIdentityDataPlaneGenerateScopedAccessTokenResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestIdentityDataPlaneGenerateScopedAccessTokenResource_basic")

=== ./internal/integrationtest/cloud_guard_resource_test.go ===
func TestCloudGuardResourceResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestCloudGuardResourceResource_basic")

=== ./internal/integrationtest/database_db_node_console_history_test.go ===
func TestDatabaseDbNodeConsoleHistoryResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestDatabaseDbNodeConsoleHistoryResource_basic")
func sweepDatabaseDbNodeConsoleHistoryResource(compartment string) error {
	databaseClient := acctest.GetTestClients(&schema.ResourceData{}).DatabaseClient()

=== ./internal/integrationtest/opsi_autonomous_database_insight_resource_test.go ===
func TestOpsiAutonomousResourceDatabaseInsight(t *testing.T) {
	httpreplay.SetScenario("TestOpsiAutonomousResourceDatabaseInsight")

=== ./internal/integrationtest/ai_language_model_test.go ===
func TestAiLanguageModelResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestAiLanguageModelResource_basic")
func sweepAiLanguageModelResource(compartment string) error {
	aiServiceLanguageClient := acctest.GetTestClients(&schema.ResourceData{}).AiServiceLanguageClient()

=== ./internal/integrationtest/database_management_external_db_system_test.go ===
func TestDatabaseManagementExternalDbSystemResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestDatabaseManagementExternalDbSystemResource_basic")
func sweepDatabaseManagementExternalDbSystemResource(compartment string) error {
	dbManagementClient := acctest.GetTestClients(&schema.ResourceData{}).DbManagementClient()

=== ./internal/integrationtest/containerengine_node_pool_option_test.go ===
func TestContainerengineNodePoolOptionResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestContainerengineNodePoolOptionResource_basic")

=== ./internal/integrationtest/resource_scheduler_schedule_test.go ===
func TestResourceSchedulerScheduleResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestResourceSchedulerScheduleResource_basic")
func testAccCheckResourceSchedulerScheduleDestroy(s *terraform.State) error {
	noResourceFound := true
func sweepResourceSchedulerScheduleResource(compartment string) error {
	scheduleClient := acctest.GetTestClients(&schema.ResourceData{}).ScheduleClient()
func getResourceSchedulerScheduleIds(compartment string) ([]string, error) {
	ids := acctest.GetResourceIdsToSweep(compartment, "ScheduleId")
func ResourceSchedulerScheduleSweepWaitCondition(response common.OCIOperationResponse) bool {
	// Only stop if the resource is available beyond 3 mins. As there could be an issue for the sweeper to delete the resource and manual intervention required.
func ResourceSchedulerScheduleSweepResponseFetchOperation(client *tf_client.OracleClients, resourceId *string, retryPolicy *common.RetryPolicy) error {
	_, err := client.ScheduleClient().GetSchedule(context.Background(), oci_resource_scheduler.GetScheduleRequest{

=== ./internal/integrationtest/network_firewall_network_firewall_policy_url_list_test.go ===
func TestNetworkFirewallNetworkFirewallPolicyUrlListResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestNetworkFirewallNetworkFirewallPolicyUrlListResource_basic")
func sweepNetworkFirewallNetworkFirewallPolicyUrlListResource(compartment string) error {
	networkFirewallClient := acctest.GetTestClients(&schema.ResourceData{}).NetworkFirewallClient()

=== ./internal/integrationtest/devops_repository_diff_test.go ===
func TestDevopsRepositoryDiffResource_basic(t *testing.T) {
	if !strings.Contains(utils.GetEnvSettingWithBlankDefault("enabled_tests"), "RepositoryDiff") {

=== ./internal/integrationtest/disaster_recovery_dr_protection_group_test.go ===
func TestDisasterRecoveryDrProtectionGroupResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestDisasterRecoveryDrProtectionGroupResource_basic")
func sweepDisasterRecoveryDrProtectionGroupResource(compartment string) error {
	disasterRecoveryClient := acctest.GetTestClients(&schema.ResourceData{}).DisasterRecoveryClient()

=== ./internal/integrationtest/database_migration_test.go ===
func TestDatabaseMigrationResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestDatabaseMigrationResource_basic")

=== ./internal/integrationtest/log_analytics_log_analytics_entity_test.go ===
func TestLogAnalyticsLogAnalyticsEntityResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestLogAnalyticsLogAnalyticsEntityResource_basic")
func sweepLogAnalyticsLogAnalyticsEntityResource(compartment string) error {
	logAnalyticsClient := acctest.GetTestClients(&schema.ResourceData{}).LogAnalyticsClient()

=== ./internal/integrationtest/data_safe_masking_policy_health_report_test.go ===
func TestDataSafeMaskingPolicyHealthReportResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestDataSafeMaskingPolicyHealthReportResource_basic")
func sweepDataSafeMaskingPolicyHealthReportResource(compartment string) error {
	dataSafeClient := acctest.GetTestClients(&schema.ResourceData{}).DataSafeClient()

=== ./internal/integrationtest/dns_steering_policy_attachment_test.go ===
func TestDnsSteeringPolicyAttachmentResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestDnsSteeringPolicyAttachmentResource_basic")
func sweepDnsSteeringPolicyAttachmentResource(compartment string) error {
	dnsClient := acctest.GetTestClients(&schema.ResourceData{}).DnsClient()

=== ./internal/integrationtest/data_safe_sensitive_data_model_sensitive_object_test.go ===
func TestDataSafeSensitiveDataModelSensitiveObjectResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestDataSafeSensitiveDataModelSensitiveObjectResource_basic")

=== ./internal/integrationtest/license_manager_license_record_test.go ===
func TestLicenseManagerLicenseRecordResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestLicenseManagerLicenseRecordResource_basic")
func sweepLicenseManagerLicenseRecordResource(compartment string) error {
	licenseManagerClient := acctest.GetTestClients(&schema.ResourceData{}).LicenseManagerClient()

=== ./internal/integrationtest/ai_language_project_test.go ===
func TestAiLanguageProjectResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestAiLanguageProjectResource_basic")
func sweepAiLanguageProjectResource(compartment string) error {
	aiServiceLanguageClient := acctest.GetTestClients(&schema.ResourceData{}).AiServiceLanguageClient()

=== ./internal/integrationtest/adm_vulnerability_audit_test.go ===
func TestAdmVulnerabilityAuditResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestAdmVulnerabilityAuditResource_basic")
func sweepAdmVulnerabilityAuditResource(compartment string) error {
	applicationDependencyManagementClient := acctest.GetTestClients(&schema.ResourceData{}).ApplicationDependencyManagementClient()

=== ./internal/integrationtest/database_autonomous_virtual_machine_test.go ===
func TestDatabaseAutonomousVirtualMachineResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestDatabaseAutonomousVirtualMachineResource_basic")

=== ./internal/integrationtest/ocvp_supported_commitment_test.go ===
func TestOcvpSupportedCommitmentResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestOcvpSupportedCommitmentResource_basic")

=== ./internal/integrationtest/data_safe_security_policy_report_test.go ===
func TestDataSafeSecurityPolicyReportResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestDataSafeSecurityPolicyReportResource_basic")

=== ./internal/integrationtest/data_safe_mask_data_test.go ===
func TestDataSafeMaskDataResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestDataSafeMaskDataResource_basic")

=== ./internal/integrationtest/devops_build_pipeline_github_build_stage_test.go ===
func TestDevopsBuildPipelineBuildStageResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestDevopsBuildPipelineBuildStageResource_basic")

=== ./internal/integrationtest/database_management_managed_database_alert_log_count_test.go ===
func TestDatabaseManagementManagedDatabaseAlertLogCountResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestDatabaseManagementManagedDatabaseAlertLogCountResource_basic")

=== ./internal/integrationtest/os_management_hub_managed_instance_available_software_source_test.go ===
func TestOsManagementHubManagedInstanceAvailableSoftwareSourceResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestOsManagementHubManagedInstanceAvailableSoftwareSourceResource_basic")

=== ./internal/integrationtest/adm_vulnerability_audit_application_dependency_vulnerability_test.go ===
func TestAdmVulnerabilityAuditApplicationDependencyVulnerabilityResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestAdmVulnerabilityAuditApplicationDependencyVulnerabilityResource_basic")

=== ./internal/integrationtest/core_cross_connect_port_speed_shape_test.go ===
func TestCoreCrossConnectPortSpeedShapeResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestCoreCrossConnectPortSpeedShapeResource_basic")

=== ./internal/integrationtest/database_management_external_db_home_test.go ===
func TestDatabaseManagementExternalDbHomeResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestDatabaseManagementExternalDbHomeResource_basic")

=== ./internal/integrationtest/devops_build_pipeline_gitlab_server_build_stage_test.go ===
func TestDevopsBuildPipelineBuildStageGitlabServerResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestDevopsBuildPipelineBuildStageGitlabServerResource_basic")

=== ./internal/integrationtest/database_exadb_vm_cluster_db_node_test.go ===
func TestDatabaseExaDbVmClusterDbNodeResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestDatabaseExaDbVmClusterDbNodeResource_basic")

=== ./internal/integrationtest/load_balancer_load_balancer_protocol_test.go ===
func TestLoadBalancerLoadBalancerProtocolResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestLoadBalancerLoadBalancerProtocolResource_basic")

=== ./internal/integrationtest/opsi_awr_hub_test.go ===
func TestOpsiAwrHubResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestOpsiAwrHubResource_basic")
func sweepOpsiAwrHubResource(compartment string) error {
	operationsInsightsClient := acctest.GetTestClients(&schema.ResourceData{}).OperationsInsightsClient()

=== ./internal/integrationtest/kms_key_test.go ===
func TestExternalKmsKeyResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestKmsExternalKeyResource_basic")
func TestKmsKeyResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestKmsKeyResource_basic")

=== ./internal/integrationtest/data_safe_audit_trail_analytic_test.go ===
func TestDataSafeAuditTrailAnalyticResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestDataSafeAuditTrailAnalyticResource_basic")

=== ./internal/integrationtest/metering_computation_usage_carbon_emissions_config_test.go ===
func TestMeteringComputationUsageCarbonEmissionsConfigResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestMeteringComputationUsageCarbonEmissionsConfigResource_basic")

=== ./internal/integrationtest/kms_encrypted_data_test.go ===
func TestKmsEncryptedDataResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestKmsEncryptedDataResource_basic")

=== ./internal/integrationtest/data_safe_sensitive_data_models_apply_discovery_job_results_test.go ===
func TestDataSafeSensitiveDataModelsApplyDiscoveryJobResultsResource_basic(t *testing.T) {
	httpreplay.SetScenario("DataSafeSensitiveDataModelsApplyDiscoveryJobResultsResource_basic")

=== ./internal/integrationtest/data_safe_target_database_peer_target_database_test.go ===
func TestDataSafeTargetDatabasePeerTargetDatabaseResource_basic(t *testing.T) {
	t.Skip("Needs real DBCS/ExaCS, not a fake resource. Skipping due to resource and maintainability constraints")
func sweepDataSafeTargetDatabasePeerTargetDatabaseResource(compartment string) error {
	dataSafeClient := acctest.GetTestClients(&schema.ResourceData{}).DataSafeClient()

=== ./internal/integrationtest/database_db_home_test.go ===
func TestDatabaseDbHomeResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestDatabaseDbHomeResource_basic")
func TestDatabaseDbHomeResource_exacs(t *testing.T) {
	httpreplay.SetScenario("TestDatabaseDbHomeResource_exacs")
func sweepDatabaseDbHomeResource(compartment string) error {
	databaseClient := acctest.GetTestClients(&schema.ResourceData{}).DatabaseClient()

=== ./internal/integrationtest/os_management_hub_lifecycle_stage_test.go ===
func TestOsManagementHubLifecycleStageResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestOsManagementHubLifecycleStageResource_basic")

=== ./internal/integrationtest/core_compute_global_image_capability_schemas_version_test.go ===
func TestCoreComputeGlobalImageCapabilitySchemasVersionResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestCoreComputeGlobalImageCapabilitySchemasVersionResource_basic")

=== ./internal/integrationtest/data_safe_sensitive_data_model_sensitive_schema_test.go ===
func TestDataSafeSensitiveDataModelSensitiveSchemaResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestDataSafeSensitiveDataModelSensitiveSchemaResource_basic")

=== ./internal/integrationtest/audit_configuration_test.go ===
func TestAuditConfigurationResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestAuditConfigurationResource_basic")

=== ./internal/integrationtest/opsi_host_insight_cloud_host_resource_test.go ===
func TestResourceOpsiCloudHostInsight(t *testing.T) {
	httpreplay.SetScenario("TestResourceOpsiCloudHostInsight")

=== ./internal/integrationtest/fleet_apps_management_property_test.go ===
func TestFleetAppsManagementPropertyResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestFleetAppsManagementPropertyResource_basic")
func sweepFleetAppsManagementPropertyResource(compartment string) error {
	fleetAppsManagementAdminClient := acctest.GetTestClients(&schema.ResourceData{}).FleetAppsManagementAdminClient()

=== ./internal/integrationtest/waf_protection_capability_test.go ===
func TestWafProtectionCapabilityResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestWafProtectionCapabilityResource_basic")

=== ./internal/integrationtest/identity_domains_user_test.go ===
func TestIdentityDomainsUserResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestIdentityDomainsUserResource_basic")
func sweepIdentityDomainsUserResource(compartment string) error {
	identityDomainsClient := acctest.GetTestClients(&schema.ResourceData{}).IdentityDomainsClient()

=== ./internal/integrationtest/certificates_management_certificate_version_test.go ===
func TestCertificatesManagementCertificateVersionResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestCertificatesManagementCertificateVersionResource_basic")

=== ./internal/integrationtest/operator_access_control_operator_control_test.go ===
func TestOperatorAccessControlOperatorControlResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestOperatorAccessControlOperatorControlResource_basic")
func sweepOperatorAccessControlOperatorControlResource(compartment string) error {
	operatorControlClient := acctest.GetTestClients(&schema.ResourceData{}).OperatorControlClient()

=== ./internal/integrationtest/load_balancer_rule_set_test.go ===
func TestLoadBalancerRuleSetResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestLoadBalancerRuleSetResource_basic")
func sweepLoadBalancerRuleSetResource(compartment string) error {
	loadBalancerClient := acctest.GetTestClients(&schema.ResourceData{}).LoadBalancerClient()

=== ./internal/integrationtest/dns_rrset_test.go ===
func TestDnsRrsetResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestDnsRrsetResource_basic")

=== ./internal/integrationtest/log_analytics_log_analytics_resource_categories_list_test.go ===
func TestLogAnalyticsLogAnalyticsResourceCategoriesListResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestLogAnalyticsLogAnalyticsResourceCategoriesListResource_basic")

=== ./internal/integrationtest/certificates_management_certificate_test.go ===
func TestCertificatesManagementCertificateResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestCertificatesManagementCertificateResource_basic")

=== ./internal/integrationtest/database_db_system_resource_basic_test.go ===
func TestResourceDatabaseDBSystemFromDatabase(t *testing.T) {
	if strings.Contains(utils.GetEnvSettingWithBlankDefault("suppressed_tests"), "DBSystem_basic") {
func TestResourceDatabaseDBSystemBasic(t *testing.T) {
	httpreplay.SetScenario("TestResourceDatabaseDBSystemBasic")

=== ./internal/integrationtest/capacity_management_occ_availability_catalog_occ_availability_test.go ===
func TestCapacityManagementOccAvailabilityCatalogOccAvailabilityResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestCapacityManagementOccAvailabilityCatalogOccAvailabilityResource_basic")

=== ./internal/integrationtest/blockchain_blockchain_platform_test.go ===
func TestBlockchainBlockchainPlatformResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestBlockchainBlockchainPlatformResource_basic")
func sweepBlockchainBlockchainPlatformResource(compartment string) error {
	blockchainPlatformClient := acctest.GetTestClients(&schema.ResourceData{}).BlockchainPlatformClient()

=== ./internal/integrationtest/golden_gate_trail_sequence_test.go ===
func TestGoldenGateTrailSequenceResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestGoldenGateTrailSequenceResource_basic")

=== ./internal/integrationtest/devops_deploy_stage_oke_canary_deploy_test.go ===
func TestDevopsDeployStageResource_okeCanaryDeploy(t *testing.T) {
	httpreplay.SetScenario("TestDevopsDeployStageResource_okeCanaryDeploy")

=== ./internal/integrationtest/apigateway_usage_plan_test.go ===
func TestApigatewayUsagePlanResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestApigatewayUsagePlanResource_basic")
func sweepApigatewayUsagePlanResource(compartment string) error {
	usagePlansClient := acctest.GetTestClients(&schema.ResourceData{}).UsagePlansClient()

=== ./internal/integrationtest/containerengine_cluster_credential_rotation_status_test.go ===
func TestContainerengineClusterCredentialRotationStatusResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestContainerengineClusterCredentialRotationStatusResource_basic")

=== ./internal/integrationtest/golden_gate_deployment_version_test.go ===
func TestGoldenGateDeploymentVersionResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestGoldenGateDeploymentVersionResource_basic")

=== ./internal/integrationtest/core_cross_connect_status_test.go ===
func TestCoreCrossConnectStatusResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestCoreCrossConnectStatusResource_basic")

=== ./internal/integrationtest/network_firewall_network_firewall_policy_security_rule_test.go ===
func TestNetworkFirewallNetworkFirewallPolicySecurityRuleResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestNetworkFirewallNetworkFirewallPolicySecurityRuleResource_basic")
func sweepNetworkFirewallNetworkFirewallPolicySecurityRuleResource(compartment string) error {
	networkFirewallClient := acctest.GetTestClients(&schema.ResourceData{}).NetworkFirewallClient()

=== ./internal/integrationtest/network_firewall_network_firewall_policy_tunnel_inspection_rule_test.go ===
func TestNetworkFirewallNetworkFirewallPolicyTunnelInspectionRuleResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestNetworkFirewallNetworkFirewallPolicyTunnelInspectionRuleResource_basic")
func sweepNetworkFirewallNetworkFirewallPolicyTunnelInspectionRuleResource(compartment string) error {
	networkFirewallClient := acctest.GetTestClients(&schema.ResourceData{}).NetworkFirewallClient()

=== ./internal/integrationtest/database_autonomous_db_version_test.go ===
func TestDatabaseAutonomousDbVersionResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestDatabaseAutonomousDbVersionResource_basic")

=== ./internal/integrationtest/core_cross_connect_within_group_test.go ===
func TestResourceCoreCrossConnectResourceWithinGroup(t *testing.T) {
	httpreplay.SetScenario("TestResourceCoreCrossConnectResourceWithinGroup")

=== ./internal/integrationtest/log_analytics_namespace_storage_encryption_key_info_test.go ===
func TestLogAnalyticsNamespaceStorageEncryptionKeyInfoResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestLogAnalyticsNamespaceStorageEncryptionKeyInfoResource_basic")

=== ./internal/integrationtest/cloud_migrations_migration_asset_test.go ===
func TestCloudMigrationsMigrationAssetResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestCloudMigrationsMigrationAssetResource_basic")
func sweepCloudMigrationsMigrationAssetResource(compartment string) error {
	migrationClient := acctest.GetTestClients(&schema.ResourceData{}).MigrationClient()

=== ./internal/integrationtest/database_db_system_storage_performance_test.go ===
func TestDatabaseDbSystemStoragePerformanceResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestDatabaseDbSystemStoragePerformanceResource_basic")

=== ./internal/integrationtest/core_app_catalog_listing_resource_version_agreement_test.go ===
func TestResourceAppCatalogListingResourceVersionAgreement_basic(t *testing.T) {
	httpreplay.SetScenario("TestCoreAppCatalogListingResourceVersionAgreementResource_basic")

=== ./internal/integrationtest/delegate_access_control_delegated_resource_access_request_audit_log_report_test.go ===
func TestDelegateAccessControlDelegatedResourceAccessRequestAuditLogReportResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestDelegateAccessControlDelegatedResourceAccessRequestAuditLogReportResource_basic")

=== ./internal/integrationtest/stack_monitoring_discovery_job_log_test.go ===
func TestStackMonitoringDiscoveryJobLogResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestStackMonitoringDiscoveryJobLogResource_basic")

=== ./internal/integrationtest/globally_distributed_database_sharded_database_23ai_test.go ===
func TestGloballyDistributedDatabase23aiShardedDatabaseResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestGloballyDistributedDatabase23aiShardedDatabaseResource_basic")
func sweepGloballyDistributedDatabase23aiShardedDatabaseResource(compartment string) error {
	shardedDatabaseServiceClient := acctest.GetTestClients(&schema.ResourceData{}).ShardedDatabaseServiceClient()

=== ./internal/integrationtest/monitoring_alarm_test.go ===
func TestMonitoringAlarmResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestMonitoringAlarmResource_basic")
func sweepMonitoringAlarmResource(compartment string) error {
	monitoringClient := acctest.GetTestClients(&schema.ResourceData{}).MonitoringClient()

=== ./internal/integrationtest/database_db_system_resource_allbm_test.go ===
func TestResourceDatabaseDBSystemAllBM(t *testing.T) {
	if strings.Contains(utils.GetEnvSettingWithBlankDefault("suppressed_tests"), "DBSystem_allBM") {

=== ./internal/integrationtest/fusion_apps_fusion_environment_service_attachment_test.go ===
func TestFusionAppsFusionEnvironmentServiceAttachmentResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestFusionAppsFusionEnvironmentServiceAttachmentResource_basic")
func sweepFusionAppsFusionEnvironmentServiceAttachmentResource(compartment string) error {
	fusionApplicationsClient := acctest.GetTestClients(&schema.ResourceData{}).FusionApplicationsClient()

=== ./internal/integrationtest/ai_anomaly_detection_project_test.go ===
func TestAiAnomalyDetectionProjectResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestAiAnomalyDetectionProjectResource_basic")
func sweepAiAnomalyDetectionProjectResource(compartment string) error {
	anomalyDetectionClient := acctest.GetTestClients(&schema.ResourceData{}).AnomalyDetectionClient()

=== ./internal/integrationtest/artifacts_container_image_signature_test.go ===
func TestArtifactsContainerImageSignatureResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestArtifactsContainerImageSignatureResource_basic")
func sweepArtifactsContainerImageSignatureResource(compartment string) error {
	artifactsClient := acctest.GetTestClients(&schema.ResourceData{}).ArtifactsClient()

=== ./internal/integrationtest/load_balancer_rule_control_access_test.go ===
func TestResourceLoadBalancerRuleSetResource_controlAccess_test(t *testing.T) {
	httpreplay.SetScenario("TestResourceLoadBalancerRuleSetResource_controlAccess_test")

=== ./internal/integrationtest/core_drg_attachment_management_resource_test.go ===
func TestCoreDrgAttachmentManagementResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestCoreDrgAttachmentManagementResource_basic")

=== ./internal/integrationtest/database_management_external_asm_test.go ===
func TestDatabaseManagementExternalAsmResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestDatabaseManagementExternalAsmResource_basic")

=== ./internal/integrationtest/core_boot_volume_attachment_test.go ===
func TestCoreBootVolumeAttachmentResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestCoreBootVolumeAttachmentResource_basic")

=== ./internal/integrationtest/database_externalcontainerdatabases_stack_monitoring_test.go ===
func TestDatabaseExternalcontainerdatabasesStackMonitoringResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestDatabaseExternalcontainerdatabasesStackMonitoringResource_basic")

=== ./internal/integrationtest/os_management_hub_management_station_refresh_management_test.go ===
func TestOsManagementHubManagementStationRefreshManagementResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestOsManagementHubManagementStationRefreshManagementResource_basic")

=== ./internal/integrationtest/mysql_mysql_db_system_resource_2_test.go ===
func TestMysqlMysqlDbSystemResource_dataStorageTest(t *testing.T) {
	httpreplay.SetScenario("TestMysqlMysqlDbSystemResource_dataStorageTest")

=== ./internal/integrationtest/database_db_home_patch_history_entry_test.go ===
func TestDatabaseDbHomePatchHistoryEntryResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestDatabaseDbHomePatchHistoryEntryResource_basic")

=== ./internal/integrationtest/capacity_management_occ_handover_resource_block_test.go ===
func TestCapacityManagementOccHandoverResourceBlockResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestCapacityManagementOccHandoverResourceBlockResource_basic")

=== ./internal/integrationtest/data_safe_discovery_job_test.go ===
func TestDataSafeDiscoveryJobResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestDataSafeDiscoveryJobResource_basic")
func sweepDataSafeDiscoveryJobResource(compartment string) error {
	dataSafeClient := acctest.GetTestClients(&schema.ResourceData{}).DataSafeClient()

=== ./internal/integrationtest/apigateway_api_test.go ===
func TestApigatewayApiResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestApigatewayApiResource_basic")
func sweepApigatewayApiResource(compartment string) error {
	apiGatewayClient := acctest.GetTestClients(&schema.ResourceData{}).ApiGatewayClient()

=== ./internal/integrationtest/datascience_job_run_test.go ===
func TestDatascienceJobRunResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestDatascienceJobRunResource_basic")
func sweepDatascienceJobRunResource(compartment string) error {
	dataScienceClient := acctest.GetTestClients(&schema.ResourceData{}).DataScienceClient()

=== ./internal/integrationtest/metering_computation_average_carbon_emission_test.go ===
func TestMeteringComputationAverageCarbonEmissionResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestMeteringComputationAverageCarbonEmissionResource_basic")

=== ./internal/integrationtest/core_dedicated_vm_host_instance_shape_test.go ===
func TestCoreDedicatedVmHostInstanceShapeResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestCoreDedicatedVmHostInstanceShapeResource_basic")

=== ./internal/integrationtest/ai_document_processor_job_test.go ===
func TestAiDocumentProcessorJobResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestAiDocumentProcessorJobResource_basic")

=== ./internal/integrationtest/optimizer_profile_level_test.go ===
func TestOptimizerProfileLevelResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestOptimizerProfileLevelResource_basic")

=== ./internal/integrationtest/generative_ai_agent_data_source_test.go ===
func TestGenerativeAiAgentDataSourceResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestGenerativeAiAgentDataSourceResource_basic")
func testAccCheckGenerativeAiAgentDataSourceDestroy(s *terraform.State) error {
	noResourceFound := true
func sweepGenerativeAiAgentDataSourceResource(compartment string) error {
	generativeAiAgentClient := acctest.GetTestClients(&schema.ResourceData{}).GenerativeAiAgentClient()
func getGenerativeAiAgentDataSourceIds(compartment string) ([]string, error) {
	ids := acctest.GetResourceIdsToSweep(compartment, "DataSourceId")
func GenerativeAiAgentDataSourceSweepWaitCondition(response common.OCIOperationResponse) bool {
	// Only stop if the resource is available beyond 3 mins. As there could be an issue for the sweeper to delete the resource and manual intervention required.
func GenerativeAiAgentDataSourceSweepResponseFetchOperation(client *tf_client.OracleClients, resourceId *string, retryPolicy *common.RetryPolicy) error {
	_, err := client.GenerativeAiAgentClient().GetDataSource(context.Background(), oci_generative_ai_agent.GetDataSourceRequest{

=== ./internal/integrationtest/core_public_ip_test.go ===
func TestCorePublicIpResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestCorePublicIpResource_basic")
func sweepCorePublicIpResource(compartment string) error {
	virtualNetworkClient := acctest.GetTestClients(&schema.ResourceData{}).VirtualNetworkClient()

=== ./internal/integrationtest/identity_domains_my_trusted_user_agent_test.go ===
func TestIdentityDomainsMyTrustedUserAgentResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestIdentityDomainsMyTrustedUserAgentResource_basic")
func sweepIdentityDomainsMyTrustedUserAgentResource(compartment string) error {
	identityDomainsClient := acctest.GetTestClients(&schema.ResourceData{}).IdentityDomainsClient()

=== ./internal/integrationtest/os_management_hub_managed_instance_group_manage_module_streams_management_test.go ===
func TestOsManagementHubManagedInstanceGroupManageModuleStreamsManagementResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestOsManagementHubManagedInstanceGroupManageModuleStreamsManagementResource_basic")

=== ./internal/integrationtest/objectstorage_preauthrequest_test.go ===
func TestObjectStoragePreauthenticatedRequestResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestObjectStoragePreauthenticatedRequestResource_basic")
func sweepObjectStoragePreauthenticatedRequestResource(compartment string) error {
	objectStorageClient := acctest.GetTestClients(&schema.ResourceData{}).ObjectStorageClient()

=== ./internal/integrationtest/network_load_balancer_backend_target_test.go ===
func TestNetworkLoadBalancerBackendTargetIdResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestNetworkLoadBalancerBackendTargetIdResource_basic")

=== ./internal/integrationtest/monitoring_alarm_suppression_test.go ===
func TestMonitoringAlarmSuppressionResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestMonitoringAlarmSuppressionResource_basic")
func sweepMonitoringAlarmSuppressionResource(compartment string) error {
	monitoringClient := acctest.GetTestClients(&schema.ResourceData{}).MonitoringClient()

=== ./internal/integrationtest/golden_gate_deployment_type_test.go ===
func TestGoldenGateDeploymentTypeResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestGoldenGateDeploymentTypeResource_basic")

=== ./internal/integrationtest/onesubscription_subscribed_service_test.go ===
func TestOnesubscriptionSubscribedServiceResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestOnesubscriptionSubscribedServiceResource_basic")

=== ./internal/integrationtest/core_compute_capacity_topology_compute_bare_metal_host_test.go ===
func TestCoreComputeCapacityTopologyComputeBareMetalHostResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestCoreComputeCapacityTopologyComputeBareMetalHostResource_basic")

=== ./internal/integrationtest/core_virtual_circuit_public_prefix_test.go ===
func TestCoreVirtualCircuitPublicPrefixResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestCoreVirtualCircuitPublicPrefixResource_basic")

=== ./internal/integrationtest/functions_function_digest_test.go ===
func TestFunctionsFunctionResource_digest(t *testing.T) {
	httpreplay.SetScenario("TestFunctionsFunctionResource_digest")
func retrieveFunctionResourceFromControlPlane(id string) (oci_functions.GetFunctionResponse, error) {
	client := acctest.TestAccProvider.Meta().(*tf_client.OracleClients).FunctionsManagementClient()
func TestFunctionsFunctionResource_digest_create(t *testing.T) {
	httpreplay.SetScenario("TestFunctionsFunctionResource_digest_create")

=== ./internal/integrationtest/database_management_externalpluggabledatabase_external_pluggable_dbm_features_management_test.go ===
func TestDatabaseManagementExternalpluggabledatabaseExternalPluggableDbmFeaturesManagementResource_basic(t *testing.T) {
	t.Skip("Skipping as PDB enablement is dependent on CDB enablement")

=== ./internal/integrationtest/database_exadb_vm_cluster_test.go ===
func TestDatabaseExadbVmClusterResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestDatabaseExadbVmClusterResource_basic")
func TestDatabaseExadbVmClusterResource_add_remove_node(t *testing.T) {
	httpreplay.SetScenario("TestDatabaseExadbVmClusterResource_add_remove_node")
func sweepDatabaseExadbVmClusterResource(compartment string) error {
	databaseClient := acctest.GetTestClients(&schema.ResourceData{}).DatabaseClient()

=== ./internal/integrationtest/core_drg_route_distribution_statement_test.go ===
func TestCoreDrgRouteDistributionStatementResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestCoreDrgRouteDistributionStatementResource_basic")

=== ./internal/integrationtest/budget_budget_test.go ===
func TestBudgetBudgetResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestBudgetBudgetResource_basic")
func sweepBudgetBudgetResource(compartment string) error {
	budgetClient := acctest.GetTestClients(&schema.ResourceData{}).BudgetClient()

=== ./internal/integrationtest/vulnerability_scanning_host_scan_target_error_test.go ===
func TestVulnerabilityScanningHostScanTargetErrorResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestVulnerabilityScanningHostScanTargetErrorResource_basic")

=== ./internal/integrationtest/ocvp_esxi_host_test.go ===
func TestOcvpEsxiHostResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestOcvpEsxiHostResource_basic")
func sweepOcvpEsxiHostResource(compartment string) error {
	esxiHostClient := acctest.GetTestClients(&schema.ResourceData{}).EsxiHostClient()

=== ./internal/integrationtest/service_catalog_private_application_package_test.go ===
func TestServiceCatalogPrivateApplicationPackageResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestServiceCatalogPrivateApplicationPackageResource_basic")

=== ./internal/integrationtest/core_app_catalog_listing_resource_version_test.go ===
func TestCoreAppCatalogListingResourceVersionResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestCoreAppCatalogListingResourceVersionResource_basic")

=== ./internal/integrationtest/apigateway_deployment_resource_test.go ===
func TestResourceApigatewayDeploymentResourceJwt_basic(t *testing.T) {
	httpreplay.SetScenario("TestApigatewayDeploymentResourceJwt_basic")

=== ./internal/integrationtest/devops_connection_gitlab_server_test.go ===
func TestDevopsGitlabServerConnectionResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestDevopsGitlabServerConnectionResource_basic")

=== ./internal/integrationtest/datacatalog_catalog_type_test.go ===
func TestDatacatalogCatalogTypeResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestDatacatalogCatalogTypeResource_basic")

=== ./internal/integrationtest/identity_domains_my_support_account_test.go ===
func TestIdentityDomainsMySupportAccountResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestIdentityDomainsMySupportAccountResource_basic")
func sweepIdentityDomainsMySupportAccountResource(compartment string) error {
	identityDomainsClient := acctest.GetTestClients(&schema.ResourceData{}).IdentityDomainsClient()

=== ./internal/integrationtest/waas_http_redirect_test.go ===
func TestWaasHttpRedirectResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestWaasHttpRedirectResource_basic")
func sweepWaasHttpRedirectResource(compartment string) error {
	redirectClient := acctest.GetTestClients(&schema.ResourceData{}).RedirectClient()

=== ./internal/integrationtest/database_tools_common.go ===
func sweepDatabaseToolsDatabaseToolsConnectionResource(compartment string) error {
	fmt.Printf("Sweeping database tools connections")

=== ./internal/integrationtest/os_management_hub_managed_instance_updatable_package_test.go ===
func TestOsManagementHubManagedInstanceUpdatablePackageResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestOsManagementHubManagedInstanceUpdatablePackageResource_basic")

=== ./internal/integrationtest/osmanagement_managed_instance_management_test.go ===
func TestOsmanagementManagedInstanceManagementResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestOsmanagementManagedInstanceGroupResource_basic")

=== ./internal/integrationtest/nosql_index_test.go ===
func TestNosqlIndexResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestNosqlIndexResource_basic")
func sweepNosqlIndexResource(compartment string) error {
	nosqlClient := acctest.GetTestClients(&schema.ResourceData{}).NosqlClient()

=== ./internal/integrationtest/dataflow_invoke_run_submit_test.go ===
func TestDataflowInvokeRunResource_SparkSubmit(t *testing.T) {
	httpreplay.SetScenario("TestDataflowInvokeRunResource_SparkSubmit")
func sweepDataflowInvokeRunSubmitResource(compartment string) error {
	dataFlowClient := acctest.GetTestClients(&schema.ResourceData{}).DataFlowClient()

=== ./internal/integrationtest/logging_custom_log_test.go ===
func TestLoggingCustomLogResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestLoggingLogResource_basic")
func sweepLoggingCustomLogResource(compartment string) error {
	loggingManagementClient := acctest.GetTestClients(&schema.ResourceData{}).LoggingManagementClient()

=== ./internal/integrationtest/core_boot_volume_backup_copy_test.go ===
func TestResourceCoreBootVolumeBackup_copy(t *testing.T) {
	httpreplay.SetScenario("TestResourceCoreBootVolumeBackup_copy")

=== ./internal/integrationtest/devops_deploy_stage_shell_test.go ===
func TestDevopsDeployStageResource_deployShell(t *testing.T) {
	httpreplay.SetScenario("TestDevopsDeployStageResource_deployHelm")

=== ./internal/integrationtest/vault_secret_version_test.go ===
func TestVaultSecretVersionResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestVaultSecretVersionResource_basic")

=== ./internal/integrationtest/identity_domains_security_question_setting_test.go ===
func TestIdentityDomainsSecurityQuestionSettingResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestIdentityDomainsSecurityQuestionSettingResource_basic")

=== ./internal/integrationtest/data_safe_masking_reports_masked_column_test.go ===
func TestDataSafeMaskingReportsMaskedColumnResource_basic(t *testing.T) {
	t.Skip("Skipping this test as the report ocid is hardcoded and may not exist when the test runs")

=== ./internal/integrationtest/core_vcn_test.go ===
func TestCoreVcnResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestCoreVcnResource_basic")
func sweepCoreVcnResource(compartment string) error {
	virtualNetworkClient := acctest.GetTestClients(&schema.ResourceData{}).VirtualNetworkClient()

=== ./internal/integrationtest/database_external_non_container_database_test.go ===
func TestDatabaseExternalNonContainerDatabaseResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestDatabaseExternalNonContainerDatabaseResource_basic")
func sweepDatabaseExternalNonContainerDatabaseResource(compartment string) error {
	databaseClient := acctest.GetTestClients(&schema.ResourceData{}).DatabaseClient()

=== ./internal/integrationtest/data_safe_security_policy_test.go ===
func TestDataSafeSecurityPolicyResource_basic(t *testing.T) {
	t.Skip("Skipping this test as the security policy ocid is hardcoded and may not exist when the test runs")

=== ./internal/integrationtest/data_safe_unset_user_assessment_baseline_test.go ===
func TestDataSafeUnsetUserAssessmentBaselineResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestDataSafeUnsetUserAssessmentBaselineResource_basic")

=== ./internal/integrationtest/functions_pbf_listing_test.go ===
func TestFunctionsPbfListingResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestFunctionsPbfListingResource_basic")

=== ./internal/integrationtest/core_drg_attachment_resource_test.go ===
func (s *ResourceCoreDrgAttachmentTestSuite) SetupTest() {
	s.Providers = acctest.TestAccProviders
func (s *ResourceCoreDrgAttachmentTestSuite) TestAccResourceCoreDrgAttachment_basic() {
	var resId, resId2 string
func TestResourceCoreDrgAttachmentTestSuite(t *testing.T) {
	httpreplay.SetScenario("TestResourceCoreDrgAttachmentTestSuite")

=== ./internal/integrationtest/database_vm_cluster_test.go ===
func TestDatabaseVmClusterResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestDatabaseVmClusterResource_basic")
func sweepDatabaseVmClusterResource(compartment string) error {
	databaseClient := acctest.GetTestClients(&schema.ResourceData{}).DatabaseClient()

=== ./internal/integrationtest/os_management_hub_management_station_mirror_synchronize_management_test.go ===
func TestOsManagementHubManagementStationMirrorSynchronizeManagementResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestOsManagementHubManagementStationMirrorSynchronizeManagementResource_basic")

=== ./internal/integrationtest/database_tools_database_tools_endpoint_service_test.go ===
func TestDatabaseToolsDatabaseToolsEndpointServiceResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestDatabaseToolsDatabaseToolsEndpointServiceResource_basic")

=== ./internal/integrationtest/identity_domains_account_recovery_setting_test.go ===
func TestIdentityDomainsAccountRecoverySettingResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestIdentityDomainsAccountRecoverySettingResource_basic")

=== ./internal/integrationtest/core_volume_backup_policy_assignment_test.go ===
func TestCoreVolumeBackupPolicyAssignmentResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestCoreVolumeBackupPolicyAssignmentResource_basic")

=== ./internal/integrationtest/database_vm_cluster_recommended_network_test.go ===
func TestDatabaseVmClusterRecommendedNetworkResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestDatabaseVmClusterRecommendedNetworkResource_basic")

=== ./internal/integrationtest/database_management_managed_database_preferred_credential_test.go ===
func TestDatabaseManagementManagedDatabasePreferredCredentialResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestDatabaseManagementManagedDatabasePreferredCredentialResource_basic")

=== ./internal/integrationtest/database_application_vip_test.go ===
func TestDatabaseApplicationVipResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestDatabaseApplicationVipResource_basic")
func sweepDatabaseApplicationVipResource(compartment string) error {
	databaseClient := acctest.GetTestClients(&schema.ResourceData{}).DatabaseClient()

=== ./internal/integrationtest/license_manager_product_license_consumer_test.go ===
func TestLicenseManagerProductLicenseConsumerResource_basic(t *testing.T) {
	t.Skip("The response to this API may take upto 4 hours to populate and there is no work request ID to track it")

=== ./internal/integrationtest/monitoring_alarm_history_collection_test.go ===
func TestMonitoringAlarmHistoryCollectionResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestMonitoringAlarmHistoryCollectionResource_basic")

=== ./internal/integrationtest/database_autonomous_container_database_dataguard_association_operation_resource_test.go ===
func TestDatabaseAutonomousContainerDatabaseDataguardAssociationOperationResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestDatabaseAutonomousContainerDatabaseDataguardAssociationOperationResource_basic")
func TestDatabaseExaccAutonomousContainerDatabaseDataguardAssociationOperationResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestDatabaseExaccAutonomousContainerDatabaseDataguardAssociationOperationResource_basic")

=== ./internal/integrationtest/identity_domains_smtp_credential_test.go ===
func TestIdentityDomainsSmtpCredentialResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestIdentityDomainsSmtpCredentialResource_basic")
func sweepIdentityDomainsSmtpCredentialResource(compartment string) error {
	identityDomainsClient := acctest.GetTestClients(&schema.ResourceData{}).IdentityDomainsClient()

=== ./internal/integrationtest/marketplace_listing_test.go ===
func TestMarketplaceListingResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestMarketplaceListingResource_basic")

=== ./internal/integrationtest/devops_deploy_pipeline_test.go ===
func TestDevopsDeployPipelineResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestDevopsDeployPipelineResource_basic")
func sweepDevopsDeployPipelineResource(compartment string) error {
	deployPipelineClient := acctest.GetTestClients(&schema.ResourceData{}).DevopsClient()

=== ./internal/integrationtest/opsi_macs_cloud_exadata_insight_test.go ===
func TestOpsiMacsCloudExadataInsightResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestOpsiMacsCloudExadataInsightResource_basic")
func sweepOpsiMacsCloudExadataInsightResource(compartment string) error {
	operationsInsightsClient := acctest.GetTestClients(&schema.ResourceData{}).OperationsInsightsClient()

=== ./internal/integrationtest/management_agent_management_agent_plugin_test.go ===
func TestManagementAgentManagementAgentPluginResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestManagementAgentManagementAgentPluginResource_basic")
func TestManagementAgentManagementAgentPluginResource_withagent(t *testing.T) {
	httpreplay.SetScenario("TestManagementAgentManagementAgentPluginResource_withagent")

=== ./internal/integrationtest/jms_fleet_diagnose_test.go ===
func TestJmsFleetDiagnosesResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestJmsFleetDiagnosesResource_basic")

=== ./internal/integrationtest/database_management_managed_database_user_data_access_container_test.go ===
func TestDatabaseManagementManagedDatabaseUserDataAccessContainerResource_basic(t *testing.T) {
	//t.Skip("Skip this test till Database Management service provides a better way of testing this. It requires a live managed database instance")

=== ./internal/integrationtest/database_autonomous_container_database_dataguard_association_test.go ===
func TestDatabaseAutonomousContainerDatabaseDataguardAssociationResource_basic(t *testing.T) {

func TestDatabaseExaccAutonomousContainerDatabaseDataguardAssociationResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestDatabaseExaccAutonomousContainerDatabaseDataguardAssociationResource_basic")

=== ./internal/integrationtest/core_capture_filter_test.go ===
func TestCoreCaptureFilterResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestCoreCaptureFilterResource_basic")
func sweepCoreCaptureFilterResource(compartment string) error {
	virtualNetworkClient := acctest.GetTestClients(&schema.ResourceData{}).VirtualNetworkClient()

=== ./internal/integrationtest/apm_synthetics_scripted_rest_monitor_test.go ===
func TestApmSyntheticsScriptedRestMonitorResource(t *testing.T) {
	httpreplay.SetScenario("TestApmSyntheticsMonitorResource_basic")

=== ./internal/integrationtest/devops_build_pipeline_vbs_build_stage_test.go ===
func TestDevopsBuildPipelineBuildStageVbsResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestDevopsBuildPipelineBuildStageVbsResource_basic")

=== ./internal/integrationtest/appmgmt_control_monitor_plugin_management_test.go ===
func TestAppmgmtControlMonitorPluginManagementResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestAppmgmtControlMonitorPluginManagementResource_basic")

=== ./internal/integrationtest/onesubscription_subscription_test.go ===
func TestOnesubscriptionSubscriptionResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestOnesubscriptionSubscriptionResource_basic")

=== ./internal/integrationtest/waas_edge_subnet_test.go ===
func TestWaasEdgeSubnetResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestWaasEdgeSubnetResource_basic")

=== ./internal/integrationtest/core_local_peering_gateway_test.go ===
func TestCoreLocalPeeringGatewayResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestCoreLocalPeeringGatewayResource_basic")
func sweepCoreLocalPeeringGatewayResource(compartment string) error {
	virtualNetworkClient := acctest.GetTestClients(&schema.ResourceData{}).VirtualNetworkClient()

=== ./internal/integrationtest/core_image_scenario_test.go ===
func (s *ResourceCoreImageTestSuite) SetupTest() {
	s.Providers = acctest.TestAccProviders
func (s *ResourceCoreImageTestSuite) TestAccResourceCoreImage_objectStorageImageSources() {
	/*
func TestResourceCoreImageTestSuite(t *testing.T) {
	httpreplay.SetScenario("TestResourceCoreImageTestSuite")

=== ./internal/integrationtest/os_management_hub_software_source_change_availability_management_test.go ===
func TestOsManagementHubSoftwareSourceChangeAvailabilityManagementResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestOsManagementHubSoftwareSourceChangeAvailabilityManagementResource_basic")

=== ./internal/integrationtest/stack_monitoring_monitored_resource_test.go ===
func TestStackMonitoringMonitoredResourceResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestStackMonitoringMonitoredResourceResource_basic")
func testAccCheckStackMonitoringMonitoredResourceDestroy(s *terraform.State) error {
	noResourceFound := true
func sweepStackMonitoringMonitoredResourceResource(compartment string) error {
	stackMonitoringClient := acctest.GetTestClients(&schema.ResourceData{}).StackMonitoringClient()
func getStackMonitoringMonitoredResourceIds(compartment string) ([]string, error) {
	ids := acctest.GetResourceIdsToSweep(compartment, "MonitoredResourceId")
func StackMonitoringMonitoredResourceSweepWaitCondition(response common.OCIOperationResponse) bool {
	// Only stop if the resource is available beyond 3 mins. As there could be an issue for the sweeper to delete the resource and manual intervention required.
func StackMonitoringMonitoredResourceSweepResponseFetchOperation(client *tf_client.OracleClients, resourceId *string, retryPolicy *common.RetryPolicy) error {
	_, err := client.StackMonitoringClient().GetMonitoredResource(context.Background(), oci_stack_monitoring.GetMonitoredResourceRequest{

=== ./internal/integrationtest/core_instance_pool_test.go ===
func TestCoreInstancePoolResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestCoreInstancePoolResource_basic")
func sweepCoreInstancePoolResource(compartment string) error {
	computeManagementClient := acctest.GetTestClients(&schema.ResourceData{}).ComputeManagementClient()
func TestCoreInstancePoolResourceIpv6_basic(t *testing.T) {
	httpreplay.SetScenario("TestCoreInstancePoolResourceIpv6_basic")

=== ./internal/integrationtest/media_services_media_asset_test.go ===
func TestMediaServicesMediaAssetResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestMediaServicesMediaAssetResource_basic")
func sweepMediaServicesMediaAssetResource(compartment string) error {
	mediaServicesClient := acctest.GetTestClients(&schema.ResourceData{}).MediaServicesClient()

=== ./internal/integrationtest/core_byoip_range_test.go ===
func TestCoreByoipRangeResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestCoreByoipRangeResource_basic")
func sweepCoreByoipRangeResource(compartment string) error {
	virtualNetworkClient := acctest.GetTestClients(&schema.ResourceData{}).VirtualNetworkClient()

=== ./internal/integrationtest/core_vcn_dns_resolver_association_test.go ===
func TestCoreVcnDnsResolverAssociationResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestCoreVcnDnsResolverAssociationResource_basic")

=== ./internal/integrationtest/apigateway_certificate_test.go ===
func TestApigatewayCertificateResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestApigatewayCertificateResource_basic")
func sweepApigatewayCertificateResource(compartment string) error {
	apiGatewayClient := acctest.GetTestClients(&schema.ResourceData{}).ApiGatewayClient()

=== ./internal/integrationtest/core_instance_configuration_resource_test.go ===
func TestAccCoreInstanceConfigurationResource_platformConfig(t *testing.T) {
	if strings.Contains(utils.GetEnvSettingWithBlankDefault("suppressed_tests"), "TestAccCoreInstanceConfigurationResource_platformConfig") {

=== ./internal/integrationtest/opsi_exadata_insight_test.go ===
func TestOpsiExadataInsightResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestOpsiExadataInsightResource_basic")
func sweepOpsiExadataInsightResource(compartment string) error {
	operationsInsightsClient := acctest.GetTestClients(&schema.ResourceData{}).OperationsInsightsClient()

=== ./internal/integrationtest/database_vm_cluster_network_test.go ===
func TestDatabaseVmClusterNetworkResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestDatabaseVmClusterNetworkResource_basic")
func sweepDatabaseVmClusterNetworkResource(compartment string) error {
	databaseClient := acctest.GetTestClients(&schema.ResourceData{}).DatabaseClient()

=== ./internal/integrationtest/identity_identity_provider_test.go ===
func TestIdentityIdentityProviderResource_basic(t *testing.T) {
	metadataFile := utils.GetEnvSettingWithBlankDefault("identity_provider_metadata_file")

=== ./internal/integrationtest/bds_odh_instance_resource_test.go ===
func TestResourceBdsOdhInstance(t *testing.T) {
	httpreplay.SetScenario("TestResourceBdsOdhInstance")
func sweepBdsBdsInstanceOdhResource(compartment string) error {
	bdsClient := acctest.GetTestClients(&schema.ResourceData{}).BdsClient()

=== ./internal/integrationtest/database_cloud_autonomous_vm_cluster_acd_resource_usage_test.go ===
func TestDatabaseCloudAutonomousVmClusterAcdResourceUsageResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestDatabaseCloudAutonomousVmClusterAcdResourceUsageResource_basic")

=== ./internal/integrationtest/log_analytics_namespace_properties_metadata_test.go ===
func TestLogAnalyticsNamespacePropertiesMetadataResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestLogAnalyticsNamespacePropertiesMetadataResource_basic")

=== ./internal/integrationtest/health_checks_ping_probe_test.go ===
func TestHealthChecksPingProbeResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestHealthChecksPingProbeResource_basic")

=== ./internal/integrationtest/dataflow_private_endpoint_test.go ===
func TestDataflowPrivateEndpointResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestDataflowPrivateEndpointResource_basic")
func sweepDataflowPrivateEndpointResource(compartment string) error {
	dataFlowClient := acctest.GetTestClients(&schema.ResourceData{}).DataFlowClient()

=== ./internal/integrationtest/capacity_management_occ_capacity_request_test.go ===
func TestCapacityManagementOccCapacityRequestResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestCapacityManagementOccCapacityRequestResource_basic")
func sweepCapacityManagementOccCapacityRequestResource(compartment string) error {
	capacityManagementClient := acctest.GetTestClients(&schema.ResourceData{}).CapacityManagementClient()

=== ./internal/integrationtest/database_autonomous_patch_test.go ===
func TestDatabaseAutonomousPatchResource_basic(t *testing.T) {
	t.Skip("Skip this test till the MR resource test is skipped since the patch id is reliably fetched from MR resource")

=== ./internal/integrationtest/stack_monitoring_maintenance_windows_stop_test.go ===
func TestStackMonitoringMaintenanceWindowsStopResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestStackMonitoringMaintenanceWindowsStopResource_basic")

=== ./internal/integrationtest/data_safe_masking_policies_apply_difference_to_masking_columns_test.go ===
func TestDataSafeMaskingPoliciesApplyDifferenceToMaskingColumnsResource_basic(t *testing.T) {
	httpreplay.SetScenario("MaskingPoliciesApplyDifferenceToMaskingColumnsResource_basic")

=== ./internal/integrationtest/opensearch_opensearch_cluster_test.go ===
func TestOpensearchOpensearchClusterResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestOpensearchOpensearchClusterResource_basic")
func sweepOpensearchOpensearchClusterResource(compartment string) error {
	opensearchClusterClient := acctest.GetTestClients(&schema.ResourceData{}).OpensearchClusterClient()

=== ./internal/integrationtest/core_virtual_circuit_associated_tunnel_test.go ===
func TestCoreVirtualCircuitAssociatedTunnelResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestCoreVirtualCircuitAssociatedTunnelResource_basic")

=== ./internal/integrationtest/os_management_hub_profile_test.go ===
func TestOsManagementHubProfileResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestOsManagementHubProfileResource_basic")
func sweepOsManagementHubProfileResource(compartment string) error {
	onboardingClient := acctest.GetTestClients(&schema.ResourceData{}).OnboardingClient()

=== ./internal/integrationtest/identity_domains_approval_workflow_step_test.go ===
func TestIdentityDomainsApprovalWorkflowStepResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestIdentityDomainsApprovalWorkflowStepResource_basic")
func sweepIdentityDomainsApprovalWorkflowStepResource(compartment string) error {
	identityDomainsClient := acctest.GetTestClients(&schema.ResourceData{}).IdentityDomainsClient()

=== ./internal/integrationtest/dataflow_sql_endpoint_test.go ===
func TestDataflowSqlEndpointResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestDataflowSqlEndpointResource_basic")
func sweepDataflowSqlEndpointResource(compartment string) error {
	dataFlowClient := acctest.GetTestClients(&schema.ResourceData{}).DataFlowClient()

=== ./internal/integrationtest/data_safe_on_prem_connector_test.go ===
func TestDataSafeOnPremConnectorResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestDataSafeOnPremConnectorResource_basic")
func sweepDataSafeOnPremConnectorResource(compartment string) error {
	dataSafeClient := acctest.GetTestClients(&schema.ResourceData{}).DataSafeClient()

=== ./internal/integrationtest/log_analytics_log_analytics_categories_list_test.go ===
func TestLogAnalyticsLogAnalyticsCategoriesListResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestLogAnalyticsLogAnalyticsCategoriesListResource_basic")

=== ./internal/integrationtest/datascience_data_science_private_endpoint_test.go ===
func TestDatascienceDataSciencePrivateEndpointResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestDatascienceDataSciencePrivateEndpointResource_basic")
func sweepDatascienceDataSciencePrivateEndpointResource(compartment string) error {
	dataScienceClient := acctest.GetTestClients(&schema.ResourceData{}).DataScienceClient()

=== ./internal/integrationtest/generative_ai_agent_agent_test.go ===
func TestGenerativeAiAgentAgentResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestGenerativeAiAgentAgentResource_basic")
func sweepGenerativeAiAgentAgentResource(compartment string) error {
	generativeAiAgentClient := acctest.GetTestClients(&schema.ResourceData{}).GenerativeAiAgentClient()

=== ./internal/integrationtest/opsi_operations_insights_warehouse_resource_usage_summary_test.go ===
func TestOpsiOperationsInsightsWarehouseResourceUsageSummaryResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestOpsiOperationsInsightsWarehouseResourceUsageSummaryResource_basic")

=== ./internal/integrationtest/identity_domains_condition_test.go ===
func TestIdentityDomainsConditionResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestIdentityDomainsConditionResource_basic")
func sweepIdentityDomainsConditionResource(compartment string) error {
	identityDomainsClient := acctest.GetTestClients(&schema.ResourceData{}).IdentityDomainsClient()

=== ./internal/integrationtest/identity_domains_user_attributes_setting_test.go ===
func TestIdentityDomainsUserAttributesSettingResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestIdentityDomainsUserAttributesSettingResource_basic")

=== ./internal/integrationtest/opsi_importable_agent_entity_test.go ===
func TestOpsiImportableAgentEntityResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestOpsiImportableAgentEntityResource_basic")

=== ./internal/integrationtest/opsi_awr_hub_awr_sources_summary_test.go ===
func TestOpsiAwrHubAwrSourcesSummaryResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestOpsiAwrHubAwrSourcesSummaryResource_basic")

=== ./internal/integrationtest/os_management_hub_managed_instance_install_windows_updates_management_test.go ===
func TestOsManagementHubManagedInstanceInstallWindowsUpdatesManagementResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestOsManagementHubManagedInstanceInstallWindowsUpdatesManagementResource_basic")

=== ./internal/integrationtest/database_db_system_patch_test.go ===
func TestDatabaseDbSystemPatchResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestDatabaseDbSystemPatchResource_basic")

=== ./internal/integrationtest/database_management_external_asm_user_test.go ===
func TestDatabaseManagementExternalAsmUserResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestDatabaseManagementExternalAsmUserResource_basic")

=== ./internal/integrationtest/core_cluster_network_instance_test.go ===
func TestCoreClusterNetworkInstanceResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestCoreClusterNetworkInstanceResource_basic")

=== ./internal/integrationtest/database_autonomous_container_database_dataguard_association_resource_test.go ===
func TestDatabaseAutonomousContainerDatabaseDataguardAssociationResource_update(t *testing.T) {


=== ./internal/integrationtest/database_db_system_resource_amd_vm_test.go ===
func TestResourceDatabaseDBSystemAmdVM(t *testing.T) {
	httpreplay.SetScenario("TestResourceDatabaseDBSystemAmdVM")

=== ./internal/integrationtest/stack_monitoring_enterprise_extensibility_config_test.go ===
func TestStackMonitoringEnterpriseExtensibilityConfigResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestStackMonitoringEnterpriseExtensibilityConfigResource_basic")
func sweepStackMonitoringEnterpriseExtensibilityConfigResource(compartment string) error {
	stackMonitoringClient := acctest.GetTestClients(&schema.ResourceData{}).StackMonitoringClient()

=== ./internal/integrationtest/dataflow_sql_endpoint_access_control_rules_test.go ===
func TestDataflowSqlEndpointAccessControlRulesResource_basic(t *testing.T) {
	t.Skip("Skip this test as this is not supported yet. It will be taken care post GA")

=== ./internal/integrationtest/optimizer_recommendation_strategy_test.go ===
func TestOptimizerRecommendationStrategyResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestOptimizerRecommendationStrategyResource_basic")

=== ./internal/integrationtest/objectstorage_object_test.go ===
func TestObjectStorageObjectResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestObjectStorageObjectResource_basic")
func TestObjectStorageObjectResource_failContentLengthLimit(t *testing.T) {
	httpreplay.SetScenario("TestObjectStorageObjectResource_failContentLengthLimit")
func TestObjectStorageObjectResource_metadata(t *testing.T) {
	httpreplay.SetScenario("TestObjectStorageObjectResource_metadata")
func sweepObjectStorageObjectResource(compartment string) error {
	objectStorageClient := acctest.GetTestClients(&schema.ResourceData{}).ObjectStorageClient()
func TestObjectStorageObjectResource_multipartUpload(t *testing.T) {
	httpreplay.SetScenario("TestObjectStorageObjectResource_multipartUpload")
func TestObjectStorageObjectResource_crossRegionCopy(t *testing.T) {
	httpreplay.SetScenario("TestObjectStorageObjectResource_crossRegionCopy")

=== ./internal/integrationtest/devops_repository_mirror_test.go ===
func TestDevopsRepositoryMirrorResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestDevopsRepositoryMirrorResource_basic")

=== ./internal/integrationtest/dns_resolver_test.go ===
func TestDnsResolverResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestDnsResolverResource_basic")

=== ./internal/integrationtest/golden_gate_message_test.go ===
func TestGoldenGateMessageResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestGoldenGateMessageResource_basic")

=== ./internal/integrationtest/fusion_apps_fusion_environment_family_subscription_detail_test.go ===
func TestFusionAppsFusionEnvironmentFamilySubscriptionDetailResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestFusionAppsFusionEnvironmentFamilySubscriptionDetailResource_basic")

=== ./internal/integrationtest/data_safe_report_content_test.go ===
func TestDataSafeReportContentResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestDataSafeReportContentResource_basic")

=== ./internal/integrationtest/kms_vault_resource_test.go ===
func TestResourceKmsVaultResource_default(t *testing.T) {
	t.Skip("Skip this test till KMS provides a better way of testing this.")

=== ./internal/integrationtest/devops_trigger_bitbucketCloud_test.go ===
func TestDevopsBitbucketCloudTriggerResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestDevopsBitbucketCloudTriggerResource_basic")

=== ./internal/integrationtest/dns_action_create_zone_from_zone_file_test.go ===
func TestDnsActionCreateZoneFromZoneFileResource_basic(t *testing.T) {
	t.Skip("This test will not work as the oci_dns_action_create_zone_from_zone_file must be imported to a oci_dns_zone resource to manage the zone beyond creation")

=== ./internal/integrationtest/dataintegration_workspace_test.go ===
func TestDataintegrationWorkspaceResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestDataintegrationWorkspaceResource_basic")
func sweepDataintegrationWorkspaceResource(compartment string) error {
	dataIntegrationClient := acctest.GetTestClients(&schema.ResourceData{}).DataIntegrationClient()

=== ./internal/integrationtest/psql_db_system_patch_test.go ===
func TestPsqlDbSystemPatchResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestPsqlDbSystemPatchResource_basic")

=== ./internal/integrationtest/core_cross_connect_group_resource_test.go ===
func TestResourceCoreCrossConnectGroupMACSecVersions(t *testing.T) {
	httpreplay.SetScenario("TestResourceCoreCrossConnectGroupMACSecVersions")

=== ./internal/integrationtest/database_management_externalnoncontainerdatabase_external_non_container_dbm_features_management_test.go ===
func TestDatabaseManagementExternalnoncontainerdatabaseExternalNonContainerDbmFeaturesManagementResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestDatabaseManagementExternalnoncontainerdatabaseExternalNonContainerDbmFeaturesManagementResource_basic")

=== ./internal/integrationtest/identity_domains_rule_test.go ===
func TestIdentityDomainsRuleResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestIdentityDomainsRuleResource_basic")
func sweepIdentityDomainsRuleResource(compartment string) error {
	identityDomainsClient := acctest.GetTestClients(&schema.ResourceData{}).IdentityDomainsClient()

=== ./internal/integrationtest/devops_trigger_gitlab_server_test.go ===
func TestDevopsGitlabServerTriggerResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestDevopsGitlabServerTriggerResource_basic")

=== ./internal/integrationtest/identity_domains_my_api_key_test.go ===
func TestIdentityDomainsMyApiKeyResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestIdentityDomainsMyApiKeyResource_basic")
func sweepIdentityDomainsMyApiKeyResource(compartment string) error {
	identityDomainsClient := acctest.GetTestClients(&schema.ResourceData{}).IdentityDomainsClient()

=== ./internal/integrationtest/disaster_recovery_dr_plan_test.go ===
func TestDisasterRecoveryDrPlanResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestDisasterRecoveryDrPlanResource_basic")
func sweepDisasterRecoveryDrPlanResource(compartment string) error {
	disasterRecoveryClient := acctest.GetTestClients(&schema.ResourceData{}).DisasterRecoveryClient()

=== ./internal/integrationtest/apm_traces_trace_aggregated_snapshot_data_test.go ===
func TestApmTracesTraceAggregatedSnapshotDataResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestApmTracesTraceAggregatedSnapshotDataResource_basic")

=== ./internal/integrationtest/data_safe_user_assessment_user_analytic_test.go ===
func TestDataSafeUserAssessmentUserAnalyticResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestDataSafeUserAssessmentUserAnalyticResource_basic")

=== ./internal/integrationtest/database_autonomous_database_undelete_test.go ===
func TestDatabaseAutonomousDatabaseResource_undelete(t *testing.T) {
	datasourceName := "data.oci_database_autonomous_databases.test_autonomous_databases"

=== ./internal/integrationtest/dataflow_run_statement_test.go ===
func TestDataflowRunStatementResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestDataflowRunStatementResource_basic")
func sweepDataflowRunStatementResource(compartment string) error {
	dataFlowClient := acctest.GetTestClients(&schema.ResourceData{}).DataFlowClient()

=== ./internal/integrationtest/core_instance_preemptible_instance_config_test.go ===
func TestResourceCoreInstancePreemptibleInstanceConfig_basic(t *testing.T) {
	httpreplay.SetScenario("TestCoreInstancePreemptibleInstanceConfigResource_basic")

=== ./internal/integrationtest/core_fast_connect_provider_service_key_test.go ===
func TestCoreFastConnectProviderServiceKeyResource_basic(t *testing.T) {
	if httpreplay.ShouldRetryImmediately() {

=== ./internal/integrationtest/vn_monitoring_path_analysi_test.go ===
func TestVnMonitoringPathAnalysiResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestVnMonitoringPathAnalysiResource_basic")

=== ./internal/integrationtest/mysql_mysql_configuration_test.go ===
func TestMysqlMysqlConfigurationResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestMysqlMysqlConfigurationResource_basic")
func sweepMysqlMysqlConfigurationResource(compartment string) error {
	mysqlaasClient := acctest.GetTestClients(&schema.ResourceData{}).MysqlaasClient()

=== ./internal/integrationtest/queue_queue_test.go ===
func TestQueueQueueResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestQueueQueueResource_basic")
func sweepQueueQueueResource(compartment string) error {
	queueAdminClient := acctest.GetTestClients(&schema.ResourceData{}).QueueAdminClient()

=== ./internal/integrationtest/waas_waas_policy_test.go ===
func TestWaasWaasPolicyResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestWaasWaasPolicyResource_basic")
func sweepWaasWaasPolicyResource(compartment string) error {
	waasClient := acctest.GetTestClients(&schema.ResourceData{}).WaasClient()

=== ./internal/integrationtest/apigateway_api_validation_test.go ===
func TestApigatewayApiValidationResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestApigatewayApiValidationResource_basic")

=== ./internal/integrationtest/log_analytics_namespace_storage_overlapping_recall_test.go ===
func TestLogAnalyticsNamespaceStorageOverlappingRecallResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestLogAnalyticsNamespaceStorageOverlappingRecallResource_basic")

=== ./internal/integrationtest/datascience_job_test.go ===
func TestDatascienceJobResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestDatascienceJobResource_basic")
func sweepDatascienceJobResource(compartment string) error {
	dataScienceClient := acctest.GetTestClients(&schema.ResourceData{}).DataScienceClient()

=== ./internal/integrationtest/datacatalog_data_asset_test.go ===
func TestDatacatalogDataAssetResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestDatacatalogDataAssetResource_basic")

=== ./internal/integrationtest/bds_bds_instance_operation_certificate_managements_management_test.go ===
func TestBdsBdsInstanceOperationCertificateManagementsManagementResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestBdsBdsInstanceOperationCertificateManagementsManagementResource_basic")

=== ./internal/integrationtest/core_compute_capacity_reservation_test.go ===
func TestCoreComputeCapacityReservationResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestCoreComputeCapacityReservationResource_basic")
func sweepCoreComputeCapacityReservationResource(compartment string) error {
	computeClient := acctest.GetTestClients(&schema.ResourceData{}).ComputeClient()

=== ./internal/integrationtest/core_volume_group_replica_test.go ===
func TestCoreVolumeGroupReplicaResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestCoreVolumeGroupReplicaResource_basic")

=== ./internal/integrationtest/fusion_apps_fusion_environment_scheduled_activity_test.go ===
func TestFusionAppsFusionEnvironmentScheduledActivityResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestFusionAppsFusionEnvironmentScheduledActivityResource_basic")

=== ./internal/integrationtest/management_agent_management_agent_available_history_test.go ===
func TestManagementAgentManagementAgentAvailableHistoryResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestManagementAgentManagementAgentAvailableHistoryResource_basic")

=== ./internal/integrationtest/nosql_table_resource_test.go ===
func TestNosqlTableResource_test(t *testing.T) {
	httpreplay.SetScenario("TestNosqlTableResource_test")

=== ./internal/integrationtest/database_external_container_database_management_test.go ===
func TestDatabaseExternalContainerDatabaseManagementResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestDatabaseExternalContainerDatabaseManagementResource_basic")

=== ./internal/integrationtest/devops_build_pipeline_ocir_deliver_artifact_stage_test.go ===
func TestDevopsBuildPipelineStageOCIRDeliverArtifactResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestDevopsBuildPipelineStageOCIRDeliverArtifactResource_basic")

=== ./internal/integrationtest/opsi_exadata_insight_resource_test.go ===
func TestOpsiResourceExadataInsight(t *testing.T) {
	httpreplay.SetScenario("TestOpsiResourceExadataInsight")

=== ./internal/integrationtest/dns_steering_policy_failover_test.go ===
func TestResourceDnsSteeringPolicyFailOver(t *testing.T) {
	httpreplay.SetScenario("TestResourceDnsSteeringPolicyFailOver")

=== ./internal/integrationtest/core_ip_inventory_subnet_test.go ===
func TestCoreIpInventorySubnetResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestCoreIpInventorySubnetResource_basic")

=== ./internal/integrationtest/data_safe_report_definition_test.go ===
func TestDataSafeReportDefinitionResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestDataSafeReportDefinitionResource_basic")
func sweepDataSafeReportDefinitionResource(compartment string) error {
	dataSafeClient := acctest.GetTestClients(&schema.ResourceData{}).DataSafeClient()

=== ./internal/integrationtest/database_management_external_listener_service_test.go ===
func TestDatabaseManagementExternalListenerServiceResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestDatabaseManagementExternalListenerServiceResource_basic")

=== ./internal/integrationtest/ai_document_model_test.go ===
func TestAiDocumentModelResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestAiDocumentModelResource_basic")
func sweepAiDocumentModelResource(compartment string) error {
	aiServiceDocumentClient := acctest.GetTestClients(&schema.ResourceData{}).AiServiceDocumentClient()

=== ./internal/integrationtest/fleet_apps_management_fleet_target_test.go ===
func TestFleetAppsManagementFleetTargetResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestFleetAppsManagementFleetTargetResource_basic")

=== ./internal/integrationtest/identity_allowed_domain_license_type_test.go ===
func TestIdentityAllowedDomainLicenseTypeResource_basic(t *testing.T) {
	t.Skip("Skip this test because henosis tenancy is needed")

=== ./internal/integrationtest/metering_computation_configuration_test.go ===
func TestMeteringComputationConfigurationResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestMeteringComputationConfigurationResource_basic")

=== ./internal/integrationtest/data_safe_compare_security_assessment_test.go ===
func TestDataSafeCompareSecurityAssessmentResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestDataSafeCompareSecurityAssessmentResource_basic")

=== ./internal/integrationtest/apm_config_config_test.go ===
func TestApmConfigConfigResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestApmConfigConfigResource_basic")
func sweepApmConfigConfigResource(compartment string) error {
	configClient := acctest.GetTestClients(&schema.ResourceData{}).ConfigClient()

=== ./internal/integrationtest/core_route_table_test.go ===
func TestCoreRouteTableResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestCoreRouteTableResource_basic")
func sweepCoreRouteTableResource(compartment string) error {
	virtualNetworkClient := acctest.GetTestClients(&schema.ResourceData{}).VirtualNetworkClient()

=== ./internal/integrationtest/cloud_guard_data_mask_rule_test.go ===
func TestCloudGuardDataMaskRuleResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestCloudGuardDataMaskRuleResource_basic")
func sweepCloudGuardDataMaskRuleResource(compartment string) error {
	cloudGuardClient := acctest.GetTestClients(&schema.ResourceData{}).CloudGuardClient()

=== ./internal/integrationtest/ai_anomaly_detection_data_asset_test.go ===
func TestAiAnomalyDetectionDataAssetResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestAiAnomalyDetectionDataAssetResource_basic")
func sweepAiAnomalyDetectionDataAssetResource(compartment string) error {
	anomalyDetectionClient := acctest.GetTestClients(&schema.ResourceData{}).AnomalyDetectionClient()

=== ./internal/integrationtest/fleet_apps_management_maintenance_window_test.go ===
func TestFleetAppsManagementMaintenanceWindowResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestFleetAppsManagementMaintenanceWindowResource_basic")
func sweepFleetAppsManagementMaintenanceWindowResource(compartment string) error {
	fleetAppsManagementMaintenanceWindowClient := acctest.GetTestClients(&schema.ResourceData{}).FleetAppsManagementMaintenanceWindowClient()

=== ./internal/integrationtest/golden_gate_deployment_upgrade_test.go ===
func TestGoldenGateDeploymentUpgradeResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestGoldenGateDeploymentUpgradeResource_basic")

=== ./internal/integrationtest/jms_java_downloads_java_license_acceptance_record_test.go ===
func TestJmsJavaDownloadsJavaLicenseAcceptanceRecordResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestJmsJavaDownloadsJavaLicenseAcceptanceRecordResource_basic")
func sweepJmsJavaDownloadsJavaLicenseAcceptanceRecordResource(compartment string) error {
	javaDownloadClient := acctest.GetTestClients(&schema.ResourceData{}).JavaDownloadClient()

=== ./internal/integrationtest/waas_certificate_test.go ===
func TestWaasCertificateResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestWaasCertificateResource_basic")
func sweepWaasCertificateResource(compartment string) error {
	waasClient := acctest.GetTestClients(&schema.ResourceData{}).WaasClient()

=== ./internal/integrationtest/email_email_domain_test.go ===
func TestEmailEmailDomainResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestEmailEmailDomainResource_basic")
func sweepEmailEmailDomainResource(compartment string) error {
	emailClient := acctest.GetTestClients(&schema.ResourceData{}).EmailClient()

=== ./internal/integrationtest/management_agent_management_agent_image_test.go ===
func TestManagementAgentManagementAgentImageResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestManagementAgentManagementAgentImageResource_basic")

=== ./internal/integrationtest/operator_access_control_access_request_history_test.go ===
func TestOperatorAccessControlAccessRequestHistoryResource_basic(t *testing.T) {
	t.Skip("Access Requests are created outside customer api. Access requests may not be available all the time")

=== ./internal/integrationtest/data_safe_alert_policy_test.go ===
func TestDataSafeAlertPolicyResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestDataSafeAlertPolicyResource_basic")
func sweepDataSafeAlertPolicyResource(compartment string) error {
	dataSafeClient := acctest.GetTestClients(&schema.ResourceData{}).DataSafeClient()

=== ./internal/integrationtest/capacity_management_occ_handover_resource_block_detail_test.go ===
func TestCapacityManagementOccHandoverResourceBlockDetailResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestCapacityManagementOccHandoverResourceBlockDetailResource_basic")

=== ./internal/integrationtest/autoscaling_auto_scaling_configuration_scenario_test.go ===
func (s *ResourceAutoScalingConfigurationTestSuite) SetupTest() {
	s.Providers = acctest.TestAccProviders
func (s *ResourceAutoScalingConfigurationTestSuite) TestAccResourceAutoScalingConfiguration_InstancePoolSources() {
	var instancePoolId string
func TestAutoScalingAutoScalingConfigurationResource_scheduledExecution(t *testing.T) {
	httpreplay.SetScenario("TestAutoScalingAutoScalingConfigurationResource_scheduledExecution")
func TestAutoScalingAutoScalingConfigurationResource_scheduledExecution_ResourceAction(t *testing.T) {
	httpreplay.SetScenario("TestAutoScalingAutoScalingConfigurationResource_scheduledExecution_ResourceAction")
func TestResourceAutoScalingConfigurationTestSuite(t *testing.T) {
	httpreplay.SetScenario("TestResourceAutoScalingConfigurationTestSuite")

=== ./internal/integrationtest/core_compute_cluster_test.go ===
func TestCoreComputeClusterResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestCoreComputeClusterResource_basic")
func sweepCoreComputeClusterResource(compartment string) error {
	computeClient := acctest.GetTestClients(&schema.ResourceData{}).ComputeClient()

=== ./internal/integrationtest/database_db_system_shape_test.go ===
func TestDatabaseDbSystemShapeResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestDatabaseDbSystemShapeResource_basic")

=== ./internal/integrationtest/golden_gate_connection_test.go ===
func TestGoldenGateConnectionResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestGoldenGateConnectionResource_basic")
func sweepGoldenGateConnectionResource(compartment string) error {
	goldenGateClient := acctest.GetTestClients(&schema.ResourceData{}).GoldenGateClient()

=== ./internal/integrationtest/database_vm_cluster_add_virtual_machine_test.go ===
func TestDatabaseVmClusterAddVirtualMachineResource_basic(t *testing.T) {
	t.Skip("Skip test for there is a diff in plan despite adding lifecycle state ignore changes for db_servers and cpu_core_count for the resource `oci_database_vm_cluster`")

=== ./internal/integrationtest/osub_usage_computed_usage_test.go ===
func TestOsubUsageComputedUsageResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestOsubUsageComputedUsageResource_basic")

=== ./internal/integrationtest/data_safe_user_assessment_test.go ===
func TestDataSafeUserAssessmentResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestDataSafeUserAssessmentResource_basic")
func sweepDataSafeUserAssessmentResource(compartment string) error {
	dataSafeClient := acctest.GetTestClients(&schema.ResourceData{}).DataSafeClient()

=== ./internal/integrationtest/database_autonomous_container_database_version_test.go ===
func TestDatabaseAutonomousContainerDatabaseVersionResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestDatabaseAutonomousContainerDatabaseVersionResource_basic")
func TestDatabaseExaccAutonomousContainerDatabaseVersionResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestDatabaseExaccAutonomousContainerDatabaseVersionResource_basic")

=== ./internal/integrationtest/load_balancer_backend_test.go ===
func TestLoadBalancerBackendResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestLoadBalancerBackendResource_basic")
func sweepLoadBalancerBackendResource(compartment string) error {
	loadBalancerClient := acctest.GetTestClients(&schema.ResourceData{}).LoadBalancerClient()

=== ./internal/integrationtest/os_management_hub_managed_instance_detach_profile_management_test.go ===
func TestOsManagementHubManagedInstanceDetachProfileManagementResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestOsManagementHubManagedInstanceDetachProfileManagementResource_basic")

=== ./internal/integrationtest/database_autonomous_database_wallet_test.go ===
func TestDatabaseAutonomousDatabaseWalletResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestDatabaseAutonomousDatabaseWalletResource_basic")

=== ./internal/integrationtest/vn_monitoring_path_analyzer_test_test.go ===
func TestVnMonitoringPathAnalyzerTestResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestVnMonitoringPathAnalyzerTestResource_basic")
func sweepVnMonitoringPathAnalyzerTestResource(compartment string) error {
	vnMonitoringClient := acctest.GetTestClients(&schema.ResourceData{}).VnMonitoringClient()

=== ./internal/integrationtest/devops_repository_path_test.go ===
func TestDevopsRepositoryPathResource_basic(t *testing.T) {
	if !strings.Contains(utils.GetEnvSettingWithBlankDefault("enabled_tests"), "RepositoryPath") {

=== ./internal/integrationtest/kms_vault_usage_test.go ===
func TestKmsVaultUsageResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestKmsVaultUsageResource_basic")

=== ./internal/integrationtest/computeinstanceagent_instance_available_plugin_test.go ===
func TestComputeinstanceagentInstanceAvailablePluginResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestComputeinstanceagentInstanceAvailablePluginResource_basic")

=== ./internal/integrationtest/core_network_security_group_security_rule_test.go ===
func TestCoreNetworkSecurityGroupSecurityRuleResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestCoreNetworkSecurityGroupSecurityRuleResource_basic")

=== ./internal/integrationtest/ocvp_sddc_deprecated_test.go ===
func TestOcvpSddcResourceDeprecated_basic(t *testing.T) {
	httpreplay.SetScenario("TestOcvpSddcResourceDeprecated_basic")

=== ./internal/integrationtest/database_tools_database_tools_connection_postgresql_test.go ===
func TestDatabaseToolsDatabaseToolsConnectionPostgresqlResource_basic(t *testing.T) {
	config := acctest.ProviderTestConfig()

=== ./internal/integrationtest/objectstorage_preauthrequest_resource_test.go ===
func (s *ResourceObjectstoragePARTestSuite) SetupTest() {
	s.Token, s.TokenFn = acctest.TokenizeWithHttpReplay("object_storage_resource")
func (s *ResourceObjectstoragePARTestSuite) TestAccResourceObjectstoragePAR_basic() {

func TestUnitResourceObjectstoragePAR_parseIds(t *testing.T) {
	t.Run("Parse Composite Ids", func(t *testing.T) {
func TestObjectStoragePreauthenticatedRequestResource_newObjectNameParam(t *testing.T) {
	httpreplay.SetScenario("TestObjectStoragePreauthenticatedRequestResource_newObjectNameParam")
func TestResourceObjectstoragePARTestSuite(t *testing.T) {
	httpreplay.SetScenario("TestResourceObjectstoragePARTestSuite")

=== ./internal/integrationtest/devops_build_pipeline_code_repository_build_stage_test.go ===
func TestDevopsBuildPipelineBuildStageCodeRepoResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestDevopsBuildPipelineBuildStageCodeRepoResource_basic")

=== ./internal/integrationtest/service_catalog_private_application_test.go ===
func TestServiceCatalogPrivateApplicationResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestServiceCatalogPrivateApplicationResource_basic")
func sweepServiceCatalogPrivateApplicationResource(compartment string) error {
	serviceCatalogClient := acctest.GetTestClients(&schema.ResourceData{}).ServiceCatalogClient()

=== ./internal/integrationtest/bastion_session_test.go ===
func TestBastionSessionResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestBastionSessionResource_basic")
func sweepBastionSessionResource(compartment string) error {
	bastionClient := acctest.GetTestClients(&schema.ResourceData{}).BastionClient()

=== ./internal/integrationtest/onesubscription_invoice_test.go ===
func TestOnesubscriptionInvoiceResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestOnesubscriptionInvoiceResource_basic")

=== ./internal/integrationtest/os_management_hub_managed_instance_test.go ===
func TestOsManagementHubManagedInstanceResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestOsManagementHubManagedInstanceResource_basic")

=== ./internal/integrationtest/usage_proxy_subscription_reward_test.go ===
func TestUsageProxySubscriptionRewardResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestUsageProxySubscriptionRewardResource_basic")

=== ./internal/integrationtest/announcements_service_announcement_subscriptions_filter_group_test.go ===
func TestAnnouncementsServiceAnnouncementSubscriptionsFilterGroupResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestAnnouncementsServiceAnnouncementSubscriptionsFilterGroupResource_basic")

=== ./internal/integrationtest/apm_config_apdex_test.go ===
func TestApmConfigApdexResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestApmConfigApdexResource_basic")
func sweepApmConfigApdexResource(compartment string) error {
	configClient := acctest.GetTestClients(&schema.ResourceData{}).ConfigClient()

=== ./internal/integrationtest/compute_cloud_at_customer_ccc_upgrade_schedule_test.go ===
func TestComputeCloudAtCustomerCccUpgradeScheduleResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestComputeCloudAtCustomerCccUpgradeScheduleResource_basic")
func sweepComputeCloudAtCustomerCccUpgradeScheduleResource(compartment string) error {
	computeCloudAtCustomerClient := acctest.GetTestClients(&schema.ResourceData{}).ComputeCloudAtCustomerClient()

=== ./internal/integrationtest/oda_oda_private_endpoint_attachment_test.go ===
func TestOdaOdaPrivateEndpointAttachmentResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestOdaOdaPrivateEndpointAttachmentResource_basic")
func sweepOdaOdaPrivateEndpointAttachmentResource(compartment string) error {
	managementClient := acctest.GetTestClients(&schema.ResourceData{}).ManagementClient()

=== ./internal/integrationtest/generative_ai_endpoint_test.go ===
func TestGenerativeAiEndpointResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestGenerativeAiEndpointResource_basic")
func sweepGenerativeAiEndpointResource(compartment string) error {
	generativeAiClient := acctest.GetTestClients(&schema.ResourceData{}).GenerativeAiClient()

=== ./internal/integrationtest/devops_deploy_environment_private_oke_test.go ===
func TestDevopsDeployEnvironmentResource_privateOke(t *testing.T) {
	httpreplay.SetScenario("TestDevopsDeployEnvironmentResource_privateOke")

=== ./internal/integrationtest/logging_log_test.go ===
func TestLoggingLogResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestLoggingLogResource_basic")
func GetLogResourceCompositeId(resourceName string) resource.ImportStateIdFunc {
	return func(s *terraform.State) (string, error) {
func sweepLoggingLogResource(compartment string) error {
	loggingManagementClient := acctest.GetTestClients(&schema.ResourceData{}).LoggingManagementClient()

=== ./internal/integrationtest/log_analytics_namespace_test.go ===
func TestLogAnalyticsNamespaceResource_basic(t *testing.T) {
	t.Skip("skipping test as onboarding tenancy is a one time operation only and cannot be done on a recurring basis")

=== ./internal/integrationtest/datascience_notebook_session_shape_test.go ===
func TestDatascienceNotebookSessionShapeResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestDatascienceNotebookSessionShapeResource_basic")

=== ./internal/integrationtest/load_balancer_load_balancer_routing_policy_test.go ===
func TestLoadBalancerLoadBalancerRoutingPolicyResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestLoadBalancerLoadBalancerRoutingPolicyResource_basic")
func sweepLoadBalancerLoadBalancerRoutingPolicyResource(compartment string) error {
	loadBalancerClient := acctest.GetTestClients(&schema.ResourceData{}).LoadBalancerClient()

=== ./internal/integrationtest/certificates_management_certificate_authority_test.go ===
func TestCertificatesManagementCertificateAuthorityResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestCertificatesManagementCertificateAuthorityResource_basic")

=== ./internal/integrationtest/core_console_history_test.go ===
func TestCoreConsoleHistoryResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestCoreConsoleHistoryResource_basic")
func sweepCoreConsoleHistoryResource(compartment string) error {
	computeClient := acctest.GetTestClients(&schema.ResourceData{}).ComputeClient()

=== ./internal/integrationtest/os_management_hub_erratum_test.go ===
func TestOsManagementHubErratumResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestOsManagementHubErratumResource_basic")

=== ./internal/integrationtest/datascience_notebook_session_test.go ===
func TestDatascienceNotebookSessionWithConfigDetailsResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestDatascienceNotebookSessionWithConfigDetailsResource_basic")
func TestDatascienceNotebookSessionWithConfigurationDetailsResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestDatascienceNotebookSessionWithConfigurationDetailsResource_basic")
func sweepDatascienceNotebookSessionResource(compartment string) error {
	dataScienceClient := acctest.GetTestClients(&schema.ResourceData{}).DataScienceClient()

=== ./internal/integrationtest/stack_monitoring_monitored_resources_search_association_test.go ===
func TestStackMonitoringMonitoredResourcesSearchAssociationResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestStackMonitoringMonitoredResourcesSearchAssociationResource_basic")

=== ./internal/integrationtest/data_safe_audit_profile_analytic_test.go ===
func TestDataSafeAuditProfileAnalyticResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestDataSafeAuditProfileAnalyticResource_basic")

=== ./internal/integrationtest/core_private_ipsec_test.go ===
func TestCorePrivateIpSecConnectionResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestCorePrivateIpSecConnectionResource_basic")
func sweepCorePrivateIpSecConnectionResource(compartment string) error {
	virtualNetworkClient := acctest.GetTestClients(&schema.ResourceData{}).VirtualNetworkClient()

=== ./internal/integrationtest/capacity_management_occ_availability_catalog_content_test.go ===
func TestCapacityManagementOccAvailabilityCatalogContentResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestCapacityManagementOccAvailabilityCatalogContentResource_basic")

=== ./internal/integrationtest/data_safe_compatible_formats_for_sensitive_type_test.go ===
func TestDataSafeCompatibleFormatsForSensitiveTypeResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestDataSafeCompatibleFormatsForSensitiveTypeResource_basic")

=== ./internal/integrationtest/datascience_model_test.go ===
func TestDatascienceModelResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestDatascienceModelResource_basic")
func sweepDatascienceModelResource(compartment string) error {
	dataScienceClient := acctest.GetTestClients(&schema.ResourceData{}).DataScienceClient()

=== ./internal/integrationtest/database_db_system_patch_history_entry_test.go ===
func TestDatabaseDbSystemPatchHistoryEntryResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestDatabaseDbSystemPatchHistoryEntryResource_basic")

=== ./internal/integrationtest/containerengine_pod_shape_test.go ===
func TestContainerenginePodShapeResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestContainerenginePodShapeResource_basic")

=== ./internal/integrationtest/osub_subscription_subscription_test.go ===
func TestOsubSubscriptionSubscriptionResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestOsubSubscriptionSubscriptionResource_basic")

=== ./internal/integrationtest/devops_build_pipeline_bitbucketCloud_build_stage_test.go ===
func TestDevopsBuildPipelineBuildStageBitbucketCloudResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestDevopsBuildPipelineBuildStageBitbucketCloudResource_basic")

=== ./internal/integrationtest/jms_fleet_test.go ===
func TestJmsFleetResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestJmsFleetResource_basic")
func sweepJmsFleetResource(compartment string) error {
	javaManagementServiceClient := acctest.GetTestClients(&schema.ResourceData{}).JavaManagementServiceClient()

=== ./internal/integrationtest/identity_compartment_test.go ===
func TestIdentityCompartmentResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestIdentityCompartmentResource_basic")

=== ./internal/integrationtest/log_analytics_log_analytics_unprocessed_data_bucket_management_test.go ===
func TestLogAnalyticsLogAnalyticsUnprocessedDataBucketManagementResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestLogAnalyticsLogAnalyticsUnprocessedDataBucketManagementResource_basic")

=== ./internal/integrationtest/bds_bds_instance_metastore_config_test.go ===
func TestBdsBdsInstanceMetastoreConfigResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestBdsBdsInstanceMetastoreConfigResource_basic")
func sweepBdsBdsInstanceMetastoreConfigResource(compartment string) error {
	bdsClient := acctest.GetTestClients(&schema.ResourceData{}).BdsClient()

=== ./internal/integrationtest/health_checks_ping_monitor_test.go ===
func TestHealthChecksPingMonitorResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestHealthChecksPingMonitorResource_basic")
func sweepHealthChecksPingMonitorResource(compartment string) error {
	healthChecksClient := acctest.GetTestClients(&schema.ResourceData{}).HealthChecksClient()

=== ./internal/integrationtest/identity_domains_identity_provider_test.go ===
func TestIdentityDomainsIdentityProviderResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestIdentityDomainsIdentityProviderResource_basic")
func sweepIdentityDomainsIdentityProviderResource(compartment string) error {
	identityDomainsClient := acctest.GetTestClients(&schema.ResourceData{}).IdentityDomainsClient()

=== ./internal/integrationtest/database_cloud_vm_cluster_test.go ===
func TestDatabaseCloudVmClusterResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestDatabaseCloudVmClusterResource_basic")
func sweepDatabaseCloudVmClusterResource(compartment string) error {
	databaseClient := acctest.GetTestClients(&schema.ResourceData{}).DatabaseClient()

=== ./internal/integrationtest/apm_data_key_test.go ===
func TestApmDataKeyResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestApmDataKeyResource_basic")

=== ./internal/integrationtest/database_vm_cluster_network_resource_test.go ===
func TestResourceDatabaseVmClusterNetwork_basic(t *testing.T) {
	httpreplay.SetScenario("TestResourceDatabaseVmClusterNetwork_basic")
func sweepDatabaseValidatedVmClusterNetworkResource(compartment string) error {
	databaseClient := acctest.GetTestClients(&schema.ResourceData{}).DatabaseClient()

=== ./internal/integrationtest/os_management_hub_software_source_module_stream_test.go ===
func TestOsManagementHubSoftwareSourceModuleStreamResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestOsManagementHubSoftwareSourceModuleStreamResource_basic")

=== ./internal/integrationtest/os_management_hub_managed_instance_available_package_test.go ===
func TestOsManagementHubManagedInstanceAvailablePackageResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestOsManagementHubManagedInstanceAvailablePackageResource_basic")

=== ./internal/integrationtest/apm_traces_trace_test.go ===
func TestApmTracesTraceResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestApmTracesTraceResource_basic")

=== ./internal/integrationtest/identity_availability_domain_test.go ===
func TestIdentityAvailabilityDomainResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestIdentityAvailabilityDomainResource_basic")

=== ./internal/integrationtest/stack_monitoring_auto_assign_config_test.go ===
func TestStackMonitoringAutoAssignConfigResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestStackMonitoringAutoAssignConfigResource_basic")
func sweepStackMonitoringAutoAssignConfigResource(compartment string) error {
	stackMonitoringClient := acctest.GetTestClients(&schema.ResourceData{}).StackMonitoringClient()

=== ./internal/integrationtest/data_safe_masking_report_test.go ===
func TestDataSafeMaskingReportResource_basic(t *testing.T) {
	t.Skip("Skipping this test as the report ocid is hardcoded and may not exist when the test runs")

=== ./internal/integrationtest/apm_config_metric_group_test.go ===
func TestApmConfigMetricGroupResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestApmConfigMetricGroupResource_basic")
func sweepApmConfigMetricGroupResource(compartment string) error {
	configClient := acctest.GetTestClients(&schema.ResourceData{}).ConfigClient()

=== ./internal/integrationtest/ai_language_model_evaluation_result_test.go ===
func TestAiLanguageModelEvaluationResultResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestAiLanguageModelEvaluationResultResource_basic")

=== ./internal/integrationtest/core_instance_resource_test.go ===
func (s *ResourceCoreInstanceTestSuite) SetupTest() {
	s.Providers = acctest.TestAccProviders
func (s *ResourceCoreInstanceTestSuite) TestAccResourceCoreInstance_basic() {

func (s *ResourceCoreInstanceTestSuite) TestAccResourceCoreInstance_customdiff() {

func (s *ResourceCoreInstanceTestSuite) TestAccResourceCoreInstance_preserveBootVolume() {

func (s *ResourceCoreInstanceTestSuite) TestAccResourceCoreInstance_failedByTimeout() {

func (s *ResourceCoreInstanceTestSuite) TestAccResourceCoreInstance_fetchVnicWhenStopped() {

func (s *ResourceCoreInstanceTestSuite) TestAccResourceCoreInstance_updateAssignPublicIp() {

func (s *ResourceCoreInstanceTestSuite) TestAccResourceCoreInstance_flexVMShape() {

func TestAccResourceCoreInstance_BM_Milan_instance_resource(t *testing.T) {
	if strings.Contains(utils.GetEnvSettingWithBlankDefault("suppressed_tests"), "TestAccResourceCoreInstance_BM_Milan_instance_resource") {
func TestAccResourceCoreInstance_BM_Rome_shielded_instance_resource(t *testing.T) {
	if strings.Contains(utils.GetEnvSettingWithBlankDefault("suppressed_tests"), "TestAccResourceCoreInstance_BM_Rome_shielded_instance_resource") {
func TestAccResourceCoreInstance_BM_Icelake_instance_resource(t *testing.T) {
	if strings.Contains(utils.GetEnvSettingWithBlankDefault("suppressed_tests"), "TestAccResourceCoreInstance_BM_Icelake_instance_resource") {
func TestAccResourceCoreInstance_BM_Skylake_shielded_instance_resource(t *testing.T) {
	if strings.Contains(utils.GetEnvSettingWithBlankDefault("suppressed_tests"), "TestAccResourceCoreInstance_BM_Skylake_shielded_instance_resource") {
func TestAccResourceCoreInstance_VM_Intel_shielded_instance_resource(t *testing.T) {
	if strings.Contains(utils.GetEnvSettingWithBlankDefault("suppressed_tests"), "TestAccResourceCoreInstance_VM_Intel_shielded_instance_resource") {
func TestAccResourceCoreInstance_VM_Amd_shielded_instance_resource(t *testing.T) {
	if strings.Contains(utils.GetEnvSettingWithBlankDefault("suppressed_tests"), "TestAccResourceCoreInstance_VM_Amd_shielded_instance_resource") {
func TestResourceCoreInstanceTestSuite(t *testing.T) {
	if httpreplay.ModeRecordReplay() {
func (s *ResourceCoreInstanceTestSuite) TestAccResourceCoreInstance_launchOptions() {
	httpreplay.SetScenario("TestAccResourceCoreInstance_launchOptions")
func TestAccResourceCoreInstance_nvmeVMShape(t *testing.T) {
	httpreplay.SetScenario("TestAccResourceCoreInstance_nvmeVMShape")
func TestAccResourceCoreInstance_FlexibleMemory(t *testing.T) {
	httpreplay.SetScenario("TestAccResourceCoreInstance_FlexibleMemory")

=== ./internal/integrationtest/opsi_awr_hub_source_test.go ===
func TestOpsiAwrHubSourceResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestOpsiAwrHubSourceResource_basic")
func sweepOpsiAwrHubSourceResource(compartment string) error {
	operationsInsightsClient := acctest.GetTestClients(&schema.ResourceData{}).OperationsInsightsClient()

=== ./internal/integrationtest/mysql_mysql_db_system_customer_contacts_test.go ===
func TestMysqlMysqlDbSystemResource_customerContacts(t *testing.T) {
	httpreplay.SetScenario("TestMysqlMysqlDbSystemResource_customerContacts")

=== ./internal/integrationtest/core_boot_volume_resource_test.go ===
func (s *ResourceCoreBootVolumeTestSuite) SetupTest() {
	s.Providers = acctest.TestAccProviders
func (s *ResourceCoreBootVolumeTestSuite) TestResourceCoreBootVolume_basic() {
	resource.Test(s.T(), resource.TestCase{
func TestResourceCoreBootVolumeTestSuite(t *testing.T) {
	httpreplay.SetScenario("TestResourceCoreBootVolumeTestSuite")

=== ./internal/integrationtest/database_autonomous_vm_cluster_ords_certificate_management_test.go ===
func TestDatabaseAutonomousVmClusterOrdsCertificateManagementResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestDatabaseAutonomousVmClusterOrdsCertificateManagementResource_basic")

=== ./internal/integrationtest/core_network_security_group_vnic_test.go ===
func TestCoreNetworkSecurityGroupVnicResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestCoreNetworkSecurityGroupVnicResource_basic")

=== ./internal/integrationtest/database_autonomous_exadata_infrastructure_ocpu_test.go ===
func TestDatabaseAutonomousExadataInfrastructureOcpuResource_basic(t *testing.T) {
	t.Skip("Skip this test as AEI and its api no longer exists.")

=== ./internal/integrationtest/data_safe_target_database_role_test.go ===
func TestDataSafeTargetDatabaseRoleResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestDataSafeTargetDatabaseRoleResource_basic")

=== ./internal/integrationtest/core_public_ip_pool_test.go ===
func TestCorePublicIpPoolResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestCorePublicIpPoolResource_basic")
func sweepCorePublicIpPoolResource(compartment string) error {
	virtualNetworkClient := acctest.GetTestClients(&schema.ResourceData{}).VirtualNetworkClient()

=== ./internal/integrationtest/core_cross_connect_location_test.go ===
func TestCoreCrossConnectLocationResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestCoreCrossConnectLocationResource_basic")

=== ./internal/integrationtest/load_balancer_backend_set_resource_test.go ===
func (s *ResourceLoadBalancerBackendSetTestSuite) SetupTest() {
	s.Providers = acctest.TestAccProviders
func (s *ResourceLoadBalancerBackendSetTestSuite) TestAccResourceLoadBalancerBackendSet_basic() {
	var res, res2 string
func (s *ResourceLoadBalancerBackendSetTestSuite) TestAccResourceLoadBalancerBackendSetLBCookie_basic() {
	var res, res2 string
func TestResourceLoadBalancerBackendSetTestSuite(t *testing.T) {
	httpreplay.SetScenario("TestResourceLoadBalancerBackendSetTestSuite")

=== ./internal/integrationtest/waf_web_app_firewall_policy_test.go ===
func TestWafWebAppFirewallPolicyResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestWafWebAppFirewallPolicyResource_basic")
func sweepWafWebAppFirewallPolicyResource(compartment string) error {
	wafClient := acctest.GetTestClients(&schema.ResourceData{}).WafClient()

=== ./internal/integrationtest/log_analytics_log_analytics_entity_topology_test.go ===
func TestLogAnalyticsLogAnalyticsEntityTopologyResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestLogAnalyticsLogAnalyticsEntityTopologyResource_basic")

=== ./internal/integrationtest/core_drg_test.go ===
func TestCoreDrgResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestCoreDrgResource_basic")
func sweepCoreDrgResource(compartment string) error {
	virtualNetworkClient := acctest.GetTestClients(&schema.ResourceData{}).VirtualNetworkClient()

=== ./internal/integrationtest/database_management_managed_databases_asm_property_test.go ===
func TestDatabaseManagementManagedDatabasesAsmPropertyResource_basic(t *testing.T) {
	t.Skip("Skip this test till Database Management service provides a better way of testing this. It requires a live managed database instance")

=== ./internal/integrationtest/core_compute_capacity_topology_compute_hpc_island_test.go ===
func TestCoreComputeCapacityTopologyComputeHpcIslandResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestCoreComputeCapacityTopologyComputeHpcIslandResource_basic")

=== ./internal/integrationtest/log_analytics_log_analytics_preferences_management_test.go ===
func TestLogAnalyticsLogAnalyticsPreferencesManagementResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestLogAnalyticsLogAnalyticsPreferencesManagementResource_basic")

=== ./internal/integrationtest/load_balancer_listener_tcp_test.go ===
func TestLoadBalancerListenerTcpResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestLoadBalancerListenerTcpResource_basic")

=== ./internal/integrationtest/fusion_apps_fusion_environment_status_test.go ===
func TestFusionAppsFusionEnvironmentStatusResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestFusionAppsFusionEnvironmentStatusResource_basic")

=== ./internal/integrationtest/functions_invoke_function_test.go ===
func TestFunctionsInvokeFunctionResource_basic(t *testing.T) {
	t.Skip("Skipping test until functions support async life cycle state transitions.")

=== ./internal/integrationtest/apigateway_api_deployment_specification_test.go ===
func TestApigatewayApiDeploymentSpecificationResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestApigatewayApiDeploymentSpecificationResource_basic")

=== ./internal/integrationtest/ocvp_cluster_test.go ===
func TestOcvpClusterResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestOcvpClusterResource_basic")
func sweepOcvpClusterResource(compartment string) error {
	clusterClient := acctest.GetTestClients(&schema.ResourceData{}).ClusterClient()

=== ./internal/integrationtest/resource_scheduler_schedule_lifecyclestate_test.go ===
func TestResourceSchedulerScheduleLifecycleStateResourceFilter(t *testing.T) {
	httpreplay.SetScenario("TestResourceSchedulerScheduleResource_basic")

=== ./internal/integrationtest/dns_rrset_resource_test.go ===
func TestResourceDnsRrsetResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestResourceDnsRrsetResource_basic")
func TestResourceDnsRrsetResource_multipleViews(t *testing.T) {
	httpreplay.SetScenario("TestResourceDnsRrsetResource_multipleViews")
func TestResourceDnsRrsetResource_default(t *testing.T) {
	httpreplay.SetScenario("TestResourceDnsRrsetResource_default")
func TestResourceDnsRrsetResource_iterative_basic(t *testing.T) {
	httpreplay.SetScenario("TestResourceDnsRrsetResource_iterative_basic")
func TestResourceDnsRrsetResource_iterative_default(t *testing.T) {
	httpreplay.SetScenario("TestResourceDnsRrsetResource_iterative_default")
func TestDnsRrsetResource_default(t *testing.T) {
	httpreplay.SetScenario("TestDnsRrsetResource_default")

=== ./internal/integrationtest/os_management_hub_managed_instance_group_available_software_source_test.go ===
func TestOsManagementHubManagedInstanceGroupAvailableSoftwareSourceResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestOsManagementHubManagedInstanceGroupAvailableSoftwareSourceResource_basic")

=== ./internal/integrationtest/ai_anomaly_detection_ai_private_endpoint_test.go ===
func TestAiAnomalyDetectionAiPrivateEndpointResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestAiAnomalyDetectionAiPrivateEndpointResource_basic")
func sweepAiAnomalyDetectionAiPrivateEndpointResource(compartment string) error {
	anomalyDetectionClient := acctest.GetTestClients(&schema.ResourceData{}).AnomalyDetectionClient()

=== ./internal/integrationtest/identity_domains_approval_workflow_test.go ===
func TestIdentityDomainsApprovalWorkflowResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestIdentityDomainsApprovalWorkflowResource_basic")
func sweepIdentityDomainsApprovalWorkflowResource(compartment string) error {
	identityDomainsClient := acctest.GetTestClients(&schema.ResourceData{}).IdentityDomainsClient()

=== ./internal/integrationtest/bds_bds_instance_list_os_patch_test.go ===
func TestBdsBdsInstanceListOsPatchResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestBdsBdsInstanceListOsPatchResource_basic")

=== ./internal/integrationtest/stack_monitoring_metric_extensions_test_management_test.go ===
func TestStackMonitoringMetricExtensionsTestManagementResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestStackMonitoringMetricExtensionsTestManagementResource_basic")

=== ./internal/integrationtest/logging_unified_agent_configuration_monitoring_test.go ===
func TestLoggingUnifiedAgentConfigurationMonitoringResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestLoggingUnifiedAgentConfigurationMonitoringResource_basic")
func sweepLoggingUnifiedAgentConfigurationMonitoringResource(compartment string) error {
	loggingManagementClient := acctest.GetTestClients(&schema.ResourceData{}).LoggingManagementClient()

=== ./internal/integrationtest/devops_deploy_artifact_command_spec_test.go ===
func TestDevopsDeployCommandSpecArtifactResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestDevopsDeployArtifactResource_basic")

=== ./internal/integrationtest/analytics_analytics_instance_vanity_url_test.go ===
func TestAnalyticsAnalyticsInstanceVanityUrlResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestAnalyticsAnalyticsInstanceVanityUrlResource_basic")

=== ./internal/integrationtest/database_external_pluggable_database_operations_insights_management_test.go ===
func TestDatabaseExternalPluggableDatabaseOperationsInsightsManagementResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestDatabaseExternalPluggableDatabaseOperationsInsightsManagementResource_basic")

=== ./internal/integrationtest/opsi_host_insight_cloud_host_test.go ===
func TestOpsiCloudHostInsightResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestOpsiCloudHostInsightResource_basic")
func sweepOpsiCloudHostInsightResource(compartment string) error {
	operationsInsightsClient := acctest.GetTestClients(&schema.ResourceData{}).OperationsInsightsClient()

=== ./internal/integrationtest/core_security_list_resource_test.go ===
func (s *ResourceCoreSecurityListTestSuite) SetupTest() {
	s.Providers = acctest.TestAccProviders
func (s *ResourceCoreSecurityListTestSuite) BuildTestsForFullConfig(resourceName, prefix string) []resource.TestCheckFunc {
	return []resource.TestCheckFunc{
func (s *ResourceCoreSecurityListTestSuite) TestAccResourceCoreSecurityList_basic() {
	resource.Test(s.T(), resource.TestCase{
func (s *ResourceCoreSecurityListTestSuite) TestAccResourceCoreSecurityList_emptyList() {
	resource.Test(s.T(), resource.TestCase{
func (s *ResourceCoreSecurityListTestSuite) TestAccResourceCoreSecurityList_defaultSecurityList() {
	defaultSecurityList := `
func (s *ResourceCoreSecurityListTestSuite) TestAccResourceCoreSecurityList_resourceDiscovery_crossCompartment() {
	var resId string
func TestResourceCoreSecurityListTestSuite(t *testing.T) {
	httpreplay.SetScenario("TestResourceCoreSecurityListTestSuite")

=== ./internal/integrationtest/core_instance_measured_boot_report_test.go ===
func TestCoreInstanceMeasuredBootReportResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestCoreInstanceMeasuredBootReportResource_basic")

=== ./internal/integrationtest/sch_service_connector_resource_test.go ===
func TestSchServiceConnectorResource_streamingAnalytics(t *testing.T) {
	httpreplay.SetScenario("TestSchServiceConnectorResource_streamingAnalytics")
func TestSchServiceConnectorResource_LogSrc_LogAnTarget(t *testing.T) {
	httpreplay.SetScenario("TestSchServiceConnectorResource_LogSrc_LogAnTarget")

=== ./internal/integrationtest/nosql_table_replica_test.go ===
func TestNosqlTableReplicaResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestNosqlTableReplicaResource_basic")

=== ./internal/integrationtest/os_management_hub_managed_instance_group_test.go ===
func TestOsManagementHubManagedInstanceGroupResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestOsManagementHubManagedInstanceGroupResource_basic")
func sweepOsManagementHubManagedInstanceGroupResource(compartment string) error {
	managedInstanceGroupClient := acctest.GetTestClients(&schema.ResourceData{}).ManagedInstanceGroupClient()

=== ./internal/integrationtest/devops_trigger_test.go ===
func TestDevopsTriggerResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestDevopsTriggerResource_basic")
func sweepDevopsTriggerResource(compartment string) error {
	devopsClient := acctest.GetTestClients(&schema.ResourceData{}).DevopsClient()

=== ./internal/integrationtest/data_safe_target_database_test.go ===
func TestDataSafeTargetDatabaseResource_basic(t *testing.T) {
	t.Skip("Needs real ADB, not a fake resource. Skipping due to resource and maintainability constraints")
func sweepDataSafeTargetDatabaseResource(compartment string) error {
	dataSafeClient := acctest.GetTestClients(&schema.ResourceData{}).DataSafeClient()

=== ./internal/integrationtest/database_management_autonomous_database_autonomous_database_dbm_features_management_test.go ===
func TestDatabaseManagementAutonomousDatabaseAutonomousDatabaseDbmFeaturesManagementResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestDatabaseManagementAutonomousDatabaseAutonomousDatabaseDbmFeaturesManagementResource_basic")

=== ./internal/integrationtest/core_compute_capacity_topology_test.go ===
func TestCoreComputeCapacityTopologyResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestCoreComputeCapacityTopologyResource_basic")
func sweepCoreComputeCapacityTopologyResource(compartment string) error {
	computeClient := acctest.GetTestClients(&schema.ResourceData{}).ComputeClient()

=== ./internal/integrationtest/data_safe_sql_firewall_violation_analytic_test.go ===
func TestDataSafeSqlFirewallViolationAnalyticResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestDataSafeSqlFirewallViolationAnalyticResource_basic")

=== ./internal/integrationtest/identity_user_group_membership_test.go ===
func TestIdentityUserGroupMembershipResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestIdentityUserGroupMembershipResource_basic")

=== ./internal/integrationtest/resource_scheduler_schedule_multiple_filters_test.go ===
func TestResourceSchedulerScheduleMultipleFiltersResourceFilter(t *testing.T) {
	httpreplay.SetScenario("TestResourceSchedulerScheduleMultipleFiltersResourceFilter")

=== ./internal/integrationtest/golden_gate_connection_assignment_test.go ===
func TestGoldenGateConnectionAssignmentResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestGoldenGateConnectionAssignmentResource_basic")
func sweepGoldenGateConnectionAssignmentResource(compartment string) error {
	goldenGateClient := acctest.GetTestClients(&schema.ResourceData{}).GoldenGateClient()

=== ./internal/integrationtest/core_subnet_resource_test.go ===
func TestAccResourceCoreSubnetCreate_basic(t *testing.T) {
	httpreplay.SetScenario("TestAccResourceCoreSubnetCreate_basic")

=== ./internal/integrationtest/database_autonomous_database_peer_test.go ===
func TestDatabaseAutonomousDatabasePeerResource_basic(t *testing.T) {
	datasourceName := "data.oci_database_autonomous_database_peers.test_autonomous_database_peers"

=== ./internal/integrationtest/os_management_hub_managed_instance_group_detach_managed_instances_management_test.go ===
func TestOsManagementHubManagedInstanceGroupDetachManagedInstancesManagementResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestOsManagementHubManagedInstanceGroupDetachManagedInstancesManagementResource_basic")

=== ./internal/integrationtest/objectstorage_object_lifecycle_policy_resource_test.go ===
func TestResourceObjectLifecyclePolicy_validations(t *testing.T) {
	httpreplay.SetScenario("TestObjectStorageObjectLifecyclePolicyResource_validations")
func TestResourceObjectLifecyclePolicy_MultiPartUploadsRule(t *testing.T) {
	httpreplay.SetScenario("TestObjectStorageObjectLifecyclePolicyResource_MultiPartUploadsRule")

=== ./internal/integrationtest/identity_tag_standard_tag_namespace_template_test.go ===
func TestIdentityTagStandardTagNamespaceTemplateResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestIdentityTagStandardTagNamespaceTemplateResource_basic")

=== ./internal/integrationtest/core_volume_group_backup_test.go ===
func TestCoreVolumeGroupBackupResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestCoreVolumeGroupBackupResource_basic")
func sweepCoreVolumeGroupBackupResource(compartment string) error {
	blockstorageClient := acctest.GetTestClients(&schema.ResourceData{}).BlockstorageClient()

=== ./internal/integrationtest/database_db_systems_upgrade_history_entry_test.go ===
func TestDatabaseDbSystemsUpgradeHistoryEntryResource_basic(t *testing.T) {
	t.Skip("Skip this test because upgrade history test is done in database_db_systems_upgrade_test.go")

=== ./internal/integrationtest/data_safe_set_security_assessment_baseline_test.go ===
func TestDataSafeSetSecurityAssessmentBaselineResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestDataSafeSetSecurityAssessmentBaselineResource_basic")

=== ./internal/integrationtest/fleet_software_update_fsu_cycle_test.go ===
func TestFleetSoftwareUpdateFsuCycleResource_DB_VersionDetails(t *testing.T) {
	httpreplay.SetScenario("TestFleetSoftwareUpdateFsuCycleResource_basic")
func TestFleetSoftwareUpdateFsuCycleResource_DB_ImageIdDetails(t *testing.T) {
	httpreplay.SetScenario("TestFleetSoftwareUpdateFsuCycleResource_basic")
func TestFleetSoftwareUpdateFsuCycleResource_GI_ImageIdDetails(t *testing.T) {
	httpreplay.SetScenario("TestFleetSoftwareUpdateFsuCycleResource_basic")
func sweepFleetSoftwareUpdateFsuCycleResource(compartment string) error {
	fleetSoftwareUpdateClient := acctest.GetTestClients(&schema.ResourceData{}).FleetSoftwareUpdateClient()

=== ./internal/integrationtest/ai_anomaly_detection_model_test.go ===
func TestAiAnomalyDetectionModelResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestAiAnomalyDetectionModelResource_basic")
func sweepAiAnomalyDetectionModelResource(compartment string) error {
	anomalyDetectionClient := acctest.GetTestClients(&schema.ResourceData{}).AnomalyDetectionClient()

=== ./internal/integrationtest/identity_domains_app_test.go ===
func TestIdentityDomainsAppResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestIdentityDomainsAppResource_basic")
func sweepIdentityDomainsAppResource(compartment string) error {
	identityDomainsClient := acctest.GetTestClients(&schema.ResourceData{}).IdentityDomainsClient()

=== ./internal/integrationtest/load_balancer_health_test.go ===
func TestLoadBalancerLoadBalancerHealthResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestLoadBalancerLoadBalancerHealthResource_basic")

=== ./internal/integrationtest/secrets_secretbundle_test.go ===
func TestSecretsSecretbundleResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestSecretsSecretbundleResource_basic")

=== ./internal/integrationtest/database_database_resource_test.go ===
func TestDatabaseExaccDatabaseResource(t *testing.T) {
	httpreplay.SetScenario("TestDatabaseExaccDatabaseResource")

=== ./internal/integrationtest/devops_trigger_devops_repo_test.go ===
func TestDevopsCodeRepositoryTriggerResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestDevopsCodeRepositoryTriggerResource_basic")

=== ./internal/integrationtest/data_safe_security_policy_report_database_view_access_entry_test.go ===
func TestDataSafeSecurityPolicyReportDatabaseViewAccessEntryResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestDataSafeSecurityPolicyReportDatabaseViewAccessEntryResource_basic")

=== ./internal/integrationtest/onesubscription_aggregated_computed_usage_test.go ===
func TestOnesubscriptionAggregatedComputedUsageResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestOnesubscriptionAggregatedComputedUsageResource_basic")

=== ./internal/integrationtest/identity_domains_my_requestable_group_test.go ===
func TestIdentityDomainsMyRequestableGroupResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestIdentityDomainsMyRequestableGroupResource_basic")

=== ./internal/integrationtest/database_externalpluggabledatabases_stack_monitoring_test.go ===
func TestDatabaseExternalPluggableDatabasesStackMonitoringResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestDatabaseExternalpluggabledatabasesStackMonitoringResource_basic")

=== ./internal/integrationtest/core_vcn_resource_test.go ===
func (s *ResourceCoreVirtualNetworkTestSuite) SetupTest() {
	s.Providers = acctest.TestAccProviders
func (s *ResourceCoreVirtualNetworkTestSuite) TestAccResourceCoreVirtualNetwork_basic() {
	var resId string
func TestResourceCoreVirtualNetworkTestSuite(t *testing.T) {
	httpreplay.SetScenario("TestResourceCoreVirtualNetworkTestSuite")

=== ./internal/integrationtest/devops_deploy_environment_test.go ===
func TestDevopsDeployEnvironmentResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestDevopsDeployEnvironmentResource_basic")
func sweepDevopsDeployEnvironmentResource(compartment string) error {
	deployEnvironmentClient := acctest.GetTestClients(&schema.ResourceData{}).DevopsClient()

=== ./internal/integrationtest/jms_fleet_advanced_feature_configuration_test.go ===
func TestJmsFleetAdvancedFeatureConfigurationResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestJmsFleetAdvancedFeatureConfigurationResource_basic")

=== ./internal/integrationtest/cloud_migrations_migration_plan_available_shape_test.go ===
func TestCloudMigrationsMigrationPlanAvailableShapeResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestCloudMigrationsMigrationPlanAvailableShapeResource_basic")

=== ./internal/integrationtest/os_management_hub_managed_instance_group_module_test.go ===
func TestOsManagementHubManagedInstanceGroupModuleResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestOsManagementHubManagedInstanceGroupModuleResource_basic")

=== ./internal/integrationtest/database_pluggable_database_pluggabledatabasemanagements_management_test.go ===
func TestDatabasePluggableDatabasePluggabledatabasemanagementsManagementResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestDatabasePluggableDatabasePluggabledatabasemanagementsManagementResource_basic")

=== ./internal/integrationtest/optimizer_category_test.go ===
func TestOptimizerCategoryResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestOptimizerCategoryResource_basic")

=== ./internal/integrationtest/database_management_db_management_private_endpoint_test.go ===
func TestDatabaseManagementDbManagementPrivateEndpointResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestDatabaseManagementDbManagementPrivateEndpointResource_basic")
func sweepDatabaseManagementDbManagementPrivateEndpointResource(compartment string) error {
	dbManagementClient := acctest.GetTestClients(&schema.ResourceData{}).DbManagementClient()

=== ./internal/integrationtest/generative_ai_agent_data_ingestion_job_log_content_test.go ===
func TestGenerativeAiAgentDataIngestionJobLogContentResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestGenerativeAiAgentDataIngestionJobLogContentResource_basic")

=== ./internal/integrationtest/devops_trigger_vbs_test.go ===
func TestDevopsVbsTriggerResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestDevopsVbsTriggerResource_basic")

=== ./internal/integrationtest/identity_region_test.go ===
func TestIdentityRegionResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestIdentityRegionResource_basic")

=== ./internal/integrationtest/load_balancer_listener_test.go ===
func TestLoadBalancerListenerResourceOciCerts_basic(t *testing.T) {
	httpreplay.SetScenario("TestLoadBalancerListenerResource_basic")
func TestLoadBalancerListenerResourceLBCert_basic(t *testing.T) {
	httpreplay.SetScenario("TestLoadBalancerListenerResource_basic")
func TestLoadBalancerListenerResourceLBCertToOciCerts_combo(t *testing.T) {
	httpreplay.SetScenario("TestLoadBalancerListenerResource_basic")
func TestLoadBalancerListenerResourceOciCertToLBCert_combo(t *testing.T) {
	httpreplay.SetScenario("TestLoadBalancerListenerResourceOciCertToLBCert_combo")

=== ./internal/integrationtest/devops_repository_ref_test.go ===
func TestDevopsRepositoryRefResource_basic(t *testing.T) {
	if !strings.Contains(utils.GetEnvSettingWithBlankDefault("enabled_tests"), "RepoRef") {
func sweepDevopsRepositoryRefResource(compartment string) error {
	devopsClient := acctest.GetTestClients(&schema.ResourceData{}).DevopsClient()

=== ./internal/integrationtest/database_db_node_console_connection_test.go ===
func TestDatabaseDbNodeConsoleConnectionResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestDatabaseDbNodeConsoleConnectionResource_basic")
func sweepDatabaseDbNodeConsoleConnectionResource(compartment string) error {
	databaseClient := acctest.GetTestClients(&schema.ResourceData{}).DatabaseClient()

=== ./internal/integrationtest/cloud_guard_wlp_agent_test.go ===
func TestCloudGuardWlpAgentResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestCloudGuardWlpAgentResource_basic")
func sweepCloudGuardWlpAgentResource(compartment string) error {
	cloudGuardClient := acctest.GetTestClients(&schema.ResourceData{}).CloudGuardClient()

=== ./internal/integrationtest/data_safe_sql_collection_analytic_test.go ===
func TestDataSafeSqlCollectionAnalyticResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestDataSafeSqlCollectionAnalyticResource_basic")

=== ./internal/integrationtest/core_instance_pool_instance_test.go ===
func TestCoreInstancePoolInstanceResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestCoreInstancePoolInstanceResource_basic")

=== ./internal/integrationtest/load_balancer_load_balancer_resource_test.go ===
func (s *ResourceLoadBalancerLBTestSuite) SetupTest() {
	s.Providers = acctest.TestAccProviders
func (s *ResourceLoadBalancerLBTestSuite) TestAccResourceLoadBalancerLB_basicPrivate() {
	var resId, resId2 string
func (s *ResourceLoadBalancerLBTestSuite) TestAccResourceLoadBalancerLB_basicPublic() {
	resource.Test(s.T(), resource.TestCase{
func TestResourceLoadBalancerLBTestSuite(t *testing.T) {
	httpreplay.SetScenario("TestResourceLoadBalancerLBTestSuite")
func TestResourceLoadBalancerLoadBalancerResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestResourceLoadBalancerLoadBalancerResource_basic")

=== ./internal/integrationtest/database_autonomous_vm_cluster_test.go ===
func TestDatabaseAutonomousVmClusterResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestDatabaseAutonomousVmClusterResource_basic")
func sweepDatabaseAutonomousVmClusterResource(compartment string) error {
	databaseClient := acctest.GetTestClients(&schema.ResourceData{}).DatabaseClient()

=== ./internal/integrationtest/data_safe_set_security_assessment_baseline_management_test.go ===
func TestDataSafeSetSecurityAssessmentBaselineManagementResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestDataSafeSetSecurityAssessmentBaselineManagementResource_basic")

=== ./internal/integrationtest/cloud_guard_resource_port_test.go ===
func TestCloudGuardResourcePortResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestCloudGuardResourcePortResource_basic")

=== ./internal/integrationtest/stack_monitoring_metric_extension_metric_extension_on_given_resources_management_test.go ===
func TestStackMonitoringMetricExtensionMetricExtensionOnGivenResourcesManagementResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestStackMonitoringMetricExtensionMetricExtensionOnGivenResourcesManagementResource_basic")

=== ./internal/integrationtest/database_exadata_infrastructure_resource_test.go ===
func TestResourceDatabaseExadataInfrastructure_basic(t *testing.T) {
	httpreplay.SetScenario("TestResourceDatabaseExadataInfrastructure_basic")

=== ./internal/integrationtest/resourcemanager_stack_tf_state_test.go ===
func TestResourcemanagerStackTfStateResource_basic(t *testing.T) {
	if strings.Contains(utils.GetEnvSettingWithBlankDefault("suppressed_tests"), "TestResourcemanagerStackTfStateResource_basic") {

=== ./internal/integrationtest/data_safe_alert_analytic_test.go ===
func TestDataSafeAlertAnalyticResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestDataSafeAlertAnalyticResource_basic")

=== ./internal/integrationtest/fusion_apps_fusion_environment_family_test.go ===
func TestFusionAppsFusionEnvironmentFamilyResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestFusionAppsFusionEnvironmentFamilyResource_basic")
func sweepFusionAppsFusionEnvironmentFamilyResource(compartment string) error {
	fusionApplicationsClient := acctest.GetTestClients(&schema.ResourceData{}).FusionApplicationsClient()

=== ./internal/integrationtest/database_migration_job_output_test.go ===
func TestDatabaseMigrationJobOutputResource_basic(t *testing.T) {
	t.Skip("Skip this job creation is an independent operation after validating the migration")

=== ./internal/integrationtest/database_autonomous_database_character_set_test.go ===
func TestDatabaseAutonomousDatabaseCharacterSetResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestDatabaseAutonomousDatabaseCharacterSetResource_basic")
func TestDatabaseAutonomousDatabaseCharacterSetResource_DedicatedDatabase(t *testing.T) {
	httpreplay.SetScenario("TestDatabaseAutonomousDatabaseCharacterSetResource_DedicatedDatabase(")
func TestDatabaseAutonomousDatabaseCharacterSetResource_DedicatedNational(t *testing.T) {
	httpreplay.SetScenario("TestDatabaseAutonomousDatabaseCharacterSetResource_DedicatedNational")
func TestDatabaseAutonomousDatabaseCharacterSetResource_SharedDatabase(t *testing.T) {
	httpreplay.SetScenario("TestDatabaseAutonomousDatabaseCharacterSetResource_SharedDatabase")
func TestDatabaseAutonomousDatabaseCharacterSetResource_SharedNational(t *testing.T) {
	httpreplay.SetScenario("TestDatabaseAutonomousDatabaseCharacterSetResource_SharedNational")

=== ./internal/integrationtest/health_checks_http_monitor_test.go ===
func TestHealthChecksHttpMonitorResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestHealthChecksHttpMonitorResource_basic")
func sweepHealthChecksHttpMonitorResource(compartment string) error {
	healthChecksClient := acctest.GetTestClients(&schema.ResourceData{}).HealthChecksClient()

=== ./internal/integrationtest/network_firewall_network_firewall_policy_mapped_secret_test.go ===
func TestNetworkFirewallNetworkFirewallPolicyMappedSecretResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestNetworkFirewallNetworkFirewallPolicyMappedSecretResource_basic")
func sweepNetworkFirewallNetworkFirewallPolicyMappedSecretResource(compartment string) error {
	networkFirewallClient := acctest.GetTestClients(&schema.ResourceData{}).NetworkFirewallClient()

=== ./internal/integrationtest/monitoring_alarm_status_test.go ===
func TestMonitoringAlarmStatusResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestMonitoringAlarmStatusResource_basic")

=== ./internal/integrationtest/log_analytics_namespace_effective_property_test.go ===
func TestLogAnalyticsNamespaceEffectivePropertyResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestLogAnalyticsNamespaceEffectivePropertyResource_basic")

=== ./internal/integrationtest/database_management_managed_database_sql_plan_baseline_configuration_test.go ===
func TestDatabaseManagementManagedDatabaseSqlPlanBaselineConfigurationResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestDatabaseManagementManagedDatabaseSqlPlanBaselineConfigurationResource_basic")

=== ./internal/integrationtest/database_db_server_test.go ===
func TestDatabaseDbServerResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestDatabaseDbServerResource_basic")

=== ./internal/integrationtest/data_safe_masking_policy_health_report_management_test.go ===
func TestDataSafeMaskingPolicyHealthReportManagementResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestDataSafeMaskingPolicyHealthReportManagementResource_basic")

=== ./internal/integrationtest/service_mesh_virtual_service_test.go ===
func TestServiceMeshVirtualServiceResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestServiceMeshVirtualServiceResource_basic")
func sweepServiceMeshVirtualServiceResource(compartment string) error {
	serviceMeshClient := acctest.GetTestClients(&schema.ResourceData{}).ServiceMeshClient()

=== ./internal/integrationtest/jms_fleet_drs_file_test.go ===
func TestJmsFleetDrsFileResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestJmsFleetDrsFileResource_basic")

=== ./internal/integrationtest/identity_domains_my_user_db_credential_test.go ===
func TestIdentityDomainsMyUserDbCredentialResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestIdentityDomainsMyUserDbCredentialResource_basic")
func sweepIdentityDomainsMyUserDbCredentialResource(compartment string) error {
	identityDomainsClient := acctest.GetTestClients(&schema.ResourceData{}).IdentityDomainsClient()

=== ./internal/integrationtest/data_safe_audit_event_test.go ===
func TestDataSafeAuditEventResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestDataSafeAuditEventResource_basic")

=== ./internal/integrationtest/identity_domain_replication_to_region_test.go ===
func TestIdentityDomainReplicationToRegionResource_basic(t *testing.T) {
	t.Skip("Skip this test because henosis tenancy is needed")

=== ./internal/integrationtest/visual_builder_vb_instance_test.go ===
func TestVisualBuilderVbInstanceResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestVisualBuilderVbInstanceResource_basic")
func sweepVisualBuilderVbInstanceResource(compartment string) error {
	vbInstanceClient := acctest.GetTestClients(&schema.ResourceData{}).VbInstanceClient()

=== ./internal/integrationtest/announcements_service_service_test.go ===
func TestAnnouncementsServiceServiceResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestAnnouncementsServiceServiceResource_basic")
func TestAnnouncementsServiceServiceResource_WithOptionalParams(t *testing.T) {
	httpreplay.SetScenario("TestAnnouncementsServiceServiceResource_WithOptionalParams")

=== ./internal/integrationtest/database_management_managed_database_group_test.go ===
func TestDatabaseManagementManagedDatabaseGroupResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestDatabaseManagementManagedDatabaseGroupResource_basic")
func sweepDatabaseManagementManagedDatabaseGroupResource(compartment string) error {
	dbManagementClient := acctest.GetTestClients(&schema.ResourceData{}).DbManagementClient()

=== ./internal/integrationtest/data_safe_unset_security_assessment_baseline_test.go ===
func TestDataSafeUnsetSecurityAssessmentBaselineResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestDataSafeUnsetSecurityAssessmentBaselineResource_basic")

=== ./internal/integrationtest/email_configuration_test.go ===
func TestEmailConfigurationResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestEmailConfigurationResource_basic")

=== ./internal/integrationtest/database_management_managed_database_table_statistic_test.go ===
func TestDatabaseManagementManagedDatabaseTableStatisticResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestDatabaseManagementManagedDatabaseTableStatisticsResource_basic")

=== ./internal/integrationtest/os_management_hub_managed_instance_group_update_all_packages_management_test.go ===
func TestOsManagementHubManagedInstanceGroupUpdateAllPackagesManagementResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestOsManagementHubManagedInstanceGroupUpdateAllPackagesManagementResource_basic")

=== ./internal/integrationtest/media_services_stream_cdn_config_test.go ===
func TestMediaServicesStreamCdnConfigResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestMediaServicesStreamCdnConfigResource_basic")
func sweepMediaServicesStreamCdnConfigResource(compartment string) error {
	mediaServicesClient := acctest.GetTestClients(&schema.ResourceData{}).MediaServicesClient()

=== ./internal/integrationtest/dataintegration_workspace_application_test.go ===
func TestDataintegrationWorkspaceApplicationResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestDataintegrationWorkspaceApplicationResource_basic")
func sweepDataintegrationWorkspaceApplicationResource(compartment string) error {
	dataIntegrationClient := acctest.GetTestClients(&schema.ResourceData{}).DataIntegrationClient()

=== ./internal/integrationtest/database_autonomous_database_regional_wallet_management_test.go ===
func TestDatabaseAutonomousDatabaseRegionalWalletManagementResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestDatabaseAutonomousDatabaseRegionalWalletManagementResource_basic")

=== ./internal/integrationtest/bds_bds_instance_api_key_test.go ===
func TestBdsBdsInstanceApiKeyResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestBdsBdsInstanceApiKeyResource_basic")
func sweepBdsBdsInstanceApiKeyResource(compartment string) error {
	bdsClient := acctest.GetTestClients(&schema.ResourceData{}).BdsClient()

=== ./internal/integrationtest/ai_language_endpoint_test.go ===
func TestAiLanguageEndpointResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestAiLanguageEndpointResource_basic")
func sweepAiLanguageEndpointResource(compartment string) error {
	aiServiceLanguageClient := acctest.GetTestClients(&schema.ResourceData{}).AiServiceLanguageClient()

=== ./internal/integrationtest/datascience_job_shape_test.go ===
func TestDatascienceJobShapeResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestDatascienceJobShapeResource_basic")

=== ./internal/integrationtest/file_storage_replication_test.go ===
func TestFileStorageReplicationResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestFileStorageReplicationResource_basic")
func sweepFileStorageReplicationResource(compartment string) error {
	fileStorageClient := acctest.GetTestClients(&schema.ResourceData{}).FileStorageClient()

=== ./internal/integrationtest/osub_usage_computed_usage_aggregated_test.go ===
func TestOsubUsageComputedUsageAggregatedResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestOsubUsageComputedUsageAggregatedResource_basic")

=== ./internal/integrationtest/announcements_service_announcement_subscriptions_actions_change_compartment_test.go ===
func TestAnnouncementsServiceAnnouncementSubscriptionsActionsChangeCompartmentResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestAnnouncementsServiceAnnouncementSubscriptionsActionsChangeCompartmentResource_basic")

=== ./internal/integrationtest/ons_subscription_test.go ===
func TestOnsSubscriptionResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestOnsSubscriptionResource_basic")
func sweepOnsSubscriptionResource(compartment string) error {
	notificationDataPlaneClient := acctest.GetTestClients(&schema.ResourceData{}).NotificationDataPlaneClient()

=== ./internal/integrationtest/cloud_guard_security_policy_test.go ===
func TestCloudGuardSecurityPolicyResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestCloudGuardSecurityPolicyResource_basic")

=== ./internal/integrationtest/identity_dynamic_group_test.go ===
func TestIdentityDynamicGroupResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestIdentityDynamicGroupResource_basic")

=== ./internal/integrationtest/health_checks_http_probe_result_test.go ===
func TestHealthChecksHttpProbeResultResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestHealthChecksHttpProbeResultResource_basic")

=== ./internal/integrationtest/cloud_bridge_environment_test.go ===
func TestCloudBridgeEnvironmentResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestCloudBridgeEnvironmentResource_basic")
func sweepCloudBridgeEnvironmentResource(compartment string) error {
	ocbAgentSvcClient := acctest.GetTestClients(&schema.ResourceData{}).OcbAgentSvcClient()

=== ./internal/integrationtest/fleet_apps_management_onboarding_test.go ===
func TestFleetAppsManagementOnboardingResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestFleetAppsManagementOnboardingResource_basic")

=== ./internal/integrationtest/database_pluggable_databases_local_clone_test.go ===
func TestDatabasePluggableDatabasesLocalCloneResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestDatabasePluggableDatabasesLocalCloneResource_basic")

=== ./internal/integrationtest/kms_generated_key_test.go ===
func TestKmsGeneratedKeyResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestKmsGeneratedKeyResource_basic")

=== ./internal/integrationtest/apigateway_deployment_test.go ===
func TestApigatewayDeploymentResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestApigatewayDeploymentResource_basic")
func sweepApigatewayDeploymentResource(compartment string) error {
	deploymentClient := acctest.GetTestClients(&schema.ResourceData{}).DeploymentClient()

=== ./internal/integrationtest/core_instance_dvh_migration_test.go ===
func TestCoreInstanceResource_DVHMigration(t *testing.T) {
	httpreplay.SetScenario("TestCoreInstanceResource_DVHMigration")

=== ./internal/integrationtest/generative_ai_dedicated_ai_cluster_test.go ===
func TestGenerativeAiDedicatedAiClusterResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestGenerativeAiDedicatedAiClusterResource_basic")
func sweepGenerativeAiDedicatedAiClusterResource(compartment string) error {
	generativeAiClient := acctest.GetTestClients(&schema.ResourceData{}).GenerativeAiClient()

=== ./internal/integrationtest/database_backup_test.go ===
func TestDatabaseBackupResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestDatabaseBackupResource_basic")
func sweepDatabaseBackupResource(compartment string) error {
	databaseClient := acctest.GetTestClients(&schema.ResourceData{}).DatabaseClient()

=== ./internal/integrationtest/devops_repository_object_test.go ===
func TestDevopsRepositoryObjectResource_basic(t *testing.T) {
	if !strings.Contains(utils.GetEnvSettingWithBlankDefault("enabled_tests"), "RepositoryObject") {

=== ./internal/integrationtest/devops_build_pipeline_test.go ===
func TestDevopsBuildPipelineResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestDevopsBuildPipelineResource_basic")
func sweepDevopsBuildPipelineResource(compartment string) error {
	devopsClient := acctest.GetTestClients(&schema.ResourceData{}).DevopsClient()

=== ./internal/integrationtest/devops_connection_vbs_test.go ===
func TestDevopsVbsConnectionResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestDevopsVbsConnectionResource_basic")

=== ./internal/integrationtest/database_data_guard_association_test.go ===
func TestDatabaseDataGuardAssociationResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestDatabaseDataGuardAssociationResource_basic")

=== ./internal/integrationtest/vault_secret_test.go ===
func TestVaultSecretResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestVaultSecretResource_basic")

=== ./internal/integrationtest/waf_web_app_firewall_test.go ===
func TestWafWebAppFirewallResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestWafWebAppFirewallResource_basic")
func sweepWafWebAppFirewallResource(compartment string) error {
	wafClient := acctest.GetTestClients(&schema.ResourceData{}).WafClient()

=== ./internal/integrationtest/identity_domains_customer_secret_key_test.go ===
func TestIdentityDomainsCustomerSecretKeyResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestIdentityDomainsCustomerSecretKeyResource_basic")
func sweepIdentityDomainsCustomerSecretKeyResource(compartment string) error {
	identityDomainsClient := acctest.GetTestClients(&schema.ResourceData{}).IdentityDomainsClient()

=== ./internal/integrationtest/functions_pbf_listing_trigger_test.go ===
func TestFunctionsPbfListingTriggerResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestFunctionsPbfListingTriggerResource_basic")

=== ./internal/integrationtest/database_gi_version_minor_version_test.go ===
func TestDatabaseGiVersionMinorVersionResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestDatabaseGiVersionMinorVersionResource_basic")

=== ./internal/integrationtest/cloud_bridge_agent_plugin_test.go ===
func TestCloudBridgeAgentPluginResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestCloudBridgeAgentPluginResource_basic")

=== ./internal/integrationtest/functions_pbf_listing_version_test.go ===
func TestFunctionsPbfListingVersionResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestFunctionsPbfListingVersionResource_basic")

=== ./internal/integrationtest/os_management_hub_managed_instance_group_remove_packages_management_test.go ===
func TestOsManagementHubManagedInstanceGroupRemovePackagesManagementResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestOsManagementHubManagedInstanceGroupRemovePackagesManagementResource_basic")

=== ./internal/integrationtest/core_ipsec_connection_tunnel_policyrouting_test.go ===
func TestDataSourceCoreIpSecConnectionTunnelResourceRoutingPolicy_basic(t *testing.T) {
	httpreplay.SetScenario("TestCoreIpSecConnectionTunnelResourceRoutingPolicy_basic")

=== ./internal/integrationtest/os_management_hub_managed_instance_group_available_module_test.go ===
func TestOsManagementHubManagedInstanceGroupAvailableModuleResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestOsManagementHubManagedInstanceGroupAvailableModuleResource_basic")

=== ./internal/integrationtest/data_safe_sensitive_type_test.go ===
func TestDataSafeSensitiveTypeResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestDataSafeSensitiveTypeResource_basic")
func sweepDataSafeSensitiveTypeResource(compartment string) error {
	dataSafeClient := acctest.GetTestClients(&schema.ResourceData{}).DataSafeClient()

=== ./internal/integrationtest/core_route_table_attachment_test.go ===
func TestCoreRouteTableAttachmentResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestCoreRouteTableAttachmentResource_basic")

=== ./internal/integrationtest/dns_zone_test.go ===
func TestDnsZoneResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestDnsZoneResource_basic")
func sweepDnsZoneResource(compartment string) error {
	dnsClient := acctest.GetTestClients(&schema.ResourceData{}).DnsClient()

=== ./internal/integrationtest/bds_bds_instance_resource_principal_configuration_test.go ===
func TestBdsBdsInstanceResourcePrincipalConfigurationResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestBdsBdsInstanceResourcePrincipalConfigurationResource_basic")
func getBdsResourcePrincipalConfigurationCompositeId(resourceName string) resource.ImportStateIdFunc {


=== ./internal/integrationtest/devops_deploy_stage_invoke_function_test.go ===
func TestDevopsDeployStageResource_invokeFunction(t *testing.T) {
	httpreplay.SetScenario("TestDevopsDeployStageResource_invokeFunction")

=== ./internal/integrationtest/fleet_apps_management_scheduler_definition_scheduled_fleet_test.go ===
func TestFleetAppsManagementSchedulerDefinitionScheduledFleetResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestFleetAppsManagementSchedulerDefinitionScheduledFleetResource_basic")

=== ./internal/integrationtest/data_safe_masking_policy_test.go ===
func TestDataSafeMaskingPolicyResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestDataSafeMaskingPolicyResource_basic")
func sweepDataSafeMaskingPolicyResource(compartment string) error {
	dataSafeClient := acctest.GetTestClients(&schema.ResourceData{}).DataSafeClient()

=== ./internal/integrationtest/devops_connection_bitbucket_server_test.go ===
func TestDevopsBitbucketServerConnectionResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestDevopsBitbucketServerConnectionResource_basic")

=== ./internal/integrationtest/sch_connector_plugin_test.go ===
func TestSchConnectorPluginResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestSchConnectorPluginResource_basic")

=== ./internal/integrationtest/database_autonomous_vm_cluster_ssl_certificate_management_test.go ===
func TestDatabaseAutonomousVmClusterSslCertificateManagementResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestDatabaseAutonomousVmClusterSslCertificateManagementResource_basic")

=== ./internal/integrationtest/core_letter_of_authority_test.go ===
func TestCoreLetterOfAuthorityResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestCoreLetterOfAuthorityResource_basic")

=== ./internal/integrationtest/cloud_guard_data_source_event_test.go ===
func TestCloudGuardDataSourceEventResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestCloudGuardDataSourceEventResource_basic")

=== ./internal/integrationtest/identity_domains_my_oauth2client_credential_test.go ===
func TestIdentityDomainsMyOAuth2ClientCredentialResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestIdentityDomainsMyOAuth2ClientCredentialResource_basic")
func sweepIdentityDomainsMyOAuth2ClientCredentialResource(compartment string) error {
	identityDomainsClient := acctest.GetTestClients(&schema.ResourceData{}).IdentityDomainsClient()

=== ./internal/integrationtest/data_safe_target_databases_column_test.go ===
func TestDataSafeTargetDatabasesColumnResource_basic(t *testing.T) {
	t.Skip("Skipping this test which queries the database for metadata of columns from all the tables in the database. " +

=== ./internal/integrationtest/identity_domains_identity_setting_test.go ===
func TestIdentityDomainsIdentitySettingResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestIdentityDomainsIdentitySettingResource_basic")

=== ./internal/integrationtest/streaming_stream_pool_test.go ===
func TestStreamingStreamPoolResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestStreamingStreamPoolResource_basic")
func sweepStreamingStreamPoolResource(compartment string) error {
	streamAdminClient := acctest.GetTestClients(&schema.ResourceData{}).StreamAdminClient()

=== ./internal/integrationtest/fleet_apps_management_fleet_compliance_report_test.go ===
func TestFleetAppsManagementFleetComplianceReportResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestFleetAppsManagementFleetComplianceReportResource_basic")

=== ./internal/integrationtest/capacity_management_internal_namespace_occ_overview_test.go ===
func TestCapacityManagementInternalNamespaceOccOverviewResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestCapacityManagementInternalNamespaceOccOverviewResource_basic")

=== ./internal/integrationtest/service_mesh_mesh_test.go ===
func TestServiceMeshMeshResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestServiceMeshMeshResource_basic")
func sweepServiceMeshMeshResource(compartment string) error {
	serviceMeshClient := acctest.GetTestClients(&schema.ResourceData{}).ServiceMeshClient()

=== ./internal/integrationtest/devops_connection_bitbucketCloud_test.go ===
func TestDevopsBitbucketCloudConnectionResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestDevopsBitbucketCloudConnectionResource_basic")

=== ./internal/integrationtest/fleet_apps_management_runbook_test.go ===
func TestFleetAppsManagementRunbookResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestFleetAppsManagementRunbookResource_basic")

=== ./internal/integrationtest/cloud_bridge_agent_dependency_test.go ===
func TestCloudBridgeAgentDependencyResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestCloudBridgeAgentDependencyResource_basic")
func sweepCloudBridgeAgentDependencyResource(compartment string) error {
	ocbAgentSvcClient := acctest.GetTestClients(&schema.ResourceData{}).OcbAgentSvcClient()

=== ./internal/integrationtest/capacity_management_namespace_occ_overview_test.go ===
func TestCapacityManagementNamespaceOccOverviewResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestCapacityManagementNamespaceOccOverviewResource_basic")

=== ./internal/integrationtest/database_exadata_infrastructure_un_allocated_resource_test.go ===
func TestDatabaseExadataInfrastructureUnAllocatedResourceResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestDatabaseExadataInfrastructureUnAllocatedResourceResource_basic")

=== ./internal/integrationtest/data_safe_discovery_jobs_result_test.go ===
func TestDataSafeDiscoveryJobsResultResource_basic(t *testing.T) {
	t.Skip("Skipping this test as the discovery job result key is hardcoded and may not exist when the test runs")
func sweepDataSafeDiscoveryJobsResultResource(compartment string) error {
	dataSafeClient := acctest.GetTestClients(&schema.ResourceData{}).DataSafeClient()

=== ./internal/integrationtest/data_safe_compatible_formats_for_data_type_test.go ===
func TestDataSafeCompatibleFormatsForDataTypeResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestDataSafeCompatibleFormatsForDataTypeResource_basic")

=== ./internal/integrationtest/cloud_guard_adhoc_query_result_test.go ===
func TestCloudGuardAdhocQueryResultResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestCloudGuardAdhocQueryResultResource_basic")

=== ./internal/integrationtest/stack_monitoring_metric_extension_test.go ===
func TestStackMonitoringMetricExtensionResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestStackMonitoringMetricExtensionResource_basic")
func TestStackMonitoringMetricExtensionResource_jmx(t *testing.T) {
	httpreplay.SetScenario("TestStackMonitoringMetricExtensionResource_jmx")
func sweepStackMonitoringMetricExtensionResource(compartment string) error {
	stackMonitoringClient := acctest.GetTestClients(&schema.ResourceData{}).StackMonitoringClient()

=== ./internal/integrationtest/onesubscription_invoice_line_computed_usage_test.go ===
func TestOnesubscriptionInvoiceLineComputedUsageResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestOnesubscriptionInvoiceLineComputedUsageResource_basic")

=== ./internal/integrationtest/data_safe_data_safe_private_endpoint_test.go ===
func TestDataSafeDataSafePrivateEndpointResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestDataSafeDataSafePrivateEndpointResource_basic")
func sweepDataSafeDataSafePrivateEndpointResource(compartment string) error {
	dataSafeClient := acctest.GetTestClients(&schema.ResourceData{}).DataSafeClient()

=== ./internal/integrationtest/database_management_managed_database_sql_tuning_advisor_task_test.go ===
func TestDatabaseManagementManagedDatabaseSqlTuningAdvisorTaskResource_basic(t *testing.T) {
	//t.Skip("Skip this test till Database Management service provides a better way of testing this. It requires a live managed database instance")

=== ./internal/integrationtest/datascience_pipeline_test.go ===
func TestDatasciencePipelineResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestDatasciencePipelineResource_basic")
func sweepDatasciencePipelineResource(compartment string) error {
	dataScienceClient := acctest.GetTestClients(&schema.ResourceData{}).DataScienceClient()

=== ./internal/integrationtest/database_autonomous_exadata_infrastructure_test.go ===
func TestDatabaseAutonomousExadataInfrastructureResource_basic(t *testing.T) {
	t.Skip("Skip this test as AEI and its api no longer exists.")
func sweepDatabaseAutonomousExadataInfrastructureResource(compartment string) error {
	databaseClient := acctest.GetTestClients(&schema.ResourceData{}).DatabaseClient()

=== ./internal/integrationtest/opsi_pecomanaged_database_insight_dbmpe_test.go ===
func TestOpsiPecomanagedDatabaseInsightDbmPeResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestOpsiPecomanagedDatabaseInsightDbmPeResource_basic")
func sweepOpsiPecomanagedDatabaseInsightDbmPeResource(compartment string) error {
	operationsInsightsClient := acctest.GetTestClients(&schema.ResourceData{}).OperationsInsightsClient()

=== ./internal/integrationtest/devops_repository_protected_branch_management_test.go ===
func TestDevopsRepositoryProtectedBranchManagementResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestDevopsRepositoryProtectedBranchManagementResource_basic")

=== ./internal/integrationtest/bastion_session_port_forward_test.go ===
func TestBastionSessionResource_port_forwarding(t *testing.T) {
	httpreplay.SetScenario("TestBastionSessionResource_port_forwarding")

=== ./internal/integrationtest/cloud_guard_responder_recipe_test.go ===
func TestCloudGuardResponderRecipeResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestCloudGuardResponderRecipeResource_basic")
func sweepCloudGuardResponderRecipeResource(compartment string) error {
	cloudGuardClient := acctest.GetTestClients(&schema.ResourceData{}).CloudGuardClient()

=== ./internal/integrationtest/secrets_secretbundle_version_test.go ===
func TestSecretsSecretbundleVersionResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestSecretsSecretbundleVersionResource_basic")

=== ./internal/integrationtest/database_external_container_database_test.go ===
func TestDatabaseExternalContainerDatabaseResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestDatabaseExternalContainerDatabaseResource_basic")
func sweepDatabaseExternalContainerDatabaseResource(compartment string) error {
	databaseClient := acctest.GetTestClients(&schema.ResourceData{}).DatabaseClient()

=== ./internal/integrationtest/dataflow_sql_endpoint_private_endpoint_test.go ===
func TestDataflowSqlEndpointPrivateEndpointResource_basic(t *testing.T) {
	t.Skip("Skip this test as this is not supported yet. It will be taken care post GA")

=== ./internal/integrationtest/apigateway_gateway_test.go ===
func TestApigatewayGatewayResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestApigatewayGatewayResource_basic")
func sweepApigatewayGatewayResource(compartment string) error {
	gatewayClient := acctest.GetTestClients(&schema.ResourceData{}).GatewayClient()

=== ./internal/integrationtest/dns_view_test.go ===
func TestDnsViewResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestDnsViewResource_basic")
func sweepDnsViewResource(compartment string) error {
	dnsClient := acctest.GetTestClients(&schema.ResourceData{}).DnsClient()

=== ./internal/integrationtest/containerengine_virtual_node_pool_test.go ===
func TestContainerengineVirtualNodePoolResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestContainerengineVirtualNodePoolResource_basic")
func sweepContainerengineVirtualNodePoolResource(compartment string) error {
	containerEngineClient := acctest.GetTestClients(&schema.ResourceData{}).ContainerEngineClient()

=== ./internal/integrationtest/datascience_model_artifact_import_test.go ===
func TestDatascienceModelArtifactImportResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestDatascienceModelArtifactImportResource_basic")

=== ./internal/integrationtest/identity_domains_oauth2client_credential_test.go ===
func TestIdentityDomainsOAuth2ClientCredentialResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestIdentityDomainsOAuth2ClientCredentialResource_basic")
func sweepIdentityDomainsOAuth2ClientCredentialResource(compartment string) error {
	identityDomainsClient := acctest.GetTestClients(&schema.ResourceData{}).IdentityDomainsClient()

=== ./internal/integrationtest/datascience_model_deployment_test.go ===
func TestDatascienceModelDeploymentResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestDatascienceModelDeploymentResource_basic")
func sweepDatascienceModelDeploymentResource(compartment string) error {
	dataScienceClient := acctest.GetTestClients(&schema.ResourceData{}).DataScienceClient()

=== ./internal/integrationtest/core_block_volume_replica_test.go ===
func TestCoreBlockVolumeReplicaResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestCoreBlockVolumeReplicaResource_basic")

=== ./internal/integrationtest/data_safe_calculate_audit_volume_available_test.go ===
func TestDataSafeCalculateAuditVolumeAvailableResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestDataSafeCalculateAuditVolumeAvailableResource_basic")

=== ./internal/integrationtest/database_management_managed_database_sql_tuning_advisor_tasks_finding_test.go ===
func TestDatabaseManagementManagedDatabaseSqlTuningAdvisorTasksFindingResource_basic(t *testing.T) {
	//t.Skip("Skip this test till Database Management service provides a better way of testing this. It requires a live managed database instance")

=== ./internal/integrationtest/data_safe_sql_firewall_policy_analytic_test.go ===
func TestDataSafeSqlFirewallPolicyAnalyticResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestDataSafeSqlFirewallPolicyAnalyticResource_basic")

=== ./internal/integrationtest/log_analytics_log_analytics_preference_test.go ===
func TestLogAnalyticsLogAnalyticsPreferenceResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestLogAnalyticsLogAnalyticsPreferenceResource_basic")

=== ./internal/integrationtest/dns_resolver_endpoint_test.go ===
func TestDnsResolverEndpointResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestDnsResolverEndpointResource_basic")

=== ./internal/integrationtest/kms_key_version_resource_test.go ===
func TestKmsKeyVersionResource_ResourceDiscovery(t *testing.T) {
	httpreplay.SetScenario("TestKmsKeyVersionResource_ResourceDiscovery")

=== ./internal/integrationtest/identity_api_key_test.go ===
func TestIdentityApiKeyResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestIdentityApiKeyResource_basic")

=== ./internal/integrationtest/dns_zone_dnssec_test.go ===
func TestDnsZoneResourceDnssec(t *testing.T) {
	httpreplay.SetScenario("TestDnsZoneResourceDnssec")

=== ./internal/integrationtest/core_boot_volume_replica_test.go ===
func TestCoreBootVolumeReplicaResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestCoreBootVolumeReplicaResource_basic")

=== ./internal/integrationtest/oda_oda_private_endpoint_scan_proxy_test.go ===
func TestOdaOdaPrivateEndpointScanProxyResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestOdaOdaPrivateEndpointScanProxyResource_basic")
func sweepOdaOdaPrivateEndpointScanProxyResource(compartment string) error {
	managementClient := acctest.GetTestClients(&schema.ResourceData{}).ManagementClient()

=== ./internal/integrationtest/database_management_managed_database_cursor_cache_statement_test.go ===
func TestDatabaseManagementManagedDatabaseCursorCacheStatementResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestDatabaseManagementManagedDatabaseCursorCacheStatementResource_basic")

=== ./internal/integrationtest/core_cpe_device_shape_test.go ===
func TestCoreCpeDeviceShapeResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestCoreCpeDeviceShapeResource_basic")

=== ./internal/integrationtest/core_image_shape_test.go ===
func TestCoreImageShapeResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestCoreImageShapeResource_basic")

=== ./internal/integrationtest/devops_build_run_test.go ===
func TestDevopsBuildRunResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestDevopsBuildRunResource_basic")

=== ./internal/integrationtest/optimizer_history_test.go ===
func TestOptimizerHistoryResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestOptimizerHistoryResource_basic")

=== ./internal/integrationtest/jms_summarize_resource_inventory_test.go ===
func TestJmsSummarizeResourceInventoryResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestJmsSummarizeResourceInventoryResource_basic")

=== ./internal/integrationtest/kms_vault_restore_test.go ===
func TestResourceKmsVaultRestore_default(t *testing.T) {
	t.Skip("Skip this test till KMS provides a better way of testing this.")

=== ./internal/integrationtest/cloud_bridge_discovery_schedule_test.go ===
func TestCloudBridgeDiscoveryScheduleResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestCloudBridgeDiscoveryScheduleResource_basic")
func sweepCloudBridgeDiscoveryScheduleResource(compartment string) error {
	discoveryClient := acctest.GetTestClients(&schema.ResourceData{}).DiscoveryClient()

=== ./internal/integrationtest/devops_repo_file_line_test.go ===
func TestDevopsRepoFileLineResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestDevopsRepoFileLineResource_basic")

=== ./internal/integrationtest/opsi_opsi_configuration_configuration_item_test.go ===
func TestOpsiOpsiConfigurationConfigurationItemResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestOpsiOpsiConfigurationConfigurationItemResource_basic")

=== ./internal/integrationtest/core_compute_capacity_reservation_instance_shape_test.go ===
func TestCoreComputeCapacityReservationInstanceShapeResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestCoreComputeCapacityReservationInstanceShapeResource_basic")

=== ./internal/integrationtest/disaster_recovery_dr_plan_execution_test.go ===
func TestDisasterRecoveryDrPlanExecutionResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestDisasterRecoveryDrPlanExecutionResource_basic")
func sweepDisasterRecoveryDrPlanExecutionResource(compartment string) error {
	disasterRecoveryClient := acctest.GetTestClients(&schema.ResourceData{}).DisasterRecoveryClient()

=== ./internal/integrationtest/kms_vault_test.go ===
func TestKmsExternalVaultResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestKmsExternalVaultResource_basic")
func TestKmsVaultResource_basic(t *testing.T) {
	//t.Skip("Skip this test till KMS provides a better way of testing this.")

=== ./internal/integrationtest/core_ip_inventory_vcn_overlap_test.go ===
func TestCoreIpInventoryVcnOverlapResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestCoreIpInventoryVcnOverlapResource_basic")

=== ./internal/integrationtest/database_autonomous_database_backup_test.go ===
func TestDatabaseAutonomousDatabaseBackupResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestDatabaseAutonomousDatabaseBackupResource_basic")
func TestDatabaseAutonomousExaccBackupResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestDatabaseAutonomousDatabaseBackupResource_basic")
func sweepDatabaseAutonomousDatabaseBackupResource(compartment string) error {
	databaseClient := acctest.GetTestClients(&schema.ResourceData{}).DatabaseClient()

=== ./internal/integrationtest/data_safe_target_databases_schema_test.go ===
func TestDataSafeTargetDatabasesSchemaResource_basic(t *testing.T) {
	t.Skip("Skipping this test which queries the database for metadata of schema present in the database. " +

=== ./internal/integrationtest/database_vm_cluster_update_test.go ===
func TestDatabaseVmClusterUpdateResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestDatabaseVmClusterUpdateResource_basic")

=== ./internal/integrationtest/onesubscription_computed_usage_test.go ===
func TestOnesubscriptionComputedUsageResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestOnesubscriptionComputedUsageResource_basic")

=== ./internal/integrationtest/jms_java_release_test.go ===
func TestJmsJavaReleaseResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestJmsJavaReleaseResource_basic")

=== ./internal/integrationtest/jms_agent_installer_test.go ===
func TestJmsAgentInstallerResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestJmsAgentInstallerResource_basic")

=== ./internal/integrationtest/datascience_project_test.go ===
func TestDatascienceProjectResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestDatascienceProjectResource_basic")
func sweepDatascienceProjectResource(compartment string) error {
	dataScienceClient := acctest.GetTestClients(&schema.ResourceData{}).DataScienceClient()

=== ./internal/integrationtest/opsi_pecomanaged_exadata_insight_test.go ===
func TestPeComanagedExadataInsightResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestPeComanagedExadataInsightResource_basic")
func sweepPeComanagedExadataInsightResource(compartment string) error {
	operationsInsightsClient := acctest.GetTestClients(&schema.ResourceData{}).OperationsInsightsClient()

=== ./internal/integrationtest/core_capture_filter_flowlogs_test.go ===
func TestCoreCaptureFilterFlowLogsResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestCoreCaptureFilterFlowLogsResource_basic")

=== ./internal/integrationtest/database_maintenance_run_test.go ===
func TestDatabaseMaintenanceRunResource_basic(t *testing.T) {
	t.Skip("Skip this test till DBaas provides a better way of testing this.")
func TestExaccDatabaseMaintenanceRunFromAdsiResource(t *testing.T) {
	httpreplay.SetScenario("TestExaccDatabaseMaintenanceRunFromAdsiResource")
func TestAdbdDatabaseMaintenanceRunFromAdsiResource(t *testing.T) {
	httpreplay.SetScenario("TestAdbdDatabaseMaintenanceRunFromAdsiResource")
func TestExaccDatabaseMaintenanceRunResource(t *testing.T) {
	httpreplay.SetScenario("TestDatabaseMaintenanceRunResource")
func TestDatabaseMaintenanceRunResource(t *testing.T) {
	httpreplay.SetScenario("TestDatabaseMaintenanceRunResource")

=== ./internal/integrationtest/media_services_media_workflow_test.go ===
func TestMediaServicesMediaWorkflowResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestMediaServicesMediaWorkflowResource_basic")
func sweepMediaServicesMediaWorkflowResource(compartment string) error {
	mediaServicesClient := acctest.GetTestClients(&schema.ResourceData{}).MediaServicesClient()

=== ./internal/integrationtest/database_db_systems_resource_ol8_upgrade_test.go ===
func TestDatabaseDbSystemsUpgradeResourceOl8(t *testing.T) {


=== ./internal/integrationtest/jms_jms_plugin_test.go ===
func TestJmsPluginResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestJmsPluginResource_basic")

=== ./internal/integrationtest/cluster_placement_groups_cluster_placement_group_test.go ===
func TestClusterPlacementGroupsClusterPlacementGroupResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestClusterPlacementGroupsClusterPlacementGroupResource_basic")
func sweepClusterPlacementGroupsClusterPlacementGroupResource(compartment string) error {
	clusterPlacementGroupsCPClient := acctest.GetTestClients(&schema.ResourceData{}).ClusterPlacementGroupsCPClient()

=== ./internal/integrationtest/database_database_software_image_resource_test.go ===
func TestDatabaseDatabaseSoftwareImageResourceForExaccShape(t *testing.T) {
	httpreplay.SetScenario("TestDatabaseDatabaseSoftwareImageResourceForExaccShape")
func sweepDatabaseDatabaseSoftwareImageResourceForExaccShape(compartment string) error {
	databaseClient := acctest.GetTestClients(&schema.ResourceData{}).DatabaseClient()
func TestDatabaseDatabaseSoftwareImageResourceExadata_basic(t *testing.T) {
	httpreplay.SetScenario("TestDatabaseDatabaseSoftwareImageResourceExadata_basic")
func sweepDatabaseDatabaseSoftwareImageResourceExa(compartment string) error {
	databaseClient := acctest.GetTestClients(&schema.ResourceData{}).DatabaseClient()

=== ./internal/integrationtest/objectstorage_replication_source_test.go ===
func TestObjectStorageReplicationSourceResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestObjectStorageReplicationSourceResource_basic")

=== ./internal/integrationtest/devops_deployment_test.go ===
func TestDevopsDeploymentResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestDevopsDeploymentResource_basic")

=== ./internal/integrationtest/apm_synthetics_on_premise_vantage_point_worker_test.go ===
func TestApmSyntheticsOnPremiseVantagePointWorkerResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestApmSyntheticsOnPremiseVantagePointWorkerResource_basic")
func sweepApmSyntheticsOnPremiseVantagePointWorkerResource(compartment string) error {
	apmSyntheticClient := acctest.GetTestClients(&schema.ResourceData{}).ApmSyntheticClient()

=== ./internal/integrationtest/identity_domains_app_role_test.go ===
func TestIdentityDomainsAppRoleResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestIdentityDomainsAppRoleResource_basic")
func sweepIdentityDomainsAppRoleResource(compartment string) error {
	identityDomainsClient := acctest.GetTestClients(&schema.ResourceData{}).IdentityDomainsClient()

=== ./internal/integrationtest/management_agent_management_agent_test.go ===
func TestManagementAgentManagementAgentResource_dataInSubcompartment(t *testing.T) {
	httpreplay.SetScenario("TestManagementAgentManagementAgentResource_dataInSubcompartment")
func TestManagementAgentManagementAgentResource_gatewayId(t *testing.T) {
	// This test searches for a specific agent (terraformGWTest) which is known to have a gatewayId set
func TestManagementAgentManagementAgentResource_basic(t *testing.T) {

func sweepManagementAgentManagementAgentResource(compartment string) error {
	managementAgentClient := acctest.GetTestClients(&schema.ResourceData{}).ManagementAgentClient()

=== ./internal/integrationtest/artifacts_repository_test.go ===
func TestArtifactsRepositoryResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestArtifactsRepositoryResource_basic")
func sweepArtifactsRepositoryResource(compartment string) error {
	artifactsClient := acctest.GetTestClients(&schema.ResourceData{}).ArtifactsClient()

=== ./internal/integrationtest/cloud_bridge_asset_source_test.go ===
func TestCloudBridgeAssetSourceResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestCloudBridgeAssetSourceResource_basic")
func sweepCloudBridgeAssetSourceResource(compartment string) error {
	discoveryClient := acctest.GetTestClients(&schema.ResourceData{}).DiscoveryClient()

=== ./internal/integrationtest/core_drg_attachment_test.go ===
func TestCoreDrgAttachmentResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestCoreDrgAttachmentResource_basic")
func sweepCoreDrgAttachmentResource(compartment string) error {
	virtualNetworkClient := acctest.GetTestClients(&schema.ResourceData{}).VirtualNetworkClient()

=== ./internal/integrationtest/identity_fault_domain_test.go ===
func TestIdentityFaultDomainResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestIdentityFaultDomainResource_basic")

=== ./internal/integrationtest/data_labeling_service_annotation_format_test.go ===
func TestDataLabelingServiceAnnotationFormatResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestDataLabelingServiceAnnotationFormatResource_basic")

=== ./internal/integrationtest/delegate_access_control_delegated_resource_access_request_test.go ===
func TestDelegateAccessControlDelegatedResourceAccessRequestResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestDelegateAccessControlDelegatedResourceAccessRequestResource_basic")

=== ./internal/integrationtest/ocvp_esxi_host_deprecated_test.go ===
func TestOcvpEsxiHostDeprecatedResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestOcvpEsxiHostDeprecatedResource_basic")

=== ./internal/integrationtest/os_management_hub_lifecycle_stage_attach_managed_instances_management_test.go ===
func TestOsManagementHubLifecycleStageAttachManagedInstancesManagementResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestOsManagementHubLifecycleStageAttachManagedInstancesManagementResource_basic")

=== ./internal/integrationtest/database_database_pdb_conversion_history_entry_test.go ===
func TestDatabaseDatabasePdbConversionHistoryEntryResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestDatabaseDatabasePdbConversionHistoryEntryResource_basic")

=== ./internal/integrationtest/opensearch_opensearch_version_test.go ===
func TestOpensearchOpensearchVersionResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestOpensearchOpensearchVersionResource_basic")

=== ./internal/integrationtest/devops_deployment_single_stage_test.go ===
func TestDevopsDeploymentResource_singleStageDeployment(t *testing.T) {
	httpreplay.SetScenario("TestDevopsDeploymentResource_singleStageDeployment")

=== ./internal/integrationtest/identity_domain_test.go ===
func TestIdentityDomainResource_basic(t *testing.T) {
	t.Skip("Skip this test because henosis tenancy is needed")
func sweepIdentityDomainResource(compartment string) error {
	identityClient := acctest.GetTestClients(&schema.ResourceData{}).IdentityClient()

=== ./internal/integrationtest/license_manager_license_metric_test.go ===
func TestLicenseManagerLicenseMetricResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestLicenseManagerLicenseMetricResource_basic")

=== ./internal/integrationtest/nosql_table_freetable_test.go ===
func TestNosqlTableResource_freeTable(t *testing.T) {
	httpreplay.SetScenario("TestNosqlTableResource_freeTable")

=== ./internal/integrationtest/metering_computation_usage_test.go ===
func TestMeteringComputationUsageResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestMeteringComputationUsageResource_basic")

=== ./internal/integrationtest/network_firewall_network_firewall_policy_decryption_rule_test.go ===
func TestNetworkFirewallNetworkFirewallPolicyDecryptionRuleResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestNetworkFirewallNetworkFirewallPolicyDecryptionRuleResource_basic")
func sweepNetworkFirewallNetworkFirewallPolicyDecryptionRuleResource(compartment string) error {
	networkFirewallClient := acctest.GetTestClients(&schema.ResourceData{}).NetworkFirewallClient()

=== ./internal/integrationtest/dataintegration_workspace_folder_test.go ===
func TestDataintegrationWorkspaceFolderResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestDataintegrationWorkspaceFolderResource_basic")
func sweepDataintegrationWorkspaceFolderResource(compartment string) error {
	dataIntegrationClient := acctest.GetTestClients(&schema.ResourceData{}).DataIntegrationClient()

=== ./internal/integrationtest/data_safe_target_alert_policy_association_test.go ===
func TestDataSafeTargetAlertPolicyAssociationResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestDataSafeTargetAlertPolicyAssociationResource_basic")
func sweepDataSafeTargetAlertPolicyAssociationResource(compartment string) error {
	dataSafeClient := acctest.GetTestClients(&schema.ResourceData{}).DataSafeClient()

=== ./internal/integrationtest/opsi_opsi_configuration_test.go ===
func TestOpsiOpsiConfigurationResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestOpsiOpsiConfigurationResource_basic")
func sweepOpsiOpsiConfigurationResource(compartment string) error {
	operationsInsightsClient := acctest.GetTestClients(&schema.ResourceData{}).OperationsInsightsClient()

=== ./internal/integrationtest/identity_domains_oauth_client_certificate_test.go ===
func TestIdentityDomainsOAuthClientCertificateResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestIdentityDomainsOAuthClientCertificateResource_basic")
func sweepIdentityDomainsOAuthClientCertificateResource(compartment string) error {
	identityDomainsClient := acctest.GetTestClients(&schema.ResourceData{}).IdentityDomainsClient()

=== ./internal/integrationtest/database_exascale_db_storage_vault_test.go ===
func TestDatabaseExascaleDbStorageVaultResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestDatabaseExascaleDbStorageVaultResource_basic")
func sweepDatabaseExascaleDbStorageVaultResource(compartment string) error {
	databaseClient := acctest.GetTestClients(&schema.ResourceData{}).DatabaseClient()

=== ./internal/integrationtest/devops_deploy_stage_deploy_function_test.go ===
func TestDevopsDeployStageResource_deployFunction(t *testing.T) {
	httpreplay.SetScenario("TestDevopsDeployStageResource_deployFunction")

=== ./internal/integrationtest/identity_group_resource_test.go ===
func (s *ResourceIdentityGroupTestSuite) SetupTest() {
	s.Providers = acctest.TestAccProviders
func (s *ResourceIdentityGroupTestSuite) TestAccResourceIdentityGroup_basic() {
	var resId, resId2 string
func TestResourceIdentityGroupTestSuite(t *testing.T) {
	if httpreplay.ModeRecordReplay() {

=== ./internal/integrationtest/database_autonomous_container_patch_test.go ===
func TestDatabaseAutonomousContainerPatchResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestDatabaseAutonomousContainerPatchResource_basic")
func TestExaccDatabaseAutonomousContainerPatchResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestDatabaseAutonomousContainerPatchResource_basic")

=== ./internal/integrationtest/core_private_ip_test.go ===
func TestCorePrivateIpResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestCorePrivateIpResource_basic")
func sweepCorePrivateIpResource(compartment string) error {
	virtualNetworkClient := acctest.GetTestClients(&schema.ResourceData{}).VirtualNetworkClient()

=== ./internal/integrationtest/data_safe_sdm_masking_policy_difference_difference_column_test.go ===
func TestDataSafeSdmMaskingPolicyDifferenceDifferenceColumnResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestDataSafeSdmMaskingPolicyDifferenceDifferenceColumnResource_basic")

=== ./internal/integrationtest/data_safe_library_masking_format_test.go ===
func TestDataSafeLibraryMaskingFormatResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestDataSafeLibraryMaskingFormatResource_basic")
func sweepDataSafeLibraryMaskingFormatResource(compartment string) error {
	dataSafeClient := acctest.GetTestClients(&schema.ResourceData{}).DataSafeClient()

=== ./internal/integrationtest/ai_document_project_test.go ===
func TestAiDocumentProjectResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestAiDocumentProjectResource_basic")
func sweepAiDocumentProjectResource(compartment string) error {
	aiServiceDocumentClient := acctest.GetTestClients(&schema.ResourceData{}).AiServiceDocumentClient()

=== ./internal/integrationtest/service_mesh_proxy_detail_test.go ===
func TestServiceMeshProxyDetailResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestServiceMeshProxyDetailResource_basic")

=== ./internal/integrationtest/data_safe_target_databases_table_test.go ===
func TestDataSafeTargetDatabasesTableResource_basic(t *testing.T) {
	t.Skip("Skipping this test which queries the database for metadata of tables present in the database. " +

=== ./internal/integrationtest/devops_project_repository_setting_test.go ===
func TestDevopsProjectRepositorySettingResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestDevopsProjectRepositorySettingResource_basic")

=== ./internal/integrationtest/sch_service_connector_resource_monitoring_test.go ===
func TestSchServiceConnectorResource_monitoring(t *testing.T) {
	httpreplay.SetScenario("TestSchServiceConnectorResource_monitoring")

=== ./internal/integrationtest/ons_notification_topic_test.go ===
func TestOnsNotificationTopicResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestOnsNotificationTopicResource_basic")
func sweepOnsNotificationTopicResource(compartment string) error {
	notificationControlPlaneClient := acctest.GetTestClients(&schema.ResourceData{}).NotificationControlPlaneClient()

=== ./internal/integrationtest/jms_announcement_test.go ===
func TestJmsAnnouncementResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestJmsAnnouncementResource_basic")

=== ./internal/integrationtest/devops_deploy_environment_instance_group_test.go ===
func TestDevopsDeployEnvironmentResource_instanceGroup(t *testing.T) {
	httpreplay.SetScenario("TestDevopsDeployEnvironmentResource_instanceGroup")

=== ./internal/integrationtest/identity_domains_password_policy_test.go ===
func TestIdentityDomainsPasswordPolicyResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestIdentityDomainsPasswordPolicyResource_basic")
func sweepIdentityDomainsPasswordPolicyResource(compartment string) error {
	identityDomainsClient := acctest.GetTestClients(&schema.ResourceData{}).IdentityDomainsClient()

=== ./internal/integrationtest/database_management_external_db_system_discovery_test.go ===
func TestDatabaseManagementExternalDbSystemDiscoveryResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestDatabaseManagementExternalDbSystemDiscoveryResource_basic")
func sweepDatabaseManagementExternalDbSystemDiscoveryResource(compartment string) error {
	dbManagementClient := acctest.GetTestClients(&schema.ResourceData{}).DbManagementClient()

=== ./internal/integrationtest/opsi_pecomanaged_database_insight_test.go ===
func TestOpsiPecomanagedDatabaseInsightResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestOpsiPecomanagedDatabaseInsightResource_basic")
func sweepOpsiPecomanagedDatabaseInsightResource(compartment string) error {
	operationsInsightsClient := acctest.GetTestClients(&schema.ResourceData{}).OperationsInsightsClient()

=== ./internal/integrationtest/resourcemanager_private_endpoint_reachable_ip_test.go ===
func TestResourcemanagerPrivateEndpointReachableIpResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestResourcemanagerPrivateEndpointReachableIpResource_basic")

=== ./internal/integrationtest/core_cluster_network_test.go ===
func TestCoreClusterNetworkResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestCoreClusterNetworkResource_basic")
func TestCoreClusterNetworkResourceIpv6_basic(t *testing.T) {
	httpreplay.SetScenario("TestCoreClusterNetworkResourceIpv6_basic")
func sweepCoreClusterNetworkResource(compartment string) error {
	computeManagementClient := acctest.GetTestClients(&schema.ResourceData{}).ComputeManagementClient()

=== ./internal/integrationtest/core_drg_attachments_list_test.go ===
func TestCoreDrgAttachmentsListResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestCoreDrgAttachmentsListResource_basic")

=== ./internal/integrationtest/opsi_importable_compute_entity_test.go ===
func TestOpsiImportableComputeEntityResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestOpsiImportableComputeEntityResource_basic")

=== ./internal/integrationtest/logging_log_saved_search_test.go ===
func TestLoggingLogSavedSearchResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestLoggingLogSavedSearchResource_basic")
func sweepLoggingLogSavedSearchResource(compartment string) error {
	loggingManagementClient := acctest.GetTestClients(&schema.ResourceData{}).LoggingManagementClient()

=== ./internal/integrationtest/ocvp_supported_sku_test.go ===
func TestOcvpSupportedSkuResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestOcvpSupportedSkuResource_basic")

=== ./internal/integrationtest/os_management_hub_managed_instance_group_installed_package_test.go ===
func TestOsManagementHubManagedInstanceGroupInstalledPackageResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestOsManagementHubManagedInstanceGroupInstalledPackageResource_basic")

=== ./internal/integrationtest/os_management_hub_windows_update_test.go ===
func TestOsManagementHubWindowsUpdateResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestOsManagementHubWindowsUpdateResource_basic")

=== ./internal/integrationtest/kms_vault_replica_test.go ===
func TestKmsVaultReplicaResource_basic(t *testing.T) {
	t.Skip("Skip this test because virtual private vault is needed")

=== ./internal/integrationtest/media_services_media_workflow_job_fact_test.go ===
func TestMediaServicesMediaWorkflowJobFactResource_basic(t *testing.T) {
	//httpreplay.SetScenario("TestMediaServicesMediaWorkflowJobFactResource_basic")

=== ./internal/integrationtest/database_autonomous_container_database_test.go ===
func TestDatabaseAutonomousContainerDatabaseResource_basic(t *testing.T) {
	//t.Skip("Skip this test as AEI and its api no longer exists.")
func sweepDatabaseAutonomousContainerDatabaseResource(compartment string) error {
	databaseClient := acctest.GetTestClients(&schema.ResourceData{}).DatabaseClient()

=== ./internal/integrationtest/media_services_media_workflow_configuration_test.go ===
func TestMediaServicesMediaWorkflowConfigurationResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestMediaServicesMediaWorkflowConfigurationResource_basic")
func sweepMediaServicesMediaWorkflowConfigurationResource(compartment string) error {
	mediaServicesClient := acctest.GetTestClients(&schema.ResourceData{}).MediaServicesClient()

=== ./internal/integrationtest/data_safe_security_assessment_findings_change_audit_log_test.go ===
func TestDataSafeSecurityAssessmentFindingsChangeAuditLogResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestDataSafeSecurityAssessmentFindingsChangeAuditLogResource_basic")

=== ./internal/integrationtest/containerengine_cluster_test.go ===
func TestContainerengineClusterResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestContainerengineClusterResource_basic")
func sweepContainerengineClusterResource(compartment string) error {
	containerEngineClient := acctest.GetTestClients(&schema.ResourceData{}).ContainerEngineClient()

=== ./internal/integrationtest/osp_gateway_address_action_verification_test.go ===
func TestOspGatewayAddressActionVerificationResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestOspGatewayAddressActionVerificationResource_basic")

=== ./internal/integrationtest/announcements_service_announcement_subscription_test.go ===
func TestAnnouncementsServiceAnnouncementSubscriptionResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestAnnouncementsServiceAnnouncementSubscriptionResource_basic")
func sweepAnnouncementsServiceAnnouncementSubscriptionResource(compartment string) error {
	announcementSubscriptionClient := acctest.GetTestClients(&schema.ResourceData{}).AnnouncementSubscriptionClient()

=== ./internal/integrationtest/core_dedicated_vm_hosts_instance_test.go ===
func TestCoreDedicatedVmHostsInstanceResource_basic(t *testing.T) {
	httpreplay.SetScenario("TestCoreDedicatedVmHostsInstanceResource_basic")

=== ./internal/integrationtest/devops_deploy_environment_function_test.go ===
func TestDevopsDeployEnvironmentResource_function(t *testing.T) {
	httpreplay.SetScenario("TestDevopsDeployEnvironmentResource_function")

=== ./internal/acctest/test_helpers.go ===
func TestCheckResourceAttributesEqual(name1, key1, name2, key2 string) resource.TestCheckFunc {
	return func(s *terraform.State) error {
func GenerateDataSourceFromRepresentationMap(resourceType string, resourceName string, representationType RepresentationType, representationMode RepresentationMode, representations map[string]interface{}) string {
	var buffer bytes.Buffer
func GenerateResourceFromRepresentationMap(resourceType string, resourceName string, representationType RepresentationType, representationMode RepresentationMode, representations map[string]interface{}) string {
	var buffer bytes.Buffer
func GenerateResourceFromMap(representationType RepresentationType, representationMode RepresentationMode, representations map[string]interface{}) string {
	var buffer bytes.Buffer
func TestCheckJsonResourceAttr(name, key, expectedJson string) resource.TestCheckFunc {
	return func(s *terraform.State) error {
func ResourceTest(t *testing.T, checkDestroyFunc resource.TestCheckFunc, steps []resource.TestStep) {
	// set Generic preconfiguration method if not explicitly set
func GetTestClients(data *schema.ResourceData) *tf_client.OracleClients {
	r := &schema.Resource{
func CheckResourceSetContainsElementWithProperties(name, setKey string, properties map[string]string, presentProperties []string) resource.TestCheckFunc {
	return func(s *terraform.State) error {
func CheckResourceSetContainsElementWithPropertiesContainingNestedSets(name, setKey string, properties map[string]interface{}, presentProperties []string) resource.TestCheckFunc {
	return func(s *terraform.State) error {

=== ./internal/acctest/oci_sweeper_test.go ===
func TestUnitAddResourceIdToSweeperResourceIdMap(t *testing.T) {

func TestUnitGetResourceIdsToSweep(t *testing.T) {
	type args struct {

=== ./internal/acctest/test_helpers_test.go ===
func TestUnitCheckJsonResourceAttr(t *testing.T) {
	type args struct {
func TestUnitCheckResourceAttributesEqual(t *testing.T) {
	stateWithTwoKey := newTerraformStateWithValue("name", "key", "value")
func TestUnitCheckResourceSetContainsElementWithProperties(t *testing.T) {
	stateNotPrimary := terraform.NewState()
func TestUnitCheckResourceSetContainsElementWithPropertiesContainingNestedSets(t *testing.T) {
	stateNotPrimary := terraform.NewState()
func TestUnitGenerateDataSourceFromRepresentationMap(t *testing.T) {
	auditEventDataSourceRepresentation := map[string]interface{}{
func TestUnitGenerateResourceFromMap(t *testing.T) {
	auditEventDataSourceRepresentation := map[string]interface{}{
func TestUnitGenerateResourceFromRepresentationMap(t *testing.T) {
	auditEventResourceRepresentation := map[string]interface{}{
func TestUnitResourceTest(t *testing.T) {
	type args struct {

=== ./internal/acctest/oci_sweeper.go ===
func AddResourceIdToSweeperResourceIdMap(compartmentId string, resourceType string, resourceId string) {
	if _, ok := SweeperResourceCompartmentIdMap[compartmentId]; ok {
func GetResourceIdsToSweep(compartmentId string, resourceName string) []string {
	if _, ok := SweeperResourceCompartmentIdMap[compartmentId]; ok {

=== ./internal/commonexport/commonexport_functions.go ===
func (tr *TerraformResource) GetTerraformReference() string {
	return fmt.Sprintf("%s.%s", tr.TerraformClass, tr.TerraformName)
func (resource *OCIResource) HasFreeformTag(tagKey string) bool {
	if freeformTags, exists := resource.SourceAttributes["freeform_tags"]; exists {
func (resource *OCIResource) HasDefinedTag(tagKey string, tagValue string) bool {
	if definedTags, exists := resource.SourceAttributes["defined_tags"]; exists {
func (ociRes *OCIResource) GetHCLString(builder *strings.Builder, interpolationMap map[string]string) error {
	// Remove any potential cyclical references from the interpolation map
func (tr *TerraformResource) GetHclReferenceIdString() string {
	if tr.TerraformReferenceIdString != "" {
func GetHCLStringFromMap(builder *strings.Builder, sourceAttributes map[string]interface{}, resourceSchema *schema.Resource, interpolationMap map[string]string, ociRes *OCIResource, attributePrefix string) error {
	sortedKeys := make([]string, len(resourceSchema.Schema))
func (args *ExportCommandArgs) FinalizeServices(ctx *ResourceDiscoveryContext) {
	if len(args.Services) == 0 {
func (ctx *ResourceDiscoveryContext) GetResourceHint(resourceClass string) (*TerraformResourceHints, error) {
	if hints, exists := ctx.ResourceHintsLookup[resourceClass]; exists {
func (ctx *ResourceDiscoveryContext) AddErrorToList(error *ResourceDiscoveryError) {
	ctx.CtxLock.Lock()
func (ctx *ResourceDiscoveryContext) PostValidate() {
	// Check that all expected resource IDs were found, if any were given
func (ctx *ResourceDiscoveryContext) PrintSummary() {

func (ctx *ResourceDiscoveryContext) PrintErrors() ([]string, []string) {
	utils.Logln(utils.Yellow("\n\n[WARN] Resource discovery finished with errors listed below:\n"))
func (h *TerraformResourceHints) DiscoversWithSingularDatasource() bool {
	return h.DatasourceItemsAttr == ""
func FindResourcesGeneric(ctx *ResourceDiscoveryContext, tfMeta *TerraformResourceAssociation, parent *OCIResource, resourceGraph *TerraformResourceGraph) ([]*OCIResource, error) {
	results := []*OCIResource{}
func ConvertDatasourceItemToMap(d *schema.ResourceData, itemPrefix string, itemSchema map[string]*schema.Schema) (map[string]interface{}, error) {
	result := map[string]interface{}{}
func generateOciResourceFromResourceData(d *schema.ResourceData, rawResource interface{}, resourceSchema map[string]*schema.Schema, itemPrefix string, tfMeta *TerraformResourceAssociation, parent *OCIResource) (*OCIResource, error) {
	// The following conversion takes a ResourceData and converts it to a map where null values are preserved (and omitted).
func GetOciResource(d *schema.ResourceData, resourceSchema map[string]*schema.Schema, compartmentId string, resourceHint *TerraformResourceHints, resourceId string) (*OCIResource, error) {
	resourceMap, err := ConvertDatasourceItemToMap(d, "", resourceSchema)
func getNotFoundChildren(parent string, resourceGraph *TerraformResourceGraph, children *[]string) {
	childResources, exists := (*resourceGraph)[parent]
func RegisterCompartmentGraphs(servicename string, graph TerraformResourceGraph) {
	if oci_common.CheckForEnabledServices(utils.GetSDKServiceName(servicename)) {
func RegisterTenancyGraphs(servicename string, graph TerraformResourceGraph) {
	if oci_common.CheckForEnabledServices(utils.GetSDKServiceName(servicename)) {
func RegisterRelatedResourcesGraph(resourceName string, association []TerraformResourceAssociation) {
	ExportRelatedResourcesGraph[resourceName] = association
func BuildAvailabilityResourceGraph(resourceName string, association []TerraformResourceAssociation) {

func RegisterAvailabilityResourceGraph() {
	RegisterCompartmentGraphs("availability_domain", availabilityDomainResourceGraph)
func ConvertResourceDataToMap(schemaMap map[string]*schema.Schema, d *schema.ResourceData) map[string]interface{} {
	result := map[string]interface{}{}

=== ./internal/commonexport/export_filters_test.go ===
func TestUnitMultipleValuesWithResourceTypeFilter(t *testing.T) {
	tests := []struct {

=== ./internal/commonexport/export_variables.go ===
func extractVarsExportResourceLevel(exportVars []string) (map[string][]string, error) {
	result := map[string][]string{}
func exportAttributeForResourceLevel(sourceAttributes map[string]interface{}, resourceType string, resourceName string, varsExportResourceLevel map[string][]string, interpolationMap map[string]string) error {
	if attributeList, exist := varsExportResourceLevel[resourceType]; exist {
func exportAttributeForResourceAndGlobalLevel(sourceAttributes map[string]interface{}, resourceType string, resourceName string, varsExportResourceLevel map[string][]string, varsExportGlobalLevel []string, interpolationMap map[string]string) error {
	// export attribute per resource level is higher priority than global level

=== ./internal/commonexport/export_filter_parser.go ===
func (f *Filter) ParseFilter(rawFilter string) (ResourceFilter, error) {
	if resourceTypeFilterPattern.MatchString(rawFilter) {

=== ./internal/commonexport/commonexport_types.go ===
func (tfE ResourceDiscoveryCustomError) Error() error {
	switch tfE.TypeOfError {

=== ./internal/commonexport/export_filters.go ===
func (rtf *ResourceTypeFilter) Filter(resource *OCIResource) bool {
	// since resource type is empty, we don't have enough information for filtering
func (fv *FieldValueFilter) Filter(resource *OCIResource) bool {
	if resource == nil {
func (rfv *ResourceFieldValueFilter) Filter(resource *OCIResource) bool {
	// TODO:implement this filter

=== ./internal/commonexport/commonexport_functions_test.go ===
func TestUnitCheckDuplicateResourceName(t *testing.T) {
	ResourceNameCount = make(map[string]int)

=== ./internal/commonexport/export_filters_utils.go ===
func GetFiltersDeepCopy(filters []ResourceFilter) ([]ResourceFilter, error) {
	filtersCopy := make([]ResourceFilter, 0)
func getFilterDeepCopy(filter ResourceFilter) (ResourceFilter, error) {
	switch filter.(type) {

=== ./internal/commonexport/commonexport_tfhcl.go ===
func (tfversion *TfHclVersion11) GetDataSourceHclString(datasourceType string, datasourceName string) string {
	return fmt.Sprintf("\"${data.%s.%s}\"", datasourceType, datasourceName)
func (tfversion *TfHclVersion12) GetDataSourceHclString(datasourceType string, datasourceName string) string {
	return fmt.Sprintf("data.%s.%s", datasourceType, datasourceName)

=== ./internal/commonexport/export_variables_test.go ===
func TestUnitExtractVarsExportResourceLevel(t *testing.T) {
	type args struct {
func TestUnitExportAttributeForResourceLevel(t *testing.T) {
	TfHclVersionvar = &TfHclVersion12{Value: TfVersion12}
func TestUnitGetVarNameFromAttributeOfResources(t *testing.T) {
	type args struct {

=== ./internal/utils/helpers.go ===
func CheckIncompatibleAttrsForApiKeyAuth(d *schema.ResourceData, apiKeyConfigAttributes [5]string) ([]string, bool) {
	var apiKeyConfigAttributesToUnset []string
func GetVarNameFromAttributeOfResources(attribute string, resourceType string, resourceName string) string {
	// Following format resourceType--attribute-attribute-...–resourceName

=== ./internal/service/logging/logging_log_resource.go ===
func LoggingLogResource() *schema.Resource {
	return &schema.Resource{
func createLoggingLog(d *schema.ResourceData, m interface{}) error {
	sync := &LoggingLogResourceCrud{}
func readLoggingLog(d *schema.ResourceData, m interface{}) error {
	sync := &LoggingLogResourceCrud{}
func updateLoggingLog(d *schema.ResourceData, m interface{}) error {
	sync := &LoggingLogResourceCrud{}
func deleteLoggingLog(d *schema.ResourceData, m interface{}) error {
	sync := &LoggingLogResourceCrud{}
func (s *LoggingLogResourceCrud) ID() string {
	return GetLogCompositeId(*s.Res.LogGroupId, *s.Res.Id)
func (s *LoggingLogResourceCrud) CreatedPending() []string {
	return []string{
func (s *LoggingLogResourceCrud) CreatedTarget() []string {
	return []string{
func (s *LoggingLogResourceCrud) DeletedPending() []string {
	return []string{
func (s *LoggingLogResourceCrud) DeletedTarget() []string {
	return []string{}
func (s *LoggingLogResourceCrud) Create() error {
	request := oci_logging.CreateLogRequest{}
func (s *LoggingLogResourceCrud) setIdFromWorkRequest(workId *string) {
	var identifier *string
func (s *LoggingLogResourceCrud) getLogFromWorkRequest(workId *string, retryPolicy *oci_common.RetryPolicy,
	actionTypeEnum oci_logging.ActionTypesEnum, timeout time.Duration) error {
func (s *LoggingLogResourceCrud) Get() error {
	request := oci_logging.GetLogRequest{}
func (s *LoggingLogResourceCrud) Update() error {

func (s *LoggingLogResourceCrud) Delete() error {
	request := oci_logging.DeleteLogRequest{}
func (s *LoggingLogResourceCrud) SetData() error {
	logGroupId, logId, err := parseLogsCompositeId(s.D.Id())
func (s *LoggingLogResourceCrud) mapToLogConfiguration(fieldKeyFormat string) (oci_logging.Configuration, error) {
	result := oci_logging.Configuration{}
func (s *LoggingLogResourceCrud) mapToSource(fieldKeyFormat string) (oci_logging.Source, error) {
	var baseObject oci_logging.Source
func (s *LoggingLogResourceCrud) updateLogGroup(oldLogGroupId interface{}, newLogGroupId interface{}) error {
	updateLogGroupRequest := oci_logging.ChangeLogLogGroupRequest{}

=== ./internal/service/logging/logging_log_group_data_source.go ===
func LoggingLogGroupDataSource() *schema.Resource {
	fieldMap := make(map[string]*schema.Schema)
func readSingularLoggingLogGroup(d *schema.ResourceData, m interface{}) error {
	sync := &LoggingLogGroupDataSourceCrud{}
func (s *LoggingLogGroupDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *LoggingLogGroupDataSourceCrud) Get() error {
	request := oci_logging.GetLogGroupRequest{}
func (s *LoggingLogGroupDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/logging/logging_log_data_source.go ===
func LoggingLogDataSource() *schema.Resource {
	fieldMap := make(map[string]*schema.Schema)
func readSingularLoggingLog(d *schema.ResourceData, m interface{}) error {
	sync := &LoggingLogDataSourceCrud{}
func (s *LoggingLogDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *LoggingLogDataSourceCrud) Get() error {
	request := oci_logging.GetLogRequest{}
func (s *LoggingLogDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/logging/logging_unified_agent_configuration_resource.go ===
func LoggingUnifiedAgentConfigurationResource() *schema.Resource {
	return &schema.Resource{
func createLoggingUnifiedAgentConfiguration(d *schema.ResourceData, m interface{}) error {
	sync := &LoggingUnifiedAgentConfigurationResourceCrud{}
func readLoggingUnifiedAgentConfiguration(d *schema.ResourceData, m interface{}) error {
	sync := &LoggingUnifiedAgentConfigurationResourceCrud{}
func updateLoggingUnifiedAgentConfiguration(d *schema.ResourceData, m interface{}) error {
	sync := &LoggingUnifiedAgentConfigurationResourceCrud{}
func deleteLoggingUnifiedAgentConfiguration(d *schema.ResourceData, m interface{}) error {
	sync := &LoggingUnifiedAgentConfigurationResourceCrud{}
func (s *LoggingUnifiedAgentConfigurationResourceCrud) ID() string {
	return *s.Res.Id
func (s *LoggingUnifiedAgentConfigurationResourceCrud) CreatedPending() []string {
	return []string{
func (s *LoggingUnifiedAgentConfigurationResourceCrud) CreatedTarget() []string {
	return []string{
func (s *LoggingUnifiedAgentConfigurationResourceCrud) DeletedPending() []string {
	return []string{
func (s *LoggingUnifiedAgentConfigurationResourceCrud) DeletedTarget() []string {
	return []string{}
func (s *LoggingUnifiedAgentConfigurationResourceCrud) Create() error {
	request := oci_logging.CreateUnifiedAgentConfigurationRequest{}
func (s *LoggingUnifiedAgentConfigurationResourceCrud) getUnifiedAgentConfigurationFromWorkRequest(workId *string, retryPolicy *oci_common.RetryPolicy,
	actionTypeEnum oci_logging.ActionTypesEnum, timeout time.Duration) error {
func (s *LoggingUnifiedAgentConfigurationResourceCrud) Get() error {
	request := oci_logging.GetUnifiedAgentConfigurationRequest{}
func (s *LoggingUnifiedAgentConfigurationResourceCrud) Update() error {
	if compartment, ok := s.D.GetOkExists("compartment_id"); ok && s.D.HasChange("compartment_id") {
func (s *LoggingUnifiedAgentConfigurationResourceCrud) Delete() error {
	request := oci_logging.DeleteUnifiedAgentConfigurationRequest{}
func (s *LoggingUnifiedAgentConfigurationResourceCrud) SetData() error {
	if s.Res.CompartmentId != nil {
func (s *LoggingUnifiedAgentConfigurationResourceCrud) mapToGrepFilterAllowRule(fieldKeyFormat string) (oci_logging.GrepFilterAllowRule, error) {
	result := oci_logging.GrepFilterAllowRule{}
func (s *LoggingUnifiedAgentConfigurationResourceCrud) mapToGrepFilterDenyRule(fieldKeyFormat string) (oci_logging.GrepFilterDenyRule, error) {
	result := oci_logging.GrepFilterDenyRule{}
func (s *LoggingUnifiedAgentConfigurationResourceCrud) mapToGrokPattern(fieldKeyFormat string) (oci_logging.GrokPattern, error) {
	result := oci_logging.GrokPattern{}
func (s *LoggingUnifiedAgentConfigurationResourceCrud) mapToGroupAssociationDetails(fieldKeyFormat string) (oci_logging.GroupAssociationDetails, error) {
	result := oci_logging.GroupAssociationDetails{}
func (s *LoggingUnifiedAgentConfigurationResourceCrud) mapToOperationalMetricsConfiguration(fieldKeyFormat string) (oci_logging.OperationalMetricsConfiguration, error) {
	result := oci_logging.OperationalMetricsConfiguration{}
func (s *LoggingUnifiedAgentConfigurationResourceCrud) mapToOperationalMetricsDestination(fieldKeyFormat string) (oci_logging.OperationalMetricsDestination, error) {
	result := oci_logging.OperationalMetricsDestination{}
func (s *LoggingUnifiedAgentConfigurationResourceCrud) mapToOperationalMetricsRecordInput(fieldKeyFormat string) (oci_logging.OperationalMetricsRecordInput, error) {
	result := oci_logging.OperationalMetricsRecordInput{}
func (s *LoggingUnifiedAgentConfigurationResourceCrud) mapToOperationalMetricsSource(fieldKeyFormat string) (oci_logging.OperationalMetricsSource, error) {
	result := oci_logging.OperationalMetricsSource{}
func (s *LoggingUnifiedAgentConfigurationResourceCrud) mapToRecordTransformerPair(fieldKeyFormat string) (oci_logging.RecordTransformerPair, error) {
	result := oci_logging.RecordTransformerPair{}
func (s *LoggingUnifiedAgentConfigurationResourceCrud) mapToUnifiedAgentCustomSection(fieldKeyFormat string) (oci_logging.UnifiedAgentCustomSection, error) {
	result := oci_logging.UnifiedAgentCustomSection{}
func (s *LoggingUnifiedAgentConfigurationResourceCrud) mapToUnifiedAgentKubernetesFilter(fieldKeyFormat string) (oci_logging.UnifiedAgentKubernetesFilter, error) {
	result := oci_logging.UnifiedAgentKubernetesFilter{}
func (s *LoggingUnifiedAgentConfigurationResourceCrud) mapToUnifiedAgentKubernetesScrapeTarget(fieldKeyFormat string) (oci_logging.UnifiedAgentKubernetesScrapeTarget, error) {
	result := oci_logging.UnifiedAgentKubernetesScrapeTarget{}
func (s *LoggingUnifiedAgentConfigurationResourceCrud) mapToUnifiedAgentKubernetesSource(fieldKeyFormat string) (oci_logging.UnifiedAgentKubernetesSource, error) {
	result := oci_logging.UnifiedAgentKubernetesSource{}
func (s *LoggingUnifiedAgentConfigurationResourceCrud) mapToUnifiedAgentLoggingDestination(fieldKeyFormat string) (oci_logging.UnifiedAgentLoggingDestination, error) {
	result := oci_logging.UnifiedAgentLoggingDestination{}
func (s *LoggingUnifiedAgentConfigurationResourceCrud) mapToUnifiedAgentLoggingFilter(fieldKeyFormat string) (oci_logging.UnifiedAgentLoggingFilter, error) {
	var baseObject oci_logging.UnifiedAgentLoggingFilter
func (s *LoggingUnifiedAgentConfigurationResourceCrud) mapToUnifiedAgentLoggingSource(fieldKeyFormat string) (oci_logging.UnifiedAgentLoggingSource, error) {
	var baseObject oci_logging.UnifiedAgentLoggingSource
func (s *LoggingUnifiedAgentConfigurationResourceCrud) mapToUnifiedAgentMonitoringApplicationConfigurationDetails(fieldKeyFormat string) (oci_logging.UnifiedAgentMonitoringApplicationConfigurationDetails, error) {
	var baseObject oci_logging.UnifiedAgentMonitoringApplicationConfigurationDetails
func (s *LoggingUnifiedAgentConfigurationResourceCrud) mapToUnifiedAgentMonitoringDestination(fieldKeyFormat string) (oci_logging.UnifiedAgentMonitoringDestination, error) {
	result := oci_logging.UnifiedAgentMonitoringDestination{}
func (s *LoggingUnifiedAgentConfigurationResourceCrud) mapToUnifiedAgentMonitoringUrlSource(fieldKeyFormat string) (oci_logging.UnifiedAgentMonitoringUrlSource, error) {
	result := oci_logging.UnifiedAgentMonitoringUrlSource{}
func (s *LoggingUnifiedAgentConfigurationResourceCrud) mapToUnifiedAgentOpenmetricsParserRecord(fieldKeyFormat string) (oci_logging.UnifiedAgentOpenmetricsParserRecord, error) {
	result := oci_logging.UnifiedAgentOpenmetricsParserRecord{}
func (s *LoggingUnifiedAgentConfigurationResourceCrud) mapToUnifiedAgentParser(fieldKeyFormat string) (oci_logging.UnifiedAgentParser, error) {
	var baseObject oci_logging.UnifiedAgentParser
func (s *LoggingUnifiedAgentConfigurationResourceCrud) mapToUnifiedAgentServiceConfigurationDetails(fieldKeyFormat string) (oci_logging.UnifiedAgentServiceConfigurationDetails, error) {
	var baseObject oci_logging.UnifiedAgentServiceConfigurationDetails
func (s *LoggingUnifiedAgentConfigurationResourceCrud) mapToUnifiedAgentTailLogSource(fieldKeyFormat string) (oci_logging.UnifiedAgentTailLogSource, error) {
	result := oci_logging.UnifiedAgentTailLogSource{}
func (s *LoggingUnifiedAgentConfigurationResourceCrud) mapToUnifiedAgentTailSourceAdvancedOptions(fieldKeyFormat string) (oci_logging.UnifiedAgentTailSourceAdvancedOptions, error) {
	result := oci_logging.UnifiedAgentTailSourceAdvancedOptions{}
func (s *LoggingUnifiedAgentConfigurationResourceCrud) mapToUnifiedAgentUrlFilter(fieldKeyFormat string) (oci_logging.UnifiedAgentUrlFilter, error) {
	result := oci_logging.UnifiedAgentUrlFilter{}
func (s *LoggingUnifiedAgentConfigurationResourceCrud) mapToUnifiedAgentUrlScrapeTarget(fieldKeyFormat string) (oci_logging.UnifiedAgentUrlScrapeTarget, error) {
	result := oci_logging.UnifiedAgentUrlScrapeTarget{}
func (s *LoggingUnifiedAgentConfigurationResourceCrud) mapToUnifiedJsonParser(fieldKeyFormat string) (oci_logging.UnifiedJsonParser, error) {
	result := oci_logging.UnifiedJsonParser{}
func (s *LoggingUnifiedAgentConfigurationResourceCrud) updateCompartment(compartment interface{}) error {
	changeCompartmentRequest := oci_logging.ChangeUnifiedAgentConfigurationCompartmentRequest{}
func criDiffSuppressfunc(k string, old string, new string, d *schema.ResourceData) bool {
	// k = "service_configuration.0.sources.0.parser.0.xxx"

=== ./internal/service/logging/logging_logs_data_source.go ===
func LoggingLogsDataSource() *schema.Resource {
	return &schema.Resource{
func readLoggingLogs(d *schema.ResourceData, m interface{}) error {
	sync := &LoggingLogsDataSourceCrud{}
func (s *LoggingLogsDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *LoggingLogsDataSourceCrud) Get() error {
	request := oci_logging.ListLogsRequest{}
func (s *LoggingLogsDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/logging/logging_log_groups_data_source.go ===
func LoggingLogGroupsDataSource() *schema.Resource {
	return &schema.Resource{
func readLoggingLogGroups(d *schema.ResourceData, m interface{}) error {
	sync := &LoggingLogGroupsDataSourceCrud{}
func (s *LoggingLogGroupsDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *LoggingLogGroupsDataSourceCrud) Get() error {
	request := oci_logging.ListLogGroupsRequest{}
func (s *LoggingLogGroupsDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/logging/logging_export.go ===
func getLogId(resource *tf_export.OCIResource) (string, error) {
	logId, ok := resource.SourceAttributes["id"].(string)
func getLoggingLogId(resource *tf_export.OCIResource) (string, error) {


=== ./internal/service/logging/logging_unified_agent_configurations_data_source.go ===
func LoggingUnifiedAgentConfigurationsDataSource() *schema.Resource {
	return &schema.Resource{
func readLoggingUnifiedAgentConfigurations(d *schema.ResourceData, m interface{}) error {
	sync := &LoggingUnifiedAgentConfigurationsDataSourceCrud{}
func (s *LoggingUnifiedAgentConfigurationsDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *LoggingUnifiedAgentConfigurationsDataSourceCrud) Get() error {
	request := oci_logging.ListUnifiedAgentConfigurationsRequest{}
func (s *LoggingUnifiedAgentConfigurationsDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/logging/logging_log_saved_search_data_source.go ===
func LoggingLogSavedSearchDataSource() *schema.Resource {
	fieldMap := make(map[string]*schema.Schema)
func readSingularLoggingLogSavedSearch(d *schema.ResourceData, m interface{}) error {
	sync := &LoggingLogSavedSearchDataSourceCrud{}
func (s *LoggingLogSavedSearchDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *LoggingLogSavedSearchDataSourceCrud) Get() error {
	request := oci_logging.GetLogSavedSearchRequest{}
func (s *LoggingLogSavedSearchDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/logging/logging_unified_agent_configuration_data_source.go ===
func LoggingUnifiedAgentConfigurationDataSource() *schema.Resource {
	fieldMap := make(map[string]*schema.Schema)
func readSingularLoggingUnifiedAgentConfiguration(d *schema.ResourceData, m interface{}) error {
	sync := &LoggingUnifiedAgentConfigurationDataSourceCrud{}
func (s *LoggingUnifiedAgentConfigurationDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *LoggingUnifiedAgentConfigurationDataSourceCrud) Get() error {
	request := oci_logging.GetUnifiedAgentConfigurationRequest{}
func (s *LoggingUnifiedAgentConfigurationDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/logging/logging_log_group_resource.go ===
func LoggingLogGroupResource() *schema.Resource {
	return &schema.Resource{
func createLoggingLogGroup(d *schema.ResourceData, m interface{}) error {
	sync := &LoggingLogGroupResourceCrud{}
func readLoggingLogGroup(d *schema.ResourceData, m interface{}) error {
	sync := &LoggingLogGroupResourceCrud{}
func updateLoggingLogGroup(d *schema.ResourceData, m interface{}) error {
	sync := &LoggingLogGroupResourceCrud{}
func deleteLoggingLogGroup(d *schema.ResourceData, m interface{}) error {
	sync := &LoggingLogGroupResourceCrud{}
func (s *LoggingLogGroupResourceCrud) ID() string {
	return *s.Res.Id
func (s *LoggingLogGroupResourceCrud) CreatedPending() []string {
	return []string{
func (s *LoggingLogGroupResourceCrud) CreatedTarget() []string {
	return []string{
func (s *LoggingLogGroupResourceCrud) DeletedPending() []string {
	return []string{
func (s *LoggingLogGroupResourceCrud) DeletedTarget() []string {
	return []string{}
func (s *LoggingLogGroupResourceCrud) Create() error {
	request := oci_logging.CreateLogGroupRequest{}
func (s *LoggingLogGroupResourceCrud) getLogGroupFromWorkRequest(workId *string, retryPolicy *oci_common.RetryPolicy,
	actionTypeEnum oci_logging.ActionTypesEnum, timeout time.Duration) error {
func (s *LoggingLogGroupResourceCrud) Get() error {
	request := oci_logging.GetLogGroupRequest{}
func (s *LoggingLogGroupResourceCrud) Update() error {
	if compartment, ok := s.D.GetOkExists("compartment_id"); ok && s.D.HasChange("compartment_id") {
func (s *LoggingLogGroupResourceCrud) Delete() error {
	request := oci_logging.DeleteLogGroupRequest{}
func (s *LoggingLogGroupResourceCrud) SetData() error {
	if s.Res.CompartmentId != nil {
func (s *LoggingLogGroupResourceCrud) updateCompartment(compartment interface{}) error {
	changeCompartmentRequest := oci_logging.ChangeLogGroupCompartmentRequest{}

=== ./internal/service/logging/logging_log_saved_search_resource.go ===
func LoggingLogSavedSearchResource() *schema.Resource {
	return &schema.Resource{
func createLoggingLogSavedSearch(d *schema.ResourceData, m interface{}) error {
	sync := &LoggingLogSavedSearchResourceCrud{}
func readLoggingLogSavedSearch(d *schema.ResourceData, m interface{}) error {
	sync := &LoggingLogSavedSearchResourceCrud{}
func updateLoggingLogSavedSearch(d *schema.ResourceData, m interface{}) error {
	sync := &LoggingLogSavedSearchResourceCrud{}
func deleteLoggingLogSavedSearch(d *schema.ResourceData, m interface{}) error {
	sync := &LoggingLogSavedSearchResourceCrud{}
func (s *LoggingLogSavedSearchResourceCrud) ID() string {
	return *s.Res.Id
func (s *LoggingLogSavedSearchResourceCrud) CreatedPending() []string {
	return []string{
func (s *LoggingLogSavedSearchResourceCrud) CreatedTarget() []string {
	return []string{
func (s *LoggingLogSavedSearchResourceCrud) DeletedPending() []string {
	return []string{
func (s *LoggingLogSavedSearchResourceCrud) DeletedTarget() []string {
	return []string{}
func (s *LoggingLogSavedSearchResourceCrud) UpdatedPending() []string {
	return []string{
func (s *LoggingLogSavedSearchResourceCrud) UpdatedTarget() []string {
	return []string{
func (s *LoggingLogSavedSearchResourceCrud) Create() error {
	request := oci_logging.CreateLogSavedSearchRequest{}
func (s *LoggingLogSavedSearchResourceCrud) Get() error {
	request := oci_logging.GetLogSavedSearchRequest{}
func (s *LoggingLogSavedSearchResourceCrud) Update() error {
	if compartment, ok := s.D.GetOkExists("compartment_id"); ok && s.D.HasChange("compartment_id") {
func (s *LoggingLogSavedSearchResourceCrud) Delete() error {
	request := oci_logging.DeleteLogSavedSearchRequest{}
func (s *LoggingLogSavedSearchResourceCrud) SetData() error {
	if s.Res.CompartmentId != nil {
func (s *LoggingLogSavedSearchResourceCrud) updateCompartment(compartment interface{}) error {
	changeCompartmentRequest := oci_logging.ChangeLogSavedSearchCompartmentRequest{}

=== ./internal/service/logging/register_resource.go ===
func RegisterResource() {
	tfresource.RegisterResource("oci_logging_log", LoggingLogResource())

=== ./internal/service/logging/logging_log_saved_searches_data_source.go ===
func LoggingLogSavedSearchesDataSource() *schema.Resource {
	return &schema.Resource{
func readLoggingLogSavedSearches(d *schema.ResourceData, m interface{}) error {
	sync := &LoggingLogSavedSearchesDataSourceCrud{}
func (s *LoggingLogSavedSearchesDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *LoggingLogSavedSearchesDataSourceCrud) Get() error {
	request := oci_logging.ListLogSavedSearchesRequest{}
func (s *LoggingLogSavedSearchesDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/audit/audit_configuration_data_source.go ===
func AuditConfigurationDataSource() *schema.Resource {
	fieldMap := make(map[string]*schema.Schema)
func readSingularAuditConfiguration(d *schema.ResourceData, m interface{}) error {
	sync := &AuditConfigurationDataSourceCrud{}
func (s *AuditConfigurationDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *AuditConfigurationDataSourceCrud) Get() error {
	request := oci_audit.GetConfigurationRequest{}
func (s *AuditConfigurationDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/audit/audit_events_data_source.go ===
func AuditAuditEventsDataSource() *schema.Resource {
	return &schema.Resource{
func readAuditAuditEvents(d *schema.ResourceData, m interface{}) error {
	sync := &AuditAuditEventsDataSourceCrud{}
func (s *AuditAuditEventsDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *AuditAuditEventsDataSourceCrud) Get() error {
	request := oci_audit.ListEventsRequest{}
func (s *AuditAuditEventsDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/audit/register_resource.go ===
func RegisterResource() {
	tfresource.RegisterResource("oci_audit_configuration", AuditConfigurationResource())

=== ./internal/service/audit/audit_configuration_resource.go ===
func AuditConfigurationResource() *schema.Resource {
	return &schema.Resource{
func createAuditConfiguration(d *schema.ResourceData, m interface{}) error {
	sync := &AuditConfigurationResourceCrud{}
func readAuditConfiguration(d *schema.ResourceData, m interface{}) error {
	sync := &AuditConfigurationResourceCrud{}
func updateAuditConfiguration(d *schema.ResourceData, m interface{}) error {
	sync := &AuditConfigurationResourceCrud{}
func deleteAuditConfiguration(d *schema.ResourceData, m interface{}) error {
	return nil
func (s *AuditConfigurationResourceCrud) ID() string {
	return s.D.Get("compartment_id").(string)
func (s *AuditConfigurationResourceCrud) Create() error {
	// This resource can't actually be created. So treat it as an Update instead.
func (s *AuditConfigurationResourceCrud) Get() error {
	request := oci_audit.GetConfigurationRequest{}
func (s *AuditConfigurationResourceCrud) Update() error {
	request := oci_audit.UpdateConfigurationRequest{}
func (s *AuditConfigurationResourceCrud) SetData() error {
	if s.Res.RetentionPeriodDays != nil {

=== ./internal/service/operator_access_control/operator_access_control_operator_control_assignments_data_source.go ===
func OperatorAccessControlOperatorControlAssignmentsDataSource() *schema.Resource {
	return &schema.Resource{
func readOperatorAccessControlOperatorControlAssignments(d *schema.ResourceData, m interface{}) error {
	sync := &OperatorAccessControlOperatorControlAssignmentsDataSourceCrud{}
func (s *OperatorAccessControlOperatorControlAssignmentsDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *OperatorAccessControlOperatorControlAssignmentsDataSourceCrud) Get() error {
	request := oci_operator_access_control.ListOperatorControlAssignmentsRequest{}
func (s *OperatorAccessControlOperatorControlAssignmentsDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/operator_access_control/operator_access_control_operator_control_data_source.go ===
func OperatorAccessControlOperatorControlDataSource() *schema.Resource {
	fieldMap := make(map[string]*schema.Schema)
func readSingularOperatorAccessControlOperatorControl(d *schema.ResourceData, m interface{}) error {
	sync := &OperatorAccessControlOperatorControlDataSourceCrud{}
func (s *OperatorAccessControlOperatorControlDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *OperatorAccessControlOperatorControlDataSourceCrud) Get() error {
	request := oci_operator_access_control.GetOperatorControlRequest{}
func (s *OperatorAccessControlOperatorControlDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/operator_access_control/operator_access_control_operator_action_data_source.go ===
func OperatorAccessControlOperatorActionDataSource() *schema.Resource {
	return &schema.Resource{
func readSingularOperatorAccessControlOperatorAction(d *schema.ResourceData, m interface{}) error {
	sync := &OperatorAccessControlOperatorActionDataSourceCrud{}
func (s *OperatorAccessControlOperatorActionDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *OperatorAccessControlOperatorActionDataSourceCrud) Get() error {
	request := oci_operator_access_control.GetOperatorActionRequest{}
func (s *OperatorAccessControlOperatorActionDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/operator_access_control/operator_access_control_operator_controls_data_source.go ===
func OperatorAccessControlOperatorControlsDataSource() *schema.Resource {
	return &schema.Resource{
func readOperatorAccessControlOperatorControls(d *schema.ResourceData, m interface{}) error {
	sync := &OperatorAccessControlOperatorControlsDataSourceCrud{}
func (s *OperatorAccessControlOperatorControlsDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *OperatorAccessControlOperatorControlsDataSourceCrud) Get() error {
	request := oci_operator_access_control.ListOperatorControlsRequest{}
func (s *OperatorAccessControlOperatorControlsDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/operator_access_control/operator_access_control_access_request_audit_log_report_data_source.go ===
func OperatorAccessControlAccessRequestAuditLogReportDataSource() *schema.Resource {
	return &schema.Resource{
func readSingularOperatorAccessControlAccessRequestAuditLogReport(d *schema.ResourceData, m interface{}) error {
	sync := &OperatorAccessControlAccessRequestAuditLogReportDataSourceCrud{}
func (s *OperatorAccessControlAccessRequestAuditLogReportDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *OperatorAccessControlAccessRequestAuditLogReportDataSourceCrud) Get() error {
	request := oci_operator_access_control.GetAuditLogReportRequest{}
func (s *OperatorAccessControlAccessRequestAuditLogReportDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/operator_access_control/operator_access_control_access_request_data_source.go ===
func OperatorAccessControlAccessRequestDataSource() *schema.Resource {
	return &schema.Resource{
func readSingularOperatorAccessControlAccessRequest(d *schema.ResourceData, m interface{}) error {
	sync := &OperatorAccessControlAccessRequestDataSourceCrud{}
func (s *OperatorAccessControlAccessRequestDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *OperatorAccessControlAccessRequestDataSourceCrud) Get() error {
	request := oci_operator_access_control.GetAccessRequestRequest{}
func (s *OperatorAccessControlAccessRequestDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/operator_access_control/operator_access_control_operator_control_resource.go ===
func OperatorAccessControlOperatorControlResource() *schema.Resource {
	return &schema.Resource{
func createOperatorAccessControlOperatorControl(d *schema.ResourceData, m interface{}) error {
	sync := &OperatorAccessControlOperatorControlResourceCrud{}
func readOperatorAccessControlOperatorControl(d *schema.ResourceData, m interface{}) error {
	sync := &OperatorAccessControlOperatorControlResourceCrud{}
func updateOperatorAccessControlOperatorControl(d *schema.ResourceData, m interface{}) error {
	sync := &OperatorAccessControlOperatorControlResourceCrud{}
func deleteOperatorAccessControlOperatorControl(d *schema.ResourceData, m interface{}) error {
	sync := &OperatorAccessControlOperatorControlResourceCrud{}
func (s *OperatorAccessControlOperatorControlResourceCrud) ID() string {
	return *s.Res.Id
func (s *OperatorAccessControlOperatorControlResourceCrud) CreatedPending() []string {
	return []string{}
func (s *OperatorAccessControlOperatorControlResourceCrud) CreatedTarget() []string {
	return []string{
func (s *OperatorAccessControlOperatorControlResourceCrud) DeletedPending() []string {
	return []string{}
func (s *OperatorAccessControlOperatorControlResourceCrud) DeletedTarget() []string {
	return []string{
func (s *OperatorAccessControlOperatorControlResourceCrud) Create() error {
	request := oci_operator_access_control.CreateOperatorControlRequest{}
func (s *OperatorAccessControlOperatorControlResourceCrud) Get() error {
	request := oci_operator_access_control.GetOperatorControlRequest{}
func (s *OperatorAccessControlOperatorControlResourceCrud) Update() error {
	if compartment, ok := s.D.GetOkExists("compartment_id"); ok && s.D.HasChange("compartment_id") {
func (s *OperatorAccessControlOperatorControlResourceCrud) Delete() error {
	request := oci_operator_access_control.DeleteOperatorControlRequest{}
func (s *OperatorAccessControlOperatorControlResourceCrud) SetData() error {
	s.D.Set("approval_required_op_action_list", s.Res.ApprovalRequiredOpActionList)
func (s *OperatorAccessControlOperatorControlResourceCrud) updateCompartment(compartment interface{}) error {
	changeCompartmentRequest := oci_operator_access_control.ChangeOperatorControlCompartmentRequest{}

=== ./internal/service/operator_access_control/operator_access_control_operator_control_assignment_resource.go ===
func OperatorAccessControlOperatorControlAssignmentResource() *schema.Resource {
	return &schema.Resource{
func createOperatorAccessControlOperatorControlAssignment(d *schema.ResourceData, m interface{}) error {
	sync := &OperatorAccessControlOperatorControlAssignmentResourceCrud{}
func readOperatorAccessControlOperatorControlAssignment(d *schema.ResourceData, m interface{}) error {
	sync := &OperatorAccessControlOperatorControlAssignmentResourceCrud{}
func updateOperatorAccessControlOperatorControlAssignment(d *schema.ResourceData, m interface{}) error {
	sync := &OperatorAccessControlOperatorControlAssignmentResourceCrud{}
func deleteOperatorAccessControlOperatorControlAssignment(d *schema.ResourceData, m interface{}) error {
	sync := &OperatorAccessControlOperatorControlAssignmentResourceCrud{}
func (s *OperatorAccessControlOperatorControlAssignmentResourceCrud) ID() string {
	return *s.Res.Id
func (s *OperatorAccessControlOperatorControlAssignmentResourceCrud) CreatedPending() []string {
	return []string{string(oci_operator_access_control.OperatorControlAssignmentLifecycleStatesCreated)}
func (s *OperatorAccessControlOperatorControlAssignmentResourceCrud) CreatedTarget() []string {
	return []string{
func (s *OperatorAccessControlOperatorControlAssignmentResourceCrud) UpdatedPending() []string {
	return []string{
func (s *OperatorAccessControlOperatorControlAssignmentResourceCrud) UpdatedTarget() []string {
	return []string{
func (s *OperatorAccessControlOperatorControlAssignmentResourceCrud) DeletedPending() []string {
	return []string{
func (s *OperatorAccessControlOperatorControlAssignmentResourceCrud) DeletedTarget() []string {
	return []string{
func (s *OperatorAccessControlOperatorControlAssignmentResourceCrud) Create() error {
	request := oci_operator_access_control.CreateOperatorControlAssignmentRequest{}
func (s *OperatorAccessControlOperatorControlAssignmentResourceCrud) Get() error {
	request := oci_operator_access_control.GetOperatorControlAssignmentRequest{}
func (s *OperatorAccessControlOperatorControlAssignmentResourceCrud) Update() error {
	if compartment, ok := s.D.GetOkExists("compartment_id"); ok && s.D.HasChange("compartment_id") {
func (s *OperatorAccessControlOperatorControlAssignmentResourceCrud) Delete() error {
	request := oci_operator_access_control.DeleteOperatorControlAssignmentRequest{}
func (s *OperatorAccessControlOperatorControlAssignmentResourceCrud) SetData() error {
	if s.Res.AssignerId != nil {
func (s *OperatorAccessControlOperatorControlAssignmentResourceCrud) ValidateOperatorAssignment() error {
	request := oci_operator_access_control.ValidateOperatorAssignmentRequest{}
func (s *OperatorAccessControlOperatorControlAssignmentResourceCrud) updateCompartment(compartment interface{}) error {
	changeCompartmentRequest := oci_operator_access_control.ChangeOperatorControlAssignmentCompartmentRequest{}

=== ./internal/service/operator_access_control/operator_access_control_access_request_history_data_source.go ===
func OperatorAccessControlAccessRequestHistoryDataSource() *schema.Resource {
	return &schema.Resource{
func readSingularOperatorAccessControlAccessRequestHistory(d *schema.ResourceData, m interface{}) error {
	sync := &OperatorAccessControlAccessRequestHistoryDataSourceCrud{}
func (s *OperatorAccessControlAccessRequestHistoryDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *OperatorAccessControlAccessRequestHistoryDataSourceCrud) Get() error {
	request := oci_operator_access_control.ListAccessRequestHistoriesRequest{}
func (s *OperatorAccessControlAccessRequestHistoryDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/operator_access_control/operator_access_control_operator_control_assignment_data_source.go ===
func OperatorAccessControlOperatorControlAssignmentDataSource() *schema.Resource {
	fieldMap := make(map[string]*schema.Schema)
func readSingularOperatorAccessControlOperatorControlAssignment(d *schema.ResourceData, m interface{}) error {
	sync := &OperatorAccessControlOperatorControlAssignmentDataSourceCrud{}
func (s *OperatorAccessControlOperatorControlAssignmentDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *OperatorAccessControlOperatorControlAssignmentDataSourceCrud) Get() error {
	request := oci_operator_access_control.GetOperatorControlAssignmentRequest{}
func (s *OperatorAccessControlOperatorControlAssignmentDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/operator_access_control/operator_access_control_access_requests_data_source.go ===
func OperatorAccessControlAccessRequestsDataSource() *schema.Resource {
	return &schema.Resource{
func readOperatorAccessControlAccessRequests(d *schema.ResourceData, m interface{}) error {
	sync := &OperatorAccessControlAccessRequestsDataSourceCrud{}
func (s *OperatorAccessControlAccessRequestsDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *OperatorAccessControlAccessRequestsDataSourceCrud) Get() error {
	request := oci_operator_access_control.ListAccessRequestsRequest{}
func (s *OperatorAccessControlAccessRequestsDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/operator_access_control/register_resource.go ===
func RegisterResource() {
	tfresource.RegisterResource("oci_operator_access_control_operator_control", OperatorAccessControlOperatorControlResource())

=== ./internal/service/operator_access_control/operator_access_control_operator_actions_data_source.go ===
func OperatorAccessControlOperatorActionsDataSource() *schema.Resource {
	return &schema.Resource{
func readOperatorAccessControlOperatorActions(d *schema.ResourceData, m interface{}) error {
	sync := &OperatorAccessControlOperatorActionsDataSourceCrud{}
func (s *OperatorAccessControlOperatorActionsDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *OperatorAccessControlOperatorActionsDataSourceCrud) Get() error {
	request := oci_operator_access_control.ListOperatorActionsRequest{}
func (s *OperatorAccessControlOperatorActionsDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/core/core_drg_route_table_resource.go ===
func CoreDrgRouteTableResource() *schema.Resource {
	return &schema.Resource{
func createCoreDrgRouteTable(d *schema.ResourceData, m interface{}) error {
	sync := &CoreDrgRouteTableResourceCrud{}
func readCoreDrgRouteTable(d *schema.ResourceData, m interface{}) error {
	sync := &CoreDrgRouteTableResourceCrud{}
func updateCoreDrgRouteTable(d *schema.ResourceData, m interface{}) error {
	sync := &CoreDrgRouteTableResourceCrud{}
func deleteCoreDrgRouteTable(d *schema.ResourceData, m interface{}) error {
	sync := &CoreDrgRouteTableResourceCrud{}
func (s *CoreDrgRouteTableResourceCrud) ID() string {
	return *s.Res.Id
func (s *CoreDrgRouteTableResourceCrud) CreatedPending() []string {
	return []string{
func (s *CoreDrgRouteTableResourceCrud) CreatedTarget() []string {
	return []string{
func (s *CoreDrgRouteTableResourceCrud) DeletedPending() []string {
	return []string{
func (s *CoreDrgRouteTableResourceCrud) DeletedTarget() []string {
	return []string{
func (s *CoreDrgRouteTableResourceCrud) Create() error {
	request := oci_core.CreateDrgRouteTableRequest{}
func (s *CoreDrgRouteTableResourceCrud) Get() error {
	request := oci_core.GetDrgRouteTableRequest{}
func (s *CoreDrgRouteTableResourceCrud) Update() error {
	request := oci_core.UpdateDrgRouteTableRequest{}
func (s *CoreDrgRouteTableResourceCrud) RemoveImportRouteDistribution() error {
	request := oci_core.RemoveImportDrgRouteDistributionRequest{}
func (s *CoreDrgRouteTableResourceCrud) Delete() error {
	request := oci_core.DeleteDrgRouteTableRequest{}
func (s *CoreDrgRouteTableResourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/core/core_security_list_resource.go ===
func CoreSecurityListResource() *schema.Resource {
	return &schema.Resource{
func createCoreSecurityList(d *schema.ResourceData, m interface{}) error {
	sync := &CoreSecurityListResourceCrud{}
func readCoreSecurityList(d *schema.ResourceData, m interface{}) error {
	sync := &CoreSecurityListResourceCrud{}
func updateCoreSecurityList(d *schema.ResourceData, m interface{}) error {
	sync := &CoreSecurityListResourceCrud{}
func deleteCoreSecurityList(d *schema.ResourceData, m interface{}) error {
	sync := &CoreSecurityListResourceCrud{}
func (s *CoreSecurityListResourceCrud) ID() string {
	return *s.Res.Id
func (s *CoreSecurityListResourceCrud) CreatedPending() []string {
	return []string{
func (s *CoreSecurityListResourceCrud) CreatedTarget() []string {
	return []string{
func (s *CoreSecurityListResourceCrud) DeletedPending() []string {
	return []string{
func (s *CoreSecurityListResourceCrud) DeletedTarget() []string {
	return []string{
func (s *CoreSecurityListResourceCrud) Create() error {
	request := oci_core.CreateSecurityListRequest{}
func (s *CoreSecurityListResourceCrud) Get() error {
	request := oci_core.GetSecurityListRequest{}
func (s *CoreSecurityListResourceCrud) Update() error {
	if compartment, ok := s.D.GetOkExists("compartment_id"); ok && s.D.HasChange("compartment_id") {
func (s *CoreSecurityListResourceCrud) Delete() error {
	request := oci_core.DeleteSecurityListRequest{}
func (s *CoreSecurityListResourceCrud) SetData() error {
	if s.Res.CompartmentId != nil {
func (s *CoreSecurityListResourceCrud) mapToEgressSecurityRule(fieldKeyFormat string) (oci_core.EgressSecurityRule, error) {
	result := oci_core.EgressSecurityRule{}
func (s *CoreSecurityListResourceCrud) mapToIcmpOptions(fieldKeyFormat string) (oci_core.IcmpOptions, error) {
	result := oci_core.IcmpOptions{}
func (s *CoreSecurityListResourceCrud) mapToIngressSecurityRule(fieldKeyFormat string) (oci_core.IngressSecurityRule, error) {
	result := oci_core.IngressSecurityRule{}
func (s *CoreSecurityListResourceCrud) mapToPortRange(fieldKeyFormat string) (oci_core.PortRange, error) {
	result := oci_core.PortRange{}
func (s *CoreSecurityListResourceCrud) mapToTcpOptions(fieldKeyFormat string) (oci_core.TcpOptions, error) {
	result := oci_core.TcpOptions{}
func (s *CoreSecurityListResourceCrud) mapToUdpOptions(fieldKeyFormat string) (oci_core.UdpOptions, error) {
	result := oci_core.UdpOptions{}
func (s *CoreSecurityListResourceCrud) updateCompartment(compartment interface{}) error {
	changeCompartmentRequest := oci_core.ChangeSecurityListCompartmentRequest{}

=== ./internal/service/core/core_drg_route_tables_data_source.go ===
func CoreDrgRouteTablesDataSource() *schema.Resource {
	return &schema.Resource{
func readCoreDrgRouteTables(d *schema.ResourceData, m interface{}) error {
	sync := &CoreDrgRouteTablesDataSourceCrud{}
func (s *CoreDrgRouteTablesDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *CoreDrgRouteTablesDataSourceCrud) Get() error {
	request := oci_core.ListDrgRouteTablesRequest{}
func (s *CoreDrgRouteTablesDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/core/core_local_peering_gateways_data_source.go ===
func CoreLocalPeeringGatewaysDataSource() *schema.Resource {
	return &schema.Resource{
func readCoreLocalPeeringGateways(d *schema.ResourceData, m interface{}) error {
	sync := &CoreLocalPeeringGatewaysDataSourceCrud{}
func (s *CoreLocalPeeringGatewaysDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *CoreLocalPeeringGatewaysDataSourceCrud) Get() error {
	request := oci_core.ListLocalPeeringGatewaysRequest{}
func (s *CoreLocalPeeringGatewaysDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/core/core_private_ips_data_source.go ===
func CorePrivateIpsDataSource() *schema.Resource {
	return &schema.Resource{
func readCorePrivateIps(d *schema.ResourceData, m interface{}) error {
	sync := &CorePrivateIpsDataSourceCrud{}
func (s *CorePrivateIpsDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *CorePrivateIpsDataSourceCrud) Get() error {
	request := oci_core.ListPrivateIpsRequest{}
func (s *CorePrivateIpsDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/core/core_boot_volume_attachments_data_source.go ===
func CoreBootVolumeAttachmentsDataSource() *schema.Resource {
	return &schema.Resource{
func readCoreBootVolumeAttachments(d *schema.ResourceData, m interface{}) error {
	sync := &CoreBootVolumeAttachmentsDataSourceCrud{}
func (s *CoreBootVolumeAttachmentsDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *CoreBootVolumeAttachmentsDataSourceCrud) Get() error {
	request := oci_core.ListBootVolumeAttachmentsRequest{}
func (s *CoreBootVolumeAttachmentsDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/core/core_ip_inventory_subnet_cidr_data_source.go ===
func CoreIpInventorySubnetCidrDataSource() *schema.Resource {
	return &schema.Resource{
func readSingularCoreIpInventorySubnetCidr(d *schema.ResourceData, m interface{}) error {
	sync := &CoreIpInventorySubnetCidrDataSourceCrud{}
func (s *CoreIpInventorySubnetCidrDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *CoreIpInventorySubnetCidrDataSourceCrud) Get() error {
	request := oci_core.GetSubnetCidrUtilizationRequest{}
func (s *CoreIpInventorySubnetCidrDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/core/core_peer_region_for_remote_peerings_data_source.go ===
func CorePeerRegionForRemotePeeringsDataSource() *schema.Resource {
	return &schema.Resource{
func readCorePeerRegionForRemotePeerings(d *schema.ResourceData, m interface{}) error {
	sync := &CorePeerRegionForRemotePeeringsDataSourceCrud{}
func (s *CorePeerRegionForRemotePeeringsDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *CorePeerRegionForRemotePeeringsDataSourceCrud) Get() error {
	request := oci_core.ListAllowedPeerRegionsForRemotePeeringRequest{}
func (s *CorePeerRegionForRemotePeeringsDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/core/core_console_history_resource.go ===
func CoreConsoleHistoryResource() *schema.Resource {
	return &schema.Resource{
func createCoreConsoleHistory(d *schema.ResourceData, m interface{}) error {
	sync := &CoreConsoleHistoryResourceCrud{}
func readCoreConsoleHistory(d *schema.ResourceData, m interface{}) error {
	sync := &CoreConsoleHistoryResourceCrud{}
func updateCoreConsoleHistory(d *schema.ResourceData, m interface{}) error {
	sync := &CoreConsoleHistoryResourceCrud{}
func deleteCoreConsoleHistory(d *schema.ResourceData, m interface{}) error {
	sync := &CoreConsoleHistoryResourceCrud{}
func (s *CoreConsoleHistoryResourceCrud) ID() string {
	return *s.Res.Id
func (s *CoreConsoleHistoryResourceCrud) CreatedPending() []string {
	return []string{
func (s *CoreConsoleHistoryResourceCrud) CreatedTarget() []string {
	return []string{
func (s *CoreConsoleHistoryResourceCrud) Create() error {
	request := oci_core.CaptureConsoleHistoryRequest{}
func (s *CoreConsoleHistoryResourceCrud) Get() error {
	request := oci_core.GetConsoleHistoryRequest{}
func (s *CoreConsoleHistoryResourceCrud) Update() error {
	request := oci_core.UpdateConsoleHistoryRequest{}
func (s *CoreConsoleHistoryResourceCrud) Delete() error {
	request := oci_core.DeleteConsoleHistoryRequest{}
func (s *CoreConsoleHistoryResourceCrud) SetData() error {
	if s.Res.AvailabilityDomain != nil {

=== ./internal/service/core/core_vcns_data_source.go ===
func CoreVcnsDataSource() *schema.Resource {
	return &schema.Resource{
func readCoreVcns(d *schema.ResourceData, m interface{}) error {
	sync := &CoreVcnsDataSourceCrud{}
func (s *CoreVcnsDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *CoreVcnsDataSourceCrud) Get() error {
	request := oci_core.ListVcnsRequest{}
func (s *CoreVcnsDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/core/core_network_security_group_vnics_data_source.go ===
func CoreNetworkSecurityGroupVnicsDataSource() *schema.Resource {
	return &schema.Resource{
func readCoreNetworkSecurityGroupVnics(d *schema.ResourceData, m interface{}) error {
	sync := &CoreNetworkSecurityGroupVnicsDataSourceCrud{}
func (s *CoreNetworkSecurityGroupVnicsDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *CoreNetworkSecurityGroupVnicsDataSourceCrud) Get() error {
	request := oci_core.ListNetworkSecurityGroupVnicsRequest{}
func (s *CoreNetworkSecurityGroupVnicsDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/core/core_route_table_resource.go ===
func CoreRouteTableResource() *schema.Resource {
	return &schema.Resource{
func createCoreRouteTable(d *schema.ResourceData, m interface{}) error {
	sync := &CoreRouteTableResourceCrud{}
func readCoreRouteTable(d *schema.ResourceData, m interface{}) error {
	sync := &CoreRouteTableResourceCrud{}
func updateCoreRouteTable(d *schema.ResourceData, m interface{}) error {
	sync := &CoreRouteTableResourceCrud{}
func deleteCoreRouteTable(d *schema.ResourceData, m interface{}) error {
	sync := &CoreRouteTableResourceCrud{}
func (s *CoreRouteTableResourceCrud) ID() string {
	return *s.Res.Id
func (s *CoreRouteTableResourceCrud) CreatedPending() []string {
	return []string{
func (s *CoreRouteTableResourceCrud) CreatedTarget() []string {
	return []string{
func (s *CoreRouteTableResourceCrud) DeletedPending() []string {
	return []string{
func (s *CoreRouteTableResourceCrud) DeletedTarget() []string {
	return []string{
func (s *CoreRouteTableResourceCrud) Create() error {
	request := oci_core.CreateRouteTableRequest{}
func (s *CoreRouteTableResourceCrud) Get() error {
	request := oci_core.GetRouteTableRequest{}
func (s *CoreRouteTableResourceCrud) Update() error {
	if compartment, ok := s.D.GetOkExists("compartment_id"); ok && s.D.HasChange("compartment_id") {
func (s *CoreRouteTableResourceCrud) Delete() error {
	request := oci_core.DeleteRouteTableRequest{}
func (s *CoreRouteTableResourceCrud) SetData() error {
	if s.Res.CompartmentId != nil {
func (s *CoreRouteTableResourceCrud) mapToRouteRule(fieldKeyFormat string) (oci_core.RouteRule, error) {
	result := oci_core.RouteRule{}
func (s *CoreRouteTableResourceCrud) updateCompartment(compartment interface{}) error {
	changeCompartmentRequest := oci_core.ChangeRouteTableCompartmentRequest{}

=== ./internal/service/core/core_cross_connect_group_resource.go ===
func CoreCrossConnectGroupResource() *schema.Resource {
	return &schema.Resource{
func createCoreCrossConnectGroup(d *schema.ResourceData, m interface{}) error {
	sync := &CoreCrossConnectGroupResourceCrud{}
func readCoreCrossConnectGroup(d *schema.ResourceData, m interface{}) error {
	sync := &CoreCrossConnectGroupResourceCrud{}
func updateCoreCrossConnectGroup(d *schema.ResourceData, m interface{}) error {
	sync := &CoreCrossConnectGroupResourceCrud{}
func deleteCoreCrossConnectGroup(d *schema.ResourceData, m interface{}) error {
	sync := &CoreCrossConnectGroupResourceCrud{}
func (s *CoreCrossConnectGroupResourceCrud) ID() string {
	return *s.Res.Id
func (s *CoreCrossConnectGroupResourceCrud) CreatedPending() []string {
	return []string{
func (s *CoreCrossConnectGroupResourceCrud) CreatedTarget() []string {
	return []string{
func (s *CoreCrossConnectGroupResourceCrud) DeletedPending() []string {
	return []string{
func (s *CoreCrossConnectGroupResourceCrud) DeletedTarget() []string {
	return []string{
func (s *CoreCrossConnectGroupResourceCrud) UpdatedPending() []string {
	return []string{
func (s *CoreCrossConnectGroupResourceCrud) UpdatedTarget() []string {
	return []string{
func (s *CoreCrossConnectGroupResourceCrud) Create() error {
	request := oci_core.CreateCrossConnectGroupRequest{}
func (s *CoreCrossConnectGroupResourceCrud) Get() error {
	request := oci_core.GetCrossConnectGroupRequest{}
func (s *CoreCrossConnectGroupResourceCrud) Update() error {
	if compartment, ok := s.D.GetOkExists("compartment_id"); ok && s.D.HasChange("compartment_id") {
func (s *CoreCrossConnectGroupResourceCrud) Delete() error {
	request := oci_core.DeleteCrossConnectGroupRequest{}
func (s *CoreCrossConnectGroupResourceCrud) SetData() error {
	if s.Res.CompartmentId != nil {
func (s *CoreCrossConnectGroupResourceCrud) mapToCreateMacsecKey(fieldKeyFormat string) (oci_core.CreateMacsecKey, error) {
	result := oci_core.CreateMacsecKey{}
func (s *CoreCrossConnectGroupResourceCrud) mapToUpdateMacsecKey(fieldKeyFormat string) (oci_core.UpdateMacsecKey, error) {
	result := oci_core.UpdateMacsecKey{}
func (s *CoreCrossConnectGroupResourceCrud) mapToCreateMacsecProperties(fieldKeyFormat string) (oci_core.CreateMacsecProperties, error) {
	result := oci_core.CreateMacsecProperties{}
func (s *CoreCrossConnectGroupResourceCrud) mapToUpdateMacsecProperties(fieldKeyFormat string) (oci_core.UpdateMacsecProperties, error) {
	result := oci_core.UpdateMacsecProperties{}
func (s *CoreCrossConnectGroupResourceCrud) updateCompartment(compartment interface{}) error {
	changeCompartmentRequest := oci_core.ChangeCrossConnectGroupCompartmentRequest{}

=== ./internal/service/core/core_security_list_default_resource.go ===
func CoreDefaultSecurityListResource() *schema.Resource {
	defaultResourceSchema := ConvertToDefaultVcnResourceSchema(CoreSecurityListResource())
func createDefaultSecurityList(d *schema.ResourceData, m interface{}) error {
	sync := &DefaultSecurityListResourceCrud{}
func deleteDefaultSecurityList(d *schema.ResourceData, m interface{}) error {
	sync := &DefaultSecurityListResourceCrud{}
func (s *DefaultSecurityListResourceCrud) Create() error {
	// If we are creating a default resource, then don't have to
func (s *DefaultSecurityListResourceCrud) reset() error {
	request := oci_core.UpdateSecurityListRequest{}
func (s *DefaultSecurityListResourceCrud) Delete() error {
	if _, ok := s.D.GetOkExists("manage_default_resource_id"); ok {
func (s *DefaultSecurityListResourceCrud) DeletedPending() []string {
	return s.CreatedTarget()
func (s *DefaultSecurityListResourceCrud) DeletedTarget() []string {
	return s.CreatedTarget()

=== ./internal/service/core/core_ipv6_resource.go ===
func CoreIpv6Resource() *schema.Resource {
	return &schema.Resource{
func createCoreIpv6(d *schema.ResourceData, m interface{}) error {
	sync := &CoreIpv6ResourceCrud{}
func readCoreIpv6(d *schema.ResourceData, m interface{}) error {
	sync := &CoreIpv6ResourceCrud{}
func updateCoreIpv6(d *schema.ResourceData, m interface{}) error {
	sync := &CoreIpv6ResourceCrud{}
func deleteCoreIpv6(d *schema.ResourceData, m interface{}) error {
	sync := &CoreIpv6ResourceCrud{}
func (s *CoreIpv6ResourceCrud) ID() string {
	return *s.Res.Id
func (s *CoreIpv6ResourceCrud) CreatedPending() []string {
	return []string{
func (s *CoreIpv6ResourceCrud) CreatedTarget() []string {
	return []string{
func (s *CoreIpv6ResourceCrud) DeletedPending() []string {
	return []string{
func (s *CoreIpv6ResourceCrud) DeletedTarget() []string {
	return []string{
func (s *CoreIpv6ResourceCrud) Create() error {
	request := oci_core.CreateIpv6Request{}
func (s *CoreIpv6ResourceCrud) Get() error {
	request := oci_core.GetIpv6Request{}
func (s *CoreIpv6ResourceCrud) Update() error {
	request := oci_core.UpdateIpv6Request{}
func (s *CoreIpv6ResourceCrud) Delete() error {
	request := oci_core.DeleteIpv6Request{}
func (s *CoreIpv6ResourceCrud) SetData() error {
	if s.Res.CompartmentId != nil {

=== ./internal/service/core/core_virtual_circuit_public_prefixes_data_source.go ===
func CoreVirtualCircuitPublicPrefixesDataSource() *schema.Resource {
	return &schema.Resource{
func readCoreVirtualCircuitPublicPrefixes(d *schema.ResourceData, m interface{}) error {
	sync := &CoreVirtualCircuitPublicPrefixesDataSourceCrud{}
func (s *CoreVirtualCircuitPublicPrefixesDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *CoreVirtualCircuitPublicPrefixesDataSourceCrud) Get() error {
	request := oci_core.ListVirtualCircuitPublicPrefixesRequest{}
func (s *CoreVirtualCircuitPublicPrefixesDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/core/core_compute_capacity_reservations_data_source.go ===
func CoreComputeCapacityReservationsDataSource() *schema.Resource {
	return &schema.Resource{
func readCoreComputeCapacityReservations(d *schema.ResourceData, m interface{}) error {
	sync := &CoreComputeCapacityReservationsDataSourceCrud{}
func (s *CoreComputeCapacityReservationsDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *CoreComputeCapacityReservationsDataSourceCrud) Get() error {
	request := oci_core.ListComputeCapacityReservationsRequest{}
func (s *CoreComputeCapacityReservationsDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/core/core_instance_maintenance_event_data_source.go ===
func CoreInstanceMaintenanceEventDataSource() *schema.Resource {
	fieldMap := make(map[string]*schema.Schema)
func readSingularCoreInstanceMaintenanceEvent(d *schema.ResourceData, m interface{}) error {
	sync := &CoreInstanceMaintenanceEventDataSourceCrud{}
func (s *CoreInstanceMaintenanceEventDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *CoreInstanceMaintenanceEventDataSourceCrud) Get() error {
	request := oci_core.GetInstanceMaintenanceEventRequest{}
func (s *CoreInstanceMaintenanceEventDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/core/core_boot_volume_backup_data_source.go ===
func CoreBootVolumeBackupDataSource() *schema.Resource {
	fieldMap := make(map[string]*schema.Schema)
func readSingularCoreBootVolumeBackup(d *schema.ResourceData, m interface{}) error {
	sync := &CoreBootVolumeBackupDataSourceCrud{}
func (s *CoreBootVolumeBackupDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *CoreBootVolumeBackupDataSourceCrud) Get() error {
	request := oci_core.GetBootVolumeBackupRequest{}
func (s *CoreBootVolumeBackupDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/core/core_drg_route_table_route_rules_data_source.go ===
func CoreDrgRouteTableRouteRulesDataSource() *schema.Resource {
	return &schema.Resource{
func readCoreDrgRouteTableRouteRules(d *schema.ResourceData, m interface{}) error {
	sync := &CoreDrgRouteTableRouteRulesDataSourceCrud{}
func (s *CoreDrgRouteTableRouteRulesDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *CoreDrgRouteTableRouteRulesDataSourceCrud) Get() error {
	request := oci_core.ListDrgRouteRulesRequest{}
func (s *CoreDrgRouteTableRouteRulesDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/core/core_instances_data_source.go ===
func CoreInstancesDataSource() *schema.Resource {
	return &schema.Resource{
func readCoreInstances(d *schema.ResourceData, m interface{}) error {
	sync := &CoreInstancesDataSourceCrud{}
func (s *CoreInstancesDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *CoreInstancesDataSourceCrud) Get() error {
	request := oci_core.ListInstancesRequest{}
func (s *CoreInstancesDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/core/core_instance_pool_instances_data_source.go ===
func CoreInstancePoolInstancesDataSource() *schema.Resource {
	return &schema.Resource{
func readCoreInstancePoolInstances(d *schema.ResourceData, m interface{}) error {
	sync := &CoreInstancePoolInstancesDataSourceCrud{}
func (s *CoreInstancePoolInstancesDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *CoreInstancePoolInstancesDataSourceCrud) Get() error {
	request := oci_core.ListInstancePoolInstancesRequest{}
func (s *CoreInstancePoolInstancesDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/core/core_cross_connect_group_data_source.go ===
func CoreCrossConnectGroupDataSource() *schema.Resource {
	fieldMap := make(map[string]*schema.Schema)
func readSingularCoreCrossConnectGroup(d *schema.ResourceData, m interface{}) error {
	sync := &CoreCrossConnectGroupDataSourceCrud{}
func (s *CoreCrossConnectGroupDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *CoreCrossConnectGroupDataSourceCrud) Get() error {
	request := oci_core.GetCrossConnectGroupRequest{}
func (s *CoreCrossConnectGroupDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/core/core_volume_backup_policy_assignment_resource.go ===
func CoreVolumeBackupPolicyAssignmentResource() *schema.Resource {
	return &schema.Resource{
func createCoreVolumeBackupPolicyAssignment(d *schema.ResourceData, m interface{}) error {
	sync := &CoreVolumeBackupPolicyAssignmentResourceCrud{}
func readCoreVolumeBackupPolicyAssignment(d *schema.ResourceData, m interface{}) error {
	sync := &CoreVolumeBackupPolicyAssignmentResourceCrud{}
func deleteCoreVolumeBackupPolicyAssignment(d *schema.ResourceData, m interface{}) error {
	sync := &CoreVolumeBackupPolicyAssignmentResourceCrud{}
func (s *CoreVolumeBackupPolicyAssignmentResourceCrud) ID() string {
	return *s.Res.Id
func (s *CoreVolumeBackupPolicyAssignmentResourceCrud) Create() error {
	request := oci_core.CreateVolumeBackupPolicyAssignmentRequest{}
func (s *CoreVolumeBackupPolicyAssignmentResourceCrud) Get() error {
	request := oci_core.GetVolumeBackupPolicyAssignmentRequest{}
func (s *CoreVolumeBackupPolicyAssignmentResourceCrud) Delete() error {
	request := oci_core.DeleteVolumeBackupPolicyAssignmentRequest{}
func (s *CoreVolumeBackupPolicyAssignmentResourceCrud) SetData() error {
	if s.Res.AssetId != nil {

=== ./internal/service/core/core_instance_configuration_resource.go ===
func CoreInstanceConfigurationResource() *schema.Resource {
	return &schema.Resource{
func createCoreInstanceConfiguration(d *schema.ResourceData, m interface{}) error {
	sync := &CoreInstanceConfigurationResourceCrud{}
func readCoreInstanceConfiguration(d *schema.ResourceData, m interface{}) error {
	sync := &CoreInstanceConfigurationResourceCrud{}
func updateCoreInstanceConfiguration(d *schema.ResourceData, m interface{}) error {
	sync := &CoreInstanceConfigurationResourceCrud{}
func deleteCoreInstanceConfiguration(d *schema.ResourceData, m interface{}) error {
	sync := &CoreInstanceConfigurationResourceCrud{}
func (s *CoreInstanceConfigurationResourceCrud) ID() string {
	return *s.Res.Id
func (s *CoreInstanceConfigurationResourceCrud) Create() error {
	request := oci_core.CreateInstanceConfigurationRequest{}
func (s *CoreInstanceConfigurationResourceCrud) Get() error {
	request := oci_core.GetInstanceConfigurationRequest{}
func (s *CoreInstanceConfigurationResourceCrud) Update() error {
	if compartment, ok := s.D.GetOkExists("compartment_id"); ok && s.D.HasChange("compartment_id") {
func (s *CoreInstanceConfigurationResourceCrud) Delete() error {
	request := oci_core.DeleteInstanceConfigurationRequest{}
func (s *CoreInstanceConfigurationResourceCrud) SetData() error {
	if s.Res.CompartmentId != nil {
func (s *CoreInstanceConfigurationResourceCrud) mapToComputeInstanceDetails(fieldKeyFormat string) (oci_core.ComputeInstanceDetails, error) {
	result := oci_core.ComputeInstanceDetails{}
func (s *CoreInstanceConfigurationResourceCrud) mapToInstanceAgentPluginConfigDetails(fieldKeyFormat string) (oci_core.InstanceAgentPluginConfigDetails, error) {
	result := oci_core.InstanceAgentPluginConfigDetails{}
func (s *CoreInstanceConfigurationResourceCrud) mapToInstanceConfigurationAttachVnicDetails(fieldKeyFormat string) (oci_core.InstanceConfigurationAttachVnicDetails, error) {
	result := oci_core.InstanceConfigurationAttachVnicDetails{}
func (s *CoreInstanceConfigurationResourceCrud) mapToInstanceConfigurationAttachVolumeDetails(fieldKeyFormat string) (oci_core.InstanceConfigurationAttachVolumeDetails, error) {
	var baseObject oci_core.InstanceConfigurationAttachVolumeDetails
func (s *CoreInstanceConfigurationResourceCrud) mapToInstanceConfigurationAutotunePolicy(fieldKeyFormat string) (oci_core.InstanceConfigurationAutotunePolicy, error) {
	var baseObject oci_core.InstanceConfigurationAutotunePolicy
func (s *CoreInstanceConfigurationResourceCrud) mapToInstanceConfigurationAvailabilityConfig(fieldKeyFormat string) (oci_core.InstanceConfigurationAvailabilityConfig, error) {
	result := oci_core.InstanceConfigurationAvailabilityConfig{}
func (s *CoreInstanceConfigurationResourceCrud) mapToInstanceConfigurationBlockVolumeDetails(fieldKeyFormat string) (oci_core.InstanceConfigurationBlockVolumeDetails, error) {
	result := oci_core.InstanceConfigurationBlockVolumeDetails{}
func (s *CoreInstanceConfigurationResourceCrud) mapToInstanceConfigurationBlockVolumeReplicaDetails(fieldKeyFormat string) (oci_core.InstanceConfigurationBlockVolumeReplicaDetails, error) {
	result := oci_core.InstanceConfigurationBlockVolumeReplicaDetails{}
func (s *CoreInstanceConfigurationResourceCrud) mapToInstanceConfigurationCreateVnicDetails(fieldKeyFormat string) (oci_core.InstanceConfigurationCreateVnicDetails, error) {
	result := oci_core.InstanceConfigurationCreateVnicDetails{}
func (s *CoreInstanceConfigurationResourceCrud) mapToInstanceConfigurationCreateVolumeDetails(fieldKeyFormat string) (oci_core.InstanceConfigurationCreateVolumeDetails, error) {
	result := oci_core.InstanceConfigurationCreateVolumeDetails{}
func (s *CoreInstanceConfigurationResourceCrud) mapToInstanceConfigurationInstanceDetails(fieldKeyFormat string) (oci_core.InstanceConfigurationInstanceDetails, error) {
	var baseObject oci_core.InstanceConfigurationInstanceDetails
func (s *CoreInstanceConfigurationResourceCrud) mapToInstanceConfigurationInstanceOptions(fieldKeyFormat string) (oci_core.InstanceConfigurationInstanceOptions, error) {
	result := oci_core.InstanceConfigurationInstanceOptions{}
func (s *CoreInstanceConfigurationResourceCrud) mapToInstanceConfigurationInstanceSourceDetails(fieldKeyFormat string) (oci_core.InstanceConfigurationInstanceSourceDetails, error) {
	var baseObject oci_core.InstanceConfigurationInstanceSourceDetails
func (s *CoreInstanceConfigurationResourceCrud) mapToInstanceConfigurationInstanceSourceImageFilterDetails(fieldKeyFormat string) (oci_core.InstanceConfigurationInstanceSourceImageFilterDetails, error) {
	result := oci_core.InstanceConfigurationInstanceSourceImageFilterDetails{}
func (s *CoreInstanceConfigurationResourceCrud) mapToInstanceConfigurationIpv6AddressIpv6SubnetCidrPairDetails(fieldKeyFormat string) (oci_core.InstanceConfigurationIpv6AddressIpv6SubnetCidrPairDetails, error) {
	result := oci_core.InstanceConfigurationIpv6AddressIpv6SubnetCidrPairDetails{}
func (s *CoreInstanceConfigurationResourceCrud) mapToInstanceConfigurationLaunchInstanceAgentConfigDetails(fieldKeyFormat string) (oci_core.InstanceConfigurationLaunchInstanceAgentConfigDetails, error) {
	result := oci_core.InstanceConfigurationLaunchInstanceAgentConfigDetails{}
func (s *CoreInstanceConfigurationResourceCrud) mapToInstanceConfigurationLaunchInstanceDetails(fieldKeyFormat string) (oci_core.InstanceConfigurationLaunchInstanceDetails, error) {
	result := oci_core.InstanceConfigurationLaunchInstanceDetails{}
func (s *CoreInstanceConfigurationResourceCrud) mapToInstanceConfigurationLaunchInstancePlatformConfig(fieldKeyFormat string) (oci_core.InstanceConfigurationLaunchInstancePlatformConfig, error) {
	var baseObject oci_core.InstanceConfigurationLaunchInstancePlatformConfig
func (s *CoreInstanceConfigurationResourceCrud) mapToInstanceConfigurationLaunchInstanceShapeConfigDetails(fieldKeyFormat string) (oci_core.InstanceConfigurationLaunchInstanceShapeConfigDetails, error) {
	result := oci_core.InstanceConfigurationLaunchInstanceShapeConfigDetails{}
func (s *CoreInstanceConfigurationResourceCrud) mapToInstanceConfigurationLaunchOptions(fieldKeyFormat string) (oci_core.InstanceConfigurationLaunchOptions, error) {
	result := oci_core.InstanceConfigurationLaunchOptions{}
func (s *CoreInstanceConfigurationResourceCrud) mapToInstanceConfigurationVolumeSourceDetails(fieldKeyFormat string) (oci_core.InstanceConfigurationVolumeSourceDetails, error) {
	var baseObject oci_core.InstanceConfigurationVolumeSourceDetails
func (s *CoreInstanceConfigurationResourceCrud) mapToPreemptibleInstanceConfigDetails(fieldKeyFormat string) (oci_core.PreemptibleInstanceConfigDetails, error) {
	result := oci_core.PreemptibleInstanceConfigDetails{}
func (s *CoreInstanceConfigurationResourceCrud) mapToPreemptionAction(fieldKeyFormat string) (oci_core.PreemptionAction, error) {
	var baseObject oci_core.PreemptionAction
func (s *CoreInstanceConfigurationResourceCrud) populateTopLevelPolymorphicCreateInstanceConfigurationRequest(request *oci_core.CreateInstanceConfigurationRequest) error {
	//discriminator
func (s *CoreInstanceConfigurationResourceCrud) updateCompartment(compartment interface{}) error {
	changeCompartmentRequest := oci_core.ChangeInstanceConfigurationCompartmentRequest{}

=== ./internal/service/core/core_block_volume_replica_data_source.go ===
func CoreBlockVolumeReplicaDataSource() *schema.Resource {
	return &schema.Resource{
func readSingularCoreBlockVolumeReplica(d *schema.ResourceData, m interface{}) error {
	sync := &CoreBlockVolumeReplicaDataSourceCrud{}
func (s *CoreBlockVolumeReplicaDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *CoreBlockVolumeReplicaDataSourceCrud) Get() error {
	request := oci_core.GetBlockVolumeReplicaRequest{}
func (s *CoreBlockVolumeReplicaDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/core/core_subnet_data_source.go ===
func CoreSubnetDataSource() *schema.Resource {
	fieldMap := make(map[string]*schema.Schema)
func readSingularCoreSubnet(d *schema.ResourceData, m interface{}) error {
	sync := &CoreSubnetDataSourceCrud{}
func (s *CoreSubnetDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *CoreSubnetDataSourceCrud) Get() error {
	request := oci_core.GetSubnetRequest{}
func (s *CoreSubnetDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/core/core_volume_attachment_resource.go ===
func CoreVolumeAttachmentResource() *schema.Resource {
	return &schema.Resource{
func createCoreVolumeAttachment(d *schema.ResourceData, m interface{}) error {
	sync := &CoreVolumeAttachmentResourceCrud{}
func readCoreVolumeAttachment(d *schema.ResourceData, m interface{}) error {
	sync := &CoreVolumeAttachmentResourceCrud{}
func deleteCoreVolumeAttachment(d *schema.ResourceData, m interface{}) error {
	sync := &CoreVolumeAttachmentResourceCrud{}
func (s *CoreVolumeAttachmentResourceCrud) ID() string {
	volumeAttachment := *s.Res
func (s *CoreVolumeAttachmentResourceCrud) CreatedPending() []string {
	return []string{
func (s *CoreVolumeAttachmentResourceCrud) CreatedTarget() []string {
	return []string{
func (s *CoreVolumeAttachmentResourceCrud) DeletedPending() []string {
	return []string{
func (s *CoreVolumeAttachmentResourceCrud) DeletedTarget() []string {
	return []string{
func (s *CoreVolumeAttachmentResourceCrud) Create() error {
	request := oci_core.AttachVolumeRequest{}
func (s *CoreVolumeAttachmentResourceCrud) Get() error {
	request := oci_core.GetVolumeAttachmentRequest{}
func (s *CoreVolumeAttachmentResourceCrud) Delete() error {
	request := oci_core.DetachVolumeRequest{}
func (s *CoreVolumeAttachmentResourceCrud) SetData() error {
	switch v := (*s.Res).(type) {
func (s *CoreVolumeAttachmentResourceCrud) mapToMultipathDevice(fieldKeyFormat string) (oci_core.MultipathDevice, error) {
	result := oci_core.MultipathDevice{}
func (s *CoreVolumeAttachmentResourceCrud) populateTopLevelPolymorphicAttachVolumeRequest(request *oci_core.AttachVolumeRequest) error {
	//discriminator

=== ./internal/service/core/core_cluster_network_resource.go ===
func CoreClusterNetworkResource() *schema.Resource {
	return &schema.Resource{
func createCoreClusterNetwork(d *schema.ResourceData, m interface{}) error {
	sync := &CoreClusterNetworkResourceCrud{}
func readCoreClusterNetwork(d *schema.ResourceData, m interface{}) error {
	sync := &CoreClusterNetworkResourceCrud{}
func updateCoreClusterNetwork(d *schema.ResourceData, m interface{}) error {
	sync := &CoreClusterNetworkResourceCrud{}
func deleteCoreClusterNetwork(d *schema.ResourceData, m interface{}) error {
	sync := &CoreClusterNetworkResourceCrud{}
func (s *CoreClusterNetworkResourceCrud) ID() string {
	return *s.Res.Id
func (s *CoreClusterNetworkResourceCrud) CreatedPending() []string {
	return []string{
func (s *CoreClusterNetworkResourceCrud) CreatedTarget() []string {
	return []string{
func (s *CoreClusterNetworkResourceCrud) DeletedPending() []string {
	return []string{
func (s *CoreClusterNetworkResourceCrud) DeletedTarget() []string {
	return []string{
func (s *CoreClusterNetworkResourceCrud) Create() error {
	request := oci_core.CreateClusterNetworkRequest{}
func (s *CoreClusterNetworkResourceCrud) Get() error {
	request := oci_core.GetClusterNetworkRequest{}
func (s *CoreClusterNetworkResourceCrud) Update() error {
	if compartment, ok := s.D.GetOkExists("compartment_id"); ok && s.D.HasChange("compartment_id") {
func (s *CoreClusterNetworkResourceCrud) Delete() error {
	request := oci_core.TerminateClusterNetworkRequest{}
func (s *CoreClusterNetworkResourceCrud) SetData() error {
	if s.Res.CompartmentId != nil {
func (s *CoreClusterNetworkResourceCrud) mapToClusterConfigurationDetails(fieldKeyFormat string) (oci_core.ClusterConfigurationDetails, error) {
	result := oci_core.ClusterConfigurationDetails{}
func (s *CoreClusterNetworkResourceCrud) mapToClusterNetworkPlacementConfigurationDetails(fieldKeyFormat string) (oci_core.ClusterNetworkPlacementConfigurationDetails, error) {
	result := oci_core.ClusterNetworkPlacementConfigurationDetails{}
func (s *CoreClusterNetworkResourceCrud) mapToCreateClusterNetworkInstancePoolDetails(fieldKeyFormat string) (oci_core.CreateClusterNetworkInstancePoolDetails, error) {
	result := oci_core.CreateClusterNetworkInstancePoolDetails{}
func (s *CoreClusterNetworkResourceCrud) mapToUpdateClusterNetworkInstancePoolDetails(fieldKeyFormat string) (
	oci_core.UpdateClusterNetworkInstancePoolDetails, error) {
func (s *CoreClusterNetworkResourceCrud) mapToInstancePoolPlacementIpv6AddressIpv6SubnetCidrDetails(fieldKeyFormat string) (oci_core.InstancePoolPlacementIpv6AddressIpv6SubnetCidrDetails, error) {
	result := oci_core.InstancePoolPlacementIpv6AddressIpv6SubnetCidrDetails{}
func (s *CoreClusterNetworkResourceCrud) mapToInstancePoolPlacementPrimarySubnet(fieldKeyFormat string) (oci_core.InstancePoolPlacementPrimarySubnet, error) {
	result := oci_core.InstancePoolPlacementPrimarySubnet{}
func (s *CoreClusterNetworkResourceCrud) mapToInstancePoolPlacementSecondaryVnicSubnet(fieldKeyFormat string) (oci_core.InstancePoolPlacementSecondaryVnicSubnet, error) {
	result := oci_core.InstancePoolPlacementSecondaryVnicSubnet{}
func (s *CoreClusterNetworkResourceCrud) updateCompartment(compartment interface{}) error {
	changeCompartmentRequest := oci_core.ChangeClusterNetworkCompartmentRequest{}

=== ./internal/service/core/core_remote_peering_connection_resource.go ===
func CoreRemotePeeringConnectionResource() *schema.Resource {
	return &schema.Resource{
func createCoreRemotePeeringConnection(d *schema.ResourceData, m interface{}) error {
	sync := &CoreRemotePeeringConnectionResourceCrud{}
func readCoreRemotePeeringConnection(d *schema.ResourceData, m interface{}) error {
	sync := &CoreRemotePeeringConnectionResourceCrud{}
func updateCoreRemotePeeringConnection(d *schema.ResourceData, m interface{}) error {
	sync := &CoreRemotePeeringConnectionResourceCrud{}
func deleteCoreRemotePeeringConnection(d *schema.ResourceData, m interface{}) error {
	sync := &CoreRemotePeeringConnectionResourceCrud{}
func (s *CoreRemotePeeringConnectionResourceCrud) ID() string {
	return *s.Res.Id
func (s *CoreRemotePeeringConnectionResourceCrud) CreatedPending() []string {
	return []string{
func (s *CoreRemotePeeringConnectionResourceCrud) CreatedTarget() []string {
	return []string{
func (s *CoreRemotePeeringConnectionResourceCrud) DeletedPending() []string {
	return []string{
func (s *CoreRemotePeeringConnectionResourceCrud) DeletedTarget() []string {
	return []string{
func (s *CoreRemotePeeringConnectionResourceCrud) ConnectRemotePeeringConnection() error {
	if s.Res == nil || s.Res.Id == nil {
func (s *CoreRemotePeeringConnectionResourceCrud) Create() error {
	request := oci_core.CreateRemotePeeringConnectionRequest{}
func (s *CoreRemotePeeringConnectionResourceCrud) Get() error {
	request := oci_core.GetRemotePeeringConnectionRequest{}
func (s *CoreRemotePeeringConnectionResourceCrud) Update() error {
	if compartment, ok := s.D.GetOkExists("compartment_id"); ok && s.D.HasChange("compartment_id") {
func (s *CoreRemotePeeringConnectionResourceCrud) Delete() error {
	request := oci_core.DeleteRemotePeeringConnectionRequest{}
func (s *CoreRemotePeeringConnectionResourceCrud) SetData() error {
	if s.Res.CompartmentId != nil {
func (s *CoreRemotePeeringConnectionResourceCrud) updateCompartment(compartment interface{}) error {
	changeCompartmentRequest := oci_core.ChangeRemotePeeringConnectionCompartmentRequest{}

=== ./internal/service/core/core_image_shapes_data_source.go ===
func CoreImageShapesDataSource() *schema.Resource {
	return &schema.Resource{
func readCoreImageShapes(d *schema.ResourceData, m interface{}) error {
	sync := &CoreImageShapesDataSourceCrud{}
func (s *CoreImageShapesDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *CoreImageShapesDataSourceCrud) Get() error {
	request := oci_core.ListImageShapeCompatibilityEntriesRequest{}
func (s *CoreImageShapesDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/core/core_service_gateways_data_source.go ===
func CoreServiceGatewaysDataSource() *schema.Resource {
	return &schema.Resource{
func readCoreServiceGateways(d *schema.ResourceData, m interface{}) error {
	sync := &CoreServiceGatewaysDataSourceCrud{}
func (s *CoreServiceGatewaysDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *CoreServiceGatewaysDataSourceCrud) Get() error {
	request := oci_core.ListServiceGatewaysRequest{}
func (s *CoreServiceGatewaysDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/core/core_drg_route_distributions_data_source.go ===
func CoreDrgRouteDistributionsDataSource() *schema.Resource {
	return &schema.Resource{
func readCoreDrgRouteDistributions(d *schema.ResourceData, m interface{}) error {
	sync := &CoreDrgRouteDistributionsDataSourceCrud{}
func (s *CoreDrgRouteDistributionsDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *CoreDrgRouteDistributionsDataSourceCrud) Get() error {
	request := oci_core.ListDrgRouteDistributionsRequest{}
func (s *CoreDrgRouteDistributionsDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/core/core_drg_attachment_resource.go ===
func CoreDrgAttachmentResource() *schema.Resource {
	return &schema.Resource{
func createCoreDrgAttachment(d *schema.ResourceData, m interface{}) error {
	sync := &CoreDrgAttachmentResourceCrud{}
func readCoreDrgAttachment(d *schema.ResourceData, m interface{}) error {
	sync := &CoreDrgAttachmentResourceCrud{}
func updateCoreDrgAttachment(d *schema.ResourceData, m interface{}) error {
	sync := &CoreDrgAttachmentResourceCrud{}
func deleteCoreDrgAttachment(d *schema.ResourceData, m interface{}) error {
	sync := &CoreDrgAttachmentResourceCrud{}
func (s *CoreDrgAttachmentResourceCrud) ID() string {
	return *s.Res.Id
func (s *CoreDrgAttachmentResourceCrud) CreatedPending() []string {
	return []string{
func (s *CoreDrgAttachmentResourceCrud) CreatedTarget() []string {
	return []string{
func (s *CoreDrgAttachmentResourceCrud) DeletedPending() []string {
	return []string{
func (s *CoreDrgAttachmentResourceCrud) DeletedTarget() []string {
	return []string{
func (s *CoreDrgAttachmentResourceCrud) Create() error {
	request := oci_core.CreateDrgAttachmentRequest{}
func (s *CoreDrgAttachmentResourceCrud) Get() error {
	request := oci_core.GetDrgAttachmentRequest{}
func (s *CoreDrgAttachmentResourceCrud) Update() error {
	request := oci_core.UpdateDrgAttachmentRequest{}
func (s *CoreDrgAttachmentResourceCrud) Delete() error {
	request := oci_core.DeleteDrgAttachmentRequest{}
func (s *CoreDrgAttachmentResourceCrud) SetData() error {
	if s.Res == nil {
func (s *CoreDrgAttachmentResourceCrud) mapToDrgAttachmentNetworkCreateDetails(fieldKeyFormat string) (oci_core.DrgAttachmentNetworkCreateDetails, error) {
	var baseObject oci_core.DrgAttachmentNetworkCreateDetails
func (s *CoreDrgAttachmentResourceCrud) mapToDrgAttachmentNetworkUpdateDetails(fieldKeyFormat string) (oci_core.DrgAttachmentNetworkUpdateDetails, error) {
	var baseObject oci_core.DrgAttachmentNetworkUpdateDetails
func (s *CoreDrgAttachmentResourceCrud) removeExportDrgRouteDistribution() error {
	request := oci_core.RemoveExportDrgRouteDistributionRequest{}

=== ./internal/service/core/core_nat_gateways_data_source.go ===
func CoreNatGatewaysDataSource() *schema.Resource {
	return &schema.Resource{
func readCoreNatGateways(d *schema.ResourceData, m interface{}) error {
	sync := &CoreNatGatewaysDataSourceCrud{}
func (s *CoreNatGatewaysDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *CoreNatGatewaysDataSourceCrud) Get() error {
	request := oci_core.ListNatGatewaysRequest{}
func (s *CoreNatGatewaysDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/core/core_subnet_resource.go ===
func CoreSubnetResource() *schema.Resource {
	return &schema.Resource{
func createCoreSubnet(d *schema.ResourceData, m interface{}) error {
	sync := &CoreSubnetResourceCrud{}
func readCoreSubnet(d *schema.ResourceData, m interface{}) error {
	sync := &CoreSubnetResourceCrud{}
func updateCoreSubnet(d *schema.ResourceData, m interface{}) error {
	sync := &CoreSubnetResourceCrud{}
func deleteCoreSubnet(d *schema.ResourceData, m interface{}) error {
	sync := &CoreSubnetResourceCrud{}
func (s *CoreSubnetResourceCrud) ID() string {
	return *s.Res.Id
func (s *CoreSubnetResourceCrud) CreatedPending() []string {
	return []string{
func (s *CoreSubnetResourceCrud) CreatedTarget() []string {
	return []string{
func (s *CoreSubnetResourceCrud) DeletedPending() []string {
	return []string{
func (s *CoreSubnetResourceCrud) DeletedTarget() []string {
	return []string{
func (s *CoreSubnetResourceCrud) Create() error {
	request := oci_core.CreateSubnetRequest{}
func (s *CoreSubnetResourceCrud) Get() error {
	request := oci_core.GetSubnetRequest{}
func (s *CoreSubnetResourceCrud) Update() error {
	if compartment, ok := s.D.GetOkExists("compartment_id"); ok && s.D.HasChange("compartment_id") {
func (s *CoreSubnetResourceCrud) Delete() error {
	request := oci_core.DeleteSubnetRequest{}
func (s *CoreSubnetResourceCrud) SetData() error {
	if s.Res.AvailabilityDomain != nil {
func (s *CoreSubnetResourceCrud) updateCompartment(compartment interface{}) error {
	changeCompartmentRequest := oci_core.ChangeSubnetCompartmentRequest{}
func (s *CoreSubnetResourceCrud) updateIpv6CidrBlocks(oldRaw interface{}, newRaw interface{}) error {
	interfaces := oldRaw.([]interface{})

=== ./internal/service/core/core_compute_global_image_capability_schemas_version_data_source.go ===
func CoreComputeGlobalImageCapabilitySchemasVersionDataSource() *schema.Resource {
	return &schema.Resource{
func readSingularCoreComputeGlobalImageCapabilitySchemasVersion(d *schema.ResourceData, m interface{}) error {
	sync := &CoreComputeGlobalImageCapabilitySchemasVersionDataSourceCrud{}
func (s *CoreComputeGlobalImageCapabilitySchemasVersionDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *CoreComputeGlobalImageCapabilitySchemasVersionDataSourceCrud) Get() error {
	request := oci_core.GetComputeGlobalImageCapabilitySchemaVersionRequest{}
func (s *CoreComputeGlobalImageCapabilitySchemasVersionDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/core/core_cross_connect_port_speed_shapes_data_source.go ===
func CoreCrossConnectPortSpeedShapesDataSource() *schema.Resource {
	return &schema.Resource{
func readCoreCrossConnectPortSpeedShapes(d *schema.ResourceData, m interface{}) error {
	sync := &CoreCrossConnectPortSpeedShapesDataSourceCrud{}
func (s *CoreCrossConnectPortSpeedShapesDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *CoreCrossConnectPortSpeedShapesDataSourceCrud) Get() error {
	request := oci_core.ListCrossconnectPortSpeedShapesRequest{}
func (s *CoreCrossConnectPortSpeedShapesDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/core/core_cross_connect_groups_data_source.go ===
func CoreCrossConnectGroupsDataSource() *schema.Resource {
	return &schema.Resource{
func readCoreCrossConnectGroups(d *schema.ResourceData, m interface{}) error {
	sync := &CoreCrossConnectGroupsDataSourceCrud{}
func (s *CoreCrossConnectGroupsDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *CoreCrossConnectGroupsDataSourceCrud) Get() error {
	request := oci_core.ListCrossConnectGroupsRequest{}
func (s *CoreCrossConnectGroupsDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/core/core_virtual_circuit_data_source.go ===
func CoreVirtualCircuitDataSource() *schema.Resource {
	fieldMap := make(map[string]*schema.Schema)
func readSingularCoreVirtualCircuit(d *schema.ResourceData, m interface{}) error {
	sync := &CoreVirtualCircuitDataSourceCrud{}
func (s *CoreVirtualCircuitDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *CoreVirtualCircuitDataSourceCrud) Get() error {
	request := oci_core.GetVirtualCircuitRequest{}
func (s *CoreVirtualCircuitDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/core/core_cluster_network_instances_data_source.go ===
func CoreClusterNetworkInstancesDataSource() *schema.Resource {
	return &schema.Resource{
func readCoreClusterNetworkInstances(d *schema.ResourceData, m interface{}) error {
	sync := &CoreClusterNetworkInstancesDataSourceCrud{}
func (s *CoreClusterNetworkInstancesDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *CoreClusterNetworkInstancesDataSourceCrud) Get() error {
	request := oci_core.ListClusterNetworkInstancesRequest{}
func (s *CoreClusterNetworkInstancesDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/core/core_compute_capacity_topology_compute_network_blocks_data_source.go ===
func CoreComputeCapacityTopologyComputeNetworkBlocksDataSource() *schema.Resource {
	return &schema.Resource{
func readCoreComputeCapacityTopologyComputeNetworkBlocks(d *schema.ResourceData, m interface{}) error {
	sync := &CoreComputeCapacityTopologyComputeNetworkBlocksDataSourceCrud{}
func (s *CoreComputeCapacityTopologyComputeNetworkBlocksDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *CoreComputeCapacityTopologyComputeNetworkBlocksDataSourceCrud) Get() error {
	request := oci_core.ListComputeCapacityTopologyComputeNetworkBlocksRequest{}
func (s *CoreComputeCapacityTopologyComputeNetworkBlocksDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/core/core_cpe_device_shape_data_source.go ===
func CoreCpeDeviceShapeDataSource() *schema.Resource {
	return &schema.Resource{
func readSingularCoreCpeDeviceShape(d *schema.ResourceData, m interface{}) error {
	sync := &CoreCpeDeviceShapeDataSourceCrud{}
func (s *CoreCpeDeviceShapeDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *CoreCpeDeviceShapeDataSourceCrud) Get() error {
	request := oci_core.GetCpeDeviceShapeRequest{}
func (s *CoreCpeDeviceShapeDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/core/core_drg_route_distribution_statements_data_source.go ===
func CoreDrgRouteDistributionStatementsDataSource() *schema.Resource {
	return &schema.Resource{
func readCoreDrgRouteDistributionStatements(d *schema.ResourceData, m interface{}) error {
	sync := &CoreDrgRouteDistributionStatementsDataSourceCrud{}
func (s *CoreDrgRouteDistributionStatementsDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *CoreDrgRouteDistributionStatementsDataSourceCrud) Get() error {
	request := oci_core.ListDrgRouteDistributionStatementsRequest{}
func (s *CoreDrgRouteDistributionStatementsDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/core/core_vtap_resource.go ===
func CoreVtapResource() *schema.Resource {
	return &schema.Resource{
func createCoreVtap(d *schema.ResourceData, m interface{}) error {
	sync := &CoreVtapResourceCrud{}
func readCoreVtap(d *schema.ResourceData, m interface{}) error {
	sync := &CoreVtapResourceCrud{}
func updateCoreVtap(d *schema.ResourceData, m interface{}) error {
	sync := &CoreVtapResourceCrud{}
func deleteCoreVtap(d *schema.ResourceData, m interface{}) error {
	sync := &CoreVtapResourceCrud{}
func (s *CoreVtapResourceCrud) ID() string {
	return *s.Res.Id
func (s *CoreVtapResourceCrud) CreatedPending() []string {
	return []string{
func (s *CoreVtapResourceCrud) CreatedTarget() []string {
	return []string{
func (s *CoreVtapResourceCrud) DeletedPending() []string {
	return []string{
func (s *CoreVtapResourceCrud) DeletedTarget() []string {
	return []string{
func (s *CoreVtapResourceCrud) Create() error {
	request := oci_core.CreateVtapRequest{}
func (s *CoreVtapResourceCrud) Get() error {
	request := oci_core.GetVtapRequest{}
func (s *CoreVtapResourceCrud) Update() error {
	if compartment, ok := s.D.GetOkExists("compartment_id"); ok && s.D.HasChange("compartment_id") {
func (s *CoreVtapResourceCrud) Delete() error {
	request := oci_core.DeleteVtapRequest{}
func (s *CoreVtapResourceCrud) SetData() error {
	if s.Res.CaptureFilterId != nil {
func (s *CoreVtapResourceCrud) updateCompartment(compartment interface{}) error {
	changeCompartmentRequest := oci_core.ChangeVtapCompartmentRequest{}

=== ./internal/service/core/core_cluster_networks_data_source.go ===
func CoreClusterNetworksDataSource() *schema.Resource {
	return &schema.Resource{
func readCoreClusterNetworks(d *schema.ResourceData, m interface{}) error {
	sync := &CoreClusterNetworksDataSourceCrud{}
func (s *CoreClusterNetworksDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *CoreClusterNetworksDataSourceCrud) Get() error {
	request := oci_core.ListClusterNetworksRequest{}
func (s *CoreClusterNetworksDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/core/core_app_catalog_listing_resource_version_agreement_resource.go ===
func AppCatalogListingResourceVersionAgreementResource() *schema.Resource {
	return &schema.Resource{
func createAppCatalogListingResourceVersionAgreement(d *schema.ResourceData, m interface{}) error {
	sync := &AppCatalogListingResourceVersionAgreementResourceCrud{}
func readAppCatalogListingResourceVersionAgreement(d *schema.ResourceData, m interface{}) error {
	sync := &AppCatalogListingResourceVersionAgreementResourceCrud{}
func deleteAppCatalogListingResourceVersionAgreement(d *schema.ResourceData, m interface{}) error {
	sync := &AppCatalogListingResourceVersionAgreementResourceCrud{}
func (s *AppCatalogListingResourceVersionAgreementResourceCrud) ID() string {
	return s.Res.TimeRetrieved.Format(time.RFC3339Nano)
func (s *AppCatalogListingResourceVersionAgreementResourceCrud) Create() error {
	request := oci_core.GetAppCatalogListingAgreementsRequest{}
func (s *AppCatalogListingResourceVersionAgreementResourceCrud) Get() error {
	return nil
func (s *AppCatalogListingResourceVersionAgreementResourceCrud) Delete() error {
	return nil
func (s *AppCatalogListingResourceVersionAgreementResourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/core/core_dhcp_options_data_source.go ===
func CoreDhcpOptionsDataSource() *schema.Resource {
	return &schema.Resource{
func readCoreDhcpOptionsList(d *schema.ResourceData, m interface{}) error {
	sync := &CoreDhcpOptionsDataSourceCrud{}
func (s *CoreDhcpOptionsDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *CoreDhcpOptionsDataSourceCrud) Get() error {
	request := oci_core.ListDhcpOptionsRequest{}
func (s *CoreDhcpOptionsDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/core/core_volume_resource.go ===
func CoreVolumeResource() *schema.Resource {
	return &schema.Resource{
func createCoreVolume(d *schema.ResourceData, m interface{}) error {
	sync := &CoreVolumeResourceCrud{}
func readCoreVolume(d *schema.ResourceData, m interface{}) error {
	sync := &CoreVolumeResourceCrud{}
func updateCoreVolume(d *schema.ResourceData, m interface{}) error {
	sync := &CoreVolumeResourceCrud{}
func deleteCoreVolume(d *schema.ResourceData, m interface{}) error {
	sync := &CoreVolumeResourceCrud{}
func (s *CoreVolumeResourceCrud) ID() string {
	return *s.Res.Id
func (s *CoreVolumeResourceCrud) CreatedPending() []string {
	return []string{
func (s *CoreVolumeResourceCrud) CreatedTarget() []string {
	return []string{
func (s *CoreVolumeResourceCrud) DeletedPending() []string {
	return []string{
func (s *CoreVolumeResourceCrud) DeletedTarget() []string {
	return []string{
func (s *CoreVolumeResourceCrud) UpdatedPending() []string {
	return []string{
func (s *CoreVolumeResourceCrud) UpdatedTarget() []string {
	return []string{
func (s *CoreVolumeResourceCrud) Create() error {
	request := oci_core.CreateVolumeRequest{}
func (s *CoreVolumeResourceCrud) Get() error {
	request := oci_core.GetVolumeRequest{}
func (s *CoreVolumeResourceCrud) Update() error {
	if compartment, ok := s.D.GetOkExists("compartment_id"); ok && s.D.HasChange("compartment_id") {
func (s *CoreVolumeResourceCrud) Delete() error {
	request := oci_core.DeleteVolumeRequest{}
func (s *CoreVolumeResourceCrud) SetData() error {
	if s.Res.AutoTunedVpusPerGB != nil {
func (s *CoreVolumeResourceCrud) mapToAutotunePolicy(fieldKeyFormat string) (oci_core.AutotunePolicy, error) {
	var baseObject oci_core.AutotunePolicy
func (s *CoreVolumeResourceCrud) mapToBlockVolumeReplicaDetails(fieldKeyFormat string) (oci_core.BlockVolumeReplicaDetails, error) {
	result := oci_core.BlockVolumeReplicaDetails{}
func (s *CoreVolumeResourceCrud) mapToVolumeSourceDetails(fieldKeyFormat string) (oci_core.VolumeSourceDetails, error) {
	var baseObject oci_core.VolumeSourceDetails
func (s *CoreVolumeResourceCrud) updateCompartment(compartment interface{}) error {
	changeCompartmentRequest := oci_core.ChangeVolumeCompartmentRequest{}

=== ./internal/service/core/core_compute_cluster_resource.go ===
func CoreComputeClusterResource() *schema.Resource {
	return &schema.Resource{
func createCoreComputeCluster(d *schema.ResourceData, m interface{}) error {
	sync := &CoreComputeClusterResourceCrud{}
func readCoreComputeCluster(d *schema.ResourceData, m interface{}) error {
	sync := &CoreComputeClusterResourceCrud{}
func updateCoreComputeCluster(d *schema.ResourceData, m interface{}) error {
	sync := &CoreComputeClusterResourceCrud{}
func deleteCoreComputeCluster(d *schema.ResourceData, m interface{}) error {
	sync := &CoreComputeClusterResourceCrud{}
func (s *CoreComputeClusterResourceCrud) ID() string {
	return *s.Res.Id
func (s *CoreComputeClusterResourceCrud) CreatedPending() []string {
	return []string{}
func (s *CoreComputeClusterResourceCrud) CreatedTarget() []string {
	return []string{
func (s *CoreComputeClusterResourceCrud) DeletedPending() []string {
	return []string{}
func (s *CoreComputeClusterResourceCrud) DeletedTarget() []string {
	return []string{
func (s *CoreComputeClusterResourceCrud) Create() error {
	request := oci_core.CreateComputeClusterRequest{}
func (s *CoreComputeClusterResourceCrud) Get() error {
	request := oci_core.GetComputeClusterRequest{}
func (s *CoreComputeClusterResourceCrud) Update() error {
	if compartment, ok := s.D.GetOkExists("compartment_id"); ok && s.D.HasChange("compartment_id") {
func (s *CoreComputeClusterResourceCrud) Delete() error {
	request := oci_core.DeleteComputeClusterRequest{}
func (s *CoreComputeClusterResourceCrud) SetData() error {
	if s.Res.AvailabilityDomain != nil {
func (s *CoreComputeClusterResourceCrud) updateCompartment(compartment interface{}) error {
	changeCompartmentRequest := oci_core.ChangeComputeClusterCompartmentRequest{}

=== ./internal/service/core/core_instance_pool_instance_resource.go ===
func CoreInstancePoolInstanceResource() *schema.Resource {
	return &schema.Resource{
func createCoreInstancePoolInstance(d *schema.ResourceData, m interface{}) error {
	sync := &CoreInstancePoolInstanceResourceCrud{}
func readCoreInstancePoolInstance(d *schema.ResourceData, m interface{}) error {
	sync := &CoreInstancePoolInstanceResourceCrud{}
func deleteCoreInstancePoolInstance(d *schema.ResourceData, m interface{}) error {
	sync := &CoreInstancePoolInstanceResourceCrud{}
func (s *CoreInstancePoolInstanceResourceCrud) ID() string {
	return GetInstancePoolInstanceCompositeId(s.D.Get("instance_pool_id").(string), s.D.Get("instance_id").(string))
func (s *CoreInstancePoolInstanceResourceCrud) CreatedPending() []string {
	return []string{
func (s *CoreInstancePoolInstanceResourceCrud) CreatedTarget() []string {
	return []string{
func (s *CoreInstancePoolInstanceResourceCrud) DeletedPending() []string {
	return []string{
func (s *CoreInstancePoolInstanceResourceCrud) Create() error {
	request := oci_core.AttachInstancePoolInstanceRequest{}
func (s *CoreInstancePoolInstanceResourceCrud) Get() error {
	request := oci_core.GetInstancePoolInstanceRequest{}
func (s *CoreInstancePoolInstanceResourceCrud) Delete() error {
	request := oci_core.DetachInstancePoolInstanceRequest{}
func (s *CoreInstancePoolInstanceResourceCrud) SetData() error {


=== ./internal/service/core/core_public_ips_data_source.go ===
func CorePublicIpsDataSource() *schema.Resource {
	return &schema.Resource{
func readCorePublicIps(d *schema.ResourceData, m interface{}) error {
	sync := &CorePublicIpsDataSourceCrud{}
func (s *CorePublicIpsDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *CorePublicIpsDataSourceCrud) Get() error {
	request := oci_core.ListPublicIpsRequest{}
func (s *CorePublicIpsDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/core/core_internet_gateway_resource.go ===
func CoreInternetGatewayResource() *schema.Resource {
	return &schema.Resource{
func createCoreInternetGateway(d *schema.ResourceData, m interface{}) error {
	sync := &CoreInternetGatewayResourceCrud{}
func readCoreInternetGateway(d *schema.ResourceData, m interface{}) error {
	sync := &CoreInternetGatewayResourceCrud{}
func updateCoreInternetGateway(d *schema.ResourceData, m interface{}) error {
	sync := &CoreInternetGatewayResourceCrud{}
func deleteCoreInternetGateway(d *schema.ResourceData, m interface{}) error {
	sync := &CoreInternetGatewayResourceCrud{}
func (s *CoreInternetGatewayResourceCrud) ID() string {
	return *s.Res.Id
func (s *CoreInternetGatewayResourceCrud) CreatedPending() []string {
	return []string{
func (s *CoreInternetGatewayResourceCrud) CreatedTarget() []string {
	return []string{
func (s *CoreInternetGatewayResourceCrud) DeletedPending() []string {
	return []string{
func (s *CoreInternetGatewayResourceCrud) DeletedTarget() []string {
	return []string{
func (s *CoreInternetGatewayResourceCrud) Create() error {
	request := oci_core.CreateInternetGatewayRequest{}
func (s *CoreInternetGatewayResourceCrud) Get() error {
	request := oci_core.GetInternetGatewayRequest{}
func (s *CoreInternetGatewayResourceCrud) Update() error {
	if compartment, ok := s.D.GetOkExists("compartment_id"); ok && s.D.HasChange("compartment_id") {
func (s *CoreInternetGatewayResourceCrud) Delete() error {
	request := oci_core.DeleteInternetGatewayRequest{}
func (s *CoreInternetGatewayResourceCrud) SetData() error {
	if s.Res.CompartmentId != nil {
func (s *CoreInternetGatewayResourceCrud) updateCompartment(compartment interface{}) error {
	changeCompartmentRequest := oci_core.ChangeInternetGatewayCompartmentRequest{}

=== ./internal/service/core/core_route_table_default_resource.go ===
func DefaultCoreRouteTableResource() *schema.Resource {
	defaultResourceSchema := ConvertToDefaultVcnResourceSchema(CoreRouteTableResource())
func createDefaultRouteTable(d *schema.ResourceData, m interface{}) error {
	sync := &DefaultRouteTableResourceCrud{}
func deleteDefaultRouteTable(d *schema.ResourceData, m interface{}) error {
	sync := &DefaultRouteTableResourceCrud{}
func (s *DefaultRouteTableResourceCrud) Create() error {
	// If we are creating a default resource, then don't have to
func (s *DefaultRouteTableResourceCrud) reset() error {
	request := oci_core.UpdateRouteTableRequest{}
func (s *DefaultRouteTableResourceCrud) Delete() error {
	if _, ok := s.D.GetOkExists("manage_default_resource_id"); ok {
func (s *DefaultRouteTableResourceCrud) DeletedPending() []string {
	return s.CreatedTarget()
func (s *DefaultRouteTableResourceCrud) DeletedTarget() []string {
	return s.CreatedTarget()

=== ./internal/service/core/core_drg_route_distribution_data_source.go ===
func CoreDrgRouteDistributionDataSource() *schema.Resource {
	fieldMap := make(map[string]*schema.Schema)
func readSingularCoreDrgRouteDistribution(d *schema.ResourceData, m interface{}) error {
	sync := &CoreDrgRouteDistributionDataSourceCrud{}
func (s *CoreDrgRouteDistributionDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *CoreDrgRouteDistributionDataSourceCrud) Get() error {
	request := oci_core.GetDrgRouteDistributionRequest{}
func (s *CoreDrgRouteDistributionDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/core/core_volume_group_replicas_data_source.go ===
func CoreVolumeGroupReplicasDataSource() *schema.Resource {
	return &schema.Resource{
func readCoreVolumeGroupReplicas(d *schema.ResourceData, m interface{}) error {
	sync := &CoreVolumeGroupReplicasDataSourceCrud{}
func (s *CoreVolumeGroupReplicasDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *CoreVolumeGroupReplicasDataSourceCrud) Get() error {
	request := oci_core.ListVolumeGroupReplicasRequest{}
func (s *CoreVolumeGroupReplicasDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/core/core_app_catalog_listing_resource_version_data_source.go ===
func CoreAppCatalogListingResourceVersionDataSource() *schema.Resource {
	return &schema.Resource{
func readSingularCoreAppCatalogListingResourceVersion(d *schema.ResourceData, m interface{}) error {
	sync := &CoreAppCatalogListingResourceVersionDataSourceCrud{}
func (s *CoreAppCatalogListingResourceVersionDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *CoreAppCatalogListingResourceVersionDataSourceCrud) Get() error {
	request := oci_core.GetAppCatalogListingResourceVersionRequest{}
func (s *CoreAppCatalogListingResourceVersionDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/core/core_cpe_device_shapes_data_source.go ===
func CoreCpeDeviceShapesDataSource() *schema.Resource {
	return &schema.Resource{
func readCoreCpeDeviceShapes(d *schema.ResourceData, m interface{}) error {
	sync := &CoreCpeDeviceShapesDataSourceCrud{}
func (s *CoreCpeDeviceShapesDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *CoreCpeDeviceShapesDataSourceCrud) Get() error {
	request := oci_core.ListCpeDeviceShapesRequest{}
func (s *CoreCpeDeviceShapesDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/core/core_route_table_attachment_resource.go ===
func CoreRouteTableAttachmentResource() *schema.Resource {
	return &schema.Resource{
func createRouteTableAttachment(d *schema.ResourceData, m interface{}) error {
	sync := &RouteTableAttachmentResourceCrud{}
func deleteRouteTableAttachment(d *schema.ResourceData, m interface{}) error {
	sync := &RouteTableAttachmentResourceCrud{}
func readRouteTableAttachment(d *schema.ResourceData, m interface{}) error {
	sync := &RouteTableAttachmentResourceCrud{}
func (s *RouteTableAttachmentResourceCrud) ID() string {
	return getRouteTableAttachmentId(*s.Res.Id, *s.Res.RouteTableId)
func (s *RouteTableAttachmentResourceCrud) Create() error {
	request := oci_core.UpdateSubnetRequest{}
func (s *RouteTableAttachmentResourceCrud) Get() error {

func (s *RouteTableAttachmentResourceCrud) Delete() error {

func (s *RouteTableAttachmentResourceCrud) SetData() error {


=== ./internal/service/core/core_app_catalog_subscriptions_data_source.go ===
func CoreAppCatalogSubscriptionsDataSource() *schema.Resource {
	return &schema.Resource{
func readCoreAppCatalogSubscriptions(d *schema.ResourceData, m interface{}) error {
	sync := &CoreAppCatalogSubscriptionsDataSourceCrud{}
func (s *CoreAppCatalogSubscriptionsDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *CoreAppCatalogSubscriptionsDataSourceCrud) Get() error {
	request := oci_core.ListAppCatalogSubscriptionsRequest{}
func (s *CoreAppCatalogSubscriptionsDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/core/core_virtual_circuit_associated_tunnels_data_source.go ===
func CoreVirtualCircuitAssociatedTunnelsDataSource() *schema.Resource {
	return &schema.Resource{
func readCoreVirtualCircuitAssociatedTunnels(d *schema.ResourceData, m interface{}) error {
	sync := &CoreVirtualCircuitAssociatedTunnelsDataSourceCrud{}
func (s *CoreVirtualCircuitAssociatedTunnelsDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *CoreVirtualCircuitAssociatedTunnelsDataSourceCrud) Get() error {
	request := oci_core.ListVirtualCircuitAssociatedTunnelsRequest{}
func (s *CoreVirtualCircuitAssociatedTunnelsDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/core/core_tunnel_security_associations_data_source.go ===
func CoreTunnelSecurityAssociationsDataSource() *schema.Resource {
	return &schema.Resource{
func readCoreTunnelSecurityAssociations(d *schema.ResourceData, m interface{}) error {
	sync := &CoreTunnelSecurityAssociationsDataSourceCrud{}
func (s *CoreTunnelSecurityAssociationsDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *CoreTunnelSecurityAssociationsDataSourceCrud) Get() error {
	request := oci_core.ListIPSecConnectionTunnelSecurityAssociationsRequest{}
func (s *CoreTunnelSecurityAssociationsDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/core/core_console_history_data_data_source.go ===
func CoreConsoleHistoryContentDataSource() *schema.Resource {
	return &schema.Resource{
func readSingularCoreConsoleHistoryContent(d *schema.ResourceData, m interface{}) error {
	sync := &CoreConsoleHistoryContentDataSourceCrud{}
func (s *CoreConsoleHistoryContentDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *CoreConsoleHistoryContentDataSourceCrud) Get() error {
	request := oci_core.GetConsoleHistoryContentRequest{}
func (s *CoreConsoleHistoryContentDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/core/core_boot_volume_backup_resource.go ===
func CoreBootVolumeBackupResource() *schema.Resource {
	return &schema.Resource{
func createCoreBootVolumeBackup(d *schema.ResourceData, m interface{}) error {
	sync := &CoreBootVolumeBackupResourceCrud{}
func readCoreBootVolumeBackup(d *schema.ResourceData, m interface{}) error {
	sync := &CoreBootVolumeBackupResourceCrud{}
func updateCoreBootVolumeBackup(d *schema.ResourceData, m interface{}) error {
	sync := &CoreBootVolumeBackupResourceCrud{}
func deleteCoreBootVolumeBackup(d *schema.ResourceData, m interface{}) error {
	sync := &CoreBootVolumeBackupResourceCrud{}
func (s *CoreBootVolumeBackupResourceCrud) ID() string {
	return *s.Res.Id
func (s *CoreBootVolumeBackupResourceCrud) CreatedPending() []string {
	return []string{
func (s *CoreBootVolumeBackupResourceCrud) CreatedTarget() []string {
	return []string{
func (s *CoreBootVolumeBackupResourceCrud) DeletedPending() []string {
	return []string{
func (s *CoreBootVolumeBackupResourceCrud) DeletedTarget() []string {
	return []string{
func (s *CoreBootVolumeBackupResourceCrud) Create() error {
	if s.isCopyCreate() {
func (s *CoreBootVolumeBackupResourceCrud) isCopyCreate() bool {
	if sourceDetails, ok := s.D.GetOkExists("source_details"); ok {
func (s *CoreBootVolumeBackupResourceCrud) createBootVolumeBackup() error {
	request := oci_core.CreateBootVolumeBackupRequest{}
func (s *CoreBootVolumeBackupResourceCrud) createBootVolumeBackupCopy() error {
	copyBootVolumeBackupRequest := oci_core.CopyBootVolumeBackupRequest{}
func (s *CoreBootVolumeBackupResourceCrud) Get() error {
	request := oci_core.GetBootVolumeBackupRequest{}
func (s *CoreBootVolumeBackupResourceCrud) Update() error {
	if compartment, ok := s.D.GetOkExists("compartment_id"); ok && s.D.HasChange("compartment_id") {
func (s *CoreBootVolumeBackupResourceCrud) Delete() error {
	request := oci_core.DeleteBootVolumeBackupRequest{}
func (s *CoreBootVolumeBackupResourceCrud) SetData() error {
	if s.Res.BootVolumeId != nil {
func (s *CoreBootVolumeBackupResourceCrud) updateCompartment(compartment interface{}) error {
	changeCompartmentRequest := oci_core.ChangeBootVolumeBackupCompartmentRequest{}

=== ./internal/service/core/core_instance_maintenance_event_resource.go ===
func CoreInstanceMaintenanceEventResource() *schema.Resource {
	return &schema.Resource{
func createCoreInstanceMaintenanceEvent(d *schema.ResourceData, m interface{}) error {
	sync := &CoreInstanceMaintenanceEventResourceCrud{}
func readCoreInstanceMaintenanceEvent(d *schema.ResourceData, m interface{}) error {
	sync := &CoreInstanceMaintenanceEventResourceCrud{}
func updateCoreInstanceMaintenanceEvent(d *schema.ResourceData, m interface{}) error {
	sync := &CoreInstanceMaintenanceEventResourceCrud{}
func deleteCoreInstanceMaintenanceEvent(d *schema.ResourceData, m interface{}) error {
	return nil
func (s *CoreInstanceMaintenanceEventResourceCrud) ID() string {
	return *s.Res.Id
func (s *CoreInstanceMaintenanceEventResourceCrud) CreatedPending() []string {
	return []string{
func (s *CoreInstanceMaintenanceEventResourceCrud) CreatedTarget() []string {
	return []string{
func (s *CoreInstanceMaintenanceEventResourceCrud) DeletedPending() []string {
	return []string{}
func (s *CoreInstanceMaintenanceEventResourceCrud) DeletedTarget() []string {
	return []string{}
func (s *CoreInstanceMaintenanceEventResourceCrud) Create() error {
	request := oci_core.UpdateInstanceMaintenanceEventRequest{}
func (s *CoreInstanceMaintenanceEventResourceCrud) Get() error {
	request := oci_core.GetInstanceMaintenanceEventRequest{}
func (s *CoreInstanceMaintenanceEventResourceCrud) Update() error {
	request := oci_core.UpdateInstanceMaintenanceEventRequest{}
func (s *CoreInstanceMaintenanceEventResourceCrud) SetData() error {
	s.D.Set("additional_details", s.Res.AdditionalDetails)

=== ./internal/service/core/core_drg_resource.go ===
func CoreDrgResource() *schema.Resource {
	return &schema.Resource{
func createCoreDrg(d *schema.ResourceData, m interface{}) error {
	sync := &CoreDrgResourceCrud{}
func readCoreDrg(d *schema.ResourceData, m interface{}) error {
	sync := &CoreDrgResourceCrud{}
func updateCoreDrg(d *schema.ResourceData, m interface{}) error {
	sync := &CoreDrgResourceCrud{}
func deleteCoreDrg(d *schema.ResourceData, m interface{}) error {
	sync := &CoreDrgResourceCrud{}
func (s *CoreDrgResourceCrud) ID() string {
	return *s.Res.Id
func (s *CoreDrgResourceCrud) CreatedPending() []string {
	return []string{
func (s *CoreDrgResourceCrud) CreatedTarget() []string {
	return []string{
func (s *CoreDrgResourceCrud) DeletedPending() []string {
	return []string{
func (s *CoreDrgResourceCrud) DeletedTarget() []string {
	return []string{
func (s *CoreDrgResourceCrud) Create() error {
	request := oci_core.CreateDrgRequest{}
func (s *CoreDrgResourceCrud) Get() error {
	request := oci_core.GetDrgRequest{}
func (s *CoreDrgResourceCrud) Update() error {
	if compartment, ok := s.D.GetOkExists("compartment_id"); ok && s.D.HasChange("compartment_id") {
func (s *CoreDrgResourceCrud) Delete() error {
	request := oci_core.DeleteDrgRequest{}
func (s *CoreDrgResourceCrud) SetData() error {
	if s.Res == nil {
func (s *CoreDrgResourceCrud) mapToDefaultDrgRouteTables(fieldKeyFormat string) (oci_core.DefaultDrgRouteTables, error) {
	result := oci_core.DefaultDrgRouteTables{}
func (s *CoreDrgResourceCrud) updateCompartment(compartment interface{}) error {
	changeCompartmentRequest := oci_core.ChangeDrgCompartmentRequest{}

=== ./internal/service/core/core_virtual_circuit_resource.go ===
func CoreVirtualCircuitResource() *schema.Resource {
	return &schema.Resource{
func createCoreVirtualCircuit(d *schema.ResourceData, m interface{}) error {
	sync := &CoreVirtualCircuitResourceCrud{}
func readCoreVirtualCircuit(d *schema.ResourceData, m interface{}) error {
	sync := &CoreVirtualCircuitResourceCrud{}
func updateCoreVirtualCircuit(d *schema.ResourceData, m interface{}) error {
	sync := &CoreVirtualCircuitResourceCrud{}
func deleteCoreVirtualCircuit(d *schema.ResourceData, m interface{}) error {
	sync := &CoreVirtualCircuitResourceCrud{}
func (s *CoreVirtualCircuitResourceCrud) ID() string {
	return *s.Res.Id
func (s *CoreVirtualCircuitResourceCrud) CreatedPending() []string {
	return []string{
func (s *CoreVirtualCircuitResourceCrud) CreatedTarget() []string {
	return []string{
func (s *CoreVirtualCircuitResourceCrud) DeletedPending() []string {
	return []string{
func (s *CoreVirtualCircuitResourceCrud) DeletedTarget() []string {
	return []string{
func (s *CoreVirtualCircuitResourceCrud) UpdatedPending() []string {
	return []string{
func (s *CoreVirtualCircuitResourceCrud) UpdatedTarget() []string {
	return []string{
func (s *CoreVirtualCircuitResourceCrud) Create() error {
	request := oci_core.CreateVirtualCircuitRequest{}
func (s *CoreVirtualCircuitResourceCrud) Get() error {
	request := oci_core.GetVirtualCircuitRequest{}
func (s *CoreVirtualCircuitResourceCrud) Update() error {
	// Update public prefixes, if changed
func (s *CoreVirtualCircuitResourceCrud) updatePublicPrefixes() error {
	virtualCircuitId := s.D.Id()
func (s *CoreVirtualCircuitResourceCrud) Delete() error {
	request := oci_core.DeleteVirtualCircuitRequest{}
func (s *CoreVirtualCircuitResourceCrud) SetData() error {
	if s.Res.BandwidthShapeName != nil {
func (s *CoreVirtualCircuitResourceCrud) mapToCreateVirtualCircuitPublicPrefixDetails(fieldKeyFormat string) (oci_core.CreateVirtualCircuitPublicPrefixDetails, error) {
	result := oci_core.CreateVirtualCircuitPublicPrefixDetails{}
func (s *CoreVirtualCircuitResourceCrud) mapToCrossConnectMapping(fieldKeyFormat string, isUpdate bool) (oci_core.CrossConnectMapping, error) {
	result := oci_core.CrossConnectMapping{}
func (s *CoreVirtualCircuitResourceCrud) updateCompartment(compartment interface{}) error {
	changeCompartmentRequest := oci_core.ChangeVirtualCircuitCompartmentRequest{}

=== ./internal/service/core/core_compute_capacity_reservation_resource.go ===
func CoreComputeCapacityReservationResource() *schema.Resource {
	return &schema.Resource{
func createCoreComputeCapacityReservation(d *schema.ResourceData, m interface{}) error {
	sync := &CoreComputeCapacityReservationResourceCrud{}
func readCoreComputeCapacityReservation(d *schema.ResourceData, m interface{}) error {
	sync := &CoreComputeCapacityReservationResourceCrud{}
func updateCoreComputeCapacityReservation(d *schema.ResourceData, m interface{}) error {
	sync := &CoreComputeCapacityReservationResourceCrud{}
func deleteCoreComputeCapacityReservation(d *schema.ResourceData, m interface{}) error {
	sync := &CoreComputeCapacityReservationResourceCrud{}
func (s *CoreComputeCapacityReservationResourceCrud) ID() string {
	return *s.Res.Id
func (s *CoreComputeCapacityReservationResourceCrud) CreatedPending() []string {
	return []string{
func (s *CoreComputeCapacityReservationResourceCrud) CreatedTarget() []string {
	return []string{
func (s *CoreComputeCapacityReservationResourceCrud) DeletedPending() []string {
	return []string{
func (s *CoreComputeCapacityReservationResourceCrud) DeletedTarget() []string {
	return []string{
func (s *CoreComputeCapacityReservationResourceCrud) Create() error {
	request := oci_core.CreateComputeCapacityReservationRequest{}
func (s *CoreComputeCapacityReservationResourceCrud) Get() error {
	request := oci_core.GetComputeCapacityReservationRequest{}
func (s *CoreComputeCapacityReservationResourceCrud) Update() error {
	if compartment, ok := s.D.GetOkExists("compartment_id"); ok && s.D.HasChange("compartment_id") {
func (s *CoreComputeCapacityReservationResourceCrud) Delete() error {
	request := oci_core.DeleteComputeCapacityReservationRequest{}
func (s *CoreComputeCapacityReservationResourceCrud) SetData() error {
	if s.Res.AvailabilityDomain != nil {
func (s *CoreComputeCapacityReservationResourceCrud) mapToClusterConfigDetails(fieldKeyFormat string) (oci_core.ClusterConfigDetails, error) {
	result := oci_core.ClusterConfigDetails{}
func (s *CoreComputeCapacityReservationResourceCrud) mapToInstanceReservationConfigDetails(fieldKeyFormat string) (oci_core.InstanceReservationConfigDetails, error) {
	result := oci_core.InstanceReservationConfigDetails{}
func (s *CoreComputeCapacityReservationResourceCrud) mapToInstanceReservationShapeConfigDetails(fieldKeyFormat string) (oci_core.InstanceReservationShapeConfigDetails, error) {
	result := oci_core.InstanceReservationShapeConfigDetails{}
func (s *CoreComputeCapacityReservationResourceCrud) updateCompartment(compartment interface{}) error {
	changeCompartmentRequest := oci_core.ChangeComputeCapacityReservationCompartmentRequest{}

=== ./internal/service/core/core_local_peering_gateway_resource.go ===
func CoreLocalPeeringGatewayResource() *schema.Resource {
	return &schema.Resource{
func createCoreLocalPeeringGateway(d *schema.ResourceData, m interface{}) error {
	sync := &CoreLocalPeeringGatewayResourceCrud{}
func readCoreLocalPeeringGateway(d *schema.ResourceData, m interface{}) error {
	sync := &CoreLocalPeeringGatewayResourceCrud{}
func updateCoreLocalPeeringGateway(d *schema.ResourceData, m interface{}) error {
	sync := &CoreLocalPeeringGatewayResourceCrud{}
func deleteCoreLocalPeeringGateway(d *schema.ResourceData, m interface{}) error {
	sync := &CoreLocalPeeringGatewayResourceCrud{}
func (s *CoreLocalPeeringGatewayResourceCrud) ID() string {
	return *s.Res.Id
func (s *CoreLocalPeeringGatewayResourceCrud) CreatedPending() []string {
	return []string{
func (s *CoreLocalPeeringGatewayResourceCrud) CreatedTarget() []string {
	return []string{
func (s *CoreLocalPeeringGatewayResourceCrud) DeletedPending() []string {
	return []string{
func (s *CoreLocalPeeringGatewayResourceCrud) DeletedTarget() []string {
	return []string{
func (s *CoreLocalPeeringGatewayResourceCrud) ConnectLocalPeeringGateway() error {
	if s.Res == nil || s.Res.Id == nil {
func (s *CoreLocalPeeringGatewayResourceCrud) Create() error {
	request := oci_core.CreateLocalPeeringGatewayRequest{}
func (s *CoreLocalPeeringGatewayResourceCrud) Get() error {
	request := oci_core.GetLocalPeeringGatewayRequest{}
func (s *CoreLocalPeeringGatewayResourceCrud) Update() error {
	if compartment, ok := s.D.GetOkExists("compartment_id"); ok && s.D.HasChange("compartment_id") {
func (s *CoreLocalPeeringGatewayResourceCrud) Delete() error {
	request := oci_core.DeleteLocalPeeringGatewayRequest{}
func (s *CoreLocalPeeringGatewayResourceCrud) SetData() error {
	if s.Res.CompartmentId != nil {
func (s *CoreLocalPeeringGatewayResourceCrud) updateCompartment(compartment interface{}) error {
	changeCompartmentRequest := oci_core.ChangeLocalPeeringGatewayCompartmentRequest{}

=== ./internal/service/core/core_private_ip_resource.go ===
func CorePrivateIpResource() *schema.Resource {
	return &schema.Resource{
func createCorePrivateIp(d *schema.ResourceData, m interface{}) error {
	sync := &CorePrivateIpResourceCrud{}
func readCorePrivateIp(d *schema.ResourceData, m interface{}) error {
	sync := &CorePrivateIpResourceCrud{}
func updateCorePrivateIp(d *schema.ResourceData, m interface{}) error {
	sync := &CorePrivateIpResourceCrud{}
func deleteCorePrivateIp(d *schema.ResourceData, m interface{}) error {
	sync := &CorePrivateIpResourceCrud{}
func (s *CorePrivateIpResourceCrud) ID() string {
	return *s.Res.Id
func (s *CorePrivateIpResourceCrud) Create() error {
	request := oci_core.CreatePrivateIpRequest{}
func (s *CorePrivateIpResourceCrud) Get() error {
	request := oci_core.GetPrivateIpRequest{}
func (s *CorePrivateIpResourceCrud) Update() error {
	request := oci_core.UpdatePrivateIpRequest{}
func (s *CorePrivateIpResourceCrud) Delete() error {
	request := oci_core.DeletePrivateIpRequest{}
func (s *CorePrivateIpResourceCrud) SetData() error {
	if s.Res.AvailabilityDomain != nil {

=== ./internal/service/core/core_volume_groups_data_source.go ===
func CoreVolumeGroupsDataSource() *schema.Resource {
	return &schema.Resource{
func readCoreVolumeGroups(d *schema.ResourceData, m interface{}) error {
	sync := &CoreVolumeGroupsDataSourceCrud{}
func (s *CoreVolumeGroupsDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *CoreVolumeGroupsDataSourceCrud) Get() error {
	request := oci_core.ListVolumeGroupsRequest{}
func (s *CoreVolumeGroupsDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/core/core_byoip_ranges_data_source.go ===
func CoreByoipRangesDataSource() *schema.Resource {
	return &schema.Resource{
func readCoreByoipRanges(d *schema.ResourceData, m interface{}) error {
	sync := &CoreByoipRangesDataSourceCrud{}
func (s *CoreByoipRangesDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *CoreByoipRangesDataSourceCrud) Get() error {
	request := oci_core.ListByoipRangesRequest{}
func (s *CoreByoipRangesDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/core/core_private_ip_data_source.go ===
func CorePrivateIpDataSource() *schema.Resource {
	fieldMap := make(map[string]*schema.Schema)
func readSingularCorePrivateIp(d *schema.ResourceData, m interface{}) error {
	sync := &CorePrivateIpDataSourceCrud{}
func (s *CorePrivateIpDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *CorePrivateIpDataSourceCrud) Get() error {
	request := oci_core.GetPrivateIpRequest{}
func (s *CorePrivateIpDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/core/core_cross_connects_data_source.go ===
func CoreCrossConnectsDataSource() *schema.Resource {
	return &schema.Resource{
func readCoreCrossConnects(d *schema.ResourceData, m interface{}) error {
	sync := &CoreCrossConnectsDataSourceCrud{}
func (s *CoreCrossConnectsDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *CoreCrossConnectsDataSourceCrud) Get() error {
	request := oci_core.ListCrossConnectsRequest{}
func (s *CoreCrossConnectsDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/core/core_instance_measured_boot_report_data_source.go ===
func CoreInstanceMeasuredBootReportDataSource() *schema.Resource {
	return &schema.Resource{
func readSingularCoreInstanceMeasuredBootReport(d *schema.ResourceData, m interface{}) error {
	sync := &CoreInstanceMeasuredBootReportDataSourceCrud{}
func (s *CoreInstanceMeasuredBootReportDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *CoreInstanceMeasuredBootReportDataSourceCrud) Get() error {
	request := oci_core.GetMeasuredBootReportRequest{}
func (s *CoreInstanceMeasuredBootReportDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/core/core_vnic_attachment_resource.go ===
func CoreVnicAttachmentResource() *schema.Resource {
	return &schema.Resource{
func createCoreVnicAttachment(d *schema.ResourceData, m interface{}) error {
	sync := &CoreVnicAttachmentResourceCrud{}
func readCoreVnicAttachment(d *schema.ResourceData, m interface{}) error {
	sync := &CoreVnicAttachmentResourceCrud{}
func updateCoreVnicAttachment(d *schema.ResourceData, m interface{}) error {
	sync := &CoreVnicAttachmentResourceCrud{}
func deleteCoreVnicAttachment(d *schema.ResourceData, m interface{}) error {
	sync := &CoreVnicAttachmentResourceCrud{}
func (s *CoreVnicAttachmentResourceCrud) ID() string {
	return *s.Res.Id
func (s *CoreVnicAttachmentResourceCrud) CreatedPending() []string {
	return []string{
func (s *CoreVnicAttachmentResourceCrud) CreatedTarget() []string {
	return []string{
func (s *CoreVnicAttachmentResourceCrud) DeletedPending() []string {
	return []string{
func (s *CoreVnicAttachmentResourceCrud) DeletedTarget() []string {
	return []string{
func (s *CoreVnicAttachmentResourceCrud) Create() error {
	request := oci_core.AttachVnicRequest{}
func (s *CoreVnicAttachmentResourceCrud) Update() error {
	// We should fetch the VnicAttachment in order to Update
func (s *CoreVnicAttachmentResourceCrud) Get() error {
	request := oci_core.GetVnicAttachmentRequest{}
func (s *CoreVnicAttachmentResourceCrud) Delete() error {
	request := oci_core.DetachVnicRequest{}
func (s *CoreVnicAttachmentResourceCrud) SetData() error {
	if s.Res.AvailabilityDomain != nil {
func (s *CoreVnicAttachmentResourceCrud) mapToCreateVnicDetails(fieldKeyFormat string) (oci_core.CreateVnicDetails, error) {
	result := oci_core.CreateVnicDetails{}
func (s *CoreVnicAttachmentResourceCrud) mapToUpdateVnicDetails(fieldKeyFormat string) (oci_core.UpdateVnicDetails, error) {
	result := oci_core.UpdateVnicDetails{}
func (s *CoreVnicAttachmentResourceCrud) mapToIpv6AddressIpv6SubnetCidrPairDetails(fieldKeyFormat string) (oci_core.Ipv6AddressIpv6SubnetCidrPairDetails, error) {
	result := oci_core.Ipv6AddressIpv6SubnetCidrPairDetails{}

=== ./internal/service/core/core_services_data_source.go ===
func CoreServicesDataSource() *schema.Resource {
	return &schema.Resource{
func readCoreServices(d *schema.ResourceData, m interface{}) error {
	sync := &CoreServicesDataSourceCrud{}
func (s *CoreServicesDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *CoreServicesDataSourceCrud) Get() error {
	request := oci_core.ListServicesRequest{}
func (s *CoreServicesDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/core/core_compute_capacity_topology_compute_bare_metal_hosts_data_source.go ===
func CoreComputeCapacityTopologyComputeBareMetalHostsDataSource() *schema.Resource {
	return &schema.Resource{
func readCoreComputeCapacityTopologyComputeBareMetalHosts(d *schema.ResourceData, m interface{}) error {
	sync := &CoreComputeCapacityTopologyComputeBareMetalHostsDataSourceCrud{}
func (s *CoreComputeCapacityTopologyComputeBareMetalHostsDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *CoreComputeCapacityTopologyComputeBareMetalHostsDataSourceCrud) Get() error {
	request := oci_core.ListComputeCapacityTopologyComputeBareMetalHostsRequest{}
func (s *CoreComputeCapacityTopologyComputeBareMetalHostsDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/core/core_instance_data_source.go ===
func CoreInstanceDataSource() *schema.Resource {
	fieldMap := make(map[string]*schema.Schema)
func readSingularCoreInstance(d *schema.ResourceData, m interface{}) error {
	sync := &CoreInstanceDataSourceCrud{}
func (s *CoreInstanceDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *CoreInstanceDataSourceCrud) Get() error {
	request := oci_core.GetInstanceRequest{}
func (s *CoreInstanceDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/core/core_public_ip_resource.go ===
func CorePublicIpResource() *schema.Resource {
	return &schema.Resource{
func createCorePublicIp(d *schema.ResourceData, m interface{}) error {
	sync := &CorePublicIpResourceCrud{}
func readCorePublicIp(d *schema.ResourceData, m interface{}) error {
	sync := &CorePublicIpResourceCrud{}
func updateCorePublicIp(d *schema.ResourceData, m interface{}) error {
	sync := &CorePublicIpResourceCrud{}
func deleteCorePublicIp(d *schema.ResourceData, m interface{}) error {
	sync := &CorePublicIpResourceCrud{}
func (s *CorePublicIpResourceCrud) ID() string {
	return *s.Res.Id
func (s *CorePublicIpResourceCrud) CreatedPending() []string {
	return []string{
func (s *CorePublicIpResourceCrud) CreatedTarget() []string {
	return []string{
func (s *CorePublicIpResourceCrud) DeletedPending() []string {
	return []string{
func (s *CorePublicIpResourceCrud) DeletedTarget() []string {
	return []string{
func (s *CorePublicIpResourceCrud) UpdatedPending() []string {
	return []string{
func (s *CorePublicIpResourceCrud) UpdatedTarget() []string {
	return []string{
func (s *CorePublicIpResourceCrud) Create() error {
	request := oci_core.CreatePublicIpRequest{}
func (s *CorePublicIpResourceCrud) Get() error {
	request := oci_core.GetPublicIpRequest{}
func (s *CorePublicIpResourceCrud) Update() error {
	if compartment, ok := s.D.GetOkExists("compartment_id"); ok && s.D.HasChange("compartment_id") {
func (s *CorePublicIpResourceCrud) Delete() error {
	request := oci_core.DeletePublicIpRequest{}
func (s *CorePublicIpResourceCrud) SetData() error {
	if s.Res.AssignedEntityId != nil {
func (s *CorePublicIpResourceCrud) updateCompartment(compartment interface{}) error {
	changeCompartmentRequest := oci_core.ChangePublicIpCompartmentRequest{}

=== ./internal/service/core/core_vcn_resource.go ===
func CoreVcnResource() *schema.Resource {
	return &schema.Resource{
func createCoreVcn(d *schema.ResourceData, m interface{}) error {
	sync := &CoreVcnResourceCrud{}
func readCoreVcn(d *schema.ResourceData, m interface{}) error {
	sync := &CoreVcnResourceCrud{}
func updateCoreVcn(d *schema.ResourceData, m interface{}) error {
	sync := &CoreVcnResourceCrud{}
func deleteCoreVcn(d *schema.ResourceData, m interface{}) error {
	sync := &CoreVcnResourceCrud{}
func (s *CoreVcnResourceCrud) ID() string {
	return *s.Res.Id
func (s *CoreVcnResourceCrud) CreatedPending() []string {
	return []string{
func (s *CoreVcnResourceCrud) CreatedTarget() []string {
	return []string{
func (s *CoreVcnResourceCrud) DeletedPending() []string {
	return []string{
func (s *CoreVcnResourceCrud) DeletedTarget() []string {
	return []string{
func (s *CoreVcnResourceCrud) Create() error {
	request := oci_core.CreateVcnRequest{}
func (s *CoreVcnResourceCrud) Get() error {
	request := oci_core.GetVcnRequest{}
func (s *CoreVcnResourceCrud) Update() error {
	if compartment, ok := s.D.GetOkExists("compartment_id"); ok && s.D.HasChange("compartment_id") {
func (s *CoreVcnResourceCrud) addByoIpv6CidrBlocks(byoipv6CidrDetails interface{}) error {
	request := oci_core.AddIpv6VcnCidrRequest{}
func (s *CoreVcnResourceCrud) updateIpv6CidrBlocks(oldRaw interface{}, newRaw interface{}) error {
	interfaces := oldRaw.([]interface{})
func (s *CoreVcnResourceCrud) Delete() error {
	request := oci_core.DeleteVcnRequest{}
func (s *CoreVcnResourceCrud) SetData() error {
	s.D.Set("byoipv6cidr_blocks", s.Res.Byoipv6CidrBlocks)
func (s *CoreVcnResourceCrud) mapToByoipv6CidrDetails(fieldKeyFormat string) (oci_core.Byoipv6CidrDetails, error) {
	result := oci_core.Byoipv6CidrDetails{}
func (s *CoreVcnResourceCrud) updateCompartment(compartment interface{}) error {
	changeCompartmentRequest := oci_core.ChangeVcnCompartmentRequest{}
func (s *CoreVcnResourceCrud) updateCidrBlocks(oldRaw interface{}, newRaw interface{}) error {
	interfaces := oldRaw.([]interface{})

=== ./internal/service/core/core_vnic_attachments_data_source.go ===
func CoreVnicAttachmentsDataSource() *schema.Resource {
	return &schema.Resource{
func readCoreVnicAttachments(d *schema.ResourceData, m interface{}) error {
	sync := &CoreVnicAttachmentsDataSourceCrud{}
func (s *CoreVnicAttachmentsDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *CoreVnicAttachmentsDataSourceCrud) Get() error {
	request := oci_core.ListVnicAttachmentsRequest{}
func (s *CoreVnicAttachmentsDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/core/core_volume_backup_policies_data_source.go ===
func CoreVolumeBackupPoliciesDataSource() *schema.Resource {
	return &schema.Resource{
func readCoreVolumeBackupPolicies(d *schema.ResourceData, m interface{}) error {
	sync := &CoreVolumeBackupPoliciesDataSourceCrud{}
func (s *CoreVolumeBackupPoliciesDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *CoreVolumeBackupPoliciesDataSourceCrud) Get() error {
	request := oci_core.ListVolumeBackupPoliciesRequest{}
func (s *CoreVolumeBackupPoliciesDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/core/core_byoip_range_data_source.go ===
func CoreByoipRangeDataSource() *schema.Resource {
	return &schema.Resource{
func readSingularCoreByoipRange(d *schema.ResourceData, m interface{}) error {
	sync := &CoreByoipRangeDataSourceCrud{}
func (s *CoreByoipRangeDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *CoreByoipRangeDataSourceCrud) Get() error {
	request := oci_core.GetByoipRangeRequest{}
func (s *CoreByoipRangeDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/core/core_image_shape_data_source.go ===
func CoreImageShapeDataSource() *schema.Resource {
	return &schema.Resource{
func readSingularCoreImageShape(d *schema.ResourceData, m interface{}) error {
	sync := &CoreImageShapeDataSourceCrud{}
func (s *CoreImageShapeDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *CoreImageShapeDataSourceCrud) Get() error {
	request := oci_core.GetImageShapeCompatibilityEntryRequest{}
func (s *CoreImageShapeDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/core/core_security_lists_data_source.go ===
func CoreSecurityListsDataSource() *schema.Resource {
	return &schema.Resource{
func readCoreSecurityLists(d *schema.ResourceData, m interface{}) error {
	sync := &CoreSecurityListsDataSourceCrud{}
func (s *CoreSecurityListsDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *CoreSecurityListsDataSourceCrud) Get() error {
	request := oci_core.ListSecurityListsRequest{}
func (s *CoreSecurityListsDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/core/core_vlans_data_source.go ===
func CoreVlansDataSource() *schema.Resource {
	return &schema.Resource{
func readCoreVlans(d *schema.ResourceData, m interface{}) error {
	sync := &CoreVlansDataSourceCrud{}
func (s *CoreVlansDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *CoreVlansDataSourceCrud) Get() error {
	request := oci_core.ListVlansRequest{}
func (s *CoreVlansDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/core/core_boot_volume_backups_data_source.go ===
func CoreBootVolumeBackupsDataSource() *schema.Resource {
	return &schema.Resource{
func readCoreBootVolumeBackups(d *schema.ResourceData, m interface{}) error {
	sync := &CoreBootVolumeBackupsDataSourceCrud{}
func (s *CoreBootVolumeBackupsDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *CoreBootVolumeBackupsDataSourceCrud) Get() error {
	request := oci_core.ListBootVolumeBackupsRequest{}
func (s *CoreBootVolumeBackupsDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/core/core_internet_gateways_data_source.go ===
func CoreInternetGatewaysDataSource() *schema.Resource {
	return &schema.Resource{
func readCoreInternetGateways(d *schema.ResourceData, m interface{}) error {
	sync := &CoreInternetGatewaysDataSourceCrud{}
func (s *CoreInternetGatewaysDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *CoreInternetGatewaysDataSourceCrud) Get() error {
	request := oci_core.ListInternetGatewaysRequest{}
func (s *CoreInternetGatewaysDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/core/core_volume_backups_data_source.go ===
func CoreVolumeBackupsDataSource() *schema.Resource {
	return &schema.Resource{
func readCoreVolumeBackups(d *schema.ResourceData, m interface{}) error {
	sync := &CoreVolumeBackupsDataSourceCrud{}
func (s *CoreVolumeBackupsDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *CoreVolumeBackupsDataSourceCrud) Get() error {
	request := oci_core.ListVolumeBackupsRequest{}
func (s *CoreVolumeBackupsDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/core/core_cluster_network_data_source.go ===
func CoreClusterNetworkDataSource() *schema.Resource {
	fieldMap := make(map[string]*schema.Schema)
func readSingularCoreClusterNetwork(d *schema.ResourceData, m interface{}) error {
	sync := &CoreClusterNetworkDataSourceCrud{}
func (s *CoreClusterNetworkDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *CoreClusterNetworkDataSourceCrud) Get() error {
	request := oci_core.GetClusterNetworkRequest{}
func (s *CoreClusterNetworkDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/core/core_fast_connect_provider_service_key_data_source.go ===
func CoreFastConnectProviderServiceKeyDataSource() *schema.Resource {
	return &schema.Resource{
func readSingularCoreFastConnectProviderServiceKey(d *schema.ResourceData, m interface{}) error {
	sync := &CoreFastConnectProviderServiceKeyDataSourceCrud{}
func (s *CoreFastConnectProviderServiceKeyDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *CoreFastConnectProviderServiceKeyDataSourceCrud) Get() error {
	request := oci_core.GetFastConnectProviderServiceKeyRequest{}
func (s *CoreFastConnectProviderServiceKeyDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/core/core_compute_image_capability_schemas_data_source.go ===
func CoreComputeImageCapabilitySchemasDataSource() *schema.Resource {
	return &schema.Resource{
func readCoreComputeImageCapabilitySchemas(d *schema.ResourceData, m interface{}) error {
	sync := &CoreComputeImageCapabilitySchemasDataSourceCrud{}
func (s *CoreComputeImageCapabilitySchemasDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *CoreComputeImageCapabilitySchemasDataSourceCrud) Get() error {
	request := oci_core.ListComputeImageCapabilitySchemasRequest{}
func (s *CoreComputeImageCapabilitySchemasDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/core/core_vcn_data_source.go ===
func CoreVcnDataSource() *schema.Resource {
	fieldMap := make(map[string]*schema.Schema)
func readSingularCoreVcn(d *schema.ResourceData, m interface{}) error {
	sync := &CoreVcnDataSourceCrud{}
func (s *CoreVcnDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *CoreVcnDataSourceCrud) Get() error {
	request := oci_core.GetVcnRequest{}
func (s *CoreVcnDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/core/core_fast_connect_provider_service_data_source.go ===
func CoreFastConnectProviderServiceDataSource() *schema.Resource {
	return &schema.Resource{
func readSingularCoreFastConnectProviderService(d *schema.ResourceData, m interface{}) error {
	sync := &CoreFastConnectProviderServiceDataSourceCrud{}
func (s *CoreFastConnectProviderServiceDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *CoreFastConnectProviderServiceDataSourceCrud) Get() error {
	request := oci_core.GetFastConnectProviderServiceRequest{}
func (s *CoreFastConnectProviderServiceDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/core/core_virtual_circuit_bandwidth_shapes_data_source.go ===
func CoreVirtualCircuitBandwidthShapesDataSource() *schema.Resource {
	return &schema.Resource{
func readCoreVirtualCircuitBandwidthShapes(d *schema.ResourceData, m interface{}) error {
	sync := &CoreVirtualCircuitBandwidthShapesDataSourceCrud{}
func (s *CoreVirtualCircuitBandwidthShapesDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *CoreVirtualCircuitBandwidthShapesDataSourceCrud) Get() error {
	request := oci_core.ListFastConnectProviderVirtualCircuitBandwidthShapesRequest{}
func (s *CoreVirtualCircuitBandwidthShapesDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/core/core_dedicated_vm_hosts_data_source.go ===
func CoreDedicatedVmHostsDataSource() *schema.Resource {
	return &schema.Resource{
func readCoreDedicatedVmHosts(d *schema.ResourceData, m interface{}) error {
	sync := &CoreDedicatedVmHostsDataSourceCrud{}
func (s *CoreDedicatedVmHostsDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *CoreDedicatedVmHostsDataSourceCrud) Get() error {
	request := oci_core.ListDedicatedVmHostsRequest{}
func (s *CoreDedicatedVmHostsDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/core/core_boot_volume_replica_data_source.go ===
func CoreBootVolumeReplicaDataSource() *schema.Resource {
	return &schema.Resource{
func readSingularCoreBootVolumeReplica(d *schema.ResourceData, m interface{}) error {
	sync := &CoreBootVolumeReplicaDataSourceCrud{}
func (s *CoreBootVolumeReplicaDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *CoreBootVolumeReplicaDataSourceCrud) Get() error {
	request := oci_core.GetBootVolumeReplicaRequest{}
func (s *CoreBootVolumeReplicaDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/core/core_console_histories_data_source.go ===
func CoreConsoleHistoriesDataSource() *schema.Resource {
	return &schema.Resource{
func readCoreConsoleHistories(d *schema.ResourceData, m interface{}) error {
	sync := &CoreConsoleHistoriesDataSourceCrud{}
func (s *CoreConsoleHistoriesDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *CoreConsoleHistoriesDataSourceCrud) Get() error {
	request := oci_core.ListConsoleHistoriesRequest{}
func (s *CoreConsoleHistoriesDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/core/core_volumes_data_source.go ===
func CoreVolumesDataSource() *schema.Resource {
	return &schema.Resource{
func readCoreVolumes(d *schema.ResourceData, m interface{}) error {
	sync := &CoreVolumesDataSourceCrud{}
func (s *CoreVolumesDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *CoreVolumesDataSourceCrud) Get() error {
	request := oci_core.ListVolumesRequest{}
func (s *CoreVolumesDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/core/core_compute_global_image_capability_schemas_data_source.go ===
func CoreComputeGlobalImageCapabilitySchemasDataSource() *schema.Resource {
	return &schema.Resource{
func readCoreComputeGlobalImageCapabilitySchemas(d *schema.ResourceData, m interface{}) error {
	sync := &CoreComputeGlobalImageCapabilitySchemasDataSourceCrud{}
func (s *CoreComputeGlobalImageCapabilitySchemasDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *CoreComputeGlobalImageCapabilitySchemasDataSourceCrud) Get() error {
	request := oci_core.ListComputeGlobalImageCapabilitySchemasRequest{}
func (s *CoreComputeGlobalImageCapabilitySchemasDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/core/core_ipsec_config_data_source.go ===
func CoreIpSecConnectionDeviceConfigDataSource() *schema.Resource {
	return &schema.Resource{
func readSingularCoreIpSecConnectionDeviceConfig(d *schema.ResourceData, m interface{}) error {
	sync := &CoreIpSecConnectionDeviceConfigDataSourceCrud{}
func (s *CoreIpSecConnectionDeviceConfigDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *CoreIpSecConnectionDeviceConfigDataSourceCrud) Get() error {
	request := oci_core.GetIPSecConnectionDeviceConfigRequest{}
func (s *CoreIpSecConnectionDeviceConfigDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/core/core_dedicated_vm_hosts_instances_data_source.go ===
func CoreDedicatedVmHostsInstancesDataSource() *schema.Resource {
	return &schema.Resource{
func readCoreDedicatedVmHostsInstances(d *schema.ResourceData, m interface{}) error {
	sync := &CoreDedicatedVmHostsInstancesDataSourceCrud{}
func (s *CoreDedicatedVmHostsInstancesDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *CoreDedicatedVmHostsInstancesDataSourceCrud) Get() error {
	request := oci_core.ListDedicatedVmHostInstancesRequest{}
func (s *CoreDedicatedVmHostsInstancesDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/core/core_image_data_source.go ===
func CoreImageDataSource() *schema.Resource {
	fieldMap := make(map[string]*schema.Schema)
func readSingularCoreImage(d *schema.ResourceData, m interface{}) error {
	sync := &CoreImageDataSourceCrud{}
func (s *CoreImageDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *CoreImageDataSourceCrud) Get() error {
	request := oci_core.GetImageRequest{}
func (s *CoreImageDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/core/helpers_core.go ===
func ConvertToDefaultVcnResourceSchema(resourceSchema *schema.Resource) *schema.Resource {
	if resourceSchema == nil {
func ImportDefaultVcnResource(d *schema.ResourceData, value interface{}) ([]*schema.ResourceData, error) {
	err := d.Set("manage_default_resource_id", d.Id())
func (s *CoreVolumeBackupResourceCrud) createBlockStorageSourceRegionClient(region string) error {
	if s.SourceRegionClient == nil {
func (s *CoreVolumeGroupBackupResourceCrud) createBlockStorageSourceRegionClient(region string) error {
	if s.SourceRegionClient == nil {
func (s *CoreBootVolumeBackupResourceCrud) createBlockStorageSourceRegionClient(region string) error {
	if s.SourceRegionClient == nil {
func ipv6CompressionDiffSuppressFunction(key string, old string, new string, d *schema.ResourceData) bool {
	if old == "" || new == "" {
func ipv6Cidr_blocksSuppressFunction(key string, old string, new string, d *schema.ResourceData) bool {
	if key == "ipv6cidr_blocks.#" {

=== ./internal/service/core/core_app_catalog_subscription_resource.go ===
func CoreAppCatalogSubscriptionResource() *schema.Resource {
	return &schema.Resource{
func createCoreAppCatalogSubscription(d *schema.ResourceData, m interface{}) error {
	sync := &CoreAppCatalogSubscriptionResourceCrud{}
func readCoreAppCatalogSubscription(d *schema.ResourceData, m interface{}) error {
	sync := &CoreAppCatalogSubscriptionResourceCrud{}
func deleteCoreAppCatalogSubscription(d *schema.ResourceData, m interface{}) error {
	sync := &CoreAppCatalogSubscriptionResourceCrud{}
func (s *CoreAppCatalogSubscriptionResourceCrud) ID() string {
	return getSubscriptionCompositeId(*s.Res.CompartmentId, *s.Res.ListingId, *s.Res.ListingResourceVersion)
func (s *CoreAppCatalogSubscriptionResourceCrud) Create() error {
	request := oci_core.CreateAppCatalogSubscriptionRequest{}
func (s *CoreAppCatalogSubscriptionResourceCrud) Get() error {
	compartmentId, listingId, listingResourceVersion, err := parseSubscriptionCompositeId(s.D.Id())
func (s *CoreAppCatalogSubscriptionResourceCrud) Delete() error {
	request := oci_core.DeleteAppCatalogSubscriptionRequest{}
func (s *CoreAppCatalogSubscriptionResourceCrud) SetData() error {
	if s.Res == nil {
func parseSubscriptionCompositeId(compositeId string) (compartmentId string, listingId string, listingResourceVersion string, err error) {
	parts := strings.Split(compositeId, "/")
func getSubscriptionCompositeId(compartmentId string, listingId string, listingResourceVersion string) string {
	compartmentId = url.PathEscape(compartmentId)

=== ./internal/service/core/core_public_ip_pools_data_source.go ===
func CorePublicIpPoolsDataSource() *schema.Resource {
	return &schema.Resource{
func readCorePublicIpPools(d *schema.ResourceData, m interface{}) error {
	sync := &CorePublicIpPoolsDataSourceCrud{}
func (s *CorePublicIpPoolsDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *CorePublicIpPoolsDataSourceCrud) Get() error {
	request := oci_core.ListPublicIpPoolsRequest{}
func (s *CorePublicIpPoolsDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/core/core_ipsec_connections_data_source.go ===
func CoreIpSecConnectionsDataSource() *schema.Resource {
	return &schema.Resource{
func readCoreIpSecConnections(d *schema.ResourceData, m interface{}) error {
	sync := &CoreIpSecConnectionsDataSourceCrud{}
func (s *CoreIpSecConnectionsDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *CoreIpSecConnectionsDataSourceCrud) Get() error {
	request := oci_core.ListIPSecConnectionsRequest{}
func (s *CoreIpSecConnectionsDataSourceCrud) SetData() error {
	if s.Res == nil {
func (s *CoreIpSecConnectionsDataSourceCrud) GetTunnels(Id *string) error {
	request := oci_core.ListIPSecConnectionTunnelsRequest{}
func (s *CoreIpSecConnectionsDataSourceCrud) GetDrgRouteTableId(tunnel oci_core.IpSecConnectionTunnel, t *PrivateIpSecConnectionTunnelResourceCrud) error {
	request := oci_core.ListDrgAttachmentsRequest{}

=== ./internal/service/core/core_network_security_group_security_rule_resource.go ===
func CoreNetworkSecurityGroupSecurityRuleResource() *schema.Resource {
	return &schema.Resource{
func createCoreNetworkSecurityGroupSecurityRule(d *schema.ResourceData, m interface{}) error {
	sync := &CoreSecurityRuleResourceCrud{}
func readCoreNetworkSecurityGroupSecurityRule(d *schema.ResourceData, m interface{}) error {
	sync := &CoreSecurityRuleResourceCrud{}
func updateCoreNetworkSecurityGroupSecurityRule(d *schema.ResourceData, m interface{}) error {
	sync := &CoreSecurityRuleResourceCrud{}
func deleteCoreNetworkSecurityGroupSecurityRule(d *schema.ResourceData, m interface{}) error {
	sync := &CoreSecurityRuleResourceCrud{}
func (s *CoreSecurityRuleResourceCrud) ID() string {
	return *s.Res.Id
func (s *CoreSecurityRuleResourceCrud) Create() error {

func (s *CoreSecurityRuleResourceCrud) Get() error {

func (s *CoreSecurityRuleResourceCrud) Update() error {
	request := oci_core.UpdateNetworkSecurityGroupSecurityRulesRequest{}
func (s *CoreSecurityRuleResourceCrud) Delete() error {

func (s *CoreSecurityRuleResourceCrud) SetData() error {

func (s *CoreSecurityRuleResourceCrud) mapToIcmpOptions(fieldKeyFormat string) (oci_core.IcmpOptions, error) {
	result := oci_core.IcmpOptions{}
func (s *CoreSecurityRuleResourceCrud) mapToPortRange(fieldKeyFormat string) (oci_core.PortRange, error) {
	result := oci_core.PortRange{}
func (s *CoreSecurityRuleResourceCrud) mapToTcpOptions(fieldKeyFormat string) (oci_core.TcpOptions, error) {
	result := oci_core.TcpOptions{}
func (s *CoreSecurityRuleResourceCrud) mapToUdpOptions(fieldKeyFormat string) (oci_core.UdpOptions, error) {
	result := oci_core.UdpOptions{}

=== ./internal/service/core/core_cpes_data_source.go ===
func CoreCpesDataSource() *schema.Resource {
	return &schema.Resource{
func readCoreCpes(d *schema.ResourceData, m interface{}) error {
	sync := &CoreCpesDataSourceCrud{}
func (s *CoreCpesDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *CoreCpesDataSourceCrud) Get() error {
	request := oci_core.ListCpesRequest{}
func (s *CoreCpesDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/core/core_letter_of_authority_data_source.go ===
func CoreLetterOfAuthorityDataSource() *schema.Resource {
	return &schema.Resource{
func readSingularCoreLetterOfAuthority(d *schema.ResourceData, m interface{}) error {
	sync := &CoreLetterOfAuthorityDataSourceCrud{}
func (s *CoreLetterOfAuthorityDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *CoreLetterOfAuthorityDataSourceCrud) Get() error {
	request := oci_core.GetCrossConnectLetterOfAuthorityRequest{}
func (s *CoreLetterOfAuthorityDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/core/core_network_security_group_security_rules_data_source.go ===
func CoreNetworkSecurityGroupSecurityRulesDataSource() *schema.Resource {
	return &schema.Resource{
func readCoreNetworkSecurityGroupSecurityRules(d *schema.ResourceData, m interface{}) error {
	sync := &CoreNetworkSecurityGroupSecurityRulesDataSourceCrud{}
func (s *CoreNetworkSecurityGroupSecurityRulesDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *CoreNetworkSecurityGroupSecurityRulesDataSourceCrud) Get() error {
	request := oci_core.ListNetworkSecurityGroupSecurityRulesRequest{}
func (s *CoreNetworkSecurityGroupSecurityRulesDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/core/core_ipv6_data_source.go ===
func CoreIpv6DataSource() *schema.Resource {
	fieldMap := make(map[string]*schema.Schema)
func readSingularCoreIpv6(d *schema.ResourceData, m interface{}) error {
	sync := &CoreIpv6DataSourceCrud{}
func (s *CoreIpv6DataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *CoreIpv6DataSourceCrud) Get() error {
	request := oci_core.GetIpv6Request{}
func (s *CoreIpv6DataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/core/core_compute_capacity_report_resource.go ===
func CoreComputeCapacityReportResource() *schema.Resource {
	return &schema.Resource{
func createCoreComputeCapacityReport(d *schema.ResourceData, m interface{}) error {
	sync := &CoreComputeCapacityReportResourceCrud{}
func readCoreComputeCapacityReport(d *schema.ResourceData, m interface{}) error {
	return nil
func deleteCoreComputeCapacityReport(d *schema.ResourceData, m interface{}) error {
	return nil
func (s *CoreComputeCapacityReportResourceCrud) ID() string {
	return *s.Res.CompartmentId
func (s *CoreComputeCapacityReportResourceCrud) Create() error {
	request := oci_core.CreateComputeCapacityReportRequest{}
func (s *CoreComputeCapacityReportResourceCrud) SetData() error {
	if s.Res.AvailabilityDomain != nil {
func (s *CoreComputeCapacityReportResourceCrud) mapToCapacityReportInstanceShapeConfig(fieldKeyFormat string) (oci_core.CapacityReportInstanceShapeConfig, error) {
	result := oci_core.CapacityReportInstanceShapeConfig{}
func (s *CoreComputeCapacityReportResourceCrud) mapToCreateCapacityReportShapeAvailabilityDetails(fieldKeyFormat string) (oci_core.CreateCapacityReportShapeAvailabilityDetails, error) {
	result := oci_core.CreateCapacityReportShapeAvailabilityDetails{}

=== ./internal/service/core/core_cross_connect_resource.go ===
func CoreCrossConnectResource() *schema.Resource {
	return &schema.Resource{
func createCoreCrossConnect(d *schema.ResourceData, m interface{}) error {
	sync := &CoreCrossConnectResourceCrud{}
func readCoreCrossConnect(d *schema.ResourceData, m interface{}) error {
	sync := &CoreCrossConnectResourceCrud{}
func updateCoreCrossConnect(d *schema.ResourceData, m interface{}) error {
	sync := &CoreCrossConnectResourceCrud{}
func deleteCoreCrossConnect(d *schema.ResourceData, m interface{}) error {
	sync := &CoreCrossConnectResourceCrud{}
func (s *CoreCrossConnectResourceCrud) ID() string {
	return *s.Res.Id
func (s *CoreCrossConnectResourceCrud) CreatedPending() []string {
	return []string{
func (s *CoreCrossConnectResourceCrud) CreatedTarget() []string {
	return []string{
func (s *CoreCrossConnectResourceCrud) DeletedPending() []string {
	return []string{
func (s *CoreCrossConnectResourceCrud) DeletedTarget() []string {
	return []string{
func (s *CoreCrossConnectResourceCrud) UpdatedPending() []string {
	return []string{
func (s *CoreCrossConnectResourceCrud) UpdatedTarget() []string {
	if _, ok := s.D.GetOkExists("is_active"); ok {
func (s *CoreCrossConnectResourceCrud) Create() error {
	request := oci_core.CreateCrossConnectRequest{}
func (s *CoreCrossConnectResourceCrud) Get() error {
	request := oci_core.GetCrossConnectRequest{}
func (s *CoreCrossConnectResourceCrud) Update() error {
	if compartment, ok := s.D.GetOkExists("compartment_id"); ok && s.D.HasChange("compartment_id") {
func (s *CoreCrossConnectResourceCrud) Delete() error {
	request := oci_core.DeleteCrossConnectRequest{}
func (s *CoreCrossConnectResourceCrud) SetData() error {
	if s.Res.CompartmentId != nil {
func (s *CoreCrossConnectResourceCrud) mapToCreateMacsecKey(fieldKeyFormat string) (oci_core.CreateMacsecKey, error) {
	result := oci_core.CreateMacsecKey{}
func (s *CoreCrossConnectResourceCrud) mapToUpdateMacsecKey(fieldKeyFormat string) (oci_core.UpdateMacsecKey, error) {
	result := oci_core.UpdateMacsecKey{}
func (s *CoreCrossConnectResourceCrud) mapToCreateMacsecProperties(fieldKeyFormat string) (oci_core.CreateMacsecProperties, error) {
	result := oci_core.CreateMacsecProperties{}
func (s *CoreCrossConnectResourceCrud) mapToUpdateMacsecProperties(fieldKeyFormat string) (oci_core.UpdateMacsecProperties, error) {
	result := oci_core.UpdateMacsecProperties{}
func (s *CoreCrossConnectResourceCrud) updateCompartment(compartment interface{}) error {
	changeCompartmentRequest := oci_core.ChangeCrossConnectCompartmentRequest{}

=== ./internal/service/core/core_compute_capacity_reservation_data_source.go ===
func CoreComputeCapacityReservationDataSource() *schema.Resource {
	fieldMap := make(map[string]*schema.Schema)
func readSingularCoreComputeCapacityReservation(d *schema.ResourceData, m interface{}) error {
	sync := &CoreComputeCapacityReservationDataSourceCrud{}
func (s *CoreComputeCapacityReservationDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *CoreComputeCapacityReservationDataSourceCrud) Get() error {
	request := oci_core.GetComputeCapacityReservationRequest{}
func (s *CoreComputeCapacityReservationDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/core/core_app_catalog_listing_data_source.go ===
func CoreAppCatalogListingDataSource() *schema.Resource {
	return &schema.Resource{
func readSingularCoreAppCatalogListing(d *schema.ResourceData, m interface{}) error {
	sync := &CoreAppCatalogListingDataSourceCrud{}
func (s *CoreAppCatalogListingDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *CoreAppCatalogListingDataSourceCrud) Get() error {
	request := oci_core.GetAppCatalogListingRequest{}
func (s *CoreAppCatalogListingDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/core/core_network_security_group_data_source.go ===
func CoreNetworkSecurityGroupDataSource() *schema.Resource {
	fieldMap := make(map[string]*schema.Schema)
func readSingularCoreNetworkSecurityGroup(d *schema.ResourceData, m interface{}) error {
	sync := &CoreNetworkSecurityGroupDataSourceCrud{}
func (s *CoreNetworkSecurityGroupDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *CoreNetworkSecurityGroupDataSourceCrud) Get() error {
	request := oci_core.GetNetworkSecurityGroupRequest{}
func (s *CoreNetworkSecurityGroupDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/core/core_ipsec_algorithm_data_source.go ===
func CoreIpsecAlgorithmDataSource() *schema.Resource {
	return &schema.Resource{
func readSingularCoreIpsecAlgorithm(d *schema.ResourceData, m interface{}) error {
	sync := &CoreIpsecAlgorithmDataSourceCrud{}
func (s *CoreIpsecAlgorithmDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *CoreIpsecAlgorithmDataSourceCrud) Get() error {
	request := oci_core.GetAllowedIkeIPSecParametersRequest{}
func (s *CoreIpsecAlgorithmDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/core/core_byoip_allocated_ranges_data_source.go ===
func CoreByoipAllocatedRangesDataSource() *schema.Resource {
	return &schema.Resource{
func readCoreByoipAllocatedRanges(d *schema.ResourceData, m interface{}) error {
	sync := &CoreByoipAllocatedRangesDataSourceCrud{}
func (s *CoreByoipAllocatedRangesDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *CoreByoipAllocatedRangesDataSourceCrud) Get() error {
	request := oci_core.ListByoipAllocatedRangesRequest{}
func (s *CoreByoipAllocatedRangesDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/core/core_instance_configurations_data_source.go ===
func CoreInstanceConfigurationsDataSource() *schema.Resource {
	return &schema.Resource{
func readCoreInstanceConfigurations(d *schema.ResourceData, m interface{}) error {
	sync := &CoreInstanceConfigurationsDataSourceCrud{}
func (s *CoreInstanceConfigurationsDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *CoreInstanceConfigurationsDataSourceCrud) Get() error {
	request := oci_core.ListInstanceConfigurationsRequest{}
func (s *CoreInstanceConfigurationsDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/core/core_network_security_group_resource.go ===
func CoreNetworkSecurityGroupResource() *schema.Resource {
	return &schema.Resource{
func createCoreNetworkSecurityGroup(d *schema.ResourceData, m interface{}) error {
	sync := &CoreNetworkSecurityGroupResourceCrud{}
func readCoreNetworkSecurityGroup(d *schema.ResourceData, m interface{}) error {
	sync := &CoreNetworkSecurityGroupResourceCrud{}
func updateCoreNetworkSecurityGroup(d *schema.ResourceData, m interface{}) error {
	sync := &CoreNetworkSecurityGroupResourceCrud{}
func deleteCoreNetworkSecurityGroup(d *schema.ResourceData, m interface{}) error {
	sync := &CoreNetworkSecurityGroupResourceCrud{}
func (s *CoreNetworkSecurityGroupResourceCrud) ID() string {
	return *s.Res.Id
func (s *CoreNetworkSecurityGroupResourceCrud) CreatedPending() []string {
	return []string{
func (s *CoreNetworkSecurityGroupResourceCrud) CreatedTarget() []string {
	return []string{
func (s *CoreNetworkSecurityGroupResourceCrud) DeletedPending() []string {
	return []string{
func (s *CoreNetworkSecurityGroupResourceCrud) DeletedTarget() []string {
	return []string{
func (s *CoreNetworkSecurityGroupResourceCrud) Create() error {
	request := oci_core.CreateNetworkSecurityGroupRequest{}
func (s *CoreNetworkSecurityGroupResourceCrud) Get() error {
	request := oci_core.GetNetworkSecurityGroupRequest{}
func (s *CoreNetworkSecurityGroupResourceCrud) Update() error {
	if compartment, ok := s.D.GetOkExists("compartment_id"); ok && s.D.HasChange("compartment_id") {
func (s *CoreNetworkSecurityGroupResourceCrud) Delete() error {
	request := oci_core.DeleteNetworkSecurityGroupRequest{}
func (s *CoreNetworkSecurityGroupResourceCrud) SetData() error {
	if s.Res.CompartmentId != nil {
func (s *CoreNetworkSecurityGroupResourceCrud) updateCompartment(compartment interface{}) error {
	changeCompartmentRequest := oci_core.ChangeNetworkSecurityGroupCompartmentRequest{}

=== ./internal/service/core/core_dedicated_vm_host_resource.go ===
func CoreDedicatedVmHostResource() *schema.Resource {
	return &schema.Resource{
func createCoreDedicatedVmHost(d *schema.ResourceData, m interface{}) error {
	sync := &CoreDedicatedVmHostResourceCrud{}
func readCoreDedicatedVmHost(d *schema.ResourceData, m interface{}) error {
	sync := &CoreDedicatedVmHostResourceCrud{}
func updateCoreDedicatedVmHost(d *schema.ResourceData, m interface{}) error {
	sync := &CoreDedicatedVmHostResourceCrud{}
func deleteCoreDedicatedVmHost(d *schema.ResourceData, m interface{}) error {
	sync := &CoreDedicatedVmHostResourceCrud{}
func (s *CoreDedicatedVmHostResourceCrud) ID() string {
	return *s.Res.Id
func (s *CoreDedicatedVmHostResourceCrud) CreatedPending() []string {
	return []string{
func (s *CoreDedicatedVmHostResourceCrud) CreatedTarget() []string {
	return []string{
func (s *CoreDedicatedVmHostResourceCrud) DeletedPending() []string {
	return []string{
func (s *CoreDedicatedVmHostResourceCrud) DeletedTarget() []string {
	return []string{
func (s *CoreDedicatedVmHostResourceCrud) Create() error {
	request := oci_core.CreateDedicatedVmHostRequest{}
func (s *CoreDedicatedVmHostResourceCrud) Get() error {
	request := oci_core.GetDedicatedVmHostRequest{}
func (s *CoreDedicatedVmHostResourceCrud) Update() error {
	if compartment, ok := s.D.GetOkExists("compartment_id"); ok && s.D.HasChange("compartment_id") {
func (s *CoreDedicatedVmHostResourceCrud) Delete() error {
	request := oci_core.DeleteDedicatedVmHostRequest{}
func (s *CoreDedicatedVmHostResourceCrud) SetData() error {
	if s.Res.AvailabilityDomain != nil {
func (s *CoreDedicatedVmHostResourceCrud) updateCompartment(compartment interface{}) error {
	changeCompartmentRequest := oci_core.ChangeDedicatedVmHostCompartmentRequest{}

=== ./internal/service/core/core_compute_capacity_topology_data_source.go ===
func CoreComputeCapacityTopologyDataSource() *schema.Resource {
	fieldMap := make(map[string]*schema.Schema)
func readSingularCoreComputeCapacityTopology(d *schema.ResourceData, m interface{}) error {
	sync := &CoreComputeCapacityTopologyDataSourceCrud{}
func (s *CoreComputeCapacityTopologyDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *CoreComputeCapacityTopologyDataSourceCrud) Get() error {
	request := oci_core.GetComputeCapacityTopologyRequest{}
func (s *CoreComputeCapacityTopologyDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/core/core_instance_credentials_data_source.go ===
func CoreInstanceCredentialDataSource() *schema.Resource {
	return &schema.Resource{
func readSingularCoreInstanceCredential(d *schema.ResourceData, m interface{}) error {
	sync := &CoreInstanceCredentialDataSourceCrud{}
func (s *CoreInstanceCredentialDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *CoreInstanceCredentialDataSourceCrud) Get() error {
	request := oci_core.GetWindowsInstanceInitialCredentialsRequest{}
func (s *CoreInstanceCredentialDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/core/core_drg_attachments_list_resource.go ===
func CoreDrgAttachmentsListResource() *schema.Resource {
	return &schema.Resource{
func createCoreDrgAttachmentsList(d *schema.ResourceData, m interface{}) error {
	sync := &CoreDrgAttachmentsListResourceCrud{}
func readCoreDrgAttachmentsList(d *schema.ResourceData, m interface{}) error {
	return nil
func deleteCoreDrgAttachmentsList(d *schema.ResourceData, m interface{}) error {
	return nil
func (s *CoreDrgAttachmentsListResourceCrud) ID() string {
	return tfresource.GenerateDataSourceHashID("CoreDrgAttachmentsListResource-", CoreDrgAttachmentsListResource(), s.D)
func (s *CoreDrgAttachmentsListResourceCrud) Create() error {
	request := oci_core.GetAllDrgAttachmentsRequest{}
func (s *CoreDrgAttachmentsListResourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/core/core_instance_devices_data_source.go ===
func CoreInstanceDevicesDataSource() *schema.Resource {
	return &schema.Resource{
func readCoreInstanceDevices(d *schema.ResourceData, m interface{}) error {
	sync := &CoreInstanceDevicesDataSourceCrud{}
func (s *CoreInstanceDevicesDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *CoreInstanceDevicesDataSourceCrud) Get() error {
	request := oci_core.ListInstanceDevicesRequest{}
func (s *CoreInstanceDevicesDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/core/core_vtaps_data_source.go ===
func CoreVtapsDataSource() *schema.Resource {
	return &schema.Resource{
func readCoreVtaps(d *schema.ResourceData, m interface{}) error {
	sync := &CoreVtapsDataSourceCrud{}
func (s *CoreVtapsDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *CoreVtapsDataSourceCrud) Get() error {
	request := oci_core.ListVtapsRequest{}
func (s *CoreVtapsDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/core/core_boot_volume_replicas_data_source.go ===
func CoreBootVolumeReplicasDataSource() *schema.Resource {
	return &schema.Resource{
func readCoreBootVolumeReplicas(d *schema.ResourceData, m interface{}) error {
	sync := &CoreBootVolumeReplicasDataSourceCrud{}
func (s *CoreBootVolumeReplicasDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *CoreBootVolumeReplicasDataSourceCrud) Get() error {
	request := oci_core.ListBootVolumeReplicasRequest{}
func (s *CoreBootVolumeReplicasDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/core/core_compute_capacity_reservation_instance_shapes_data_source.go ===
func CoreComputeCapacityReservationInstanceShapesDataSource() *schema.Resource {
	return &schema.Resource{
func readCoreComputeCapacityReservationInstanceShapes(d *schema.ResourceData, m interface{}) error {
	sync := &CoreComputeCapacityReservationInstanceShapesDataSourceCrud{}
func (s *CoreComputeCapacityReservationInstanceShapesDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *CoreComputeCapacityReservationInstanceShapesDataSourceCrud) Get() error {
	request := oci_core.ListComputeCapacityReservationInstanceShapesRequest{}
func (s *CoreComputeCapacityReservationInstanceShapesDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/core/core_ipsec_resource.go ===
func CoreIpSecConnectionResource() *schema.Resource {
	return &schema.Resource{
func createCoreIpSecConnection(d *schema.ResourceData, m interface{}) error {
	sync := &CoreIpSecConnectionResourceCrud{}
func readCoreIpSecConnection(d *schema.ResourceData, m interface{}) error {
	sync := &CoreIpSecConnectionResourceCrud{}
func updateCoreIpSecConnection(d *schema.ResourceData, m interface{}) error {
	sync := &CoreIpSecConnectionResourceCrud{}
func deleteCoreIpSecConnection(d *schema.ResourceData, m interface{}) error {
	sync := &CoreIpSecConnectionResourceCrud{}
func (s *CoreIpSecConnectionResourceCrud) ID() string {
	return *s.Res.Id
func (s *CoreIpSecConnectionResourceCrud) CreatedPending() []string {
	return []string{
func (s *CoreIpSecConnectionResourceCrud) CreatedTarget() []string {
	return []string{
func (s *CoreIpSecConnectionResourceCrud) DeletedPending() []string {
	return []string{
func (s *CoreIpSecConnectionResourceCrud) DeletedTarget() []string {
	return []string{
func (s *CoreIpSecConnectionResourceCrud) UpdatedPending() []string {
	return []string{
func (s *CoreIpSecConnectionResourceCrud) UpdatedTarget() []string {
	return []string{
func (s *CoreIpSecConnectionResourceCrud) Create() error {
	request := oci_core.CreateIPSecConnectionRequest{}
func (s *CoreIpSecConnectionResourceCrud) Get() error {
	request := oci_core.GetIPSecConnectionRequest{}
func (s *CoreIpSecConnectionResourceCrud) Update() error {
	if compartment, ok := s.D.GetOkExists("compartment_id"); ok && s.D.HasChange("compartment_id") {
func (s *CoreIpSecConnectionResourceCrud) Delete() error {
	request := oci_core.DeleteIPSecConnectionRequest{}
func (s *CoreIpSecConnectionResourceCrud) SetData() error {
	if s.Res.CompartmentId != nil {
func (s *CoreIpSecConnectionResourceCrud) updateCompartment(compartment interface{}) error {
	changeCompartmentRequest := oci_core.ChangeIPSecConnectionCompartmentRequest{}
func (s *CoreIpSecConnectionResourceCrud) mapToTunnelConfiguration(fieldKeyFormat string) oci_core.CreateIpSecConnectionTunnelDetails {
	result := oci_core.CreateIpSecConnectionTunnelDetails{}
func (s *CoreIpSecConnectionResourceCrud) GetTunnels() error {
	if inputTunnelConfigs, ok := s.D.GetOk("tunnel_configuration"); ok {
func (s *CoreIpSecConnectionResourceCrud) GetDrgRouteTableId(tunnel *oci_core.IpSecConnectionTunnel, t *PrivateIpSecConnectionTunnelResourceCrud) error {
	request := oci_core.ListDrgAttachmentsRequest{}

=== ./internal/service/core/core_boot_volume_data_source.go ===
func CoreBootVolumeDataSource() *schema.Resource {
	fieldMap := make(map[string]*schema.Schema)
func readSingularCoreBootVolume(d *schema.ResourceData, m interface{}) error {
	sync := &CoreBootVolumeDataSourceCrud{}
func (s *CoreBootVolumeDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *CoreBootVolumeDataSourceCrud) Get() error {
	request := oci_core.GetBootVolumeRequest{}
func (s *CoreBootVolumeDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/core/core_instance_maintenance_reboot_data_source.go ===
func CoreInstanceMaintenanceRebootDataSource() *schema.Resource {
	return &schema.Resource{
func readSingularCoreInstanceMaintenanceReboot(d *schema.ResourceData, m interface{}) error {
	sync := &CoreInstanceMaintenanceRebootDataSourceCrud{}
func (s *CoreInstanceMaintenanceRebootDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *CoreInstanceMaintenanceRebootDataSourceCrud) Get() error {
	request := oci_core.GetInstanceMaintenanceRebootRequest{}
func (s *CoreInstanceMaintenanceRebootDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/core/core_remote_peering_connections_data_source.go ===
func CoreRemotePeeringConnectionsDataSource() *schema.Resource {
	return &schema.Resource{
func readCoreRemotePeeringConnections(d *schema.ResourceData, m interface{}) error {
	sync := &CoreRemotePeeringConnectionsDataSourceCrud{}
func (s *CoreRemotePeeringConnectionsDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *CoreRemotePeeringConnectionsDataSourceCrud) Get() error {
	request := oci_core.ListRemotePeeringConnectionsRequest{}
func (s *CoreRemotePeeringConnectionsDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/core/core_vnic_data_source.go ===
func CoreVnicDataSource() *schema.Resource {
	return &schema.Resource{
func readSingularCoreVnic(d *schema.ResourceData, m interface{}) error {
	sync := &CoreVnicDataSourceCrud{}
func (s *CoreVnicDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *CoreVnicDataSourceCrud) Get() error {
	request := oci_core.GetVnicRequest{}
func (s *CoreVnicDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/core/core_volume_backup_resource.go ===
func CoreVolumeBackupResource() *schema.Resource {
	return &schema.Resource{
func createCoreVolumeBackup(d *schema.ResourceData, m interface{}) error {
	sync := &CoreVolumeBackupResourceCrud{}
func readCoreVolumeBackup(d *schema.ResourceData, m interface{}) error {
	sync := &CoreVolumeBackupResourceCrud{}
func updateCoreVolumeBackup(d *schema.ResourceData, m interface{}) error {
	sync := &CoreVolumeBackupResourceCrud{}
func deleteCoreVolumeBackup(d *schema.ResourceData, m interface{}) error {
	sync := &CoreVolumeBackupResourceCrud{}
func (s *CoreVolumeBackupResourceCrud) ID() string {
	return *s.Res.Id
func (s *CoreVolumeBackupResourceCrud) CreatedPending() []string {
	// Creating is considered "Created" because it can take some time to finish
func (s *CoreVolumeBackupResourceCrud) CreatedTarget() []string {
	return []string{
func (s *CoreVolumeBackupResourceCrud) DeletedPending() []string {
	return []string{
func (s *CoreVolumeBackupResourceCrud) DeletedTarget() []string {
	return []string{
func (s *CoreVolumeBackupResourceCrud) Create() error {
	if s.isCopyCreate() {
func (s *CoreVolumeBackupResourceCrud) isCopyCreate() bool {
	if sourceDetails, ok := s.D.GetOkExists("source_details"); ok {
func (s *CoreVolumeBackupResourceCrud) createVolumeBackupCopy() error {
	copyVolumeBackupRequest := oci_core.CopyVolumeBackupRequest{}
func (s *CoreVolumeBackupResourceCrud) CreateVolumeBackup() error {
	request := oci_core.CreateVolumeBackupRequest{}
func (s *CoreVolumeBackupResourceCrud) Get() error {
	request := oci_core.GetVolumeBackupRequest{}
func (s *CoreVolumeBackupResourceCrud) Update() error {
	if compartment, ok := s.D.GetOkExists("compartment_id"); ok && s.D.HasChange("compartment_id") {
func (s *CoreVolumeBackupResourceCrud) Delete() error {
	request := oci_core.DeleteVolumeBackupRequest{}
func (s *CoreVolumeBackupResourceCrud) SetData() error {
	if s.Res.CompartmentId != nil {
func (s *CoreVolumeBackupResourceCrud) updateCompartment(compartment interface{}) error {
	changeCompartmentRequest := oci_core.ChangeVolumeBackupCompartmentRequest{}

=== ./internal/service/core/core_images_data_source.go ===
func CoreImagesDataSource() *schema.Resource {
	return &schema.Resource{
func readCoreImages(d *schema.ResourceData, m interface{}) error {
	sync := &CoreImagesDataSourceCrud{}
func (s *CoreImagesDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *CoreImagesDataSourceCrud) Get() error {
	request := oci_core.ListImagesRequest{}
func (s *CoreImagesDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/core/core_volume_group_backup_resource.go ===
func CoreVolumeGroupBackupResource() *schema.Resource {
	return &schema.Resource{
func createCoreVolumeGroupBackup(d *schema.ResourceData, m interface{}) error {
	sync := &CoreVolumeGroupBackupResourceCrud{}
func readCoreVolumeGroupBackup(d *schema.ResourceData, m interface{}) error {
	sync := &CoreVolumeGroupBackupResourceCrud{}
func updateCoreVolumeGroupBackup(d *schema.ResourceData, m interface{}) error {
	sync := &CoreVolumeGroupBackupResourceCrud{}
func deleteCoreVolumeGroupBackup(d *schema.ResourceData, m interface{}) error {
	sync := &CoreVolumeGroupBackupResourceCrud{}
func (s *CoreVolumeGroupBackupResourceCrud) ID() string {
	return *s.Res.Id
func (s *CoreVolumeGroupBackupResourceCrud) CreatedPending() []string {
	return []string{
func (s *CoreVolumeGroupBackupResourceCrud) CreatedTarget() []string {
	return []string{
func (s *CoreVolumeGroupBackupResourceCrud) DeletedPending() []string {
	return []string{
func (s *CoreVolumeGroupBackupResourceCrud) DeletedTarget() []string {
	return []string{
func (s *CoreVolumeGroupBackupResourceCrud) Create() error {
	if s.isCopyCreate() {
func (s *CoreVolumeGroupBackupResourceCrud) isCopyCreate() bool {
	if sourceDetails, ok := s.D.GetOkExists("source_details"); ok {
func (s *CoreVolumeGroupBackupResourceCrud) CreateVolumeGroupBackup() error {
	request := oci_core.CreateVolumeGroupBackupRequest{}
func (s *CoreVolumeGroupBackupResourceCrud) createVolumeGroupBackupCopy() error {
	copyVolumeGroupBackupRequest := oci_core.CopyVolumeGroupBackupRequest{}
func (s *CoreVolumeGroupBackupResourceCrud) Get() error {
	request := oci_core.GetVolumeGroupBackupRequest{}
func (s *CoreVolumeGroupBackupResourceCrud) Update() error {
	if compartment, ok := s.D.GetOkExists("compartment_id"); ok && s.D.HasChange("compartment_id") {
func (s *CoreVolumeGroupBackupResourceCrud) Delete() error {
	request := oci_core.DeleteVolumeGroupBackupRequest{}
func (s *CoreVolumeGroupBackupResourceCrud) SetData() error {
	if s.Res.CompartmentId != nil {
func (s *CoreVolumeGroupBackupResourceCrud) updateCompartment(compartment interface{}) error {
	changeCompartmentRequest := oci_core.ChangeVolumeGroupBackupCompartmentRequest{}

=== ./internal/service/core/core_volume_attachments_data_source.go ===
func CoreVolumeAttachmentsDataSource() *schema.Resource {
	return &schema.Resource{
func readCoreVolumeAttachments(d *schema.ResourceData, m interface{}) error {
	sync := &CoreVolumeAttachmentsDataSourceCrud{}
func (s *CoreVolumeAttachmentsDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *CoreVolumeAttachmentsDataSourceCrud) Get() error {
	request := oci_core.ListVolumeAttachmentsRequest{}
func (s *CoreVolumeAttachmentsDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/core/core_drgs_data_source.go ===
func CoreDrgsDataSource() *schema.Resource {
	return &schema.Resource{
func readCoreDrgs(d *schema.ResourceData, m interface{}) error {
	sync := &CoreDrgsDataSourceCrud{}
func (s *CoreDrgsDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *CoreDrgsDataSourceCrud) Get() error {
	request := oci_core.ListDrgsRequest{}
func (s *CoreDrgsDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/core/core_image_resource.go ===
func CoreImageResource() *schema.Resource {
	return &schema.Resource{
func createCoreImage(d *schema.ResourceData, m interface{}) error {
	sync := &CoreImageResourceCrud{}
func readCoreImage(d *schema.ResourceData, m interface{}) error {
	sync := &CoreImageResourceCrud{}
func updateCoreImage(d *schema.ResourceData, m interface{}) error {
	sync := &CoreImageResourceCrud{}
func deleteCoreImage(d *schema.ResourceData, m interface{}) error {
	sync := &CoreImageResourceCrud{}
func (s *CoreImageResourceCrud) ID() string {
	return *s.Res.Id
func (s *CoreImageResourceCrud) CreatedPending() []string {
	return []string{
func (s *CoreImageResourceCrud) CreatedTarget() []string {
	return []string{
func (s *CoreImageResourceCrud) DeletedPending() []string {
	return []string{
func (s *CoreImageResourceCrud) DeletedTarget() []string {
	return []string{
func (s *CoreImageResourceCrud) Create() error {
	request := oci_core.CreateImageRequest{}
func (s *CoreImageResourceCrud) Get() error {
	request := oci_core.GetImageRequest{}
func (s *CoreImageResourceCrud) Update() error {
	if compartment, ok := s.D.GetOkExists("compartment_id"); ok && s.D.HasChange("compartment_id") {
func (s *CoreImageResourceCrud) Delete() error {
	request := oci_core.DeleteImageRequest{}
func (s *CoreImageResourceCrud) SetData() error {
	if s.Res.AgentFeatures != nil {
func (s *CoreImageResourceCrud) mapToImageSourceDetails(fieldKeyFormat string) (oci_core.ImageSourceDetails, error) {
	var baseObject oci_core.ImageSourceDetails
func (s *CoreImageResourceCrud) updateCompartment(compartment interface{}) error {
	changeCompartmentRequest := oci_core.ChangeImageCompartmentRequest{}

=== ./internal/service/core/core_nat_gateway_resource.go ===
func CoreNatGatewayResource() *schema.Resource {
	return &schema.Resource{
func createCoreNatGateway(d *schema.ResourceData, m interface{}) error {
	sync := &CoreNatGatewayResourceCrud{}
func readCoreNatGateway(d *schema.ResourceData, m interface{}) error {
	sync := &CoreNatGatewayResourceCrud{}
func updateCoreNatGateway(d *schema.ResourceData, m interface{}) error {
	sync := &CoreNatGatewayResourceCrud{}
func deleteCoreNatGateway(d *schema.ResourceData, m interface{}) error {
	sync := &CoreNatGatewayResourceCrud{}
func (s *CoreNatGatewayResourceCrud) ID() string {
	return *s.Res.Id
func (s *CoreNatGatewayResourceCrud) CreatedPending() []string {
	return []string{
func (s *CoreNatGatewayResourceCrud) CreatedTarget() []string {
	return []string{
func (s *CoreNatGatewayResourceCrud) DeletedPending() []string {
	return []string{
func (s *CoreNatGatewayResourceCrud) DeletedTarget() []string {
	return []string{
func (s *CoreNatGatewayResourceCrud) Create() error {
	request := oci_core.CreateNatGatewayRequest{}
func (s *CoreNatGatewayResourceCrud) Get() error {
	request := oci_core.GetNatGatewayRequest{}
func (s *CoreNatGatewayResourceCrud) Update() error {
	if compartment, ok := s.D.GetOkExists("compartment_id"); ok && s.D.HasChange("compartment_id") {
func (s *CoreNatGatewayResourceCrud) Delete() error {
	request := oci_core.DeleteNatGatewayRequest{}
func (s *CoreNatGatewayResourceCrud) SetData() error {
	if s.Res.BlockTraffic != nil {
func (s *CoreNatGatewayResourceCrud) updateCompartment(compartment interface{}) error {
	changeCompartmentRequest := oci_core.ChangeNatGatewayCompartmentRequest{}

=== ./internal/service/core/core_volume_group_resource.go ===
func CoreVolumeGroupResource() *schema.Resource {
	return &schema.Resource{
func createCoreVolumeGroup(d *schema.ResourceData, m interface{}) error {
	sync := &CoreVolumeGroupResourceCrud{}
func readCoreVolumeGroup(d *schema.ResourceData, m interface{}) error {
	sync := &CoreVolumeGroupResourceCrud{}
func updateCoreVolumeGroup(d *schema.ResourceData, m interface{}) error {
	sync := &CoreVolumeGroupResourceCrud{}
func deleteCoreVolumeGroup(d *schema.ResourceData, m interface{}) error {
	sync := &CoreVolumeGroupResourceCrud{}
func (s *CoreVolumeGroupResourceCrud) ID() string {
	return *s.Res.Id
func (s *CoreVolumeGroupResourceCrud) CreatedPending() []string {
	return []string{
func (s *CoreVolumeGroupResourceCrud) CreatedTarget() []string {
	return []string{
func (s *CoreVolumeGroupResourceCrud) DeletedPending() []string {
	return []string{
func (s *CoreVolumeGroupResourceCrud) DeletedTarget() []string {
	return []string{
func (s *CoreVolumeGroupResourceCrud) Create() error {
	request := oci_core.CreateVolumeGroupRequest{}
func (s *CoreVolumeGroupResourceCrud) Get() error {
	request := oci_core.GetVolumeGroupRequest{}
func (s *CoreVolumeGroupResourceCrud) Update() error {
	if compartment, ok := s.D.GetOkExists("compartment_id"); ok && s.D.HasChange("compartment_id") {
func (s *CoreVolumeGroupResourceCrud) Delete() error {
	request := oci_core.DeleteVolumeGroupRequest{}
func (s *CoreVolumeGroupResourceCrud) SetData() error {
	if s.Res.AvailabilityDomain != nil {
func (s *CoreVolumeGroupResourceCrud) mapToVolumeGroupReplicaDetails(fieldKeyFormat string) (oci_core.VolumeGroupReplicaDetails, error) {
	result := oci_core.VolumeGroupReplicaDetails{}
func (s *CoreVolumeGroupResourceCrud) mapToVolumeGroupSourceDetails(fieldKeyFormat string) (oci_core.VolumeGroupSourceDetails, error) {
	var baseObject oci_core.VolumeGroupSourceDetails
func (s *CoreVolumeGroupResourceCrud) updateCompartment(compartment interface{}) error {
	changeCompartmentRequest := oci_core.ChangeVolumeGroupCompartmentRequest{}

=== ./internal/service/core/core_compute_cluster_data_source.go ===
func CoreComputeClusterDataSource() *schema.Resource {
	fieldMap := make(map[string]*schema.Schema)
func readSingularCoreComputeCluster(d *schema.ResourceData, m interface{}) error {
	sync := &CoreComputeClusterDataSourceCrud{}
func (s *CoreComputeClusterDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *CoreComputeClusterDataSourceCrud) Get() error {
	request := oci_core.GetComputeClusterRequest{}
func (s *CoreComputeClusterDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/core/core_volume_backup_policy_assignments_data_source.go ===
func CoreVolumeBackupPolicyAssignmentsDataSource() *schema.Resource {
	return &schema.Resource{
func readCoreVolumeBackupPolicyAssignments(d *schema.ResourceData, m interface{}) error {
	sync := &CoreVolumeBackupPolicyAssignmentsDataSourceCrud{}
func (s *CoreVolumeBackupPolicyAssignmentsDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *CoreVolumeBackupPolicyAssignmentsDataSourceCrud) Get() error {
	request := oci_core.GetVolumeBackupPolicyAssetAssignmentRequest{}
func (s *CoreVolumeBackupPolicyAssignmentsDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/core/core_virtual_circuits_data_source.go ===
func CoreVirtualCircuitsDataSource() *schema.Resource {
	return &schema.Resource{
func readCoreVirtualCircuits(d *schema.ResourceData, m interface{}) error {
	sync := &CoreVirtualCircuitsDataSourceCrud{}
func (s *CoreVirtualCircuitsDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *CoreVirtualCircuitsDataSourceCrud) Get() error {
	request := oci_core.ListVirtualCircuitsRequest{}
func (s *CoreVirtualCircuitsDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/core/core_ipsec_connection_tunnel_management_resource.go ===
func CoreIpSecConnectionTunnelManagementResource() *schema.Resource {
	return &schema.Resource{
func createCoreIpSecConnectionTunnelManagement(d *schema.ResourceData, m interface{}) error {
	sync := &CoreIpSecConnectionTunnelManagementResourceCrud{}
func readCoreIpSecConnectionTunnelManagement(d *schema.ResourceData, m interface{}) error {
	sync := &CoreIpSecConnectionTunnelManagementResourceCrud{}
func updateCoreIpSecConnectionTunnelManagement(d *schema.ResourceData, m interface{}) error {
	sync := &CoreIpSecConnectionTunnelManagementResourceCrud{}
func deleteCoreIpSecConnectionTunnelManagement(d *schema.ResourceData, m interface{}) error {
	sync := &CoreIpSecConnectionTunnelManagementResourceCrud{}
func (s *CoreIpSecConnectionTunnelManagementResourceCrud) ID() string {
	return *s.Res.Id
func (s *CoreIpSecConnectionTunnelManagementResourceCrud) CreatedPending() []string {
	return []string{
func (s *CoreIpSecConnectionTunnelManagementResourceCrud) CreatedTarget() []string {
	return []string{
func (s *CoreIpSecConnectionTunnelManagementResourceCrud) UpdatedPending() []string {
	return []string{
func (s *CoreIpSecConnectionTunnelManagementResourceCrud) UpdatedTarget() []string {
	return []string{
func (s *CoreIpSecConnectionTunnelManagementResourceCrud) Create() error {
	return s.Update()
func (s *CoreIpSecConnectionTunnelManagementResourceCrud) Get() error {
	request := oci_core.GetIPSecConnectionTunnelRequest{}
func (s *CoreIpSecConnectionTunnelManagementResourceCrud) Update() error {
	if s.D.HasChange("shared_secret") {
func (s *CoreIpSecConnectionTunnelManagementResourceCrud) Delete() error {
	return nil
func (s *CoreIpSecConnectionTunnelManagementResourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/core/core_route_tables_data_source.go ===
func CoreRouteTablesDataSource() *schema.Resource {
	return &schema.Resource{
func readCoreRouteTables(d *schema.ResourceData, m interface{}) error {
	sync := &CoreRouteTablesDataSourceCrud{}
func (s *CoreRouteTablesDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *CoreRouteTablesDataSourceCrud) Get() error {
	request := oci_core.ListRouteTablesRequest{}
func (s *CoreRouteTablesDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/core/core_volume_group_replica_data_source.go ===
func CoreVolumeGroupReplicaDataSource() *schema.Resource {
	return &schema.Resource{
func readSingularCoreVolumeGroupReplica(d *schema.ResourceData, m interface{}) error {
	sync := &CoreVolumeGroupReplicaDataSourceCrud{}
func (s *CoreVolumeGroupReplicaDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *CoreVolumeGroupReplicaDataSourceCrud) Get() error {
	request := oci_core.GetVolumeGroupReplicaRequest{}
func (s *CoreVolumeGroupReplicaDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/core/core_ipsec_connection_tunnel_routes_data_source.go ===
func CoreIpsecConnectionTunnelRoutesDataSource() *schema.Resource {
	return &schema.Resource{
func readCoreIpsecConnectionTunnelRoutes(d *schema.ResourceData, m interface{}) error {
	sync := &CoreIpsecConnectionTunnelRoutesDataSourceCrud{}
func (s *CoreIpsecConnectionTunnelRoutesDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *CoreIpsecConnectionTunnelRoutesDataSourceCrud) Get() error {
	request := oci_core.ListIPSecConnectionTunnelRoutesRequest{}
func (s *CoreIpsecConnectionTunnelRoutesDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/core/core_dedicated_vm_host_instance_shapes_data_source.go ===
func CoreDedicatedVmHostInstanceShapesDataSource() *schema.Resource {
	return &schema.Resource{
func readCoreDedicatedVmHostInstanceShapes(d *schema.ResourceData, m interface{}) error {
	sync := &CoreDedicatedVmHostInstanceShapesDataSourceCrud{}
func (s *CoreDedicatedVmHostInstanceShapesDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *CoreDedicatedVmHostInstanceShapesDataSourceCrud) Get() error {
	request := oci_core.ListDedicatedVmHostInstanceShapesRequest{}
func (s *CoreDedicatedVmHostInstanceShapesDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/core/core_instance_console_connections_data_source.go ===
func CoreInstanceConsoleConnectionsDataSource() *schema.Resource {
	return &schema.Resource{
func readCoreInstanceConsoleConnections(d *schema.ResourceData, m interface{}) error {
	sync := &CoreInstanceConsoleConnectionsDataSourceCrud{}
func (s *CoreInstanceConsoleConnectionsDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *CoreInstanceConsoleConnectionsDataSourceCrud) Get() error {
	request := oci_core.ListInstanceConsoleConnectionsRequest{}
func (s *CoreInstanceConsoleConnectionsDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/core/core_boot_volumes_data_source.go ===
func CoreBootVolumesDataSource() *schema.Resource {
	return &schema.Resource{
func readCoreBootVolumes(d *schema.ResourceData, m interface{}) error {
	sync := &CoreBootVolumesDataSourceCrud{}
func (s *CoreBootVolumesDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *CoreBootVolumesDataSourceCrud) Get() error {
	request := oci_core.ListBootVolumesRequest{}
func (s *CoreBootVolumesDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/core/core_dedicated_vm_host_data_source.go ===
func CoreDedicatedVmHostDataSource() *schema.Resource {
	fieldMap := make(map[string]*schema.Schema)
func readSingularCoreDedicatedVmHost(d *schema.ResourceData, m interface{}) error {
	sync := &CoreDedicatedVmHostDataSourceCrud{}
func (s *CoreDedicatedVmHostDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *CoreDedicatedVmHostDataSourceCrud) Get() error {
	request := oci_core.GetDedicatedVmHostRequest{}
func (s *CoreDedicatedVmHostDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/core/core_vlan_resource.go ===
func CoreVlanResource() *schema.Resource {
	return &schema.Resource{
func createCoreVlan(d *schema.ResourceData, m interface{}) error {
	sync := &CoreVlanResourceCrud{}
func readCoreVlan(d *schema.ResourceData, m interface{}) error {
	sync := &CoreVlanResourceCrud{}
func updateCoreVlan(d *schema.ResourceData, m interface{}) error {
	sync := &CoreVlanResourceCrud{}
func deleteCoreVlan(d *schema.ResourceData, m interface{}) error {
	sync := &CoreVlanResourceCrud{}
func (s *CoreVlanResourceCrud) ID() string {
	return *s.Res.Id
func (s *CoreVlanResourceCrud) CreatedPending() []string {
	return []string{
func (s *CoreVlanResourceCrud) CreatedTarget() []string {
	return []string{
func (s *CoreVlanResourceCrud) DeletedPending() []string {
	return []string{
func (s *CoreVlanResourceCrud) DeletedTarget() []string {
	return []string{
func (s *CoreVlanResourceCrud) Create() error {
	request := oci_core.CreateVlanRequest{}
func (s *CoreVlanResourceCrud) Get() error {
	request := oci_core.GetVlanRequest{}
func (s *CoreVlanResourceCrud) Update() error {
	if compartment, ok := s.D.GetOkExists("compartment_id"); ok && s.D.HasChange("compartment_id") {
func (s *CoreVlanResourceCrud) Delete() error {
	request := oci_core.DeleteVlanRequest{}
func (s *CoreVlanResourceCrud) SetData() error {
	if s.Res.AvailabilityDomain != nil {
func (s *CoreVlanResourceCrud) updateCompartment(compartment interface{}) error {
	changeCompartmentRequest := oci_core.ChangeVlanCompartmentRequest{}

=== ./internal/service/core/core_volume_group_backups_data_source.go ===
func CoreVolumeGroupBackupsDataSource() *schema.Resource {
	return &schema.Resource{
func readCoreVolumeGroupBackups(d *schema.ResourceData, m interface{}) error {
	sync := &CoreVolumeGroupBackupsDataSourceCrud{}
func (s *CoreVolumeGroupBackupsDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *CoreVolumeGroupBackupsDataSourceCrud) Get() error {
	request := oci_core.ListVolumeGroupBackupsRequest{}
func (s *CoreVolumeGroupBackupsDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/core/core_vcn_dns_resolver_association_data_source.go ===
func CoreVcnDnsResolverAssociationDataSource() *schema.Resource {
	return &schema.Resource{
func readSingularCoreVcnDnsResolverAssociation(d *schema.ResourceData, m interface{}) error {
	sync := &CoreVcnDnsResolverAssociationDataSourceCrud{}
func (s *CoreVcnDnsResolverAssociationDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *CoreVcnDnsResolverAssociationDataSourceCrud) Get() error {
	request := oci_core.GetVcnDnsResolverAssociationRequest{}
func (s *CoreVcnDnsResolverAssociationDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/core/core_cross_connect_status_data_source.go ===
func CoreCrossConnectStatusDataSource() *schema.Resource {
	return &schema.Resource{
func readSingularCoreCrossConnectStatus(d *schema.ResourceData, m interface{}) error {
	sync := &CoreCrossConnectStatusDataSourceCrud{}
func (s *CoreCrossConnectStatusDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *CoreCrossConnectStatusDataSourceCrud) Get() error {
	request := oci_core.GetCrossConnectStatusRequest{}
func (s *CoreCrossConnectStatusDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/core/core_instance_configuration_data_source.go ===
func CoreInstanceConfigurationDataSource() *schema.Resource {
	fieldMap := make(map[string]*schema.Schema)
func readSingularCoreInstanceConfiguration(d *schema.ResourceData, m interface{}) error {
	sync := &CoreInstanceConfigurationDataSourceCrud{}
func (s *CoreInstanceConfigurationDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *CoreInstanceConfigurationDataSourceCrud) Get() error {
	request := oci_core.GetInstanceConfigurationRequest{}
func (s *CoreInstanceConfigurationDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/core/core_compute_capacity_topology_resource.go ===
func CoreComputeCapacityTopologyResource() *schema.Resource {
	return &schema.Resource{
func createCoreComputeCapacityTopology(d *schema.ResourceData, m interface{}) error {
	sync := &CoreComputeCapacityTopologyResourceCrud{}
func readCoreComputeCapacityTopology(d *schema.ResourceData, m interface{}) error {
	sync := &CoreComputeCapacityTopologyResourceCrud{}
func updateCoreComputeCapacityTopology(d *schema.ResourceData, m interface{}) error {
	sync := &CoreComputeCapacityTopologyResourceCrud{}
func deleteCoreComputeCapacityTopology(d *schema.ResourceData, m interface{}) error {
	sync := &CoreComputeCapacityTopologyResourceCrud{}
func (s *CoreComputeCapacityTopologyResourceCrud) ID() string {
	return *s.Res.Id
func (s *CoreComputeCapacityTopologyResourceCrud) CreatedPending() []string {
	return []string{
func (s *CoreComputeCapacityTopologyResourceCrud) CreatedTarget() []string {
	return []string{
func (s *CoreComputeCapacityTopologyResourceCrud) DeletedPending() []string {
	return []string{
func (s *CoreComputeCapacityTopologyResourceCrud) DeletedTarget() []string {
	return []string{
func (s *CoreComputeCapacityTopologyResourceCrud) Create() error {
	request := oci_core.CreateComputeCapacityTopologyRequest{}
func (s *CoreComputeCapacityTopologyResourceCrud) Get() error {
	request := oci_core.GetComputeCapacityTopologyRequest{}
func (s *CoreComputeCapacityTopologyResourceCrud) Update() error {
	if compartment, ok := s.D.GetOkExists("compartment_id"); ok && s.D.HasChange("compartment_id") {
func (s *CoreComputeCapacityTopologyResourceCrud) Delete() error {
	request := oci_core.DeleteComputeCapacityTopologyRequest{}
func (s *CoreComputeCapacityTopologyResourceCrud) SetData() error {
	if s.Res.AvailabilityDomain != nil {
func (s *CoreComputeCapacityTopologyResourceCrud) mapToCreateCapacitySourceDetails(fieldKeyFormat string) (oci_core.CreateCapacitySourceDetails, error) {
	var baseObject oci_core.CreateCapacitySourceDetails
func (s *CoreComputeCapacityTopologyResourceCrud) mapToUpdateCapacitySourceDetails(fieldKeyFormat string) (oci_core.UpdateCapacitySourceDetails, error) {
	var baseObject oci_core.UpdateCapacitySourceDetails
func (s *CoreComputeCapacityTopologyResourceCrud) updateCompartment(compartment interface{}) error {
	changeCompartmentRequest := oci_core.ChangeComputeCapacityTopologyCompartmentRequest{}

=== ./internal/service/core/core_service_gateway_resource.go ===
func CoreServiceGatewayResource() *schema.Resource {
	return &schema.Resource{
func createCoreServiceGateway(d *schema.ResourceData, m interface{}) error {
	sync := &CoreServiceGatewayResourceCrud{}
func readCoreServiceGateway(d *schema.ResourceData, m interface{}) error {
	sync := &CoreServiceGatewayResourceCrud{}
func updateCoreServiceGateway(d *schema.ResourceData, m interface{}) error {
	sync := &CoreServiceGatewayResourceCrud{}
func deleteCoreServiceGateway(d *schema.ResourceData, m interface{}) error {
	sync := &CoreServiceGatewayResourceCrud{}
func (s *CoreServiceGatewayResourceCrud) ID() string {
	return *s.Res.Id
func (s *CoreServiceGatewayResourceCrud) CreatedPending() []string {
	return []string{
func (s *CoreServiceGatewayResourceCrud) CreatedTarget() []string {
	return []string{
func (s *CoreServiceGatewayResourceCrud) DeletedPending() []string {
	return []string{
func (s *CoreServiceGatewayResourceCrud) DeletedTarget() []string {
	return []string{
func (s *CoreServiceGatewayResourceCrud) Create() error {
	request := oci_core.CreateServiceGatewayRequest{}
func (s *CoreServiceGatewayResourceCrud) Get() error {
	request := oci_core.GetServiceGatewayRequest{}
func (s *CoreServiceGatewayResourceCrud) Update() error {
	if compartment, ok := s.D.GetOkExists("compartment_id"); ok && s.D.HasChange("compartment_id") {
func (s *CoreServiceGatewayResourceCrud) Delete() error {
	request := oci_core.DeleteServiceGatewayRequest{}
func (s *CoreServiceGatewayResourceCrud) SetData() error {
	if s.Res.BlockTraffic != nil {
func (s *CoreServiceGatewayResourceCrud) mapToServiceIdRequestDetails(fieldKeyFormat string) (oci_core.ServiceIdRequestDetails, error) {
	result := oci_core.ServiceIdRequestDetails{}
func (s *CoreServiceGatewayResourceCrud) updateCompartment(compartment interface{}) error {
	changeCompartmentRequest := oci_core.ChangeServiceGatewayCompartmentRequest{}

=== ./internal/service/core/core_cpe_resource.go ===
func CoreCpeResource() *schema.Resource {
	return &schema.Resource{
func createCoreCpe(d *schema.ResourceData, m interface{}) error {
	sync := &CoreCpeResourceCrud{}
func readCoreCpe(d *schema.ResourceData, m interface{}) error {
	sync := &CoreCpeResourceCrud{}
func updateCoreCpe(d *schema.ResourceData, m interface{}) error {
	sync := &CoreCpeResourceCrud{}
func deleteCoreCpe(d *schema.ResourceData, m interface{}) error {
	sync := &CoreCpeResourceCrud{}
func (s *CoreCpeResourceCrud) ID() string {
	return *s.Res.Id
func (s *CoreCpeResourceCrud) Create() error {
	request := oci_core.CreateCpeRequest{}
func (s *CoreCpeResourceCrud) Get() error {
	request := oci_core.GetCpeRequest{}
func (s *CoreCpeResourceCrud) Update() error {
	if compartment, ok := s.D.GetOkExists("compartment_id"); ok && s.D.HasChange("compartment_id") {
func (s *CoreCpeResourceCrud) Delete() error {
	request := oci_core.DeleteCpeRequest{}
func (s *CoreCpeResourceCrud) SetData() error {
	if s.Res.CompartmentId != nil {
func (s *CoreCpeResourceCrud) updateCompartment(compartment interface{}) error {
	changeCompartmentRequest := oci_core.ChangeCpeCompartmentRequest{}

=== ./internal/service/core/core_instance_maintenance_events_data_source.go ===
func CoreInstanceMaintenanceEventsDataSource() *schema.Resource {
	return &schema.Resource{
func readCoreInstanceMaintenanceEvents(d *schema.ResourceData, m interface{}) error {
	sync := &CoreInstanceMaintenanceEventsDataSourceCrud{}
func (s *CoreInstanceMaintenanceEventsDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *CoreInstanceMaintenanceEventsDataSourceCrud) Get() error {
	request := oci_core.ListInstanceMaintenanceEventsRequest{}
func (s *CoreInstanceMaintenanceEventsDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/core/core_drg_route_table_data_source.go ===
func CoreDrgRouteTableDataSource() *schema.Resource {
	fieldMap := make(map[string]*schema.Schema)
func readSingularCoreDrgRouteTable(d *schema.ResourceData, m interface{}) error {
	sync := &CoreDrgRouteTableDataSourceCrud{}
func (s *CoreDrgRouteTableDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *CoreDrgRouteTableDataSourceCrud) Get() error {
	request := oci_core.GetDrgRouteTableRequest{}
func (s *CoreDrgRouteTableDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/core/core_dhcp_options_resource.go ===
func CoreDhcpOptionsResource() *schema.Resource {
	return &schema.Resource{
func createCoreDhcpOptions(d *schema.ResourceData, m interface{}) error {
	sync := &CoreDhcpOptionsResourceCrud{}
func readCoreDhcpOptions(d *schema.ResourceData, m interface{}) error {
	sync := &CoreDhcpOptionsResourceCrud{}
func updateCoreDhcpOptions(d *schema.ResourceData, m interface{}) error {
	sync := &CoreDhcpOptionsResourceCrud{}
func deleteCoreDhcpOptions(d *schema.ResourceData, m interface{}) error {
	sync := &CoreDhcpOptionsResourceCrud{}
func (s *CoreDhcpOptionsResourceCrud) ID() string {
	return *s.Res.Id
func (s *CoreDhcpOptionsResourceCrud) CreatedPending() []string {
	return []string{
func (s *CoreDhcpOptionsResourceCrud) CreatedTarget() []string {
	return []string{
func (s *CoreDhcpOptionsResourceCrud) DeletedPending() []string {
	return []string{
func (s *CoreDhcpOptionsResourceCrud) DeletedTarget() []string {
	return []string{
func (s *CoreDhcpOptionsResourceCrud) Create() error {
	request := oci_core.CreateDhcpOptionsRequest{}
func (s *CoreDhcpOptionsResourceCrud) Get() error {
	request := oci_core.GetDhcpOptionsRequest{}
func (s *CoreDhcpOptionsResourceCrud) Update() error {
	if compartment, ok := s.D.GetOkExists("compartment_id"); ok && s.D.HasChange("compartment_id") {
func (s *CoreDhcpOptionsResourceCrud) Delete() error {
	request := oci_core.DeleteDhcpOptionsRequest{}
func (s *CoreDhcpOptionsResourceCrud) SetData() error {
	if s.Res.CompartmentId != nil {
func (s *CoreDhcpOptionsResourceCrud) mapToDhcpOption(fieldKeyFormat string) (oci_core.DhcpOption, error) {
	var baseObject oci_core.DhcpOption
func (s *CoreDhcpOptionsResourceCrud) updateCompartment(compartment interface{}) error {
	changeCompartmentRequest := oci_core.ChangeDhcpOptionsCompartmentRequest{}

=== ./internal/service/core/core_cross_connect_data_source.go ===
func CoreCrossConnectDataSource() *schema.Resource {
	fieldMap := make(map[string]*schema.Schema)
func readSingularCoreCrossConnect(d *schema.ResourceData, m interface{}) error {
	sync := &CoreCrossConnectDataSourceCrud{}
func (s *CoreCrossConnectDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *CoreCrossConnectDataSourceCrud) Get() error {
	request := oci_core.GetCrossConnectRequest{}
func (s *CoreCrossConnectDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/core/core_public_ip_pool_capacity_resource.go ===
func PublicIpPoolCapacityResource() *schema.Resource {
	return &schema.Resource{
func createPublicIpPoolCapacity(d *schema.ResourceData, m interface{}) error {
	sync := &CorePublicIpPoolCapacityResourceCrud{}
func readPublicIpPoolCapacity(d *schema.ResourceData, m interface{}) error {
	sync := &CorePublicIpPoolCapacityResourceCrud{}
func deletePublicIpPoolCapacity(d *schema.ResourceData, m interface{}) error {
	sync := &CorePublicIpPoolCapacityResourceCrud{}
func (s *CorePublicIpPoolCapacityResourceCrud) ID() string {
	publicIpPoolId := s.D.Get("public_ip_pool_id").(string)
func (s *CorePublicIpPoolCapacityResourceCrud) Create() error {
	request := oci_core.AddPublicIpPoolCapacityRequest{}
func (s *CorePublicIpPoolCapacityResourceCrud) Get() error {
	request := oci_core.GetPublicIpPoolRequest{}
func (s *CorePublicIpPoolCapacityResourceCrud) SetData() error {
	publicIpPoolId, byoipId, cidrBlock, err := parseCapacityCompositeId(s.D.Id())
func (s *CorePublicIpPoolCapacityResourceCrud) Delete() error {
	request := oci_core.RemovePublicIpPoolCapacityRequest{}

=== ./internal/service/core/core_cross_connect_locations_data_source.go ===
func CoreCrossConnectLocationsDataSource() *schema.Resource {
	return &schema.Resource{
func readCoreCrossConnectLocations(d *schema.ResourceData, m interface{}) error {
	sync := &CoreCrossConnectLocationsDataSourceCrud{}
func (s *CoreCrossConnectLocationsDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *CoreCrossConnectLocationsDataSourceCrud) Get() error {
	request := oci_core.ListCrossConnectLocationsRequest{}
func (s *CoreCrossConnectLocationsDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/core/core_capture_filter_resource.go ===
func CoreCaptureFilterResource() *schema.Resource {
	return &schema.Resource{
func createCoreCaptureFilter(d *schema.ResourceData, m interface{}) error {
	sync := &CoreCaptureFilterResourceCrud{}
func readCoreCaptureFilter(d *schema.ResourceData, m interface{}) error {
	sync := &CoreCaptureFilterResourceCrud{}
func updateCoreCaptureFilter(d *schema.ResourceData, m interface{}) error {
	sync := &CoreCaptureFilterResourceCrud{}
func deleteCoreCaptureFilter(d *schema.ResourceData, m interface{}) error {
	sync := &CoreCaptureFilterResourceCrud{}
func (s *CoreCaptureFilterResourceCrud) ID() string {
	return *s.Res.Id
func (s *CoreCaptureFilterResourceCrud) CreatedPending() []string {
	return []string{
func (s *CoreCaptureFilterResourceCrud) CreatedTarget() []string {
	return []string{
func (s *CoreCaptureFilterResourceCrud) DeletedPending() []string {
	return []string{
func (s *CoreCaptureFilterResourceCrud) DeletedTarget() []string {
	return []string{
func (s *CoreCaptureFilterResourceCrud) Create() error {
	request := oci_core.CreateCaptureFilterRequest{}
func (s *CoreCaptureFilterResourceCrud) Get() error {
	request := oci_core.GetCaptureFilterRequest{}
func (s *CoreCaptureFilterResourceCrud) Update() error {
	if compartment, ok := s.D.GetOkExists("compartment_id"); ok && s.D.HasChange("compartment_id") {
func (s *CoreCaptureFilterResourceCrud) Delete() error {
	request := oci_core.DeleteCaptureFilterRequest{}
func (s *CoreCaptureFilterResourceCrud) SetData() error {
	if s.Res.CompartmentId != nil {
func (s *CoreCaptureFilterResourceCrud) mapToFlowLogCaptureFilterRuleDetails(fieldKeyFormat string) (oci_core.FlowLogCaptureFilterRuleDetails, error) {
	result := oci_core.FlowLogCaptureFilterRuleDetails{}
func (s *CoreCaptureFilterResourceCrud) mapToIcmpOptions(fieldKeyFormat string) (oci_core.IcmpOptions, error) {
	result := oci_core.IcmpOptions{}
func (s *CoreCaptureFilterResourceCrud) mapToPortRange(fieldKeyFormat string) (oci_core.PortRange, error) {
	result := oci_core.PortRange{}
func (s *CoreCaptureFilterResourceCrud) mapToTcpOptions(fieldKeyFormat string) (oci_core.TcpOptions, error) {
	result := oci_core.TcpOptions{}
func (s *CoreCaptureFilterResourceCrud) mapToUdpOptions(fieldKeyFormat string) (oci_core.UdpOptions, error) {
	result := oci_core.UdpOptions{}
func (s *CoreCaptureFilterResourceCrud) mapToVtapCaptureFilterRuleDetails(fieldKeyFormat string) (oci_core.VtapCaptureFilterRuleDetails, error) {
	result := oci_core.VtapCaptureFilterRuleDetails{}
func (s *CoreCaptureFilterResourceCrud) updateCompartment(compartment interface{}) error {
	changeCompartmentRequest := oci_core.ChangeCaptureFilterCompartmentRequest{}

=== ./internal/service/core/core_instance_pools_data_source.go ===
func CoreInstancePoolsDataSource() *schema.Resource {
	return &schema.Resource{
func readCoreInstancePools(d *schema.ResourceData, m interface{}) error {
	sync := &CoreInstancePoolsDataSourceCrud{}
func (s *CoreInstancePoolsDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *CoreInstancePoolsDataSourceCrud) Get() error {
	request := oci_core.ListInstancePoolsRequest{}
func (s *CoreInstancePoolsDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/core/core_subnets_data_source.go ===
func CoreSubnetsDataSource() *schema.Resource {
	return &schema.Resource{
func readCoreSubnets(d *schema.ResourceData, m interface{}) error {
	sync := &CoreSubnetsDataSourceCrud{}
func (s *CoreSubnetsDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *CoreSubnetsDataSourceCrud) Get() error {
	request := oci_core.ListSubnetsRequest{}
func (s *CoreSubnetsDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/core/core_public_ip_data_source.go ===
func CorePublicIpDataSource() *schema.Resource {
	return &schema.Resource{
func readSingularCorePublicIp(d *schema.ResourceData, m interface{}) error {
	sync := &CorePublicIpDataSourceCrud{}
func (s *CorePublicIpDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *CorePublicIpDataSourceCrud) Get() error {
	// public ip resource fetching strategies ordered by specificity
func (s *CorePublicIpDataSourceCrud) getById(id string) error {
	request := oci_core.GetPublicIpRequest{}
func (s *CorePublicIpDataSourceCrud) getByPrivateIpId(privateIpId string) error {
	request := oci_core.GetPublicIpByPrivateIpIdRequest{}
func (s *CorePublicIpDataSourceCrud) getByPublicIp(ipAddress string) error {
	request := oci_core.GetPublicIpByIpAddressRequest{}
func (s *CorePublicIpDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/core/core_public_ip_pool_resource.go ===
func CorePublicIpPoolResource() *schema.Resource {
	return &schema.Resource{
func createCorePublicIpPool(d *schema.ResourceData, m interface{}) error {
	sync := &CorePublicIpPoolResourceCrud{}
func readCorePublicIpPool(d *schema.ResourceData, m interface{}) error {
	sync := &CorePublicIpPoolResourceCrud{}
func updateCorePublicIpPool(d *schema.ResourceData, m interface{}) error {
	sync := &CorePublicIpPoolResourceCrud{}
func deleteCorePublicIpPool(d *schema.ResourceData, m interface{}) error {
	sync := &CorePublicIpPoolResourceCrud{}
func (s *CorePublicIpPoolResourceCrud) ID() string {
	return *s.Res.Id
func (s *CorePublicIpPoolResourceCrud) CreatedPending() []string {
	return []string{}
func (s *CorePublicIpPoolResourceCrud) CreatedTarget() []string {
	return []string{
func (s *CorePublicIpPoolResourceCrud) DeletedPending() []string {
	return []string{
func (s *CorePublicIpPoolResourceCrud) DeletedTarget() []string {
	return []string{
func (s *CorePublicIpPoolResourceCrud) Create() error {
	request := oci_core.CreatePublicIpPoolRequest{}
func (s *CorePublicIpPoolResourceCrud) Get() error {
	request := oci_core.GetPublicIpPoolRequest{}
func (s *CorePublicIpPoolResourceCrud) Update() error {
	if compartment, ok := s.D.GetOkExists("compartment_id"); ok && s.D.HasChange("compartment_id") {
func (s *CorePublicIpPoolResourceCrud) Delete() error {
	request := oci_core.DeletePublicIpPoolRequest{}
func (s *CorePublicIpPoolResourceCrud) SetData() error {
	s.D.Set("cidr_blocks", s.Res.CidrBlocks)
func (s *CorePublicIpPoolResourceCrud) updateCompartment(compartment interface{}) error {
	changeCompartmentRequest := oci_core.ChangePublicIpPoolCompartmentRequest{}

=== ./internal/service/core/core_app_catalog_listing_resource_versions_data_source.go ===
func CoreAppCatalogListingResourceVersionsDataSource() *schema.Resource {
	return &schema.Resource{
func readCoreAppCatalogListingResourceVersions(d *schema.ResourceData, m interface{}) error {
	sync := &CoreAppCatalogListingResourceVersionsDataSourceCrud{}
func (s *CoreAppCatalogListingResourceVersionsDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *CoreAppCatalogListingResourceVersionsDataSourceCrud) Get() error {
	request := oci_core.ListAppCatalogListingResourceVersionsRequest{}
func (s *CoreAppCatalogListingResourceVersionsDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/core/core_vlan_data_source.go ===
func CoreVlanDataSource() *schema.Resource {
	fieldMap := make(map[string]*schema.Schema)
func readSingularCoreVlan(d *schema.ResourceData, m interface{}) error {
	sync := &CoreVlanDataSourceCrud{}
func (s *CoreVlanDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *CoreVlanDataSourceCrud) Get() error {
	request := oci_core.GetVlanRequest{}
func (s *CoreVlanDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/core/core_ipsec_connection_tunnel_error_data_source.go ===
func CoreIpsecConnectionTunnelErrorDataSource() *schema.Resource {
	return &schema.Resource{
func readSingularCoreIpsecConnectionTunnelError(d *schema.ResourceData, m interface{}) error {
	sync := &CoreIpsecConnectionTunnelErrorDataSourceCrud{}
func (s *CoreIpsecConnectionTunnelErrorDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *CoreIpsecConnectionTunnelErrorDataSourceCrud) Get() error {
	request := oci_core.GetIPSecConnectionTunnelErrorRequest{}
func (s *CoreIpsecConnectionTunnelErrorDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/core/core_network_security_groups_data_source.go ===
func CoreNetworkSecurityGroupsDataSource() *schema.Resource {
	return &schema.Resource{
func readCoreNetworkSecurityGroups(d *schema.ResourceData, m interface{}) error {
	sync := &CoreNetworkSecurityGroupsDataSourceCrud{}
func (s *CoreNetworkSecurityGroupsDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *CoreNetworkSecurityGroupsDataSourceCrud) Get() error {
	request := oci_core.ListNetworkSecurityGroupsRequest{}
func (s *CoreNetworkSecurityGroupsDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/core/core_drg_route_distribution_statement_resource.go ===
func CoreDrgRouteDistributionStatementResource() *schema.Resource {
	return &schema.Resource{
func createCoreDrgRouteDistributionStatement(d *schema.ResourceData, m interface{}) error {
	sync := &CoreDrgRouteDistributionStatementResourceCrud{}
func readCoreDrgRouteDistributionStatement(d *schema.ResourceData, m interface{}) error {
	sync := &CoreDrgRouteDistributionStatementResourceCrud{}
func updateCoreDrgRouteDistributionStatement(d *schema.ResourceData, m interface{}) error {
	sync := &CoreDrgRouteDistributionStatementResourceCrud{}
func deleteCoreDrgRouteDistributionStatement(d *schema.ResourceData, m interface{}) error {
	sync := &CoreDrgRouteDistributionStatementResourceCrud{}
func (s *CoreDrgRouteDistributionStatementResourceCrud) ID() string {
	return getDrgRouteDistributionStatementCompositeId(s.D.Get("drg_route_distribution_id").(string), *s.Res.Id)
func (s *CoreDrgRouteDistributionStatementResourceCrud) Create() error {
	request := oci_core.AddDrgRouteDistributionStatementsRequest{}
func (s *CoreDrgRouteDistributionStatementResourceCrud) Get() error {
	request := oci_core.ListDrgRouteDistributionStatementsRequest{}
func (s *CoreDrgRouteDistributionStatementResourceCrud) Update() error {
	request := oci_core.UpdateDrgRouteDistributionStatementsRequest{}
func (s *CoreDrgRouteDistributionStatementResourceCrud) Delete() error {

func (s *CoreDrgRouteDistributionStatementResourceCrud) SetData() error {
	if s.Res == nil {
func (s *CoreDrgRouteDistributionStatementResourceCrud) mapToDrgRouteDistributionMatchCriteria(fieldKeyFormat string) (oci_core.DrgRouteDistributionMatchCriteria, error) {


=== ./internal/service/core/core_compute_global_image_capability_schema_data_source.go ===
func CoreComputeGlobalImageCapabilitySchemaDataSource() *schema.Resource {
	return &schema.Resource{
func readSingularCoreComputeGlobalImageCapabilitySchema(d *schema.ResourceData, m interface{}) error {
	sync := &CoreComputeGlobalImageCapabilitySchemaDataSourceCrud{}
func (s *CoreComputeGlobalImageCapabilitySchemaDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *CoreComputeGlobalImageCapabilitySchemaDataSourceCrud) Get() error {
	request := oci_core.GetComputeGlobalImageCapabilitySchemaRequest{}
func (s *CoreComputeGlobalImageCapabilitySchemaDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/core/core_compute_capacity_topology_compute_hpc_islands_data_source.go ===
func CoreComputeCapacityTopologyComputeHpcIslandsDataSource() *schema.Resource {
	return &schema.Resource{
func readCoreComputeCapacityTopologyComputeHpcIslands(d *schema.ResourceData, m interface{}) error {
	sync := &CoreComputeCapacityTopologyComputeHpcIslandsDataSourceCrud{}
func (s *CoreComputeCapacityTopologyComputeHpcIslandsDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *CoreComputeCapacityTopologyComputeHpcIslandsDataSourceCrud) Get() error {
	request := oci_core.ListComputeCapacityTopologyComputeHpcIslandsRequest{}
func (s *CoreComputeCapacityTopologyComputeHpcIslandsDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/core/core_ipsec_connection_tunnel_data_source.go ===
func CoreIpSecConnectionTunnelDataSource() *schema.Resource {
	fieldMap := make(map[string]*schema.Schema)
func readSingularCoreIpSecConnectionTunnel(d *schema.ResourceData, m interface{}) error {
	sync := &CoreIpSecConnectionTunnelDataSourceCrud{}
func (s *CoreIpSecConnectionTunnelDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *CoreIpSecConnectionTunnelDataSourceCrud) Get() error {
	request := oci_core.GetIPSecConnectionTunnelRequest{}
func (s *CoreIpSecConnectionTunnelDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/core/core_ip_inventory_vcn_overlaps_data_source.go ===
func CoreIpInventoryVcnOverlapsDataSource() *schema.Resource {
	return &schema.Resource{
func readCoreIpInventoryVcnOverlaps(d *schema.ResourceData, m interface{}) error {
	sync := &CoreIpInventoryVcnOverlapsDataSourceCrud{}
func (s *CoreIpInventoryVcnOverlapsDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *CoreIpInventoryVcnOverlapsDataSourceCrud) Get() error {
	request := oci_core.GetVcnOverlapRequest{}
func (s *CoreIpInventoryVcnOverlapsDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/core/core_app_catalog_listings_data_source.go ===
func CoreAppCatalogListingsDataSource() *schema.Resource {
	return &schema.Resource{
func readCoreAppCatalogListings(d *schema.ResourceData, m interface{}) error {
	sync := &CoreAppCatalogListingsDataSourceCrud{}
func (s *CoreAppCatalogListingsDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *CoreAppCatalogListingsDataSourceCrud) Get() error {
	request := oci_core.ListAppCatalogListingsRequest{}
func (s *CoreAppCatalogListingsDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/core/core_ipv6s_data_source.go ===
func CoreIpv6sDataSource() *schema.Resource {
	return &schema.Resource{
func readCoreIpv6s(d *schema.ResourceData, m interface{}) error {
	sync := &CoreIpv6sDataSourceCrud{}
func (s *CoreIpv6sDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *CoreIpv6sDataSourceCrud) Get() error {
	request := oci_core.ListIpv6sRequest{}
func (s *CoreIpv6sDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/core/core_fast_connect_provider_services_data_source.go ===
func CoreFastConnectProviderServicesDataSource() *schema.Resource {
	return &schema.Resource{
func readCoreFastConnectProviderServices(d *schema.ResourceData, m interface{}) error {
	sync := &CoreFastConnectProviderServicesDataSourceCrud{}
func (s *CoreFastConnectProviderServicesDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *CoreFastConnectProviderServicesDataSourceCrud) Get() error {
	request := oci_core.ListFastConnectProviderServicesRequest{}
func (s *CoreFastConnectProviderServicesDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/core/core_drg_attachments_data_source.go ===
func CoreDrgAttachmentsDataSource() *schema.Resource {
	return &schema.Resource{
func readCoreDrgAttachments(d *schema.ResourceData, m interface{}) error {
	sync := &CoreDrgAttachmentsDataSourceCrud{}
func (s *CoreDrgAttachmentsDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *CoreDrgAttachmentsDataSourceCrud) Get() error {
	request := oci_core.ListDrgAttachmentsRequest{}
func (s *CoreDrgAttachmentsDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/core/core_compute_capacity_topologies_data_source.go ===
func CoreComputeCapacityTopologiesDataSource() *schema.Resource {
	return &schema.Resource{
func readCoreComputeCapacityTopologies(d *schema.ResourceData, m interface{}) error {
	sync := &CoreComputeCapacityTopologiesDataSourceCrud{}
func (s *CoreComputeCapacityTopologiesDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *CoreComputeCapacityTopologiesDataSourceCrud) Get() error {
	request := oci_core.ListComputeCapacityTopologiesRequest{}
func (s *CoreComputeCapacityTopologiesDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/core/core_boot_volume_resource.go ===
func CoreBootVolumeResource() *schema.Resource {
	return &schema.Resource{
func createCoreBootVolume(d *schema.ResourceData, m interface{}) error {
	sync := &CoreBootVolumeResourceCrud{}
func readCoreBootVolume(d *schema.ResourceData, m interface{}) error {
	sync := &CoreBootVolumeResourceCrud{}
func updateCoreBootVolume(d *schema.ResourceData, m interface{}) error {
	sync := &CoreBootVolumeResourceCrud{}
func deleteCoreBootVolume(d *schema.ResourceData, m interface{}) error {
	sync := &CoreBootVolumeResourceCrud{}
func (s *CoreBootVolumeResourceCrud) ID() string {
	return *s.Res.Id
func (s *CoreBootVolumeResourceCrud) CreatedPending() []string {
	return []string{
func (s *CoreBootVolumeResourceCrud) CreatedTarget() []string {
	return []string{
func (s *CoreBootVolumeResourceCrud) DeletedPending() []string {
	return []string{
func (s *CoreBootVolumeResourceCrud) DeletedTarget() []string {
	return []string{
func (s *CoreBootVolumeResourceCrud) UpdatedPending() []string {
	return []string{
func (s *CoreBootVolumeResourceCrud) UpdatedTarget() []string {
	return []string{
func (s *CoreBootVolumeResourceCrud) Create() error {
	request := oci_core.CreateBootVolumeRequest{}
func (s *CoreBootVolumeResourceCrud) Get() error {
	request := oci_core.GetBootVolumeRequest{}
func (s *CoreBootVolumeResourceCrud) Update() error {
	if compartment, ok := s.D.GetOkExists("compartment_id"); ok && s.D.HasChange("compartment_id") {
func (s *CoreBootVolumeResourceCrud) Delete() error {
	request := oci_core.DeleteBootVolumeRequest{}
func (s *CoreBootVolumeResourceCrud) SetData() error {
	if s.Res.AutoTunedVpusPerGB != nil {
func (s *CoreBootVolumeResourceCrud) mapToAutotunePolicy(fieldKeyFormat string) (oci_core.AutotunePolicy, error) {
	var baseObject oci_core.AutotunePolicy
func (s *CoreBootVolumeResourceCrud) mapToBootVolumeReplicaDetails(fieldKeyFormat string) (oci_core.BootVolumeReplicaDetails, error) {
	result := oci_core.BootVolumeReplicaDetails{}
func (s *CoreBootVolumeResourceCrud) mapToBootVolumeSourceDetails(fieldKeyFormat string) (oci_core.BootVolumeSourceDetails, error) {
	var baseObject oci_core.BootVolumeSourceDetails
func (s *CoreBootVolumeResourceCrud) updateCompartment(compartment interface{}) error {
	changeCompartmentRequest := oci_core.ChangeBootVolumeCompartmentRequest{}

=== ./internal/service/core/core_capture_filters_data_source.go ===
func CoreCaptureFiltersDataSource() *schema.Resource {
	return &schema.Resource{
func readCoreCaptureFilters(d *schema.ResourceData, m interface{}) error {
	sync := &CoreCaptureFiltersDataSourceCrud{}
func (s *CoreCaptureFiltersDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *CoreCaptureFiltersDataSourceCrud) Get() error {
	request := oci_core.ListCaptureFiltersRequest{}
func (s *CoreCaptureFiltersDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/core/core_ipsec_status_data_source.go ===
func CoreIpSecConnectionDeviceStatusDataSource() *schema.Resource {
	return &schema.Resource{
func readSingularCoreIpSecConnectionDeviceStatus(d *schema.ResourceData, m interface{}) error {
	sync := &CoreIpSecConnectionDeviceStatusDataSourceCrud{}
func (s *CoreIpSecConnectionDeviceStatusDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *CoreIpSecConnectionDeviceStatusDataSourceCrud) Get() error {
	request := oci_core.GetIPSecConnectionDeviceStatusRequest{}
func (s *CoreIpSecConnectionDeviceStatusDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/core/core_shape_management_resource.go ===
func CoreShapeResource() *schema.Resource {
	return &schema.Resource{
func createCoreShape(d *schema.ResourceData, m interface{}) error {
	sync := &CoreShapeResourceCrud{}
func readCoreShape(d *schema.ResourceData, m interface{}) error {
	sync := &CoreShapeResourceCrud{}
func deleteCoreShape(d *schema.ResourceData, m interface{}) error {
	sync := &CoreShapeResourceCrud{}
func (s *CoreShapeResourceCrud) ID() string {
	return getShapeCompositeId(s.D.Get("compartment_id").(string), s.D.Get("image_id").(string), s.D.Get("shape_name").(string))
func (s *CoreShapeResourceCrud) Create() error {
	request := oci_core.AddImageShapeCompatibilityEntryRequest{}
func (s *CoreShapeResourceCrud) Get() error {
	request := oci_core.ListShapesRequest{}
func (s *CoreShapeResourceCrud) Delete() error {
	request := oci_core.RemoveImageShapeCompatibilityEntryRequest{}
func (s *CoreShapeResourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/core/core_drg_attachment_management_resource.go ===
func CoreDrgAttachmentManagementResource() *schema.Resource {
	return &schema.Resource{
func createCoreDrgAttachmentManagement(d *schema.ResourceData, m interface{}) error {
	sync := &CoreDrgAttachmentManagementResourceCrud{}
func readCoreDrgAttachmentManagement(d *schema.ResourceData, m interface{}) error {
	sync := &CoreDrgAttachmentManagementResourceCrud{}
func updateCoreDrgAttachmentManagement(d *schema.ResourceData, m interface{}) error {
	sync := &CoreDrgAttachmentManagementResourceCrud{}
func deleteCoreDrgAttachmentManagement(d *schema.ResourceData, m interface{}) error {
	sync := &CoreDrgAttachmentManagementResourceCrud{}
func (s *CoreDrgAttachmentManagementResourceCrud) ID() string {
	return *s.Res.Id
func (s *CoreDrgAttachmentManagementResourceCrud) UpdatedPending() []string {
	return []string{
func (s *CoreDrgAttachmentManagementResourceCrud) UpdatedTarget() []string {
	return []string{
func (s *CoreDrgAttachmentManagementResourceCrud) Get() error {
	request := oci_core.ListDrgAttachmentsRequest{}
func (s *CoreDrgAttachmentManagementResourceCrud) Update() error {
	request := oci_core.UpdateDrgAttachmentRequest{}
func (s *CoreDrgAttachmentManagementResourceCrud) Delete() error {
	return nil
func (s *CoreDrgAttachmentManagementResourceCrud) SetData() error {
	if s.Res == nil {
func (s *CoreDrgAttachmentManagementResourceCrud) mapToDrgAttachmentNetworkCreateDetails(fieldKeyFormat string) (oci_core.DrgAttachmentNetworkCreateDetails, error) {
	var baseObject oci_core.DrgAttachmentNetworkCreateDetails
func (s *CoreDrgAttachmentManagementResourceCrud) mapToDrgAttachmentNetworkUpdateDetails(fieldKeyFormat string) (oci_core.DrgAttachmentNetworkUpdateDetails, error) {
	var baseObject oci_core.DrgAttachmentNetworkUpdateDetails
func (s *CoreDrgAttachmentManagementResourceCrud) removeExportDrgRouteDistribution() error {
	request := oci_core.RemoveExportDrgRouteDistributionRequest{}

=== ./internal/service/core/core_ipsec_connection_tunnels_data_source.go ===
func CoreIpSecConnectionTunnelsDataSource() *schema.Resource {
	return &schema.Resource{
func readCoreIpSecConnectionTunnels(d *schema.ResourceData, m interface{}) error {
	sync := &CoreIpSecConnectionTunnelsDataSourceCrud{}
func (s *CoreIpSecConnectionTunnelsDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *CoreIpSecConnectionTunnelsDataSourceCrud) Get() error {
	request := oci_core.ListIPSecConnectionTunnelsRequest{}
func (s *CoreIpSecConnectionTunnelsDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/core/core_block_volume_replicas_data_source.go ===
func CoreBlockVolumeReplicasDataSource() *schema.Resource {
	return &schema.Resource{
func readCoreBlockVolumeReplicas(d *schema.ResourceData, m interface{}) error {
	sync := &CoreBlockVolumeReplicasDataSourceCrud{}
func (s *CoreBlockVolumeReplicasDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *CoreBlockVolumeReplicasDataSourceCrud) Get() error {
	request := oci_core.ListBlockVolumeReplicasRequest{}
func (s *CoreBlockVolumeReplicasDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/core/core_instance_pool_load_balancer_attachment_data_source.go ===
func CoreInstancePoolLoadBalancerAttachmentDataSource() *schema.Resource {
	return &schema.Resource{
func readSingularCoreInstancePoolLoadBalancerAttachment(d *schema.ResourceData, m interface{}) error {
	sync := &CoreInstancePoolLoadBalancerAttachmentDataSourceCrud{}
func (s *CoreInstancePoolLoadBalancerAttachmentDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *CoreInstancePoolLoadBalancerAttachmentDataSourceCrud) Get() error {
	request := oci_core.GetInstancePoolLoadBalancerAttachmentRequest{}
func (s *CoreInstancePoolLoadBalancerAttachmentDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/core/core_compute_global_image_capability_schemas_versions_data_source.go ===
func CoreComputeGlobalImageCapabilitySchemasVersionsDataSource() *schema.Resource {
	return &schema.Resource{
func readCoreComputeGlobalImageCapabilitySchemasVersions(d *schema.ResourceData, m interface{}) error {
	sync := &CoreComputeGlobalImageCapabilitySchemasVersionsDataSourceCrud{}
func (s *CoreComputeGlobalImageCapabilitySchemasVersionsDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *CoreComputeGlobalImageCapabilitySchemasVersionsDataSourceCrud) Get() error {
	request := oci_core.ListComputeGlobalImageCapabilitySchemaVersionsRequest{}
func (s *CoreComputeGlobalImageCapabilitySchemasVersionsDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/core/core_dedicated_vm_host_shapes_data_source.go ===
func CoreDedicatedVmHostShapesDataSource() *schema.Resource {
	return &schema.Resource{
func readCoreDedicatedVmHostShapes(d *schema.ResourceData, m interface{}) error {
	sync := &CoreDedicatedVmHostShapesDataSourceCrud{}
func (s *CoreDedicatedVmHostShapesDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *CoreDedicatedVmHostShapesDataSourceCrud) Get() error {
	request := oci_core.ListDedicatedVmHostShapesRequest{}
func (s *CoreDedicatedVmHostShapesDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/core/core_instance_pool_data_source.go ===
func CoreInstancePoolDataSource() *schema.Resource {
	fieldMap := make(map[string]*schema.Schema)
func readSingularCoreInstancePool(d *schema.ResourceData, m interface{}) error {
	sync := &CoreInstancePoolDataSourceCrud{}
func (s *CoreInstancePoolDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *CoreInstancePoolDataSourceCrud) Get() error {
	request := oci_core.GetInstancePoolRequest{}
func (s *CoreInstancePoolDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/core/core_instance_resource.go ===
func CoreInstanceResource() *schema.Resource {
	return &schema.Resource{
func createCoreInstance(d *schema.ResourceData, m interface{}) error {
	sync := &CoreInstanceResourceCrud{}
func powerOffIfNeeded(d *schema.ResourceData, sync *CoreInstanceResourceCrud, powerOff bool) error {

func readCoreInstance(d *schema.ResourceData, m interface{}) error {
	sync := &CoreInstanceResourceCrud{}
func updateCoreInstance(d *schema.ResourceData, m interface{}) error {
	sync := &CoreInstanceResourceCrud{}
func deleteCoreInstance(d *schema.ResourceData, m interface{}) error {
	sync := &CoreInstanceResourceCrud{}
func (s *CoreInstanceResourceCrud) ID() string {
	return *s.Res.Id
func (s *CoreInstanceResourceCrud) CreatedPending() []string {
	return []string{
func (s *CoreInstanceResourceCrud) CreatedTarget() []string {
	if asyn, ok := s.D.GetOk("async"); ok {
func (s *CoreInstanceResourceCrud) DeletedPending() []string {
	return []string{
func (s *CoreInstanceResourceCrud) DeletedTarget() []string {

func (s *CoreInstanceResourceCrud) Create() error {
	request := oci_core.LaunchInstanceRequest{}
func (s *CoreInstanceResourceCrud) Get() error {
	request := oci_core.GetInstanceRequest{}
func (s *CoreInstanceResourceCrud) Update() error {
	if compartment, ok := s.D.GetOkExists("compartment_id"); ok && s.D.HasChange("compartment_id") {
func (s *CoreInstanceResourceCrud) InstanceAction(action oci_core.InstanceActionActionEnum, state oci_core.InstanceLifecycleStateEnum) error {
	request := oci_core.InstanceActionRequest{}
func (s *CoreInstanceResourceCrud) Delete() error {
	request := oci_core.TerminateInstanceRequest{}
func (s *CoreInstanceResourceCrud) SetData() error {
	if s.Res.AgentConfig != nil {
func (s *CoreInstanceResourceCrud) mapToCreateVnicDetailsInstance(fieldKeyFormat string) (oci_core.CreateVnicDetails, error) {
	result := oci_core.CreateVnicDetails{}
func (s *CoreInstanceResourceCrud) mapToInstanceAgentPluginConfigDetails(fieldKeyFormat string) (oci_core.InstanceAgentPluginConfigDetails, error) {
	result := oci_core.InstanceAgentPluginConfigDetails{}
func (s *CoreInstanceResourceCrud) mapToInstanceOptions(fieldKeyFormat string) (oci_core.InstanceOptions, error) {
	result := oci_core.InstanceOptions{}
func (s *CoreInstanceResourceCrud) mapToUpdateVnicDetailsInstance(fieldKeyFormat string) (oci_core.UpdateVnicDetails, error) {
	result := oci_core.UpdateVnicDetails{}
func (s *CoreInstanceResourceCrud) updateVnicAssignPublicIp(vnic *oci_core.Vnic, fieldKeyFormat string) error {

func (s *CoreInstanceResourceCrud) mapToInstanceSourceDetails(fieldKeyFormat string) (oci_core.InstanceSourceDetails, error) {
	var baseObject oci_core.InstanceSourceDetails
func (s *CoreInstanceResourceCrud) mapToUpdateInstanceSourceDetails(fieldKeyFormat string) (oci_core.UpdateInstanceSourceDetails, error) {
	var baseObject oci_core.UpdateInstanceSourceDetails
func (s *CoreInstanceResourceCrud) mapToInstanceSourceImageFilterDetails(fieldKeyFormat string) (oci_core.InstanceSourceImageFilterDetails, error) {
	result := oci_core.InstanceSourceImageFilterDetails{}
func (s *CoreInstanceResourceCrud) mapToInstanceIpv6AddressIpv6SubnetCidrPairDetails(fieldKeyFormat string) (oci_core.Ipv6AddressIpv6SubnetCidrPairDetails, error) {
	result := oci_core.Ipv6AddressIpv6SubnetCidrPairDetails{}
func (s *CoreInstanceResourceCrud) mapToLaunchAttachVolumeDetails(fieldKeyFormat string) (oci_core.LaunchAttachVolumeDetails, error) {
	var baseObject oci_core.LaunchAttachVolumeDetails
func (s *CoreInstanceResourceCrud) mapToLaunchCreateVolumeDetails(fieldKeyFormat string) (oci_core.LaunchCreateVolumeDetails, error) {
	var baseObject oci_core.LaunchCreateVolumeDetails
func (s *CoreInstanceResourceCrud) mapToLaunchInstanceAgentConfigDetails(fieldKeyFormat string) (oci_core.LaunchInstanceAgentConfigDetails, error) {
	result := oci_core.LaunchInstanceAgentConfigDetails{}
func (s *CoreInstanceResourceCrud) mapToUpdateInstanceAgentConfigDetails(fieldKeyFormat string) (oci_core.UpdateInstanceAgentConfigDetails, error) {
	result := oci_core.UpdateInstanceAgentConfigDetails{}
func (s *CoreInstanceResourceCrud) mapToLaunchInstanceAvailabilityConfigDetails(fieldKeyFormat string) (oci_core.LaunchInstanceAvailabilityConfigDetails, error) {
	result := oci_core.LaunchInstanceAvailabilityConfigDetails{}
func (s *CoreInstanceResourceCrud) mapToLaunchInstancePlatformConfig(fieldKeyFormat string) (oci_core.LaunchInstancePlatformConfig, error) {
	var baseObject oci_core.LaunchInstancePlatformConfig
func (s *CoreInstanceResourceCrud) mapToUpdateInstancePlatformConfig(fieldKeyFormat string) (oci_core.UpdateInstancePlatformConfig, error) {
	var baseObject oci_core.UpdateInstancePlatformConfig
func (s *CoreInstanceResourceCrud) mapToLaunchInstanceShapeConfigDetails(fieldKeyFormat string) (oci_core.LaunchInstanceShapeConfigDetails, error) {
	result := oci_core.LaunchInstanceShapeConfigDetails{}
func (s *CoreInstanceResourceCrud) mapToUpdateInstanceShapeConfigDetails(fieldKeyFormat string) (oci_core.UpdateInstanceShapeConfigDetails, error) {
	result := oci_core.UpdateInstanceShapeConfigDetails{}
func (s *CoreInstanceResourceCrud) mapToUpdateLaunchOptions(fieldKeyFormat string) (oci_core.UpdateLaunchOptions, error) {
	result := oci_core.UpdateLaunchOptions{}
func (s *CoreInstanceResourceCrud) mapToLaunchOptions(fieldKeyFormat string) (oci_core.LaunchOptions, error) {
	result := oci_core.LaunchOptions{}
func (s *CoreInstanceResourceCrud) getPrimaryVnic() (*oci_core.Vnic, error) {
	request := oci_core.ListVnicAttachmentsRequest{
func (s *CoreInstanceResourceCrud) getBootVolume() (*oci_core.BootVolume, error) {
	request := oci_core.ListBootVolumeAttachmentsRequest{
func (s *CoreInstanceResourceCrud) mapToPreemptibleInstanceConfigDetails(fieldKeyFormat string) (oci_core.PreemptibleInstanceConfigDetails, error) {
	result := oci_core.PreemptibleInstanceConfigDetails{}
func (s *CoreInstanceResourceCrud) mapToPreemptionAction(fieldKeyFormat string) (oci_core.PreemptionAction, error) {
	var baseObject oci_core.PreemptionAction
func (s *CoreInstanceResourceCrud) updateCompartment(compartment interface{}) error {
	changeCompartmentRequest := oci_core.ChangeInstanceCompartmentRequest{}
func (s *CoreInstanceResourceCrud) mapToUpdateInstanceBootVolumeSizeInGbs(fieldKeyFormat string) error {
	if bootVolumeSizeInGBs, ok := s.D.GetOkExists(fmt.Sprintf(fieldKeyFormat, "boot_volume_size_in_gbs")); ok && s.D.HasChange(fmt.Sprintf(fieldKeyFormat, "boot_volume_size_in_gbs")) {
func (s *CoreInstanceResourceCrud) mapToUpdateBootVolumeKmsKey(fieldKeyFormat string) error {
	if kmsKeyId, ok := s.D.GetOkExists(fmt.Sprintf(fieldKeyFormat, "kms_key_id")); ok && s.D.HasChange(fmt.Sprintf(fieldKeyFormat, "kms_key_id")) {
func (s *CoreInstanceResourceCrud) updateBootVolumeKmsKey(kmsKeyId interface{}) error {
	updateBootVolumeKmsKeyRequest := oci_core.UpdateBootVolumeKmsKeyRequest{}
func (s *CoreInstanceResourceCrud) updateBootVolumeSizeInGbs(bootVolumeSizeInGBs interface{}) error {
	changeBootVolumeDetailsRequest := oci_core.UpdateBootVolumeRequest{}
func (s *CoreInstanceResourceCrud) updateOptionsViaWorkRequest() error {
	request := oci_core.UpdateInstanceRequest{}
func (s *CoreInstanceResourceCrud) mapToUpdateInstanceAvailabilityConfigDetails(fieldKeyFormat string) (oci_core.UpdateInstanceAvailabilityConfigDetails, error) {
	result := oci_core.UpdateInstanceAvailabilityConfigDetails{}

=== ./internal/service/core/core_public_ip_pool_data_source.go ===
func CorePublicIpPoolDataSource() *schema.Resource {
	fieldMap := make(map[string]*schema.Schema)
func readSingularCorePublicIpPool(d *schema.ResourceData, m interface{}) error {
	sync := &CorePublicIpPoolDataSourceCrud{}
func (s *CorePublicIpPoolDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *CorePublicIpPoolDataSourceCrud) Get() error {
	request := oci_core.GetPublicIpPoolRequest{}
func (s *CorePublicIpPoolDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/core/core_volume_backup_policy_resource.go ===
func CoreVolumeBackupPolicyResource() *schema.Resource {
	return &schema.Resource{
func createCoreVolumeBackupPolicy(d *schema.ResourceData, m interface{}) error {
	sync := &CoreVolumeBackupPolicyResourceCrud{}
func readCoreVolumeBackupPolicy(d *schema.ResourceData, m interface{}) error {
	sync := &CoreVolumeBackupPolicyResourceCrud{}
func updateCoreVolumeBackupPolicy(d *schema.ResourceData, m interface{}) error {
	sync := &CoreVolumeBackupPolicyResourceCrud{}
func deleteCoreVolumeBackupPolicy(d *schema.ResourceData, m interface{}) error {
	sync := &CoreVolumeBackupPolicyResourceCrud{}
func (s *CoreVolumeBackupPolicyResourceCrud) ID() string {
	return *s.Res.Id
func (s *CoreVolumeBackupPolicyResourceCrud) Create() error {
	request := oci_core.CreateVolumeBackupPolicyRequest{}
func (s *CoreVolumeBackupPolicyResourceCrud) Get() error {
	request := oci_core.GetVolumeBackupPolicyRequest{}
func (s *CoreVolumeBackupPolicyResourceCrud) Update() error {
	request := oci_core.UpdateVolumeBackupPolicyRequest{}
func (s *CoreVolumeBackupPolicyResourceCrud) Delete() error {
	request := oci_core.DeleteVolumeBackupPolicyRequest{}
func (s *CoreVolumeBackupPolicyResourceCrud) SetData() error {
	if s.Res.CompartmentId != nil {
func (s *CoreVolumeBackupPolicyResourceCrud) mapToVolumeBackupSchedule(fieldKeyFormat string) (oci_core.VolumeBackupSchedule, error) {
	result := oci_core.VolumeBackupSchedule{}

=== ./internal/service/core/core_instance_console_connection_resource.go ===
func CoreInstanceConsoleConnectionResource() *schema.Resource {
	return &schema.Resource{
func createCoreInstanceConsoleConnection(d *schema.ResourceData, m interface{}) error {
	sync := &CoreInstanceConsoleConnectionResourceCrud{}
func readCoreInstanceConsoleConnection(d *schema.ResourceData, m interface{}) error {
	sync := &CoreInstanceConsoleConnectionResourceCrud{}
func updateCoreInstanceConsoleConnection(d *schema.ResourceData, m interface{}) error {
	sync := &CoreInstanceConsoleConnectionResourceCrud{}
func deleteCoreInstanceConsoleConnection(d *schema.ResourceData, m interface{}) error {
	sync := &CoreInstanceConsoleConnectionResourceCrud{}
func (s *CoreInstanceConsoleConnectionResourceCrud) ID() string {
	return *s.Res.Id
func (s *CoreInstanceConsoleConnectionResourceCrud) CreatedPending() []string {
	return []string{
func (s *CoreInstanceConsoleConnectionResourceCrud) CreatedTarget() []string {
	return []string{
func (s *CoreInstanceConsoleConnectionResourceCrud) DeletedPending() []string {
	return []string{
func (s *CoreInstanceConsoleConnectionResourceCrud) DeletedTarget() []string {
	return []string{
func (s *CoreInstanceConsoleConnectionResourceCrud) Create() error {
	request := oci_core.CreateInstanceConsoleConnectionRequest{}
func (s *CoreInstanceConsoleConnectionResourceCrud) Get() error {
	request := oci_core.GetInstanceConsoleConnectionRequest{}
func (s *CoreInstanceConsoleConnectionResourceCrud) Update() error {
	request := oci_core.UpdateInstanceConsoleConnectionRequest{}
func (s *CoreInstanceConsoleConnectionResourceCrud) Delete() error {
	request := oci_core.DeleteInstanceConsoleConnectionRequest{}
func (s *CoreInstanceConsoleConnectionResourceCrud) SetData() error {
	if publicKey, ok := s.D.GetOkExists("public_key"); ok {

=== ./internal/service/core/core_ip_inventory_subnet_data_source.go ===
func CoreIpInventorySubnetDataSource() *schema.Resource {
	return &schema.Resource{
func readSingularCoreIpInventorySubnet(d *schema.ResourceData, m interface{}) error {
	sync := &CoreIpInventorySubnetDataSourceCrud{}
func (s *CoreIpInventorySubnetDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *CoreIpInventorySubnetDataSourceCrud) Get() error {
	request := oci_core.GetSubnetIpInventoryRequest{}
func (s *CoreIpInventorySubnetDataSourceCrud) SetData() error {
	if s.Res == nil {
func IpInventorySubnetResourceSummaryToMap(obj oci_core.IpInventorySubnetResourceSummary) map[string]interface{} {
	result := map[string]interface{}{}

=== ./internal/service/core/core_export.go ===
func processDrgRouteTableRouteRules(ctx *tf_export.ResourceDiscoveryContext, resources []*tf_export.OCIResource) ([]*tf_export.OCIResource, error) {
	for _, resource := range resources {
func processDrgRouteDistributions(ctx *tf_export.ResourceDiscoveryContext, resources []*tf_export.OCIResource) ([]*tf_export.OCIResource, error) {

func processVolumeGroups(ctx *tf_export.ResourceDiscoveryContext, resources []*tf_export.OCIResource) ([]*tf_export.OCIResource, error) {
	// Replace the volume Group's source details volume list with the actual volume list
func filterSecondaryVnicAttachments(ctx *tf_export.ResourceDiscoveryContext, resources []*tf_export.OCIResource) ([]*tf_export.OCIResource, error) {
	results := []*tf_export.OCIResource{}
func processCoreVcns(ctx *tf_export.ResourceDiscoveryContext, resources []*tf_export.OCIResource) ([]*tf_export.OCIResource, error) {
	// remove deprecated cidr_block field from discovered vcns,
func processDefaultSecurityLists(ctx *tf_export.ResourceDiscoveryContext, resources []*tf_export.OCIResource) ([]*tf_export.OCIResource, error) {
	// Default security lists need to be handled as default resources
func processDefaultRouteTables(ctx *tf_export.ResourceDiscoveryContext, resources []*tf_export.OCIResource) ([]*tf_export.OCIResource, error) {
	// Default route tables need to be handled as default resources
func processNetworkSecurityGroupRules(ctx *tf_export.ResourceDiscoveryContext, resources []*tf_export.OCIResource) ([]*tf_export.OCIResource, error) {
	for _, resource := range resources {
func processPrivateIps(ctx *tf_export.ResourceDiscoveryContext, resources []*tf_export.OCIResource) ([]*tf_export.OCIResource, error) {
	privateIps := []*tf_export.OCIResource{}
func processCorePublicIp(ctx *tf_export.ResourceDiscoveryContext, resources []*tf_export.OCIResource) ([]*tf_export.OCIResource, error) {
	publicIps := []*tf_export.OCIResource{}
func processInstances(ctx *tf_export.ResourceDiscoveryContext, resources []*tf_export.OCIResource) ([]*tf_export.OCIResource, error) {
	results := []*tf_export.OCIResource{}
func filterCustomImages(ctx *tf_export.ResourceDiscoveryContext, resources []*tf_export.OCIResource) ([]*tf_export.OCIResource, error) {
	results := []*tf_export.OCIResource{}
func processDefaultDhcpOptions(ctx *tf_export.ResourceDiscoveryContext, resources []*tf_export.OCIResource) ([]*tf_export.OCIResource, error) {
	// Default dhcp options need to be handled as default resources
func filterSourcedBootVolumes(ctx *tf_export.ResourceDiscoveryContext, resources []*tf_export.OCIResource) ([]*tf_export.OCIResource, error) {
	results := []*tf_export.OCIResource{}
func getCoreInstancePoolInstanceId(resource *tf_export.OCIResource) (string, error) {

func getCoreNetworkSecurityGroupSecurityRuleId(resource *tf_export.OCIResource) (string, error) {

func getCoreDrgRouteTableRouteRuleId(resource *tf_export.OCIResource) (string, error) {


=== ./internal/service/core/core_compute_clusters_data_source.go ===
func CoreComputeClustersDataSource() *schema.Resource {
	return &schema.Resource{
func readCoreComputeClusters(d *schema.ResourceData, m interface{}) error {
	sync := &CoreComputeClustersDataSourceCrud{}
func (s *CoreComputeClustersDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *CoreComputeClustersDataSourceCrud) Get() error {
	request := oci_core.ListComputeClustersRequest{}
func (s *CoreComputeClustersDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/core/core_instance_pool_resource.go ===
func CoreInstancePoolResource() *schema.Resource {
	return &schema.Resource{
func createCoreInstancePool(d *schema.ResourceData, m interface{}) error {
	sync := &CoreInstancePoolResourceCrud{}
func readCoreInstancePool(d *schema.ResourceData, m interface{}) error {
	sync := &CoreInstancePoolResourceCrud{}
func updateCoreInstancePool(d *schema.ResourceData, m interface{}) error {
	sync := &CoreInstancePoolResourceCrud{}
func deleteCoreInstancePool(d *schema.ResourceData, m interface{}) error {
	sync := &CoreInstancePoolResourceCrud{}
func (s *CoreInstancePoolResourceCrud) ID() string {
	return *s.Res.Id
func (s *CoreInstancePoolResourceCrud) CreatedPending() []string {
	return []string{
func (s *CoreInstancePoolResourceCrud) CreatedTarget() []string {
	return []string{
func (s *CoreInstancePoolResourceCrud) DeletedPending() []string {
	return []string{
func (s *CoreInstancePoolResourceCrud) DeletedTarget() []string {
	return []string{
func (s *CoreInstancePoolResourceCrud) UpdatedPending() []string {
	return []string{
func (s *CoreInstancePoolResourceCrud) UpdatedTarget() []string {
	return []string{
func (s *CoreInstancePoolResourceCrud) Create() error {
	request := oci_core.CreateInstancePoolRequest{}
func (s *CoreInstancePoolResourceCrud) setInstancePoolDesiredState(instancePoolId *string, desiredState string) (*oci_core.InstancePool, error) {
	switch strings.ToLower(desiredState) {
func (s *CoreInstancePoolResourceCrud) Get() error {
	request := oci_core.GetInstancePoolRequest{}
func (s *CoreInstancePoolResourceCrud) Update() error {
	if compartment, ok := s.D.GetOkExists("compartment_id"); ok && s.D.HasChange("compartment_id") {
func (s *CoreInstancePoolResourceCrud) Delete() error {
	request := oci_core.TerminateInstancePoolRequest{}
func (s *CoreInstancePoolResourceCrud) SetData() error {
	if s.Res.CompartmentId != nil {
func (s *CoreInstancePoolResourceCrud) mapToAttachLoadBalancerDetails(fieldKeyFormat string) (oci_core.AttachLoadBalancerDetails, error) {
	result := oci_core.AttachLoadBalancerDetails{}
func (s *CoreInstancePoolResourceCrud) mapToCreateInstancePoolPlacementConfigurationDetails(fieldKeyFormat string) (oci_core.CreateInstancePoolPlacementConfigurationDetails, error) {
	result := oci_core.CreateInstancePoolPlacementConfigurationDetails{}
func (s *CoreInstancePoolResourceCrud) mapToUpdateInstancePoolPlacementConfigurationDetails(fieldKeyFormat string) (oci_core.UpdateInstancePoolPlacementConfigurationDetails, error) {
	result := oci_core.UpdateInstancePoolPlacementConfigurationDetails{}
func (s *CoreInstancePoolResourceCrud) mapToInstancePoolPlacementIpv6AddressIpv6SubnetCidrDetails(fieldKeyFormat string) (oci_core.InstancePoolPlacementIpv6AddressIpv6SubnetCidrDetails, error) {
	result := oci_core.InstancePoolPlacementIpv6AddressIpv6SubnetCidrDetails{}
func (s *CoreInstancePoolResourceCrud) mapToInstancePoolPlacementPrimarySubnet(fieldKeyFormat string) (oci_core.InstancePoolPlacementPrimarySubnet, error) {
	result := oci_core.InstancePoolPlacementPrimarySubnet{}
func (s *CoreInstancePoolResourceCrud) mapToInstancePoolPlacementSecondaryVnicSubnet(fieldKeyFormat string) (oci_core.InstancePoolPlacementSecondaryVnicSubnet, error) {
	result := oci_core.InstancePoolPlacementSecondaryVnicSubnet{}
func (s *CoreInstancePoolResourceCrud) updateCompartment(compartment interface{}) error {
	changeCompartmentRequest := oci_core.ChangeInstancePoolCompartmentRequest{}
func (s *CoreInstancePoolResourceCrud) oneEditAway(oldLoadBalancers []oci_core.AttachLoadBalancerDetails, newLoadBalancers []oci_core.AttachLoadBalancerDetails) (bool, string, oci_core.AttachLoadBalancerDetails, oci_core.AttachLoadBalancerDetails, string) {
	newLbsLength := len(newLoadBalancers)
func (s *CoreInstancePoolResourceCrud) updateLoadBalancers(oldRaw interface{}, newRaw interface{}) error {
	interfaces := oldRaw.([]interface{})
func (s *CoreInstancePoolResourceCrud) multipleEdits(oldLoadBalancers []oci_core.AttachLoadBalancerDetails, newLoadBalancers []oci_core.AttachLoadBalancerDetails) {
	log.Printf("entering the multiple edits")
func (s *CoreInstancePoolResourceCrud) attachLoadBalancer(id string, newLoadBalancer oci_core.AttachLoadBalancerDetails) error {
	attachLoadBalancerRequest := oci_core.AttachLoadBalancerRequest{}
func (s *CoreInstancePoolResourceCrud) detachLoadBalancer(id string, oldLoadbalancer oci_core.AttachLoadBalancerDetails) error {
	detachLoadBalancerRequest := oci_core.DetachLoadBalancerRequest{}
func (s *CoreInstancePoolResourceCrud) pollForLbOperationCompletion(poolId *string, lbToTrack *oci_core.AttachLoadBalancerDetails) (*oci_core.InstancePool, error) {
	response := oci_core.GetInstancePoolResponse{}
func (s *CoreInstancePoolResourceCrud) getLoadBalancerDeltas(balancers []oci_core.AttachLoadBalancerDetails, balancers2 []oci_core.AttachLoadBalancerDetails) (int, int) {
	lbLength := len(balancers)
func (s *CoreInstancePoolResourceCrud) getUniqueLoadBalancerDeltas(balancers []oci_core.AttachLoadBalancerDetails, balancers2 []oci_core.AttachLoadBalancerDetails) int {
	deltas := 0

=== ./internal/service/core/core_dhcp_options_default_resource.go ===
func DefaultCoreDhcpOptionsResource() *schema.Resource {
	defaultResourceSchema := ConvertToDefaultVcnResourceSchema(CoreDhcpOptionsResource())
func createDefaultDhcpOptions(d *schema.ResourceData, m interface{}) error {
	sync := &DefaultDhcpOptionsResourceCrud{}
func deleteDefaultDhcpOptions(d *schema.ResourceData, m interface{}) error {
	sync := &DefaultDhcpOptionsResourceCrud{}
func (s *DefaultDhcpOptionsResourceCrud) Create() error {
	// If we are creating a default resource, then don't have to
func (s *DefaultDhcpOptionsResourceCrud) reset() error {
	request := oci_core.UpdateDhcpOptionsRequest{}
func (s *DefaultDhcpOptionsResourceCrud) Delete() error {
	if _, ok := s.D.GetOkExists("manage_default_resource_id"); ok {
func (s *DefaultDhcpOptionsResourceCrud) DeletedPending() []string {
	return s.CreatedTarget()
func (s *DefaultDhcpOptionsResourceCrud) DeletedTarget() []string {
	return s.CreatedTarget()

=== ./internal/service/core/core_drg_route_distribution_resource.go ===
func CoreDrgRouteDistributionResource() *schema.Resource {
	return &schema.Resource{
func createCoreDrgRouteDistribution(d *schema.ResourceData, m interface{}) error {
	sync := &CoreDrgRouteDistributionResourceCrud{}
func readCoreDrgRouteDistribution(d *schema.ResourceData, m interface{}) error {
	sync := &CoreDrgRouteDistributionResourceCrud{}
func updateCoreDrgRouteDistribution(d *schema.ResourceData, m interface{}) error {
	sync := &CoreDrgRouteDistributionResourceCrud{}
func deleteCoreDrgRouteDistribution(d *schema.ResourceData, m interface{}) error {
	sync := &CoreDrgRouteDistributionResourceCrud{}
func (s *CoreDrgRouteDistributionResourceCrud) ID() string {
	return *s.Res.Id
func (s *CoreDrgRouteDistributionResourceCrud) CreatedPending() []string {
	return []string{
func (s *CoreDrgRouteDistributionResourceCrud) CreatedTarget() []string {
	return []string{
func (s *CoreDrgRouteDistributionResourceCrud) DeletedPending() []string {
	return []string{
func (s *CoreDrgRouteDistributionResourceCrud) DeletedTarget() []string {
	return []string{
func (s *CoreDrgRouteDistributionResourceCrud) Create() error {
	request := oci_core.CreateDrgRouteDistributionRequest{}
func (s *CoreDrgRouteDistributionResourceCrud) Get() error {
	request := oci_core.GetDrgRouteDistributionRequest{}
func (s *CoreDrgRouteDistributionResourceCrud) Update() error {
	request := oci_core.UpdateDrgRouteDistributionRequest{}
func (s *CoreDrgRouteDistributionResourceCrud) Delete() error {
	request := oci_core.DeleteDrgRouteDistributionRequest{}
func (s *CoreDrgRouteDistributionResourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/core/core_volume_data_source.go ===
func CoreVolumeDataSource() *schema.Resource {
	fieldMap := make(map[string]*schema.Schema)
func readSingularCoreVolume(d *schema.ResourceData, m interface{}) error {
	sync := &CoreVolumeDataSourceCrud{}
func (s *CoreVolumeDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *CoreVolumeDataSourceCrud) Get() error {
	request := oci_core.GetVolumeRequest{}
func (s *CoreVolumeDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/core/core_nat_gateway_data_source.go ===
func CoreNatGatewayDataSource() *schema.Resource {
	fieldMap := make(map[string]*schema.Schema)
func readSingularCoreNatGateway(d *schema.ResourceData, m interface{}) error {
	sync := &CoreNatGatewayDataSourceCrud{}
func (s *CoreNatGatewayDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *CoreNatGatewayDataSourceCrud) Get() error {
	request := oci_core.GetNatGatewayRequest{}
func (s *CoreNatGatewayDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/core/core_vtap_data_source.go ===
func CoreVtapDataSource() *schema.Resource {
	fieldMap := make(map[string]*schema.Schema)
func readSingularCoreVtap(d *schema.ResourceData, m interface{}) error {
	sync := &CoreVtapDataSourceCrud{}
func (s *CoreVtapDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *CoreVtapDataSourceCrud) Get() error {
	request := oci_core.GetVtapRequest{}
func (s *CoreVtapDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/core/register_resource.go ===
func RegisterResource() {
	tfresource.RegisterResource("oci_core_app_catalog_listing_resource_version_agreement", AppCatalogListingResourceVersionAgreementResource())

=== ./internal/service/core/core_compute_capacity_reservation_instances_data_source.go ===
func CoreComputeCapacityReservationInstancesDataSource() *schema.Resource {
	return &schema.Resource{
func readCoreComputeCapacityReservationInstances(d *schema.ResourceData, m interface{}) error {
	sync := &CoreComputeCapacityReservationInstancesDataSourceCrud{}
func (s *CoreComputeCapacityReservationInstancesDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *CoreComputeCapacityReservationInstancesDataSourceCrud) Get() error {
	request := oci_core.ListComputeCapacityReservationInstancesRequest{}
func (s *CoreComputeCapacityReservationInstancesDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/core/core_compute_image_capability_schema_resource.go ===
func CoreComputeImageCapabilitySchemaResource() *schema.Resource {
	return &schema.Resource{
func createCoreComputeImageCapabilitySchema(d *schema.ResourceData, m interface{}) error {
	sync := &CoreComputeImageCapabilitySchemaResourceCrud{}
func readCoreComputeImageCapabilitySchema(d *schema.ResourceData, m interface{}) error {
	sync := &CoreComputeImageCapabilitySchemaResourceCrud{}
func updateCoreComputeImageCapabilitySchema(d *schema.ResourceData, m interface{}) error {
	sync := &CoreComputeImageCapabilitySchemaResourceCrud{}
func deleteCoreComputeImageCapabilitySchema(d *schema.ResourceData, m interface{}) error {
	sync := &CoreComputeImageCapabilitySchemaResourceCrud{}
func (s *CoreComputeImageCapabilitySchemaResourceCrud) ID() string {
	return *s.Res.Id
func (s *CoreComputeImageCapabilitySchemaResourceCrud) Create() error {
	request := oci_core.CreateComputeImageCapabilitySchemaRequest{}
func (s *CoreComputeImageCapabilitySchemaResourceCrud) Get() error {
	request := oci_core.GetComputeImageCapabilitySchemaRequest{}
func (s *CoreComputeImageCapabilitySchemaResourceCrud) Update() error {
	if compartment, ok := s.D.GetOkExists("compartment_id"); ok && s.D.HasChange("compartment_id") {
func (s *CoreComputeImageCapabilitySchemaResourceCrud) Delete() error {
	request := oci_core.DeleteComputeImageCapabilitySchemaRequest{}
func (s *CoreComputeImageCapabilitySchemaResourceCrud) SetData() error {
	if s.Res.CompartmentId != nil {
func (s *CoreComputeImageCapabilitySchemaResourceCrud) updateCompartment(compartment interface{}) error {
	changeCompartmentRequest := oci_core.ChangeComputeImageCapabilitySchemaCompartmentRequest{}

=== ./internal/service/core/core_shapes_data_source.go ===
func CoreShapesDataSource() *schema.Resource {
	return &schema.Resource{
func readCoreShapes(d *schema.ResourceData, m interface{}) error {
	sync := &CoreShapesDataSourceCrud{}
func (s *CoreShapesDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *CoreShapesDataSourceCrud) Get() error {
	request := oci_core.ListShapesRequest{}
func (s *CoreShapesDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/core/core_capture_filter_data_source.go ===
func CoreCaptureFilterDataSource() *schema.Resource {
	fieldMap := make(map[string]*schema.Schema)
func readSingularCoreCaptureFilter(d *schema.ResourceData, m interface{}) error {
	sync := &CoreCaptureFilterDataSourceCrud{}
func (s *CoreCaptureFilterDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *CoreCaptureFilterDataSourceCrud) Get() error {
	request := oci_core.GetCaptureFilterRequest{}
func (s *CoreCaptureFilterDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/core/core_drg_route_table_route_rule_resource.go ===
func CoreDrgRouteTableRouteRuleResource() *schema.Resource {
	return &schema.Resource{
func createCoreDrgRouteTableRouteRule(d *schema.ResourceData, m interface{}) error {
	sync := &CoreDrgRouteTableRouteRuleResourceCrud{}
func readCoreDrgRouteTableRouteRule(d *schema.ResourceData, m interface{}) error {
	sync := &CoreDrgRouteTableRouteRuleResourceCrud{}
func deleteCoreDrgRouteTableRouteRule(d *schema.ResourceData, m interface{}) error {
	sync := &CoreDrgRouteTableRouteRuleResourceCrud{}
func updateCoreDrgRouteTableRouteRuleResource(d *schema.ResourceData, m interface{}) error {
	sync := &CoreDrgRouteTableRouteRuleResourceCrud{}
func (s *CoreDrgRouteTableRouteRuleResourceCrud) ID() string {
	return GetDrgRouteTableRouteRuleCompositeId(s.D.Get("drg_route_table_id").(string), *s.Res.Id)
func (s *CoreDrgRouteTableRouteRuleResourceCrud) Create() error {
	request := oci_core.AddDrgRouteRulesRequest{}
func (s *CoreDrgRouteTableRouteRuleResourceCrud) SetData() error {
	if s.Res == nil {
func (s *CoreDrgRouteTableRouteRuleResourceCrud) Get() error {

func (s *CoreDrgRouteTableRouteRuleResourceCrud) Delete() error {

func (s *CoreDrgRouteTableRouteRuleResourceCrud) Update() error {
	request := oci_core.UpdateDrgRouteRulesRequest{}
func (s *CoreDrgRouteTableRouteRuleResourceCrud) mapToAddDrgRouteRuleDetails(fieldKeyFormat string) (oci_core.AddDrgRouteRuleDetails, error) {
	result := oci_core.AddDrgRouteRuleDetails{}

=== ./internal/service/core/core_compute_image_capability_schema_data_source.go ===
func CoreComputeImageCapabilitySchemaDataSource() *schema.Resource {
	fieldMap := make(map[string]*schema.Schema)
func readSingularCoreComputeImageCapabilitySchema(d *schema.ResourceData, m interface{}) error {
	sync := &CoreComputeImageCapabilitySchemaDataSourceCrud{}
func (s *CoreComputeImageCapabilitySchemaDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *CoreComputeImageCapabilitySchemaDataSourceCrud) Get() error {
	request := oci_core.GetComputeImageCapabilitySchemaRequest{}
func (s *CoreComputeImageCapabilitySchemaDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/data_safe/data_safe_sdm_masking_policy_difference_difference_column_data_source.go ===
func DataSafeSdmMaskingPolicyDifferenceDifferenceColumnDataSource() *schema.Resource {
	return &schema.Resource{
func readSingularDataSafeSdmMaskingPolicyDifferenceDifferenceColumn(d *schema.ResourceData, m interface{}) error {
	sync := &DataSafeSdmMaskingPolicyDifferenceDifferenceColumnDataSourceCrud{}
func (s *DataSafeSdmMaskingPolicyDifferenceDifferenceColumnDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *DataSafeSdmMaskingPolicyDifferenceDifferenceColumnDataSourceCrud) Get() error {
	request1 := oci_data_safe.ListDifferenceColumnsRequest{}
func (s *DataSafeSdmMaskingPolicyDifferenceDifferenceColumnDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/data_safe/data_safe_security_policy_deployment_security_policy_entry_state_data_source.go ===
func DataSafeSecurityPolicyDeploymentSecurityPolicyEntryStateDataSource() *schema.Resource {
	return &schema.Resource{
func readSingularDataSafeSecurityPolicyDeploymentSecurityPolicyEntryState(d *schema.ResourceData, m interface{}) error {
	sync := &DataSafeSecurityPolicyDeploymentSecurityPolicyEntryStateDataSourceCrud{}
func (s *DataSafeSecurityPolicyDeploymentSecurityPolicyEntryStateDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *DataSafeSecurityPolicyDeploymentSecurityPolicyEntryStateDataSourceCrud) Get() error {
	request := oci_data_safe.GetSecurityPolicyEntryStateRequest{}
func (s *DataSafeSecurityPolicyDeploymentSecurityPolicyEntryStateDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/data_safe/data_safe_audit_profile_collected_audit_volumes_data_source.go ===
func DataSafeAuditProfileCollectedAuditVolumesDataSource() *schema.Resource {
	return &schema.Resource{
func readDataSafeAuditProfileCollectedAuditVolumes(d *schema.ResourceData, m interface{}) error {
	sync := &DataSafeAuditProfileCollectedAuditVolumesDataSourceCrud{}
func (s *DataSafeAuditProfileCollectedAuditVolumesDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *DataSafeAuditProfileCollectedAuditVolumesDataSourceCrud) Get() error {
	request := oci_data_safe.ListCollectedAuditVolumesRequest{}
func (s *DataSafeAuditProfileCollectedAuditVolumesDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/data_safe/data_safe_security_policy_deployment_resource.go ===
func DataSafeSecurityPolicyDeploymentResource() *schema.Resource {
	return &schema.Resource{
func createDataSafeSecurityPolicyDeployment(d *schema.ResourceData, m interface{}) error {
	sync := &DataSafeSecurityPolicyDeploymentResourceCrud{}
func readDataSafeSecurityPolicyDeployment(d *schema.ResourceData, m interface{}) error {
	sync := &DataSafeSecurityPolicyDeploymentResourceCrud{}
func updateDataSafeSecurityPolicyDeployment(d *schema.ResourceData, m interface{}) error {
	sync := &DataSafeSecurityPolicyDeploymentResourceCrud{}
func deleteDataSafeSecurityPolicyDeployment(d *schema.ResourceData, m interface{}) error {
	return nil
func (s *DataSafeSecurityPolicyDeploymentResourceCrud) ID() string {
	return *s.Res.Id
func (s *DataSafeSecurityPolicyDeploymentResourceCrud) CreatedPending() []string {
	return []string{
func (s *DataSafeSecurityPolicyDeploymentResourceCrud) CreatedTarget() []string {
	return []string{
func (s *DataSafeSecurityPolicyDeploymentResourceCrud) DeletedPending() []string {
	return []string{
func (s *DataSafeSecurityPolicyDeploymentResourceCrud) DeletedTarget() []string {
	return []string{
func (s *DataSafeSecurityPolicyDeploymentResourceCrud) Create() error {
	request := oci_data_safe.UpdateSecurityPolicyDeploymentRequest{}
func (s *DataSafeSecurityPolicyDeploymentResourceCrud) getSecurityPolicyDeploymentFromWorkRequest(workId *string, retryPolicy *oci_common.RetryPolicy,
	actionTypeEnum oci_data_safe.WorkRequestResourceActionTypeEnum, timeout time.Duration) error {
func securityPolicyDeploymentWaitForWorkRequest(wId *string, entityType string, action oci_data_safe.WorkRequestResourceActionTypeEnum,
	timeout time.Duration, disableFoundRetries bool, client *oci_data_safe.DataSafeClient) (*string, error) {
func getErrorFromDataSafeSecurityPolicyDeploymentWorkRequest(client *oci_data_safe.DataSafeClient, workId *string, retryPolicy *oci_common.RetryPolicy, entityType string, action oci_data_safe.WorkRequestResourceActionTypeEnum) error {
	response, err := client.ListWorkRequestErrors(context.Background(),
func (s *DataSafeSecurityPolicyDeploymentResourceCrud) Get() error {
	request := oci_data_safe.GetSecurityPolicyDeploymentRequest{}
func (s *DataSafeSecurityPolicyDeploymentResourceCrud) Update() error {
	if compartment, ok := s.D.GetOkExists("compartment_id"); ok && s.D.HasChange("compartment_id") {
func (s *DataSafeSecurityPolicyDeploymentResourceCrud) SetData() error {
	if s.Res.CompartmentId != nil {
func (s *DataSafeSecurityPolicyDeploymentResourceCrud) updateCompartment(compartment interface{}) error {
	changeCompartmentRequest := oci_data_safe.ChangeSecurityPolicyDeploymentCompartmentRequest{}

=== ./internal/service/data_safe/data_safe_sql_firewall_policies_data_source.go ===
func DataSafeSqlFirewallPoliciesDataSource() *schema.Resource {
	return &schema.Resource{
func readDataSafeSqlFirewallPolicies(d *schema.ResourceData, m interface{}) error {
	sync := &DataSafeSqlFirewallPoliciesDataSourceCrud{}
func (s *DataSafeSqlFirewallPoliciesDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *DataSafeSqlFirewallPoliciesDataSourceCrud) Get() error {
	request := oci_data_safe.ListSqlFirewallPoliciesRequest{}
func (s *DataSafeSqlFirewallPoliciesDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/data_safe/data_safe_alert_policy_rules_data_source.go ===
func DataSafeAlertPolicyRulesDataSource() *schema.Resource {
	return &schema.Resource{
func readDataSafeAlertPolicyRules(d *schema.ResourceData, m interface{}) error {
	sync := &DataSafeAlertPolicyRulesDataSourceCrud{}
func (s *DataSafeAlertPolicyRulesDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *DataSafeAlertPolicyRulesDataSourceCrud) Get() error {
	request := oci_data_safe.ListAlertPolicyRulesRequest{}
func (s *DataSafeAlertPolicyRulesDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/data_safe/data_safe_user_assessments_data_source.go ===
func DataSafeUserAssessmentsDataSource() *schema.Resource {
	return &schema.Resource{
func readDataSafeUserAssessments(d *schema.ResourceData, m interface{}) error {
	sync := &DataSafeUserAssessmentsDataSourceCrud{}
func (s *DataSafeUserAssessmentsDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *DataSafeUserAssessmentsDataSourceCrud) Get() error {
	request := oci_data_safe.ListUserAssessmentsRequest{}
func (s *DataSafeUserAssessmentsDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/data_safe/data_safe_set_user_assessment_baseline_management_resource.go ===
func DataSafeSetUserAssessmentBaselineManagementResource() *schema.Resource {
	return &schema.Resource{
func createDataSafeSetUserAssessmentBaselineManagement(d *schema.ResourceData, m interface{}) error {
	sync := &DataSafeSetUserAssessmentBaselineManagementResourceCrud{}
func readDataSafeSetUserAssessmentBaselineManagement(d *schema.ResourceData, m interface{}) error {
	return nil
func deleteDataSafeSetUserAssessmentBaselineManagement(d *schema.ResourceData, m interface{}) error {
	return nil
func (s *DataSafeSetUserAssessmentBaselineManagementResourceCrud) GetAssessmentWorkReq(targetId string, compartmentId string) (string, error) {
	listWorkRequestsRequest := oci_data_safe.ListWorkRequestsRequest{SortBy: oci_data_safe.ListWorkRequestsSortByEnum("ACCEPTEDTIME"), SortOrder: oci_data_safe.ListWorkRequestsSortOrderEnum("DESC")}
func (s *DataSafeSetUserAssessmentBaselineManagementResourceCrud) getSavedAssessmentIdFromWorkRequest(workId *string, retryPolicy *oci_common.RetryPolicy,
	actionTypeEnum oci_data_safe.WorkRequestResourceActionTypeEnum, timeout time.Duration, targetId *string, compartmentId *string) (string, error) {
func (s *DataSafeSetUserAssessmentBaselineManagementResourceCrud) GetSavedAssessmentList(targetId string, compartmentId string) (string, error) {
	// Set up the request
func (s *DataSafeSetUserAssessmentBaselineManagementResourceCrud) ID() string {
	return *s.Res.OpcRequestId
func (s *DataSafeSetUserAssessmentBaselineManagementResourceCrud) Get() error {
	request := oci_data_safe.SetUserAssessmentBaselineRequest{}
func (s *DataSafeSetUserAssessmentBaselineManagementResourceCrud) Create() error {
	request := oci_data_safe.SetUserAssessmentBaselineRequest{}
func (s *DataSafeSetUserAssessmentBaselineManagementResourceCrud) getSetUserAssessmentBaselineFromWorkRequest(workId *string, retryPolicy *oci_common.RetryPolicy,
	actionTypeEnum oci_data_safe.WorkRequestResourceActionTypeEnum, timeout time.Duration) error {
func setUserAssessmentBaselineManagementWaitForWorkRequest(wId *string, entityType string, action oci_data_safe.WorkRequestResourceActionTypeEnum,
	timeout time.Duration, disableFoundRetries bool, client *oci_data_safe.DataSafeClient) (*string, error) {
func getErrorFromDataSafeSetUserAssessmentBaselineManagementWorkRequest(client *oci_data_safe.DataSafeClient, workId *string, retryPolicy *oci_common.RetryPolicy, entityType string, action oci_data_safe.WorkRequestResourceActionTypeEnum) error {
	response, err := client.ListWorkRequestErrors(context.Background(),
func (s *DataSafeSetUserAssessmentBaselineManagementResourceCrud) SetData() error {
	return nil

=== ./internal/service/data_safe/data_safe_generate_on_prem_connector_configuration_resource.go ===
func DataSafeGenerateOnPremConnectorConfigurationResource() *schema.Resource {
	return &schema.Resource{
func createDataSafeGenerateOnPremConnectorConfiguration(d *schema.ResourceData, m interface{}) error {
	sync := &DataSafeGenerateOnPremConnectorConfigurationResourceCrud{}
func readDataSafeGenerateOnPremConnectorConfiguration(d *schema.ResourceData, m interface{}) error {
	return nil
func deleteDataSafeGenerateOnPremConnectorConfiguration(d *schema.ResourceData, m interface{}) error {
	return nil
func (s *DataSafeGenerateOnPremConnectorConfigurationResourceCrud) ID() string {
	return *s.Res.OpcRequestId
func (s *DataSafeGenerateOnPremConnectorConfigurationResourceCrud) Create() error {
	request := oci_data_safe.GenerateOnPremConnectorConfigurationRequest{}
func (s *DataSafeGenerateOnPremConnectorConfigurationResourceCrud) SetData() error {
	return nil

=== ./internal/service/data_safe/data_safe_discovery_jobs_data_source.go ===
func DataSafeDiscoveryJobsDataSource() *schema.Resource {
	return &schema.Resource{
func readDataSafeDiscoveryJobs(d *schema.ResourceData, m interface{}) error {
	sync := &DataSafeDiscoveryJobsDataSourceCrud{}
func (s *DataSafeDiscoveryJobsDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *DataSafeDiscoveryJobsDataSourceCrud) Get() error {
	request := oci_data_safe.ListDiscoveryJobsRequest{}
func (s *DataSafeDiscoveryJobsDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/data_safe/data_safe_library_masking_formats_data_source.go ===
func DataSafeLibraryMaskingFormatsDataSource() *schema.Resource {
	return &schema.Resource{
func readDataSafeLibraryMaskingFormats(d *schema.ResourceData, m interface{}) error {
	sync := &DataSafeLibraryMaskingFormatsDataSourceCrud{}
func (s *DataSafeLibraryMaskingFormatsDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *DataSafeLibraryMaskingFormatsDataSourceCrud) Get() error {
	request := oci_data_safe.ListLibraryMaskingFormatsRequest{}
func (s *DataSafeLibraryMaskingFormatsDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/data_safe/data_safe_audit_trail_analytic_data_source.go ===
func DataSafeAuditTrailAnalyticDataSource() *schema.Resource {
	return &schema.Resource{
func readSingularDataSafeAuditTrailAnalytic(d *schema.ResourceData, m interface{}) error {
	sync := &DataSafeAuditTrailAnalyticDataSourceCrud{}
func (s *DataSafeAuditTrailAnalyticDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *DataSafeAuditTrailAnalyticDataSourceCrud) Get() error {
	request := oci_data_safe.ListAuditTrailAnalyticsRequest{}
func (s *DataSafeAuditTrailAnalyticDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/data_safe/data_safe_discovery_job_resource.go ===
func DataSafeDiscoveryJobResource() *schema.Resource {
	return &schema.Resource{
func createDataSafeDiscoveryJob(d *schema.ResourceData, m interface{}) error {
	sync := &DataSafeDiscoveryJobResourceCrud{}
func readDataSafeDiscoveryJob(d *schema.ResourceData, m interface{}) error {
	sync := &DataSafeDiscoveryJobResourceCrud{}
func updateDataSafeDiscoveryJob(d *schema.ResourceData, m interface{}) error {
	sync := &DataSafeDiscoveryJobResourceCrud{}
func deleteDataSafeDiscoveryJob(d *schema.ResourceData, m interface{}) error {
	sync := &DataSafeDiscoveryJobResourceCrud{}
func (s *DataSafeDiscoveryJobResourceCrud) ID() string {
	return *s.Res.Id
func (s *DataSafeDiscoveryJobResourceCrud) CreatedPending() []string {
	return []string{
func (s *DataSafeDiscoveryJobResourceCrud) CreatedTarget() []string {
	return []string{
func (s *DataSafeDiscoveryJobResourceCrud) DeletedPending() []string {
	return []string{
func (s *DataSafeDiscoveryJobResourceCrud) DeletedTarget() []string {
	return []string{
func (s *DataSafeDiscoveryJobResourceCrud) Create() error {
	request := oci_data_safe.CreateDiscoveryJobRequest{}
func (s *DataSafeDiscoveryJobResourceCrud) getDiscoveryJobFromWorkRequest(workId *string, retryPolicy *oci_common.RetryPolicy,
	actionTypeEnum oci_data_safe.WorkRequestResourceActionTypeEnum, timeout time.Duration) error {
func discoveryJobWaitForWorkRequest(wId *string, entityType string, action oci_data_safe.WorkRequestResourceActionTypeEnum,
	timeout time.Duration, disableFoundRetries bool, client *oci_data_safe.DataSafeClient) (*string, error) {
func getErrorFromDataSafeDiscoveryJobWorkRequest(client *oci_data_safe.DataSafeClient, workId *string, retryPolicy *oci_common.RetryPolicy, entityType string, action oci_data_safe.WorkRequestResourceActionTypeEnum) error {
	response, err := client.ListWorkRequestErrors(context.Background(),
func (s *DataSafeDiscoveryJobResourceCrud) Get() error {
	request := oci_data_safe.GetDiscoveryJobRequest{}
func (s *DataSafeDiscoveryJobResourceCrud) Update() error {
	if compartment, ok := s.D.GetOkExists("compartment_id"); ok && s.D.HasChange("compartment_id") {
func (s *DataSafeDiscoveryJobResourceCrud) Delete() error {
	request := oci_data_safe.DeleteDiscoveryJobRequest{}
func (s *DataSafeDiscoveryJobResourceCrud) SetData() error {
	if s.Res.CompartmentId != nil {
func (s *DataSafeDiscoveryJobResourceCrud) mapToTablesForDiscovery(fieldKeyFormat string) (oci_data_safe.TablesForDiscovery, error) {
	result := oci_data_safe.TablesForDiscovery{}
func (s *DataSafeDiscoveryJobResourceCrud) updateCompartment(compartment interface{}) error {
	changeCompartmentRequest := oci_data_safe.ChangeDiscoveryJobCompartmentRequest{}

=== ./internal/service/data_safe/data_safe_audit_profile_analytic_data_source.go ===
func DataSafeAuditProfileAnalyticDataSource() *schema.Resource {
	return &schema.Resource{
func readSingularDataSafeAuditProfileAnalytic(d *schema.ResourceData, m interface{}) error {
	sync := &DataSafeAuditProfileAnalyticDataSourceCrud{}
func (s *DataSafeAuditProfileAnalyticDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *DataSafeAuditProfileAnalyticDataSourceCrud) Get() error {
	request := oci_data_safe.ListAuditProfileAnalyticsRequest{}
func (s *DataSafeAuditProfileAnalyticDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/data_safe/data_safe_audit_policy_resource.go ===
func DataSafeAuditPolicyResource() *schema.Resource {
	return &schema.Resource{
func createDataSafeAuditPolicy(d *schema.ResourceData, m interface{}) error {
	sync := &DataSafeAuditPolicyResourceCrud{}
func readDataSafeAuditPolicy(d *schema.ResourceData, m interface{}) error {
	sync := &DataSafeAuditPolicyResourceCrud{}
func updateDataSafeAuditPolicy(d *schema.ResourceData, m interface{}) error {
	sync := &DataSafeAuditPolicyResourceCrud{}
func deleteDataSafeAuditPolicy(d *schema.ResourceData, m interface{}) error {
	return nil
func (s *DataSafeAuditPolicyResourceCrud) ID() string {
	return *s.Res.Id
func (s *DataSafeAuditPolicyResourceCrud) CreatedPending() []string {
	return []string{
func (s *DataSafeAuditPolicyResourceCrud) CreatedTarget() []string {
	return []string{
func (s *DataSafeAuditPolicyResourceCrud) DeletedPending() []string {
	return []string{
func (s *DataSafeAuditPolicyResourceCrud) DeletedTarget() []string {
	return []string{
func (s *DataSafeAuditPolicyResourceCrud) Create() error {
	request := oci_data_safe.UpdateAuditPolicyRequest{}
func (s *DataSafeAuditPolicyResourceCrud) getAuditPolicyFromWorkRequest(workId *string, retryPolicy *oci_common.RetryPolicy,
	actionTypeEnum oci_data_safe.WorkRequestResourceActionTypeEnum, timeout time.Duration) error {
func auditPolicyWaitForWorkRequest(wId *string, entityType string, action oci_data_safe.WorkRequestResourceActionTypeEnum,
	timeout time.Duration, disableFoundRetries bool, client *oci_data_safe.DataSafeClient) (*string, error) {
func getErrorFromDataSafeAuditPolicyWorkRequest(client *oci_data_safe.DataSafeClient, workId *string, retryPolicy *oci_common.RetryPolicy, entityType string, action oci_data_safe.WorkRequestResourceActionTypeEnum) error {
	response, err := client.ListWorkRequestErrors(context.Background(),
func (s *DataSafeAuditPolicyResourceCrud) Get() error {
	request := oci_data_safe.GetAuditPolicyRequest{}
func (s *DataSafeAuditPolicyResourceCrud) Update() error {
	if compartment, ok := s.D.GetOkExists("compartment_id"); ok && s.D.HasChange("compartment_id") {
func (s *DataSafeAuditPolicyResourceCrud) SetData() error {
	auditConditions := []interface{}{}
func (s *DataSafeAuditPolicyResourceCrud) ProvisionAuditPolicy() error {
	request := oci_data_safe.ProvisionAuditPolicyRequest{}
func (s *DataSafeAuditPolicyResourceCrud) RetrieveAuditPolicies() error {
	request := oci_data_safe.RetrieveAuditPoliciesRequest{}
func (s *DataSafeAuditPolicyResourceCrud) updateCompartment(compartment interface{}) error {
	changeCompartmentRequest := oci_data_safe.ChangeAuditPolicyCompartmentRequest{}
func (s *DataSafeAuditPolicyResourceCrud) mapToProvisionAuditConditions(fieldKeyFormat string) (oci_data_safe.ProvisionAuditConditions, error) {
	result := oci_data_safe.ProvisionAuditConditions{}
func (s *DataSafeAuditPolicyResourceCrud) mapToEnableConditions(fieldKeyFormat string) (oci_data_safe.EnableConditions, error) {
	result := oci_data_safe.EnableConditions{}

=== ./internal/service/data_safe/data_safe_alert_policy_resource.go ===
func DataSafeAlertPolicyResource() *schema.Resource {
	return &schema.Resource{
func createDataSafeAlertPolicy(d *schema.ResourceData, m interface{}) error {
	sync := &DataSafeAlertPolicyResourceCrud{}
func readDataSafeAlertPolicy(d *schema.ResourceData, m interface{}) error {
	sync := &DataSafeAlertPolicyResourceCrud{}
func updateDataSafeAlertPolicy(d *schema.ResourceData, m interface{}) error {
	sync := &DataSafeAlertPolicyResourceCrud{}
func deleteDataSafeAlertPolicy(d *schema.ResourceData, m interface{}) error {
	sync := &DataSafeAlertPolicyResourceCrud{}
func (s *DataSafeAlertPolicyResourceCrud) ID() string {
	return *s.Res.Id
func (s *DataSafeAlertPolicyResourceCrud) CreatedPending() []string {
	return []string{
func (s *DataSafeAlertPolicyResourceCrud) CreatedTarget() []string {
	return []string{
func (s *DataSafeAlertPolicyResourceCrud) DeletedPending() []string {
	return []string{
func (s *DataSafeAlertPolicyResourceCrud) DeletedTarget() []string {
	return []string{
func (s *DataSafeAlertPolicyResourceCrud) Create() error {
	request := oci_data_safe.CreateAlertPolicyRequest{}
func (s *DataSafeAlertPolicyResourceCrud) getAlertPolicyFromWorkRequest(workId *string, retryPolicy *oci_common.RetryPolicy,
	actionTypeEnum oci_data_safe.WorkRequestResourceActionTypeEnum, timeout time.Duration) error {
func alertPolicyWaitForWorkRequest(wId *string, entityType string, action oci_data_safe.WorkRequestResourceActionTypeEnum,
	timeout time.Duration, disableFoundRetries bool, client *oci_data_safe.DataSafeClient) (*string, error) {
func getErrorFromDataSafeAlertPolicyWorkRequest(client *oci_data_safe.DataSafeClient, workId *string, retryPolicy *oci_common.RetryPolicy, entityType string, action oci_data_safe.WorkRequestResourceActionTypeEnum) error {
	response, err := client.ListWorkRequestErrors(context.Background(),
func (s *DataSafeAlertPolicyResourceCrud) Get() error {
	request := oci_data_safe.GetAlertPolicyRequest{}
func (s *DataSafeAlertPolicyResourceCrud) Update() error {
	if compartment, ok := s.D.GetOkExists("compartment_id"); ok && s.D.HasChange("compartment_id") {
func (s *DataSafeAlertPolicyResourceCrud) Delete() error {
	request := oci_data_safe.DeleteAlertPolicyRequest{}
func (s *DataSafeAlertPolicyResourceCrud) SetData() error {
	s.D.Set("alert_policy_type", s.Res.AlertPolicyType)
func (s *DataSafeAlertPolicyResourceCrud) mapToCreateAlertPolicyRuleDetails(fieldKeyFormat string) (oci_data_safe.CreateAlertPolicyRuleDetails, error) {
	result := oci_data_safe.CreateAlertPolicyRuleDetails{}
func (s *DataSafeAlertPolicyResourceCrud) updateCompartment(compartment interface{}) error {
	changeCompartmentRequest := oci_data_safe.ChangeAlertPolicyCompartmentRequest{}

=== ./internal/service/data_safe/data_safe_sensitive_data_models_data_source.go ===
func DataSafeSensitiveDataModelsDataSource() *schema.Resource {
	return &schema.Resource{
func readDataSafeSensitiveDataModels(d *schema.ResourceData, m interface{}) error {
	sync := &DataSafeSensitiveDataModelsDataSourceCrud{}
func (s *DataSafeSensitiveDataModelsDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *DataSafeSensitiveDataModelsDataSourceCrud) Get() error {
	request := oci_data_safe.ListSensitiveDataModelsRequest{}
func (s *DataSafeSensitiveDataModelsDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/data_safe/data_safe_masking_reports_masked_column_data_source.go ===
func DataSafeMaskingReportsMaskedColumnDataSource() *schema.Resource {
	return &schema.Resource{
func readSingularDataSafeMaskingReportsMaskedColumn(d *schema.ResourceData, m interface{}) error {
	sync := &DataSafeMaskingReportsMaskedColumnDataSourceCrud{}
func (s *DataSafeMaskingReportsMaskedColumnDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *DataSafeMaskingReportsMaskedColumnDataSourceCrud) Get() error {
	request := oci_data_safe.ListMaskedColumnsRequest{}
func (s *DataSafeMaskingReportsMaskedColumnDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/data_safe/data_safe_masking_policy_masking_schemas_data_source.go ===
func DataSafeMaskingPolicyMaskingSchemasDataSource() *schema.Resource {
	return &schema.Resource{
func readDataSafeMaskingPolicyMaskingSchemas(d *schema.ResourceData, m interface{}) error {
	sync := &DataSafeMaskingPolicyMaskingSchemasDataSourceCrud{}
func (s *DataSafeMaskingPolicyMaskingSchemasDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *DataSafeMaskingPolicyMaskingSchemasDataSourceCrud) Get() error {
	request := oci_data_safe.ListMaskingSchemasRequest{}
func (s *DataSafeMaskingPolicyMaskingSchemasDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/data_safe/data_safe_security_policy_report_database_view_access_entry_data_source.go ===
func DataSafeSecurityPolicyReportDatabaseViewAccessEntryDataSource() *schema.Resource {
	return &schema.Resource{
func readSingularDataSafeSecurityPolicyReportDatabaseViewAccessEntry(d *schema.ResourceData, m interface{}) error {
	sync := &DataSafeSecurityPolicyReportDatabaseViewAccessEntryDataSourceCrud{}
func (s *DataSafeSecurityPolicyReportDatabaseViewAccessEntryDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *DataSafeSecurityPolicyReportDatabaseViewAccessEntryDataSourceCrud) Get() error {
	request := oci_data_safe.GetDatabaseViewAccessEntryRequest{}
func (s *DataSafeSecurityPolicyReportDatabaseViewAccessEntryDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/data_safe/data_safe_alerts_data_source.go ===
func DataSafeAlertsDataSource() *schema.Resource {
	return &schema.Resource{
func readDataSafeAlerts(d *schema.ResourceData, m interface{}) error {
	sync := &DataSafeAlertsDataSourceCrud{}
func (s *DataSafeAlertsDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *DataSafeAlertsDataSourceCrud) Get() error {
	request := oci_data_safe.ListAlertsRequest{}
func (s *DataSafeAlertsDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/data_safe/data_safe_alert_data_source.go ===
func DataSafeAlertDataSource() *schema.Resource {
	fieldMap := make(map[string]*schema.Schema)
func readSingularDataSafeAlert(d *schema.ResourceData, m interface{}) error {
	sync := &DataSafeAlertDataSourceCrud{}
func (s *DataSafeAlertDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *DataSafeAlertDataSourceCrud) Get() error {
	request := oci_data_safe.GetAlertRequest{}
func (s *DataSafeAlertDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/data_safe/data_safe_masking_reports_data_source.go ===
func DataSafeMaskingReportsDataSource() *schema.Resource {
	return &schema.Resource{
func readDataSafeMaskingReports(d *schema.ResourceData, m interface{}) error {
	sync := &DataSafeMaskingReportsDataSourceCrud{}
func (s *DataSafeMaskingReportsDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *DataSafeMaskingReportsDataSourceCrud) Get() error {
	request := oci_data_safe.ListMaskingReportsRequest{}
func (s *DataSafeMaskingReportsDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/data_safe/data_safe_target_database_data_source.go ===
func DataSafeTargetDatabaseDataSource() *schema.Resource {
	fieldMap := make(map[string]*schema.Schema)
func readSingularDataSafeTargetDatabase(d *schema.ResourceData, m interface{}) error {
	sync := &DataSafeTargetDatabaseDataSourceCrud{}
func (s *DataSafeTargetDatabaseDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *DataSafeTargetDatabaseDataSourceCrud) Get() error {
	request := oci_data_safe.GetTargetDatabaseRequest{}
func (s *DataSafeTargetDatabaseDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/data_safe/data_safe_sensitive_data_models_sensitive_columns_data_source.go ===
func DataSafeSensitiveDataModelsSensitiveColumnsDataSource() *schema.Resource {
	return &schema.Resource{
func readDataSafeSensitiveDataModelsSensitiveColumns(d *schema.ResourceData, m interface{}) error {
	sync := &DataSafeSensitiveDataModelsSensitiveColumnsDataSourceCrud{}
func (s *DataSafeSensitiveDataModelsSensitiveColumnsDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *DataSafeSensitiveDataModelsSensitiveColumnsDataSourceCrud) Get() error {
	request := oci_data_safe.ListSensitiveColumnsRequest{}
func (s *DataSafeSensitiveDataModelsSensitiveColumnsDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/data_safe/data_safe_database_security_config_management_resource.go ===
func DataSafeDatabaseSecurityConfigManagementResource() *schema.Resource {
	return &schema.Resource{
func createDataSafeDatabaseSecurityConfigManagement(d *schema.ResourceData, m interface{}) error {
	sync := &DataSafeDatabaseSecurityConfigManagementResourceCrud{}
func readDataSafeDatabaseSecurityConfigManagement(d *schema.ResourceData, m interface{}) error {
	sync := &DataSafeDatabaseSecurityConfigResourceCrud{}
func updateDataSafeDatabaseSecurityConfigManagement(d *schema.ResourceData, m interface{}) error {
	sync := &DataSafeDatabaseSecurityConfigManagementResourceCrud{}
func deleteDataSafeDatabaseSecurityConfigManagement(d *schema.ResourceData, m interface{}) error {
	return nil
func (s *DataSafeDatabaseSecurityConfigManagementResourceCrud) ID() string {
	return *s.Res.Id
func (s *DataSafeDatabaseSecurityConfigManagementResourceCrud) RefreshDatabaseSecurityConfiguration() error {
	request := oci_data_safe.RefreshDatabaseSecurityConfigurationRequest{}
func (s *DataSafeDatabaseSecurityConfigManagementResourceCrud) GetDatabaseSecurityConfigWorkReq() error {
	listWorkRequestsRequest := oci_data_safe.ListWorkRequestsRequest{SortBy: oci_data_safe.ListWorkRequestsSortByEnum("ACCEPTEDTIME"), SortOrder: oci_data_safe.ListWorkRequestsSortOrderEnum("DESC")}
func (s *DataSafeDatabaseSecurityConfigManagementResourceCrud) GetDatabaseSecurityConfigList() error {
	request := oci_data_safe.ListDatabaseSecurityConfigsRequest{}
func (s *DataSafeDatabaseSecurityConfigManagementResourceCrud) Get() error {
	request := oci_data_safe.GetDatabaseSecurityConfigRequest{}
func (s *DataSafeDatabaseSecurityConfigManagementResourceCrud) Update() error {
	if compartment, ok := s.D.GetOkExists("compartment_id"); ok && s.D.HasChange("compartment_id") {
func (s *DataSafeDatabaseSecurityConfigManagementResourceCrud) SetData() error {
	if s.Res.CompartmentId != nil {
func (s *DataSafeDatabaseSecurityConfigManagementResourceCrud) mapToUpdateSqlFirewallConfigDetails(fieldKeyFormat string) (oci_data_safe.UpdateSqlFirewallConfigDetails, error) {
	result := oci_data_safe.UpdateSqlFirewallConfigDetails{}
func (s *DataSafeDatabaseSecurityConfigManagementResourceCrud) getDatabaseSecurityConfigFromWorkRequest(workId *string, retryPolicy *oci_common.RetryPolicy,
	actionTypeEnum oci_data_safe.WorkRequestResourceActionTypeEnum, timeout time.Duration) error {
func (s *DataSafeDatabaseSecurityConfigManagementResourceCrud) updateCompartment(compartment interface{}) error {
	changeCompartmentRequest := oci_data_safe.ChangeDatabaseSecurityConfigCompartmentRequest{}

=== ./internal/service/data_safe/data_safe_masking_policy_data_source.go ===
func DataSafeMaskingPolicyDataSource() *schema.Resource {
	fieldMap := make(map[string]*schema.Schema)
func readSingularDataSafeMaskingPolicy(d *schema.ResourceData, m interface{}) error {
	sync := &DataSafeMaskingPolicyDataSourceCrud{}
func (s *DataSafeMaskingPolicyDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *DataSafeMaskingPolicyDataSourceCrud) Get() error {
	request := oci_data_safe.GetMaskingPolicyRequest{}
func (s *DataSafeMaskingPolicyDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/data_safe/data_safe_audit_profile_management_resource.go ===
func DataSafeAuditProfileManagementResource() *schema.Resource {
	return &schema.Resource{
func createDataSafeAuditProfileManagement(d *schema.ResourceData, m interface{}) error {
	sync := &DataSafeAuditProfileManagementResourceCrud{}
func readDataSafeAuditProfileManagement(d *schema.ResourceData, m interface{}) error {
	sync := &DataSafeAuditProfileManagementResourceCrud{}
func updateDataSafeAuditProfileManagement(d *schema.ResourceData, m interface{}) error {
	sync := &DataSafeAuditProfileManagementResourceCrud{}
func deleteDataSafeAuditProfileManagement(d *schema.ResourceData, m interface{}) error {
	return nil
func (s *DataSafeAuditProfileManagementResourceCrud) ID() string {
	return *s.Res.Id
func (s *DataSafeAuditProfileManagementResourceCrud) ChangeAuditRetention() error {
	request := oci_data_safe.ChangeRetentionRequest{}
func (s *DataSafeAuditProfileManagementResourceCrud) GetAuditProfileWorkReq() error {
	listWorkRequestsRequest := oci_data_safe.ListWorkRequestsRequest{SortBy: oci_data_safe.ListWorkRequestsSortByEnum("ACCEPTEDTIME"), SortOrder: oci_data_safe.ListWorkRequestsSortOrderEnum("DESC")}
func (s *DataSafeAuditProfileManagementResourceCrud) GetAuditProfileList() error {
	request := oci_data_safe.ListAuditProfilesRequest{}
func (s *DataSafeAuditProfileManagementResourceCrud) Get() error {
	request := oci_data_safe.GetAuditProfileRequest{}
func (s *DataSafeAuditProfileManagementResourceCrud) Update() error {
	if compartment, ok := s.D.GetOkExists("compartment_id"); ok && s.D.HasChange("compartment_id") {
func (s *DataSafeAuditProfileManagementResourceCrud) SetData() error {
	if s.Res.AuditCollectedVolume != nil {
func (s *DataSafeAuditProfileManagementResourceCrud) getAuditProfileFromWorkRequest(workId *string, retryPolicy *oci_common.RetryPolicy,
	actionTypeEnum oci_data_safe.WorkRequestResourceActionTypeEnum, timeout time.Duration) error {
func (s *DataSafeAuditProfileManagementResourceCrud) updateCompartment(compartment interface{}) error {
	changeCompartmentRequest := oci_data_safe.ChangeAuditProfileCompartmentRequest{}

=== ./internal/service/data_safe/data_safe_target_alert_policy_association_resource.go ===
func DataSafeTargetAlertPolicyAssociationResource() *schema.Resource {
	return &schema.Resource{
func createDataSafeTargetAlertPolicyAssociation(d *schema.ResourceData, m interface{}) error {
	sync := &DataSafeTargetAlertPolicyAssociationResourceCrud{}
func readDataSafeTargetAlertPolicyAssociation(d *schema.ResourceData, m interface{}) error {
	sync := &DataSafeTargetAlertPolicyAssociationResourceCrud{}
func updateDataSafeTargetAlertPolicyAssociation(d *schema.ResourceData, m interface{}) error {
	sync := &DataSafeTargetAlertPolicyAssociationResourceCrud{}
func deleteDataSafeTargetAlertPolicyAssociation(d *schema.ResourceData, m interface{}) error {
	sync := &DataSafeTargetAlertPolicyAssociationResourceCrud{}
func (s *DataSafeTargetAlertPolicyAssociationResourceCrud) ID() string {
	return *s.Res.Id
func (s *DataSafeTargetAlertPolicyAssociationResourceCrud) CreatedPending() []string {
	return []string{
func (s *DataSafeTargetAlertPolicyAssociationResourceCrud) CreatedTarget() []string {
	return []string{
func (s *DataSafeTargetAlertPolicyAssociationResourceCrud) DeletedPending() []string {
	return []string{
func (s *DataSafeTargetAlertPolicyAssociationResourceCrud) DeletedTarget() []string {
	return []string{
func (s *DataSafeTargetAlertPolicyAssociationResourceCrud) Create() error {
	request := oci_data_safe.CreateTargetAlertPolicyAssociationRequest{}
func (s *DataSafeTargetAlertPolicyAssociationResourceCrud) getTargetAlertPolicyAssociationFromWorkRequest(workId *string, retryPolicy *oci_common.RetryPolicy,
	actionTypeEnum oci_data_safe.WorkRequestResourceActionTypeEnum, timeout time.Duration) error {
func targetAlertPolicyAssociationWaitForWorkRequest(wId *string, entityType string, action oci_data_safe.WorkRequestResourceActionTypeEnum,
	timeout time.Duration, disableFoundRetries bool, client *oci_data_safe.DataSafeClient) (*string, error) {
func getErrorFromDataSafeTargetAlertPolicyAssociationWorkRequest(client *oci_data_safe.DataSafeClient, workId *string, retryPolicy *oci_common.RetryPolicy, entityType string, action oci_data_safe.WorkRequestResourceActionTypeEnum) error {
	response, err := client.ListWorkRequestErrors(context.Background(),
func (s *DataSafeTargetAlertPolicyAssociationResourceCrud) Get() error {
	request := oci_data_safe.GetTargetAlertPolicyAssociationRequest{}
func (s *DataSafeTargetAlertPolicyAssociationResourceCrud) Update() error {
	if compartment, ok := s.D.GetOkExists("compartment_id"); ok && s.D.HasChange("compartment_id") {
func (s *DataSafeTargetAlertPolicyAssociationResourceCrud) Delete() error {
	request := oci_data_safe.DeleteTargetAlertPolicyAssociationRequest{}
func (s *DataSafeTargetAlertPolicyAssociationResourceCrud) SetData() error {
	if s.Res.CompartmentId != nil {
func (s *DataSafeTargetAlertPolicyAssociationResourceCrud) updateCompartment(compartment interface{}) error {
	changeCompartmentRequest := oci_data_safe.ChangeTargetAlertPolicyAssociationCompartmentRequest{}

=== ./internal/service/data_safe/data_safe_sensitive_data_model_data_source.go ===
func DataSafeSensitiveDataModelDataSource() *schema.Resource {
	fieldMap := make(map[string]*schema.Schema)
func readSingularDataSafeSensitiveDataModel(d *schema.ResourceData, m interface{}) error {
	sync := &DataSafeSensitiveDataModelDataSourceCrud{}
func (s *DataSafeSensitiveDataModelDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *DataSafeSensitiveDataModelDataSourceCrud) Get() error {
	request := oci_data_safe.GetSensitiveDataModelRequest{}
func (s *DataSafeSensitiveDataModelDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/data_safe/data_safe_target_database_peer_target_database_resource.go ===
func DataSafeTargetDatabasePeerTargetDatabaseResource() *schema.Resource {
	return &schema.Resource{
func createDataSafeTargetDatabasePeerTargetDatabase(d *schema.ResourceData, m interface{}) error {
	sync := &DataSafeTargetDatabasePeerTargetDatabaseResourceCrud{}
func readDataSafeTargetDatabasePeerTargetDatabase(d *schema.ResourceData, m interface{}) error {
	sync := &DataSafeTargetDatabasePeerTargetDatabaseResourceCrud{}
func updateDataSafeTargetDatabasePeerTargetDatabase(d *schema.ResourceData, m interface{}) error {
	sync := &DataSafeTargetDatabasePeerTargetDatabaseResourceCrud{}
func deleteDataSafeTargetDatabasePeerTargetDatabase(d *schema.ResourceData, m interface{}) error {
	sync := &DataSafeTargetDatabasePeerTargetDatabaseResourceCrud{}
func (s *DataSafeTargetDatabasePeerTargetDatabaseResourceCrud) ID() string {
	peerTarget := *s.Res
func (s *DataSafeTargetDatabasePeerTargetDatabaseResourceCrud) CreatedPending() []string {
	return []string{
func (s *DataSafeTargetDatabasePeerTargetDatabaseResourceCrud) CreatedTarget() []string {
	return []string{
func (s *DataSafeTargetDatabasePeerTargetDatabaseResourceCrud) DeletedPending() []string {
	return []string{
func (s *DataSafeTargetDatabasePeerTargetDatabaseResourceCrud) DeletedTarget() []string {
	return []string{
func (s *DataSafeTargetDatabasePeerTargetDatabaseResourceCrud) Create() error {
	request := oci_data_safe.CreatePeerTargetDatabaseRequest{}
func (s *DataSafeTargetDatabasePeerTargetDatabaseResourceCrud) getTargetDatabasePeerTargetDatabaseFromWorkRequest(workId *string, retryPolicy *oci_common.RetryPolicy,
	actionTypeEnum oci_data_safe.WorkRequestResourceActionTypeEnum, timeout time.Duration) error {
func targetDatabasePeerTargetDatabaseWaitForWorkRequest(wId *string, entityType string, action oci_data_safe.WorkRequestResourceActionTypeEnum,
	timeout time.Duration, disableFoundRetries bool, client *oci_data_safe.DataSafeClient) (*string, error) {
func getErrorFromDataSafeTargetDatabasePeerTargetDatabaseWorkRequest(client *oci_data_safe.DataSafeClient, workId *string, retryPolicy *oci_common.RetryPolicy, entityType string, action oci_data_safe.WorkRequestResourceActionTypeEnum) error {
	response, err := client.ListWorkRequestErrors(context.Background(),
func (s *DataSafeTargetDatabasePeerTargetDatabaseResourceCrud) Get() error {
	request := oci_data_safe.GetPeerTargetDatabaseRequest{}
func (s *DataSafeTargetDatabasePeerTargetDatabaseResourceCrud) Update() error {
	request := oci_data_safe.UpdatePeerTargetDatabaseRequest{}
func (s *DataSafeTargetDatabasePeerTargetDatabaseResourceCrud) Delete() error {
	request := oci_data_safe.DeletePeerTargetDatabaseRequest{}
func (s *DataSafeTargetDatabasePeerTargetDatabaseResourceCrud) SetData() error {

func (s *DataSafeTargetDatabasePeerTargetDatabaseResourceCrud) mapToDatabaseDetails(fieldKeyFormat string) (oci_data_safe.DatabaseDetails, error) {
	var baseObject oci_data_safe.DatabaseDetails
func (s *DataSafeTargetDatabasePeerTargetDatabaseResourceCrud) mapToTlsConfig(fieldKeyFormat string) (oci_data_safe.TlsConfig, error) {
	result := oci_data_safe.TlsConfig{}

=== ./internal/service/data_safe/data_safe_report_resource.go ===
func DataSafeReportResource() *schema.Resource {
	return &schema.Resource{
func createDataSafeReport(d *schema.ResourceData, m interface{}) error {
	sync := &DataSafeReportResourceCrud{}
func readDataSafeReport(d *schema.ResourceData, m interface{}) error {
	sync := &DataSafeReportResourceCrud{}
func updateDataSafeReport(d *schema.ResourceData, m interface{}) error {
	sync := &DataSafeReportResourceCrud{}
func deleteDataSafeReport(d *schema.ResourceData, m interface{}) error {
	return nil
func (s *DataSafeReportResourceCrud) ID() string {
	return *s.Res.Id
func (s *DataSafeReportResourceCrud) CreatedPending() []string {
	return []string{
func (s *DataSafeReportResourceCrud) CreatedTarget() []string {
	return []string{
func (s *DataSafeReportResourceCrud) DeletedPending() []string {
	return []string{}
func (s *DataSafeReportResourceCrud) DeletedTarget() []string {
	return []string{}
func (s *DataSafeReportResourceCrud) Create() error {
	request := oci_data_safe.UpdateReportRequest{}
func (s *DataSafeReportResourceCrud) getReportFromWorkRequest(workId *string, retryPolicy *oci_common.RetryPolicy,
	actionTypeEnum oci_data_safe.WorkRequestResourceActionTypeEnum, timeout time.Duration) error {
func reportWaitForWorkRequest(wId *string, entityType string, action oci_data_safe.WorkRequestResourceActionTypeEnum,
	timeout time.Duration, disableFoundRetries bool, client *oci_data_safe.DataSafeClient) (*string, error) {
func getErrorFromDataSafeReportWorkRequest(client *oci_data_safe.DataSafeClient, workId *string, retryPolicy *oci_common.RetryPolicy, entityType string, action oci_data_safe.WorkRequestResourceActionTypeEnum) error {
	response, err := client.ListWorkRequestErrors(context.Background(),
func (s *DataSafeReportResourceCrud) Get() error {
	request := oci_data_safe.GetReportRequest{}
func (s *DataSafeReportResourceCrud) Update() error {
	if compartment, ok := s.D.GetOkExists("compartment_id"); ok && s.D.HasChange("compartment_id") {
func (s *DataSafeReportResourceCrud) SetData() error {
	if s.Res.CompartmentId != nil {
func (s *DataSafeReportResourceCrud) updateCompartment(compartment interface{}) error {
	changeCompartmentRequest := oci_data_safe.ChangeReportCompartmentRequest{}

=== ./internal/service/data_safe/data_safe_security_assessment_security_feature_analytics_data_source.go ===
func DataSafeSecurityAssessmentSecurityFeatureAnalyticsDataSource() *schema.Resource {
	return &schema.Resource{
func readDataSafeSecurityAssessmentSecurityFeatureAnalytics(d *schema.ResourceData, m interface{}) error {
	sync := &DataSafeSecurityAssessmentSecurityFeatureAnalyticsDataSourceCrud{}
func (s *DataSafeSecurityAssessmentSecurityFeatureAnalyticsDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *DataSafeSecurityAssessmentSecurityFeatureAnalyticsDataSourceCrud) Get() error {
	request := oci_data_safe.ListSecurityFeatureAnalyticsRequest{}
func (s *DataSafeSecurityAssessmentSecurityFeatureAnalyticsDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/data_safe/data_safe_list_user_grants_data_source.go ===
func DataSafeListUserGrantsDataSource() *schema.Resource {
	return &schema.Resource{
func readDataSafeListUserGrants(d *schema.ResourceData, m interface{}) error {
	sync := &DataSafeListUserGrantsDataSourceCrud{}
func (s *DataSafeListUserGrantsDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *DataSafeListUserGrantsDataSourceCrud) Get() error {
	request := oci_data_safe.ListGrantsRequest{}
func (s *DataSafeListUserGrantsDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/data_safe/data_safe_masking_policy_apply_difference_to_masking_columns_resource.go ===
func DataSafeMaskingPolicyApplyDifferenceToMaskingColumnsResource() *schema.Resource {
	return &schema.Resource{
func createDataSafeMaskingPolicyApplyDifferenceToMaskingColumns(d *schema.ResourceData, m interface{}) error {
	sync := &DataSafeMaskingPolicyApplyDifferenceToMaskingColumnsResourceCrud{}
func readDataSafeMaskingPolicyApplyDifferenceToMaskingColumns(d *schema.ResourceData, m interface{}) error {
	return nil
func deleteDataSafeMaskingPolicyApplyDifferenceToMaskingColumns(d *schema.ResourceData, m interface{}) error {
	return nil
func (s *DataSafeMaskingPolicyApplyDifferenceToMaskingColumnsResourceCrud) ID() string {
	return s.D.Id()
func (s *DataSafeMaskingPolicyApplyDifferenceToMaskingColumnsResourceCrud) Get() error {
	return nil
func (s *DataSafeMaskingPolicyApplyDifferenceToMaskingColumnsResourceCrud) Create() error {
	request := oci_data_safe.ApplySdmMaskingPolicyDifferenceRequest{}
func (s *DataSafeMaskingPolicyApplyDifferenceToMaskingColumnsResourceCrud) getDataSafeMaskingPolicyApplyDifferenceToMaskingColumnsFromWorkRequest(workId *string, retryPolicy *oci_common.RetryPolicy,
	actionTypeEnum oci_data_safe.WorkRequestResourceActionTypeEnum, timeout time.Duration) error {
func applyDifferenceToMaskingColumnsWaitForWorkRequest(wId *string, entityType string, action oci_data_safe.WorkRequestResourceActionTypeEnum,
	timeout time.Duration, disableFoundRetries bool, client *oci_data_safe.DataSafeClient) (*string, error) {
func getErrorFromDataSafeMaskingPolicyApplyDifferenceToMaskingColumnsWorkRequest(client *oci_data_safe.DataSafeClient, workId *string, retryPolicy *oci_common.RetryPolicy, entityType string, action oci_data_safe.WorkRequestResourceActionTypeEnum) error {
	response, err := client.ListWorkRequestErrors(context.Background(),
func (s *DataSafeMaskingPolicyApplyDifferenceToMaskingColumnsResourceCrud) SetData() error {
	return nil
func (s *DataSafeMaskingPolicyApplyDifferenceToMaskingColumnsResourceCrud) Delete() error {
	return nil

=== ./internal/service/data_safe/data_safe_security_policy_reports_data_source.go ===
func DataSafeSecurityPolicyReportsDataSource() *schema.Resource {
	return &schema.Resource{
func readDataSafeSecurityPolicyReports(d *schema.ResourceData, m interface{}) error {
	sync := &DataSafeSecurityPolicyReportsDataSourceCrud{}
func (s *DataSafeSecurityPolicyReportsDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *DataSafeSecurityPolicyReportsDataSourceCrud) Get() error {
	request := oci_data_safe.ListSecurityPolicyReportsRequest{}
func (s *DataSafeSecurityPolicyReportsDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/data_safe/data_safe_data_safe_private_endpoints_data_source.go ===
func DataSafeDataSafePrivateEndpointsDataSource() *schema.Resource {
	return &schema.Resource{
func readDataSafeDataSafePrivateEndpoints(d *schema.ResourceData, m interface{}) error {
	sync := &DataSafeDataSafePrivateEndpointsDataSourceCrud{}
func (s *DataSafeDataSafePrivateEndpointsDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *DataSafeDataSafePrivateEndpointsDataSourceCrud) Get() error {
	request := oci_data_safe.ListDataSafePrivateEndpointsRequest{}
func (s *DataSafeDataSafePrivateEndpointsDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/data_safe/data_safe_compare_user_assessment_resource.go ===
func DataSafeCompareUserAssessmentResource() *schema.Resource {
	return &schema.Resource{
func createDataSafeCompareUserAssessment(d *schema.ResourceData, m interface{}) error {
	sync := &DataSafeCompareUserAssessmentResourceCrud{}
func readDataSafeCompareUserAssessment(d *schema.ResourceData, m interface{}) error {
	return nil
func deleteDataSafeCompareUserAssessment(d *schema.ResourceData, m interface{}) error {
	return nil
func (s *DataSafeCompareUserAssessmentResourceCrud) ID() string {
	return *s.Res.OpcRequestId
func (s *DataSafeCompareUserAssessmentResourceCrud) Get() error {
	request := oci_data_safe.GetUserAssessmentComparisonRequest{}
func (s *DataSafeCompareUserAssessmentResourceCrud) Create() error {
	request := oci_data_safe.CompareUserAssessmentRequest{}
func (s *DataSafeCompareUserAssessmentResourceCrud) getCompareUserAssessmentFromWorkRequest(workId *string, retryPolicy *oci_common.RetryPolicy,
	actionTypeEnum oci_data_safe.WorkRequestResourceActionTypeEnum, timeout time.Duration) error {
func compareUserAssessmentWaitForWorkRequest(wId *string, entityType string, action oci_data_safe.WorkRequestResourceActionTypeEnum,
	timeout time.Duration, disableFoundRetries bool, client *oci_data_safe.DataSafeClient) (*string, error) {
func getErrorFromDataSafeCompareUserAssessmentWorkRequest(client *oci_data_safe.DataSafeClient, workId *string, retryPolicy *oci_common.RetryPolicy, entityType string, action oci_data_safe.WorkRequestResourceActionTypeEnum) error {
	response, err := client.ListWorkRequestErrors(context.Background(),
func (s *DataSafeCompareUserAssessmentResourceCrud) SetData() error {
	return nil
func (s *DataSafeCompareUserAssessmentResourceCrud) Delete() error {
	return nil

=== ./internal/service/data_safe/data_safe_report_content_data_source.go ===
func DataSafeReportContentDataSource() *schema.Resource {
	return &schema.Resource{
func readSingularDataSafeReportContent(d *schema.ResourceData, m interface{}) error {
	sync := &DataSafeReportContentDataSourceCrud{}
func (s *DataSafeReportContentDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *DataSafeReportContentDataSourceCrud) Get() error {
	request := oci_data_safe.GetReportContentRequest{}
func (s *DataSafeReportContentDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/data_safe/data_safe_audit_profiles_data_source.go ===
func DataSafeAuditProfilesDataSource() *schema.Resource {
	return &schema.Resource{
func readDataSafeAuditProfiles(d *schema.ResourceData, m interface{}) error {
	sync := &DataSafeAuditProfilesDataSourceCrud{}
func (s *DataSafeAuditProfilesDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *DataSafeAuditProfilesDataSourceCrud) Get() error {
	request := oci_data_safe.ListAuditProfilesRequest{}
func (s *DataSafeAuditProfilesDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/data_safe/data_safe_sql_firewall_policy_data_source.go ===
func DataSafeSqlFirewallPolicyDataSource() *schema.Resource {
	fieldMap := make(map[string]*schema.Schema)
func readSingularDataSafeSqlFirewallPolicy(d *schema.ResourceData, m interface{}) error {
	sync := &DataSafeSqlFirewallPolicyDataSourceCrud{}
func (s *DataSafeSqlFirewallPolicyDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *DataSafeSqlFirewallPolicyDataSourceCrud) Get() error {
	request := oci_data_safe.GetSqlFirewallPolicyRequest{}
func (s *DataSafeSqlFirewallPolicyDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/data_safe/data_safe_sensitive_types_data_source.go ===
func DataSafeSensitiveTypesDataSource() *schema.Resource {
	return &schema.Resource{
func readDataSafeSensitiveTypes(d *schema.ResourceData, m interface{}) error {
	sync := &DataSafeSensitiveTypesDataSourceCrud{}
func (s *DataSafeSensitiveTypesDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *DataSafeSensitiveTypesDataSourceCrud) Get() error {
	request := oci_data_safe.ListSensitiveTypesRequest{}
func (s *DataSafeSensitiveTypesDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/data_safe/data_safe_target_alert_policy_association_data_source.go ===
func DataSafeTargetAlertPolicyAssociationDataSource() *schema.Resource {
	fieldMap := make(map[string]*schema.Schema)
func readSingularDataSafeTargetAlertPolicyAssociation(d *schema.ResourceData, m interface{}) error {
	sync := &DataSafeTargetAlertPolicyAssociationDataSourceCrud{}
func (s *DataSafeTargetAlertPolicyAssociationDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *DataSafeTargetAlertPolicyAssociationDataSourceCrud) Get() error {
	request := oci_data_safe.GetTargetAlertPolicyAssociationRequest{}
func (s *DataSafeTargetAlertPolicyAssociationDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/data_safe/data_safe_unset_security_assessment_baseline_management_resource.go ===
func DataSafeUnsetSecurityAssessmentBaselineManagementResource() *schema.Resource {
	return &schema.Resource{
func createDataSafeUnsetSecurityAssessmentBaselineManagement(d *schema.ResourceData, m interface{}) error {
	sync := &DataSafeUnsetSecurityAssessmentBaselineManagementResourceCrud{}
func readDataSafeUnsetSecurityAssessmentBaselineManagement(d *schema.ResourceData, m interface{}) error {
	return nil
func deleteDataSafeUnsetSecurityAssessmentBaselineManagement(d *schema.ResourceData, m interface{}) error {
	return nil
func (s *DataSafeUnsetSecurityAssessmentBaselineManagementResourceCrud) GetBaselineWorkReq(compartmentId string, SAId string) (string, error) {
	listWorkRequestsRequest := oci_data_safe.ListWorkRequestsRequest{SortBy: oci_data_safe.ListWorkRequestsSortByEnum("ACCEPTEDTIME"), SortOrder: oci_data_safe.ListWorkRequestsSortOrderEnum("DESC")}
func (s *DataSafeUnsetSecurityAssessmentBaselineManagementResourceCrud) getSavedAssessmentIdFromWorkRequest(workId *string, retryPolicy *oci_common.RetryPolicy,
	actionTypeEnum oci_data_safe.WorkRequestResourceActionTypeEnum, timeout time.Duration) (string, error) {
func (s *DataSafeUnsetSecurityAssessmentBaselineManagementResourceCrud) ID() string {
	return *s.Res.OpcRequestId
func (s *DataSafeUnsetSecurityAssessmentBaselineManagementResourceCrud) Create() error {
	request := oci_data_safe.UnsetSecurityAssessmentBaselineRequest{}
func (s *DataSafeUnsetSecurityAssessmentBaselineManagementResourceCrud) getUnsetSecurityAssessmentBaselineManagementFromWorkRequest(workId *string, retryPolicy *oci_common.RetryPolicy,
	actionTypeEnum oci_data_safe.WorkRequestResourceActionTypeEnum, timeout time.Duration) error {
func unsetSecurityAssessmentBaselineManagementWaitForWorkRequest(wId *string, entityType string, action oci_data_safe.WorkRequestResourceActionTypeEnum,
	timeout time.Duration, disableFoundRetries bool, client *oci_data_safe.DataSafeClient) (*string, error) {
func getErrorFromDataSafeUnsetSecurityAssessmentBaselineManagementWorkRequest(client *oci_data_safe.DataSafeClient, workId *string, retryPolicy *oci_common.RetryPolicy, entityType string, action oci_data_safe.WorkRequestResourceActionTypeEnum) error {
	response, err := client.ListWorkRequestErrors(context.Background(),
func (s *DataSafeUnsetSecurityAssessmentBaselineManagementResourceCrud) SetData() error {
	return nil

=== ./internal/service/data_safe/data_safe_audit_trails_data_source.go ===
func DataSafeAuditTrailsDataSource() *schema.Resource {
	return &schema.Resource{
func readDataSafeAuditTrails(d *schema.ResourceData, m interface{}) error {
	sync := &DataSafeAuditTrailsDataSourceCrud{}
func (s *DataSafeAuditTrailsDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *DataSafeAuditTrailsDataSourceCrud) Get() error {
	request := oci_data_safe.ListAuditTrailsRequest{}
func (s *DataSafeAuditTrailsDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/data_safe/data_safe_audit_event_analytic_data_source.go ===
func DataSafeAuditEventAnalyticDataSource() *schema.Resource {
	return &schema.Resource{
func readSingularDataSafeAuditEventAnalytic(d *schema.ResourceData, m interface{}) error {
	sync := &DataSafeAuditEventAnalyticDataSourceCrud{}
func (s *DataSafeAuditEventAnalyticDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *DataSafeAuditEventAnalyticDataSourceCrud) Get() error {
	request := oci_data_safe.ListAuditEventAnalyticsRequest{}
func (s *DataSafeAuditEventAnalyticDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/data_safe/data_safe_sdm_masking_policy_differences_data_source.go ===
func DataSafeSdmMaskingPolicyDifferencesDataSource() *schema.Resource {
	return &schema.Resource{
func readDataSafeSdmMaskingPolicyDifferences(d *schema.ResourceData, m interface{}) error {
	sync := &DataSafeSdmMaskingPolicyDifferencesDataSourceCrud{}
func (s *DataSafeSdmMaskingPolicyDifferencesDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *DataSafeSdmMaskingPolicyDifferencesDataSourceCrud) Get() error {
	request := oci_data_safe.ListSdmMaskingPolicyDifferencesRequest{}
func (s *DataSafeSdmMaskingPolicyDifferencesDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/data_safe/data_safe_sql_firewall_violation_analytics_data_source.go ===
func DataSafeSqlFirewallViolationAnalyticsDataSource() *schema.Resource {
	return &schema.Resource{
func readDataSafeSqlFirewallViolationAnalytics(d *schema.ResourceData, m interface{}) error {
	sync := &DataSafeSqlFirewallViolationAnalyticsDataSourceCrud{}
func (s *DataSafeSqlFirewallViolationAnalyticsDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *DataSafeSqlFirewallViolationAnalyticsDataSourceCrud) Get() error {
	request := oci_data_safe.ListSqlFirewallViolationAnalyticsRequest{}
func (s *DataSafeSqlFirewallViolationAnalyticsDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/data_safe/data_safe_audit_trail_management_resource.go ===
func DataSafeAuditTrailManagementResource() *schema.Resource {
	return &schema.Resource{
func createDataSafeAuditTrailManagement(d *schema.ResourceData, m interface{}) error {
	sync := &DataSafeAuditTrailManagementResourceCrud{}
func readDataSafeAuditTrailManagement(d *schema.ResourceData, m interface{}) error {
	sync := &DataSafeAuditTrailManagementResourceCrud{}
func updateDataSafeAuditTrailManagement(d *schema.ResourceData, m interface{}) error {
	sync := &DataSafeAuditTrailManagementResourceCrud{}
func deleteDataSafeAuditTrailManagement(d *schema.ResourceData, m interface{}) error {
	sync := &DataSafeAuditTrailManagementResourceCrud{}
func (s *DataSafeAuditTrailManagementResourceCrud) ID() string {
	return *s.Res.Id
func (s *DataSafeAuditTrailManagementResourceCrud) StartAuditTrail() error {
	request := oci_data_safe.StartAuditTrailRequest{}
func (s *DataSafeAuditTrailManagementResourceCrud) StopAuditTrail() error {
	request := oci_data_safe.StopAuditTrailRequest{}
func (s *DataSafeAuditTrailManagementResourceCrud) ResumeAuditTrail() error {
	request := oci_data_safe.ResumeAuditTrailRequest{}
func (s *DataSafeAuditTrailManagementResourceCrud) GetAuditTrailWorkReq() error {
	listWorkRequestsRequest := oci_data_safe.ListWorkRequestsRequest{SortBy: oci_data_safe.ListWorkRequestsSortByEnum("ACCEPTEDTIME"), SortOrder: oci_data_safe.ListWorkRequestsSortOrderEnum("DESC")}
func (s *DataSafeAuditTrailManagementResourceCrud) GetAuditTrailList() error {
	request := oci_data_safe.ListAuditTrailsRequest{}
func (s *DataSafeAuditTrailManagementResourceCrud) Get() error {
	request := oci_data_safe.GetAuditTrailRequest{}
func (s *DataSafeAuditTrailManagementResourceCrud) Update() error {
	request := oci_data_safe.UpdateAuditTrailRequest{}
func (s *DataSafeAuditTrailManagementResourceCrud) Delete() error {
	request := oci_data_safe.DeleteAuditTrailRequest{}
func (s *DataSafeAuditTrailManagementResourceCrud) SetData() error {
	if s.Res.AuditCollectionStartTime != nil {
func (s *DataSafeAuditTrailManagementResourceCrud) getAuditTrailFromWorkRequest(workId *string, retryPolicy *oci_common.RetryPolicy,
	actionTypeEnum oci_data_safe.WorkRequestResourceActionTypeEnum, timeout time.Duration) error {
func (s *DataSafeAuditTrailManagementResourceCrud) getAuditProfileFromWorkRequest(workId *string, retryPolicy *oci_common.RetryPolicy,
	actionTypeEnum oci_data_safe.WorkRequestResourceActionTypeEnum, timeout time.Duration) error {

=== ./internal/service/data_safe/data_safe_audit_profile_resource.go ===
func DataSafeAuditProfileResource() *schema.Resource {
	return &schema.Resource{
func createDataSafeAuditProfile(d *schema.ResourceData, m interface{}) error {
	sync := &DataSafeAuditProfileResourceCrud{}
func readDataSafeAuditProfile(d *schema.ResourceData, m interface{}) error {
	sync := &DataSafeAuditProfileResourceCrud{}
func updateDataSafeAuditProfile(d *schema.ResourceData, m interface{}) error {
	sync := &DataSafeAuditProfileResourceCrud{}
func deleteDataSafeAuditProfile(d *schema.ResourceData, m interface{}) error {
	return nil
func (s *DataSafeAuditProfileResourceCrud) ID() string {
	return *s.Res.Id
func (s *DataSafeAuditProfileResourceCrud) CreatedPending() []string {
	return []string{
func (s *DataSafeAuditProfileResourceCrud) CreatedTarget() []string {
	return []string{
func (s *DataSafeAuditProfileResourceCrud) DeletedPending() []string {
	return []string{
func (s *DataSafeAuditProfileResourceCrud) DeletedTarget() []string {
	return []string{
func (s *DataSafeAuditProfileResourceCrud) Create() error {
	request := oci_data_safe.UpdateAuditProfileRequest{}
func (s *DataSafeAuditProfileResourceCrud) getAuditProfileFromWorkRequest(workId *string, retryPolicy *oci_common.RetryPolicy,
	actionTypeEnum oci_data_safe.WorkRequestResourceActionTypeEnum, timeout time.Duration) error {
func auditProfileWaitForWorkRequest(wId *string, entityType string, action oci_data_safe.WorkRequestResourceActionTypeEnum,
	timeout time.Duration, disableFoundRetries bool, client *oci_data_safe.DataSafeClient) (*string, error) {
func getErrorFromDataSafeAuditProfileWorkRequest(client *oci_data_safe.DataSafeClient, workId *string, retryPolicy *oci_common.RetryPolicy, entityType string, action oci_data_safe.WorkRequestResourceActionTypeEnum) error {
	response, err := client.ListWorkRequestErrors(context.Background(),
func (s *DataSafeAuditProfileResourceCrud) Get() error {
	request := oci_data_safe.GetAuditProfileRequest{}
func (s *DataSafeAuditProfileResourceCrud) Update() error {
	if compartment, ok := s.D.GetOkExists("compartment_id"); ok && s.D.HasChange("compartment_id") {
func (s *DataSafeAuditProfileResourceCrud) SetData() error {
	if s.Res.AuditCollectedVolume != nil {
func (s *DataSafeAuditProfileResourceCrud) ChangeRetention() error {
	request := oci_data_safe.ChangeRetentionRequest{}
func (s *DataSafeAuditProfileResourceCrud) updateCompartment(compartment interface{}) error {
	changeCompartmentRequest := oci_data_safe.ChangeAuditProfileCompartmentRequest{}

=== ./internal/service/data_safe/data_safe_security_policy_data_source.go ===
func DataSafeSecurityPolicyDataSource() *schema.Resource {
	fieldMap := make(map[string]*schema.Schema)
func readSingularDataSafeSecurityPolicy(d *schema.ResourceData, m interface{}) error {
	sync := &DataSafeSecurityPolicyDataSourceCrud{}
func (s *DataSafeSecurityPolicyDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *DataSafeSecurityPolicyDataSourceCrud) Get() error {
	request := oci_data_safe.GetSecurityPolicyRequest{}
func (s *DataSafeSecurityPolicyDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/data_safe/data_safe_user_assessment_comparison_data_source.go ===
func DataSafeUserAssessmentComparisonDataSource() *schema.Resource {
	return &schema.Resource{
func readSingularDataSafeUserAssessmentComparison(d *schema.ResourceData, m interface{}) error {
	sync := &DataSafeUserAssessmentComparisonDataSourceCrud{}
func (s *DataSafeUserAssessmentComparisonDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *DataSafeUserAssessmentComparisonDataSourceCrud) Get() error {
	request := oci_data_safe.GetUserAssessmentComparisonRequest{}
func (s *DataSafeUserAssessmentComparisonDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/data_safe/data_safe_audit_profile_available_audit_volume_data_source.go ===
func DataSafeAuditProfileAvailableAuditVolumeDataSource() *schema.Resource {
	return &schema.Resource{
func readSingularDataSafeAuditProfileAvailableAuditVolume(d *schema.ResourceData, m interface{}) error {
	sync := &DataSafeAuditProfileAvailableAuditVolumeDataSourceCrud{}
func (s *DataSafeAuditProfileAvailableAuditVolumeDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *DataSafeAuditProfileAvailableAuditVolumeDataSourceCrud) Get() error {
	request := oci_data_safe.ListAvailableAuditVolumesRequest{}
func (s *DataSafeAuditProfileAvailableAuditVolumeDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/data_safe/data_safe_masking_policies_masking_columns_data_source.go ===
func DataSafeMaskingPoliciesMaskingColumnsDataSource() *schema.Resource {
	return &schema.Resource{
func readDataSafeMaskingPoliciesMaskingColumns(d *schema.ResourceData, m interface{}) error {
	sync := &DataSafeMaskingPoliciesMaskingColumnsDataSourceCrud{}
func (s *DataSafeMaskingPoliciesMaskingColumnsDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *DataSafeMaskingPoliciesMaskingColumnsDataSourceCrud) Get() error {
	request := oci_data_safe.ListMaskingColumnsRequest{}
func (s *DataSafeMaskingPoliciesMaskingColumnsDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/data_safe/data_safe_database_security_config_data_source.go ===
func DataSafeDatabaseSecurityConfigDataSource() *schema.Resource {
	fieldMap := make(map[string]*schema.Schema)
func readSingularDataSafeDatabaseSecurityConfig(d *schema.ResourceData, m interface{}) error {
	sync := &DataSafeDatabaseSecurityConfigDataSourceCrud{}
func (s *DataSafeDatabaseSecurityConfigDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *DataSafeDatabaseSecurityConfigDataSourceCrud) Get() error {
	request := oci_data_safe.GetDatabaseSecurityConfigRequest{}
func (s *DataSafeDatabaseSecurityConfigDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/data_safe/data_safe_security_policy_report_database_table_access_entry_data_source.go ===
func DataSafeSecurityPolicyReportDatabaseTableAccessEntryDataSource() *schema.Resource {
	return &schema.Resource{
func readSingularDataSafeSecurityPolicyReportDatabaseTableAccessEntry(d *schema.ResourceData, m interface{}) error {
	sync := &DataSafeSecurityPolicyReportDatabaseTableAccessEntryDataSourceCrud{}
func (s *DataSafeSecurityPolicyReportDatabaseTableAccessEntryDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *DataSafeSecurityPolicyReportDatabaseTableAccessEntryDataSourceCrud) Get() error {
	request := oci_data_safe.GetDatabaseTableAccessEntryRequest{}
func (s *DataSafeSecurityPolicyReportDatabaseTableAccessEntryDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/data_safe/data_safe_target_database_peer_target_database_data_source.go ===
func DataSafeTargetDatabasePeerTargetDatabaseDataSource() *schema.Resource {
	fieldMap := make(map[string]*schema.Schema)
func readSingularDataSafeTargetDatabasePeerTargetDatabase(d *schema.ResourceData, m interface{}) error {
	sync := &DataSafeTargetDatabasePeerTargetDatabaseDataSourceCrud{}
func (s *DataSafeTargetDatabasePeerTargetDatabaseDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *DataSafeTargetDatabasePeerTargetDatabaseDataSourceCrud) Get() error {
	request := oci_data_safe.GetPeerTargetDatabaseRequest{}
func (s *DataSafeTargetDatabasePeerTargetDatabaseDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/data_safe/data_safe_audit_event_data_source.go ===
func DataSafeAuditEventDataSource() *schema.Resource {
	return &schema.Resource{
func readSingularDataSafeAuditEvent(d *schema.ResourceData, m interface{}) error {
	sync := &DataSafeAuditEventDataSourceCrud{}
func (s *DataSafeAuditEventDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *DataSafeAuditEventDataSourceCrud) Get() error {
	request := oci_data_safe.ListAuditEventsRequest{}
func (s *DataSafeAuditEventDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/data_safe/data_safe_sensitive_data_model_sensitive_types_data_source.go ===
func DataSafeSensitiveDataModelSensitiveTypesDataSource() *schema.Resource {
	return &schema.Resource{
func readDataSafeSensitiveDataModelSensitiveTypes(d *schema.ResourceData, m interface{}) error {
	sync := &DataSafeSensitiveDataModelSensitiveTypesDataSourceCrud{}
func (s *DataSafeSensitiveDataModelSensitiveTypesDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *DataSafeSensitiveDataModelSensitiveTypesDataSourceCrud) Get() error {
	request := oci_data_safe.ListSensitiveDataModelSensitiveTypesRequest{}
func (s *DataSafeSensitiveDataModelSensitiveTypesDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/data_safe/data_safe_data_safe_configuration_resource.go ===
func DataSafeDataSafeConfigurationResource() *schema.Resource {
	return &schema.Resource{
func createDataSafeDataSafeConfiguration(d *schema.ResourceData, m interface{}) error {
	sync := &DataSafeDataSafeConfigurationResourceCrud{}
func readDataSafeDataSafeConfiguration(d *schema.ResourceData, m interface{}) error {
	sync := &DataSafeDataSafeConfigurationResourceCrud{}
func updateDataSafeDataSafeConfiguration(d *schema.ResourceData, m interface{}) error {
	sync := &DataSafeDataSafeConfigurationResourceCrud{}
func deleteDataSafeDataSafeConfiguration(d *schema.ResourceData, m interface{}) error {
	return nil
func (s *DataSafeDataSafeConfigurationResourceCrud) ID() string {
	return s.Res.TimeEnabled.Format(time.RFC3339Nano) + "datasafe-configuration"
func (s *DataSafeDataSafeConfigurationResourceCrud) CreatedPending() []string {
	return []string{
func (s *DataSafeDataSafeConfigurationResourceCrud) CreatedTarget() []string {
	return []string{
func (s *DataSafeDataSafeConfigurationResourceCrud) DeletedPending() []string {
	return []string{
func (s *DataSafeDataSafeConfigurationResourceCrud) DeletedTarget() []string {
	return []string{
func (s *DataSafeDataSafeConfigurationResourceCrud) Create() error {
	request := oci_data_safe.EnableDataSafeConfigurationRequest{}
func (s *DataSafeDataSafeConfigurationResourceCrud) getDataSafeConfigurationFromWorkRequest(workId *string, retryPolicy *oci_common.RetryPolicy,
	actionTypeEnum oci_data_safe.WorkRequestResourceActionTypeEnum, timeout time.Duration) error {
func dataSafeConfigurationWaitForWorkRequest(wId *string, entityType string, action oci_data_safe.WorkRequestResourceActionTypeEnum,
	timeout time.Duration, disableFoundRetries bool, client *oci_data_safe.DataSafeClient) (*string, error) {
func getErrorFromDataSafeDataSafeConfigurationWorkRequest(client *oci_data_safe.DataSafeClient, workId *string, retryPolicy *oci_common.RetryPolicy, entityType string, action oci_data_safe.WorkRequestResourceActionTypeEnum) error {
	response, err := client.ListWorkRequestErrors(context.Background(),
func (s *DataSafeDataSafeConfigurationResourceCrud) Get() error {
	request := oci_data_safe.GetDataSafeConfigurationRequest{}
func (s *DataSafeDataSafeConfigurationResourceCrud) Update() error {
	request := oci_data_safe.EnableDataSafeConfigurationRequest{}
func (s *DataSafeDataSafeConfigurationResourceCrud) SetData() error {
	if s.Res.CompartmentId != nil {

=== ./internal/service/data_safe/data_safe_masking_policy_health_report_data_source.go ===
func DataSafeMaskingPolicyHealthReportDataSource() *schema.Resource {
	return &schema.Resource{
func readSingularDataSafeMaskingPolicyHealthReport(d *schema.ResourceData, m interface{}) error {
	sync := &DataSafeMaskingPolicyHealthReportDataSourceCrud{}
func (s *DataSafeMaskingPolicyHealthReportDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *DataSafeMaskingPolicyHealthReportDataSourceCrud) Get() error {
	request := oci_data_safe.GetMaskingPolicyHealthReportRequest{}
func (s *DataSafeMaskingPolicyHealthReportDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/data_safe/data_safe_sensitive_data_models_sensitive_column_resource.go ===
func DataSafeSensitiveDataModelsSensitiveColumnResource() *schema.Resource {
	return &schema.Resource{
func createDataSafeSensitiveDataModelsSensitiveColumn(d *schema.ResourceData, m interface{}) error {
	sync := &DataSafeSensitiveDataModelsSensitiveColumnResourceCrud{}
func readDataSafeSensitiveDataModelsSensitiveColumn(d *schema.ResourceData, m interface{}) error {
	sync := &DataSafeSensitiveDataModelsSensitiveColumnResourceCrud{}
func updateDataSafeSensitiveDataModelsSensitiveColumn(d *schema.ResourceData, m interface{}) error {
	sync := &DataSafeSensitiveDataModelsSensitiveColumnResourceCrud{}
func deleteDataSafeSensitiveDataModelsSensitiveColumn(d *schema.ResourceData, m interface{}) error {
	sync := &DataSafeSensitiveDataModelsSensitiveColumnResourceCrud{}
func (s *DataSafeSensitiveDataModelsSensitiveColumnResourceCrud) ID() string {
	column := *s.Res
func (s *DataSafeSensitiveDataModelsSensitiveColumnResourceCrud) CreatedPending() []string {
	return []string{
func (s *DataSafeSensitiveDataModelsSensitiveColumnResourceCrud) CreatedTarget() []string {
	return []string{
func (s *DataSafeSensitiveDataModelsSensitiveColumnResourceCrud) DeletedPending() []string {
	return []string{
func (s *DataSafeSensitiveDataModelsSensitiveColumnResourceCrud) DeletedTarget() []string {
	return []string{}
func (s *DataSafeSensitiveDataModelsSensitiveColumnResourceCrud) Create() error {
	request := oci_data_safe.CreateSensitiveColumnRequest{}
func (s *DataSafeSensitiveDataModelsSensitiveColumnResourceCrud) setIdFromWorkRequest(workId *string) {
	var identifier *string
func (s *DataSafeSensitiveDataModelsSensitiveColumnResourceCrud) getSensitiveDataModelsSensitiveColumnFromWorkRequest(workId *string, retryPolicy *oci_common.RetryPolicy,
	actionTypeEnum oci_data_safe.WorkRequestResourceActionTypeEnum, timeout time.Duration) error {
func sensitiveDataModelsSensitiveColumnWaitForWorkRequest(wId *string, entityType string, action oci_data_safe.WorkRequestResourceActionTypeEnum,
	timeout time.Duration, disableFoundRetries bool, client *oci_data_safe.DataSafeClient) (*string, error) {
func getErrorFromDataSafeSensitiveDataModelsSensitiveColumnWorkRequest(client *oci_data_safe.DataSafeClient, workId *string, retryPolicy *oci_common.RetryPolicy, entityType string, action oci_data_safe.WorkRequestResourceActionTypeEnum) error {
	response, err := client.ListWorkRequestErrors(context.Background(),
func (s *DataSafeSensitiveDataModelsSensitiveColumnResourceCrud) Get() error {
	request := oci_data_safe.GetSensitiveColumnRequest{}
func (s *DataSafeSensitiveDataModelsSensitiveColumnResourceCrud) Update() error {
	request := oci_data_safe.UpdateSensitiveColumnRequest{}
func (s *DataSafeSensitiveDataModelsSensitiveColumnResourceCrud) Delete() error {
	request := oci_data_safe.DeleteSensitiveColumnRequest{}
func (s *DataSafeSensitiveDataModelsSensitiveColumnResourceCrud) SetData() error {


=== ./internal/service/data_safe/data_safe_audit_trail_data_source.go ===
func DataSafeAuditTrailDataSource() *schema.Resource {
	fieldMap := make(map[string]*schema.Schema)
func readSingularDataSafeAuditTrail(d *schema.ResourceData, m interface{}) error {
	sync := &DataSafeAuditTrailDataSourceCrud{}
func (s *DataSafeAuditTrailDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *DataSafeAuditTrailDataSourceCrud) Get() error {
	request := oci_data_safe.GetAuditTrailRequest{}
func (s *DataSafeAuditTrailDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/data_safe/data_safe_sensitive_data_model_apply_discovery_job_results_resource.go ===
func DataSafeSensitiveDataModelsApplyDiscoveryJobResultsResource() *schema.Resource {
	return &schema.Resource{
func createDataSafeSensitiveDataModelsApplyDiscoveryJobResults(d *schema.ResourceData, m interface{}) error {
	sync := &DataSafeSensitiveDataModelsApplyDiscoveryJobResultsResourceCrud{}
func readDataSafeSensitiveDataModelsApplyDiscoveryJobResults(d *schema.ResourceData, m interface{}) error {
	return nil
func deleteDataSafeSensitiveDataModelsApplyDiscoveryJobResults(d *schema.ResourceData, m interface{}) error {
	return nil
func (s *DataSafeSensitiveDataModelsApplyDiscoveryJobResultsResourceCrud) ID() string {
	return s.D.Id()
func (s *DataSafeSensitiveDataModelsApplyDiscoveryJobResultsResourceCrud) Get() error {
	return nil
func (s *DataSafeSensitiveDataModelsApplyDiscoveryJobResultsResourceCrud) Create() error {
	request := oci_data_safe.ApplyDiscoveryJobResultsRequest{}
func (s *DataSafeSensitiveDataModelsApplyDiscoveryJobResultsResourceCrud) getDataSafeSensitiveDataModelsApplyDiscoveryJobResultsFromWorkRequest(workId *string, retryPolicy *oci_common.RetryPolicy,
	actionTypeEnum oci_data_safe.WorkRequestResourceActionTypeEnum, timeout time.Duration) error {
func applyDiscoveryJobResultsWaitForWorkRequest(wId *string, entityType string, action oci_data_safe.WorkRequestResourceActionTypeEnum,
	timeout time.Duration, disableFoundRetries bool, client *oci_data_safe.DataSafeClient) (*string, error) {
func getErrorFromDataSafeSensitiveDataModelsApplyDiscoveryJobResultsWorkRequest(client *oci_data_safe.DataSafeClient, workId *string, retryPolicy *oci_common.RetryPolicy, entityType string, action oci_data_safe.WorkRequestResourceActionTypeEnum) error {
	response, err := client.ListWorkRequestErrors(context.Background(),
func (s *DataSafeSensitiveDataModelsApplyDiscoveryJobResultsResourceCrud) SetData() error {
	return nil
func (s *DataSafeSensitiveDataModelsApplyDiscoveryJobResultsResourceCrud) Delete() error {
	return nil

=== ./internal/service/data_safe/data_safe_target_databases_columns_data_source.go ===
func DataSafeTargetDatabasesColumnsDataSource() *schema.Resource {
	return &schema.Resource{
func readDataSafeTargetDatabasesColumns(d *schema.ResourceData, m interface{}) error {
	sync := &DataSafeTargetDatabasesColumnsDataSourceCrud{}
func (s *DataSafeTargetDatabasesColumnsDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *DataSafeTargetDatabasesColumnsDataSourceCrud) Get() error {
	request := oci_data_safe.ListColumnsRequest{}
func (s *DataSafeTargetDatabasesColumnsDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/data_safe/data_safe_audit_profile_collected_audit_volume_data_source.go ===
func DataSafeAuditProfileCollectedAuditVolumeDataSource() *schema.Resource {
	return &schema.Resource{
func readSingularDataSafeAuditProfileCollectedAuditVolume(d *schema.ResourceData, m interface{}) error {
	sync := &DataSafeAuditProfileCollectedAuditVolumeDataSourceCrud{}
func (s *DataSafeAuditProfileCollectedAuditVolumeDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *DataSafeAuditProfileCollectedAuditVolumeDataSourceCrud) Get() error {
	request := oci_data_safe.ListCollectedAuditVolumesRequest{}
func (s *DataSafeAuditProfileCollectedAuditVolumeDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/data_safe/data_safe_security_policy_report_role_grant_paths_data_source.go ===
func DataSafeSecurityPolicyReportRoleGrantPathsDataSource() *schema.Resource {
	return &schema.Resource{
func readDataSafeSecurityPolicyReportRoleGrantPaths(d *schema.ResourceData, m interface{}) error {
	sync := &DataSafeSecurityPolicyReportRoleGrantPathsDataSourceCrud{}
func (s *DataSafeSecurityPolicyReportRoleGrantPathsDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *DataSafeSecurityPolicyReportRoleGrantPathsDataSourceCrud) Get() error {
	request := oci_data_safe.ListRoleGrantPathsRequest{}
func (s *DataSafeSecurityPolicyReportRoleGrantPathsDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/data_safe/data_safe_target_alert_policy_associations_data_source.go ===
func DataSafeTargetAlertPolicyAssociationsDataSource() *schema.Resource {
	return &schema.Resource{
func readDataSafeTargetAlertPolicyAssociations(d *schema.ResourceData, m interface{}) error {
	sync := &DataSafeTargetAlertPolicyAssociationsDataSourceCrud{}
func (s *DataSafeTargetAlertPolicyAssociationsDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *DataSafeTargetAlertPolicyAssociationsDataSourceCrud) Get() error {
	request := oci_data_safe.ListTargetAlertPolicyAssociationsRequest{}
func (s *DataSafeTargetAlertPolicyAssociationsDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/data_safe/data_safe_security_policy_report_data_source.go ===
func DataSafeSecurityPolicyReportDataSource() *schema.Resource {
	return &schema.Resource{
func readSingularDataSafeSecurityPolicyReport(d *schema.ResourceData, m interface{}) error {
	sync := &DataSafeSecurityPolicyReportDataSourceCrud{}
func (s *DataSafeSecurityPolicyReportDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *DataSafeSecurityPolicyReportDataSourceCrud) Get() error {
	request := oci_data_safe.GetSecurityPolicyReportRequest{}
func (s *DataSafeSecurityPolicyReportDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/data_safe/data_safe_audit_policy_management_resource.go ===
func DataSafeAuditPolicyManagementResource() *schema.Resource {
	return &schema.Resource{
func createDataSafeAuditPolicyManagement(d *schema.ResourceData, m interface{}) error {
	sync := &DataSafeAuditPolicyManagementResourceCrud{}
func readDataSafeAuditPolicyManagement(d *schema.ResourceData, m interface{}) error {
	sync := &DataSafeAuditPolicyManagementResourceCrud{}
func updateDataSafeAuditPolicyManagement(d *schema.ResourceData, m interface{}) error {
	sync := &DataSafeAuditPolicyManagementResourceCrud{}
func deleteDataSafeAuditPolicyManagement(d *schema.ResourceData, m interface{}) error {
	return nil
func (s *DataSafeAuditPolicyManagementResourceCrud) ID() string {
	return *s.Res.Id
func (s *DataSafeAuditPolicyManagementResourceCrud) Create() error {
	request := oci_data_safe.UpdateAuditPolicyRequest{}
func (s *DataSafeAuditPolicyManagementResourceCrud) getAuditPolicyFromWorkRequest(workId *string, retryPolicy *oci_common.RetryPolicy,
	actionTypeEnum oci_data_safe.WorkRequestResourceActionTypeEnum, timeout time.Duration) error {
func (s *DataSafeAuditPolicyManagementResourceCrud) Get() error {
	request := oci_data_safe.GetAuditPolicyRequest{}
func (s *DataSafeAuditPolicyManagementResourceCrud) Update() error {
	if compartment, ok := s.D.GetOkExists("compartment_id"); ok && s.D.HasChange("compartment_id") {
func (s *DataSafeAuditPolicyManagementResourceCrud) SetData() error {
	auditConditions := []interface{}{}
func (s *DataSafeAuditPolicyManagementResourceCrud) GetAuditPolicyWorkReq() error {
	listWorkRequestsRequest := oci_data_safe.ListWorkRequestsRequest{SortBy: oci_data_safe.ListWorkRequestsSortByEnum("ACCEPTEDTIME"), SortOrder: oci_data_safe.ListWorkRequestsSortOrderEnum("ASC")}
func (s *DataSafeAuditPolicyManagementResourceCrud) GetAuditPolicyList() error {
	request := oci_data_safe.ListAuditPoliciesRequest{}
func (s *DataSafeAuditPolicyManagementResourceCrud) ProvisionAuditPolicy() error {
	request := oci_data_safe.ProvisionAuditPolicyRequest{}
func (s *DataSafeAuditPolicyManagementResourceCrud) RetrieveAuditPolicies() error {
	request := oci_data_safe.RetrieveAuditPoliciesRequest{}
func (s *DataSafeAuditPolicyManagementResourceCrud) updateCompartment(compartment interface{}) error {
	changeCompartmentRequest := oci_data_safe.ChangeAuditPolicyCompartmentRequest{}
func (s *DataSafeAuditPolicyManagementResourceCrud) mapToProvisionAuditConditions(fieldKeyFormat string) (oci_data_safe.ProvisionAuditConditions, error) {
	result := oci_data_safe.ProvisionAuditConditions{}
func (s *DataSafeAuditPolicyManagementResourceCrud) mapToEnableConditions(fieldKeyFormat string) (oci_data_safe.EnableConditions, error) {
	result := oci_data_safe.EnableConditions{}

=== ./internal/service/data_safe/data_safe_user_assessment_user_access_analytics_data_source.go ===
func DataSafeUserAssessmentUserAccessAnalyticsDataSource() *schema.Resource {
	return &schema.Resource{
func readDataSafeUserAssessmentUserAccessAnalytics(d *schema.ResourceData, m interface{}) error {
	sync := &DataSafeUserAssessmentUserAccessAnalyticsDataSourceCrud{}
func (s *DataSafeUserAssessmentUserAccessAnalyticsDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *DataSafeUserAssessmentUserAccessAnalyticsDataSourceCrud) Get() error {
	request := oci_data_safe.ListUserAccessAnalyticsRequest{}
func (s *DataSafeUserAssessmentUserAccessAnalyticsDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/data_safe/data_safe_audit_profile_data_source.go ===
func DataSafeAuditProfileDataSource() *schema.Resource {
	fieldMap := make(map[string]*schema.Schema)
func readSingularDataSafeAuditProfile(d *schema.ResourceData, m interface{}) error {
	sync := &DataSafeAuditProfileDataSourceCrud{}
func (s *DataSafeAuditProfileDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *DataSafeAuditProfileDataSourceCrud) Get() error {
	request := oci_data_safe.GetAuditProfileRequest{}
func (s *DataSafeAuditProfileDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/data_safe/data_safe_masking_analytic_data_source.go ===
func DataSafeMaskingAnalyticDataSource() *schema.Resource {
	return &schema.Resource{
func readSingularDataSafeMaskingAnalytic(d *schema.ResourceData, m interface{}) error {
	sync := &DataSafeMaskingAnalyticDataSourceCrud{}
func (s *DataSafeMaskingAnalyticDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *DataSafeMaskingAnalyticDataSourceCrud) Get() error {
	request := oci_data_safe.ListMaskingAnalyticsRequest{}
func (s *DataSafeMaskingAnalyticDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/data_safe/data_safe_security_assessments_data_source.go ===
func DataSafeSecurityAssessmentsDataSource() *schema.Resource {
	return &schema.Resource{
func readDataSafeSecurityAssessments(d *schema.ResourceData, m interface{}) error {
	sync := &DataSafeSecurityAssessmentsDataSourceCrud{}
func (s *DataSafeSecurityAssessmentsDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *DataSafeSecurityAssessmentsDataSourceCrud) Get() error {
	request := oci_data_safe.ListSecurityAssessmentsRequest{}
func (s *DataSafeSecurityAssessmentsDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/data_safe/data_safe_user_assessment_data_source.go ===
func DataSafeUserAssessmentDataSource() *schema.Resource {
	fieldMap := make(map[string]*schema.Schema)
func readSingularDataSafeUserAssessment(d *schema.ResourceData, m interface{}) error {
	sync := &DataSafeUserAssessmentDataSourceCrud{}
func (s *DataSafeUserAssessmentDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *DataSafeUserAssessmentDataSourceCrud) Get() error {
	request := oci_data_safe.GetUserAssessmentRequest{}
func (s *DataSafeUserAssessmentDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/data_safe/data_safe_target_database_resource.go ===
func DataSafeTargetDatabaseResource() *schema.Resource {
	return &schema.Resource{
func createDataSafeTargetDatabase(d *schema.ResourceData, m interface{}) error {
	sync := &DataSafeTargetDatabaseResourceCrud{}
func readDataSafeTargetDatabase(d *schema.ResourceData, m interface{}) error {
	sync := &DataSafeTargetDatabaseResourceCrud{}
func updateDataSafeTargetDatabase(d *schema.ResourceData, m interface{}) error {
	sync := &DataSafeTargetDatabaseResourceCrud{}
func deleteDataSafeTargetDatabase(d *schema.ResourceData, m interface{}) error {
	sync := &DataSafeTargetDatabaseResourceCrud{}
func (s *DataSafeTargetDatabaseResourceCrud) ID() string {
	return *s.Res.Id
func (s *DataSafeTargetDatabaseResourceCrud) CreatedPending() []string {
	return []string{
func (s *DataSafeTargetDatabaseResourceCrud) CreatedTarget() []string {
	return []string{
func (s *DataSafeTargetDatabaseResourceCrud) DeletedPending() []string {
	return []string{
func (s *DataSafeTargetDatabaseResourceCrud) DeletedTarget() []string {
	return []string{
func (s *DataSafeTargetDatabaseResourceCrud) Create() error {
	request := oci_data_safe.CreateTargetDatabaseRequest{}
func (s *DataSafeTargetDatabaseResourceCrud) getTargetDatabaseFromWorkRequest(workId *string, retryPolicy *oci_common.RetryPolicy,
	actionTypeEnum oci_data_safe.WorkRequestResourceActionTypeEnum, timeout time.Duration) error {
func targetDatabaseWaitForWorkRequest(wId *string, entityType string, action oci_data_safe.WorkRequestResourceActionTypeEnum,
	timeout time.Duration, disableFoundRetries bool, client *oci_data_safe.DataSafeClient) (*string, error) {
func getErrorFromDataSafeTargetDatabaseWorkRequest(client *oci_data_safe.DataSafeClient, workId *string, retryPolicy *oci_common.RetryPolicy, entityType string, action oci_data_safe.WorkRequestResourceActionTypeEnum) error {
	response, err := client.ListWorkRequestErrors(context.Background(),
func (s *DataSafeTargetDatabaseResourceCrud) Get() error {
	request := oci_data_safe.GetTargetDatabaseRequest{}
func (s *DataSafeTargetDatabaseResourceCrud) Update() error {
	if compartment, ok := s.D.GetOkExists("compartment_id"); ok && s.D.HasChange("compartment_id") {
func (s *DataSafeTargetDatabaseResourceCrud) Delete() error {
	request := oci_data_safe.DeleteTargetDatabaseRequest{}
func (s *DataSafeTargetDatabaseResourceCrud) SetData() error {
	s.D.Set("associated_resource_ids", s.Res.AssociatedResourceIds)
func (s *DataSafeTargetDatabaseResourceCrud) mapToConnectionOption(fieldKeyFormat string) (oci_data_safe.ConnectionOption, error) {
	var baseObject oci_data_safe.ConnectionOption
func (s *DataSafeTargetDatabaseResourceCrud) mapToCreatePeerTargetDatabaseDetails(fieldKeyFormat string) (oci_data_safe.CreatePeerTargetDatabaseDetails, error) {
	result := oci_data_safe.CreatePeerTargetDatabaseDetails{}
func (s *DataSafeTargetDatabaseResourceCrud) mapToCredentials(fieldKeyFormat string) (oci_data_safe.Credentials, error) {
	result := oci_data_safe.Credentials{}
func (s *DataSafeTargetDatabaseResourceCrud) mapToDatabaseDetails(fieldKeyFormat string) (oci_data_safe.DatabaseDetails, error) {
	var baseObject oci_data_safe.DatabaseDetails
func (s *DataSafeTargetDatabaseResourceCrud) mapToTlsConfig(fieldKeyFormat string) (oci_data_safe.TlsConfig, error) {
	result := oci_data_safe.TlsConfig{}
func (s *DataSafeTargetDatabaseResourceCrud) updateCompartment(compartment interface{}) error {
	changeCompartmentRequest := oci_data_safe.ChangeTargetDatabaseCompartmentRequest{}

=== ./internal/service/data_safe/data_safe_report_data_source.go ===
func DataSafeReportDataSource() *schema.Resource {
	fieldMap := make(map[string]*schema.Schema)
func readSingularDataSafeReport(d *schema.ResourceData, m interface{}) error {
	sync := &DataSafeReportDataSourceCrud{}
func (s *DataSafeReportDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *DataSafeReportDataSourceCrud) Get() error {
	request := oci_data_safe.GetReportRequest{}
func (s *DataSafeReportDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/data_safe/data_safe_user_assessment_user_analytics_data_source.go ===
func DataSafeUserAssessmentUserAnalyticsDataSource() *schema.Resource {
	return &schema.Resource{
func readDataSafeUserAssessmentUserAnalytics(d *schema.ResourceData, m interface{}) error {
	sync := &DataSafeUserAssessmentUserAnalyticsDataSourceCrud{}
func (s *DataSafeUserAssessmentUserAnalyticsDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *DataSafeUserAssessmentUserAnalyticsDataSourceCrud) Get() error {
	request := oci_data_safe.ListUserAnalyticsRequest{}
func (s *DataSafeUserAssessmentUserAnalyticsDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/data_safe/data_safe_data_safe_private_endpoint_resource.go ===
func DataSafeDataSafePrivateEndpointResource() *schema.Resource {
	return &schema.Resource{
func createDataSafeDataSafePrivateEndpoint(d *schema.ResourceData, m interface{}) error {
	sync := &DataSafeDataSafePrivateEndpointResourceCrud{}
func readDataSafeDataSafePrivateEndpoint(d *schema.ResourceData, m interface{}) error {
	sync := &DataSafeDataSafePrivateEndpointResourceCrud{}
func updateDataSafeDataSafePrivateEndpoint(d *schema.ResourceData, m interface{}) error {
	sync := &DataSafeDataSafePrivateEndpointResourceCrud{}
func deleteDataSafeDataSafePrivateEndpoint(d *schema.ResourceData, m interface{}) error {
	sync := &DataSafeDataSafePrivateEndpointResourceCrud{}
func (s *DataSafeDataSafePrivateEndpointResourceCrud) ID() string {
	return *s.Res.Id
func (s *DataSafeDataSafePrivateEndpointResourceCrud) CreatedPending() []string {
	return []string{
func (s *DataSafeDataSafePrivateEndpointResourceCrud) CreatedTarget() []string {
	return []string{
func (s *DataSafeDataSafePrivateEndpointResourceCrud) DeletedPending() []string {
	return []string{
func (s *DataSafeDataSafePrivateEndpointResourceCrud) DeletedTarget() []string {
	return []string{
func (s *DataSafeDataSafePrivateEndpointResourceCrud) Create() error {
	request := oci_data_safe.CreateDataSafePrivateEndpointRequest{}
func (s *DataSafeDataSafePrivateEndpointResourceCrud) getDataSafePrivateEndpointFromWorkRequest(workId *string, retryPolicy *oci_common.RetryPolicy,
	actionTypeEnum oci_data_safe.WorkRequestResourceActionTypeEnum, timeout time.Duration) error {
func dataSafePrivateEndpointWaitForWorkRequest(wId *string, entityType string, action oci_data_safe.WorkRequestResourceActionTypeEnum,
	timeout time.Duration, disableFoundRetries bool, client *oci_data_safe.DataSafeClient) (*string, error) {
func getErrorFromDataSafeDataSafePrivateEndpointWorkRequest(client *oci_data_safe.DataSafeClient, workId *string, retryPolicy *oci_common.RetryPolicy, entityType string, action oci_data_safe.WorkRequestResourceActionTypeEnum) error {
	response, err := client.ListWorkRequestErrors(context.Background(),
func (s *DataSafeDataSafePrivateEndpointResourceCrud) Get() error {
	request := oci_data_safe.GetDataSafePrivateEndpointRequest{}
func (s *DataSafeDataSafePrivateEndpointResourceCrud) Update() error {
	if compartment, ok := s.D.GetOkExists("compartment_id"); ok && s.D.HasChange("compartment_id") {
func (s *DataSafeDataSafePrivateEndpointResourceCrud) Delete() error {
	request := oci_data_safe.DeleteDataSafePrivateEndpointRequest{}
func (s *DataSafeDataSafePrivateEndpointResourceCrud) SetData() error {
	if s.Res.CompartmentId != nil {
func (s *DataSafeDataSafePrivateEndpointResourceCrud) updateCompartment(compartment interface{}) error {
	changeCompartmentRequest := oci_data_safe.ChangeDataSafePrivateEndpointCompartmentRequest{}

=== ./internal/service/data_safe/data_safe_audit_trail_resource.go ===
func DataSafeAuditTrailResource() *schema.Resource {
	return &schema.Resource{
func createDataSafeAuditTrail(d *schema.ResourceData, m interface{}) error {
	sync := &DataSafeAuditTrailResourceCrud{}
func readDataSafeAuditTrail(d *schema.ResourceData, m interface{}) error {
	sync := &DataSafeAuditTrailResourceCrud{}
func updateDataSafeAuditTrail(d *schema.ResourceData, m interface{}) error {
	sync := &DataSafeAuditTrailResourceCrud{}
func deleteDataSafeAuditTrail(d *schema.ResourceData, m interface{}) error {
	sync := &DataSafeAuditTrailResourceCrud{}
func (s *DataSafeAuditTrailResourceCrud) ID() string {
	return *s.Res.Id
func (s *DataSafeAuditTrailResourceCrud) CreatedPending() []string {
	return []string{}
func (s *DataSafeAuditTrailResourceCrud) CreatedTarget() []string {
	return []string{
func (s *DataSafeAuditTrailResourceCrud) DeletedPending() []string {
	return []string{
func (s *DataSafeAuditTrailResourceCrud) DeletedTarget() []string {
	return []string{}
func (s *DataSafeAuditTrailResourceCrud) Create() error {
	request := oci_data_safe.UpdateAuditTrailRequest{}
func (s *DataSafeAuditTrailResourceCrud) getAuditTrailFromWorkRequest(workId *string, retryPolicy *oci_common.RetryPolicy,
	actionTypeEnum oci_data_safe.WorkRequestResourceActionTypeEnum, timeout time.Duration) error {
func auditTrailWaitForWorkRequest(wId *string, entityType string, action oci_data_safe.WorkRequestResourceActionTypeEnum,
	timeout time.Duration, disableFoundRetries bool, client *oci_data_safe.DataSafeClient) (*string, error) {
func getErrorFromDataSafeAuditTrailWorkRequest(client *oci_data_safe.DataSafeClient, workId *string, retryPolicy *oci_common.RetryPolicy, entityType string, action oci_data_safe.WorkRequestResourceActionTypeEnum) error {
	response, err := client.ListWorkRequestErrors(context.Background(),
func (s *DataSafeAuditTrailResourceCrud) Get() error {
	request := oci_data_safe.GetAuditTrailRequest{}
func (s *DataSafeAuditTrailResourceCrud) Update() error {
	request := oci_data_safe.UpdateAuditTrailRequest{}
func (s *DataSafeAuditTrailResourceCrud) Delete() error {
	request := oci_data_safe.DeleteAuditTrailRequest{}
func (s *DataSafeAuditTrailResourceCrud) SetData() error {
	if s.Res.AuditCollectionStartTime != nil {
func (s *DataSafeAuditTrailResourceCrud) StartAuditTrail() error {
	request := oci_data_safe.StartAuditTrailRequest{}
func (s *DataSafeAuditTrailResourceCrud) StopAuditTrail() error {
	request := oci_data_safe.StopAuditTrailRequest{}
func (s *DataSafeAuditTrailResourceCrud) ResumeAuditTrail() error {
	request := oci_data_safe.ResumeAuditTrailRequest{}

=== ./internal/service/data_safe/data_safe_security_assessment_findings_data_source.go ===
func DataSafeSecurityAssessmentFindingsDataSource() *schema.Resource {
	return &schema.Resource{
func readDataSafeSecurityAssessmentFindings(d *schema.ResourceData, m interface{}) error {
	sync := &DataSafeSecurityAssessmentFindingsDataSourceCrud{}
func (s *DataSafeSecurityAssessmentFindingsDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *DataSafeSecurityAssessmentFindingsDataSourceCrud) Get() error {
	request := oci_data_safe.ListFindingsRequest{}
func (s *DataSafeSecurityAssessmentFindingsDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/data_safe/data_safe_sql_collections_data_source.go ===
func DataSafeSqlCollectionsDataSource() *schema.Resource {
	return &schema.Resource{
func readDataSafeSqlCollections(d *schema.ResourceData, m interface{}) error {
	sync := &DataSafeSqlCollectionsDataSourceCrud{}
func (s *DataSafeSqlCollectionsDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *DataSafeSqlCollectionsDataSourceCrud) Get() error {
	request := oci_data_safe.ListSqlCollectionsRequest{}
func (s *DataSafeSqlCollectionsDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/data_safe/data_safe_audit_policy_data_source.go ===
func DataSafeAuditPolicyDataSource() *schema.Resource {
	fieldMap := make(map[string]*schema.Schema)
func readSingularDataSafeAuditPolicy(d *schema.ResourceData, m interface{}) error {
	sync := &DataSafeAuditPolicyDataSourceCrud{}
func (s *DataSafeAuditPolicyDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *DataSafeAuditPolicyDataSourceCrud) Get() error {
	request := oci_data_safe.GetAuditPolicyRequest{}
func (s *DataSafeAuditPolicyDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/data_safe/data_safe_security_policy_report_database_table_access_entries_data_source.go ===
func DataSafeSecurityPolicyReportDatabaseTableAccessEntriesDataSource() *schema.Resource {
	return &schema.Resource{
func readDataSafeSecurityPolicyReportDatabaseTableAccessEntries(d *schema.ResourceData, m interface{}) error {
	sync := &DataSafeSecurityPolicyReportDatabaseTableAccessEntriesDataSourceCrud{}
func (s *DataSafeSecurityPolicyReportDatabaseTableAccessEntriesDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *DataSafeSecurityPolicyReportDatabaseTableAccessEntriesDataSourceCrud) Get() error {
	request := oci_data_safe.ListDatabaseTableAccessEntriesRequest{}
func (s *DataSafeSecurityPolicyReportDatabaseTableAccessEntriesDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/data_safe/data_safe_audit_policies_data_source.go ===
func DataSafeAuditPoliciesDataSource() *schema.Resource {
	return &schema.Resource{
func readDataSafeAuditPolicies(d *schema.ResourceData, m interface{}) error {
	sync := &DataSafeAuditPoliciesDataSourceCrud{}
func (s *DataSafeAuditPoliciesDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *DataSafeAuditPoliciesDataSourceCrud) Get() error {
	request := oci_data_safe.ListAuditPoliciesRequest{}
func (s *DataSafeAuditPoliciesDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/data_safe/data_safe_security_policy_resource.go ===
func DataSafeSecurityPolicyResource() *schema.Resource {
	return &schema.Resource{
func createDataSafeSecurityPolicy(d *schema.ResourceData, m interface{}) error {
	sync := &DataSafeSecurityPolicyResourceCrud{}
func readDataSafeSecurityPolicy(d *schema.ResourceData, m interface{}) error {
	sync := &DataSafeSecurityPolicyResourceCrud{}
func updateDataSafeSecurityPolicy(d *schema.ResourceData, m interface{}) error {
	sync := &DataSafeSecurityPolicyResourceCrud{}
func deleteDataSafeSecurityPolicy(d *schema.ResourceData, m interface{}) error {
	return nil
func (s *DataSafeSecurityPolicyResourceCrud) ID() string {
	return *s.Res.Id
func (s *DataSafeSecurityPolicyResourceCrud) CreatedPending() []string {
	return []string{
func (s *DataSafeSecurityPolicyResourceCrud) CreatedTarget() []string {
	return []string{
func (s *DataSafeSecurityPolicyResourceCrud) DeletedPending() []string {
	return []string{
func (s *DataSafeSecurityPolicyResourceCrud) DeletedTarget() []string {
	return []string{
func (s *DataSafeSecurityPolicyResourceCrud) Create() error {
	request := oci_data_safe.UpdateSecurityPolicyRequest{}
func (s *DataSafeSecurityPolicyResourceCrud) getSecurityPolicyFromWorkRequest(workId *string, retryPolicy *oci_common.RetryPolicy,
	actionTypeEnum oci_data_safe.WorkRequestResourceActionTypeEnum, timeout time.Duration) error {
func securityPolicyWaitForWorkRequest(wId *string, entityType string, action oci_data_safe.WorkRequestResourceActionTypeEnum,
	timeout time.Duration, disableFoundRetries bool, client *oci_data_safe.DataSafeClient) (*string, error) {
func getErrorFromDataSafeSecurityPolicyWorkRequest(client *oci_data_safe.DataSafeClient, workId *string, retryPolicy *oci_common.RetryPolicy, entityType string, action oci_data_safe.WorkRequestResourceActionTypeEnum) error {
	response, err := client.ListWorkRequestErrors(context.Background(),
func (s *DataSafeSecurityPolicyResourceCrud) Get() error {
	request := oci_data_safe.GetSecurityPolicyRequest{}
func (s *DataSafeSecurityPolicyResourceCrud) Update() error {
	if compartment, ok := s.D.GetOkExists("compartment_id"); ok && s.D.HasChange("compartment_id") {
func (s *DataSafeSecurityPolicyResourceCrud) SetData() error {
	if s.Res.CompartmentId != nil {
func (s *DataSafeSecurityPolicyResourceCrud) updateCompartment(compartment interface{}) error {
	changeCompartmentRequest := oci_data_safe.ChangeSecurityPolicyCompartmentRequest{}

=== ./internal/service/data_safe/data_safe_target_database_peer_target_databases_data_source.go ===
func DataSafeTargetDatabasePeerTargetDatabasesDataSource() *schema.Resource {
	return &schema.Resource{
func readDataSafeTargetDatabasePeerTargetDatabases(d *schema.ResourceData, m interface{}) error {
	sync := &DataSafeTargetDatabasePeerTargetDatabasesDataSourceCrud{}
func (s *DataSafeTargetDatabasePeerTargetDatabasesDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *DataSafeTargetDatabasePeerTargetDatabasesDataSourceCrud) Get() error {
	request := oci_data_safe.ListPeerTargetDatabasesRequest{}
func (s *DataSafeTargetDatabasePeerTargetDatabasesDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/data_safe/data_safe_alert_policies_data_source.go ===
func DataSafeAlertPoliciesDataSource() *schema.Resource {
	return &schema.Resource{
func readDataSafeAlertPolicies(d *schema.ResourceData, m interface{}) error {
	sync := &DataSafeAlertPoliciesDataSourceCrud{}
func (s *DataSafeAlertPoliciesDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *DataSafeAlertPoliciesDataSourceCrud) Get() error {
	request := oci_data_safe.ListAlertPoliciesRequest{}
func (s *DataSafeAlertPoliciesDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/data_safe/data_safe_masking_reports_masked_columns_data_source.go ===
func DataSafeMaskingReportsMaskedColumnsDataSource() *schema.Resource {
	return &schema.Resource{
func readDataSafeMaskingReportsMaskedColumns(d *schema.ResourceData, m interface{}) error {
	sync := &DataSafeMaskingReportsMaskedColumnsDataSourceCrud{}
func (s *DataSafeMaskingReportsMaskedColumnsDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *DataSafeMaskingReportsMaskedColumnsDataSourceCrud) Get() error {
	request := oci_data_safe.ListMaskedColumnsRequest{}
func (s *DataSafeMaskingReportsMaskedColumnsDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/data_safe/data_safe_masking_policy_health_reports_data_source.go ===
func DataSafeMaskingPolicyHealthReportsDataSource() *schema.Resource {
	return &schema.Resource{
func readDataSafeMaskingPolicyHealthReports(d *schema.ResourceData, m interface{}) error {
	sync := &DataSafeMaskingPolicyHealthReportsDataSourceCrud{}
func (s *DataSafeMaskingPolicyHealthReportsDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *DataSafeMaskingPolicyHealthReportsDataSourceCrud) Get() error {
	request := oci_data_safe.ListMaskingPolicyHealthReportsRequest{}
func (s *DataSafeMaskingPolicyHealthReportsDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/data_safe/data_safe_masking_report_management_resource.go ===
func DataSafeMaskingReportManagementResource() *schema.Resource {
	return &schema.Resource{
func createDataSafeMaskingReportManagement(d *schema.ResourceData, m interface{}) error {
	sync := &DataSafeMaskingReportManagementResourceCurd{}
func readDataSafeMaskingReportManagement(d *schema.ResourceData, m interface{}) error {
	sync := &DataSafeMaskingReportManagementResourceCurd{}
func updateDataSafeMaskingReportManagement(d *schema.ResourceData, m interface{}) error {
	return nil
func deleteDataSafeMaskingReportManagement(d *schema.ResourceData, m interface{}) error {
	return nil
func (s *DataSafeMaskingReportManagementResourceCurd) ID() string {
	return *s.Res.Id
func (s *DataSafeMaskingReportManagementResourceCurd) getMaskingReportWorkReq() error {
	// Masking report will be in same compartment as of target
func (s *DataSafeMaskingReportManagementResourceCurd) GetMaskingReportList() error {
	request := oci_data_safe.ListMaskingReportsRequest{}
func (s *DataSafeMaskingReportManagementResourceCurd) Get() error {
	request := oci_data_safe.GetMaskingReportRequest{}
func (s *DataSafeMaskingReportManagementResourceCurd) SetData() error {


=== ./internal/service/data_safe/data_safe_masking_analytics_data_source.go ===
func DataSafeMaskingAnalyticsDataSource() *schema.Resource {
	return &schema.Resource{
func readDataSafeMaskingAnalytics(d *schema.ResourceData, m interface{}) error {
	sync := &DataSafeMaskingAnalyticsDataSourceCrud{}
func (s *DataSafeMaskingAnalyticsDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *DataSafeMaskingAnalyticsDataSourceCrud) Get() error {
	request := oci_data_safe.ListMaskingAnalyticsRequest{}
func (s *DataSafeMaskingAnalyticsDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/data_safe/data_safe_masking_add_columns_from_sdm_resource.go ===
func DataSafeAddColumnsFromSdmResource() *schema.Resource {
	return &schema.Resource{
func createDataSafeAddColumnsFromSdm(d *schema.ResourceData, m interface{}) error {
	sync := &DataSafeAddColumnsFromSdmResourceCrud{}
func readDataSafeAddColumnsFromSdm(d *schema.ResourceData, m interface{}) error {
	return nil
func deleteDataSafeAddColumnsFromSdm(d *schema.ResourceData, m interface{}) error {
	return nil
func (s *DataSafeAddColumnsFromSdmResourceCrud) ID() string {
	return s.D.Id()
func (s *DataSafeAddColumnsFromSdmResourceCrud) Get() error {
	return nil
func (s *DataSafeAddColumnsFromSdmResourceCrud) Create() error {
	request := oci_data_safe.AddMaskingColumnsFromSdmRequest{}
func (s *DataSafeAddColumnsFromSdmResourceCrud) getAddColumnsFromSdmFromWorkRequest(workId *string, retryPolicy *oci_common.RetryPolicy,
	actionTypeEnum oci_data_safe.WorkRequestResourceActionTypeEnum, timeout time.Duration) error {
func addMaskingColumnsWaitForWorkRequest(wId *string, entityType string, action oci_data_safe.WorkRequestResourceActionTypeEnum,
	timeout time.Duration, disableFoundRetries bool, client *oci_data_safe.DataSafeClient) (*string, error) {
func getErrorFromDataSafeAddMaskingColumnsFromSdmWorkRequest(client *oci_data_safe.DataSafeClient, workId *string, retryPolicy *oci_common.RetryPolicy, entityType string, action oci_data_safe.WorkRequestResourceActionTypeEnum) error {
	response, err := client.ListWorkRequestErrors(context.Background(),
func (s *DataSafeAddColumnsFromSdmResourceCrud) SetData() error {
	return nil
func (s *DataSafeAddColumnsFromSdmResourceCrud) Delete() error {
	return nil

=== ./internal/service/data_safe/data_safe_unset_user_assessment_baseline_resource.go ===
func DataSafeUnsetUserAssessmentBaselineResource() *schema.Resource {
	return &schema.Resource{
func createDataSafeUnsetUserAssessmentBaseline(d *schema.ResourceData, m interface{}) error {
	sync := &DataSafeUnsetUserAssessmentBaselineResourceCrud{}
func readDataSafeUnsetUserAssessmentBaseline(d *schema.ResourceData, m interface{}) error {
	return nil
func deleteDataSafeUnsetUserAssessmentBaseline(d *schema.ResourceData, m interface{}) error {
	return nil
func (s *DataSafeUnsetUserAssessmentBaselineResourceCrud) ID() string {
	return *s.Res.Id
func (s *DataSafeUnsetUserAssessmentBaselineResourceCrud) Get() error {

func (s *DataSafeUnsetUserAssessmentBaselineResourceCrud) Create() error {
	request := oci_data_safe.UnsetUserAssessmentBaselineRequest{}
func (s *DataSafeUnsetUserAssessmentBaselineResourceCrud) getUnsetUserAssessmentBaselineFromWorkRequest(workId *string, retryPolicy *oci_common.RetryPolicy,
	actionTypeEnum oci_data_safe.WorkRequestResourceActionTypeEnum, timeout time.Duration) error {
func unsetUserAssessmentBaselineWaitForWorkRequest(wId *string, entityType string, action oci_data_safe.WorkRequestResourceActionTypeEnum,
	timeout time.Duration, disableFoundRetries bool, client *oci_data_safe.DataSafeClient) (*string, error) {
func getErrorFromDataSafeUnsetUserAssessmentBaselineWorkRequest(client *oci_data_safe.DataSafeClient, workId *string, retryPolicy *oci_common.RetryPolicy, entityType string, action oci_data_safe.WorkRequestResourceActionTypeEnum) error {
	response, err := client.ListWorkRequestErrors(context.Background(),
func (s *DataSafeUnsetUserAssessmentBaselineResourceCrud) SetData() error {
	return nil

=== ./internal/service/data_safe/data_safe_target_databases_tables_data_source.go ===
func DataSafeTargetDatabasesTablesDataSource() *schema.Resource {
	return &schema.Resource{
func readDataSafeTargetDatabasesTables(d *schema.ResourceData, m interface{}) error {
	sync := &DataSafeTargetDatabasesTablesDataSourceCrud{}
func (s *DataSafeTargetDatabasesTablesDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *DataSafeTargetDatabasesTablesDataSourceCrud) Get() error {
	request := oci_data_safe.ListTablesRequest{}
func (s *DataSafeTargetDatabasesTablesDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/data_safe/data_safe_database_security_configs_data_source.go ===
func DataSafeDatabaseSecurityConfigsDataSource() *schema.Resource {
	return &schema.Resource{
func readDataSafeDatabaseSecurityConfigs(d *schema.ResourceData, m interface{}) error {
	sync := &DataSafeDatabaseSecurityConfigsDataSourceCrud{}
func (s *DataSafeDatabaseSecurityConfigsDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *DataSafeDatabaseSecurityConfigsDataSourceCrud) Get() error {
	request := oci_data_safe.ListDatabaseSecurityConfigsRequest{}
func (s *DataSafeDatabaseSecurityConfigsDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/data_safe/data_safe_target_database_roles_data_source.go ===
func DataSafeTargetDatabaseRolesDataSource() *schema.Resource {
	return &schema.Resource{
func readDataSafeTargetDatabaseRoles(d *schema.ResourceData, m interface{}) error {
	sync := &DataSafeTargetDatabaseRolesDataSourceCrud{}
func (s *DataSafeTargetDatabaseRolesDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *DataSafeTargetDatabaseRolesDataSourceCrud) Get() error {
	request := oci_data_safe.ListRolesRequest{}
func (s *DataSafeTargetDatabaseRolesDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/data_safe/data_safe_user_assessment_profile_analytics_data_source.go ===
func DataSafeUserAssessmentProfileAnalyticsDataSource() *schema.Resource {
	return &schema.Resource{
func readDataSafeUserAssessmentProfileAnalytics(d *schema.ResourceData, m interface{}) error {
	sync := &DataSafeUserAssessmentProfileAnalyticsDataSourceCrud{}
func (s *DataSafeUserAssessmentProfileAnalyticsDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *DataSafeUserAssessmentProfileAnalyticsDataSourceCrud) Get() error {
	request := oci_data_safe.ListProfileAnalyticsRequest{}
func (s *DataSafeUserAssessmentProfileAnalyticsDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/data_safe/data_safe_sdm_masking_policy_difference_resource.go ===
func DataSafeSdmMaskingPolicyDifferenceResource() *schema.Resource {
	return &schema.Resource{
func createDataSafeSdmMaskingPolicyDifference(d *schema.ResourceData, m interface{}) error {
	sync := &DataSafeSdmMaskingPolicyDifferenceResourceCrud{}
func readDataSafeSdmMaskingPolicyDifference(d *schema.ResourceData, m interface{}) error {
	sync := &DataSafeSdmMaskingPolicyDifferenceResourceCrud{}
func updateDataSafeSdmMaskingPolicyDifference(d *schema.ResourceData, m interface{}) error {
	sync := &DataSafeSdmMaskingPolicyDifferenceResourceCrud{}
func deleteDataSafeSdmMaskingPolicyDifference(d *schema.ResourceData, m interface{}) error {
	sync := &DataSafeSdmMaskingPolicyDifferenceResourceCrud{}
func (s *DataSafeSdmMaskingPolicyDifferenceResourceCrud) ID() string {
	return *s.Res.Id
func (s *DataSafeSdmMaskingPolicyDifferenceResourceCrud) CreatedPending() []string {
	return []string{
func (s *DataSafeSdmMaskingPolicyDifferenceResourceCrud) CreatedTarget() []string {
	return []string{
func (s *DataSafeSdmMaskingPolicyDifferenceResourceCrud) DeletedPending() []string {
	return []string{
func (s *DataSafeSdmMaskingPolicyDifferenceResourceCrud) DeletedTarget() []string {
	return []string{
func (s *DataSafeSdmMaskingPolicyDifferenceResourceCrud) Create() error {
	request := oci_data_safe.CreateSdmMaskingPolicyDifferenceRequest{}
func (s *DataSafeSdmMaskingPolicyDifferenceResourceCrud) getSdmMaskingPolicyDifferenceFromWorkRequest(workId *string, retryPolicy *oci_common.RetryPolicy,
	actionTypeEnum oci_data_safe.WorkRequestResourceActionTypeEnum, timeout time.Duration) error {
func sdmMaskingPolicyDifferenceWaitForWorkRequest(wId *string, entityType string, action oci_data_safe.WorkRequestResourceActionTypeEnum,
	timeout time.Duration, disableFoundRetries bool, client *oci_data_safe.DataSafeClient) (*string, error) {
func getErrorFromDataSafeSdmMaskingPolicyDifferenceWorkRequest(client *oci_data_safe.DataSafeClient, workId *string, retryPolicy *oci_common.RetryPolicy, entityType string, action oci_data_safe.WorkRequestResourceActionTypeEnum) error {
	response, err := client.ListWorkRequestErrors(context.Background(),
func (s *DataSafeSdmMaskingPolicyDifferenceResourceCrud) Get() error {
	request := oci_data_safe.GetSdmMaskingPolicyDifferenceRequest{}
func (s *DataSafeSdmMaskingPolicyDifferenceResourceCrud) Update() error {
	if compartment, ok := s.D.GetOkExists("compartment_id"); ok && s.D.HasChange("compartment_id") {
func (s *DataSafeSdmMaskingPolicyDifferenceResourceCrud) Delete() error {
	request := oci_data_safe.DeleteSdmMaskingPolicyDifferenceRequest{}
func (s *DataSafeSdmMaskingPolicyDifferenceResourceCrud) SetData() error {
	if s.Res.CompartmentId != nil {
func (s *DataSafeSdmMaskingPolicyDifferenceResourceCrud) updateCompartment(compartment interface{}) error {
	changeCompartmentRequest := oci_data_safe.ChangeSdmMaskingPolicyDifferenceCompartmentRequest{}

=== ./internal/service/data_safe/data_safe_report_definitions_data_source.go ===
func DataSafeReportDefinitionsDataSource() *schema.Resource {
	return &schema.Resource{
func readDataSafeReportDefinitions(d *schema.ResourceData, m interface{}) error {
	sync := &DataSafeReportDefinitionsDataSourceCrud{}
func (s *DataSafeReportDefinitionsDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *DataSafeReportDefinitionsDataSourceCrud) Get() error {
	request := oci_data_safe.ListReportDefinitionsRequest{}
func (s *DataSafeReportDefinitionsDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/data_safe/data_safe_masking_policies_masking_column_resource.go ===
func DataSafeMaskingPoliciesMaskingColumnResource() *schema.Resource {
	return &schema.Resource{
func createDataSafeMaskingPoliciesMaskingColumn(d *schema.ResourceData, m interface{}) error {
	sync := &DataSafeMaskingPoliciesMaskingColumnResourceCrud{}
func readDataSafeMaskingPoliciesMaskingColumn(d *schema.ResourceData, m interface{}) error {
	sync := &DataSafeMaskingPoliciesMaskingColumnResourceCrud{}
func updateDataSafeMaskingPoliciesMaskingColumn(d *schema.ResourceData, m interface{}) error {
	sync := &DataSafeMaskingPoliciesMaskingColumnResourceCrud{}
func deleteDataSafeMaskingPoliciesMaskingColumn(d *schema.ResourceData, m interface{}) error {
	sync := &DataSafeMaskingPoliciesMaskingColumnResourceCrud{}
func (s *DataSafeMaskingPoliciesMaskingColumnResourceCrud) ID() string {
	column := *s.Res
func (s *DataSafeMaskingPoliciesMaskingColumnResourceCrud) CreatedPending() []string {
	return []string{
func (s *DataSafeMaskingPoliciesMaskingColumnResourceCrud) CreatedTarget() []string {
	return []string{
func (s *DataSafeMaskingPoliciesMaskingColumnResourceCrud) DeletedPending() []string {
	return []string{
func (s *DataSafeMaskingPoliciesMaskingColumnResourceCrud) DeletedTarget() []string {
	return []string{}
func (s *DataSafeMaskingPoliciesMaskingColumnResourceCrud) Create() error {
	request := oci_data_safe.CreateMaskingColumnRequest{}
func (s *DataSafeMaskingPoliciesMaskingColumnResourceCrud) setIdFromWorkRequest(workId *string) {
	var identifier *string
func (s *DataSafeMaskingPoliciesMaskingColumnResourceCrud) getMaskingPoliciesMaskingColumnFromWorkRequest(workId *string, retryPolicy *oci_common.RetryPolicy,
	actionTypeEnum oci_data_safe.WorkRequestResourceActionTypeEnum, timeout time.Duration) error {
func maskingPoliciesMaskingColumnWaitForWorkRequest(wId *string, entityType string, action oci_data_safe.WorkRequestResourceActionTypeEnum,
	timeout time.Duration, disableFoundRetries bool, client *oci_data_safe.DataSafeClient) (*string, error) {
func getErrorFromDataSafeMaskingPoliciesMaskingColumnWorkRequest(client *oci_data_safe.DataSafeClient, workId *string, retryPolicy *oci_common.RetryPolicy, entityType string, action oci_data_safe.WorkRequestResourceActionTypeEnum) error {
	response, err := client.ListWorkRequestErrors(context.Background(),
func (s *DataSafeMaskingPoliciesMaskingColumnResourceCrud) Get() error {
	request := oci_data_safe.GetMaskingColumnRequest{}
func (s *DataSafeMaskingPoliciesMaskingColumnResourceCrud) Update() error {
	request := oci_data_safe.UpdateMaskingColumnRequest{}
func (s *DataSafeMaskingPoliciesMaskingColumnResourceCrud) Delete() error {
	request := oci_data_safe.DeleteMaskingColumnRequest{}
func (s *DataSafeMaskingPoliciesMaskingColumnResourceCrud) SetData() error {

func (s *DataSafeMaskingPoliciesMaskingColumnResourceCrud) mapToFormatEntry(fieldKeyFormat string) (oci_data_safe.FormatEntry, error) {
	var baseObject oci_data_safe.FormatEntry
func (s *DataSafeMaskingPoliciesMaskingColumnResourceCrud) mapToMaskingFormat(fieldKeyFormat string) (oci_data_safe.MaskingFormat, error) {
	result := oci_data_safe.MaskingFormat{}

=== ./internal/service/data_safe/data_safe_audit_profile_available_audit_volumes_data_source.go ===
func DataSafeAuditProfileAvailableAuditVolumesDataSource() *schema.Resource {
	return &schema.Resource{
func readDataSafeAuditProfileAvailableAuditVolumes(d *schema.ResourceData, m interface{}) error {
	sync := &DataSafeAuditProfileAvailableAuditVolumesDataSourceCrud{}
func (s *DataSafeAuditProfileAvailableAuditVolumesDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *DataSafeAuditProfileAvailableAuditVolumesDataSourceCrud) Get() error {
	request := oci_data_safe.ListAvailableAuditVolumesRequest{}
func (s *DataSafeAuditProfileAvailableAuditVolumesDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/data_safe/data_safe_masking_report_data_source.go ===
func DataSafeMaskingReportDataSource() *schema.Resource {
	return &schema.Resource{
func readSingularDataSafeMaskingReport(d *schema.ResourceData, m interface{}) error {
	sync := &DataSafeMaskingReportDataSourceCrud{}
func (s *DataSafeMaskingReportDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *DataSafeMaskingReportDataSourceCrud) Get() error {
	request := oci_data_safe.GetMaskingReportRequest{}
func (s *DataSafeMaskingReportDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/data_safe/data_safe_sql_firewall_allowed_sql_data_source.go ===
func DataSafeSqlFirewallAllowedSqlDataSource() *schema.Resource {
	return &schema.Resource{
func readSingularDataSafeSqlFirewallAllowedSql(d *schema.ResourceData, m interface{}) error {
	sync := &DataSafeSqlFirewallAllowedSqlDataSourceCrud{}
func (s *DataSafeSqlFirewallAllowedSqlDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *DataSafeSqlFirewallAllowedSqlDataSourceCrud) Get() error {
	request := oci_data_safe.GetSqlFirewallAllowedSqlRequest{}
func (s *DataSafeSqlFirewallAllowedSqlDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/data_safe/data_safe_sql_firewall_policy_management_resource.go ===
func DataSafeSqlFirewallPolicyManagementResource() *schema.Resource {
	return &schema.Resource{
func createDataSafeSqlFirewallPolicyManagement(d *schema.ResourceData, m interface{}) error {
	sync := &DataSafeSqlFirewallPolicyManagementResourceCrud{}
func readDataSafeSqlFirewallPolicyManagement(d *schema.ResourceData, m interface{}) error {
	sync := &DataSafeSqlFirewallPolicyManagementResourceCrud{}
func updateDataSafeSqlFirewallPolicyManagement(d *schema.ResourceData, m interface{}) error {
	sync := &DataSafeSqlFirewallPolicyManagementResourceCrud{}
func deleteDataSafeSqlFirewallPolicyManagement(d *schema.ResourceData, m interface{}) error {
	sync := &DataSafeSqlFirewallPolicyManagementResourceCrud{}
func (s *DataSafeSqlFirewallPolicyManagementResourceCrud) ID() string {
	return *s.Res.Id
func (s *DataSafeSqlFirewallPolicyManagementResourceCrud) GetSqlFirewallPolicyWorkReq() error {
	listWorkRequestsRequest := oci_data_safe.ListWorkRequestsRequest{SortBy: oci_data_safe.ListWorkRequestsSortByEnum("ACCEPTEDTIME"), SortOrder: oci_data_safe.ListWorkRequestsSortOrderEnum("DESC")}
func (s *DataSafeSqlFirewallPolicyManagementResourceCrud) GetSqlFirewallPolicyList() error {

func (s *DataSafeSqlFirewallPolicyManagementResourceCrud) Get() error {
	request := oci_data_safe.GetSqlFirewallPolicyRequest{}
func (s *DataSafeSqlFirewallPolicyManagementResourceCrud) Update() error {
	if compartment, ok := s.D.GetOkExists("compartment_id"); ok && s.D.HasChange("compartment_id") {
func (s *DataSafeSqlFirewallPolicyManagementResourceCrud) SetData() error {

func (s *DataSafeSqlFirewallPolicyManagementResourceCrud) getSqlFirewallPolicyFromWorkRequest(workId *string, retryPolicy *oci_common.RetryPolicy,
	actionTypeEnum oci_data_safe.WorkRequestResourceActionTypeEnum, timeout time.Duration) error {
func (s *DataSafeSqlFirewallPolicyManagementResourceCrud) updateCompartment(compartment interface{}) error {
	changeCompartmentRequest := oci_data_safe.ChangeSqlFirewallPolicyCompartmentRequest{}
func (s *DataSafeSqlFirewallPolicyManagementResourceCrud) Delete() error {
	request := oci_data_safe.DeleteSqlFirewallPolicyRequest{}

=== ./internal/service/data_safe/data_safe_export.go ===
func getDataSafeTargetDatabasePeerTargetDatabaseId(resource *tf_export.OCIResource) (string, error) {

func getDataSafeDiscoveryJobsResultId(resource *tf_export.OCIResource) (string, error) {

func getDataSafeAlertPolicyRuleId(resource *tf_export.OCIResource) (string, error) {

func getDataSafeMaskingPoliciesMaskingColumnId(resource *tf_export.OCIResource) (string, error) {

func getDataSafeSensitiveDataModelsSensitiveColumnId(resource *tf_export.OCIResource) (string, error) {

func findAlertPolicies(ctx *tf_export.ResourceDiscoveryContext, tfMeta *tf_export.TerraformResourceAssociation, parent *tf_export.OCIResource, resourceGraph *tf_export.TerraformResourceGraph) (resources []*tf_export.OCIResource, err error) {
	results := []*tf_export.OCIResource{}

=== ./internal/service/data_safe/data_safe_discovery_jobs_results_data_source.go ===
func DataSafeDiscoveryJobsResultsDataSource() *schema.Resource {
	return &schema.Resource{
func readDataSafeDiscoveryJobsResults(d *schema.ResourceData, m interface{}) error {
	sync := &DataSafeDiscoveryJobsResultsDataSourceCrud{}
func (s *DataSafeDiscoveryJobsResultsDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *DataSafeDiscoveryJobsResultsDataSourceCrud) Get() error {
	request := oci_data_safe.ListDiscoveryJobResultsRequest{}
func (s *DataSafeDiscoveryJobsResultsDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/data_safe/data_safe_masking_policies_data_source.go ===
func DataSafeMaskingPoliciesDataSource() *schema.Resource {
	return &schema.Resource{
func readDataSafeMaskingPolicies(d *schema.ResourceData, m interface{}) error {
	sync := &DataSafeMaskingPoliciesDataSourceCrud{}
func (s *DataSafeMaskingPoliciesDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *DataSafeMaskingPoliciesDataSourceCrud) Get() error {
	request := oci_data_safe.ListMaskingPoliciesRequest{}
func (s *DataSafeMaskingPoliciesDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/data_safe/data_safe_unset_user_assessment_baseline_management_resource.go ===
func DataSafeUnsetUserAssessmentBaselineManagementResource() *schema.Resource {
	return &schema.Resource{
func createDataSafeUnsetUserAssessmentBaselineManagement(d *schema.ResourceData, m interface{}) error {
	sync := &DataSafeUnsetUserAssessmentBaselineManagementResourceCrud{}
func readDataSafeUnsetUserAssessmentBaselineManagement(d *schema.ResourceData, m interface{}) error {
	return nil
func deleteDataSafeUnsetUserAssessmentBaselineManagement(d *schema.ResourceData, m interface{}) error {
	return nil
func (s *DataSafeUnsetUserAssessmentBaselineManagementResourceCrud) GetBaselineWorkReq(compartmentId string, UAId string) (string, error) {
	listWorkRequestsRequest := oci_data_safe.ListWorkRequestsRequest{SortBy: oci_data_safe.ListWorkRequestsSortByEnum("ACCEPTEDTIME"), SortOrder: oci_data_safe.ListWorkRequestsSortOrderEnum("DESC")}
func (s *DataSafeUnsetUserAssessmentBaselineManagementResourceCrud) getSavedAssessmentIdFromWorkRequest(workId *string, retryPolicy *oci_common.RetryPolicy,
	actionTypeEnum oci_data_safe.WorkRequestResourceActionTypeEnum, timeout time.Duration) (string, error) {
func (s *DataSafeUnsetUserAssessmentBaselineManagementResourceCrud) ID() string {
	return *s.Res.OpcRequestId
func (s *DataSafeUnsetUserAssessmentBaselineManagementResourceCrud) Create() error {
	request := oci_data_safe.UnsetUserAssessmentBaselineRequest{}
func (s *DataSafeUnsetUserAssessmentBaselineManagementResourceCrud) getUnsetUserAssessmentBaselineManagementFromWorkRequest(workId *string, retryPolicy *oci_common.RetryPolicy,
	actionTypeEnum oci_data_safe.WorkRequestResourceActionTypeEnum, timeout time.Duration) error {
func unsetUserAssessmentBaselineManagementWaitForWorkRequest(wId *string, entityType string, action oci_data_safe.WorkRequestResourceActionTypeEnum,
	timeout time.Duration, disableFoundRetries bool, client *oci_data_safe.DataSafeClient) (*string, error) {
func getErrorFromDataSafeUnsetUserAssessmentBaselineManagementWorkRequest(client *oci_data_safe.DataSafeClient, workId *string, retryPolicy *oci_common.RetryPolicy, entityType string, action oci_data_safe.WorkRequestResourceActionTypeEnum) error {
	response, err := client.ListWorkRequestErrors(context.Background(),
func (s *DataSafeUnsetUserAssessmentBaselineManagementResourceCrud) SetData() error {
	return nil

=== ./internal/service/data_safe/data_safe_compatible_formats_for_sensitive_type_data_source.go ===
func DataSafeCompatibleFormatsForSensitiveTypeDataSource() *schema.Resource {
	return &schema.Resource{
func readSingularDataSafeCompatibleFormatsForSensitiveType(d *schema.ResourceData, m interface{}) error {
	sync := &DataSafeCompatibleFormatsForSensitiveTypeDataSourceCrud{}
func (s *DataSafeCompatibleFormatsForSensitiveTypeDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *DataSafeCompatibleFormatsForSensitiveTypeDataSourceCrud) Get() error {
	request := oci_data_safe.GetCompatibleFormatsForSensitiveTypesRequest{}
func (s *DataSafeCompatibleFormatsForSensitiveTypeDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/data_safe/data_safe_sql_collection_resource.go ===
func DataSafeSqlCollectionResource() *schema.Resource {
	return &schema.Resource{
func createDataSafeSqlCollection(d *schema.ResourceData, m interface{}) error {
	sync := &DataSafeSqlCollectionResourceCrud{}
func readDataSafeSqlCollection(d *schema.ResourceData, m interface{}) error {
	sync := &DataSafeSqlCollectionResourceCrud{}
func updateDataSafeSqlCollection(d *schema.ResourceData, m interface{}) error {
	sync := &DataSafeSqlCollectionResourceCrud{}
func deleteDataSafeSqlCollection(d *schema.ResourceData, m interface{}) error {
	sync := &DataSafeSqlCollectionResourceCrud{}
func (s *DataSafeSqlCollectionResourceCrud) ID() string {
	return *s.Res.Id
func (s *DataSafeSqlCollectionResourceCrud) CreatedPending() []string {
	return []string{
func (s *DataSafeSqlCollectionResourceCrud) CreatedTarget() []string {
	return []string{
func (s *DataSafeSqlCollectionResourceCrud) DeletedPending() []string {
	return []string{
func (s *DataSafeSqlCollectionResourceCrud) DeletedTarget() []string {
	return []string{
func (s *DataSafeSqlCollectionResourceCrud) Create() error {
	request := oci_data_safe.CreateSqlCollectionRequest{}
func (s *DataSafeSqlCollectionResourceCrud) getSqlCollectionFromWorkRequest(workId *string, retryPolicy *oci_common.RetryPolicy,
	actionTypeEnum oci_data_safe.WorkRequestResourceActionTypeEnum, timeout time.Duration) error {
func sqlCollectionWaitForWorkRequest(wId *string, entityType string, action oci_data_safe.WorkRequestResourceActionTypeEnum,
	timeout time.Duration, disableFoundRetries bool, client *oci_data_safe.DataSafeClient) (*string, error) {
func getErrorFromDataSafeSqlCollectionWorkRequest(client *oci_data_safe.DataSafeClient, workId *string, retryPolicy *oci_common.RetryPolicy, entityType string, action oci_data_safe.WorkRequestResourceActionTypeEnum) error {
	response, err := client.ListWorkRequestErrors(context.Background(),
func (s *DataSafeSqlCollectionResourceCrud) Get() error {
	request := oci_data_safe.GetSqlCollectionRequest{}
func (s *DataSafeSqlCollectionResourceCrud) Update() error {
	if compartment, ok := s.D.GetOkExists("compartment_id"); ok && s.D.HasChange("compartment_id") {
func (s *DataSafeSqlCollectionResourceCrud) Delete() error {
	request := oci_data_safe.DeleteSqlCollectionRequest{}
func (s *DataSafeSqlCollectionResourceCrud) SetData() error {
	if s.Res.CompartmentId != nil {
func (s *DataSafeSqlCollectionResourceCrud) GenerateSqlFirewallPolicy() error {
	request := oci_data_safe.GenerateSqlFirewallPolicyRequest{}
func (s *DataSafeSqlCollectionResourceCrud) PurgeSqlCollectionLogs() error {
	request := oci_data_safe.PurgeSqlCollectionLogsRequest{}
func (s *DataSafeSqlCollectionResourceCrud) RefreshSqlCollectionLogInsights() error {
	request := oci_data_safe.RefreshSqlCollectionLogInsightsRequest{}
func (s *DataSafeSqlCollectionResourceCrud) StartSqlCollection() error {
	request := oci_data_safe.StartSqlCollectionRequest{}
func (s *DataSafeSqlCollectionResourceCrud) StopSqlCollection() error {
	request := oci_data_safe.StopSqlCollectionRequest{}
func (s *DataSafeSqlCollectionResourceCrud) updateCompartment(compartment interface{}) error {
	changeCompartmentRequest := oci_data_safe.ChangeSqlCollectionCompartmentRequest{}

=== ./internal/service/data_safe/data_safe_audit_archive_retrieval_data_source.go ===
func DataSafeAuditArchiveRetrievalDataSource() *schema.Resource {
	fieldMap := make(map[string]*schema.Schema)
func readSingularDataSafeAuditArchiveRetrieval(d *schema.ResourceData, m interface{}) error {
	sync := &DataSafeAuditArchiveRetrievalDataSourceCrud{}
func (s *DataSafeAuditArchiveRetrievalDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *DataSafeAuditArchiveRetrievalDataSourceCrud) Get() error {
	request := oci_data_safe.GetAuditArchiveRetrievalRequest{}
func (s *DataSafeAuditArchiveRetrievalDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/data_safe/data_safe_user_assessment_profiles_data_source.go ===
func DataSafeUserAssessmentProfilesDataSource() *schema.Resource {
	return &schema.Resource{
func readDataSafeUserAssessmentProfiles(d *schema.ResourceData, m interface{}) error {
	sync := &DataSafeUserAssessmentProfilesDataSourceCrud{}
func (s *DataSafeUserAssessmentProfilesDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *DataSafeUserAssessmentProfilesDataSourceCrud) Get() error {
	request := oci_data_safe.ListProfileSummariesRequest{}
func (s *DataSafeUserAssessmentProfilesDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/data_safe/data_safe_library_masking_format_data_source.go ===
func DataSafeLibraryMaskingFormatDataSource() *schema.Resource {
	fieldMap := make(map[string]*schema.Schema)
func readSingularDataSafeLibraryMaskingFormat(d *schema.ResourceData, m interface{}) error {
	sync := &DataSafeLibraryMaskingFormatDataSourceCrud{}
func (s *DataSafeLibraryMaskingFormatDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *DataSafeLibraryMaskingFormatDataSourceCrud) Get() error {
	request := oci_data_safe.GetLibraryMaskingFormatRequest{}
func (s *DataSafeLibraryMaskingFormatDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/data_safe/data_safe_security_policy_report_database_view_access_entries_data_source.go ===
func DataSafeSecurityPolicyReportDatabaseViewAccessEntriesDataSource() *schema.Resource {
	return &schema.Resource{
func readDataSafeSecurityPolicyReportDatabaseViewAccessEntries(d *schema.ResourceData, m interface{}) error {
	sync := &DataSafeSecurityPolicyReportDatabaseViewAccessEntriesDataSourceCrud{}
func (s *DataSafeSecurityPolicyReportDatabaseViewAccessEntriesDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *DataSafeSecurityPolicyReportDatabaseViewAccessEntriesDataSourceCrud) Get() error {
	request := oci_data_safe.ListDatabaseViewAccessEntriesRequest{}
func (s *DataSafeSecurityPolicyReportDatabaseViewAccessEntriesDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/data_safe/data_safe_masking_policy_masking_objects_data_source.go ===
func DataSafeMaskingPolicyMaskingObjectsDataSource() *schema.Resource {
	return &schema.Resource{
func readDataSafeMaskingPolicyMaskingObjects(d *schema.ResourceData, m interface{}) error {
	sync := &DataSafeMaskingPolicyMaskingObjectsDataSourceCrud{}
func (s *DataSafeMaskingPolicyMaskingObjectsDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *DataSafeMaskingPolicyMaskingObjectsDataSourceCrud) Get() error {
	request := oci_data_safe.ListMaskingObjectsRequest{}
func (s *DataSafeMaskingPolicyMaskingObjectsDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/data_safe/data_safe_data_safe_configuration_data_source.go ===
func DataSafeDataSafeConfigurationDataSource() *schema.Resource {
	fieldMap := make(map[string]*schema.Schema)
func readSingularDataSafeDataSafeConfiguration(d *schema.ResourceData, m interface{}) error {
	sync := &DataSafeDataSafeConfigurationDataSourceCrud{}
func (s *DataSafeDataSafeConfigurationDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *DataSafeDataSafeConfigurationDataSourceCrud) Get() error {
	request := oci_data_safe.GetDataSafeConfigurationRequest{}
func (s *DataSafeDataSafeConfigurationDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/data_safe/data_safe_alert_policy_data_source.go ===
func DataSafeAlertPolicyDataSource() *schema.Resource {
	fieldMap := make(map[string]*schema.Schema)
func readSingularDataSafeAlertPolicy(d *schema.ResourceData, m interface{}) error {
	sync := &DataSafeAlertPolicyDataSourceCrud{}
func (s *DataSafeAlertPolicyDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *DataSafeAlertPolicyDataSourceCrud) Get() error {
	request := oci_data_safe.GetAlertPolicyRequest{}
func (s *DataSafeAlertPolicyDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/data_safe/data_safe_sql_firewall_policy_analytics_data_source.go ===
func DataSafeSqlFirewallPolicyAnalyticsDataSource() *schema.Resource {
	return &schema.Resource{
func readDataSafeSqlFirewallPolicyAnalytics(d *schema.ResourceData, m interface{}) error {
	sync := &DataSafeSqlFirewallPolicyAnalyticsDataSourceCrud{}
func (s *DataSafeSqlFirewallPolicyAnalyticsDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *DataSafeSqlFirewallPolicyAnalyticsDataSourceCrud) Get() error {
	request := oci_data_safe.ListSqlFirewallPolicyAnalyticsRequest{}
func (s *DataSafeSqlFirewallPolicyAnalyticsDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/data_safe/data_safe_discovery_analytic_data_source.go ===
func DataSafeDiscoveryAnalyticDataSource() *schema.Resource {
	return &schema.Resource{
func readSingularDataSafeDiscoveryAnalytic(d *schema.ResourceData, m interface{}) error {
	sync := &DataSafeDiscoveryAnalyticDataSourceCrud{}
func (s *DataSafeDiscoveryAnalyticDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *DataSafeDiscoveryAnalyticDataSourceCrud) Get() error {
	request := oci_data_safe.ListDiscoveryAnalyticsRequest{}
func (s *DataSafeDiscoveryAnalyticDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/data_safe/data_safe_sql_collection_data_source.go ===
func DataSafeSqlCollectionDataSource() *schema.Resource {
	fieldMap := make(map[string]*schema.Schema)
func readSingularDataSafeSqlCollection(d *schema.ResourceData, m interface{}) error {
	sync := &DataSafeSqlCollectionDataSourceCrud{}
func (s *DataSafeSqlCollectionDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *DataSafeSqlCollectionDataSourceCrud) Get() error {
	request := oci_data_safe.GetSqlCollectionRequest{}
func (s *DataSafeSqlCollectionDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/data_safe/data_safe_masking_policy_health_report_logs_data_source.go ===
func DataSafeMaskingPolicyHealthReportLogsDataSource() *schema.Resource {
	return &schema.Resource{
func readDataSafeMaskingPolicyHealthReportLogs(d *schema.ResourceData, m interface{}) error {
	sync := &DataSafeMaskingPolicyHealthReportLogsDataSourceCrud{}
func (s *DataSafeMaskingPolicyHealthReportLogsDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *DataSafeMaskingPolicyHealthReportLogsDataSourceCrud) Get() error {
	request := oci_data_safe.ListMaskingPolicyHealthReportLogsRequest{}
func (s *DataSafeMaskingPolicyHealthReportLogsDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/data_safe/data_safe_sensitive_type_resource.go ===
func DataSafeSensitiveTypeResource() *schema.Resource {
	return &schema.Resource{
func createDataSafeSensitiveType(d *schema.ResourceData, m interface{}) error {
	sync := &DataSafeSensitiveTypeResourceCrud{}
func readDataSafeSensitiveType(d *schema.ResourceData, m interface{}) error {
	sync := &DataSafeSensitiveTypeResourceCrud{}
func updateDataSafeSensitiveType(d *schema.ResourceData, m interface{}) error {
	sync := &DataSafeSensitiveTypeResourceCrud{}
func deleteDataSafeSensitiveType(d *schema.ResourceData, m interface{}) error {
	sync := &DataSafeSensitiveTypeResourceCrud{}
func (s *DataSafeSensitiveTypeResourceCrud) ID() string {
	sensitiveType := *s.Res
func (s *DataSafeSensitiveTypeResourceCrud) CreatedPending() []string {
	return []string{
func (s *DataSafeSensitiveTypeResourceCrud) CreatedTarget() []string {
	return []string{
func (s *DataSafeSensitiveTypeResourceCrud) DeletedPending() []string {
	return []string{
func (s *DataSafeSensitiveTypeResourceCrud) DeletedTarget() []string {
	return []string{
func (s *DataSafeSensitiveTypeResourceCrud) Create() error {
	request := oci_data_safe.CreateSensitiveTypeRequest{}
func (s *DataSafeSensitiveTypeResourceCrud) getSensitiveTypeFromWorkRequest(workId *string, retryPolicy *oci_common.RetryPolicy,
	actionTypeEnum oci_data_safe.WorkRequestResourceActionTypeEnum, timeout time.Duration) error {
func sensitiveTypeWaitForWorkRequest(wId *string, entityType string, action oci_data_safe.WorkRequestResourceActionTypeEnum,
	timeout time.Duration, disableFoundRetries bool, client *oci_data_safe.DataSafeClient) (*string, error) {
func getErrorFromDataSafeSensitiveTypeWorkRequest(client *oci_data_safe.DataSafeClient, workId *string, retryPolicy *oci_common.RetryPolicy, entityType string, action oci_data_safe.WorkRequestResourceActionTypeEnum) error {
	response, err := client.ListWorkRequestErrors(context.Background(),
func (s *DataSafeSensitiveTypeResourceCrud) Get() error {
	request := oci_data_safe.GetSensitiveTypeRequest{}
func (s *DataSafeSensitiveTypeResourceCrud) Update() error {
	if compartment, ok := s.D.GetOkExists("compartment_id"); ok && s.D.HasChange("compartment_id") {
func (s *DataSafeSensitiveTypeResourceCrud) Delete() error {
	request := oci_data_safe.DeleteSensitiveTypeRequest{}
func (s *DataSafeSensitiveTypeResourceCrud) SetData() error {
	switch v := (*s.Res).(type) {
func (s *DataSafeSensitiveTypeResourceCrud) populateTopLevelPolymorphicCreateSensitiveTypeRequest(request *oci_data_safe.CreateSensitiveTypeRequest) error {
	//discriminator
func (s *DataSafeSensitiveTypeResourceCrud) populateTopLevelPolymorphicUpdateSensitiveTypeRequest(request *oci_data_safe.UpdateSensitiveTypeRequest) error {
	//discriminator
func (s *DataSafeSensitiveTypeResourceCrud) updateCompartment(compartment interface{}) error {
	changeCompartmentRequest := oci_data_safe.ChangeSensitiveTypeCompartmentRequest{}

=== ./internal/service/data_safe/data_safe_library_masking_format_resource.go ===
func DataSafeLibraryMaskingFormatResource() *schema.Resource {
	return &schema.Resource{
func createDataSafeLibraryMaskingFormat(d *schema.ResourceData, m interface{}) error {
	sync := &DataSafeLibraryMaskingFormatResourceCrud{}
func readDataSafeLibraryMaskingFormat(d *schema.ResourceData, m interface{}) error {
	sync := &DataSafeLibraryMaskingFormatResourceCrud{}
func updateDataSafeLibraryMaskingFormat(d *schema.ResourceData, m interface{}) error {
	sync := &DataSafeLibraryMaskingFormatResourceCrud{}
func deleteDataSafeLibraryMaskingFormat(d *schema.ResourceData, m interface{}) error {
	sync := &DataSafeLibraryMaskingFormatResourceCrud{}
func (s *DataSafeLibraryMaskingFormatResourceCrud) ID() string {
	return *s.Res.Id
func (s *DataSafeLibraryMaskingFormatResourceCrud) CreatedPending() []string {
	return []string{
func (s *DataSafeLibraryMaskingFormatResourceCrud) CreatedTarget() []string {
	return []string{
func (s *DataSafeLibraryMaskingFormatResourceCrud) DeletedPending() []string {
	return []string{
func (s *DataSafeLibraryMaskingFormatResourceCrud) DeletedTarget() []string {
	return []string{
func (s *DataSafeLibraryMaskingFormatResourceCrud) Create() error {
	request := oci_data_safe.CreateLibraryMaskingFormatRequest{}
func (s *DataSafeLibraryMaskingFormatResourceCrud) getLibraryMaskingFormatFromWorkRequest(workId *string, retryPolicy *oci_common.RetryPolicy,
	actionTypeEnum oci_data_safe.WorkRequestResourceActionTypeEnum, entityType string, timeout time.Duration) error {
func libraryMaskingFormatWaitForWorkRequest(wId *string, entityType string, action oci_data_safe.WorkRequestResourceActionTypeEnum,
	timeout time.Duration, disableFoundRetries bool, client *oci_data_safe.DataSafeClient) (*string, error) {
func getErrorFromDataSafeLibraryMaskingFormatWorkRequest(client *oci_data_safe.DataSafeClient, workId *string, retryPolicy *oci_common.RetryPolicy, entityType string, action oci_data_safe.WorkRequestResourceActionTypeEnum) error {
	response, err := client.ListWorkRequestErrors(context.Background(),
func (s *DataSafeLibraryMaskingFormatResourceCrud) Get() error {
	request := oci_data_safe.GetLibraryMaskingFormatRequest{}
func (s *DataSafeLibraryMaskingFormatResourceCrud) Update() error {
	if compartment, ok := s.D.GetOkExists("compartment_id"); ok && s.D.HasChange("compartment_id") {
func (s *DataSafeLibraryMaskingFormatResourceCrud) Delete() error {
	request := oci_data_safe.DeleteLibraryMaskingFormatRequest{}
func (s *DataSafeLibraryMaskingFormatResourceCrud) SetData() error {
	if s.Res.CompartmentId != nil {
func (s *DataSafeLibraryMaskingFormatResourceCrud) mapToFormatEntry(fieldKeyFormat string) (oci_data_safe.FormatEntry, error) {
	var baseObject oci_data_safe.FormatEntry
func (s *DataSafeLibraryMaskingFormatResourceCrud) updateCompartment(compartment interface{}) error {
	changeCompartmentRequest := oci_data_safe.ChangeLibraryMaskingFormatCompartmentRequest{}

=== ./internal/service/data_safe/data_safe_audit_archive_retrieval_resource.go ===
func DataSafeAuditArchiveRetrievalResource() *schema.Resource {
	return &schema.Resource{
func createDataSafeAuditArchiveRetrieval(d *schema.ResourceData, m interface{}) error {
	sync := &DataSafeAuditArchiveRetrievalResourceCrud{}
func readDataSafeAuditArchiveRetrieval(d *schema.ResourceData, m interface{}) error {
	sync := &DataSafeAuditArchiveRetrievalResourceCrud{}
func updateDataSafeAuditArchiveRetrieval(d *schema.ResourceData, m interface{}) error {
	sync := &DataSafeAuditArchiveRetrievalResourceCrud{}
func deleteDataSafeAuditArchiveRetrieval(d *schema.ResourceData, m interface{}) error {
	sync := &DataSafeAuditArchiveRetrievalResourceCrud{}
func (s *DataSafeAuditArchiveRetrievalResourceCrud) ID() string {
	return *s.Res.Id
func (s *DataSafeAuditArchiveRetrievalResourceCrud) CreatedPending() []string {
	return []string{
func (s *DataSafeAuditArchiveRetrievalResourceCrud) CreatedTarget() []string {
	return []string{
func (s *DataSafeAuditArchiveRetrievalResourceCrud) DeletedPending() []string {
	return []string{
func (s *DataSafeAuditArchiveRetrievalResourceCrud) DeletedTarget() []string {
	return []string{
func (s *DataSafeAuditArchiveRetrievalResourceCrud) Create() error {
	request := oci_data_safe.CreateAuditArchiveRetrievalRequest{}
func (s *DataSafeAuditArchiveRetrievalResourceCrud) getAuditArchiveRetrievalFromWorkRequest(workId *string, retryPolicy *oci_common.RetryPolicy,
	actionTypeEnum oci_data_safe.WorkRequestResourceActionTypeEnum, timeout time.Duration) error {
func auditArchiveRetrievalWaitForWorkRequest(wId *string, entityType string, action oci_data_safe.WorkRequestResourceActionTypeEnum,
	timeout time.Duration, disableFoundRetries bool, client *oci_data_safe.DataSafeClient) (*string, error) {
func getErrorFromDataSafeAuditArchiveRetrievalWorkRequest(client *oci_data_safe.DataSafeClient, workId *string, retryPolicy *oci_common.RetryPolicy, entityType string, action oci_data_safe.WorkRequestResourceActionTypeEnum) error {
	response, err := client.ListWorkRequestErrors(context.Background(),
func (s *DataSafeAuditArchiveRetrievalResourceCrud) Get() error {
	request := oci_data_safe.GetAuditArchiveRetrievalRequest{}
func (s *DataSafeAuditArchiveRetrievalResourceCrud) Update() error {
	if compartment, ok := s.D.GetOkExists("compartment_id"); ok && s.D.HasChange("compartment_id") {
func (s *DataSafeAuditArchiveRetrievalResourceCrud) Delete() error {
	request := oci_data_safe.DeleteAuditArchiveRetrievalRequest{}
func (s *DataSafeAuditArchiveRetrievalResourceCrud) SetData() error {
	if s.Res.AuditEventCount != nil {
func (s *DataSafeAuditArchiveRetrievalResourceCrud) updateCompartment(compartment interface{}) error {
	changeCompartmentRequest := oci_data_safe.ChangeAuditArchiveRetrievalCompartmentRequest{}

=== ./internal/service/data_safe/data_safe_security_policy_deployment_management_resource.go ===
func DataSafeSecurityPolicyDeploymentManagementResource() *schema.Resource {
	return &schema.Resource{
func createDataSafeSecurityPolicyDeploymentManagement(d *schema.ResourceData, m interface{}) error {
	sync := &DataSafeSecurityPolicyDeploymentManagementResourceCrud{}
func readDataSafeSecurityPolicyDeploymentManagement(d *schema.ResourceData, m interface{}) error {
	sync := &DataSafeSecurityPolicyDeploymentManagementResourceCrud{}
func updateDataSafeSecurityPolicyDeploymentManagement(d *schema.ResourceData, m interface{}) error {
	sync := &DataSafeSecurityPolicyDeploymentManagementResourceCrud{}
func deleteDataSafeSecurityPolicyDeploymentManagement(d *schema.ResourceData, m interface{}) error {
	return nil
func (s *DataSafeSecurityPolicyDeploymentManagementResourceCrud) ID() string {
	return *s.Res.Id
func (s *DataSafeSecurityPolicyDeploymentManagementResourceCrud) GetIdFromDbSecurityConfigWorkReq() error {
	listWorkRequestsRequest := oci_data_safe.ListWorkRequestsRequest{SortBy: oci_data_safe.ListWorkRequestsSortByEnum("ACCEPTEDTIME"), SortOrder: oci_data_safe.ListWorkRequestsSortOrderEnum("DESC")}
func (s *DataSafeSecurityPolicyDeploymentManagementResourceCrud) GetIdFromSecurityPolicyDeploymentList() error {
	request := oci_data_safe.ListSecurityPolicyDeploymentsRequest{}
func (s *DataSafeSecurityPolicyDeploymentManagementResourceCrud) getDbSecurityConfigFromWorkRequest(workId *string, retryPolicy *oci_common.RetryPolicy,
	actionTypeEnum oci_data_safe.WorkRequestResourceActionTypeEnum, timeout time.Duration) error {
func (s *DataSafeSecurityPolicyDeploymentManagementResourceCrud) getSecurityPolicyDeploymentFromWorkRequest(workId *string, retryPolicy *oci_common.RetryPolicy,
	actionTypeEnum oci_data_safe.WorkRequestResourceActionTypeEnum, timeout time.Duration) error {
func (s *DataSafeSecurityPolicyDeploymentManagementResourceCrud) Get() error {
	request := oci_data_safe.GetSecurityPolicyDeploymentRequest{}
func (s *DataSafeSecurityPolicyDeploymentManagementResourceCrud) Update() error {
	if compartment, ok := s.D.GetOkExists("compartment_id"); ok && s.D.HasChange("compartment_id") {
func (s *DataSafeSecurityPolicyDeploymentManagementResourceCrud) SetData() error {
	if s.Res.CompartmentId != nil {
func (s *DataSafeSecurityPolicyDeploymentManagementResourceCrud) updateCompartment(compartment interface{}) error {
	changeCompartmentRequest := oci_data_safe.ChangeSecurityPolicyDeploymentCompartmentRequest{}

=== ./internal/service/data_safe/data_safe_security_assessment_comparison_data_source.go ===
func DataSafeSecurityAssessmentComparisonDataSource() *schema.Resource {
	return &schema.Resource{
func readSingularDataSafeSecurityAssessmentComparison(d *schema.ResourceData, m interface{}) error {
	sync := &DataSafeSecurityAssessmentComparisonDataSourceCrud{}
func (s *DataSafeSecurityAssessmentComparisonDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *DataSafeSecurityAssessmentComparisonDataSourceCrud) Get() error {
	request := oci_data_safe.GetSecurityAssessmentComparisonRequest{}
func (s *DataSafeSecurityAssessmentComparisonDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/data_safe/data_safe_security_assessment_finding_analytics_data_source.go ===
func DataSafeSecurityAssessmentFindingAnalyticsDataSource() *schema.Resource {
	return &schema.Resource{
func readDataSafeSecurityAssessmentFindingAnalytics(d *schema.ResourceData, m interface{}) error {
	sync := &DataSafeSecurityAssessmentFindingAnalyticsDataSourceCrud{}
func (s *DataSafeSecurityAssessmentFindingAnalyticsDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *DataSafeSecurityAssessmentFindingAnalyticsDataSourceCrud) Get() error {
	request := oci_data_safe.ListFindingAnalyticsRequest{}
func (s *DataSafeSecurityAssessmentFindingAnalyticsDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/data_safe/data_safe_security_policy_deployment_data_source.go ===
func DataSafeSecurityPolicyDeploymentDataSource() *schema.Resource {
	fieldMap := make(map[string]*schema.Schema)
func readSingularDataSafeSecurityPolicyDeployment(d *schema.ResourceData, m interface{}) error {
	sync := &DataSafeSecurityPolicyDeploymentDataSourceCrud{}
func (s *DataSafeSecurityPolicyDeploymentDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *DataSafeSecurityPolicyDeploymentDataSourceCrud) Get() error {
	request := oci_data_safe.GetSecurityPolicyDeploymentRequest{}
func (s *DataSafeSecurityPolicyDeploymentDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/data_safe/data_safe_discovery_jobs_result_data_source.go ===
func DataSafeDiscoveryJobsResultDataSource() *schema.Resource {
	fieldMap := make(map[string]*schema.Schema)
func readSingularDataSafeDiscoveryJobsResult(d *schema.ResourceData, m interface{}) error {
	sync := &DataSafeDiscoveryJobsResultDataSourceCrud{}
func (s *DataSafeDiscoveryJobsResultDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *DataSafeDiscoveryJobsResultDataSourceCrud) Get() error {
	request := oci_data_safe.GetDiscoveryJobResultRequest{}
func (s *DataSafeDiscoveryJobsResultDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/data_safe/data_safe_security_policy_deployments_data_source.go ===
func DataSafeSecurityPolicyDeploymentsDataSource() *schema.Resource {
	return &schema.Resource{
func readDataSafeSecurityPolicyDeployments(d *schema.ResourceData, m interface{}) error {
	sync := &DataSafeSecurityPolicyDeploymentsDataSourceCrud{}
func (s *DataSafeSecurityPolicyDeploymentsDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *DataSafeSecurityPolicyDeploymentsDataSourceCrud) Get() error {
	request := oci_data_safe.ListSecurityPolicyDeploymentsRequest{}
func (s *DataSafeSecurityPolicyDeploymentsDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/data_safe/data_safe_audit_events_data_source.go ===
func DataSafeAuditEventsDataSource() *schema.Resource {
	return &schema.Resource{
func readDataSafeAuditEvents(d *schema.ResourceData, m interface{}) error {
	sync := &DataSafeAuditEventsDataSourceCrud{}
func (s *DataSafeAuditEventsDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *DataSafeAuditEventsDataSourceCrud) Get() error {
	request := oci_data_safe.ListAuditEventsRequest{}
func (s *DataSafeAuditEventsDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/data_safe/data_safe_masking_policy_health_report_management_resource.go ===
func DataSafeMaskingPolicyHealthReportManagementResource() *schema.Resource {
	return &schema.Resource{
func createDataSafeMaskingPolicyHealthReportManagement(d *schema.ResourceData, m interface{}) error {
	sync := &DataSafeMaskingPolicyHealthReportManagementResourceCrud{}
func readDataSafeMaskingPolicyHealthReportManagement(d *schema.ResourceData, m interface{}) error {
	sync := &DataSafeMaskingPolicyHealthReportManagementResourceCrud{}
func updateDataSafeMaskingPolicyHealthReportManagement(d *schema.ResourceData, m interface{}) error {
	return nil
func deleteDataSafeMaskingPolicyHealthReportManagement(d *schema.ResourceData, m interface{}) error {
	sync := &DataSafeMaskingPolicyHealthReportManagementResourceCrud{}
func (s *DataSafeMaskingPolicyHealthReportManagementResourceCrud) Delete() error {
	request := oci_data_safe.DeleteMaskingPolicyHealthReportRequest{}
func (s *DataSafeMaskingPolicyHealthReportManagementResourceCrud) ID() string {
	return *s.Res.Id
func generateHealthReportWaitForWorkRequest(wId *string, entityType string, action oci_data_safe.WorkRequestResourceActionTypeEnum,
	timeout time.Duration, disableFoundRetries bool, client *oci_data_safe.DataSafeClient) (*string, error) {
func (s *DataSafeMaskingPolicyHealthReportManagementResourceCrud) getMaskingPolicyHealthReportIdFromFilter() error {
	// Masking health report will be in same compartment as of policy
func (s *DataSafeMaskingPolicyHealthReportManagementResourceCrud) GetMaskingPolicyHealthReportList() error {
	request := oci_data_safe.ListMaskingPolicyHealthReportsRequest{}
func WaitForHealthReportStatusSuccess(s *DataSafeMaskingPolicyHealthReportManagementResourceCrud, resourceId *string, operationType string, compartmentId *string) (bool, error) {
	listWorkRequestsRequest := oci_data_safe.ListWorkRequestsRequest{SortBy: oci_data_safe.ListWorkRequestsSortByEnum("ACCEPTEDTIME"), SortOrder: oci_data_safe.ListWorkRequestsSortOrderEnum("DESC")}
func (s *DataSafeMaskingPolicyHealthReportManagementResourceCrud) Get() error {
	request := oci_data_safe.GetMaskingPolicyHealthReportRequest{}
func (s *DataSafeMaskingPolicyHealthReportManagementResourceCrud) SetData() error {


=== ./internal/service/data_safe/data_safe_sensitive_data_model_sensitive_objects_data_source.go ===
func DataSafeSensitiveDataModelSensitiveObjectsDataSource() *schema.Resource {
	return &schema.Resource{
func readDataSafeSensitiveDataModelSensitiveObjects(d *schema.ResourceData, m interface{}) error {
	sync := &DataSafeSensitiveDataModelSensitiveObjectsDataSourceCrud{}
func (s *DataSafeSensitiveDataModelSensitiveObjectsDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *DataSafeSensitiveDataModelSensitiveObjectsDataSourceCrud) Get() error {
	request := oci_data_safe.ListSensitiveObjectsRequest{}
func (s *DataSafeSensitiveDataModelSensitiveObjectsDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/data_safe/data_safe_unset_security_assessment_baseline_resource.go ===
func DataSafeUnsetSecurityAssessmentBaselineResource() *schema.Resource {
	return &schema.Resource{
func createDataSafeUnsetSecurityAssessmentBaseline(d *schema.ResourceData, m interface{}) error {
	sync := &DataSafeUnsetSecurityAssessmentBaselineResourceCrud{}
func readDataSafeUnsetSecurityAssessmentBaseline(d *schema.ResourceData, m interface{}) error {
	return nil
func deleteDataSafeUnsetSecurityAssessmentBaseline(d *schema.ResourceData, m interface{}) error {
	return nil
func (s *DataSafeUnsetSecurityAssessmentBaselineResourceCrud) ID() string {
	return *s.Res.Id
func (s *DataSafeUnsetSecurityAssessmentBaselineResourceCrud) Get() error {
	request := oci_data_safe.GetSecurityAssessmentRequest{}
func (s *DataSafeUnsetSecurityAssessmentBaselineResourceCrud) Create() error {
	request := oci_data_safe.UnsetSecurityAssessmentBaselineRequest{}
func (s *DataSafeUnsetSecurityAssessmentBaselineResourceCrud) getUnsetSecurityAssessmentBaselineFromWorkRequest(workId *string, retryPolicy *oci_common.RetryPolicy,
	actionTypeEnum oci_data_safe.WorkRequestResourceActionTypeEnum, timeout time.Duration) error {
func unsetSecurityAssessmentBaselineWaitForWorkRequest(wId *string, entityType string, action oci_data_safe.WorkRequestResourceActionTypeEnum,
	timeout time.Duration, disableFoundRetries bool, client *oci_data_safe.DataSafeClient) (*string, error) {
func getErrorFromDataSafeUnsetSecurityAssessmentBaselineWorkRequest(client *oci_data_safe.DataSafeClient, workId *string, retryPolicy *oci_common.RetryPolicy, entityType string, action oci_data_safe.WorkRequestResourceActionTypeEnum) error {
	response, err := client.ListWorkRequestErrors(context.Background(),
func (s *DataSafeUnsetSecurityAssessmentBaselineResourceCrud) SetData() error {
	return nil

=== ./internal/service/data_safe/data_safe_sql_firewall_allowed_sqls_data_source.go ===
func DataSafeSqlFirewallAllowedSqlsDataSource() *schema.Resource {
	return &schema.Resource{
func readDataSafeSqlFirewallAllowedSqls(d *schema.ResourceData, m interface{}) error {
	sync := &DataSafeSqlFirewallAllowedSqlsDataSourceCrud{}
func (s *DataSafeSqlFirewallAllowedSqlsDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *DataSafeSqlFirewallAllowedSqlsDataSourceCrud) Get() error {
	request := oci_data_safe.ListSqlFirewallAllowedSqlsRequest{}
func (s *DataSafeSqlFirewallAllowedSqlsDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/data_safe/data_safe_set_security_assessment_baseline_resource.go ===
func DataSafeSetSecurityAssessmentBaselineResource() *schema.Resource {
	return &schema.Resource{
func createDataSafeSetSecurityAssessmentBaseline(d *schema.ResourceData, m interface{}) error {
	sync := &DataSafeSetSecurityAssessmentBaselineResourceCrud{}
func readDataSafeSetSecurityAssessmentBaseline(d *schema.ResourceData, m interface{}) error {
	return nil
func deleteDataSafeSetSecurityAssessmentBaseline(d *schema.ResourceData, m interface{}) error {
	return nil
func (s *DataSafeSetSecurityAssessmentBaselineResourceCrud) ID() string {
	return *s.Res.OpcRequestId
func (s *DataSafeSetSecurityAssessmentBaselineResourceCrud) Create() error {
	request := oci_data_safe.SetSecurityAssessmentBaselineRequest{}
func (s *DataSafeSetSecurityAssessmentBaselineResourceCrud) Get() error {
	request := oci_data_safe.SetSecurityAssessmentBaselineRequest{}
func (s *DataSafeSetSecurityAssessmentBaselineResourceCrud) getSetSecurityAssessmentBaselineFromWorkRequest(workId *string, retryPolicy *oci_common.RetryPolicy,
	actionTypeEnum oci_data_safe.WorkRequestResourceActionTypeEnum, timeout time.Duration) error {
func setSecurityAssessmentBaselineWaitForWorkRequest(wId *string, entityType string, action oci_data_safe.WorkRequestResourceActionTypeEnum,
	timeout time.Duration, disableFoundRetries bool, client *oci_data_safe.DataSafeClient) (*string, error) {
func getErrorFromDataSafeSetSecurityAssessmentBaselineWorkRequest(client *oci_data_safe.DataSafeClient, workId *string, retryPolicy *oci_common.RetryPolicy, entityType string, action oci_data_safe.WorkRequestResourceActionTypeEnum) error {
	response, err := client.ListWorkRequestErrors(context.Background(),
func (s *DataSafeSetSecurityAssessmentBaselineResourceCrud) SetData() error {
	return nil

=== ./internal/service/data_safe/data_safe_security_assessment_data_source.go ===
func DataSafeSecurityAssessmentDataSource() *schema.Resource {
	fieldMap := make(map[string]*schema.Schema)
func readSingularDataSafeSecurityAssessment(d *schema.ResourceData, m interface{}) error {
	sync := &DataSafeSecurityAssessmentDataSourceCrud{}
func (s *DataSafeSecurityAssessmentDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *DataSafeSecurityAssessmentDataSourceCrud) Get() error {
	request := oci_data_safe.GetSecurityAssessmentRequest{}
func (s *DataSafeSecurityAssessmentDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/data_safe/data_safe_security_assessment_findings_change_audit_logs_data_source.go ===
func DataSafeSecurityAssessmentFindingsChangeAuditLogsDataSource() *schema.Resource {
	return &schema.Resource{
func readDataSafeSecurityAssessmentFindingsChangeAuditLogs(d *schema.ResourceData, m interface{}) error {
	sync := &DataSafeSecurityAssessmentFindingsChangeAuditLogsDataSourceCrud{}
func (s *DataSafeSecurityAssessmentFindingsChangeAuditLogsDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *DataSafeSecurityAssessmentFindingsChangeAuditLogsDataSourceCrud) Get() error {
	request := oci_data_safe.ListFindingsChangeAuditLogsRequest{}
func (s *DataSafeSecurityAssessmentFindingsChangeAuditLogsDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/data_safe/data_safe_user_assessment_resource.go ===
func DataSafeUserAssessmentResource() *schema.Resource {
	return &schema.Resource{
func createDataSafeUserAssessment(d *schema.ResourceData, m interface{}) error {
	sync := &DataSafeUserAssessmentResourceCrud{}
func readDataSafeUserAssessment(d *schema.ResourceData, m interface{}) error {
	sync := &DataSafeUserAssessmentResourceCrud{}
func updateDataSafeUserAssessment(d *schema.ResourceData, m interface{}) error {
	sync := &DataSafeUserAssessmentResourceCrud{}
func deleteDataSafeUserAssessment(d *schema.ResourceData, m interface{}) error {
	sync := &DataSafeUserAssessmentResourceCrud{}
func (s *DataSafeUserAssessmentResourceCrud) ID() string {
	return *s.Res.Id
func (s *DataSafeUserAssessmentResourceCrud) CreatedPending() []string {
	return []string{
func (s *DataSafeUserAssessmentResourceCrud) CreatedTarget() []string {
	return []string{
func (s *DataSafeUserAssessmentResourceCrud) DeletedPending() []string {
	return []string{
func (s *DataSafeUserAssessmentResourceCrud) DeletedTarget() []string {
	return []string{
func (s *DataSafeUserAssessmentResourceCrud) Create() error {
	request := oci_data_safe.CreateUserAssessmentRequest{}
func (s *DataSafeUserAssessmentResourceCrud) getUserAssessmentFromWorkRequest(workId *string, retryPolicy *oci_common.RetryPolicy,
	actionTypeEnum oci_data_safe.WorkRequestResourceActionTypeEnum, timeout time.Duration) error {
func userAssessmentWaitForWorkRequest(wId *string, entityType string, action oci_data_safe.WorkRequestResourceActionTypeEnum,
	timeout time.Duration, disableFoundRetries bool, client *oci_data_safe.DataSafeClient) (*string, error) {
func getErrorFromDataSafeUserAssessmentWorkRequest(client *oci_data_safe.DataSafeClient, workId *string, retryPolicy *oci_common.RetryPolicy, entityType string, action oci_data_safe.WorkRequestResourceActionTypeEnum) error {
	response, err := client.ListWorkRequestErrors(context.Background(),
func (s *DataSafeUserAssessmentResourceCrud) Get() error {
	request := oci_data_safe.GetUserAssessmentRequest{}
func (s *DataSafeUserAssessmentResourceCrud) Update() error {
	if compartment, ok := s.D.GetOkExists("compartment_id"); ok && s.D.HasChange("compartment_id") {
func (s *DataSafeUserAssessmentResourceCrud) Delete() error {
	request := oci_data_safe.DeleteUserAssessmentRequest{}
func (s *DataSafeUserAssessmentResourceCrud) SetData() error {
	if s.Res.CompartmentId != nil {
func (s *DataSafeUserAssessmentResourceCrud) updateCompartment(compartment interface{}) error {
	changeCompartmentRequest := oci_data_safe.ChangeUserAssessmentCompartmentRequest{}

=== ./internal/service/data_safe/data_safe_sensitive_data_models_sensitive_column_data_source.go ===
func DataSafeSensitiveDataModelsSensitiveColumnDataSource() *schema.Resource {
	fieldMap := make(map[string]*schema.Schema)
func readSingularDataSafeSensitiveDataModelsSensitiveColumn(d *schema.ResourceData, m interface{}) error {
	sync := &DataSafeSensitiveDataModelsSensitiveColumnDataSourceCrud{}
func (s *DataSafeSensitiveDataModelsSensitiveColumnDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *DataSafeSensitiveDataModelsSensitiveColumnDataSourceCrud) Get() error {
	request := oci_data_safe.GetSensitiveColumnRequest{}
func (s *DataSafeSensitiveDataModelsSensitiveColumnDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/data_safe/data_safe_data_safe_private_endpoint_data_source.go ===
func DataSafeDataSafePrivateEndpointDataSource() *schema.Resource {
	fieldMap := make(map[string]*schema.Schema)
func readSingularDataSafeDataSafePrivateEndpoint(d *schema.ResourceData, m interface{}) error {
	sync := &DataSafeDataSafePrivateEndpointDataSourceCrud{}
func (s *DataSafeDataSafePrivateEndpointDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *DataSafeDataSafePrivateEndpointDataSourceCrud) Get() error {
	request := oci_data_safe.GetDataSafePrivateEndpointRequest{}
func (s *DataSafeDataSafePrivateEndpointDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/data_safe/data_safe_masking_policy_resource.go ===
func DataSafeMaskingPolicyResource() *schema.Resource {
	return &schema.Resource{
func createDataSafeMaskingPolicy(d *schema.ResourceData, m interface{}) error {
	sync := &DataSafeMaskingPolicyResourceCrud{}
func readDataSafeMaskingPolicy(d *schema.ResourceData, m interface{}) error {
	sync := &DataSafeMaskingPolicyResourceCrud{}
func updateDataSafeMaskingPolicy(d *schema.ResourceData, m interface{}) error {
	sync := &DataSafeMaskingPolicyResourceCrud{}
func deleteDataSafeMaskingPolicy(d *schema.ResourceData, m interface{}) error {
	sync := &DataSafeMaskingPolicyResourceCrud{}
func (s *DataSafeMaskingPolicyResourceCrud) ID() string {
	return *s.Res.Id
func (s *DataSafeMaskingPolicyResourceCrud) CreatedPending() []string {
	return []string{
func (s *DataSafeMaskingPolicyResourceCrud) CreatedTarget() []string {
	return []string{
func (s *DataSafeMaskingPolicyResourceCrud) DeletedPending() []string {
	return []string{
func (s *DataSafeMaskingPolicyResourceCrud) DeletedTarget() []string {
	return []string{
func (s *DataSafeMaskingPolicyResourceCrud) Create() error {
	request := oci_data_safe.CreateMaskingPolicyRequest{}
func (s *DataSafeMaskingPolicyResourceCrud) getMaskingPolicyFromWorkRequest(workId *string, retryPolicy *oci_common.RetryPolicy,
	actionTypeEnum oci_data_safe.WorkRequestResourceActionTypeEnum, timeout time.Duration) error {
func maskingPolicyWaitForWorkRequest(wId *string, entityType string, action oci_data_safe.WorkRequestResourceActionTypeEnum,
	timeout time.Duration, disableFoundRetries bool, client *oci_data_safe.DataSafeClient) (*string, error) {
func getErrorFromDataSafeMaskingPolicyWorkRequest(client *oci_data_safe.DataSafeClient, workId *string, retryPolicy *oci_common.RetryPolicy, entityType string, action oci_data_safe.WorkRequestResourceActionTypeEnum) error {
	response, err := client.ListWorkRequestErrors(context.Background(),
func (s *DataSafeMaskingPolicyResourceCrud) Get() error {
	request := oci_data_safe.GetMaskingPolicyRequest{}
func (s *DataSafeMaskingPolicyResourceCrud) Update() error {
	if compartment, ok := s.D.GetOkExists("compartment_id"); ok && s.D.HasChange("compartment_id") {
func (s *DataSafeMaskingPolicyResourceCrud) Delete() error {
	request := oci_data_safe.DeleteMaskingPolicyRequest{}
func (s *DataSafeMaskingPolicyResourceCrud) SetData() error {
	if s.Res.ColumnSource != nil {
func (s *DataSafeMaskingPolicyResourceCrud) AddMaskingColumnsFromSdm() error {
	return nil
func (s *DataSafeMaskingPolicyResourceCrud) GenerateHealthReport() error {
	request := oci_data_safe.GenerateHealthReportRequest{}
func (s *DataSafeMaskingPolicyResourceCrud) mapToCreateColumnSourceDetails(fieldKeyFormat string) (oci_data_safe.CreateColumnSourceDetails, error) {
	var baseObject oci_data_safe.CreateColumnSourceDetails
func (s *DataSafeMaskingPolicyResourceCrud) mapToUpdateColumnSourceDetails(fieldKeyFormat string) (oci_data_safe.CreateColumnSourceDetails, error) {
	var baseObject oci_data_safe.CreateColumnSourceDetails
func (s *DataSafeMaskingPolicyResourceCrud) updateCompartment(compartment interface{}) error {
	changeCompartmentRequest := oci_data_safe.ChangeMaskingPolicyCompartmentRequest{}

=== ./internal/service/data_safe/data_safe_security_policy_management_resource.go ===
func DataSafeSecurityPolicyManagementResource() *schema.Resource {
	return &schema.Resource{
func createDataSafeSecurityPolicyManagement(d *schema.ResourceData, m interface{}) error {
	sync := &DataSafeSecurityPolicyManagementResourceCrud{}
func readDataSafeSecurityPolicyManagement(d *schema.ResourceData, m interface{}) error {
	sync := &DataSafeSecurityPolicyResourceCrud{}
func updateDataSafeSecurityPolicyManagement(d *schema.ResourceData, m interface{}) error {
	sync := &DataSafeSecurityPolicyResourceCrud{}
func deleteDataSafeSecurityPolicyManagement(d *schema.ResourceData, m interface{}) error {
	return nil
func (s *DataSafeSecurityPolicyManagementResourceCrud) ID() string {
	return *s.Res.Id
func (s *DataSafeSecurityPolicyManagementResourceCrud) GetIdFromDbSecurityConfigWorkReq() error {
	listWorkRequestsRequest := oci_data_safe.ListWorkRequestsRequest{SortBy: oci_data_safe.ListWorkRequestsSortByEnum("ACCEPTEDTIME"), SortOrder: oci_data_safe.ListWorkRequestsSortOrderEnum("DESC")}
func (s *DataSafeSecurityPolicyManagementResourceCrud) GetIdFromSecurityPolicyDeploymentList() error {
	deploymentsRequest := oci_data_safe.ListSecurityPolicyDeploymentsRequest{}
func (s *DataSafeSecurityPolicyManagementResourceCrud) getDbSecurityConfigFromWorkRequest(workId *string, retryPolicy *oci_common.RetryPolicy,
	actionTypeEnum oci_data_safe.WorkRequestResourceActionTypeEnum, timeout time.Duration) error {
func (s *DataSafeSecurityPolicyManagementResourceCrud) getSecurityPolicyFromWorkRequest(workId *string, retryPolicy *oci_common.RetryPolicy,
	actionTypeEnum oci_data_safe.WorkRequestResourceActionTypeEnum, timeout time.Duration) error {
func (s *DataSafeSecurityPolicyManagementResourceCrud) Get() error {
	request := oci_data_safe.GetSecurityPolicyRequest{}
func (s *DataSafeSecurityPolicyManagementResourceCrud) Update() error {
	if compartment, ok := s.D.GetOkExists("compartment_id"); ok && s.D.HasChange("compartment_id") {
func (s *DataSafeSecurityPolicyManagementResourceCrud) SetData() error {
	if s.Res.CompartmentId != nil {
func (s *DataSafeSecurityPolicyManagementResourceCrud) updateCompartment(compartment interface{}) error {
	changeCompartmentRequest := oci_data_safe.ChangeSecurityPolicyCompartmentRequest{}

=== ./internal/service/data_safe/data_safe_on_prem_connector_data_source.go ===
func DataSafeOnPremConnectorDataSource() *schema.Resource {
	fieldMap := make(map[string]*schema.Schema)
func readSingularDataSafeOnPremConnector(d *schema.ResourceData, m interface{}) error {
	sync := &DataSafeOnPremConnectorDataSourceCrud{}
func (s *DataSafeOnPremConnectorDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *DataSafeOnPremConnectorDataSourceCrud) Get() error {
	request := oci_data_safe.GetOnPremConnectorRequest{}
func (s *DataSafeOnPremConnectorDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/data_safe/data_safe_masking_policies_masking_column_data_source.go ===
func DataSafeMaskingPoliciesMaskingColumnDataSource() *schema.Resource {
	fieldMap := make(map[string]*schema.Schema)
func readSingularDataSafeMaskingPoliciesMaskingColumn(d *schema.ResourceData, m interface{}) error {
	sync := &DataSafeMaskingPoliciesMaskingColumnDataSourceCrud{}
func (s *DataSafeMaskingPoliciesMaskingColumnDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *DataSafeMaskingPoliciesMaskingColumnDataSourceCrud) Get() error {
	request := oci_data_safe.GetMaskingColumnRequest{}
func (s *DataSafeMaskingPoliciesMaskingColumnDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/data_safe/data_safe_mask_data_resource.go ===
func DataSafeMaskDataResource() *schema.Resource {
	return &schema.Resource{
func createDataSafeMaskData(d *schema.ResourceData, m interface{}) error {
	sync := &DataSafeMaskDataResourceCrud{}
func readDataSafeMaskData(d *schema.ResourceData, m interface{}) error {
	return nil
func deleteDataSafeMaskData(d *schema.ResourceData, m interface{}) error {
	return nil
func (s *DataSafeMaskDataResourceCrud) ID() string {
	return *s.Res.OpcRequestId
func (s *DataSafeMaskDataResourceCrud) Get() error {
	request := oci_data_safe.GetMaskingPolicyRequest{}
func (s *DataSafeMaskDataResourceCrud) Create() error {
	request := oci_data_safe.MaskDataRequest{}
func (s *DataSafeMaskDataResourceCrud) getMaskDataFromWorkRequest(workId *string, retryPolicy *oci_common.RetryPolicy,
	actionTypeEnum oci_data_safe.WorkRequestResourceActionTypeEnum, timeout time.Duration) error {
func maskDataWaitForWorkRequest(wId *string, entityType string, action oci_data_safe.WorkRequestResourceActionTypeEnum,
	timeout time.Duration, disableFoundRetries bool, client *oci_data_safe.DataSafeClient) (*string, error) {
func getErrorFromDataSafeMaskDataWorkRequest(client *oci_data_safe.DataSafeClient, workId *string, retryPolicy *oci_common.RetryPolicy, entityType string, action oci_data_safe.WorkRequestResourceActionTypeEnum) error {
	response, err := client.ListWorkRequestErrors(context.Background(),
func (s *DataSafeMaskDataResourceCrud) SetData() error {
	return nil

=== ./internal/service/data_safe/data_safe_calculate_audit_volume_collected_resource.go ===
func DataSafeCalculateAuditVolumeCollectedResource() *schema.Resource {
	return &schema.Resource{
func createDataSafeCalculateAuditVolumeCollected(d *schema.ResourceData, m interface{}) error {
	sync := &DataSafeCalculateAuditVolumeCollectedResourceCrud{}
func readDataSafeCalculateAuditVolumeCollected(d *schema.ResourceData, m interface{}) error {
	return nil
func deleteDataSafeCalculateAuditVolumeCollected(d *schema.ResourceData, m interface{}) error {
	return nil
func (s *DataSafeCalculateAuditVolumeCollectedResourceCrud) ID() string {
	return *s.Res.OpcRequestId
func (s *DataSafeCalculateAuditVolumeCollectedResourceCrud) Create() error {
	request := oci_data_safe.CalculateAuditVolumeCollectedRequest{}
func (s *DataSafeCalculateAuditVolumeCollectedResourceCrud) getCalculateAuditVolumeCollectedFromWorkRequest(workId *string, retryPolicy *oci_common.RetryPolicy,
	actionTypeEnum oci_data_safe.WorkRequestResourceActionTypeEnum, timeout time.Duration) error {
func (s *DataSafeCalculateAuditVolumeCollectedResourceCrud) Get(workId *string) error {
	request := oci_data_safe.ListCollectedAuditVolumesRequest{}
func calculateAuditVolumeCollectedWaitForWorkRequest(wId *string, entityType string, action oci_data_safe.WorkRequestResourceActionTypeEnum,
	timeout time.Duration, disableFoundRetries bool, client *oci_data_safe.DataSafeClient) (*string, error) {
func getErrorFromDataSafeCalculateAuditVolumeCollectedWorkRequest(client *oci_data_safe.DataSafeClient, workId *string, retryPolicy *oci_common.RetryPolicy, entityType string, action oci_data_safe.WorkRequestResourceActionTypeEnum) error {
	response, err := client.ListWorkRequestErrors(context.Background(),
func (s *DataSafeCalculateAuditVolumeCollectedResourceCrud) SetData() error {
	return nil

=== ./internal/service/data_safe/data_safe_on_prem_connectors_data_source.go ===
func DataSafeOnPremConnectorsDataSource() *schema.Resource {
	return &schema.Resource{
func readDataSafeOnPremConnectors(d *schema.ResourceData, m interface{}) error {
	sync := &DataSafeOnPremConnectorsDataSourceCrud{}
func (s *DataSafeOnPremConnectorsDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *DataSafeOnPremConnectorsDataSourceCrud) Get() error {
	request := oci_data_safe.ListOnPremConnectorsRequest{}
func (s *DataSafeOnPremConnectorsDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/data_safe/data_safe_sql_collection_log_insights_data_source.go ===
func DataSafeSqlCollectionLogInsightsDataSource() *schema.Resource {
	return &schema.Resource{
func readDataSafeSqlCollectionLogInsights(d *schema.ResourceData, m interface{}) error {
	sync := &DataSafeSqlCollectionLogInsightsDataSourceCrud{}
func (s *DataSafeSqlCollectionLogInsightsDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *DataSafeSqlCollectionLogInsightsDataSourceCrud) Get() error {
	request := oci_data_safe.ListSqlCollectionLogInsightsRequest{}
func (s *DataSafeSqlCollectionLogInsightsDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/data_safe/data_safe_alert_analytic_data_source.go ===
func DataSafeAlertAnalyticDataSource() *schema.Resource {
	return &schema.Resource{
func readSingularDataSafeAlertAnalytic(d *schema.ResourceData, m interface{}) error {
	sync := &DataSafeAlertAnalyticDataSourceCrud{}
func (s *DataSafeAlertAnalyticDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *DataSafeAlertAnalyticDataSourceCrud) Get() error {
	request := oci_data_safe.ListAlertAnalyticsRequest{}
func (s *DataSafeAlertAnalyticDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/data_safe/data_safe_report_definition_resource.go ===
func DataSafeReportDefinitionResource() *schema.Resource {
	return &schema.Resource{
func createDataSafeReportDefinition(d *schema.ResourceData, m interface{}) error {
	sync := &DataSafeReportDefinitionResourceCrud{}
func readDataSafeReportDefinition(d *schema.ResourceData, m interface{}) error {
	sync := &DataSafeReportDefinitionResourceCrud{}
func updateDataSafeReportDefinition(d *schema.ResourceData, m interface{}) error {
	sync := &DataSafeReportDefinitionResourceCrud{}
func deleteDataSafeReportDefinition(d *schema.ResourceData, m interface{}) error {
	sync := &DataSafeReportDefinitionResourceCrud{}
func (s *DataSafeReportDefinitionResourceCrud) ID() string {
	return *s.Res.Id
func (s *DataSafeReportDefinitionResourceCrud) CreatedPending() []string {
	return []string{
func (s *DataSafeReportDefinitionResourceCrud) CreatedTarget() []string {
	return []string{
func (s *DataSafeReportDefinitionResourceCrud) DeletedPending() []string {
	return []string{
func (s *DataSafeReportDefinitionResourceCrud) DeletedTarget() []string {
	return []string{
func (s *DataSafeReportDefinitionResourceCrud) Create() error {
	request := oci_data_safe.CreateReportDefinitionRequest{}
func (s *DataSafeReportDefinitionResourceCrud) getReportDefinitionFromWorkRequest(workId *string, retryPolicy *oci_common.RetryPolicy,
	actionTypeEnum oci_data_safe.WorkRequestResourceActionTypeEnum, timeout time.Duration) error {
func reportDefinitionWaitForWorkRequest(wId *string, entityType string, action oci_data_safe.WorkRequestResourceActionTypeEnum,
	timeout time.Duration, disableFoundRetries bool, client *oci_data_safe.DataSafeClient) (*string, error) {
func getErrorFromDataSafeReportDefinitionWorkRequest(client *oci_data_safe.DataSafeClient, workId *string, retryPolicy *oci_common.RetryPolicy, entityType string, action oci_data_safe.WorkRequestResourceActionTypeEnum) error {
	response, err := client.ListWorkRequestErrors(context.Background(),
func (s *DataSafeReportDefinitionResourceCrud) Get() error {
	request := oci_data_safe.GetReportDefinitionRequest{}
func (s *DataSafeReportDefinitionResourceCrud) Update() error {
	if compartment, ok := s.D.GetOkExists("compartment_id"); ok && s.D.HasChange("compartment_id") {
func (s *DataSafeReportDefinitionResourceCrud) Delete() error {
	request := oci_data_safe.DeleteReportDefinitionRequest{}
func (s *DataSafeReportDefinitionResourceCrud) SetData() error {
	s.D.Set("category", s.Res.Category)
func (s *DataSafeReportDefinitionResourceCrud) mapTocolumn(fieldKeyFormat string) (oci_data_safe.Column, error) {
	result := oci_data_safe.Column{}
func (s *DataSafeReportDefinitionResourceCrud) mapTocolumnFilter(fieldKeyFormat string) (oci_data_safe.ColumnFilter, error) {
	result := oci_data_safe.ColumnFilter{}
func (s *DataSafeReportDefinitionResourceCrud) mapTocolumnSorting(fieldKeyFormat string) (oci_data_safe.ColumnSorting, error) {
	result := oci_data_safe.ColumnSorting{}
func (s *DataSafeReportDefinitionResourceCrud) mapTosummary(fieldKeyFormat string) (oci_data_safe.Summary, error) {
	result := oci_data_safe.Summary{}
func (s *DataSafeReportDefinitionResourceCrud) updateCompartment(compartment interface{}) error {
	changeCompartmentRequest := oci_data_safe.ChangeReportDefinitionCompartmentRequest{}

=== ./internal/service/data_safe/data_safe_set_user_assessment_baseline_resource.go ===
func DataSafeSetUserAssessmentBaselineResource() *schema.Resource {
	return &schema.Resource{
func createDataSafeSetUserAssessmentBaseline(d *schema.ResourceData, m interface{}) error {
	sync := &DataSafeSetUserAssessmentBaselineResourceCrud{}
func readDataSafeSetUserAssessmentBaseline(d *schema.ResourceData, m interface{}) error {
	return nil
func deleteDataSafeSetUserAssessmentBaseline(d *schema.ResourceData, m interface{}) error {
	return nil
func (s *DataSafeSetUserAssessmentBaselineResourceCrud) ID() string {
	return *s.Res.OpcRequestId
func (s *DataSafeSetUserAssessmentBaselineResourceCrud) Get() error {
	request := oci_data_safe.SetUserAssessmentBaselineRequest{}
func (s *DataSafeSetUserAssessmentBaselineResourceCrud) Create() error {
	request := oci_data_safe.SetUserAssessmentBaselineRequest{}
func (s *DataSafeSetUserAssessmentBaselineResourceCrud) getSetUserAssessmentBaselineFromWorkRequest(workId *string, retryPolicy *oci_common.RetryPolicy,
	actionTypeEnum oci_data_safe.WorkRequestResourceActionTypeEnum, timeout time.Duration) error {
func setUserAssessmentBaselineWaitForWorkRequest(wId *string, entityType string, action oci_data_safe.WorkRequestResourceActionTypeEnum,
	timeout time.Duration, disableFoundRetries bool, client *oci_data_safe.DataSafeClient) (*string, error) {
func getErrorFromDataSafeSetUserAssessmentBaselineWorkRequest(client *oci_data_safe.DataSafeClient, workId *string, retryPolicy *oci_common.RetryPolicy, entityType string, action oci_data_safe.WorkRequestResourceActionTypeEnum) error {
	response, err := client.ListWorkRequestErrors(context.Background(),
func (s *DataSafeSetUserAssessmentBaselineResourceCrud) SetData() error {
	return nil

=== ./internal/service/data_safe/data_safe_sensitive_data_model_sensitive_schemas_data_source.go ===
func DataSafeSensitiveDataModelSensitiveSchemasDataSource() *schema.Resource {
	return &schema.Resource{
func readDataSafeSensitiveDataModelSensitiveSchemas(d *schema.ResourceData, m interface{}) error {
	sync := &DataSafeSensitiveDataModelSensitiveSchemasDataSourceCrud{}
func (s *DataSafeSensitiveDataModelSensitiveSchemasDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *DataSafeSensitiveDataModelSensitiveSchemasDataSourceCrud) Get() error {
	request := oci_data_safe.ListSensitiveSchemasRequest{}
func (s *DataSafeSensitiveDataModelSensitiveSchemasDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/data_safe/data_safe_calculate_audit_volume_available_resource.go ===
func DataSafeCalculateAuditVolumeAvailableResource() *schema.Resource {
	return &schema.Resource{
func createDataSafeCalculateAuditVolumeAvailable(d *schema.ResourceData, m interface{}) error {
	sync := &DataSafeCalculateAuditVolumeAvailableResourceCrud{}
func readDataSafeCalculateAuditVolumeAvailable(d *schema.ResourceData, m interface{}) error {
	return nil
func deleteDataSafeCalculateAuditVolumeAvailable(d *schema.ResourceData, m interface{}) error {
	return nil
func (s *DataSafeCalculateAuditVolumeAvailableResourceCrud) ID() string {
	return *s.Res.OpcRequestId
func (s *DataSafeCalculateAuditVolumeAvailableResourceCrud) Create() error {
	request := oci_data_safe.CalculateAuditVolumeAvailableRequest{}
func (s *DataSafeCalculateAuditVolumeAvailableResourceCrud) getCalculateAuditVolumeAvailableFromWorkRequest(workId *string, retryPolicy *oci_common.RetryPolicy,
	actionTypeEnum oci_data_safe.WorkRequestResourceActionTypeEnum, timeout time.Duration) error {
func (s *DataSafeCalculateAuditVolumeAvailableResourceCrud) GetAvailableAuditVolumes(workId *string) error {
	request := oci_data_safe.ListAvailableAuditVolumesRequest{}
func calculateAuditVolumeAvailableWaitForWorkRequest(wId *string, entityType string, action oci_data_safe.WorkRequestResourceActionTypeEnum,
	timeout time.Duration, disableFoundRetries bool, client *oci_data_safe.DataSafeClient) (*string, error) {
func getErrorFromDataSafeCalculateAuditVolumeAvailableWorkRequest(client *oci_data_safe.DataSafeClient, workId *string, retryPolicy *oci_common.RetryPolicy, entityType string, action oci_data_safe.WorkRequestResourceActionTypeEnum) error {
	response, err := client.ListWorkRequestErrors(context.Background(),
func (s *DataSafeCalculateAuditVolumeAvailableResourceCrud) SetData() error {
	return nil

=== ./internal/service/data_safe/data_safe_discovery_job_data_source.go ===
func DataSafeDiscoveryJobDataSource() *schema.Resource {
	fieldMap := make(map[string]*schema.Schema)
func readSingularDataSafeDiscoveryJob(d *schema.ResourceData, m interface{}) error {
	sync := &DataSafeDiscoveryJobDataSourceCrud{}
func (s *DataSafeDiscoveryJobDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *DataSafeDiscoveryJobDataSourceCrud) Get() error {
	request := oci_data_safe.GetDiscoveryJobRequest{}
func (s *DataSafeDiscoveryJobDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/data_safe/data_safe_report_definition_data_source.go ===
func DataSafeReportDefinitionDataSource() *schema.Resource {
	fieldMap := make(map[string]*schema.Schema)
func readSingularDataSafeReportDefinition(d *schema.ResourceData, m interface{}) error {
	sync := &DataSafeReportDefinitionDataSourceCrud{}
func (s *DataSafeReportDefinitionDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *DataSafeReportDefinitionDataSourceCrud) Get() error {
	request := oci_data_safe.GetReportDefinitionRequest{}
func (s *DataSafeReportDefinitionDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/data_safe/data_safe_alert_policy_rule_resource.go ===
func DataSafeAlertPolicyRuleResource() *schema.Resource {
	return &schema.Resource{
func createDataSafeAlertPolicyRule(d *schema.ResourceData, m interface{}) error {
	sync := &DataSafeAlertPolicyRuleResourceCrud{}
func readDataSafeAlertPolicyRule(d *schema.ResourceData, m interface{}) error {
	sync := &DataSafeAlertPolicyRuleResourceCrud{}
func updateDataSafeAlertPolicyRule(d *schema.ResourceData, m interface{}) error {
	sync := &DataSafeAlertPolicyRuleResourceCrud{}
func deleteDataSafeAlertPolicyRule(d *schema.ResourceData, m interface{}) error {
	sync := &DataSafeAlertPolicyRuleResourceCrud{}
func (s *DataSafeAlertPolicyRuleResourceCrud) ID() string {
	rule := *s.Res
func (s *DataSafeAlertPolicyRuleResourceCrud) CreatedPending() []string {
	return []string{
func (s *DataSafeAlertPolicyRuleResourceCrud) CreatedTarget() []string {
	return []string{
func (s *DataSafeAlertPolicyRuleResourceCrud) DeletedPending() []string {
	return []string{
func (s *DataSafeAlertPolicyRuleResourceCrud) DeletedTarget() []string {
	return []string{}
func (s *DataSafeAlertPolicyRuleResourceCrud) Create() error {
	request := oci_data_safe.CreateAlertPolicyRuleRequest{}
func (s *DataSafeAlertPolicyRuleResourceCrud) getAlertPolicyRuleFromWorkRequest(workId *string, retryPolicy *oci_common.RetryPolicy,
	actionTypeEnum oci_data_safe.WorkRequestResourceActionTypeEnum, timeout time.Duration) error {
func alertPolicyRuleWaitForWorkRequest(wId *string, entityType string, action oci_data_safe.WorkRequestResourceActionTypeEnum,
	timeout time.Duration, disableFoundRetries bool, client *oci_data_safe.DataSafeClient) (*string, error) {
func getErrorFromDataSafeAlertPolicyRuleWorkRequest(client *oci_data_safe.DataSafeClient, workId *string, retryPolicy *oci_common.RetryPolicy, entityType string, action oci_data_safe.WorkRequestResourceActionTypeEnum) error {
	response, err := client.ListWorkRequestErrors(context.Background(),
func (s *DataSafeAlertPolicyRuleResourceCrud) Get() error {
	request := oci_data_safe.GetAlertPolicyRuleRequest{}
func (s *DataSafeAlertPolicyRuleResourceCrud) Update() error {
	request := oci_data_safe.UpdateAlertPolicyRuleRequest{}
func (s *DataSafeAlertPolicyRuleResourceCrud) Delete() error {
	request := oci_data_safe.DeleteAlertPolicyRuleRequest{}
func (s *DataSafeAlertPolicyRuleResourceCrud) SetData() error {


=== ./internal/service/data_safe/data_safe_sql_firewall_allowed_sql_analytics_data_source.go ===
func DataSafeSqlFirewallAllowedSqlAnalyticsDataSource() *schema.Resource {
	return &schema.Resource{
func readDataSafeSqlFirewallAllowedSqlAnalytics(d *schema.ResourceData, m interface{}) error {
	sync := &DataSafeSqlFirewallAllowedSqlAnalyticsDataSourceCrud{}
func (s *DataSafeSqlFirewallAllowedSqlAnalyticsDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *DataSafeSqlFirewallAllowedSqlAnalyticsDataSourceCrud) Get() error {
	request := oci_data_safe.ListSqlFirewallAllowedSqlAnalyticsRequest{}
func (s *DataSafeSqlFirewallAllowedSqlAnalyticsDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/data_safe/data_safe_discovery_jobs_result_resource.go ===
func DataSafeDiscoveryJobsResultResource() *schema.Resource {
	return &schema.Resource{
func createDataSafeDiscoveryJobsResult(d *schema.ResourceData, m interface{}) error {
	sync := &DataSafeDiscoveryJobsResultResourceCrud{}
func readDataSafeDiscoveryJobsResult(d *schema.ResourceData, m interface{}) error {
	sync := &DataSafeDiscoveryJobsResultResourceCrud{}
func deleteDataSafeDiscoveryJobsResult(d *schema.ResourceData, m interface{}) error {
	sync := &DataSafeDiscoveryJobsResultResourceCrud{}
func (s *DataSafeDiscoveryJobsResultResourceCrud) ID() string {
	return s.D.Id()
func (s *DataSafeDiscoveryJobsResultResourceCrud) Create() error {
	request := oci_data_safe.ListDiscoveryJobResultsRequest{}
func (s *DataSafeDiscoveryJobsResultResourceCrud) Get() error {
	request := oci_data_safe.GetDiscoveryJobResultRequest{}
func (s *DataSafeDiscoveryJobsResultResourceCrud) Delete() error {
	request := oci_data_safe.DeleteDiscoveryJobResultRequest{}
func (s *DataSafeDiscoveryJobsResultResourceCrud) SetData() error {


=== ./internal/service/data_safe/data_safe_audit_archive_retrievals_data_source.go ===
func DataSafeAuditArchiveRetrievalsDataSource() *schema.Resource {
	return &schema.Resource{
func readDataSafeAuditArchiveRetrievals(d *schema.ResourceData, m interface{}) error {
	sync := &DataSafeAuditArchiveRetrievalsDataSourceCrud{}
func (s *DataSafeAuditArchiveRetrievalsDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *DataSafeAuditArchiveRetrievalsDataSourceCrud) Get() error {
	request := oci_data_safe.ListAuditArchiveRetrievalsRequest{}
func (s *DataSafeAuditArchiveRetrievalsDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/data_safe/data_safe_reports_data_source.go ===
func DataSafeReportsDataSource() *schema.Resource {
	return &schema.Resource{
func readDataSafeReports(d *schema.ResourceData, m interface{}) error {
	sync := &DataSafeReportsDataSourceCrud{}
func (s *DataSafeReportsDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *DataSafeReportsDataSourceCrud) Get() error {
	request := oci_data_safe.ListReportsRequest{}
func (s *DataSafeReportsDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/data_safe/data_safe_alert_policy_rule_data_source.go ===
func DataSafeAlertPolicyRuleDataSource() *schema.Resource {
	fieldMap := make(map[string]*schema.Schema)
func readSingularDataSafeAlertPolicyRule(d *schema.ResourceData, m interface{}) error {
	sync := &DataSafeAlertPolicyRuleDataSourceCrud{}
func (s *DataSafeAlertPolicyRuleDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *DataSafeAlertPolicyRuleDataSourceCrud) Get() error {
	request := oci_data_safe.GetAlertPolicyRuleRequest{}
func (s *DataSafeAlertPolicyRuleDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/data_safe/data_safe_user_assessment_users_data_source.go ===
func DataSafeUserAssessmentUsersDataSource() *schema.Resource {
	return &schema.Resource{
func readDataSafeUserAssessmentUsers(d *schema.ResourceData, m interface{}) error {
	sync := &DataSafeUserAssessmentUsersDataSourceCrud{}
func (s *DataSafeUserAssessmentUsersDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *DataSafeUserAssessmentUsersDataSourceCrud) Get() error {
	request := oci_data_safe.ListUsersRequest{}
func (s *DataSafeUserAssessmentUsersDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/data_safe/data_safe_discovery_analytics_data_source.go ===
func DataSafeDiscoveryAnalyticsDataSource() *schema.Resource {
	return &schema.Resource{
func readDataSafeDiscoveryAnalytics(d *schema.ResourceData, m interface{}) error {
	sync := &DataSafeDiscoveryAnalyticsDataSourceCrud{}
func (s *DataSafeDiscoveryAnalyticsDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *DataSafeDiscoveryAnalyticsDataSourceCrud) Get() error {
	request := oci_data_safe.ListDiscoveryAnalyticsRequest{}
func (s *DataSafeDiscoveryAnalyticsDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/data_safe/data_safe_sql_firewall_violations_data_source.go ===
func DataSafeSqlFirewallViolationsDataSource() *schema.Resource {
	return &schema.Resource{
func readDataSafeSqlFirewallViolations(d *schema.ResourceData, m interface{}) error {
	sync := &DataSafeSqlFirewallViolationsDataSourceCrud{}
func (s *DataSafeSqlFirewallViolationsDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *DataSafeSqlFirewallViolationsDataSourceCrud) Get() error {
	request := oci_data_safe.ListSqlFirewallViolationsRequest{}
func (s *DataSafeSqlFirewallViolationsDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/data_safe/data_safe_sdm_masking_policy_difference_difference_columns_data_source.go ===
func DataSafeSdmMaskingPolicyDifferenceDifferenceColumnsDataSource() *schema.Resource {
	return &schema.Resource{
func readDataSafeSdmMaskingPolicyDifferenceDifferenceColumns(d *schema.ResourceData, m interface{}) error {
	sync := &DataSafeSdmMaskingPolicyDifferenceDifferenceColumnsDataSourceCrud{}
func (s *DataSafeSdmMaskingPolicyDifferenceDifferenceColumnsDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *DataSafeSdmMaskingPolicyDifferenceDifferenceColumnsDataSourceCrud) Get() error {
	request := oci_data_safe.ListDifferenceColumnsRequest{}
func (s *DataSafeSdmMaskingPolicyDifferenceDifferenceColumnsDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/data_safe/data_safe_sql_collection_analytics_data_source.go ===
func DataSafeSqlCollectionAnalyticsDataSource() *schema.Resource {
	return &schema.Resource{
func readDataSafeSqlCollectionAnalytics(d *schema.ResourceData, m interface{}) error {
	sync := &DataSafeSqlCollectionAnalyticsDataSourceCrud{}
func (s *DataSafeSqlCollectionAnalyticsDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *DataSafeSqlCollectionAnalyticsDataSourceCrud) Get() error {
	request := oci_data_safe.ListSqlCollectionAnalyticsRequest{}
func (s *DataSafeSqlCollectionAnalyticsDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/data_safe/data_safe_set_security_assessment_baseline_management_resource.go ===
func DataSafeSetSecurityAssessmentBaselineManagementResource() *schema.Resource {
	return &schema.Resource{
func createDataSafeSetSecurityAssessmentBaselineManagement(d *schema.ResourceData, m interface{}) error {
	sync := &DataSafeSetSecurityAssessmentBaselineManagementResourceCrud{}
func readDataSafeSetSecurityAssessmentBaselineManagement(d *schema.ResourceData, m interface{}) error {
	return nil
func deleteDataSafeSetSecurityAssessmentBaselineManagement(d *schema.ResourceData, m interface{}) error {
	return nil
func (s *DataSafeSetSecurityAssessmentBaselineManagementResourceCrud) GetAssessmentWorkReq(targetId string, compartmentId string) (string, error) {
	listWorkRequestsRequest := oci_data_safe.ListWorkRequestsRequest{SortBy: oci_data_safe.ListWorkRequestsSortByEnum("ACCEPTEDTIME"), SortOrder: oci_data_safe.ListWorkRequestsSortOrderEnum("DESC")}
func (s *DataSafeSetSecurityAssessmentBaselineManagementResourceCrud) getSavedAssessmentIdFromWorkRequest(workId *string, retryPolicy *oci_common.RetryPolicy,
	actionTypeEnum oci_data_safe.WorkRequestResourceActionTypeEnum, timeout time.Duration, targetId *string, compartmentId *string) (string, error) {
func (s *DataSafeSetSecurityAssessmentBaselineManagementResourceCrud) GetSavedAssessmentList(targetId string, compartmentId string) (string, error) {
	// Set up the request
func (s *DataSafeSetSecurityAssessmentBaselineManagementResourceCrud) ID() string {
	return *s.Res.OpcRequestId
func (s *DataSafeSetSecurityAssessmentBaselineManagementResourceCrud) Create() error {
	request := oci_data_safe.SetSecurityAssessmentBaselineRequest{}
func (s *DataSafeSetSecurityAssessmentBaselineManagementResourceCrud) Get() error {
	request := oci_data_safe.SetSecurityAssessmentBaselineRequest{}
func (s *DataSafeSetSecurityAssessmentBaselineManagementResourceCrud) getSetSecurityAssessmentBaselineFromWorkRequest(workId *string, retryPolicy *oci_common.RetryPolicy,
	actionTypeEnum oci_data_safe.WorkRequestResourceActionTypeEnum, timeout time.Duration) error {
func setSecurityAssessmentBaselineManagementWaitForWorkRequest(wId *string, entityType string, action oci_data_safe.WorkRequestResourceActionTypeEnum,
	timeout time.Duration, disableFoundRetries bool, client *oci_data_safe.DataSafeClient) (*string, error) {
func getErrorFromDataSafeSetSecurityAssessmentBaselineManagementWorkRequest(client *oci_data_safe.DataSafeClient, workId *string, retryPolicy *oci_common.RetryPolicy, entityType string, action oci_data_safe.WorkRequestResourceActionTypeEnum) error {
	response, err := client.ListWorkRequestErrors(context.Background(),
func (s *DataSafeSetSecurityAssessmentBaselineManagementResourceCrud) SetData() error {
	return nil

=== ./internal/service/data_safe/data_safe_compatible_formats_for_data_type_data_source.go ===
func DataSafeCompatibleFormatsForDataTypeDataSource() *schema.Resource {
	return &schema.Resource{
func readSingularDataSafeCompatibleFormatsForDataType(d *schema.ResourceData, m interface{}) error {
	sync := &DataSafeCompatibleFormatsForDataTypeDataSourceCrud{}
func (s *DataSafeCompatibleFormatsForDataTypeDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *DataSafeCompatibleFormatsForDataTypeDataSourceCrud) Get() error {
	request := oci_data_safe.GetCompatibleFormatsForDataTypesRequest{}
func (s *DataSafeCompatibleFormatsForDataTypeDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/data_safe/data_safe_on_prem_connector_resource.go ===
func DataSafeOnPremConnectorResource() *schema.Resource {
	return &schema.Resource{
func createDataSafeOnPremConnector(d *schema.ResourceData, m interface{}) error {
	sync := &DataSafeOnPremConnectorResourceCrud{}
func readDataSafeOnPremConnector(d *schema.ResourceData, m interface{}) error {
	sync := &DataSafeOnPremConnectorResourceCrud{}
func updateDataSafeOnPremConnector(d *schema.ResourceData, m interface{}) error {
	sync := &DataSafeOnPremConnectorResourceCrud{}
func deleteDataSafeOnPremConnector(d *schema.ResourceData, m interface{}) error {
	sync := &DataSafeOnPremConnectorResourceCrud{}
func (s *DataSafeOnPremConnectorResourceCrud) ID() string {
	return *s.Res.Id
func (s *DataSafeOnPremConnectorResourceCrud) CreatedPending() []string {
	return []string{
func (s *DataSafeOnPremConnectorResourceCrud) CreatedTarget() []string {
	return []string{
func (s *DataSafeOnPremConnectorResourceCrud) DeletedPending() []string {
	return []string{
func (s *DataSafeOnPremConnectorResourceCrud) DeletedTarget() []string {
	return []string{
func (s *DataSafeOnPremConnectorResourceCrud) Create() error {
	request := oci_data_safe.CreateOnPremConnectorRequest{}
func (s *DataSafeOnPremConnectorResourceCrud) getOnPremConnectorFromWorkRequest(workId *string, retryPolicy *oci_common.RetryPolicy,
	actionTypeEnum oci_data_safe.WorkRequestResourceActionTypeEnum, timeout time.Duration) error {
func onPremConnectorWaitForWorkRequest(wId *string, entityType string, action oci_data_safe.WorkRequestResourceActionTypeEnum,
	timeout time.Duration, disableFoundRetries bool, client *oci_data_safe.DataSafeClient) (*string, error) {
func getErrorFromDataSafeOnPremConnectorWorkRequest(client *oci_data_safe.DataSafeClient, workId *string, retryPolicy *oci_common.RetryPolicy, entityType string, action oci_data_safe.WorkRequestResourceActionTypeEnum) error {
	response, err := client.ListWorkRequestErrors(context.Background(),
func (s *DataSafeOnPremConnectorResourceCrud) Get() error {
	request := oci_data_safe.GetOnPremConnectorRequest{}
func (s *DataSafeOnPremConnectorResourceCrud) Update() error {
	if compartment, ok := s.D.GetOkExists("compartment_id"); ok && s.D.HasChange("compartment_id") {
func (s *DataSafeOnPremConnectorResourceCrud) Delete() error {
	request := oci_data_safe.DeleteOnPremConnectorRequest{}
func (s *DataSafeOnPremConnectorResourceCrud) SetData() error {
	if s.Res.AvailableVersion != nil {
func (s *DataSafeOnPremConnectorResourceCrud) updateCompartment(compartment interface{}) error {
	changeCompartmentRequest := oci_data_safe.ChangeOnPremConnectorCompartmentRequest{}

=== ./internal/service/data_safe/data_safe_security_assessment_resource.go ===
func DataSafeSecurityAssessmentResource() *schema.Resource {
	return &schema.Resource{
func createDataSafeSecurityAssessment(d *schema.ResourceData, m interface{}) error {
	sync := &DataSafeSecurityAssessmentResourceCrud{}
func readDataSafeSecurityAssessment(d *schema.ResourceData, m interface{}) error {
	sync := &DataSafeSecurityAssessmentResourceCrud{}
func updateDataSafeSecurityAssessment(d *schema.ResourceData, m interface{}) error {
	sync := &DataSafeSecurityAssessmentResourceCrud{}
func deleteDataSafeSecurityAssessment(d *schema.ResourceData, m interface{}) error {
	sync := &DataSafeSecurityAssessmentResourceCrud{}
func (s *DataSafeSecurityAssessmentResourceCrud) ID() string {
	return *s.Res.Id
func (s *DataSafeSecurityAssessmentResourceCrud) CreatedPending() []string {
	return []string{
func (s *DataSafeSecurityAssessmentResourceCrud) CreatedTarget() []string {
	return []string{
func (s *DataSafeSecurityAssessmentResourceCrud) DeletedPending() []string {
	return []string{
func (s *DataSafeSecurityAssessmentResourceCrud) DeletedTarget() []string {
	return []string{
func (s *DataSafeSecurityAssessmentResourceCrud) Create() error {
	request := oci_data_safe.CreateSecurityAssessmentRequest{}
func (s *DataSafeSecurityAssessmentResourceCrud) getSecurityAssessmentFromWorkRequest(workId *string, retryPolicy *oci_common.RetryPolicy,
	actionTypeEnum oci_data_safe.WorkRequestResourceActionTypeEnum, timeout time.Duration) error {
func securityAssessmentWaitForWorkRequest(wId *string, entityType string, action oci_data_safe.WorkRequestResourceActionTypeEnum,
	timeout time.Duration, disableFoundRetries bool, client *oci_data_safe.DataSafeClient) (*string, error) {
func getErrorFromDataSafeSecurityAssessmentWorkRequest(client *oci_data_safe.DataSafeClient, workId *string, retryPolicy *oci_common.RetryPolicy, entityType string, action oci_data_safe.WorkRequestResourceActionTypeEnum) error {
	response, err := client.ListWorkRequestErrors(context.Background(),
func (s *DataSafeSecurityAssessmentResourceCrud) Get() error {
	request := oci_data_safe.GetSecurityAssessmentRequest{}
func (s *DataSafeSecurityAssessmentResourceCrud) Update() error {
	if compartment, ok := s.D.GetOkExists("compartment_id"); ok && s.D.HasChange("compartment_id") {
func (s *DataSafeSecurityAssessmentResourceCrud) Delete() error {
	request := oci_data_safe.DeleteSecurityAssessmentRequest{}
func (s *DataSafeSecurityAssessmentResourceCrud) SetData() error {
	if s.Res.CompartmentId != nil {
func (s *DataSafeSecurityAssessmentResourceCrud) updateCompartment(compartment interface{}) error {
	changeCompartmentRequest := oci_data_safe.ChangeSecurityAssessmentCompartmentRequest{}

=== ./internal/service/data_safe/data_safe_target_databases_schemas_data_source.go ===
func DataSafeTargetDatabasesSchemasDataSource() *schema.Resource {
	return &schema.Resource{
func readDataSafeTargetDatabasesSchemas(d *schema.ResourceData, m interface{}) error {
	sync := &DataSafeTargetDatabasesSchemasDataSourceCrud{}
func (s *DataSafeTargetDatabasesSchemasDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *DataSafeTargetDatabasesSchemasDataSourceCrud) Get() error {
	request := oci_data_safe.ListSchemasRequest{}
func (s *DataSafeTargetDatabasesSchemasDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/data_safe/data_safe_sql_firewall_policy_resource.go ===
func DataSafeSqlFirewallPolicyResource() *schema.Resource {
	return &schema.Resource{
func createDataSafeSqlFirewallPolicy(d *schema.ResourceData, m interface{}) error {
	sync := &DataSafeSqlFirewallPolicyResourceCrud{}
func readDataSafeSqlFirewallPolicy(d *schema.ResourceData, m interface{}) error {
	sync := &DataSafeSqlFirewallPolicyResourceCrud{}
func updateDataSafeSqlFirewallPolicy(d *schema.ResourceData, m interface{}) error {
	sync := &DataSafeSqlFirewallPolicyResourceCrud{}
func deleteDataSafeSqlFirewallPolicy(d *schema.ResourceData, m interface{}) error {
	sync := &DataSafeSqlFirewallPolicyResourceCrud{}
func (s *DataSafeSqlFirewallPolicyResourceCrud) ID() string {
	return *s.Res.Id
func (s *DataSafeSqlFirewallPolicyResourceCrud) CreatedPending() []string {
	return []string{
func (s *DataSafeSqlFirewallPolicyResourceCrud) CreatedTarget() []string {
	return []string{
func (s *DataSafeSqlFirewallPolicyResourceCrud) DeletedPending() []string {
	return []string{
func (s *DataSafeSqlFirewallPolicyResourceCrud) DeletedTarget() []string {
	return []string{
func (s *DataSafeSqlFirewallPolicyResourceCrud) Create() error {
	request := oci_data_safe.UpdateSqlFirewallPolicyRequest{}
func (s *DataSafeSqlFirewallPolicyResourceCrud) getSqlFirewallPolicyFromWorkRequest(workId *string, retryPolicy *oci_common.RetryPolicy,
	actionTypeEnum oci_data_safe.WorkRequestResourceActionTypeEnum, timeout time.Duration) error {
func sqlFirewallPolicyWaitForWorkRequest(wId *string, entityType string, action oci_data_safe.WorkRequestResourceActionTypeEnum,
	timeout time.Duration, disableFoundRetries bool, client *oci_data_safe.DataSafeClient) (*string, error) {
func getErrorFromDataSafeSqlFirewallPolicyWorkRequest(client *oci_data_safe.DataSafeClient, workId *string, retryPolicy *oci_common.RetryPolicy, entityType string, action oci_data_safe.WorkRequestResourceActionTypeEnum) error {
	response, err := client.ListWorkRequestErrors(context.Background(),
func (s *DataSafeSqlFirewallPolicyResourceCrud) Get() error {
	request := oci_data_safe.GetSqlFirewallPolicyRequest{}
func (s *DataSafeSqlFirewallPolicyResourceCrud) Update() error {
	if compartment, ok := s.D.GetOkExists("compartment_id"); ok && s.D.HasChange("compartment_id") {
func (s *DataSafeSqlFirewallPolicyResourceCrud) Delete() error {
	request := oci_data_safe.DeleteSqlFirewallPolicyRequest{}
func (s *DataSafeSqlFirewallPolicyResourceCrud) SetData() error {
	s.D.Set("allowed_client_ips", s.Res.AllowedClientIps)
func (s *DataSafeSqlFirewallPolicyResourceCrud) updateCompartment(compartment interface{}) error {
	changeCompartmentRequest := oci_data_safe.ChangeSqlFirewallPolicyCompartmentRequest{}

=== ./internal/service/data_safe/data_safe_compare_security_assessment_resource.go ===
func DataSafeCompareSecurityAssessmentResource() *schema.Resource {
	return &schema.Resource{
func createDataSafeCompareSecurityAssessment(d *schema.ResourceData, m interface{}) error {
	sync := &DataSafeCompareSecurityAssessmentResourceCrud{}
func readDataSafeCompareSecurityAssessment(d *schema.ResourceData, m interface{}) error {
	return nil
func deleteDataSafeCompareSecurityAssessment(d *schema.ResourceData, m interface{}) error {
	return nil
func (s *DataSafeCompareSecurityAssessmentResourceCrud) ID() string {
	return *s.Res.OpcRequestId
func (s *DataSafeCompareSecurityAssessmentResourceCrud) Get() error {
	request := oci_data_safe.GetSecurityAssessmentComparisonRequest{}
func (s *DataSafeCompareSecurityAssessmentResourceCrud) Create() error {
	request := oci_data_safe.CompareSecurityAssessmentRequest{}
func (s *DataSafeCompareSecurityAssessmentResourceCrud) getCompareSecurityAssessmentFromWorkRequest(workId *string, retryPolicy *oci_common.RetryPolicy,
	actionTypeEnum oci_data_safe.WorkRequestResourceActionTypeEnum, timeout time.Duration) error {
func compareSecurityAssessmentWaitForWorkRequest(wId *string, entityType string, action oci_data_safe.WorkRequestResourceActionTypeEnum,
	timeout time.Duration, disableFoundRetries bool, client *oci_data_safe.DataSafeClient) (*string, error) {
func getErrorFromDataSafeCompareSecurityAssessmentWorkRequest(client *oci_data_safe.DataSafeClient, workId *string, retryPolicy *oci_common.RetryPolicy, entityType string, action oci_data_safe.WorkRequestResourceActionTypeEnum) error {
	response, err := client.ListWorkRequestErrors(context.Background(),
func (s *DataSafeCompareSecurityAssessmentResourceCrud) SetData() error {
	return nil

=== ./internal/service/data_safe/register_resource.go ===
func RegisterResource() {
	tfresource.RegisterResource("oci_data_safe_alert", DataSafeAlertResource())

=== ./internal/service/data_safe/data_safe_security_policy_deployment_security_policy_entry_states_data_source.go ===
func DataSafeSecurityPolicyDeploymentSecurityPolicyEntryStatesDataSource() *schema.Resource {
	return &schema.Resource{
func readDataSafeSecurityPolicyDeploymentSecurityPolicyEntryStates(d *schema.ResourceData, m interface{}) error {
	sync := &DataSafeSecurityPolicyDeploymentSecurityPolicyEntryStatesDataSourceCrud{}
func (s *DataSafeSecurityPolicyDeploymentSecurityPolicyEntryStatesDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *DataSafeSecurityPolicyDeploymentSecurityPolicyEntryStatesDataSourceCrud) Get() error {
	request := oci_data_safe.ListSecurityPolicyEntryStatesRequest{}
func (s *DataSafeSecurityPolicyDeploymentSecurityPolicyEntryStatesDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/data_safe/data_safe_sensitive_type_data_source.go ===
func DataSafeSensitiveTypeDataSource() *schema.Resource {
	fieldMap := make(map[string]*schema.Schema)
func readSingularDataSafeSensitiveType(d *schema.ResourceData, m interface{}) error {
	sync := &DataSafeSensitiveTypeDataSourceCrud{}
func (s *DataSafeSensitiveTypeDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *DataSafeSensitiveTypeDataSourceCrud) Get() error {
	request := oci_data_safe.GetSensitiveTypeRequest{}
func (s *DataSafeSensitiveTypeDataSourceCrud) SetData() error {


=== ./internal/service/data_safe/data_safe_database_security_config_resource.go ===
func DataSafeDatabaseSecurityConfigResource() *schema.Resource {
	return &schema.Resource{
func createDataSafeDatabaseSecurityConfig(d *schema.ResourceData, m interface{}) error {
	sync := &DataSafeDatabaseSecurityConfigResourceCrud{}
func readDataSafeDatabaseSecurityConfig(d *schema.ResourceData, m interface{}) error {
	sync := &DataSafeDatabaseSecurityConfigResourceCrud{}
func updateDataSafeDatabaseSecurityConfig(d *schema.ResourceData, m interface{}) error {
	sync := &DataSafeDatabaseSecurityConfigResourceCrud{}
func deleteDataSafeDatabaseSecurityConfig(d *schema.ResourceData, m interface{}) error {
	return nil
func (s *DataSafeDatabaseSecurityConfigResourceCrud) ID() string {
	return *s.Res.Id
func (s *DataSafeDatabaseSecurityConfigResourceCrud) CreatedPending() []string {
	return []string{
func (s *DataSafeDatabaseSecurityConfigResourceCrud) CreatedTarget() []string {
	return []string{
func (s *DataSafeDatabaseSecurityConfigResourceCrud) DeletedPending() []string {
	return []string{
func (s *DataSafeDatabaseSecurityConfigResourceCrud) DeletedTarget() []string {
	return []string{
func (s *DataSafeDatabaseSecurityConfigResourceCrud) Create() error {
	request := oci_data_safe.UpdateDatabaseSecurityConfigRequest{}
func (s *DataSafeDatabaseSecurityConfigResourceCrud) getDatabaseSecurityConfigFromWorkRequest(workId *string, retryPolicy *oci_common.RetryPolicy,
	actionTypeEnum oci_data_safe.WorkRequestResourceActionTypeEnum, timeout time.Duration) error {
func databaseSecurityConfigWaitForWorkRequest(wId *string, entityType string, action oci_data_safe.WorkRequestResourceActionTypeEnum,
	timeout time.Duration, disableFoundRetries bool, client *oci_data_safe.DataSafeClient) (*string, error) {
func getErrorFromDataSafeDatabaseSecurityConfigWorkRequest(client *oci_data_safe.DataSafeClient, workId *string, retryPolicy *oci_common.RetryPolicy, entityType string, action oci_data_safe.WorkRequestResourceActionTypeEnum) error {
	response, err := client.ListWorkRequestErrors(context.Background(),
func (s *DataSafeDatabaseSecurityConfigResourceCrud) Get() error {
	request := oci_data_safe.GetDatabaseSecurityConfigRequest{}
func (s *DataSafeDatabaseSecurityConfigResourceCrud) Update() error {
	if compartment, ok := s.D.GetOkExists("compartment_id"); ok && s.D.HasChange("compartment_id") {
func (s *DataSafeDatabaseSecurityConfigResourceCrud) SetData() error {
	if s.Res.CompartmentId != nil {
func (s *DataSafeDatabaseSecurityConfigResourceCrud) RefreshDatabaseSecurityConfiguration() error {
	request := oci_data_safe.RefreshDatabaseSecurityConfigurationRequest{}
func (s *DataSafeDatabaseSecurityConfigResourceCrud) mapToUpdateSqlFirewallConfigDetails(fieldKeyFormat string) (oci_data_safe.UpdateSqlFirewallConfigDetails, error) {
	result := oci_data_safe.UpdateSqlFirewallConfigDetails{}
func (s *DataSafeDatabaseSecurityConfigResourceCrud) updateCompartment(compartment interface{}) error {
	changeCompartmentRequest := oci_data_safe.ChangeDatabaseSecurityConfigCompartmentRequest{}

=== ./internal/service/data_safe/data_safe_sensitive_data_model_resource.go ===
func DataSafeSensitiveDataModelResource() *schema.Resource {
	return &schema.Resource{
func createDataSafeSensitiveDataModel(d *schema.ResourceData, m interface{}) error {
	sync := &DataSafeSensitiveDataModelResourceCrud{}
func readDataSafeSensitiveDataModel(d *schema.ResourceData, m interface{}) error {
	sync := &DataSafeSensitiveDataModelResourceCrud{}
func updateDataSafeSensitiveDataModel(d *schema.ResourceData, m interface{}) error {
	sync := &DataSafeSensitiveDataModelResourceCrud{}
func deleteDataSafeSensitiveDataModel(d *schema.ResourceData, m interface{}) error {
	sync := &DataSafeSensitiveDataModelResourceCrud{}
func (s *DataSafeSensitiveDataModelResourceCrud) ID() string {
	return *s.Res.Id
func (s *DataSafeSensitiveDataModelResourceCrud) CreatedPending() []string {
	return []string{
func (s *DataSafeSensitiveDataModelResourceCrud) CreatedTarget() []string {
	return []string{
func (s *DataSafeSensitiveDataModelResourceCrud) DeletedPending() []string {
	return []string{
func (s *DataSafeSensitiveDataModelResourceCrud) DeletedTarget() []string {
	return []string{
func (s *DataSafeSensitiveDataModelResourceCrud) Create() error {
	request := oci_data_safe.CreateSensitiveDataModelRequest{}
func (s *DataSafeSensitiveDataModelResourceCrud) getSensitiveDataModelFromWorkRequest(workId *string, retryPolicy *oci_common.RetryPolicy,
	actionTypeEnum oci_data_safe.WorkRequestResourceActionTypeEnum, timeout time.Duration) error {
func sensitiveDataModelWaitForWorkRequest(wId *string, entityType string, action oci_data_safe.WorkRequestResourceActionTypeEnum,
	timeout time.Duration, disableFoundRetries bool, client *oci_data_safe.DataSafeClient) (*string, error) {
func getErrorFromDataSafeSensitiveDataModelWorkRequest(client *oci_data_safe.DataSafeClient, workId *string, retryPolicy *oci_common.RetryPolicy, entityType string, action oci_data_safe.WorkRequestResourceActionTypeEnum) error {
	response, err := client.ListWorkRequestErrors(context.Background(),
func (s *DataSafeSensitiveDataModelResourceCrud) Get() error {
	request := oci_data_safe.GetSensitiveDataModelRequest{}
func (s *DataSafeSensitiveDataModelResourceCrud) Update() error {
	if compartment, ok := s.D.GetOkExists("compartment_id"); ok && s.D.HasChange("compartment_id") {
func (s *DataSafeSensitiveDataModelResourceCrud) Delete() error {
	request := oci_data_safe.DeleteSensitiveDataModelRequest{}
func (s *DataSafeSensitiveDataModelResourceCrud) SetData() error {
	if s.Res.AppSuiteName != nil {
func (s *DataSafeSensitiveDataModelResourceCrud) mapToTablesForDiscovery(fieldKeyFormat string) (oci_data_safe.TablesForDiscovery, error) {
	result := oci_data_safe.TablesForDiscovery{}
func (s *DataSafeSensitiveDataModelResourceCrud) updateCompartment(compartment interface{}) error {
	changeCompartmentRequest := oci_data_safe.ChangeSensitiveDataModelCompartmentRequest{}

=== ./internal/service/data_safe/data_safe_security_policies_data_source.go ===
func DataSafeSecurityPoliciesDataSource() *schema.Resource {
	return &schema.Resource{
func readDataSafeSecurityPolicies(d *schema.ResourceData, m interface{}) error {
	sync := &DataSafeSecurityPoliciesDataSourceCrud{}
func (s *DataSafeSecurityPoliciesDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *DataSafeSecurityPoliciesDataSourceCrud) Get() error {
	request := oci_data_safe.ListSecurityPoliciesRequest{}
func (s *DataSafeSecurityPoliciesDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/data_safe/data_safe_alert_resource.go ===
func DataSafeAlertResource() *schema.Resource {
	return &schema.Resource{
func createDataSafeAlert(d *schema.ResourceData, m interface{}) error {
	sync := &DataSafeAlertResourceCrud{}
func readDataSafeAlert(d *schema.ResourceData, m interface{}) error {
	sync := &DataSafeAlertResourceCrud{}
func updateDataSafeAlert(d *schema.ResourceData, m interface{}) error {
	sync := &DataSafeAlertResourceCrud{}
func deleteDataSafeAlert(d *schema.ResourceData, m interface{}) error {
	return nil
func (s *DataSafeAlertResourceCrud) ID() string {
	return *s.Res.Id
func (s *DataSafeAlertResourceCrud) CreatedPending() []string {
	return []string{}
func (s *DataSafeAlertResourceCrud) CreatedTarget() []string {
	return []string{
func (s *DataSafeAlertResourceCrud) DeletedPending() []string {
	return []string{}
func (s *DataSafeAlertResourceCrud) DeletedTarget() []string {
	return []string{}
func (s *DataSafeAlertResourceCrud) Create() error {
	request := oci_data_safe.UpdateAlertRequest{}
func (s *DataSafeAlertResourceCrud) Get() error {
	request := oci_data_safe.GetAlertRequest{}
func (s *DataSafeAlertResourceCrud) Update() error {
	if compartment, ok := s.D.GetOkExists("compartment_id"); ok && s.D.HasChange("compartment_id") {
func (s *DataSafeAlertResourceCrud) SetData() error {
	if s.Res.AlertPolicyRuleKey != nil {
func (s *DataSafeAlertResourceCrud) updateCompartment(compartment interface{}) error {
	changeCompartmentRequest := oci_data_safe.ChangeAlertCompartmentRequest{}

=== ./internal/service/data_safe/data_safe_target_databases_data_source.go ===
func DataSafeTargetDatabasesDataSource() *schema.Resource {
	return &schema.Resource{
func readDataSafeTargetDatabases(d *schema.ResourceData, m interface{}) error {
	sync := &DataSafeTargetDatabasesDataSourceCrud{}
func (s *DataSafeTargetDatabasesDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *DataSafeTargetDatabasesDataSourceCrud) Get() error {
	request := oci_data_safe.ListTargetDatabasesRequest{}
func (s *DataSafeTargetDatabasesDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/data_safe/data_safe_sdm_masking_policy_difference_data_source.go ===
func DataSafeSdmMaskingPolicyDifferenceDataSource() *schema.Resource {
	fieldMap := make(map[string]*schema.Schema)
func readSingularDataSafeSdmMaskingPolicyDifference(d *schema.ResourceData, m interface{}) error {
	sync := &DataSafeSdmMaskingPolicyDifferenceDataSourceCrud{}
func (s *DataSafeSdmMaskingPolicyDifferenceDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *DataSafeSdmMaskingPolicyDifferenceDataSourceCrud) Get() error {
	request := oci_data_safe.GetSdmMaskingPolicyDifferenceRequest{}
func (s *DataSafeSdmMaskingPolicyDifferenceDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/data_safe/data_safe_security_assessment_security_features_data_source.go ===
func DataSafeSecurityAssessmentSecurityFeaturesDataSource() *schema.Resource {
	return &schema.Resource{
func readDataSafeSecurityAssessmentSecurityFeatures(d *schema.ResourceData, m interface{}) error {
	sync := &DataSafeSecurityAssessmentSecurityFeaturesDataSourceCrud{}
func (s *DataSafeSecurityAssessmentSecurityFeaturesDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *DataSafeSecurityAssessmentSecurityFeaturesDataSourceCrud) Get() error {
	request := oci_data_safe.ListSecurityFeaturesRequest{}
func (s *DataSafeSecurityAssessmentSecurityFeaturesDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/jms_java_downloads/jms_java_downloads_java_license_acceptance_record_resource.go ===
func JmsJavaDownloadsJavaLicenseAcceptanceRecordResource() *schema.Resource {
	return &schema.Resource{
func createJmsJavaDownloadsJavaLicenseAcceptanceRecord(d *schema.ResourceData, m interface{}) error {
	sync := &JmsJavaDownloadsJavaLicenseAcceptanceRecordResourceCrud{}
func readJmsJavaDownloadsJavaLicenseAcceptanceRecord(d *schema.ResourceData, m interface{}) error {
	sync := &JmsJavaDownloadsJavaLicenseAcceptanceRecordResourceCrud{}
func updateJmsJavaDownloadsJavaLicenseAcceptanceRecord(d *schema.ResourceData, m interface{}) error {
	sync := &JmsJavaDownloadsJavaLicenseAcceptanceRecordResourceCrud{}
func deleteJmsJavaDownloadsJavaLicenseAcceptanceRecord(d *schema.ResourceData, m interface{}) error {
	sync := &JmsJavaDownloadsJavaLicenseAcceptanceRecordResourceCrud{}
func (s *JmsJavaDownloadsJavaLicenseAcceptanceRecordResourceCrud) ID() string {
	return *s.Res.Id
func (s *JmsJavaDownloadsJavaLicenseAcceptanceRecordResourceCrud) CreatedPending() []string {
	return []string{
func (s *JmsJavaDownloadsJavaLicenseAcceptanceRecordResourceCrud) CreatedTarget() []string {
	return []string{
func (s *JmsJavaDownloadsJavaLicenseAcceptanceRecordResourceCrud) DeletedPending() []string {
	return []string{
func (s *JmsJavaDownloadsJavaLicenseAcceptanceRecordResourceCrud) DeletedTarget() []string {
	return []string{
func (s *JmsJavaDownloadsJavaLicenseAcceptanceRecordResourceCrud) Create() error {
	request := oci_jms_java_downloads.CreateJavaLicenseAcceptanceRecordRequest{}
func (s *JmsJavaDownloadsJavaLicenseAcceptanceRecordResourceCrud) Get() error {
	request := oci_jms_java_downloads.GetJavaLicenseAcceptanceRecordRequest{}
func (s *JmsJavaDownloadsJavaLicenseAcceptanceRecordResourceCrud) Update() error {
	request := oci_jms_java_downloads.UpdateJavaLicenseAcceptanceRecordRequest{}
func (s *JmsJavaDownloadsJavaLicenseAcceptanceRecordResourceCrud) Delete() error {
	request := oci_jms_java_downloads.DeleteJavaLicenseAcceptanceRecordRequest{}
func (s *JmsJavaDownloadsJavaLicenseAcceptanceRecordResourceCrud) SetData() error {
	if s.Res.CompartmentId != nil {

=== ./internal/service/jms_java_downloads/jms_java_downloads_java_license_acceptance_record_data_source.go ===
func JmsJavaDownloadsJavaLicenseAcceptanceRecordDataSource() *schema.Resource {
	fieldMap := make(map[string]*schema.Schema)
func readSingularJmsJavaDownloadsJavaLicenseAcceptanceRecord(d *schema.ResourceData, m interface{}) error {
	sync := &JmsJavaDownloadsJavaLicenseAcceptanceRecordDataSourceCrud{}
func (s *JmsJavaDownloadsJavaLicenseAcceptanceRecordDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *JmsJavaDownloadsJavaLicenseAcceptanceRecordDataSourceCrud) Get() error {
	request := oci_jms_java_downloads.GetJavaLicenseAcceptanceRecordRequest{}
func (s *JmsJavaDownloadsJavaLicenseAcceptanceRecordDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/jms_java_downloads/jms_java_downloads_java_download_tokens_data_source.go ===
func JmsJavaDownloadsJavaDownloadTokensDataSource() *schema.Resource {
	return &schema.Resource{
func readJmsJavaDownloadsJavaDownloadTokens(d *schema.ResourceData, m interface{}) error {
	sync := &JmsJavaDownloadsJavaDownloadTokensDataSourceCrud{}
func (s *JmsJavaDownloadsJavaDownloadTokensDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *JmsJavaDownloadsJavaDownloadTokensDataSourceCrud) Get() error {
	request := oci_jms_java_downloads.ListJavaDownloadTokensRequest{}
func (s *JmsJavaDownloadsJavaDownloadTokensDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/jms_java_downloads/jms_java_downloads_java_download_token_data_source.go ===
func JmsJavaDownloadsJavaDownloadTokenDataSource() *schema.Resource {
	fieldMap := make(map[string]*schema.Schema)
func readSingularJmsJavaDownloadsJavaDownloadToken(d *schema.ResourceData, m interface{}) error {
	sync := &JmsJavaDownloadsJavaDownloadTokenDataSourceCrud{}
func (s *JmsJavaDownloadsJavaDownloadTokenDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *JmsJavaDownloadsJavaDownloadTokenDataSourceCrud) Get() error {
	request := oci_jms_java_downloads.GetJavaDownloadTokenRequest{}
func (s *JmsJavaDownloadsJavaDownloadTokenDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/jms_java_downloads/jms_java_downloads_java_license_data_source.go ===
func JmsJavaDownloadsJavaLicenseDataSource() *schema.Resource {
	return &schema.Resource{
func readSingularJmsJavaDownloadsJavaLicense(d *schema.ResourceData, m interface{}) error {
	sync := &JmsJavaDownloadsJavaLicenseDataSourceCrud{}
func (s *JmsJavaDownloadsJavaLicenseDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *JmsJavaDownloadsJavaLicenseDataSourceCrud) Get() error {
	request := oci_jms_java_downloads.GetJavaLicenseRequest{}
func (s *JmsJavaDownloadsJavaLicenseDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/jms_java_downloads/jms_java_downloads_java_download_token_resource.go ===
func JmsJavaDownloadsJavaDownloadTokenResource() *schema.Resource {
	return &schema.Resource{
func createJmsJavaDownloadsJavaDownloadToken(d *schema.ResourceData, m interface{}) error {
	sync := &JmsJavaDownloadsJavaDownloadTokenResourceCrud{}
func readJmsJavaDownloadsJavaDownloadToken(d *schema.ResourceData, m interface{}) error {
	sync := &JmsJavaDownloadsJavaDownloadTokenResourceCrud{}
func updateJmsJavaDownloadsJavaDownloadToken(d *schema.ResourceData, m interface{}) error {
	sync := &JmsJavaDownloadsJavaDownloadTokenResourceCrud{}
func deleteJmsJavaDownloadsJavaDownloadToken(d *schema.ResourceData, m interface{}) error {
	sync := &JmsJavaDownloadsJavaDownloadTokenResourceCrud{}
func (s *JmsJavaDownloadsJavaDownloadTokenResourceCrud) ID() string {
	return *s.Res.Id
func (s *JmsJavaDownloadsJavaDownloadTokenResourceCrud) CreatedPending() []string {
	return []string{
func (s *JmsJavaDownloadsJavaDownloadTokenResourceCrud) CreatedTarget() []string {
	return []string{
func (s *JmsJavaDownloadsJavaDownloadTokenResourceCrud) DeletedPending() []string {
	return []string{
func (s *JmsJavaDownloadsJavaDownloadTokenResourceCrud) DeletedTarget() []string {
	return []string{
func (s *JmsJavaDownloadsJavaDownloadTokenResourceCrud) Create() error {
	request := oci_jms_java_downloads.CreateJavaDownloadTokenRequest{}
func (s *JmsJavaDownloadsJavaDownloadTokenResourceCrud) getJavaDownloadTokenFromWorkRequest(workId *string, retryPolicy *oci_common.RetryPolicy,
	actionTypeEnum oci_jms_java_downloads.ActionTypeEnum, timeout time.Duration) error {
func (s *JmsJavaDownloadsJavaDownloadTokenResourceCrud) Get() error {
	request := oci_jms_java_downloads.GetJavaDownloadTokenRequest{}
func (s *JmsJavaDownloadsJavaDownloadTokenResourceCrud) Update() error {
	request := oci_jms_java_downloads.UpdateJavaDownloadTokenRequest{}
func (s *JmsJavaDownloadsJavaDownloadTokenResourceCrud) Delete() error {
	request := oci_jms_java_downloads.DeleteJavaDownloadTokenRequest{}
func (s *JmsJavaDownloadsJavaDownloadTokenResourceCrud) SetData() error {
	if s.Res.CompartmentId != nil {

=== ./internal/service/jms_java_downloads/jms_java_downloads_java_licenses_data_source.go ===
func JmsJavaDownloadsJavaLicensesDataSource() *schema.Resource {
	return &schema.Resource{
func readJmsJavaDownloadsJavaLicenses(d *schema.ResourceData, m interface{}) error {
	sync := &JmsJavaDownloadsJavaLicensesDataSourceCrud{}
func (s *JmsJavaDownloadsJavaLicensesDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *JmsJavaDownloadsJavaLicensesDataSourceCrud) Get() error {
	request := oci_jms_java_downloads.ListJavaLicensesRequest{}
func (s *JmsJavaDownloadsJavaLicensesDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/jms_java_downloads/jms_java_downloads_java_download_records_data_source.go ===
func JmsJavaDownloadsJavaDownloadRecordsDataSource() *schema.Resource {
	return &schema.Resource{
func readJmsJavaDownloadsJavaDownloadRecords(d *schema.ResourceData, m interface{}) error {
	sync := &JmsJavaDownloadsJavaDownloadRecordsDataSourceCrud{}
func (s *JmsJavaDownloadsJavaDownloadRecordsDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *JmsJavaDownloadsJavaDownloadRecordsDataSourceCrud) Get() error {
	request := oci_jms_java_downloads.ListJavaDownloadRecordsRequest{}
func (s *JmsJavaDownloadsJavaDownloadRecordsDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/jms_java_downloads/jms_java_downloads_java_license_acceptance_records_data_source.go ===
func JmsJavaDownloadsJavaLicenseAcceptanceRecordsDataSource() *schema.Resource {
	return &schema.Resource{
func readJmsJavaDownloadsJavaLicenseAcceptanceRecords(d *schema.ResourceData, m interface{}) error {
	sync := &JmsJavaDownloadsJavaLicenseAcceptanceRecordsDataSourceCrud{}
func (s *JmsJavaDownloadsJavaLicenseAcceptanceRecordsDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *JmsJavaDownloadsJavaLicenseAcceptanceRecordsDataSourceCrud) Get() error {
	request := oci_jms_java_downloads.ListJavaLicenseAcceptanceRecordsRequest{}
func (s *JmsJavaDownloadsJavaLicenseAcceptanceRecordsDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/jms_java_downloads/jms_java_downloads_java_download_report_content_data_source.go ===
func JmsJavaDownloadsJavaDownloadReportContentDataSource() *schema.Resource {
	return &schema.Resource{
func readSingularJmsJavaDownloadsJavaDownloadReportContent(d *schema.ResourceData, m interface{}) error {
	sync := &JmsJavaDownloadsJavaDownloadReportContentDataSourceCrud{}
func (s *JmsJavaDownloadsJavaDownloadReportContentDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *JmsJavaDownloadsJavaDownloadReportContentDataSourceCrud) Get() error {
	request := oci_jms_java_downloads.GetJavaDownloadReportContentRequest{}
func (s *JmsJavaDownloadsJavaDownloadReportContentDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/jms_java_downloads/jms_java_downloads_java_download_report_data_source.go ===
func JmsJavaDownloadsJavaDownloadReportDataSource() *schema.Resource {
	fieldMap := make(map[string]*schema.Schema)
func readSingularJmsJavaDownloadsJavaDownloadReport(d *schema.ResourceData, m interface{}) error {
	sync := &JmsJavaDownloadsJavaDownloadReportDataSourceCrud{}
func (s *JmsJavaDownloadsJavaDownloadReportDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *JmsJavaDownloadsJavaDownloadReportDataSourceCrud) Get() error {
	request := oci_jms_java_downloads.GetJavaDownloadReportRequest{}
func (s *JmsJavaDownloadsJavaDownloadReportDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/jms_java_downloads/register_resource.go ===
func RegisterResource() {
	tfresource.RegisterResource("oci_jms_java_downloads_java_download_report", JmsJavaDownloadsJavaDownloadReportResource())

=== ./internal/service/jms_java_downloads/jms_java_downloads_java_download_report_resource.go ===
func JmsJavaDownloadsJavaDownloadReportResource() *schema.Resource {
	return &schema.Resource{
func createJmsJavaDownloadsJavaDownloadReport(d *schema.ResourceData, m interface{}) error {
	sync := &JmsJavaDownloadsJavaDownloadReportResourceCrud{}
func readJmsJavaDownloadsJavaDownloadReport(d *schema.ResourceData, m interface{}) error {
	sync := &JmsJavaDownloadsJavaDownloadReportResourceCrud{}
func deleteJmsJavaDownloadsJavaDownloadReport(d *schema.ResourceData, m interface{}) error {
	sync := &JmsJavaDownloadsJavaDownloadReportResourceCrud{}
func (s *JmsJavaDownloadsJavaDownloadReportResourceCrud) ID() string {
	return *s.Res.Id
func (s *JmsJavaDownloadsJavaDownloadReportResourceCrud) CreatedPending() []string {
	return []string{
func (s *JmsJavaDownloadsJavaDownloadReportResourceCrud) CreatedTarget() []string {
	return []string{
func (s *JmsJavaDownloadsJavaDownloadReportResourceCrud) DeletedPending() []string {
	return []string{
func (s *JmsJavaDownloadsJavaDownloadReportResourceCrud) DeletedTarget() []string {
	return []string{
func (s *JmsJavaDownloadsJavaDownloadReportResourceCrud) Create() error {
	request := oci_jms_java_downloads.CreateJavaDownloadReportRequest{}
func (s *JmsJavaDownloadsJavaDownloadReportResourceCrud) getJavaDownloadReportFromWorkRequest(workId *string, retryPolicy *oci_common.RetryPolicy,
	actionTypeEnum oci_jms_java_downloads.ActionTypeEnum, timeout time.Duration) error {
func (s *JmsJavaDownloadsJavaDownloadReportResourceCrud) Get() error {
	request := oci_jms_java_downloads.GetJavaDownloadReportRequest{}
func (s *JmsJavaDownloadsJavaDownloadReportResourceCrud) Delete() error {
	request := oci_jms_java_downloads.DeleteJavaDownloadReportRequest{}
func (s *JmsJavaDownloadsJavaDownloadReportResourceCrud) SetData() error {
	s.D.Set("checksum_type", s.Res.ChecksumType)

=== ./internal/service/jms_java_downloads/jms_java_downloads_java_download_reports_data_source.go ===
func JmsJavaDownloadsJavaDownloadReportsDataSource() *schema.Resource {
	return &schema.Resource{
func readJmsJavaDownloadsJavaDownloadReports(d *schema.ResourceData, m interface{}) error {
	sync := &JmsJavaDownloadsJavaDownloadReportsDataSourceCrud{}
func (s *JmsJavaDownloadsJavaDownloadReportsDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *JmsJavaDownloadsJavaDownloadReportsDataSourceCrud) Get() error {
	request := oci_jms_java_downloads.ListJavaDownloadReportsRequest{}
func (s *JmsJavaDownloadsJavaDownloadReportsDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/bds/bds_bds_instance_metastore_configs_data_source.go ===
func BdsBdsInstanceMetastoreConfigsDataSource() *schema.Resource {
	return &schema.Resource{
func readBdsBdsInstanceMetastoreConfigs(d *schema.ResourceData, m interface{}) error {
	sync := &BdsBdsInstanceMetastoreConfigsDataSourceCrud{}
func (s *BdsBdsInstanceMetastoreConfigsDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *BdsBdsInstanceMetastoreConfigsDataSourceCrud) Get() error {
	request := oci_bds.ListBdsMetastoreConfigurationsRequest{}
func (s *BdsBdsInstanceMetastoreConfigsDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/bds/bds_bds_instance_patch_histories_data_source.go ===
func BdsBdsInstancePatchHistoriesDataSource() *schema.Resource {
	return &schema.Resource{
func readBdsBdsInstancePatchHistories(d *schema.ResourceData, m interface{}) error {
	sync := &BdsBdsInstancePatchHistoriesDataSourceCrud{}
func (s *BdsBdsInstancePatchHistoriesDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *BdsBdsInstancePatchHistoriesDataSourceCrud) Get() error {
	request := oci_bds.ListPatchHistoriesRequest{}
func (s *BdsBdsInstancePatchHistoriesDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/bds/bds_bds_instance_resource_principal_configuration_data_source.go ===
func BdsBdsInstanceResourcePrincipalConfigurationDataSource() *schema.Resource {
	fieldMap := make(map[string]*schema.Schema)
func readSingularBdsBdsInstanceResourcePrincipalConfiguration(d *schema.ResourceData, m interface{}) error {
	sync := &BdsBdsInstanceResourcePrincipalConfigurationDataSourceCrud{}
func (s *BdsBdsInstanceResourcePrincipalConfigurationDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *BdsBdsInstanceResourcePrincipalConfigurationDataSourceCrud) Get() error {
	request := oci_bds.GetResourcePrincipalConfigurationRequest{}
func (s *BdsBdsInstanceResourcePrincipalConfigurationDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/bds/bds_bds_instance_api_key_resource.go ===
func BdsBdsInstanceApiKeyResource() *schema.Resource {
	return &schema.Resource{
func createBdsBdsInstanceApiKey(d *schema.ResourceData, m interface{}) error {
	sync := &BdsBdsInstanceApiKeyResourceCrud{}
func updateBdsBdsInstanceApiKey(d *schema.ResourceData, m interface{}) error {
	sync := &BdsBdsInstanceApiKeyResourceCrud{}
func readBdsBdsInstanceApiKey(d *schema.ResourceData, m interface{}) error {
	sync := &BdsBdsInstanceApiKeyResourceCrud{}
func deleteBdsBdsInstanceApiKey(d *schema.ResourceData, m interface{}) error {
	sync := &BdsBdsInstanceApiKeyResourceCrud{}
func (s *BdsBdsInstanceApiKeyResourceCrud) ID() string {
	return GetBdsInstanceApiKeyCompositeId(*s.Res.Id, s.D.Get("bds_instance_id").(string))
func (s *BdsBdsInstanceApiKeyResourceCrud) CreatedPending() []string {
	return []string{
func (s *BdsBdsInstanceApiKeyResourceCrud) CreatedTarget() []string {
	return []string{
func (s *BdsBdsInstanceApiKeyResourceCrud) DeletedPending() []string {
	return []string{
func (s *BdsBdsInstanceApiKeyResourceCrud) DeletedTarget() []string {
	return []string{
func (s *BdsBdsInstanceApiKeyResourceCrud) Create() error {
	request := oci_bds.CreateBdsApiKeyRequest{}
func (s *BdsBdsInstanceApiKeyResourceCrud) setIdFromWorkRequest(workId *string) {
	var identifier_str string
func (s *BdsBdsInstanceApiKeyResourceCrud) getBdsInstanceApiKeyFromWorkRequest(workId *string, retryPolicy *oci_common.RetryPolicy,
	actionTypeEnum oci_bds.ActionTypesEnum, timeout time.Duration) error {
func (s *BdsBdsInstanceApiKeyResourceCrud) Get() error {
	request := oci_bds.GetBdsApiKeyRequest{}
func (s *BdsBdsInstanceApiKeyResourceCrud) Delete() error {
	request := oci_bds.DeleteBdsApiKeyRequest{}
func (s *BdsBdsInstanceApiKeyResourceCrud) SetData() error {


=== ./internal/service/bds/bds_auto_scaling_configuration_resource.go ===
func BdsAutoScalingConfigurationResource() *schema.Resource {
	return &schema.Resource{
func createBdsAutoScalingConfiguration(d *schema.ResourceData, m interface{}) error {
	sync := &BdsAutoScalingConfigurationResourceCrud{}
func readBdsAutoScalingConfiguration(d *schema.ResourceData, m interface{}) error {
	sync := &BdsAutoScalingConfigurationResourceCrud{}
func updateBdsAutoScalingConfiguration(d *schema.ResourceData, m interface{}) error {
	sync := &BdsAutoScalingConfigurationResourceCrud{}
func deleteBdsAutoScalingConfiguration(d *schema.ResourceData, m interface{}) error {
	sync := &BdsAutoScalingConfigurationResourceCrud{}
func (s *BdsAutoScalingConfigurationResourceCrud) ID() string {
	return getAutoScalingConfigurationCompositeId(*s.Res.Id, s.D.Get("bds_instance_id").(string))
func (s *BdsAutoScalingConfigurationResourceCrud) CreatedPending() []string {
	return []string{
func (s *BdsAutoScalingConfigurationResourceCrud) CreatedTarget() []string {
	return []string{
func (s *BdsAutoScalingConfigurationResourceCrud) DeletedPending() []string {
	return []string{
func (s *BdsAutoScalingConfigurationResourceCrud) DeletedTarget() []string {
	return []string{
func (s *BdsAutoScalingConfigurationResourceCrud) Create() error {
	request := oci_bds.AddAutoScalingConfigurationRequest{}
func (s *BdsAutoScalingConfigurationResourceCrud) getAutoScalingConfigurationFromWorkRequest(workId *string, retryPolicy *oci_common.RetryPolicy,
	actionTypeEnum oci_bds.ActionTypesEnum, timeout time.Duration) error {
func (s *BdsAutoScalingConfigurationResourceCrud) List(compartmentId *string) (*string, error) {
	request := oci_bds.ListAutoScalingConfigurationsRequest{}
func (s *BdsAutoScalingConfigurationResourceCrud) Get() error {
	request := oci_bds.GetAutoScalingConfigurationRequest{}
func (s *BdsAutoScalingConfigurationResourceCrud) Update() error {
	request := oci_bds.UpdateAutoScalingConfigurationRequest{}
func (s *BdsAutoScalingConfigurationResourceCrud) Delete() error {
	request := oci_bds.RemoveAutoScalingConfigurationRequest{}
func (s *BdsAutoScalingConfigurationResourceCrud) SetData() error {

func (s *BdsAutoScalingConfigurationResourceCrud) mapToAddAutoScalePolicyDetails(fieldKeyFormat string) (oci_bds.AddAutoScalePolicyDetails, error) {
	var baseObject oci_bds.AddAutoScalePolicyDetails
func (s *BdsAutoScalingConfigurationResourceCrud) mapToUpdateAutoScalePolicyDetails(fieldKeyFormat string) (oci_bds.AddAutoScalePolicyDetails, error) {
	var baseObject oci_bds.AddAutoScalePolicyDetails
func (s *BdsAutoScalingConfigurationResourceCrud) mapToAutoScalePolicy(fieldKeyFormat string) (oci_bds.AutoScalePolicy, error) {
	result := oci_bds.AutoScalePolicy{}
func (s *BdsAutoScalingConfigurationResourceCrud) mapToAutoScalePolicyMetricRule(fieldKeyFormat string) (oci_bds.AutoScalePolicyMetricRule, error) {
	result := oci_bds.AutoScalePolicyMetricRule{}
func (s *BdsAutoScalingConfigurationResourceCrud) mapToAutoScalePolicyRule(fieldKeyFormat string) (oci_bds.AutoScalePolicyRule, error) {
	result := oci_bds.AutoScalePolicyRule{}
func (s *BdsAutoScalingConfigurationResourceCrud) mapToHorizontalScalingScheduleDetails(fieldKeyFormat string) (oci_bds.HorizontalScalingScheduleDetails, error) {
	var baseObject oci_bds.HorizontalScalingScheduleDetails
func (s *BdsAutoScalingConfigurationResourceCrud) mapToMetricBasedHorizontalScaleInConfig(fieldKeyFormat string) (oci_bds.MetricBasedHorizontalScaleInConfig, error) {
	result := oci_bds.MetricBasedHorizontalScaleInConfig{}
func (s *BdsAutoScalingConfigurationResourceCrud) mapToMetricBasedHorizontalScaleOutConfig(fieldKeyFormat string) (oci_bds.MetricBasedHorizontalScaleOutConfig, error) {
	result := oci_bds.MetricBasedHorizontalScaleOutConfig{}
func (s *BdsAutoScalingConfigurationResourceCrud) mapToMetricBasedVerticalScaleDownConfig(fieldKeyFormat string) (oci_bds.MetricBasedVerticalScaleDownConfig, error) {
	result := oci_bds.MetricBasedVerticalScaleDownConfig{}
func (s *BdsAutoScalingConfigurationResourceCrud) mapToMetricBasedVerticalScaleUpConfig(fieldKeyFormat string) (oci_bds.MetricBasedVerticalScaleUpConfig, error) {
	result := oci_bds.MetricBasedVerticalScaleUpConfig{}
func (s *BdsAutoScalingConfigurationResourceCrud) mapToMetricThresholdRule(fieldKeyFormat string) (oci_bds.MetricThresholdRule, error) {
	result := oci_bds.MetricThresholdRule{}
func (s *BdsAutoScalingConfigurationResourceCrud) mapToTimeAndHorizontalScalingConfig(fieldKeyFormat string) (oci_bds.TimeAndHorizontalScalingConfig, error) {
	result := oci_bds.TimeAndHorizontalScalingConfig{}
func (s *BdsAutoScalingConfigurationResourceCrud) mapToTimeAndVerticalScalingConfig(fieldKeyFormat string) (oci_bds.TimeAndVerticalScalingConfig, error) {
	result := oci_bds.TimeAndVerticalScalingConfig{}
func (s *BdsAutoScalingConfigurationResourceCrud) mapToVerticalScalingScheduleDetails(fieldKeyFormat string) (oci_bds.VerticalScalingScheduleDetails, error) {
	var baseObject oci_bds.VerticalScalingScheduleDetails

=== ./internal/service/bds/bds_bds_instance_get_os_patch_data_source.go ===
func BdsBdsInstanceGetOsPatchDataSource() *schema.Resource {
	return &schema.Resource{
func readBdsBdsInstanceGetOsPatch(d *schema.ResourceData, m interface{}) error {
	sync := &BdsBdsInstanceGetOsPatchDataSourceCrud{}
func (s *BdsBdsInstanceGetOsPatchDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *BdsBdsInstanceGetOsPatchDataSourceCrud) Get() error {
	request := oci_bds.GetOsPatchDetailsRequest{}
func (s *BdsBdsInstanceGetOsPatchDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/bds/bds_bds_instance_os_patch_action_resource.go ===
func BdsBdsInstanceOSPatchActionResource() *schema.Resource {
	return &schema.Resource{
func createBdsBdsInstanceOSPatchAction(d *schema.ResourceData, m interface{}) error {
	sync := &BdsBdsInstanceOSPatchActionResourceCrud{}
func readBdsBdsInstanceOSPatchAction(d *schema.ResourceData, m interface{}) error {
	return nil
func deleteBdsBdsInstanceOSPatchAction(d *schema.ResourceData, m interface{}) error {
	return nil
func (s *BdsBdsInstanceOSPatchActionResourceCrud) ID() string {
	return tfresource.GenerateDataSourceHashID("BdsBdsInstanceOSPatchActionResource-", BdsBdsInstanceOSPatchActionResource(), s.D)
func (s *BdsBdsInstanceOSPatchActionResourceCrud) Create() error {
	request := oci_bds.InstallOsPatchRequest{}
func (s *BdsBdsInstanceOSPatchActionResourceCrud) getBdsInstanceOSPatchActionFromWorkRequest(workId *string, retryPolicy *oci_common.RetryPolicy,
	actionTypeEnum oci_bds.ActionTypesEnum, timeout time.Duration) error {
func (s *BdsBdsInstanceOSPatchActionResourceCrud) SetData() error {
	return nil
func (s *BdsBdsInstanceOSPatchActionResourceCrud) mapToPatchingConfigs(fieldKeyFormat string) (oci_bds.PatchingConfigs, error) {
	var baseObject oci_bds.PatchingConfigs

=== ./internal/service/bds/bds_bds_instance_data_source.go ===
func BdsBdsInstanceDataSource() *schema.Resource {
	fieldMap := make(map[string]*schema.Schema)
func readSingularBdsBdsInstance(d *schema.ResourceData, m interface{}) error {
	sync := &BdsBdsInstanceDataSourceCrud{}
func (s *BdsBdsInstanceDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *BdsBdsInstanceDataSourceCrud) Get() error {
	request := oci_bds.GetBdsInstanceRequest{}
func (s *BdsBdsInstanceDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/bds/bds_bds_instance_patch_action_resource.go ===
func BdsBdsInstancePatchActionResource() *schema.Resource {
	return &schema.Resource{
func createBdsBdsInstancePatchAction(d *schema.ResourceData, m interface{}) error {
	sync := &BdsBdsInstancePatchActionResourceCrud{}
func readBdsBdsInstancePatchAction(d *schema.ResourceData, m interface{}) error {
	return nil
func deleteBdsBdsInstancePatchAction(d *schema.ResourceData, m interface{}) error {
	return nil
func (s *BdsBdsInstancePatchActionResourceCrud) ID() string {
	return tfresource.GenerateDataSourceHashID("BdsBdsInstancePatchActionResource-", BdsBdsInstancePatchActionResource(), s.D)
func (s *BdsBdsInstancePatchActionResourceCrud) Create() error {
	request := oci_bds.InstallPatchRequest{}
func (s *BdsBdsInstancePatchActionResourceCrud) getBdsInstancePatchActionFromWorkRequest(workId *string, retryPolicy *oci_common.RetryPolicy,
	actionTypeEnum oci_bds.ActionTypesEnum, timeout time.Duration) error {
func (s *BdsBdsInstancePatchActionResourceCrud) SetData() error {
	return nil
func (s *BdsBdsInstancePatchActionResourceCrud) mapToOdhPatchingConfig(fieldKeyFormat string) (oci_bds.OdhPatchingConfig, error) {
	var baseObject oci_bds.OdhPatchingConfig

=== ./internal/service/bds/bds_bds_instance_api_key_data_source.go ===
func BdsBdsInstanceApiKeyDataSource() *schema.Resource {
	fieldMap := make(map[string]*schema.Schema)
func readSingularBdsBdsInstanceApiKey(d *schema.ResourceData, m interface{}) error {
	sync := &BdsBdsInstanceApiKeyDataSourceCrud{}
func (s *BdsBdsInstanceApiKeyDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *BdsBdsInstanceApiKeyDataSourceCrud) Get() error {
	request := oci_bds.GetBdsApiKeyRequest{}
func (s *BdsBdsInstanceApiKeyDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/bds/bds_bds_instance_resource_principal_configurations_data_source.go ===
func BdsBdsInstanceResourcePrincipalConfigurationsDataSource() *schema.Resource {
	return &schema.Resource{
func readBdsBdsInstanceResourcePrincipalConfigurations(d *schema.ResourceData, m interface{}) error {
	sync := &BdsBdsInstanceResourcePrincipalConfigurationsDataSourceCrud{}
func (s *BdsBdsInstanceResourcePrincipalConfigurationsDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *BdsBdsInstanceResourcePrincipalConfigurationsDataSourceCrud) Get() error {
	request := oci_bds.ListResourcePrincipalConfigurationsRequest{}
func (s *BdsBdsInstanceResourcePrincipalConfigurationsDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/bds/bds_bds_instance_metastore_config_data_source.go ===
func BdsBdsInstanceMetastoreConfigDataSource() *schema.Resource {
	fieldMap := make(map[string]*schema.Schema)
func readSingularBdsBdsInstanceMetastoreConfig(d *schema.ResourceData, m interface{}) error {
	sync := &BdsBdsInstanceMetastoreConfigDataSourceCrud{}
func (s *BdsBdsInstanceMetastoreConfigDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *BdsBdsInstanceMetastoreConfigDataSourceCrud) Get() error {
	request := oci_bds.GetBdsMetastoreConfigurationRequest{}
func (s *BdsBdsInstanceMetastoreConfigDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/bds/bds_bds_instance_patches_data_source.go ===
func BdsBdsInstancePatchesDataSource() *schema.Resource {
	return &schema.Resource{
func readBdsBdsInstancePatches(d *schema.ResourceData, m interface{}) error {
	sync := &BdsBdsInstancePatchesDataSourceCrud{}
func (s *BdsBdsInstancePatchesDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *BdsBdsInstancePatchesDataSourceCrud) Get() error {
	request := oci_bds.ListPatchesRequest{}
func (s *BdsBdsInstancePatchesDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/bds/bds_auto_scaling_configurations_data_source.go ===
func BdsAutoScalingConfigurationsDataSource() *schema.Resource {
	return &schema.Resource{
func readBdsAutoScalingConfigurations(d *schema.ResourceData, m interface{}) error {
	sync := &BdsAutoScalingConfigurationsDataSourceCrud{}
func (s *BdsAutoScalingConfigurationsDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *BdsAutoScalingConfigurationsDataSourceCrud) Get() error {
	request := oci_bds.ListAutoScalingConfigurationsRequest{}
func (s *BdsAutoScalingConfigurationsDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/bds/bds_bds_instance_resource_principal_configuration_resource.go ===
func BdsBdsInstanceResourcePrincipalConfigurationResource() *schema.Resource {
	return &schema.Resource{
func createBdsBdsInstanceResourcePrincipalConfiguration(d *schema.ResourceData, m interface{}) error {
	sync := &BdsBdsInstanceResourcePrincipalConfigurationResourceCrud{}
func readBdsBdsInstanceResourcePrincipalConfiguration(d *schema.ResourceData, m interface{}) error {
	sync := &BdsBdsInstanceResourcePrincipalConfigurationResourceCrud{}
func updateBdsBdsInstanceResourcePrincipalConfiguration(d *schema.ResourceData, m interface{}) error {
	sync := &BdsBdsInstanceResourcePrincipalConfigurationResourceCrud{}
func deleteBdsBdsInstanceResourcePrincipalConfiguration(d *schema.ResourceData, m interface{}) error {
	sync := &BdsBdsInstanceResourcePrincipalConfigurationResourceCrud{}
func (s *BdsBdsInstanceResourcePrincipalConfigurationResourceCrud) ID() string {
	return GetBdsInstanceResourcePrincipalConfigurationCompositeId(s.D.Get("bds_instance_id").(string), *s.Res.Id)
func (s *BdsBdsInstanceResourcePrincipalConfigurationResourceCrud) CreatedPending() []string {
	return []string{
func (s *BdsBdsInstanceResourcePrincipalConfigurationResourceCrud) CreatedTarget() []string {
	return []string{
func (s *BdsBdsInstanceResourcePrincipalConfigurationResourceCrud) DeletedPending() []string {
	return []string{
func (s *BdsBdsInstanceResourcePrincipalConfigurationResourceCrud) DeletedTarget() []string {
	return []string{
func (s *BdsBdsInstanceResourcePrincipalConfigurationResourceCrud) Create() error {
	request := oci_bds.CreateResourcePrincipalConfigurationRequest{}
func (s *BdsBdsInstanceResourcePrincipalConfigurationResourceCrud) getBdsInstanceResourcePrincipalConfigurationFromWorkRequest(workId *string, retryPolicy *oci_common.RetryPolicy,
	actionTypeEnum oci_bds.ActionTypesEnum, timeout time.Duration) error {
func bdsInstanceResourcePrincipalConfigurationWorkRequestShouldRetryFunc(timeout time.Duration) func(response oci_common.OCIOperationResponse) bool {
	startTime := time.Now()
func bdsInstanceResourcePrincipalConfigurationWaitForWorkRequest(wId *string, entityType string, action oci_bds.ActionTypesEnum,
	timeout time.Duration, disableFoundRetries bool, client *oci_bds.BdsClient) (*string, error) {
func getErrorFromBdsBdsInstanceResourcePrincipalConfigurationWorkRequest(client *oci_bds.BdsClient, workId *string, retryPolicy *oci_common.RetryPolicy, entityType string, action oci_bds.ActionTypesEnum) error {
	response, err := client.ListWorkRequestErrors(context.Background(),
func (s *BdsBdsInstanceResourcePrincipalConfigurationResourceCrud) Get() error {
	request := oci_bds.GetResourcePrincipalConfigurationRequest{}
func (s *BdsBdsInstanceResourcePrincipalConfigurationResourceCrud) Update() error {
	request := oci_bds.UpdateResourcePrincipalConfigurationRequest{}
func (s *BdsBdsInstanceResourcePrincipalConfigurationResourceCrud) SetData() error {

func GetBdsInstanceResourcePrincipalConfigurationCompositeId(bdsInstanceId string, resourcePrincipalConfigurationId string) string {
	bdsInstanceId = url.PathEscape(bdsInstanceId)
func parseBdsInstanceResourcePrincipalConfigurationCompositeId(compositeId string) (bdsInstanceId string, resourcePrincipalConfigurationId string, err error) {
	parts := strings.Split(compositeId, "/")
func (s *BdsBdsInstanceResourcePrincipalConfigurationResourceCrud) ForceRefreshResourcePrincipal() error {
	request := oci_bds.ForceRefreshResourcePrincipalRequest{}
func (s *BdsBdsInstanceResourcePrincipalConfigurationResourceCrud) Delete() error {
	request := oci_bds.RemoveResourcePrincipalConfigurationRequest{}

=== ./internal/service/bds/bds_bds_instance_api_keys_data_source.go ===
func BdsBdsInstanceApiKeysDataSource() *schema.Resource {
	return &schema.Resource{
func readBdsBdsInstanceApiKeys(d *schema.ResourceData, m interface{}) error {
	sync := &BdsBdsInstanceApiKeysDataSourceCrud{}
func (s *BdsBdsInstanceApiKeysDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *BdsBdsInstanceApiKeysDataSourceCrud) Get() error {
	request := oci_bds.ListBdsApiKeysRequest{}
func (s *BdsBdsInstanceApiKeysDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/bds/bds_bds_instance_operation_certificate_managements_management_resource.go ===
func BdsBdsInstanceOperationCertificateManagementsManagementResource() *schema.Resource {
	return &schema.Resource{
func createBdsBdsInstanceOperationCertificateManagementsManagement(d *schema.ResourceData, m interface{}) error {
	sync := &BdsBdsInstanceOperationCertificateManagementsManagementResourceCrud{}
func readBdsBdsInstanceOperationCertificateManagementsManagement(d *schema.ResourceData, m interface{}) error {
	return nil
func updateBdsBdsInstanceOperationCertificateManagementsManagement(d *schema.ResourceData, m interface{}) error {
	sync := &BdsBdsInstanceOperationCertificateManagementsManagementResourceCrud{}
func deleteBdsBdsInstanceOperationCertificateManagementsManagement(d *schema.ResourceData, m interface{}) error {
	sync := &BdsBdsInstanceOperationCertificateManagementsManagementResourceCrud{}
func (s *BdsBdsInstanceOperationCertificateManagementsManagementResourceCrud) ID() string {
	return tfresource.GenerateDataSourceHashID("BdsBdsInstanceOperationCertificateManagementsManagementResource-", BdsBdsInstanceOperationCertificateManagementsManagementResource(), s.D)
func (s *BdsBdsInstanceOperationCertificateManagementsManagementResourceCrud) Create() error {
	var operationEnable bool
func (s *BdsBdsInstanceOperationCertificateManagementsManagementResourceCrud) getBdsInstanceOperationCertificateManagementsManagementFromWorkRequest(workId *string, retryPolicy *oci_common.RetryPolicy,
	actionTypeEnum oci_bds.ActionTypesEnum, timeout time.Duration) error {
func (s *BdsBdsInstanceOperationCertificateManagementsManagementResourceCrud) Update() error {
	var operationEnable bool
func (s *BdsBdsInstanceOperationCertificateManagementsManagementResourceCrud) Delete() error {
	var operation bool
func (s *BdsBdsInstanceOperationCertificateManagementsManagementResourceCrud) SetData() error {
	return nil
func (s *BdsBdsInstanceOperationCertificateManagementsManagementResourceCrud) mapToHostCertDetails(fieldKeyFormat string) (oci_bds.HostCertDetails, error) {
	result := oci_bds.HostCertDetails{}

=== ./internal/service/bds/bds_auto_scaling_configuration_data_source.go ===
func BdsAutoScalingConfigurationDataSource() *schema.Resource {
	fieldMap := make(map[string]*schema.Schema)
func readSingularBdsAutoScalingConfiguration(d *schema.ResourceData, m interface{}) error {
	sync := &BdsAutoScalingConfigurationDataSourceCrud{}
func (s *BdsAutoScalingConfigurationDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *BdsAutoScalingConfigurationDataSourceCrud) Get() error {
	request := oci_bds.GetAutoScalingConfigurationRequest{}
func (s *BdsAutoScalingConfigurationDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/bds/bds_bds_instance_metastore_config_resource.go ===
func BdsBdsInstanceMetastoreConfigResource() *schema.Resource {
	return &schema.Resource{
func createBdsBdsInstanceMetastoreConfig(d *schema.ResourceData, m interface{}) error {
	sync := &BdsBdsInstanceMetastoreConfigResourceCrud{}
func readBdsBdsInstanceMetastoreConfig(d *schema.ResourceData, m interface{}) error {
	sync := &BdsBdsInstanceMetastoreConfigResourceCrud{}
func updateBdsBdsInstanceMetastoreConfig(d *schema.ResourceData, m interface{}) error {
	sync := &BdsBdsInstanceMetastoreConfigResourceCrud{}
func deleteBdsBdsInstanceMetastoreConfig(d *schema.ResourceData, m interface{}) error {
	sync := &BdsBdsInstanceMetastoreConfigResourceCrud{}
func (s *BdsBdsInstanceMetastoreConfigResourceCrud) ID() string {
	return GetBdsInstanceMetastoreConfigCompositeId(s.D.Get("bds_instance_id").(string), *s.Res.Id)
func (s *BdsBdsInstanceMetastoreConfigResourceCrud) CreatedPending() []string {
	return []string{
func (s *BdsBdsInstanceMetastoreConfigResourceCrud) CreatedTarget() []string {
	return []string{
func (s *BdsBdsInstanceMetastoreConfigResourceCrud) DeletedPending() []string {
	return []string{
func (s *BdsBdsInstanceMetastoreConfigResourceCrud) DeletedTarget() []string {
	return []string{
func (s *BdsBdsInstanceMetastoreConfigResourceCrud) Create() error {
	request := oci_bds.CreateBdsMetastoreConfigurationRequest{}
func (s *BdsBdsInstanceMetastoreConfigResourceCrud) setIdFromWorkRequest(workId *string) {
	var identifier_str string
func (s *BdsBdsInstanceMetastoreConfigResourceCrud) getBdsInstanceMetastoreConfigFromWorkRequest(workId *string, retryPolicy *oci_common.RetryPolicy,
	actionTypeEnum oci_bds.ActionTypesEnum, timeout time.Duration) error {
func (s *BdsBdsInstanceMetastoreConfigResourceCrud) Get() error {
	request := oci_bds.GetBdsMetastoreConfigurationRequest{}
func (s *BdsBdsInstanceMetastoreConfigResourceCrud) Update() error {

func (s *BdsBdsInstanceMetastoreConfigResourceCrud) Delete() error {
	request := oci_bds.DeleteBdsMetastoreConfigurationRequest{}
func (s *BdsBdsInstanceMetastoreConfigResourceCrud) SetData() error {

func (s *BdsBdsInstanceMetastoreConfigResourceCrud) activateBdsInstanceMetastoreConfig() error {


=== ./internal/service/bds/bds_bds_instances_data_source.go ===
func BdsBdsInstancesDataSource() *schema.Resource {
	return &schema.Resource{
func readBdsBdsInstances(d *schema.ResourceData, m interface{}) error {
	sync := &BdsBdsInstancesDataSourceCrud{}
func (s *BdsBdsInstancesDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *BdsBdsInstancesDataSourceCrud) Get() error {
	request := oci_bds.ListBdsInstancesRequest{}
func (s *BdsBdsInstancesDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/bds/bds_bds_instance_list_os_patches_data_source.go ===
func BdsBdsInstanceListOsPatchesDataSource() *schema.Resource {
	return &schema.Resource{
func readBdsBdsInstanceListOsPatches(d *schema.ResourceData, m interface{}) error {
	sync := &BdsBdsInstanceListOsPatchesDataSourceCrud{}
func (s *BdsBdsInstanceListOsPatchesDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *BdsBdsInstanceListOsPatchesDataSourceCrud) Get() error {
	request := oci_bds.ListOsPatchesRequest{}
func (s *BdsBdsInstanceListOsPatchesDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/bds/bds_bds_instance_resource.go ===
func BdsBdsInstanceResource() *schema.Resource {
	return &schema.Resource{
func createBdsBdsInstance(d *schema.ResourceData, m interface{}) error {
	sync := &BdsBdsInstanceResourceCrud{}
func readBdsBdsInstance(d *schema.ResourceData, m interface{}) error {
	sync := &BdsBdsInstanceResourceCrud{}
func updateBdsBdsInstance(d *schema.ResourceData, m interface{}) error {
	sync := &BdsBdsInstanceResourceCrud{}
func deleteBdsBdsInstance(d *schema.ResourceData, m interface{}) error {
	sync := &BdsBdsInstanceResourceCrud{}
func (s *BdsBdsInstanceResourceCrud) ID() string {
	return *s.Res.Id
func (s *BdsBdsInstanceResourceCrud) CreatedPending() []string {
	return []string{
func (s *BdsBdsInstanceResourceCrud) CreatedTarget() []string {
	return []string{
func (s *BdsBdsInstanceResourceCrud) UpdatedPending() []string {
	return []string{
func (s *BdsBdsInstanceResourceCrud) UpdatedTarget() []string {
	return []string{
func (s *BdsBdsInstanceResourceCrud) DeletedPending() []string {
	return []string{
func (s *BdsBdsInstanceResourceCrud) DeletedTarget() []string {
	return []string{
func (s *BdsBdsInstanceResourceCrud) Create() error {
	request := oci_bds.CreateBdsInstanceRequest{}
func (s *BdsBdsInstanceResourceCrud) getBdsInstanceFromWorkRequest(workId *string, retryPolicy *oci_common.RetryPolicy,
	actionTypeEnum oci_bds.ActionTypesEnum, timeout time.Duration) error {
func (s *BdsBdsInstanceResourceCrud) Get() error {
	request := oci_bds.GetBdsInstanceRequest{}
func (s *BdsBdsInstanceResourceCrud) Update() error {
	isKafkaBrokerAdded := false
func (s *BdsBdsInstanceResourceCrud) updateComputeWorkersIfRequired() (bool, error) {
	areWorkersAdded := false
func (s *BdsBdsInstanceResourceCrud) updateEdgeIfRequired() (bool, error) {
	areEdgeAdded := false
func (s *BdsBdsInstanceResourceCrud) updateKafkaBrokerIfRequired() (bool, error) {
	areKafkaBrokerAdded := false
func (s *BdsBdsInstanceResourceCrud) Delete() error {
	request := oci_bds.DeleteBdsInstanceRequest{}
func (s *BdsBdsInstanceResourceCrud) SetData() error {
	if s.Res.BootstrapScriptUrl != nil {
func (s *BdsBdsInstanceResourceCrud) StartBdsInstance() error {
	request := oci_bds.StartBdsInstanceRequest{}
func (s *BdsBdsInstanceResourceCrud) StopBdsInstance() error {
	request := oci_bds.StopBdsInstanceRequest{}
func (s *BdsBdsInstanceResourceCrud) AddKafka() error {

func (s *BdsBdsInstanceResourceCrud) ExecuteBootstrapScript() error {
	request := oci_bds.ExecuteBootstrapScriptRequest{}
func (s *BdsBdsInstanceResourceCrud) deleteShapeConfigIfMissingInInput(node_type string, node_map map[string]interface{}) {
	if _, ok := s.D.GetOkExists(node_type); ok {
func (s *BdsBdsInstanceResourceCrud) RemoveKafka() error {
	request := oci_bds.RemoveKafkaRequest{}
func (s *BdsBdsInstanceResourceCrud) mapToCreateNodeDetails(fieldKeyFormat, nodeType string) (oci_bds.CreateNodeDetails, error) {
	result := oci_bds.CreateNodeDetails{}
func (s *BdsBdsInstanceResourceCrud) mapToNetworkConfig(fieldKeyFormat string) (oci_bds.NetworkConfig, error) {
	result := oci_bds.NetworkConfig{}
func (s *BdsBdsInstanceResourceCrud) mapToShapeConfigDetails(fieldKeyFormat string) (oci_bds.ShapeConfigDetails, error) {
	result := oci_bds.ShapeConfigDetails{}
func (s *BdsBdsInstanceResourceCrud) updateCompartment(compartment interface{}) error {
	changeCompartmentRequest := oci_bds.ChangeBdsInstanceCompartmentRequest{}
func (s *BdsBdsInstanceResourceCrud) updateWorkerBlockStorage(id string, clusterAdminPassword interface{}, blockVolumeSizeInGBs int64, nodeType oci_bds.AddBlockStorageDetailsNodeTypeEnum) error {
	addBlockStorageRequest := oci_bds.AddBlockStorageRequest{}
func (s *BdsBdsInstanceResourceCrud) updateWorkerNode(id string, clusterAdminPassword interface{}, numberOfWorker int, nodeType oci_bds.AddWorkerNodesDetailsNodeTypeEnum, blockVolumeSizeInGBs *int64, shape *string, shapeConfig *oci_bds.ShapeConfigDetails) error {
	addWorkerNodesRequest := oci_bds.AddWorkerNodesRequest{}
func (s *BdsBdsInstanceResourceCrud) updateMasterNode(id string, clusterAdminPassword interface{}, numberOfMaster int, blockVolumeSizeInGBs *int64, shape *string, shapeConfig *oci_bds.ShapeConfigDetails) error {
	addMasterNodesRequest := oci_bds.AddMasterNodesRequest{}
func (s *BdsBdsInstanceResourceCrud) updateUtilityNode(id string, clusterAdminPassword interface{}, numberOfUtility int, blockVolumeSizeInGBs *int64, shape *string, shapeConfig *oci_bds.ShapeConfigDetails) error {
	addUtilityNodesRequest := oci_bds.AddUtilityNodesRequest{}
func (s *BdsBdsInstanceResourceCrud) addCloudSql(request oci_bds.AddCloudSqlRequest) error {
	response, err := s.Client.AddCloudSql(context.Background(), request)
func (s *BdsBdsInstanceResourceCrud) deleteCloudSql(request oci_bds.RemoveCloudSqlRequest) error {
	response, err := s.Client.RemoveCloudSql(context.Background(), request)
func ShapeChangeDiffSuppressFunction(nodeType string, d *schema.ResourceData) bool {
	var ignoreMasterShape, ignoreUtilShape, ignoreWorkerShape, ignoreComputeWorkerShape, ignoreEdgeShape, ignoreKafkaBrokerShape = false, false, false, false, false, false

=== ./internal/service/bds/bds_export.go ===
func processBdsInstanceMetastoreConfigs(ctx *tf_export.ResourceDiscoveryContext, resources []*tf_export.OCIResource) ([]*tf_export.OCIResource, error) {
	for _, resource := range resources {
func processBdsInstanceApiKeys(ctx *tf_export.ResourceDiscoveryContext, resources []*tf_export.OCIResource) ([]*tf_export.OCIResource, error) {
	for _, resource := range resources {
func getBdsBdsInstanceApiKeyId(resource *tf_export.OCIResource) (string, error) {

func getBdsBdsInstanceResourcePrincipalConfigurationId(resource *tf_export.OCIResource) (string, error) {


=== ./internal/service/bds/register_resource.go ===
func RegisterResource() {
	tfresource.RegisterResource("oci_bds_auto_scaling_configuration", BdsAutoScalingConfigurationResource())

=== ./internal/service/osmanagement/osmanagement_managed_instance_data_source.go ===
func OsmanagementManagedInstanceDataSource() *schema.Resource {
	fieldMap := make(map[string]*schema.Schema)
func readSingularOsmanagementManagedInstance(d *schema.ResourceData, m interface{}) error {
	sync := &OsmanagementManagedInstanceDataSourceCrud{}
func (s *OsmanagementManagedInstanceDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *OsmanagementManagedInstanceDataSourceCrud) Get() error {
	request := oci_osmanagement.GetManagedInstanceRequest{}
func (s *OsmanagementManagedInstanceDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/osmanagement/osmanagement_software_sources_data_source.go ===
func OsmanagementSoftwareSourcesDataSource() *schema.Resource {
	return &schema.Resource{
func readOsmanagementSoftwareSources(d *schema.ResourceData, m interface{}) error {
	sync := &OsmanagementSoftwareSourcesDataSourceCrud{}
func (s *OsmanagementSoftwareSourcesDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *OsmanagementSoftwareSourcesDataSourceCrud) Get() error {
	request := oci_osmanagement.ListSoftwareSourcesRequest{}
func (s *OsmanagementSoftwareSourcesDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/osmanagement/osmanagement_software_source_data_source.go ===
func OsmanagementSoftwareSourceDataSource() *schema.Resource {
	fieldMap := make(map[string]*schema.Schema)
func readSingularOsmanagementSoftwareSource(d *schema.ResourceData, m interface{}) error {
	sync := &OsmanagementSoftwareSourceDataSourceCrud{}
func (s *OsmanagementSoftwareSourceDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *OsmanagementSoftwareSourceDataSourceCrud) Get() error {
	request := oci_osmanagement.GetSoftwareSourceRequest{}
func (s *OsmanagementSoftwareSourceDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/osmanagement/osmanagement_managed_instance_module_streams_data_source.go ===
func OsmanagementManagedInstanceModuleStreamsDataSource() *schema.Resource {
	return &schema.Resource{
func readOsmanagementManagedInstanceModuleStreams(d *schema.ResourceData, m interface{}) error {
	sync := &OsmanagementManagedInstanceModuleStreamsDataSourceCrud{}
func (s *OsmanagementManagedInstanceModuleStreamsDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *OsmanagementManagedInstanceModuleStreamsDataSourceCrud) Get() error {
	request := oci_osmanagement.ListModuleStreamsOnManagedInstanceRequest{}
func (s *OsmanagementManagedInstanceModuleStreamsDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/osmanagement/osmanagement_managed_instance_groups_data_source.go ===
func OsmanagementManagedInstanceGroupsDataSource() *schema.Resource {
	return &schema.Resource{
func readOsmanagementManagedInstanceGroups(d *schema.ResourceData, m interface{}) error {
	sync := &OsmanagementManagedInstanceGroupsDataSourceCrud{}
func (s *OsmanagementManagedInstanceGroupsDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *OsmanagementManagedInstanceGroupsDataSourceCrud) Get() error {
	request := oci_osmanagement.ListManagedInstanceGroupsRequest{}
func (s *OsmanagementManagedInstanceGroupsDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/osmanagement/osmanagement_managed_instance_group_data_source.go ===
func OsmanagementManagedInstanceGroupDataSource() *schema.Resource {
	fieldMap := make(map[string]*schema.Schema)
func readSingularOsmanagementManagedInstanceGroup(d *schema.ResourceData, m interface{}) error {
	sync := &OsmanagementManagedInstanceGroupDataSourceCrud{}
func (s *OsmanagementManagedInstanceGroupDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *OsmanagementManagedInstanceGroupDataSourceCrud) Get() error {
	request := oci_osmanagement.GetManagedInstanceGroupRequest{}
func (s *OsmanagementManagedInstanceGroupDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/osmanagement/osmanagement_software_source_stream_profiles_data_source.go ===
func OsmanagementSoftwareSourceStreamProfilesDataSource() *schema.Resource {
	return &schema.Resource{
func readOsmanagementSoftwareSourceStreamProfiles(d *schema.ResourceData, m interface{}) error {
	sync := &OsmanagementSoftwareSourceStreamProfilesDataSourceCrud{}
func (s *OsmanagementSoftwareSourceStreamProfilesDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *OsmanagementSoftwareSourceStreamProfilesDataSourceCrud) Get() error {
	request := oci_osmanagement.ListModuleStreamProfilesRequest{}
func (s *OsmanagementSoftwareSourceStreamProfilesDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/osmanagement/osmanagement_managed_instance_group_resource.go ===
func OsmanagementManagedInstanceGroupResource() *schema.Resource {
	return &schema.Resource{
func createOsmanagementManagedInstanceGroup(d *schema.ResourceData, m interface{}) error {
	sync := &OsmanagementManagedInstanceGroupResourceCrud{}
func readOsmanagementManagedInstanceGroup(d *schema.ResourceData, m interface{}) error {
	sync := &OsmanagementManagedInstanceGroupResourceCrud{}
func updateOsmanagementManagedInstanceGroup(d *schema.ResourceData, m interface{}) error {
	sync := &OsmanagementManagedInstanceGroupResourceCrud{}
func deleteOsmanagementManagedInstanceGroup(d *schema.ResourceData, m interface{}) error {
	sync := &OsmanagementManagedInstanceGroupResourceCrud{}
func (s *OsmanagementManagedInstanceGroupResourceCrud) ID() string {
	return *s.Res.Id
func (s *OsmanagementManagedInstanceGroupResourceCrud) CreatedPending() []string {
	return []string{
func (s *OsmanagementManagedInstanceGroupResourceCrud) CreatedTarget() []string {
	return []string{
func (s *OsmanagementManagedInstanceGroupResourceCrud) DeletedPending() []string {
	return []string{
func (s *OsmanagementManagedInstanceGroupResourceCrud) DeletedTarget() []string {
	return []string{
func (s *OsmanagementManagedInstanceGroupResourceCrud) Create() error {
	request := oci_osmanagement.CreateManagedInstanceGroupRequest{}
func (s *OsmanagementManagedInstanceGroupResourceCrud) Get() error {
	request := oci_osmanagement.GetManagedInstanceGroupRequest{}
func (s *OsmanagementManagedInstanceGroupResourceCrud) Update() error {
	if compartment, ok := s.D.GetOkExists("compartment_id"); ok && s.D.HasChange("compartment_id") {
func (s *OsmanagementManagedInstanceGroupResourceCrud) Delete() error {
	request := oci_osmanagement.DeleteManagedInstanceGroupRequest{}
func (s *OsmanagementManagedInstanceGroupResourceCrud) SetData() error {
	if s.Res.CompartmentId != nil {
func (s *OsmanagementManagedInstanceGroupResourceCrud) updateCompartment(compartment interface{}) error {
	changeCompartmentRequest := oci_osmanagement.ChangeManagedInstanceGroupCompartmentRequest{}

=== ./internal/service/osmanagement/osmanagement_managed_instance_event_report_data_source.go ===
func OsmanagementManagedInstanceEventReportDataSource() *schema.Resource {
	return &schema.Resource{
func readSingularOsmanagementManagedInstanceEventReport(d *schema.ResourceData, m interface{}) error {
	sync := &OsmanagementManagedInstanceEventReportDataSourceCrud{}
func (s *OsmanagementManagedInstanceEventReportDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *OsmanagementManagedInstanceEventReportDataSourceCrud) Get() error {
	request := oci_osmanagement.GetEventReportRequest{}
func (s *OsmanagementManagedInstanceEventReportDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/osmanagement/osmanagement_managed_instance_stream_profiles_data_source.go ===
func OsmanagementManagedInstanceStreamProfilesDataSource() *schema.Resource {
	return &schema.Resource{
func readOsmanagementManagedInstanceStreamProfiles(d *schema.ResourceData, m interface{}) error {
	sync := &OsmanagementManagedInstanceStreamProfilesDataSourceCrud{}
func (s *OsmanagementManagedInstanceStreamProfilesDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *OsmanagementManagedInstanceStreamProfilesDataSourceCrud) Get() error {
	request := oci_osmanagement.ListModuleStreamProfilesOnManagedInstanceRequest{}
func (s *OsmanagementManagedInstanceStreamProfilesDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/osmanagement/osmanagement_software_source_module_stream_profile_data_source.go ===
func OsmanagementSoftwareSourceModuleStreamProfileDataSource() *schema.Resource {
	return &schema.Resource{
func readSingularOsmanagementSoftwareSourceModuleStreamProfile(d *schema.ResourceData, m interface{}) error {
	sync := &OsmanagementSoftwareSourceModuleStreamProfileDataSourceCrud{}
func (s *OsmanagementSoftwareSourceModuleStreamProfileDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *OsmanagementSoftwareSourceModuleStreamProfileDataSourceCrud) Get() error {
	request := oci_osmanagement.GetModuleStreamProfileRequest{}
func (s *OsmanagementSoftwareSourceModuleStreamProfileDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/osmanagement/osmanagement_managed_instance_resource.go ===
func OsmanagementManagedInstanceResource() *schema.Resource {
	return &schema.Resource{
func createOsmanagementManagedInstance(d *schema.ResourceData, m interface{}) error {
	sync := &OsmanagementManagedInstanceResourceCrud{}
func readOsmanagementManagedInstance(d *schema.ResourceData, m interface{}) error {
	sync := &OsmanagementManagedInstanceResourceCrud{}
func updateOsmanagementManagedInstance(d *schema.ResourceData, m interface{}) error {
	sync := &OsmanagementManagedInstanceResourceCrud{}
func deleteOsmanagementManagedInstance(d *schema.ResourceData, m interface{}) error {
	return nil
func (s *OsmanagementManagedInstanceResourceCrud) ID() string {
	return *s.Res.Id
func (s *OsmanagementManagedInstanceResourceCrud) Create() error {
	request := oci_osmanagement.UpdateManagedInstanceRequest{}
func (s *OsmanagementManagedInstanceResourceCrud) Get() error {
	request := oci_osmanagement.GetManagedInstanceRequest{}
func (s *OsmanagementManagedInstanceResourceCrud) Update() error {
	request := oci_osmanagement.UpdateManagedInstanceRequest{}
func (s *OsmanagementManagedInstanceResourceCrud) SetData() error {
	if s.Res.Autonomous != nil {

=== ./internal/service/osmanagement/osmanagement_managed_instances_data_source.go ===
func OsmanagementManagedInstancesDataSource() *schema.Resource {
	return &schema.Resource{
func readOsmanagementManagedInstances(d *schema.ResourceData, m interface{}) error {
	sync := &OsmanagementManagedInstancesDataSourceCrud{}
func (s *OsmanagementManagedInstancesDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *OsmanagementManagedInstancesDataSourceCrud) Get() error {
	request := oci_osmanagement.ListManagedInstancesRequest{}
func (s *OsmanagementManagedInstancesDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/osmanagement/osmanagement_managed_instance_management_resource.go ===
func OsmanagementManagedInstanceManagementResource() *schema.Resource {
	return &schema.Resource{
func createOsmanagementManagedInstanceManagement(d *schema.ResourceData, m interface{}) error {
	sync := &OsmanagementManagedInstanceManagementResourceCrud{}
func readOsmanagementManagedInstanceManagement(d *schema.ResourceData, m interface{}) error {
	sync := &OsmanagementManagedInstanceManagementResourceCrud{}
func updateOsmanagementManagedInstanceManagement(d *schema.ResourceData, m interface{}) error {
	sync := &OsmanagementManagedInstanceManagementResourceCrud{}
func deleteOsmanagementManagedInstanceManagement(d *schema.ResourceData, m interface{}) error {
	return nil
func (s *OsmanagementManagedInstanceManagementResourceCrud) ID() string {
	return *s.Res.Id
func (s *OsmanagementManagedInstanceManagementResourceCrud) Create() error {
	e := s.Get()
func (s *OsmanagementManagedInstanceManagementResourceCrud) Update() error {

func (s *OsmanagementManagedInstanceManagementResourceCrud) Get() error {
	request := oci_osmanagement.GetManagedInstanceRequest{}
func (s *OsmanagementManagedInstanceManagementResourceCrud) SetData() error {
	if s.Res == nil {
func (s *OsmanagementManagedInstanceManagementResourceCrud) mapToSoftwareSourceId(fieldKeyFormat string) (oci_osmanagement.SoftwareSourceId, error) {
	result := oci_osmanagement.SoftwareSourceId{}
func (s *OsmanagementManagedInstanceManagementResourceCrud) createParentSoftwareSource(managedInstanceId *string) error {
	// detach old groups
func (s *OsmanagementManagedInstanceManagementResourceCrud) updateParentSoftwareSource(managedInstanceId *string) error {
	// check if any Update is made to parent software source
func (s *OsmanagementManagedInstanceManagementResourceCrud) createChildSoftwareSources(managedInstanceId *string) error {
	// detach old child software sources
func (s *OsmanagementManagedInstanceManagementResourceCrud) updateChildSoftwareSources(managedInstanceId *string) error {
	if _, ok := s.D.GetOkExists("child_software_sources"); ok && s.D.HasChange("child_software_sources") {
func (s *OsmanagementManagedInstanceManagementResourceCrud) createManagedInstanceGroups(managedInstanceId *string) error {
	// detach old managed groups
func (s *OsmanagementManagedInstanceManagementResourceCrud) updateManagedInstanceGroups(managedInstanceId *string) error {
	// check if any Update is made to managed instance groups
func (s *OsmanagementManagedInstanceManagementResourceCrud) mapToId(fieldKeyFormat string) (oci_osmanagement.Id, error) {
	result := oci_osmanagement.Id{}

=== ./internal/service/osmanagement/osmanagement_software_source_module_stream_data_source.go ===
func OsmanagementSoftwareSourceModuleStreamDataSource() *schema.Resource {
	return &schema.Resource{
func readSingularOsmanagementSoftwareSourceModuleStream(d *schema.ResourceData, m interface{}) error {
	sync := &OsmanagementSoftwareSourceModuleStreamDataSourceCrud{}
func (s *OsmanagementSoftwareSourceModuleStreamDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *OsmanagementSoftwareSourceModuleStreamDataSourceCrud) Get() error {
	request := oci_osmanagement.GetModuleStreamRequest{}
func (s *OsmanagementSoftwareSourceModuleStreamDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/osmanagement/osmanagement_software_source_resource.go ===
func OsmanagementSoftwareSourceResource() *schema.Resource {
	return &schema.Resource{
func createOsmanagementSoftwareSource(d *schema.ResourceData, m interface{}) error {
	sync := &OsmanagementSoftwareSourceResourceCrud{}
func readOsmanagementSoftwareSource(d *schema.ResourceData, m interface{}) error {
	sync := &OsmanagementSoftwareSourceResourceCrud{}
func updateOsmanagementSoftwareSource(d *schema.ResourceData, m interface{}) error {
	sync := &OsmanagementSoftwareSourceResourceCrud{}
func deleteOsmanagementSoftwareSource(d *schema.ResourceData, m interface{}) error {
	sync := &OsmanagementSoftwareSourceResourceCrud{}
func (s *OsmanagementSoftwareSourceResourceCrud) ID() string {
	return *s.Res.Id
func (s *OsmanagementSoftwareSourceResourceCrud) CreatedPending() []string {
	return []string{
func (s *OsmanagementSoftwareSourceResourceCrud) CreatedTarget() []string {
	return []string{
func (s *OsmanagementSoftwareSourceResourceCrud) DeletedPending() []string {
	return []string{
func (s *OsmanagementSoftwareSourceResourceCrud) DeletedTarget() []string {
	return []string{
func (s *OsmanagementSoftwareSourceResourceCrud) Create() error {
	request := oci_osmanagement.CreateSoftwareSourceRequest{}
func (s *OsmanagementSoftwareSourceResourceCrud) Get() error {
	request := oci_osmanagement.GetSoftwareSourceRequest{}
func (s *OsmanagementSoftwareSourceResourceCrud) Update() error {
	if compartment, ok := s.D.GetOkExists("compartment_id"); ok && s.D.HasChange("compartment_id") {
func (s *OsmanagementSoftwareSourceResourceCrud) Delete() error {
	request := oci_osmanagement.DeleteSoftwareSourceRequest{}
func (s *OsmanagementSoftwareSourceResourceCrud) SetData() error {
	s.D.Set("arch_type", s.Res.ArchType)
func (s *OsmanagementSoftwareSourceResourceCrud) updateCompartment(compartment interface{}) error {
	changeCompartmentRequest := oci_osmanagement.ChangeSoftwareSourceCompartmentRequest{}

=== ./internal/service/osmanagement/register_resource.go ===
func RegisterResource() {
	tfresource.RegisterResource("oci_osmanagement_managed_instance", OsmanagementManagedInstanceResource())

=== ./internal/service/data_labeling_service/data_labeling_service_annotation_formats_data_source.go ===
func DataLabelingServiceAnnotationFormatsDataSource() *schema.Resource {
	return &schema.Resource{
func readDataLabelingServiceAnnotationFormats(d *schema.ResourceData, m interface{}) error {
	sync := &DataLabelingServiceAnnotationFormatsDataSourceCrud{}
func (s *DataLabelingServiceAnnotationFormatsDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *DataLabelingServiceAnnotationFormatsDataSourceCrud) Get() error {
	request := oci_data_labeling_service.ListAnnotationFormatsRequest{}
func (s *DataLabelingServiceAnnotationFormatsDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/data_labeling_service/data_labeling_service_dataset_resource.go ===
func DataLabelingServiceDatasetResource() *schema.Resource {
	return &schema.Resource{
func createDataLabelingServiceDataset(d *schema.ResourceData, m interface{}) error {
	sync := &DataLabelingServiceDatasetResourceCrud{}
func readDataLabelingServiceDataset(d *schema.ResourceData, m interface{}) error {
	sync := &DataLabelingServiceDatasetResourceCrud{}
func updateDataLabelingServiceDataset(d *schema.ResourceData, m interface{}) error {
	sync := &DataLabelingServiceDatasetResourceCrud{}
func deleteDataLabelingServiceDataset(d *schema.ResourceData, m interface{}) error {
	sync := &DataLabelingServiceDatasetResourceCrud{}
func (s *DataLabelingServiceDatasetResourceCrud) ID() string {
	return *s.Res.Id
func (s *DataLabelingServiceDatasetResourceCrud) CreatedPending() []string {
	return []string{
func (s *DataLabelingServiceDatasetResourceCrud) CreatedTarget() []string {
	return []string{
func (s *DataLabelingServiceDatasetResourceCrud) DeletedPending() []string {
	return []string{
func (s *DataLabelingServiceDatasetResourceCrud) DeletedTarget() []string {
	return []string{
func (s *DataLabelingServiceDatasetResourceCrud) Create() error {
	request := oci_data_labeling_service.CreateDatasetRequest{}
func (s *DataLabelingServiceDatasetResourceCrud) getDatasetFromWorkRequest(workId *string, retryPolicy *oci_common.RetryPolicy,
	actionTypeEnum oci_data_labeling_service.ActionTypeEnum, timeout time.Duration) error {
func (s *DataLabelingServiceDatasetResourceCrud) Get() error {
	request := oci_data_labeling_service.GetDatasetRequest{}
func (s *DataLabelingServiceDatasetResourceCrud) Update() error {

func (s *DataLabelingServiceDatasetResourceCrud) Delete() error {
	request := oci_data_labeling_service.DeleteDatasetRequest{}
func (s *DataLabelingServiceDatasetResourceCrud) SetData() error {
	s.D.Set("additional_properties", s.Res.AdditionalProperties)
func (s *DataLabelingServiceDatasetResourceCrud) ImportPreAnnotatedData() error {
	request := oci_data_labeling_service.ImportPreAnnotatedDataRequest{}
func (s *DataLabelingServiceDatasetResourceCrud) mapToDatasetFormatDetails(fieldKeyFormat string) (oci_data_labeling_service.DatasetFormatDetails, error) {
	var baseObject oci_data_labeling_service.DatasetFormatDetails
func (s *DataLabelingServiceDatasetResourceCrud) mapToDatasetSourceDetails(fieldKeyFormat string) (oci_data_labeling_service.DatasetSourceDetails, error) {
	var baseObject oci_data_labeling_service.DatasetSourceDetails
func (s *DataLabelingServiceDatasetResourceCrud) mapToImportFormat(fieldKeyFormat string) (oci_data_labeling_service.ImportFormat, error) {
	result := oci_data_labeling_service.ImportFormat{}
func (s *DataLabelingServiceDatasetResourceCrud) mapToImportMetadataPath(fieldKeyFormat string) (oci_data_labeling_service.ImportMetadataPath, error) {
	var baseObject oci_data_labeling_service.ImportMetadataPath
func (s *DataLabelingServiceDatasetResourceCrud) mapToInitialImportDatasetConfiguration(fieldKeyFormat string) (oci_data_labeling_service.InitialImportDatasetConfiguration, error) {
	result := oci_data_labeling_service.InitialImportDatasetConfiguration{}
func (s *DataLabelingServiceDatasetResourceCrud) mapToInitialRecordGenerationConfiguration(fieldKeyFormat string) (oci_data_labeling_service.InitialRecordGenerationConfiguration, error) {
	result := oci_data_labeling_service.InitialRecordGenerationConfiguration{}
func (s *DataLabelingServiceDatasetResourceCrud) mapToLabel(fieldKeyFormat string) (oci_data_labeling_service.Label, error) {
	result := oci_data_labeling_service.Label{}
func (s *DataLabelingServiceDatasetResourceCrud) mapToLabelSet(fieldKeyFormat string) (oci_data_labeling_service.LabelSet, error) {
	result := oci_data_labeling_service.LabelSet{}
func (s *DataLabelingServiceDatasetResourceCrud) mapToTextFileTypeMetadata(fieldKeyFormat string) (oci_data_labeling_service.TextFileTypeMetadata, error) {
	var baseObject oci_data_labeling_service.TextFileTypeMetadata
func (s *DataLabelingServiceDatasetResourceCrud) updateCompartment(compartment interface{}) error {
	changeCompartmentRequest := oci_data_labeling_service.ChangeDatasetCompartmentRequest{}
func (s *DataLabelingServiceDatasetResourceCrud) updateLabelSet(oldLabelSet, newLabelSet oci_data_labeling_service.LabelSet) error {
	addDatasetLabelsRequest := oci_data_labeling_service.AddDatasetLabelsRequest{}

=== ./internal/service/data_labeling_service/data_labeling_service_annotation_format_data_source.go ===
func DataLabelingServiceAnnotationFormatDataSource() *schema.Resource {
	return &schema.Resource{
func readSingularDataLabelingServiceAnnotationFormat(d *schema.ResourceData, m interface{}) error {
	sync := &DataLabelingServiceAnnotationFormatDataSourceCrud{}
func (s *DataLabelingServiceAnnotationFormatDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *DataLabelingServiceAnnotationFormatDataSourceCrud) Get() error {
	request := oci_data_labeling_service.ListAnnotationFormatsRequest{}
func (s *DataLabelingServiceAnnotationFormatDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/data_labeling_service/data_labeling_service_dataset_data_source.go ===
func DataLabelingServiceDatasetDataSource() *schema.Resource {
	fieldMap := make(map[string]*schema.Schema)
func readSingularDataLabelingServiceDataset(d *schema.ResourceData, m interface{}) error {
	sync := &DataLabelingServiceDatasetDataSourceCrud{}
func (s *DataLabelingServiceDatasetDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *DataLabelingServiceDatasetDataSourceCrud) Get() error {
	request := oci_data_labeling_service.GetDatasetRequest{}
func (s *DataLabelingServiceDatasetDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/data_labeling_service/register_resource.go ===
func RegisterResource() {
	tfresource.RegisterResource("oci_data_labeling_service_dataset", DataLabelingServiceDatasetResource())

=== ./internal/service/data_labeling_service/data_labeling_service_datasets_data_source.go ===
func DataLabelingServiceDatasetsDataSource() *schema.Resource {
	return &schema.Resource{
func readDataLabelingServiceDatasets(d *schema.ResourceData, m interface{}) error {
	sync := &DataLabelingServiceDatasetsDataSourceCrud{}
func (s *DataLabelingServiceDatasetsDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *DataLabelingServiceDatasetsDataSourceCrud) Get() error {
	request := oci_data_labeling_service.ListDatasetsRequest{}
func (s *DataLabelingServiceDatasetsDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/secrets/secrets_secretbundle_versions_data_source.go ===
func SecretsSecretbundleVersionsDataSource() *schema.Resource {
	return &schema.Resource{
func readSecretsSecretbundleVersions(d *schema.ResourceData, m interface{}) error {
	sync := &SecretsSecretbundleVersionsDataSourceCrud{}
func (s *SecretsSecretbundleVersionsDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *SecretsSecretbundleVersionsDataSourceCrud) Get() error {
	request := oci_secrets.ListSecretBundleVersionsRequest{}
func (s *SecretsSecretbundleVersionsDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/secrets/secrets_secretbundle_data_source.go ===
func SecretsSecretbundleDataSource() *schema.Resource {
	return &schema.Resource{
func readSingularSecretsSecretbundle(d *schema.ResourceData, m interface{}) error {
	sync := &SecretsSecretbundleDataSourceCrud{}
func (s *SecretsSecretbundleDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *SecretsSecretbundleDataSourceCrud) Get() error {
	request := oci_secrets.GetSecretBundleRequest{}
func (s *SecretsSecretbundleDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/secrets/register_resource.go ===
func RegisterResource() {
}

=== ./internal/service/budget/budget_export.go ===
func getBudgetAlertRuleId(resource *tf_export.OCIResource) (string, error) {


=== ./internal/service/budget/budget_alert_rule_data_source.go ===
func BudgetAlertRuleDataSource() *schema.Resource {
	fieldMap := make(map[string]*schema.Schema)
func readSingularBudgetAlertRule(d *schema.ResourceData, m interface{}) error {
	sync := &BudgetAlertRuleDataSourceCrud{}
func (s *BudgetAlertRuleDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *BudgetAlertRuleDataSourceCrud) Get() error {
	request := oci_budget.GetAlertRuleRequest{}
func (s *BudgetAlertRuleDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/budget/budget_alert_rule_resource.go ===
func BudgetAlertRuleResource() *schema.Resource {
	return &schema.Resource{
func createBudgetAlertRule(d *schema.ResourceData, m interface{}) error {
	sync := &BudgetAlertRuleResourceCrud{}
func readBudgetAlertRule(d *schema.ResourceData, m interface{}) error {
	sync := &BudgetAlertRuleResourceCrud{}
func updateBudgetAlertRule(d *schema.ResourceData, m interface{}) error {
	sync := &BudgetAlertRuleResourceCrud{}
func deleteBudgetAlertRule(d *schema.ResourceData, m interface{}) error {
	sync := &BudgetAlertRuleResourceCrud{}
func (s *BudgetAlertRuleResourceCrud) ID() string {
	return *s.Res.Id
func (s *BudgetAlertRuleResourceCrud) CreatedPending() []string {
	return []string{}
func (s *BudgetAlertRuleResourceCrud) CreatedTarget() []string {
	return []string{
func (s *BudgetAlertRuleResourceCrud) DeletedPending() []string {
	return []string{}
func (s *BudgetAlertRuleResourceCrud) DeletedTarget() []string {
	return []string{}
func (s *BudgetAlertRuleResourceCrud) Create() error {
	request := oci_budget.CreateAlertRuleRequest{}
func (s *BudgetAlertRuleResourceCrud) Get() error {
	request := oci_budget.GetAlertRuleRequest{}
func (s *BudgetAlertRuleResourceCrud) Update() error {
	request := oci_budget.UpdateAlertRuleRequest{}
func (s *BudgetAlertRuleResourceCrud) Delete() error {
	request := oci_budget.DeleteAlertRuleRequest{}
func (s *BudgetAlertRuleResourceCrud) SetData() error {


=== ./internal/service/budget/budget_budget_resource.go ===
func BudgetBudgetResource() *schema.Resource {
	return &schema.Resource{
func createBudgetBudget(d *schema.ResourceData, m interface{}) error {
	sync := &BudgetBudgetResourceCrud{}
func readBudgetBudget(d *schema.ResourceData, m interface{}) error {
	sync := &BudgetBudgetResourceCrud{}
func updateBudgetBudget(d *schema.ResourceData, m interface{}) error {
	sync := &BudgetBudgetResourceCrud{}
func deleteBudgetBudget(d *schema.ResourceData, m interface{}) error {
	sync := &BudgetBudgetResourceCrud{}
func (s *BudgetBudgetResourceCrud) ID() string {
	return *s.Res.Id
func (s *BudgetBudgetResourceCrud) CreatedPending() []string {
	return []string{}
func (s *BudgetBudgetResourceCrud) CreatedTarget() []string {
	return []string{
func (s *BudgetBudgetResourceCrud) DeletedPending() []string {
	return []string{}
func (s *BudgetBudgetResourceCrud) DeletedTarget() []string {
	return []string{}
func (s *BudgetBudgetResourceCrud) Create() error {
	request := oci_budget.CreateBudgetRequest{}
func (s *BudgetBudgetResourceCrud) Get() error {
	request := oci_budget.GetBudgetRequest{}
func (s *BudgetBudgetResourceCrud) Update() error {
	request := oci_budget.UpdateBudgetRequest{}
func (s *BudgetBudgetResourceCrud) Delete() error {
	request := oci_budget.DeleteBudgetRequest{}
func (s *BudgetBudgetResourceCrud) SetData() error {
	if s.Res.ActualSpend != nil {

=== ./internal/service/budget/budget_budget_data_source.go ===
func BudgetBudgetDataSource() *schema.Resource {
	fieldMap := make(map[string]*schema.Schema)
func readSingularBudgetBudget(d *schema.ResourceData, m interface{}) error {
	sync := &BudgetBudgetDataSourceCrud{}
func (s *BudgetBudgetDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *BudgetBudgetDataSourceCrud) Get() error {
	request := oci_budget.GetBudgetRequest{}
func (s *BudgetBudgetDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/budget/budget_budgets_data_source.go ===
func BudgetBudgetsDataSource() *schema.Resource {
	return &schema.Resource{
func readBudgetBudgets(d *schema.ResourceData, m interface{}) error {
	sync := &BudgetBudgetsDataSourceCrud{}
func (s *BudgetBudgetsDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *BudgetBudgetsDataSourceCrud) Get() error {
	request := oci_budget.ListBudgetsRequest{}
func (s *BudgetBudgetsDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/budget/budget_alert_rules_data_source.go ===
func BudgetAlertRulesDataSource() *schema.Resource {
	return &schema.Resource{
func readBudgetAlertRules(d *schema.ResourceData, m interface{}) error {
	sync := &BudgetAlertRulesDataSourceCrud{}
func (s *BudgetAlertRulesDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *BudgetAlertRulesDataSourceCrud) Get() error {
	request := oci_budget.ListAlertRulesRequest{}
func (s *BudgetAlertRulesDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/budget/register_resource.go ===
func RegisterResource() {
	tfresource.RegisterResource("oci_budget_alert_rule", BudgetAlertRuleResource())

=== ./internal/service/management_agent/management_agent_management_agent_plugin_count_data_source.go ===
func ManagementAgentManagementAgentPluginCountDataSource() *schema.Resource {
	return &schema.Resource{
func readSingularManagementAgentManagementAgentPluginCount(d *schema.ResourceData, m interface{}) error {
	sync := &ManagementAgentManagementAgentPluginCountDataSourceCrud{}
func (s *ManagementAgentManagementAgentPluginCountDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *ManagementAgentManagementAgentPluginCountDataSourceCrud) Get() error {
	request := oci_management_agent.SummarizeManagementAgentPluginCountsRequest{}
func (s *ManagementAgentManagementAgentPluginCountDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/management_agent/management_agent_management_agent_plugins_data_source.go ===
func ManagementAgentManagementAgentPluginsDataSource() *schema.Resource {
	return &schema.Resource{
func readManagementAgentManagementAgentPlugins(d *schema.ResourceData, m interface{}) error {
	sync := &ManagementAgentManagementAgentPluginsDataSourceCrud{}
func (s *ManagementAgentManagementAgentPluginsDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *ManagementAgentManagementAgentPluginsDataSourceCrud) Get() error {
	request := oci_management_agent.ListManagementAgentPluginsRequest{}
func (s *ManagementAgentManagementAgentPluginsDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/management_agent/management_agent_management_agent_data_source_data_source.go ===
func ManagementAgentManagementAgentDataSourceDataSource() *schema.Resource {
	fieldMap := make(map[string]*schema.Schema)
func readSingularManagementAgentManagementAgentDataSource(d *schema.ResourceData, m interface{}) error {
	sync := &ManagementAgentManagementAgentDataSourceDataSourceCrud{}
func (s *ManagementAgentManagementAgentDataSourceDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *ManagementAgentManagementAgentDataSourceDataSourceCrud) Get() error {
	request := oci_management_agent.GetDataSourceRequest{}
func (s *ManagementAgentManagementAgentDataSourceDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/management_agent/management_agent_management_agent_available_histories_data_source.go ===
func ManagementAgentManagementAgentAvailableHistoriesDataSource() *schema.Resource {
	return &schema.Resource{
func readManagementAgentManagementAgentAvailableHistories(d *schema.ResourceData, m interface{}) error {
	sync := &ManagementAgentManagementAgentAvailableHistoriesDataSourceCrud{}
func (s *ManagementAgentManagementAgentAvailableHistoriesDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *ManagementAgentManagementAgentAvailableHistoriesDataSourceCrud) Get() error {
	request := oci_management_agent.ListAvailabilityHistoriesRequest{}
func (s *ManagementAgentManagementAgentAvailableHistoriesDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/management_agent/management_agent_management_agent_install_keys_data_source.go ===
func ManagementAgentManagementAgentInstallKeysDataSource() *schema.Resource {
	return &schema.Resource{
func readManagementAgentManagementAgentInstallKeys(d *schema.ResourceData, m interface{}) error {
	sync := &ManagementAgentManagementAgentInstallKeysDataSourceCrud{}
func (s *ManagementAgentManagementAgentInstallKeysDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *ManagementAgentManagementAgentInstallKeysDataSourceCrud) Get() error {
	request := oci_management_agent.ListManagementAgentInstallKeysRequest{}
func (s *ManagementAgentManagementAgentInstallKeysDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/management_agent/management_agent_management_agent_count_data_source.go ===
func ManagementAgentManagementAgentCountDataSource() *schema.Resource {
	return &schema.Resource{
func readSingularManagementAgentManagementAgentCount(d *schema.ResourceData, m interface{}) error {
	sync := &ManagementAgentManagementAgentCountDataSourceCrud{}
func (s *ManagementAgentManagementAgentCountDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *ManagementAgentManagementAgentCountDataSourceCrud) Get() error {
	request := oci_management_agent.SummarizeManagementAgentCountsRequest{}
func (s *ManagementAgentManagementAgentCountDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/management_agent/management_agent_management_agent_resource.go ===
func ManagementAgentManagementAgentResource() *schema.Resource {
	return &schema.Resource{
func createManagementAgentManagementAgent(d *schema.ResourceData, m interface{}) error {
	sync := &ManagementAgentManagementAgentResourceCrud{}
func readManagementAgentManagementAgent(d *schema.ResourceData, m interface{}) error {
	sync := &ManagementAgentManagementAgentResourceCrud{}
func updateManagementAgentManagementAgent(d *schema.ResourceData, m interface{}) error {
	sync := &ManagementAgentManagementAgentResourceCrud{}
func deleteManagementAgentManagementAgent(d *schema.ResourceData, m interface{}) error {
	sync := &ManagementAgentManagementAgentResourceCrud{}
func (s *ManagementAgentManagementAgentResourceCrud) ID() string {
	return *s.Res.Id
func (s *ManagementAgentManagementAgentResourceCrud) CreatedPending() []string {
	return []string{
func (s *ManagementAgentManagementAgentResourceCrud) CreatedTarget() []string {
	return []string{
func (s *ManagementAgentManagementAgentResourceCrud) DeletedPending() []string {
	return []string{
func (s *ManagementAgentManagementAgentResourceCrud) DeletedTarget() []string {
	return []string{
func (s *ManagementAgentManagementAgentResourceCrud) getManagementAgentFromWorkRequest(workId *string, retryPolicy *oci_common.RetryPolicy,
	actionTypeEnum oci_management_agent.ActionTypesEnum, timeout time.Duration) error {
func (s *ManagementAgentManagementAgentResourceCrud) Get() error {
	request := oci_management_agent.GetManagementAgentRequest{}
func (s *ManagementAgentManagementAgentResourceCrud) Update() error {
	request := oci_management_agent.UpdateManagementAgentRequest{}
func (s *ManagementAgentManagementAgentResourceCrud) Delete() error {
	request := oci_management_agent.DeleteManagementAgentRequest{}
func (s *ManagementAgentManagementAgentResourceCrud) SetData() error {
	if s.Res == nil {
func DataSourceToMap(obj oci_management_agent.DataSource) map[string]interface{} {
	result := map[string]interface{}{}
func DataSourceSummaryItemToMap(obj oci_management_agent.DataSourceSummaryItem) map[string]interface{} {
	result := map[string]interface{}{}
func (s *ManagementAgentManagementAgentResourceCrud) mapToMetricDimension(fieldKeyFormat string) (oci_management_agent.MetricDimension, error) {
	result := oci_management_agent.MetricDimension{}
func (s *ManagementAgentManagementAgentResourceCrud) Create() error {

func (s *ManagementAgentManagementAgentResourceCrud) deployPlugin(pluginIds []string, agentId string, compartmentId string) error {
	request := oci_management_agent.DeployPluginsRequest{}

=== ./internal/service/management_agent/management_agent_management_agent_install_key_resource.go ===
func ManagementAgentManagementAgentInstallKeyResource() *schema.Resource {
	return &schema.Resource{
func createManagementAgentManagementAgentInstallKey(d *schema.ResourceData, m interface{}) error {
	sync := &ManagementAgentManagementAgentInstallKeyResourceCrud{}
func readManagementAgentManagementAgentInstallKey(d *schema.ResourceData, m interface{}) error {
	sync := &ManagementAgentManagementAgentInstallKeyResourceCrud{}
func updateManagementAgentManagementAgentInstallKey(d *schema.ResourceData, m interface{}) error {
	sync := &ManagementAgentManagementAgentInstallKeyResourceCrud{}
func deleteManagementAgentManagementAgentInstallKey(d *schema.ResourceData, m interface{}) error {
	sync := &ManagementAgentManagementAgentInstallKeyResourceCrud{}
func (s *ManagementAgentManagementAgentInstallKeyResourceCrud) ID() string {
	return *s.Res.Id
func (s *ManagementAgentManagementAgentInstallKeyResourceCrud) CreatedPending() []string {
	return []string{
func (s *ManagementAgentManagementAgentInstallKeyResourceCrud) CreatedTarget() []string {
	return []string{
func (s *ManagementAgentManagementAgentInstallKeyResourceCrud) DeletedPending() []string {
	return []string{
func (s *ManagementAgentManagementAgentInstallKeyResourceCrud) DeletedTarget() []string {
	return []string{
func (s *ManagementAgentManagementAgentInstallKeyResourceCrud) Create() error {
	request := oci_management_agent.CreateManagementAgentInstallKeyRequest{}
func (s *ManagementAgentManagementAgentInstallKeyResourceCrud) Get() error {
	request := oci_management_agent.GetManagementAgentInstallKeyRequest{}
func (s *ManagementAgentManagementAgentInstallKeyResourceCrud) Update() error {
	request := oci_management_agent.UpdateManagementAgentInstallKeyRequest{}
func (s *ManagementAgentManagementAgentInstallKeyResourceCrud) Delete() error {
	request := oci_management_agent.DeleteManagementAgentInstallKeyRequest{}
func (s *ManagementAgentManagementAgentInstallKeyResourceCrud) SetData() error {
	if s.Res.AllowedKeyInstallCount != nil {

=== ./internal/service/management_agent/management_agent_management_agents_data_source.go ===
func ManagementAgentManagementAgentsDataSource() *schema.Resource {
	return &schema.Resource{
func readManagementAgentManagementAgents(d *schema.ResourceData, m interface{}) error {
	sync := &ManagementAgentManagementAgentsDataSourceCrud{}
func (s *ManagementAgentManagementAgentsDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *ManagementAgentManagementAgentsDataSourceCrud) Get() error {
	request := oci_management_agent.ListManagementAgentsRequest{}
func (s *ManagementAgentManagementAgentsDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/management_agent/management_agent_management_agent_data_source_resource.go ===
func ManagementAgentManagementAgentDataSourceResource() *schema.Resource {
	return &schema.Resource{
func createManagementAgentManagementAgentDataSource(d *schema.ResourceData, m interface{}) error {
	sync := &ManagementAgentManagementAgentDataSourceResourceCrud{}
func readManagementAgentManagementAgentDataSource(d *schema.ResourceData, m interface{}) error {
	sync := &ManagementAgentManagementAgentDataSourceResourceCrud{}
func updateManagementAgentManagementAgentDataSource(d *schema.ResourceData, m interface{}) error {
	sync := &ManagementAgentManagementAgentDataSourceResourceCrud{}
func deleteManagementAgentManagementAgentDataSource(d *schema.ResourceData, m interface{}) error {
	sync := &ManagementAgentManagementAgentDataSourceResourceCrud{}
func (s *ManagementAgentManagementAgentDataSourceResourceCrud) ID() string {
	managementAgentDataSource := *s.Res
func GetManagementAgentsDataSourcesCompositeId(managementAgentId string, dataSourceKey string) string {
	managementAgentId = url.PathEscape(managementAgentId)
func (s *ManagementAgentManagementAgentDataSourceResourceCrud) CreatedPending() []string {
	return []string{
func (s *ManagementAgentManagementAgentDataSourceResourceCrud) CreatedTarget() []string {
	return []string{
func (s *ManagementAgentManagementAgentDataSourceResourceCrud) DeletedPending() []string {
	return []string{
func (s *ManagementAgentManagementAgentDataSourceResourceCrud) DeletedTarget() []string {
	return []string{
func (s *ManagementAgentManagementAgentDataSourceResourceCrud) Create() error {
	request := oci_management_agent.CreateDataSourceRequest{}
func (s *ManagementAgentManagementAgentDataSourceResourceCrud) getManagementAgentDataSourceFromWorkRequest(workId *string, retryPolicy *oci_common.RetryPolicy,
	actionTypeEnum oci_management_agent.ActionTypesEnum, timeout time.Duration) error {
func managementAgentDataSourceWorkRequestShouldRetryFunc(timeout time.Duration) func(response oci_common.OCIOperationResponse) bool {
	startTime := time.Now()
func managementAgentDataSourceWaitForWorkRequest(wId *string, entityType string, action oci_management_agent.ActionTypesEnum,
	timeout time.Duration, disableFoundRetries bool, client *oci_management_agent.ManagementAgentClient) (*string, error) {
func getErrorFromManagementAgentManagementAgentDataSourceWorkRequest(client *oci_management_agent.ManagementAgentClient, workId *string, retryPolicy *oci_common.RetryPolicy, entityType string, action oci_management_agent.ActionTypesEnum) error {
	response, err := client.ListWorkRequestErrors(context.Background(),
func (s *ManagementAgentManagementAgentDataSourceResourceCrud) Get() error {
	request := oci_management_agent.GetDataSourceRequest{}
func (s *ManagementAgentManagementAgentDataSourceResourceCrud) Update() error {
	request := oci_management_agent.UpdateDataSourceRequest{}
func (s *ManagementAgentManagementAgentDataSourceResourceCrud) Delete() error {
	request := oci_management_agent.DeleteDataSourceRequest{}
func (s *ManagementAgentManagementAgentDataSourceResourceCrud) SetData() error {

func GetManagementAgentDataSourceCompositeId(dataSourceKey string, managementAgentId string) string {
	//If the Key is already from an ID, it will contain the child information already,  if so, just return this as the Id
func parseManagementAgentDataSourceCompositeId(compositeId string) (dataSourceKey string, managementAgentId string, err error) {
	parts := strings.Split(compositeId, "/")
func (s *ManagementAgentManagementAgentDataSourceResourceCrud) mapToMetricDimension(fieldKeyFormat string) (oci_management_agent.MetricDimension, error) {
	result := oci_management_agent.MetricDimension{}
func (s *ManagementAgentManagementAgentDataSourceResourceCrud) populateTopLevelPolymorphicCreateDataSourceRequest(request *oci_management_agent.CreateDataSourceRequest) error {
	//discriminator
func (s *ManagementAgentManagementAgentDataSourceResourceCrud) populateTopLevelPolymorphicUpdateDataSourceRequest(request *oci_management_agent.UpdateDataSourceRequest) error {
	//discriminator

=== ./internal/service/management_agent/management_agent_management_agent_data_sources_data_source.go ===
func ManagementAgentManagementAgentDataSourcesDataSource() *schema.Resource {
	return &schema.Resource{
func ManagementAgentManagementAgentDataSourceSummary() *schema.Resource {
	return &schema.Resource{
func readManagementAgentManagementAgentDataSources(d *schema.ResourceData, m interface{}) error {
	sync := &ManagementAgentManagementAgentDataSourcesDataSourceCrud{}
func (s *ManagementAgentManagementAgentDataSourcesDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *ManagementAgentManagementAgentDataSourcesDataSourceCrud) Get() error {
	request := oci_management_agent.ListDataSourcesRequest{}
func (s *ManagementAgentManagementAgentDataSourcesDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/management_agent/management_agent_management_agent_data_source.go ===
func ManagementAgentManagementAgentDataSource() *schema.Resource {
	fieldMap := make(map[string]*schema.Schema)
func readSingularManagementAgentManagementAgent(d *schema.ResourceData, m interface{}) error {
	sync := &ManagementAgentManagementAgentDataSourceCrud{}
func (s *ManagementAgentManagementAgentDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *ManagementAgentManagementAgentDataSourceCrud) Get() error {
	request := oci_management_agent.GetManagementAgentRequest{}
func (s *ManagementAgentManagementAgentDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/management_agent/management_agent_export.go ===
func processManagementAgentManagementAgentDataSourceKeys(ctx *tf_export.ResourceDiscoveryContext, resources []*tf_export.OCIResource) ([]*tf_export.OCIResource, error) {

func getManagementAgentManagementAgentDataSourceId(resource *tf_export.OCIResource) (string, error) {


=== ./internal/service/management_agent/management_agent_management_agent_get_auto_upgradable_config_data_source.go ===
func ManagementAgentManagementAgentGetAutoUpgradableConfigDataSource() *schema.Resource {
	return &schema.Resource{
func readSingularManagementAgentManagementAgentGetAutoUpgradableConfig(d *schema.ResourceData, m interface{}) error {
	sync := &ManagementAgentManagementAgentGetAutoUpgradableConfigDataSourceCrud{}
func (s *ManagementAgentManagementAgentGetAutoUpgradableConfigDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *ManagementAgentManagementAgentGetAutoUpgradableConfigDataSourceCrud) Get() error {
	request := oci_management_agent.GetAutoUpgradableConfigRequest{}
func (s *ManagementAgentManagementAgentGetAutoUpgradableConfigDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/management_agent/management_agent_management_agent_images_data_source.go ===
func ManagementAgentManagementAgentImagesDataSource() *schema.Resource {
	return &schema.Resource{
func readManagementAgentManagementAgentImages(d *schema.ResourceData, m interface{}) error {
	sync := &ManagementAgentManagementAgentImagesDataSourceCrud{}
func (s *ManagementAgentManagementAgentImagesDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *ManagementAgentManagementAgentImagesDataSourceCrud) Get() error {
	request := oci_management_agent.ListManagementAgentImagesRequest{}
func (s *ManagementAgentManagementAgentImagesDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/management_agent/management_agent_management_agent_install_key_data_source.go ===
func ManagementAgentManagementAgentInstallKeyDataSource() *schema.Resource {
	fieldMap := make(map[string]*schema.Schema)
func readSingularManagementAgentManagementAgentInstallKey(d *schema.ResourceData, m interface{}) error {
	sync := &ManagementAgentManagementAgentInstallKeyDataSourceCrud{}
func (s *ManagementAgentManagementAgentInstallKeyDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *ManagementAgentManagementAgentInstallKeyDataSourceCrud) Get() error {
	request := oci_management_agent.GetManagementAgentInstallKeyRequest{}
func (s *ManagementAgentManagementAgentInstallKeyDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/management_agent/register_resource.go ===
func RegisterResource() {
	tfresource.RegisterResource("oci_management_agent_management_agent", ManagementAgentManagementAgentResource())

=== ./internal/service/datacatalog/datacatalog_catalog_private_endpoint_resource.go ===
func DatacatalogCatalogPrivateEndpointResource() *schema.Resource {
	return &schema.Resource{
func createDatacatalogCatalogPrivateEndpoint(d *schema.ResourceData, m interface{}) error {
	sync := &DatacatalogCatalogPrivateEndpointResourceCrud{}
func readDatacatalogCatalogPrivateEndpoint(d *schema.ResourceData, m interface{}) error {
	sync := &DatacatalogCatalogPrivateEndpointResourceCrud{}
func updateDatacatalogCatalogPrivateEndpoint(d *schema.ResourceData, m interface{}) error {
	sync := &DatacatalogCatalogPrivateEndpointResourceCrud{}
func deleteDatacatalogCatalogPrivateEndpoint(d *schema.ResourceData, m interface{}) error {
	sync := &DatacatalogCatalogPrivateEndpointResourceCrud{}
func (s *DatacatalogCatalogPrivateEndpointResourceCrud) ID() string {
	return *s.Res.Id
func (s *DatacatalogCatalogPrivateEndpointResourceCrud) CreatedPending() []string {
	return []string{
func (s *DatacatalogCatalogPrivateEndpointResourceCrud) CreatedTarget() []string {
	return []string{
func (s *DatacatalogCatalogPrivateEndpointResourceCrud) DeletedPending() []string {
	return []string{
func (s *DatacatalogCatalogPrivateEndpointResourceCrud) DeletedTarget() []string {
	return []string{
func (s *DatacatalogCatalogPrivateEndpointResourceCrud) Create() error {
	request := oci_datacatalog.CreateCatalogPrivateEndpointRequest{}
func (s *DatacatalogCatalogPrivateEndpointResourceCrud) getCatalogPrivateEndpointFromWorkRequest(workId *string, retryPolicy *oci_common.RetryPolicy,
	actionTypeEnum oci_datacatalog.WorkRequestResourceActionTypeEnum, timeout time.Duration) error {
func catalogPrivateEndpointWaitForWorkRequest(wId *string, entityType string, action oci_datacatalog.WorkRequestResourceActionTypeEnum,
	timeout time.Duration, disableFoundRetries bool, client *oci_datacatalog.DataCatalogClient) (*string, error) {
func getErrorFromDatacatalogCatalogPrivateEndpointWorkRequest(client *oci_datacatalog.DataCatalogClient, workId *string, retryPolicy *oci_common.RetryPolicy, entityType string, action oci_datacatalog.WorkRequestResourceActionTypeEnum) error {
	response, err := client.ListWorkRequestErrors(context.Background(),
func (s *DatacatalogCatalogPrivateEndpointResourceCrud) Get() error {
	request := oci_datacatalog.GetCatalogPrivateEndpointRequest{}
func (s *DatacatalogCatalogPrivateEndpointResourceCrud) Update() error {
	if compartment, ok := s.D.GetOkExists("compartment_id"); ok && s.D.HasChange("compartment_id") {
func (s *DatacatalogCatalogPrivateEndpointResourceCrud) detachCatalog(detachCatalogs []interface{}) error {
	for _, detachCatalog := range detachCatalogs {
func (s *DatacatalogCatalogPrivateEndpointResourceCrud) Delete() error {
	request := oci_datacatalog.DeleteCatalogPrivateEndpointRequest{}
func (s *DatacatalogCatalogPrivateEndpointResourceCrud) SetData() error {
	s.D.Set("attached_catalogs", s.Res.AttachedCatalogs)
func ResourceLockToMapPe(obj oci_datacatalog.ResourceLock) map[string]interface{} {
	result := map[string]interface{}{}
func (s *DatacatalogCatalogPrivateEndpointResourceCrud) updateCompartment(compartment interface{}) error {
	changeCompartmentRequest := oci_datacatalog.ChangeCatalogPrivateEndpointCompartmentRequest{}

=== ./internal/service/datacatalog/datacatalog_data_asset_data_source.go ===
func DatacatalogDataAssetDataSource() *schema.Resource {
	fieldMap := make(map[string]*schema.Schema)
func readSingularDatacatalogDataAsset(d *schema.ResourceData, m interface{}) error {
	sync := &DatacatalogDataAssetDataSourceCrud{}
func (s *DatacatalogDataAssetDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *DatacatalogDataAssetDataSourceCrud) Get() error {
	request := oci_datacatalog.GetDataAssetRequest{}
func (s *DatacatalogDataAssetDataSourceCrud) SetData() error {


=== ./internal/service/datacatalog/datacatalog_connections_data_source.go ===
func DatacatalogConnectionsDataSource() *schema.Resource {
	return &schema.Resource{
func readDatacatalogConnections(d *schema.ResourceData, m interface{}) error {
	sync := &DatacatalogConnectionsDataSourceCrud{}
func (s *DatacatalogConnectionsDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *DatacatalogConnectionsDataSourceCrud) Get() error {
	request := oci_datacatalog.ListConnectionsRequest{}
func (s *DatacatalogConnectionsDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/datacatalog/datacatalog_metastore_data_source.go ===
func DatacatalogMetastoreDataSource() *schema.Resource {
	fieldMap := make(map[string]*schema.Schema)
func readSingularDatacatalogMetastore(d *schema.ResourceData, m interface{}) error {
	sync := &DatacatalogMetastoreDataSourceCrud{}
func (s *DatacatalogMetastoreDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *DatacatalogMetastoreDataSourceCrud) Get() error {
	request := oci_datacatalog.GetMetastoreRequest{}
func (s *DatacatalogMetastoreDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/datacatalog/datacatalog_catalog_data_source.go ===
func DatacatalogCatalogDataSource() *schema.Resource {
	fieldMap := make(map[string]*schema.Schema)
func readSingularDatacatalogCatalog(d *schema.ResourceData, m interface{}) error {
	sync := &DatacatalogCatalogDataSourceCrud{}
func (s *DatacatalogCatalogDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *DatacatalogCatalogDataSourceCrud) Get() error {
	request := oci_datacatalog.GetCatalogRequest{}
func (s *DatacatalogCatalogDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/datacatalog/datacatalog_catalog_private_endpoints_data_source.go ===
func DatacatalogCatalogPrivateEndpointsDataSource() *schema.Resource {
	return &schema.Resource{
func readDatacatalogCatalogPrivateEndpoints(d *schema.ResourceData, m interface{}) error {
	sync := &DatacatalogCatalogPrivateEndpointsDataSourceCrud{}
func (s *DatacatalogCatalogPrivateEndpointsDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *DatacatalogCatalogPrivateEndpointsDataSourceCrud) Get() error {
	request := oci_datacatalog.ListCatalogPrivateEndpointsRequest{}
func (s *DatacatalogCatalogPrivateEndpointsDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/datacatalog/datacatalog_connection_data_source.go ===
func DatacatalogConnectionDataSource() *schema.Resource {
	fieldMap := make(map[string]*schema.Schema)
func readSingularDatacatalogConnection(d *schema.ResourceData, m interface{}) error {
	sync := &DatacatalogConnectionDataSourceCrud{}
func (s *DatacatalogConnectionDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *DatacatalogConnectionDataSourceCrud) Get() error {
	request := oci_datacatalog.GetConnectionRequest{}
func (s *DatacatalogConnectionDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/datacatalog/datacatalog_catalog_types_data_source.go ===
func DatacatalogCatalogTypesDataSource() *schema.Resource {
	return &schema.Resource{
func readDatacatalogCatalogTypes(d *schema.ResourceData, m interface{}) error {
	sync := &DatacatalogCatalogTypesDataSourceCrud{}
func (s *DatacatalogCatalogTypesDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *DatacatalogCatalogTypesDataSourceCrud) Get() error {
	request := oci_datacatalog.ListTypesRequest{}
func (s *DatacatalogCatalogTypesDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/datacatalog/datacatalog_catalog_type_data_source.go ===
func DatacatalogCatalogTypeDataSource() *schema.Resource {
	return &schema.Resource{
func readSingularDatacatalogCatalogType(d *schema.ResourceData, m interface{}) error {
	sync := &DatacatalogCatalogTypeDataSourceCrud{}
func (s *DatacatalogCatalogTypeDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *DatacatalogCatalogTypeDataSourceCrud) Get() error {
	request := oci_datacatalog.GetTypeRequest{}
func (s *DatacatalogCatalogTypeDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/datacatalog/datacatalog_metastores_data_source.go ===
func DatacatalogMetastoresDataSource() *schema.Resource {
	return &schema.Resource{
func readDatacatalogMetastores(d *schema.ResourceData, m interface{}) error {
	sync := &DatacatalogMetastoresDataSourceCrud{}
func (s *DatacatalogMetastoresDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *DatacatalogMetastoresDataSourceCrud) Get() error {
	request := oci_datacatalog.ListMetastoresRequest{}
func (s *DatacatalogMetastoresDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/datacatalog/datacatalog_metastore_resource.go ===
func DatacatalogMetastoreResource() *schema.Resource {
	return &schema.Resource{
func createDatacatalogMetastore(d *schema.ResourceData, m interface{}) error {
	sync := &DatacatalogMetastoreResourceCrud{}
func readDatacatalogMetastore(d *schema.ResourceData, m interface{}) error {
	sync := &DatacatalogMetastoreResourceCrud{}
func updateDatacatalogMetastore(d *schema.ResourceData, m interface{}) error {
	sync := &DatacatalogMetastoreResourceCrud{}
func deleteDatacatalogMetastore(d *schema.ResourceData, m interface{}) error {
	sync := &DatacatalogMetastoreResourceCrud{}
func (s *DatacatalogMetastoreResourceCrud) ID() string {
	return *s.Res.Id
func (s *DatacatalogMetastoreResourceCrud) CreatedPending() []string {
	return []string{
func (s *DatacatalogMetastoreResourceCrud) CreatedTarget() []string {
	return []string{
func (s *DatacatalogMetastoreResourceCrud) DeletedPending() []string {
	return []string{
func (s *DatacatalogMetastoreResourceCrud) DeletedTarget() []string {
	return []string{
func (s *DatacatalogMetastoreResourceCrud) Create() error {
	request := oci_datacatalog.CreateMetastoreRequest{}
func (s *DatacatalogMetastoreResourceCrud) getMetastoreFromWorkRequest(workId *string, retryPolicy *oci_common.RetryPolicy,
	actionTypeEnum oci_datacatalog.WorkRequestResourceActionTypeEnum, timeout time.Duration) error {
func catalogMetastoreWaitForWorkRequest(wId *string, entityType string, action oci_datacatalog.WorkRequestResourceActionTypeEnum,
	timeout time.Duration, disableFoundRetries bool, client *oci_datacatalog.DataCatalogClient) (*string, error) {
func getErrorFromDatacatalogCatalogMetastoreWorkRequest(client *oci_datacatalog.DataCatalogClient, workId *string, retryPolicy *oci_common.RetryPolicy, entityType string, action oci_datacatalog.WorkRequestResourceActionTypeEnum) error {
	response, err := client.ListWorkRequestErrors(context.Background(),
func (s *DatacatalogMetastoreResourceCrud) Get() error {
	request := oci_datacatalog.GetMetastoreRequest{}
func (s *DatacatalogMetastoreResourceCrud) Update() error {
	if compartment, ok := s.D.GetOkExists("compartment_id"); ok && s.D.HasChange("compartment_id") {
func (s *DatacatalogMetastoreResourceCrud) Delete() error {
	request := oci_datacatalog.DeleteMetastoreRequest{}
func (s *DatacatalogMetastoreResourceCrud) SetData() error {
	if s.Res.CompartmentId != nil {
func ResourceLockToMapMetastore(obj oci_datacatalog.ResourceLock) map[string]interface{} {
	result := map[string]interface{}{}
func (s *DatacatalogMetastoreResourceCrud) updateCompartment(compartment interface{}) error {
	changeCompartmentRequest := oci_datacatalog.ChangeMetastoreCompartmentRequest{}

=== ./internal/service/datacatalog/datacatalog_data_assets_data_source.go ===
func DatacatalogDataAssetsDataSource() *schema.Resource {
	return &schema.Resource{
func readDatacatalogDataAssets(d *schema.ResourceData, m interface{}) error {
	sync := &DatacatalogDataAssetsDataSourceCrud{}
func (s *DatacatalogDataAssetsDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *DatacatalogDataAssetsDataSourceCrud) Get() error {
	request := oci_datacatalog.ListDataAssetsRequest{}
func (s *DatacatalogDataAssetsDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/datacatalog/datacatalog_catalog_resource.go ===
func DatacatalogCatalogResource() *schema.Resource {
	return &schema.Resource{
func createDatacatalogCatalog(d *schema.ResourceData, m interface{}) error {
	sync := &DatacatalogCatalogResourceCrud{}
func readDatacatalogCatalog(d *schema.ResourceData, m interface{}) error {
	sync := &DatacatalogCatalogResourceCrud{}
func updateDatacatalogCatalog(d *schema.ResourceData, m interface{}) error {
	sync := &DatacatalogCatalogResourceCrud{}
func deleteDatacatalogCatalog(d *schema.ResourceData, m interface{}) error {
	sync := &DatacatalogCatalogResourceCrud{}
func (s *DatacatalogCatalogResourceCrud) ID() string {
	return *s.Res.Id
func (s *DatacatalogCatalogResourceCrud) CreatedPending() []string {
	return []string{
func (s *DatacatalogCatalogResourceCrud) CreatedTarget() []string {
	return []string{
func (s *DatacatalogCatalogResourceCrud) DeletedPending() []string {
	return []string{
func (s *DatacatalogCatalogResourceCrud) DeletedTarget() []string {
	return []string{
func (s *DatacatalogCatalogResourceCrud) Create() error {
	request := oci_datacatalog.CreateCatalogRequest{}
func (s *DatacatalogCatalogResourceCrud) getCatalogFromWorkRequest(workId *string, retryPolicy *oci_common.RetryPolicy,
	actionTypeEnum oci_datacatalog.WorkRequestResourceActionTypeEnum, timeout time.Duration) error {
func catalogWaitForWorkRequest(wId *string, entityType string, action oci_datacatalog.WorkRequestResourceActionTypeEnum,
	timeout time.Duration, disableFoundRetries bool, client *oci_datacatalog.DataCatalogClient) (*string, error) {
func getErrorFromDatacatalogCatalogWorkRequest(client *oci_datacatalog.DataCatalogClient, workId *string, retryPolicy *oci_common.RetryPolicy, entityType string, action oci_datacatalog.WorkRequestResourceActionTypeEnum) error {
	response, err := client.ListWorkRequestErrors(context.Background(),
func (s *DatacatalogCatalogResourceCrud) Get() error {
	request := oci_datacatalog.GetCatalogRequest{}
func (s *DatacatalogCatalogResourceCrud) Update() error {
	if compartment, ok := s.D.GetOkExists("compartment_id"); ok && s.D.HasChange("compartment_id") {
func (s *DatacatalogCatalogResourceCrud) Delete() error {
	request := oci_datacatalog.DeleteCatalogRequest{}
func (s *DatacatalogCatalogResourceCrud) SetData() error {
	attachedCatalogPrivateEndpoints := []interface{}{}
func ResourceLockToMapCatalog(obj oci_datacatalog.ResourceLock) map[string]interface{} {
	result := map[string]interface{}{}
func (s *DatacatalogCatalogResourceCrud) attachCatalogPrivateEndpoints(attachCatalogPrivateEndpoints []string) error {
	for _, attachCatalogPrivateEndpoint := range attachCatalogPrivateEndpoints {
func (s *DatacatalogCatalogResourceCrud) detachCatalogPrivateEndpoints(detachCatalogPrivateEndpoints []string) error {
	for _, detachCatalogPrivateEndpoint := range detachCatalogPrivateEndpoints {
func (s *DatacatalogCatalogResourceCrud) updateCompartment(compartment interface{}) error {
	changeCompartmentRequest := oci_datacatalog.ChangeCatalogCompartmentRequest{}

=== ./internal/service/datacatalog/datacatalog_connection_resource.go ===
func DatacatalogConnectionResource() *schema.Resource {
	return &schema.Resource{
func createDatacatalogConnection(d *schema.ResourceData, m interface{}) error {
	sync := &DatacatalogConnectionResourceCrud{}
func readDatacatalogConnection(d *schema.ResourceData, m interface{}) error {
	sync := &DatacatalogConnectionResourceCrud{}
func updateDatacatalogConnection(d *schema.ResourceData, m interface{}) error {
	sync := &DatacatalogConnectionResourceCrud{}
func deleteDatacatalogConnection(d *schema.ResourceData, m interface{}) error {
	sync := &DatacatalogConnectionResourceCrud{}
func (s *DatacatalogConnectionResourceCrud) ID() string {
	return *s.Res.Key
func (s *DatacatalogConnectionResourceCrud) CreatedPending() []string {
	return []string{
func (s *DatacatalogConnectionResourceCrud) CreatedTarget() []string {
	return []string{
func (s *DatacatalogConnectionResourceCrud) DeletedPending() []string {
	return []string{
func (s *DatacatalogConnectionResourceCrud) DeletedTarget() []string {
	return []string{
func (s *DatacatalogConnectionResourceCrud) Create() error {
	request := oci_datacatalog.CreateConnectionRequest{}
func (s *DatacatalogConnectionResourceCrud) Get() error {
	request := oci_datacatalog.GetConnectionRequest{}
func (s *DatacatalogConnectionResourceCrud) Update() error {
	request := oci_datacatalog.UpdateConnectionRequest{}
func (s *DatacatalogConnectionResourceCrud) Delete() error {
	request := oci_datacatalog.DeleteConnectionRequest{}
func (s *DatacatalogConnectionResourceCrud) SetData() error {


=== ./internal/service/datacatalog/datacatalog_export.go ===
func getDatacatalogDataAssetId(resource *tf_export.OCIResource) (string, error) {

func getDatacatalogConnectionId(resource *tf_export.OCIResource) (string, error) {


=== ./internal/service/datacatalog/datacatalog_data_asset_resource.go ===
func DatacatalogDataAssetResource() *schema.Resource {
	return &schema.Resource{
func createDatacatalogDataAsset(d *schema.ResourceData, m interface{}) error {
	sync := &DatacatalogDataAssetResourceCrud{}
func readDatacatalogDataAsset(d *schema.ResourceData, m interface{}) error {
	sync := &DatacatalogDataAssetResourceCrud{}
func updateDatacatalogDataAsset(d *schema.ResourceData, m interface{}) error {
	sync := &DatacatalogDataAssetResourceCrud{}
func deleteDatacatalogDataAsset(d *schema.ResourceData, m interface{}) error {
	sync := &DatacatalogDataAssetResourceCrud{}
func (s *DatacatalogDataAssetResourceCrud) ID() string {
	return *s.Res.Key
func (s *DatacatalogDataAssetResourceCrud) CreatedPending() []string {
	return []string{
func (s *DatacatalogDataAssetResourceCrud) CreatedTarget() []string {
	return []string{
func (s *DatacatalogDataAssetResourceCrud) DeletedPending() []string {
	return []string{
func (s *DatacatalogDataAssetResourceCrud) DeletedTarget() []string {
	return []string{
func (s *DatacatalogDataAssetResourceCrud) Create() error {
	request := oci_datacatalog.CreateDataAssetRequest{}
func (s *DatacatalogDataAssetResourceCrud) Get() error {
	request := oci_datacatalog.GetDataAssetRequest{}
func (s *DatacatalogDataAssetResourceCrud) Update() error {
	request := oci_datacatalog.UpdateDataAssetRequest{}
func (s *DatacatalogDataAssetResourceCrud) Delete() error {
	request := oci_datacatalog.DeleteDataAssetRequest{}
func (s *DatacatalogDataAssetResourceCrud) SetData() error {


=== ./internal/service/datacatalog/datacatalog_helper.go ===
func propertiesDiffSuppressFunction(key string, old string, new string, d *schema.ResourceData) bool {
	if old != "" && new != "" {
func encPropertiesDiffSuppressFunction(key string, old string, new string, d *schema.ResourceData) bool {
	if old != "" && new != "" {

=== ./internal/service/datacatalog/datacatalog_catalogs_data_source.go ===
func DatacatalogCatalogsDataSource() *schema.Resource {
	return &schema.Resource{
func readDatacatalogCatalogs(d *schema.ResourceData, m interface{}) error {
	sync := &DatacatalogCatalogsDataSourceCrud{}
func (s *DatacatalogCatalogsDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *DatacatalogCatalogsDataSourceCrud) Get() error {
	request := oci_datacatalog.ListCatalogsRequest{}
func (s *DatacatalogCatalogsDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/datacatalog/datacatalog_catalog_private_endpoint_data_source.go ===
func DatacatalogCatalogPrivateEndpointDataSource() *schema.Resource {
	fieldMap := make(map[string]*schema.Schema)
func readSingularDatacatalogCatalogPrivateEndpoint(d *schema.ResourceData, m interface{}) error {
	sync := &DatacatalogCatalogPrivateEndpointDataSourceCrud{}
func (s *DatacatalogCatalogPrivateEndpointDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *DatacatalogCatalogPrivateEndpointDataSourceCrud) Get() error {
	request := oci_datacatalog.GetCatalogPrivateEndpointRequest{}
func (s *DatacatalogCatalogPrivateEndpointDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/datacatalog/register_resource.go ===
func RegisterResource() {
	tfresource.RegisterResource("oci_datacatalog_catalog", DatacatalogCatalogResource())

=== ./internal/service/osp_gateway/osp_gateway_subscriptions_data_source.go ===
func OspGatewaySubscriptionsDataSource() *schema.Resource {
	return &schema.Resource{
func readOspGatewaySubscriptions(d *schema.ResourceData, m interface{}) error {
	sync := &OspGatewaySubscriptionsDataSourceCrud{}
func (s *OspGatewaySubscriptionsDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *OspGatewaySubscriptionsDataSourceCrud) Get() error {
	request := oci_osp_gateway.ListSubscriptionsRequest{}
func (s *OspGatewaySubscriptionsDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/osp_gateway/osp_gateway_invoices_invoice_line_data_source.go ===
func OspGatewayInvoicesInvoiceLineDataSource() *schema.Resource {
	return &schema.Resource{
func readSingularOspGatewayInvoicesInvoiceLine(d *schema.ResourceData, m interface{}) error {
	sync := &OspGatewayInvoicesInvoiceLineDataSourceCrud{}
func (s *OspGatewayInvoicesInvoiceLineDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *OspGatewayInvoicesInvoiceLineDataSourceCrud) Get() error {
	request := oci_osp_gateway.ListInvoiceLinesRequest{}
func (s *OspGatewayInvoicesInvoiceLineDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/osp_gateway/osp_gateway_export.go ===
func getOspGatewaySubscriptionId(resource *tf_export.OCIResource) (string, error) {


=== ./internal/service/osp_gateway/osp_gateway_subscription_resource.go ===
func OspGatewaySubscriptionResource() *schema.Resource {
	return &schema.Resource{
func createOspGatewaySubscription(d *schema.ResourceData, m interface{}) error {
	sync := &OspGatewaySubscriptionResourceCrud{}
func readOspGatewaySubscription(d *schema.ResourceData, m interface{}) error {
	sync := &OspGatewaySubscriptionResourceCrud{}
func updateOspGatewaySubscription(d *schema.ResourceData, m interface{}) error {
	sync := &OspGatewaySubscriptionResourceCrud{}
func deleteOspGatewaySubscription(d *schema.ResourceData, m interface{}) error {
	return nil
func (s *OspGatewaySubscriptionResourceCrud) ID() string {
	return GetSubscriptionCompositeId(s.D.Get("id").(string))
func (s *OspGatewaySubscriptionResourceCrud) Create() error {
	request := oci_osp_gateway.UpdateSubscriptionRequest{}
func (s *OspGatewaySubscriptionResourceCrud) Get() error {
	request := oci_osp_gateway.GetSubscriptionRequest{}
func (s *OspGatewaySubscriptionResourceCrud) Update() error {
	request := oci_osp_gateway.UpdateSubscriptionRequest{}
func (s *OspGatewaySubscriptionResourceCrud) SetData() error {

func (s *OspGatewaySubscriptionResourceCrud) mapToAddress(fieldKeyFormat string) (oci_osp_gateway.Address, error) {
	result := oci_osp_gateway.Address{}
func (s *OspGatewaySubscriptionResourceCrud) mapToMerchantDefinedData(fieldKeyFormat string) (oci_osp_gateway.MerchantDefinedData, error) {
	result := oci_osp_gateway.MerchantDefinedData{}
func (s *OspGatewaySubscriptionResourceCrud) mapToPaymentGateway(fieldKeyFormat string) (oci_osp_gateway.PaymentGateway, error) {
	result := oci_osp_gateway.PaymentGateway{}
func (s *OspGatewaySubscriptionResourceCrud) mapToPaymentOption(fieldKeyFormat string) (oci_osp_gateway.PaymentOption, error) {
	var baseObject oci_osp_gateway.PaymentOption
func (s *OspGatewaySubscriptionResourceCrud) mapToSubscription(fieldKeyFormat string) (oci_osp_gateway.Subscription, error) {
	result := oci_osp_gateway.Subscription{}
func (s *OspGatewaySubscriptionResourceCrud) mapToTaxInfo(fieldKeyFormat string) (oci_osp_gateway.TaxInfo, error) {
	result := oci_osp_gateway.TaxInfo{}

=== ./internal/service/osp_gateway/osp_gateway_address_data_source.go ===
func OspGatewayAddressDataSource() *schema.Resource {
	return &schema.Resource{
func readSingularOspGatewayAddress(d *schema.ResourceData, m interface{}) error {
	sync := &OspGatewayAddressDataSourceCrud{}
func (s *OspGatewayAddressDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *OspGatewayAddressDataSourceCrud) Get() error {
	request := oci_osp_gateway.GetAddressRequest{}
func (s *OspGatewayAddressDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/osp_gateway/osp_gateway_invoices_invoice_lines_data_source.go ===
func OspGatewayInvoicesInvoiceLinesDataSource() *schema.Resource {
	return &schema.Resource{
func readOspGatewayInvoicesInvoiceLines(d *schema.ResourceData, m interface{}) error {
	sync := &OspGatewayInvoicesInvoiceLinesDataSourceCrud{}
func (s *OspGatewayInvoicesInvoiceLinesDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *OspGatewayInvoicesInvoiceLinesDataSourceCrud) Get() error {
	request := oci_osp_gateway.ListInvoiceLinesRequest{}
func (s *OspGatewayInvoicesInvoiceLinesDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/osp_gateway/osp_gateway_invoice_data_source.go ===
func OspGatewayInvoiceDataSource() *schema.Resource {
	return &schema.Resource{
func readSingularOspGatewayInvoice(d *schema.ResourceData, m interface{}) error {
	sync := &OspGatewayInvoiceDataSourceCrud{}
func (s *OspGatewayInvoiceDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *OspGatewayInvoiceDataSourceCrud) Get() error {
	request := oci_osp_gateway.GetInvoiceRequest{}
func (s *OspGatewayInvoiceDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/osp_gateway/osp_gateway_address_action_verification_resource.go ===
func OspGatewayAddressActionVerificationResource() *schema.Resource {
	return &schema.Resource{
func createOspGatewayAddressActionVerification(d *schema.ResourceData, m interface{}) error {
	sync := &OspGatewayAddressActionVerificationResourceCrud{}
func readOspGatewayAddressActionVerification(d *schema.ResourceData, m interface{}) error {
	return nil
func deleteOspGatewayAddressActionVerification(d *schema.ResourceData, m interface{}) error {
	return nil
func (s *OspGatewayAddressActionVerificationResourceCrud) ID() string {
	return "null"
func (s *OspGatewayAddressActionVerificationResourceCrud) Create() error {
	request := oci_osp_gateway.VerifyAddressRequest{}
func (s *OspGatewayAddressActionVerificationResourceCrud) SetData() error {
	if s.Res.Address != nil {

=== ./internal/service/osp_gateway/osp_gateway_invoices_data_source.go ===
func OspGatewayInvoicesDataSource() *schema.Resource {
	return &schema.Resource{
func readOspGatewayInvoices(d *schema.ResourceData, m interface{}) error {
	sync := &OspGatewayInvoicesDataSourceCrud{}
func (s *OspGatewayInvoicesDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *OspGatewayInvoicesDataSourceCrud) Get() error {
	request := oci_osp_gateway.ListInvoicesRequest{}
func (s *OspGatewayInvoicesDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/osp_gateway/osp_gateway_address_rule_data_source.go ===
func OspGatewayAddressRuleDataSource() *schema.Resource {
	return &schema.Resource{
func readSingularOspGatewayAddressRule(d *schema.ResourceData, m interface{}) error {
	sync := &OspGatewayAddressRuleDataSourceCrud{}
func (s *OspGatewayAddressRuleDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *OspGatewayAddressRuleDataSourceCrud) Get() error {
	request := oci_osp_gateway.GetAddressRuleRequest{}
func (s *OspGatewayAddressRuleDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/osp_gateway/osp_gateway_subscription_data_source.go ===
func OspGatewaySubscriptionDataSource() *schema.Resource {
	fieldMap := make(map[string]*schema.Schema)
func readSingularOspGatewaySubscription(d *schema.ResourceData, m interface{}) error {
	sync := &OspGatewaySubscriptionDataSourceCrud{}
func (s *OspGatewaySubscriptionDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *OspGatewaySubscriptionDataSourceCrud) Get() error {
	request := oci_osp_gateway.GetSubscriptionRequest{}
func (s *OspGatewaySubscriptionDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/osp_gateway/register_resource.go ===
func RegisterResource() {
	tfresource.RegisterResource("oci_osp_gateway_address_action_verification", OspGatewayAddressActionVerificationResource())

=== ./internal/service/license_manager/license_manager_product_license_resource.go ===
func LicenseManagerProductLicenseResource() *schema.Resource {
	return &schema.Resource{
func createLicenseManagerProductLicense(d *schema.ResourceData, m interface{}) error {
	sync := &LicenseManagerProductLicenseResourceCrud{}
func readLicenseManagerProductLicense(d *schema.ResourceData, m interface{}) error {
	sync := &LicenseManagerProductLicenseResourceCrud{}
func updateLicenseManagerProductLicense(d *schema.ResourceData, m interface{}) error {
	sync := &LicenseManagerProductLicenseResourceCrud{}
func deleteLicenseManagerProductLicense(d *schema.ResourceData, m interface{}) error {
	sync := &LicenseManagerProductLicenseResourceCrud{}
func (s *LicenseManagerProductLicenseResourceCrud) ID() string {
	return *s.Res.Id
func (s *LicenseManagerProductLicenseResourceCrud) CreatedPending() []string {
	return []string{}
func (s *LicenseManagerProductLicenseResourceCrud) CreatedTarget() []string {
	return []string{
func (s *LicenseManagerProductLicenseResourceCrud) DeletedPending() []string {
	return []string{}
func (s *LicenseManagerProductLicenseResourceCrud) DeletedTarget() []string {
	return []string{
func (s *LicenseManagerProductLicenseResourceCrud) Create() error {
	request := oci_license_manager.CreateProductLicenseRequest{}
func (s *LicenseManagerProductLicenseResourceCrud) Get() error {
	request := oci_license_manager.GetProductLicenseRequest{}
func (s *LicenseManagerProductLicenseResourceCrud) Update() error {
	request := oci_license_manager.UpdateProductLicenseRequest{}
func (s *LicenseManagerProductLicenseResourceCrud) Delete() error {
	request := oci_license_manager.DeleteProductLicenseRequest{}
func (s *LicenseManagerProductLicenseResourceCrud) SetData() error {
	if s.Res.ActiveLicenseRecordCount != nil {
func (s *LicenseManagerProductLicenseResourceCrud) mapToImageDetails(fieldKeyFormat string) (oci_license_manager.ImageDetails, error) {
	result := oci_license_manager.ImageDetails{}

=== ./internal/service/license_manager/license_manager_product_licenses_data_source.go ===
func LicenseManagerProductLicensesDataSource() *schema.Resource {
	return &schema.Resource{
func readLicenseManagerProductLicenses(d *schema.ResourceData, m interface{}) error {
	sync := &LicenseManagerProductLicensesDataSourceCrud{}
func (s *LicenseManagerProductLicensesDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *LicenseManagerProductLicensesDataSourceCrud) Get() error {
	request := oci_license_manager.ListProductLicensesRequest{}
func (s *LicenseManagerProductLicensesDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/license_manager/license_manager_license_metric_data_source.go ===
func LicenseManagerLicenseMetricDataSource() *schema.Resource {
	return &schema.Resource{
func readSingularLicenseManagerLicenseMetric(d *schema.ResourceData, m interface{}) error {
	sync := &LicenseManagerLicenseMetricDataSourceCrud{}
func (s *LicenseManagerLicenseMetricDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *LicenseManagerLicenseMetricDataSourceCrud) Get() error {
	request := oci_license_manager.GetLicenseMetricRequest{}
func (s *LicenseManagerLicenseMetricDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/license_manager/license_manager_top_utilized_product_licenses_data_source.go ===
func LicenseManagerTopUtilizedProductLicensesDataSource() *schema.Resource {
	return &schema.Resource{
func readLicenseManagerTopUtilizedProductLicenses(d *schema.ResourceData, m interface{}) error {
	sync := &LicenseManagerTopUtilizedProductLicensesDataSourceCrud{}
func (s *LicenseManagerTopUtilizedProductLicensesDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *LicenseManagerTopUtilizedProductLicensesDataSourceCrud) Get() error {
	request := oci_license_manager.ListTopUtilizedProductLicensesRequest{}
func (s *LicenseManagerTopUtilizedProductLicensesDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/license_manager/license_manager_configuration_resource.go ===
func LicenseManagerConfigurationResource() *schema.Resource {
	return &schema.Resource{
func createLicenseManagerConfiguration(d *schema.ResourceData, m interface{}) error {
	sync := &LicenseManagerConfigurationResourceCrud{}
func readLicenseManagerConfiguration(d *schema.ResourceData, m interface{}) error {
	sync := &LicenseManagerConfigurationResourceCrud{}
func updateLicenseManagerConfiguration(d *schema.ResourceData, m interface{}) error {
	sync := &LicenseManagerConfigurationResourceCrud{}
func deleteLicenseManagerConfiguration(d *schema.ResourceData, m interface{}) error {
	return nil
func (s *LicenseManagerConfigurationResourceCrud) ID() string {
	return GetConfigurationId(*s.Res.CompartmentId)
func (s *LicenseManagerConfigurationResourceCrud) Create() error {
	request := oci_license_manager.UpdateConfigurationRequest{}
func (s *LicenseManagerConfigurationResourceCrud) Get() error {
	request := oci_license_manager.GetConfigurationRequest{}
func (s *LicenseManagerConfigurationResourceCrud) Update() error {
	request := oci_license_manager.UpdateConfigurationRequest{}
func (s *LicenseManagerConfigurationResourceCrud) SetData() error {


=== ./internal/service/license_manager/license_manager_product_license_consumers_data_source.go ===
func LicenseManagerProductLicenseConsumersDataSource() *schema.Resource {
	return &schema.Resource{
func readLicenseManagerProductLicenseConsumers(d *schema.ResourceData, m interface{}) error {
	sync := &LicenseManagerProductLicenseConsumersDataSourceCrud{}
func (s *LicenseManagerProductLicenseConsumersDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *LicenseManagerProductLicenseConsumersDataSourceCrud) Get() error {
	request := oci_license_manager.ListProductLicenseConsumersRequest{}
func (s *LicenseManagerProductLicenseConsumersDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/license_manager/license_manager_export.go ===
func getLicenseManagerConfigurationId(resource *tf_export.OCIResource) (string, error) {
	compartmentId, ok := resource.SourceAttributes["compartment_id"].(string)

=== ./internal/service/license_manager/license_manager_license_record_data_source.go ===
func LicenseManagerLicenseRecordDataSource() *schema.Resource {
	fieldMap := make(map[string]*schema.Schema)
func readSingularLicenseManagerLicenseRecord(d *schema.ResourceData, m interface{}) error {
	sync := &LicenseManagerLicenseRecordDataSourceCrud{}
func (s *LicenseManagerLicenseRecordDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *LicenseManagerLicenseRecordDataSourceCrud) Get() error {
	request := oci_license_manager.GetLicenseRecordRequest{}
func (s *LicenseManagerLicenseRecordDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/license_manager/license_manager_license_records_data_source.go ===
func LicenseManagerLicenseRecordsDataSource() *schema.Resource {
	return &schema.Resource{
func readLicenseManagerLicenseRecords(d *schema.ResourceData, m interface{}) error {
	sync := &LicenseManagerLicenseRecordsDataSourceCrud{}
func (s *LicenseManagerLicenseRecordsDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *LicenseManagerLicenseRecordsDataSourceCrud) Get() error {
	request := oci_license_manager.ListLicenseRecordsRequest{}
func (s *LicenseManagerLicenseRecordsDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/license_manager/license_manager_top_utilized_resources_data_source.go ===
func LicenseManagerTopUtilizedResourcesDataSource() *schema.Resource {
	return &schema.Resource{
func readLicenseManagerTopUtilizedResources(d *schema.ResourceData, m interface{}) error {
	sync := &LicenseManagerTopUtilizedResourcesDataSourceCrud{}
func (s *LicenseManagerTopUtilizedResourcesDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *LicenseManagerTopUtilizedResourcesDataSourceCrud) Get() error {
	request := oci_license_manager.ListTopUtilizedResourcesRequest{}
func (s *LicenseManagerTopUtilizedResourcesDataSourceCrud) SetData() error {
	if s.Res == nil {
func TopUtilizedResourcesSummaryToMap(obj oci_license_manager.TopUtilizedResourceSummary) map[string]interface{} {
	result := map[string]interface{}{}

=== ./internal/service/license_manager/license_manager_product_license_data_source.go ===
func LicenseManagerProductLicenseDataSource() *schema.Resource {
	fieldMap := make(map[string]*schema.Schema)
func readSingularLicenseManagerProductLicense(d *schema.ResourceData, m interface{}) error {
	sync := &LicenseManagerProductLicenseDataSourceCrud{}
func (s *LicenseManagerProductLicenseDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *LicenseManagerProductLicenseDataSourceCrud) Get() error {
	request := oci_license_manager.GetProductLicenseRequest{}
func (s *LicenseManagerProductLicenseDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/license_manager/license_manager_configuration_data_source.go ===
func LicenseManagerConfigurationDataSource() *schema.Resource {
	fieldMap := make(map[string]*schema.Schema)
func readSingularLicenseManagerConfiguration(d *schema.ResourceData, m interface{}) error {
	sync := &LicenseManagerConfigurationDataSourceCrud{}
func (s *LicenseManagerConfigurationDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *LicenseManagerConfigurationDataSourceCrud) Get() error {
	request := oci_license_manager.GetConfigurationRequest{}
func (s *LicenseManagerConfigurationDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/license_manager/license_manager_license_record_resource.go ===
func LicenseManagerLicenseRecordResource() *schema.Resource {
	return &schema.Resource{
func createLicenseManagerLicenseRecord(d *schema.ResourceData, m interface{}) error {
	sync := &LicenseManagerLicenseRecordResourceCrud{}
func readLicenseManagerLicenseRecord(d *schema.ResourceData, m interface{}) error {
	sync := &LicenseManagerLicenseRecordResourceCrud{}
func updateLicenseManagerLicenseRecord(d *schema.ResourceData, m interface{}) error {
	sync := &LicenseManagerLicenseRecordResourceCrud{}
func deleteLicenseManagerLicenseRecord(d *schema.ResourceData, m interface{}) error {
	sync := &LicenseManagerLicenseRecordResourceCrud{}
func (s *LicenseManagerLicenseRecordResourceCrud) ID() string {
	return *s.Res.Id
func (s *LicenseManagerLicenseRecordResourceCrud) CreatedPending() []string {
	return []string{}
func (s *LicenseManagerLicenseRecordResourceCrud) CreatedTarget() []string {
	return []string{
func (s *LicenseManagerLicenseRecordResourceCrud) DeletedPending() []string {
	return []string{}
func (s *LicenseManagerLicenseRecordResourceCrud) DeletedTarget() []string {
	return []string{
func (s *LicenseManagerLicenseRecordResourceCrud) Create() error {
	request := oci_license_manager.CreateLicenseRecordRequest{}
func (s *LicenseManagerLicenseRecordResourceCrud) Get() error {
	request := oci_license_manager.GetLicenseRecordRequest{}
func (s *LicenseManagerLicenseRecordResourceCrud) Update() error {
	request := oci_license_manager.UpdateLicenseRecordRequest{}
func (s *LicenseManagerLicenseRecordResourceCrud) Delete() error {
	request := oci_license_manager.DeleteLicenseRecordRequest{}
func (s *LicenseManagerLicenseRecordResourceCrud) SetData() error {
	if s.Res.CompartmentId != nil {

=== ./internal/service/license_manager/register_resource.go ===
func RegisterResource() {
	tfresource.RegisterResource("oci_license_manager_configuration", LicenseManagerConfigurationResource())

=== ./internal/service/containerengine/containerengine_clusters_data_source.go ===
func ContainerengineClustersDataSource() *schema.Resource {
	return &schema.Resource{
func readContainerengineClusters(d *schema.ResourceData, m interface{}) error {
	sync := &ContainerengineClustersDataSourceCrud{}
func (s *ContainerengineClustersDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *ContainerengineClustersDataSourceCrud) Get() error {
	request := oci_containerengine.ListClustersRequest{}
func (s *ContainerengineClustersDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/containerengine/containerengine_virtual_node_pool_resource.go ===
func ContainerengineVirtualNodePoolResource() *schema.Resource {
	return &schema.Resource{
func createContainerengineVirtualNodePool(d *schema.ResourceData, m interface{}) error {
	sync := &ContainerengineVirtualNodePoolResourceCrud{}
func readContainerengineVirtualNodePool(d *schema.ResourceData, m interface{}) error {
	sync := &ContainerengineVirtualNodePoolResourceCrud{}
func updateContainerengineVirtualNodePool(d *schema.ResourceData, m interface{}) error {
	sync := &ContainerengineVirtualNodePoolResourceCrud{}
func deleteContainerengineVirtualNodePool(d *schema.ResourceData, m interface{}) error {
	sync := &ContainerengineVirtualNodePoolResourceCrud{}
func (s *ContainerengineVirtualNodePoolResourceCrud) ID() string {
	return *s.Res.Id
func (s *ContainerengineVirtualNodePoolResourceCrud) CreatedPending() []string {
	return []string{
func (s *ContainerengineVirtualNodePoolResourceCrud) CreatedTarget() []string {
	return []string{
func (s *ContainerengineVirtualNodePoolResourceCrud) DeletedPending() []string {
	return []string{
func (s *ContainerengineVirtualNodePoolResourceCrud) DeletedTarget() []string {
	return []string{
func (s *ContainerengineVirtualNodePoolResourceCrud) Create() error {
	request := oci_containerengine.CreateVirtualNodePoolRequest{}
func (s *ContainerengineVirtualNodePoolResourceCrud) getVirtualNodePoolFromWorkRequest(workId *string, retryPolicy *oci_common.RetryPolicy,
	actionTypeEnum oci_containerengine.WorkRequestResourceActionTypeEnum, timeout time.Duration) error {
func virtualNodePoolWaitForWorkRequest(wId *string, entityType string, action oci_containerengine.WorkRequestResourceActionTypeEnum,
	timeout time.Duration, disableFoundRetries bool, client *oci_containerengine.ContainerEngineClient) (*string, error) {
func getErrorFromContainerengineVirtualNodePoolWorkRequest(client *oci_containerengine.ContainerEngineClient, workId *string, compartmentId *string, retryPolicy *oci_common.RetryPolicy, entityType string, action oci_containerengine.WorkRequestResourceActionTypeEnum) error {
	response, err := client.ListWorkRequestErrors(context.Background(),
func (s *ContainerengineVirtualNodePoolResourceCrud) Get() error {
	request := oci_containerengine.GetVirtualNodePoolRequest{}
func (s *ContainerengineVirtualNodePoolResourceCrud) Update() error {
	request := oci_containerengine.UpdateVirtualNodePoolRequest{}
func (s *ContainerengineVirtualNodePoolResourceCrud) Delete() error {
	request := oci_containerengine.DeleteVirtualNodePoolRequest{}
func (s *ContainerengineVirtualNodePoolResourceCrud) SetData() error {
	if s.Res.ClusterId != nil {
func (s *ContainerengineVirtualNodePoolResourceCrud) mapToInitialVirtualNodeLabel(fieldKeyFormat string) (oci_containerengine.InitialVirtualNodeLabel, error) {
	result := oci_containerengine.InitialVirtualNodeLabel{}
func (s *ContainerengineVirtualNodePoolResourceCrud) mapToPlacementConfiguration(fieldKeyFormat string) (oci_containerengine.PlacementConfiguration, error) {
	result := oci_containerengine.PlacementConfiguration{}
func (s *ContainerengineVirtualNodePoolResourceCrud) mapToPodConfiguration(fieldKeyFormat string) (oci_containerengine.PodConfiguration, error) {
	result := oci_containerengine.PodConfiguration{}
func (s *ContainerengineVirtualNodePoolResourceCrud) mapToTaint(fieldKeyFormat string) (oci_containerengine.Taint, error) {
	result := oci_containerengine.Taint{}
func (s *ContainerengineVirtualNodePoolResourceCrud) mapToVirtualNodeTags(fieldKeyFormat string) (oci_containerengine.VirtualNodeTags, error) {
	result := oci_containerengine.VirtualNodeTags{}

=== ./internal/service/containerengine/containerengine_node_pool_resource.go ===
func ContainerengineNodePoolResource() *schema.Resource {
	return &schema.Resource{
func createContainerengineNodePool(d *schema.ResourceData, m interface{}) error {
	sync := &ContainerengineNodePoolResourceCrud{}
func readContainerengineNodePool(d *schema.ResourceData, m interface{}) error {
	sync := &ContainerengineNodePoolResourceCrud{}
func updateContainerengineNodePool(d *schema.ResourceData, m interface{}) error {
	sync := &ContainerengineNodePoolResourceCrud{}
func deleteContainerengineNodePool(d *schema.ResourceData, m interface{}) error {
	sync := &ContainerengineNodePoolResourceCrud{}
func (s *ContainerengineNodePoolResourceCrud) ID() string {
	return *s.Res.Id
func (s *ContainerengineNodePoolResourceCrud) CreatedPending() []string {
	return []string{
func (s *ContainerengineNodePoolResourceCrud) CreatedTarget() []string {
	return []string{
func (s *ContainerengineNodePoolResourceCrud) DeletedPending() []string {
	return []string{
func (s *ContainerengineNodePoolResourceCrud) DeletedTarget() []string {
	return []string{
func (s *ContainerengineNodePoolResourceCrud) Create() error {
	request := oci_containerengine.CreateNodePoolRequest{}
func (s *ContainerengineNodePoolResourceCrud) getNodePoolFromWorkRequest(workId *string, retryPolicy *oci_common.RetryPolicy,
	actionTypeEnum oci_containerengine.WorkRequestResourceActionTypeEnum, timeout time.Duration) error {
func getNodePoolIdFromWorkRequest(wId *string, entityType string, action oci_containerengine.WorkRequestResourceActionTypeEnum,
	disableFoundRetries bool, client *oci_containerengine.ContainerEngineClient) (*string, error) {
func nodePoolWaitForWorkRequest(wId *string, entityType string, action oci_containerengine.WorkRequestResourceActionTypeEnum,
	timeout time.Duration, disableFoundRetries bool, client *oci_containerengine.ContainerEngineClient) (*string, error) {
func getErrorFromContainerengineNodePoolWorkRequest(client *oci_containerengine.ContainerEngineClient, workId *string, compartmentId *string, retryPolicy *oci_common.RetryPolicy, entityType string, action oci_containerengine.WorkRequestResourceActionTypeEnum) error {
	response, err := client.ListWorkRequestErrors(context.Background(),
func (s *ContainerengineNodePoolResourceCrud) Get() error {
	request := oci_containerengine.GetNodePoolRequest{}
func (s *ContainerengineNodePoolResourceCrud) Update() error {
	request := oci_containerengine.UpdateNodePoolRequest{}
func (s *ContainerengineNodePoolResourceCrud) Delete() error {
	request := oci_containerengine.DeleteNodePoolRequest{}
func (s *ContainerengineNodePoolResourceCrud) SetData() error {
	if s.Res.ClusterId != nil {
func (s *ContainerengineNodePoolResourceCrud) mapToCreateNodePoolNodeConfigDetails(fieldKeyFormat string) (oci_containerengine.CreateNodePoolNodeConfigDetails, error) {
	result := oci_containerengine.CreateNodePoolNodeConfigDetails{}
func (s *ContainerengineNodePoolResourceCrud) mapToCreateNodeShapeConfigDetails(fieldKeyFormat string) (oci_containerengine.CreateNodeShapeConfigDetails, error) {
	result := oci_containerengine.CreateNodeShapeConfigDetails{}
func (s *ContainerengineNodePoolResourceCrud) mapToUpdateNodeShapeConfigDetails(fieldKeyFormat string) (oci_containerengine.UpdateNodeShapeConfigDetails, error) {
	result := oci_containerengine.UpdateNodeShapeConfigDetails{}
func (s *ContainerengineNodePoolResourceCrud) mapToKeyValue(fieldKeyFormat string) (oci_containerengine.KeyValue, error) {
	result := oci_containerengine.KeyValue{}
func (s *ContainerengineNodePoolResourceCrud) mapToNodeEvictionNodePoolSettings(fieldKeyFormat string) (oci_containerengine.NodeEvictionNodePoolSettings, error) {
	result := oci_containerengine.NodeEvictionNodePoolSettings{}
func (s *ContainerengineNodePoolResourceCrud) mapToNodePoolCyclingDetails(fieldKeyFormat string) (oci_containerengine.NodePoolCyclingDetails, error) {
	result := oci_containerengine.NodePoolCyclingDetails{}
func (s *ContainerengineNodePoolResourceCrud) mapToNodePoolPlacementConfigDetails(fieldKeyFormat string) (oci_containerengine.NodePoolPlacementConfigDetails, error) {
	result := oci_containerengine.NodePoolPlacementConfigDetails{}
func (s *ContainerengineNodePoolResourceCrud) mapToNodePoolPodNetworkOptionDetails(fieldKeyFormat string) (oci_containerengine.NodePoolPodNetworkOptionDetails, error) {
	var baseObject oci_containerengine.NodePoolPodNetworkOptionDetails
func (s *ContainerengineNodePoolResourceCrud) mapToNodeSourceDetails(fieldKeyFormat string) (oci_containerengine.NodeSourceDetails, error) {
	var baseObject oci_containerengine.NodeSourceDetails
func (s *ContainerengineNodePoolResourceCrud) mapToPreemptibleNodeConfigDetails(fieldKeyFormat string) (oci_containerengine.PreemptibleNodeConfigDetails, error) {
	result := oci_containerengine.PreemptibleNodeConfigDetails{}
func (s *ContainerengineNodePoolResourceCrud) mapToPreemptionAction(fieldKeyFormat string) (oci_containerengine.PreemptionAction, error) {
	var baseObject oci_containerengine.PreemptionAction
func (s *ContainerengineNodePoolResourceCrud) hasNodeConfigDetailsChange(fieldKeyFormat string, fieldNameList []interface{}) bool {
	for _, fieldName := range fieldNameList {
func (s *ContainerengineNodePoolResourceCrud) mapToUpdateNodePoolNodeConfigDetails(fieldKeyFormat string) (oci_containerengine.UpdateNodePoolNodeConfigDetails, error) {
	result := oci_containerengine.UpdateNodePoolNodeConfigDetails{}

=== ./internal/service/containerengine/containerengine_work_request_errors_data_source.go ===
func ContainerengineWorkRequestErrorsDataSource() *schema.Resource {
	return &schema.Resource{
func readContainerengineWorkRequestErrors(d *schema.ResourceData, m interface{}) error {
	sync := &ContainerengineWorkRequestErrorsDataSourceCrud{}
func (s *ContainerengineWorkRequestErrorsDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *ContainerengineWorkRequestErrorsDataSourceCrud) Get() error {
	request := oci_containerengine.ListWorkRequestErrorsRequest{}
func (s *ContainerengineWorkRequestErrorsDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/containerengine/containerengine_node_pools_data_source.go ===
func ContainerengineNodePoolsDataSource() *schema.Resource {
	return &schema.Resource{
func readContainerengineNodePools(d *schema.ResourceData, m interface{}) error {
	sync := &ContainerengineNodePoolsDataSourceCrud{}
func (s *ContainerengineNodePoolsDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *ContainerengineNodePoolsDataSourceCrud) Get() error {
	request := oci_containerengine.ListNodePoolsRequest{}
func (s *ContainerengineNodePoolsDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/containerengine/containerengine_cluster_workload_mappings_data_source.go ===
func ContainerengineClusterWorkloadMappingsDataSource() *schema.Resource {
	return &schema.Resource{
func readContainerengineClusterWorkloadMappings(d *schema.ResourceData, m interface{}) error {
	sync := &ContainerengineClusterWorkloadMappingsDataSourceCrud{}
func (s *ContainerengineClusterWorkloadMappingsDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *ContainerengineClusterWorkloadMappingsDataSourceCrud) Get() error {
	request := oci_containerengine.ListWorkloadMappingsRequest{}
func (s *ContainerengineClusterWorkloadMappingsDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/containerengine/containerengine_cluster_workload_mapping_data_source.go ===
func ContainerengineClusterWorkloadMappingDataSource() *schema.Resource {
	fieldMap := make(map[string]*schema.Schema)
func readSingularContainerengineClusterWorkloadMapping(d *schema.ResourceData, m interface{}) error {
	sync := &ContainerengineClusterWorkloadMappingDataSourceCrud{}
func (s *ContainerengineClusterWorkloadMappingDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *ContainerengineClusterWorkloadMappingDataSourceCrud) Get() error {
	request := oci_containerengine.GetWorkloadMappingRequest{}
func (s *ContainerengineClusterWorkloadMappingDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/containerengine/containerengine_cluster_data_source.go ===
func ContainerengineClusterDataSource() *schema.Resource {
	fieldMap := make(map[string]*schema.Schema)
func readSingularContainerengineCluster(d *schema.ResourceData, m interface{}) error {
	sync := &ContainerengineClusterDataSourceCrud{}
func (s *ContainerengineClusterDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *ContainerengineClusterDataSourceCrud) Get() error {
	request := oci_containerengine.GetClusterRequest{}
func (s *ContainerengineClusterDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/containerengine/containerengine_virtual_node_pool_data_source.go ===
func ContainerengineVirtualNodePoolDataSource() *schema.Resource {
	fieldMap := make(map[string]*schema.Schema)
func readSingularContainerengineVirtualNodePool(d *schema.ResourceData, m interface{}) error {
	sync := &ContainerengineVirtualNodePoolDataSourceCrud{}
func (s *ContainerengineVirtualNodePoolDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *ContainerengineVirtualNodePoolDataSourceCrud) Get() error {
	request := oci_containerengine.GetVirtualNodePoolRequest{}
func (s *ContainerengineVirtualNodePoolDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/containerengine/containerengine_migrate_to_native_vcn_statu_data_source.go ===
func ContainerengineMigrateToNativeVcnStatusDataSource() *schema.Resource {
	return &schema.Resource{
func readSingularContainerengineMigrateToNativeVcnStatus(d *schema.ResourceData, m interface{}) error {
	sync := &ContainerengineMigrateToNativeVcnStatusDataSourceCrud{}
func (s *ContainerengineMigrateToNativeVcnStatusDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *ContainerengineMigrateToNativeVcnStatusDataSourceCrud) Get() error {
	request := oci_containerengine.GetClusterMigrateToNativeVcnStatusRequest{}
func (s *ContainerengineMigrateToNativeVcnStatusDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/containerengine/containerengine_cluster_resource.go ===
func ContainerengineClusterResource() *schema.Resource {
	return &schema.Resource{
func createContainerengineCluster(d *schema.ResourceData, m interface{}) error {
	sync := &ContainerengineClusterResourceCrud{}
func readContainerengineCluster(d *schema.ResourceData, m interface{}) error {
	sync := &ContainerengineClusterResourceCrud{}
func updateContainerengineCluster(d *schema.ResourceData, m interface{}) error {
	sync := &ContainerengineClusterResourceCrud{}
func deleteContainerengineCluster(d *schema.ResourceData, m interface{}) error {
	sync := &ContainerengineClusterResourceCrud{}
func (s *ContainerengineClusterResourceCrud) ID() string {
	return *s.Res.Id
func (s *ContainerengineClusterResourceCrud) CreatedPending() []string {
	return []string{
func (s *ContainerengineClusterResourceCrud) CreatedTarget() []string {
	return []string{
func (s *ContainerengineClusterResourceCrud) DeletedPending() []string {
	return []string{
func (s *ContainerengineClusterResourceCrud) DeletedTarget() []string {
	return []string{
func (s *ContainerengineClusterResourceCrud) Create() error {
	request := oci_containerengine.CreateClusterRequest{}
func (s *ContainerengineClusterResourceCrud) getClusterFromWorkRequest(workId *string, retryPolicy *oci_common.RetryPolicy,
	actionTypeEnum oci_containerengine.WorkRequestResourceActionTypeEnum, timeout time.Duration) error {
func getClusterIdFromWorkRequest(wId *string, entityType string, action oci_containerengine.WorkRequestResourceActionTypeEnum,
	disableFoundRetries bool, client *oci_containerengine.ContainerEngineClient) (*string, error) {
func clusterWaitForWorkRequest(wId *string, entityType string, action oci_containerengine.WorkRequestResourceActionTypeEnum,
	timeout time.Duration, disableFoundRetries bool, client *oci_containerengine.ContainerEngineClient) (*string, error) {
func getErrorFromContainerengineClusterWorkRequest(client *oci_containerengine.ContainerEngineClient, workId *string, compartmentId *string, retryPolicy *oci_common.RetryPolicy, entityType string, action oci_containerengine.WorkRequestResourceActionTypeEnum) error {
	response, err := client.ListWorkRequestErrors(context.Background(),
func (s *ContainerengineClusterResourceCrud) Get() error {
	request := oci_containerengine.GetClusterRequest{}
func (s *ContainerengineClusterResourceCrud) Update() error {
	clusterID := s.D.Id()
func (s *ContainerengineClusterResourceCrud) updateClusterEndpointConfig(clusterID string, endpointConfig interface{}) error {
	request := oci_containerengine.UpdateClusterEndpointConfigRequest{}
func (s *ContainerengineClusterResourceCrud) migrateClusterToNativeVCN(clusterID string, endpointConfig interface{}) error {
	request := oci_containerengine.ClusterMigrateToNativeVcnRequest{}
func (s *ContainerengineClusterResourceCrud) Delete() error {
	request := oci_containerengine.DeleteClusterRequest{}
func (s *ContainerengineClusterResourceCrud) SetData() error {
	s.D.Set("available_kubernetes_upgrades", s.Res.AvailableKubernetesUpgrades)
func (s *ContainerengineClusterResourceCrud) mapToAddOnOptions(fieldKeyFormat string) (oci_containerengine.AddOnOptions, error) {
	result := oci_containerengine.AddOnOptions{}
func (s *ContainerengineClusterResourceCrud) mapToAdmissionControllerOptions(fieldKeyFormat string) (oci_containerengine.AdmissionControllerOptions, error) {
	result := oci_containerengine.AdmissionControllerOptions{}
func (s *ContainerengineClusterResourceCrud) mapToClusterCreateOptions(fieldKeyFormat string) (oci_containerengine.ClusterCreateOptions, error) {
	result := oci_containerengine.ClusterCreateOptions{}
func (s *ContainerengineClusterResourceCrud) mapToUpdateClusterOptionsDetails(fieldKeyFormat string) (oci_containerengine.UpdateClusterOptionsDetails, error) {
	result := oci_containerengine.UpdateClusterOptionsDetails{}
func (s *ContainerengineClusterResourceCrud) mapToClusterPodNetworkOptionDetails(fieldKeyFormat string) (oci_containerengine.ClusterPodNetworkOptionDetails, error) {
	var baseObject oci_containerengine.ClusterPodNetworkOptionDetails
func (s *ContainerengineClusterResourceCrud) mapToUpdateClusterEndpointConfigDetails(fieldKeyFormat string) (oci_containerengine.UpdateClusterEndpointConfigDetails, error) {
	result := oci_containerengine.UpdateClusterEndpointConfigDetails{}
func (s *ContainerengineClusterResourceCrud) mapToMigrateClusterToNativeVCNDetails(fieldKeyFormat string) (oci_containerengine.ClusterMigrateToNativeVcnDetails, error) {
	result := oci_containerengine.ClusterMigrateToNativeVcnDetails{}
func (s *ContainerengineClusterResourceCrud) mapToCreateClusterEndpointConfigDetails(fieldKeyFormat string) (oci_containerengine.CreateClusterEndpointConfigDetails, error) {
	result := oci_containerengine.CreateClusterEndpointConfigDetails{}
func (s *ContainerengineClusterResourceCrud) mapToCreateImagePolicyConfigDetails(fieldKeyFormat string) (oci_containerengine.CreateImagePolicyConfigDetails, error) {
	result := oci_containerengine.CreateImagePolicyConfigDetails{}
func (s *ContainerengineClusterResourceCrud) mapToUpdateImagePolicyConfigDetails(fieldKeyFormat string) (oci_containerengine.UpdateImagePolicyConfigDetails, error) {
	result := oci_containerengine.UpdateImagePolicyConfigDetails{}
func (s *ContainerengineClusterResourceCrud) mapToKeyDetails(fieldKeyFormat string) (oci_containerengine.KeyDetails, error) {
	result := oci_containerengine.KeyDetails{}
func (s *ContainerengineClusterResourceCrud) mapToKeyValue(fieldKeyFormat string) (oci_containerengine.KeyValue, error) {
	result := oci_containerengine.KeyValue{}
func (s *ContainerengineClusterResourceCrud) mapToKubernetesNetworkConfig(fieldKeyFormat string) (oci_containerengine.KubernetesNetworkConfig, error) {
	result := oci_containerengine.KubernetesNetworkConfig{}
func (s *ContainerengineClusterResourceCrud) mapToOpenIdConnectTokenAuthenticationConfig(fieldKeyFormat string) (oci_containerengine.OpenIdConnectTokenAuthenticationConfig, error) {
	result := oci_containerengine.OpenIdConnectTokenAuthenticationConfig{}
func (s *ContainerengineClusterResourceCrud) mapToOpenIdConnectDiscovery(fieldKeyFormat string) (oci_containerengine.OpenIdConnectDiscovery, error) {
	result := oci_containerengine.OpenIdConnectDiscovery{}
func (s *ContainerengineClusterResourceCrud) mapToPersistentVolumeConfigDetails(fieldKeyFormat string) (oci_containerengine.PersistentVolumeConfigDetails, error) {
	result := oci_containerengine.PersistentVolumeConfigDetails{}
func (s *ContainerengineClusterResourceCrud) mapToServiceLbConfigDetails(fieldKeyFormat string) (oci_containerengine.ServiceLbConfigDetails, error) {
	result := oci_containerengine.ServiceLbConfigDetails{}

=== ./internal/service/containerengine/containerengine_cluster_complete_credential_rotation_management_resource.go ===
func ContainerengineClusterCompleteCredentialRotationManagementResource() *schema.Resource {
	return &schema.Resource{
func createContainerengineClusterCompleteCredentialRotationManagement(d *schema.ResourceData, m interface{}) error {
	sync := &ContainerengineClusterCompleteCredentialRotationManagementResourceCrud{}
func readContainerengineClusterCompleteCredentialRotationManagement(d *schema.ResourceData, m interface{}) error {
	return nil
func deleteContainerengineClusterCompleteCredentialRotationManagement(d *schema.ResourceData, m interface{}) error {
	return nil
func (s *ContainerengineClusterCompleteCredentialRotationManagementResourceCrud) ID() string {
	return *s.Res.Id
func (s *ContainerengineClusterCompleteCredentialRotationManagementResourceCrud) Create() error {
	request := oci_containerengine.CompleteCredentialRotationRequest{}
func clusterCompleteCredentialRotationManagementWaitForWorkRequest(wId *string, entityType string, action oci_containerengine.WorkRequestResourceActionTypeEnum,
	timeout time.Duration, disableFoundRetries bool, client *oci_containerengine.ContainerEngineClient) (*string, error) {
func getErrorFromContainerengineClusterCompleteCredentialRotationManagementWorkRequest(client *oci_containerengine.ContainerEngineClient, workId *string, compartmentId *string, retryPolicy *oci_common.RetryPolicy, entityType string, action oci_containerengine.WorkRequestResourceActionTypeEnum) error {
	response, err := client.ListWorkRequestErrors(context.Background(),
func (s *ContainerengineClusterCompleteCredentialRotationManagementResourceCrud) SetData() error {
	return nil

=== ./internal/service/containerengine/containerengine_addons_data_source.go ===
func ContainerengineAddonsDataSource() *schema.Resource {
	return &schema.Resource{
func readContainerengineAddons(d *schema.ResourceData, m interface{}) error {
	sync := &ContainerengineAddonsDataSourceCrud{}
func (s *ContainerengineAddonsDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *ContainerengineAddonsDataSourceCrud) Get() error {
	request := oci_containerengine.ListAddonsRequest{}
func (s *ContainerengineAddonsDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/containerengine/containerengine_virtual_node_pools_data_source.go ===
func ContainerengineVirtualNodePoolsDataSource() *schema.Resource {
	return &schema.Resource{
func readContainerengineVirtualNodePools(d *schema.ResourceData, m interface{}) error {
	sync := &ContainerengineVirtualNodePoolsDataSourceCrud{}
func (s *ContainerengineVirtualNodePoolsDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *ContainerengineVirtualNodePoolsDataSourceCrud) Get() error {
	request := oci_containerengine.ListVirtualNodePoolsRequest{}
func (s *ContainerengineVirtualNodePoolsDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/containerengine/containerengine_export.go ===
func processContainerengineNodePool(ctx *tf_export.ResourceDiscoveryContext, resources []*tf_export.OCIResource) ([]*tf_export.OCIResource, error) {
	for _, nodePool := range resources {
func getContainerengineAddonId(resource *tf_export.OCIResource) (string, error) {

func getContainerengineClusterWorkloadMappingId(resource *tf_export.OCIResource) (string, error) {

func findAddonResourcesOverride(ctx *tf_export.ResourceDiscoveryContext, tfMeta *tf_export.TerraformResourceAssociation, parent *tf_export.OCIResource, resourceGraph *tf_export.TerraformResourceGraph) ([]*tf_export.OCIResource, error) {
	//when try to listAddons for a non-enhanced cluster, server return 400 addon-management not supported, this override export resources by clusterId function to return empty list instead
func processContainerengineAddon(context *tf_export.ResourceDiscoveryContext, resources []*tf_export.OCIResource) ([]*tf_export.OCIResource, error) {
	//since `remove_addon_resources_on_delete` is required field but not part of resource attribute, so it is not returned by the list/get API, populate default value true here to make sure import resource work.

=== ./internal/service/containerengine/containerengine_work_request_log_entries_data_source.go ===
func ContainerengineWorkRequestLogEntriesDataSource() *schema.Resource {
	return &schema.Resource{
func readContainerengineWorkRequestLogEntries(d *schema.ResourceData, m interface{}) error {
	sync := &ContainerengineWorkRequestLogEntriesDataSourceCrud{}
func (s *ContainerengineWorkRequestLogEntriesDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *ContainerengineWorkRequestLogEntriesDataSourceCrud) Get() error {
	request := oci_containerengine.ListWorkRequestLogsRequest{}
func (s *ContainerengineWorkRequestLogEntriesDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/containerengine/containerengine_cluster_workload_mapping_resource.go ===
func ContainerengineClusterWorkloadMappingResource() *schema.Resource {
	return &schema.Resource{
func createContainerengineClusterWorkloadMapping(d *schema.ResourceData, m interface{}) error {
	sync := &ContainerengineClusterWorkloadMappingResourceCrud{}
func readContainerengineClusterWorkloadMapping(d *schema.ResourceData, m interface{}) error {
	sync := &ContainerengineClusterWorkloadMappingResourceCrud{}
func updateContainerengineClusterWorkloadMapping(d *schema.ResourceData, m interface{}) error {
	sync := &ContainerengineClusterWorkloadMappingResourceCrud{}
func deleteContainerengineClusterWorkloadMapping(d *schema.ResourceData, m interface{}) error {
	sync := &ContainerengineClusterWorkloadMappingResourceCrud{}
func (s *ContainerengineClusterWorkloadMappingResourceCrud) ID() string {
	return GetClusterWorkloadMappingCompositeId(s.D.Get("cluster_id").(string), *s.Res.Id)
func (s *ContainerengineClusterWorkloadMappingResourceCrud) CreatedPending() []string {
	return []string{
func (s *ContainerengineClusterWorkloadMappingResourceCrud) CreatedTarget() []string {
	return []string{
func (s *ContainerengineClusterWorkloadMappingResourceCrud) DeletedPending() []string {
	return []string{
func (s *ContainerengineClusterWorkloadMappingResourceCrud) DeletedTarget() []string {
	return []string{
func (s *ContainerengineClusterWorkloadMappingResourceCrud) Create() error {
	request := oci_containerengine.CreateWorkloadMappingRequest{}
func (s *ContainerengineClusterWorkloadMappingResourceCrud) Get() error {
	request := oci_containerengine.GetWorkloadMappingRequest{}
func (s *ContainerengineClusterWorkloadMappingResourceCrud) Update() error {
	request := oci_containerengine.UpdateWorkloadMappingRequest{}
func (s *ContainerengineClusterWorkloadMappingResourceCrud) Delete() error {
	request := oci_containerengine.DeleteWorkloadMappingRequest{}
func (s *ContainerengineClusterWorkloadMappingResourceCrud) SetData() error {


=== ./internal/service/containerengine/containerengine_work_requests_data_source.go ===
func ContainerengineWorkRequestsDataSource() *schema.Resource {
	return &schema.Resource{
func readContainerengineWorkRequests(d *schema.ResourceData, m interface{}) error {
	sync := &ContainerengineWorkRequestsDataSourceCrud{}
func (s *ContainerengineWorkRequestsDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *ContainerengineWorkRequestsDataSourceCrud) Get() error {
	request := oci_containerengine.ListWorkRequestsRequest{}
func (s *ContainerengineWorkRequestsDataSourceCrud) SetData() error {
	if s.Res == nil {
func WorkRequestResourceToMap(obj oci_containerengine.WorkRequestResource) map[string]interface{} {
	result := map[string]interface{}{}

=== ./internal/service/containerengine/containerengine_cluster_credential_rotation_status_data_source.go ===
func ContainerengineClusterCredentialRotationStatusDataSource() *schema.Resource {
	return &schema.Resource{
func readSingularContainerengineClusterCredentialRotationStatus(d *schema.ResourceData, m interface{}) error {
	sync := &ContainerengineClusterCredentialRotationStatusDataSourceCrud{}
func (s *ContainerengineClusterCredentialRotationStatusDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *ContainerengineClusterCredentialRotationStatusDataSourceCrud) Get() error {
	request := oci_containerengine.GetCredentialRotationStatusRequest{}
func (s *ContainerengineClusterCredentialRotationStatusDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/containerengine/containerengine_node_pool_data_source.go ===
func ContainerengineNodePoolDataSource() *schema.Resource {
	fieldMap := make(map[string]*schema.Schema)
func readSingularContainerengineNodePool(d *schema.ResourceData, m interface{}) error {
	sync := &ContainerengineNodePoolDataSourceCrud{}
func (s *ContainerengineNodePoolDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *ContainerengineNodePoolDataSourceCrud) Get() error {
	request := oci_containerengine.GetNodePoolRequest{}
func (s *ContainerengineNodePoolDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/containerengine/containerengine_cluster_option_data_source.go ===
func ContainerengineClusterOptionDataSource() *schema.Resource {
	return &schema.Resource{
func readSingularContainerengineClusterOption(d *schema.ResourceData, m interface{}) error {
	sync := &ContainerengineClusterOptionDataSourceCrud{}
func (s *ContainerengineClusterOptionDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *ContainerengineClusterOptionDataSourceCrud) Get() error {
	request := oci_containerengine.GetClusterOptionsRequest{}
func (s *ContainerengineClusterOptionDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/containerengine/containerengine_addon_resource.go ===
func ContainerengineAddonResource() *schema.Resource {
	return &schema.Resource{
func createContainerengineAddon(d *schema.ResourceData, m interface{}) error {
	sync := &ContainerengineAddonResourceCrud{}
func readContainerengineAddon(d *schema.ResourceData, m interface{}) error {
	sync := &ContainerengineAddonResourceCrud{}
func updateContainerengineAddon(d *schema.ResourceData, m interface{}) error {
	sync := &ContainerengineAddonResourceCrud{}
func deleteContainerengineAddon(d *schema.ResourceData, m interface{}) error {
	sync := &ContainerengineAddonResourceCrud{}
func (s *ContainerengineAddonResourceCrud) ID() string {
	return GetAddonCompositeId(s.D.Get("addon_name").(string), s.D.Get("cluster_id").(string))
func (s *ContainerengineAddonResourceCrud) CreatedPending() []string {
	return []string{
func (s *ContainerengineAddonResourceCrud) CreatedTarget() []string {
	return []string{
func (s *ContainerengineAddonResourceCrud) DeletedPending() []string {
	return []string{
func (s *ContainerengineAddonResourceCrud) DeletedTarget() []string {
	return []string{
func (s *ContainerengineAddonResourceCrud) Create() error {
	request := oci_containerengine.InstallAddonRequest{}
func (s *ContainerengineAddonResourceCrud) getAddonFromWorkRequest(workId *string, timeout time.Duration) error {

func (s *ContainerengineAddonResourceCrud) getAddonWorkRequestType(workId *string) (oci_containerengine.WorkRequestOperationTypeEnum, error) {
	retryPolicy := tfresource.GetRetryPolicy(s.DisableNotFoundRetries, "containerengine")
func (s *ContainerengineAddonResourceCrud) Get() error {
	request := oci_containerengine.GetAddonRequest{}
func (s *ContainerengineAddonResourceCrud) Update() error {
	request := oci_containerengine.UpdateAddonRequest{}
func (s *ContainerengineAddonResourceCrud) Delete() error {
	request := oci_containerengine.DisableAddonRequest{}
func (s *ContainerengineAddonResourceCrud) SetData() error {

func (s *ContainerengineAddonResourceCrud) mapToAddonConfiguration(fieldKeyFormat string) (oci_containerengine.AddonConfiguration, error) {
	result := oci_containerengine.AddonConfiguration{}

=== ./internal/service/containerengine/containerengine_cluster_start_credential_rotation_management_resource.go ===
func ContainerengineClusterStartCredentialRotationManagementResource() *schema.Resource {
	return &schema.Resource{
func createContainerengineClusterStartCredentialRotationManagement(d *schema.ResourceData, m interface{}) error {
	sync := &ContainerengineClusterStartCredentialRotationManagementResourceCrud{}
func readContainerengineClusterStartCredentialRotationManagement(d *schema.ResourceData, m interface{}) error {
	return nil
func deleteContainerengineClusterStartCredentialRotationManagement(d *schema.ResourceData, m interface{}) error {
	return nil
func (s *ContainerengineClusterStartCredentialRotationManagementResourceCrud) ID() string {
	return *s.Res.Id
func (s *ContainerengineClusterStartCredentialRotationManagementResourceCrud) Create() error {
	request := oci_containerengine.StartCredentialRotationRequest{}
func clusterStartCredentialRotationManagementWaitForWorkRequest(wId *string, entityType string, action oci_containerengine.WorkRequestResourceActionTypeEnum,
	timeout time.Duration, disableFoundRetries bool, client *oci_containerengine.ContainerEngineClient) (*string, error) {
func getErrorFromContainerengineClusterStartCredentialRotationManagementWorkRequest(client *oci_containerengine.ContainerEngineClient, workId *string, compartmentId *string, retryPolicy *oci_common.RetryPolicy, entityType string, action oci_containerengine.WorkRequestResourceActionTypeEnum) error {
	response, err := client.ListWorkRequestErrors(context.Background(),
func (s *ContainerengineClusterStartCredentialRotationManagementResourceCrud) SetData() error {
	return nil

=== ./internal/service/containerengine/containerengine_cluster_kube_config_data_source.go ===
func ContainerengineClusterKubeConfigDataSource() *schema.Resource {
	return &schema.Resource{
func readSingularContainerengineClusterKubeConfig(d *schema.ResourceData, m interface{}) error {
	sync := &ContainerengineClusterKubeConfigDataSourceCrud{}
func (s *ContainerengineClusterKubeConfigDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *ContainerengineClusterKubeConfigDataSourceCrud) Get() error {
	request := oci_containerengine.CreateKubeconfigRequest{}
func (s *ContainerengineClusterKubeConfigDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/containerengine/containerengine_addon_data_source.go ===
func ContainerengineAddonDataSource() *schema.Resource {
	fieldMap := make(map[string]*schema.Schema)
func readSingularContainerengineAddon(d *schema.ResourceData, m interface{}) error {
	sync := &ContainerengineAddonDataSourceCrud{}
func (s *ContainerengineAddonDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *ContainerengineAddonDataSourceCrud) Get() error {
	request := oci_containerengine.GetAddonRequest{}
func (s *ContainerengineAddonDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/containerengine/containerengine_addon_options_data_source.go ===
func ContainerengineAddonOptionsDataSource() *schema.Resource {
	return &schema.Resource{
func readContainerengineAddonOptions(d *schema.ResourceData, m interface{}) error {
	sync := &ContainerengineAddonOptionsDataSourceCrud{}
func (s *ContainerengineAddonOptionsDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *ContainerengineAddonOptionsDataSourceCrud) Get() error {
	request := oci_containerengine.ListAddonOptionsRequest{}
func (s *ContainerengineAddonOptionsDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/containerengine/containerengine_pod_shapes_data_source.go ===
func ContainerenginePodShapesDataSource() *schema.Resource {
	return &schema.Resource{
func readContainerenginePodShapes(d *schema.ResourceData, m interface{}) error {
	sync := &ContainerenginePodShapesDataSourceCrud{}
func (s *ContainerenginePodShapesDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *ContainerenginePodShapesDataSourceCrud) Get() error {
	request := oci_containerengine.ListPodShapesRequest{}
func (s *ContainerenginePodShapesDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/containerengine/register_resource.go ===
func RegisterResource() {
	tfresource.RegisterResource("oci_containerengine_addon", ContainerengineAddonResource())

=== ./internal/service/containerengine/containerengine_node_pool_option_data_source.go ===
func ContainerengineNodePoolOptionDataSource() *schema.Resource {
	return &schema.Resource{
func readSingularContainerengineNodePoolOption(d *schema.ResourceData, m interface{}) error {
	sync := &ContainerengineNodePoolOptionDataSourceCrud{}
func (s *ContainerengineNodePoolOptionDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *ContainerengineNodePoolOptionDataSourceCrud) Get() error {
	request := oci_containerengine.GetNodePoolOptionsRequest{}
func (s *ContainerengineNodePoolOptionDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/streaming/streaming_stream_resource.go ===
func StreamingStreamResource() *schema.Resource {
	return &schema.Resource{
func createStreamingStream(d *schema.ResourceData, m interface{}) error {
	sync := &StreamingStreamResourceCrud{}
func readStreamingStream(d *schema.ResourceData, m interface{}) error {
	sync := &StreamingStreamResourceCrud{}
func updateStreamingStream(d *schema.ResourceData, m interface{}) error {
	sync := &StreamingStreamResourceCrud{}
func deleteStreamingStream(d *schema.ResourceData, m interface{}) error {
	sync := &StreamingStreamResourceCrud{}
func (s *StreamingStreamResourceCrud) ID() string {
	return *s.Res.Id
func (s *StreamingStreamResourceCrud) CreatedPending() []string {
	return []string{
func (s *StreamingStreamResourceCrud) CreatedTarget() []string {
	return []string{
func (s *StreamingStreamResourceCrud) DeletedPending() []string {
	return []string{
func (s *StreamingStreamResourceCrud) DeletedTarget() []string {
	return []string{
func (s *StreamingStreamResourceCrud) UpdatedPending() []string {
	return []string{
func (s *StreamingStreamResourceCrud) UpdatedTarget() []string {
	return []string{
func (s *StreamingStreamResourceCrud) Create() error {
	request := oci_streaming.CreateStreamRequest{}
func (s *StreamingStreamResourceCrud) Get() error {
	request := oci_streaming.GetStreamRequest{}
func (s *StreamingStreamResourceCrud) Update() error {
	if compartment, ok := s.D.GetOkExists("compartment_id"); ok && s.D.HasChange("compartment_id") {
func (s *StreamingStreamResourceCrud) Delete() error {
	request := oci_streaming.DeleteStreamRequest{}
func (s *StreamingStreamResourceCrud) SetData() error {
	if s.Res.CompartmentId != nil {
func (s *StreamingStreamResourceCrud) updateCompartment(compartment interface{}) error {
	changeCompartmentRequest := oci_streaming.ChangeStreamCompartmentRequest{}

=== ./internal/service/streaming/streaming_export.go ===
func processStreamingStream(ctx *tf_export.ResourceDiscoveryContext, resources []*tf_export.OCIResource) ([]*tf_export.OCIResource, error) {
	for _, streamingStream := range resources {

=== ./internal/service/streaming/streaming_stream_pool_resource.go ===
func StreamingStreamPoolResource() *schema.Resource {
	return &schema.Resource{
func createStreamingStreamPool(d *schema.ResourceData, m interface{}) error {
	sync := &StreamingStreamPoolResourceCrud{}
func readStreamingStreamPool(d *schema.ResourceData, m interface{}) error {
	sync := &StreamingStreamPoolResourceCrud{}
func updateStreamingStreamPool(d *schema.ResourceData, m interface{}) error {
	sync := &StreamingStreamPoolResourceCrud{}
func deleteStreamingStreamPool(d *schema.ResourceData, m interface{}) error {
	sync := &StreamingStreamPoolResourceCrud{}
func (s *StreamingStreamPoolResourceCrud) ID() string {
	return *s.Res.Id
func (s *StreamingStreamPoolResourceCrud) CreatedPending() []string {
	return []string{
func (s *StreamingStreamPoolResourceCrud) CreatedTarget() []string {
	return []string{
func (s *StreamingStreamPoolResourceCrud) DeletedPending() []string {
	return []string{
func (s *StreamingStreamPoolResourceCrud) DeletedTarget() []string {
	return []string{
func (s *StreamingStreamPoolResourceCrud) UpdatedPending() []string {
	return []string{
func (s *StreamingStreamPoolResourceCrud) UpdatedTarget() []string {
	return []string{
func (s *StreamingStreamPoolResourceCrud) Create() error {
	request := oci_streaming.CreateStreamPoolRequest{}
func (s *StreamingStreamPoolResourceCrud) Get() error {
	request := oci_streaming.GetStreamPoolRequest{}
func (s *StreamingStreamPoolResourceCrud) Update() error {
	if compartment, ok := s.D.GetOkExists("compartment_id"); ok && s.D.HasChange("compartment_id") {
func (s *StreamingStreamPoolResourceCrud) Delete() error {
	request := oci_streaming.DeleteStreamPoolRequest{}
func (s *StreamingStreamPoolResourceCrud) SetData() error {
	if s.Res.CompartmentId != nil {
func (s *StreamingStreamPoolResourceCrud) mapToCustomEncryptionKeyDetails(fieldKeyFormat string) (oci_streaming.CustomEncryptionKeyDetails, error) {
	result := oci_streaming.CustomEncryptionKeyDetails{}
func (s *StreamingStreamPoolResourceCrud) mapToKafkaSettings(fieldKeyFormat string) (oci_streaming.KafkaSettings, error) {
	result := oci_streaming.KafkaSettings{}
func (s *StreamingStreamPoolResourceCrud) mapToPrivateEndpointDetails(fieldKeyFormat string) (oci_streaming.PrivateEndpointDetails, error) {
	result := oci_streaming.PrivateEndpointDetails{}
func (s *StreamingStreamPoolResourceCrud) updateCompartment(compartment interface{}) error {
	changeCompartmentRequest := oci_streaming.ChangeStreamPoolCompartmentRequest{}

=== ./internal/service/streaming/streaming_connect_harness_resource.go ===
func StreamingConnectHarnessResource() *schema.Resource {
	return &schema.Resource{
func createStreamingConnectHarness(d *schema.ResourceData, m interface{}) error {
	sync := &StreamingConnectHarnessResourceCrud{}
func readStreamingConnectHarness(d *schema.ResourceData, m interface{}) error {
	sync := &StreamingConnectHarnessResourceCrud{}
func updateStreamingConnectHarness(d *schema.ResourceData, m interface{}) error {
	sync := &StreamingConnectHarnessResourceCrud{}
func deleteStreamingConnectHarness(d *schema.ResourceData, m interface{}) error {
	sync := &StreamingConnectHarnessResourceCrud{}
func (s *StreamingConnectHarnessResourceCrud) ID() string {
	return *s.Res.Id
func (s *StreamingConnectHarnessResourceCrud) CreatedPending() []string {
	return []string{
func (s *StreamingConnectHarnessResourceCrud) CreatedTarget() []string {
	return []string{
func (s *StreamingConnectHarnessResourceCrud) DeletedPending() []string {
	return []string{
func (s *StreamingConnectHarnessResourceCrud) DeletedTarget() []string {
	return []string{
func (s *StreamingConnectHarnessResourceCrud) UpdatedPending() []string {
	return []string{
func (s *StreamingConnectHarnessResourceCrud) UpdatedTarget() []string {
	return []string{
func (s *StreamingConnectHarnessResourceCrud) Create() error {
	request := oci_streaming.CreateConnectHarnessRequest{}
func (s *StreamingConnectHarnessResourceCrud) Get() error {
	request := oci_streaming.GetConnectHarnessRequest{}
func (s *StreamingConnectHarnessResourceCrud) Update() error {
	if compartment, ok := s.D.GetOkExists("compartment_id"); ok && s.D.HasChange("compartment_id") {
func (s *StreamingConnectHarnessResourceCrud) Delete() error {
	request := oci_streaming.DeleteConnectHarnessRequest{}
func (s *StreamingConnectHarnessResourceCrud) SetData() error {
	if s.Res.CompartmentId != nil {
func (s *StreamingConnectHarnessResourceCrud) updateCompartment(compartment interface{}) error {
	changeCompartmentRequest := oci_streaming.ChangeConnectHarnessCompartmentRequest{}

=== ./internal/service/streaming/streaming_stream_pool_data_source.go ===
func StreamingStreamPoolDataSource() *schema.Resource {
	fieldMap := make(map[string]*schema.Schema)
func readSingularStreamingStreamPool(d *schema.ResourceData, m interface{}) error {
	sync := &StreamingStreamPoolDataSourceCrud{}
func (s *StreamingStreamPoolDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *StreamingStreamPoolDataSourceCrud) Get() error {
	request := oci_streaming.GetStreamPoolRequest{}
func (s *StreamingStreamPoolDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/streaming/streaming_stream_data_source.go ===
func StreamingStreamDataSource() *schema.Resource {
	fieldMap := make(map[string]*schema.Schema)
func readSingularStreamingStream(d *schema.ResourceData, m interface{}) error {
	sync := &StreamingStreamDataSourceCrud{}
func (s *StreamingStreamDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *StreamingStreamDataSourceCrud) Get() error {
	request := oci_streaming.GetStreamRequest{}
func (s *StreamingStreamDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/streaming/streaming_streams_data_source.go ===
func StreamingStreamsDataSource() *schema.Resource {
	return &schema.Resource{
func readStreamingStreams(d *schema.ResourceData, m interface{}) error {
	sync := &StreamingStreamsDataSourceCrud{}
func (s *StreamingStreamsDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *StreamingStreamsDataSourceCrud) Get() error {
	request := oci_streaming.ListStreamsRequest{}
func (s *StreamingStreamsDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/streaming/streaming_stream_pools_data_source.go ===
func StreamingStreamPoolsDataSource() *schema.Resource {
	return &schema.Resource{
func readStreamingStreamPools(d *schema.ResourceData, m interface{}) error {
	sync := &StreamingStreamPoolsDataSourceCrud{}
func (s *StreamingStreamPoolsDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *StreamingStreamPoolsDataSourceCrud) Get() error {
	request := oci_streaming.ListStreamPoolsRequest{}
func (s *StreamingStreamPoolsDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/streaming/streaming_connect_harnesses_data_source.go ===
func StreamingConnectHarnessesDataSource() *schema.Resource {
	return &schema.Resource{
func readStreamingConnectHarnesses(d *schema.ResourceData, m interface{}) error {
	sync := &StreamingConnectHarnessesDataSourceCrud{}
func (s *StreamingConnectHarnessesDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *StreamingConnectHarnessesDataSourceCrud) Get() error {
	request := oci_streaming.ListConnectHarnessesRequest{}
func (s *StreamingConnectHarnessesDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/streaming/register_resource.go ===
func RegisterResource() {
	tfresource.RegisterResource("oci_streaming_connect_harness", StreamingConnectHarnessResource())

=== ./internal/service/streaming/streaming_connect_harness_data_source.go ===
func StreamingConnectHarnessDataSource() *schema.Resource {
	fieldMap := make(map[string]*schema.Schema)
func readSingularStreamingConnectHarness(d *schema.ResourceData, m interface{}) error {
	sync := &StreamingConnectHarnessDataSourceCrud{}
func (s *StreamingConnectHarnessDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *StreamingConnectHarnessDataSourceCrud) Get() error {
	request := oci_streaming.GetConnectHarnessRequest{}
func (s *StreamingConnectHarnessDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/certificates_management/certificates_management_export.go ===
func processCertificateAuthorities(ctx *tf_export.ResourceDiscoveryContext, resources []*tf_export.OCIResource) ([]*tf_export.OCIResource, error) {
	for _, resource := range resources {
func processCertificates(ctx *tf_export.ResourceDiscoveryContext, resources []*tf_export.OCIResource) ([]*tf_export.OCIResource, error) {
	for _, resource := range resources {

=== ./internal/service/certificates_management/certificates_management_ca_bundle_resource.go ===
func CertificatesManagementCaBundleResource() *schema.Resource {
	return &schema.Resource{
func createCertificatesManagementCaBundle(d *schema.ResourceData, m interface{}) error {
	sync := &CertificatesManagementCaBundleResourceCrud{}
func readCertificatesManagementCaBundle(d *schema.ResourceData, m interface{}) error {
	sync := &CertificatesManagementCaBundleResourceCrud{}
func updateCertificatesManagementCaBundle(d *schema.ResourceData, m interface{}) error {
	sync := &CertificatesManagementCaBundleResourceCrud{}
func deleteCertificatesManagementCaBundle(d *schema.ResourceData, m interface{}) error {
	sync := &CertificatesManagementCaBundleResourceCrud{}
func (s *CertificatesManagementCaBundleResourceCrud) ID() string {
	return *s.Res.Id
func (s *CertificatesManagementCaBundleResourceCrud) CreatedPending() []string {
	return []string{
func (s *CertificatesManagementCaBundleResourceCrud) CreatedTarget() []string {
	return []string{
func (s *CertificatesManagementCaBundleResourceCrud) UpdatedPending() []string {
	return []string{
func (s *CertificatesManagementCaBundleResourceCrud) UpdatedTarget() []string {
	return []string{
func (s *CertificatesManagementCaBundleResourceCrud) DeletedPending() []string {
	return []string{
func (s *CertificatesManagementCaBundleResourceCrud) DeletedTarget() []string {
	return []string{
func (s *CertificatesManagementCaBundleResourceCrud) Create() error {
	request := oci_certificates_management.CreateCaBundleRequest{}
func (s *CertificatesManagementCaBundleResourceCrud) Get() error {
	request := oci_certificates_management.GetCaBundleRequest{}
func (s *CertificatesManagementCaBundleResourceCrud) Update() error {
	if compartment, ok := s.D.GetOkExists("compartment_id"); ok && s.D.HasChange("compartment_id") {
func (s *CertificatesManagementCaBundleResourceCrud) Delete() error {
	request := oci_certificates_management.DeleteCaBundleRequest{}
func (s *CertificatesManagementCaBundleResourceCrud) SetData() error {
	if s.Res == nil {
func (s *CertificatesManagementCaBundleResourceCrud) updateCompartment(compartment interface{}) error {
	changeCompartmentRequest := oci_certificates_management.ChangeCaBundleCompartmentRequest{}

=== ./internal/service/certificates_management/certificates_management_association_data_source.go ===
func CertificatesManagementAssociationDataSource() *schema.Resource {
	return &schema.Resource{
func readSingularCertificatesManagementAssociation(d *schema.ResourceData, m interface{}) error {
	sync := &CertificatesManagementAssociationDataSourceCrud{}
func (s *CertificatesManagementAssociationDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *CertificatesManagementAssociationDataSourceCrud) Get() error {
	request := oci_certificates_management.GetAssociationRequest{}
func (s *CertificatesManagementAssociationDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/certificates_management/certificates_management_certificate_resource.go ===
func CertificatesManagementCertificateResource() *schema.Resource {
	return &schema.Resource{
func createCertificatesManagementCertificate(d *schema.ResourceData, m interface{}) error {
	sync := &CertificatesManagementCertificateResourceCrud{}
func readCertificatesManagementCertificate(d *schema.ResourceData, m interface{}) error {
	sync := &CertificatesManagementCertificateResourceCrud{}
func updateCertificatesManagementCertificate(d *schema.ResourceData, m interface{}) error {
	sync := &CertificatesManagementCertificateResourceCrud{}
func deleteCertificatesManagementCertificate(d *schema.ResourceData, m interface{}) error {
	sync := &CertificatesManagementCertificateResourceCrud{}
func (s *CertificatesManagementCertificateResourceCrud) ID() string {
	return *s.Res.Id
func (s *CertificatesManagementCertificateResourceCrud) CreatedPending() []string {
	return []string{
func (s *CertificatesManagementCertificateResourceCrud) CreatedTarget() []string {
	return []string{
func (s *CertificatesManagementCertificateResourceCrud) UpdatedPending() []string {
	return []string{
func (s *CertificatesManagementCertificateResourceCrud) UpdatedTarget() []string {
	return []string{
func (s *CertificatesManagementCertificateResourceCrud) DeletedPending() []string {
	return []string{
func (s *CertificatesManagementCertificateResourceCrud) DeletedTarget() []string {
	return []string{
func (s *CertificatesManagementCertificateResourceCrud) Create() error {
	request := oci_certificates_management.CreateCertificateRequest{}
func (s *CertificatesManagementCertificateResourceCrud) Get() error {
	request := oci_certificates_management.GetCertificateRequest{}
func (s *CertificatesManagementCertificateResourceCrud) Update() error {
	if compartment, ok := s.D.GetOkExists("compartment_id"); ok && s.D.HasChange("compartment_id") {
func (s *CertificatesManagementCertificateResourceCrud) UpdateRules() error {
	request := oci_certificates_management.UpdateCertificateRequest{}
func (s *CertificatesManagementCertificateResourceCrud) Delete() error {
	request := oci_certificates_management.ScheduleCertificateDeletionRequest{}
func (s *CertificatesManagementCertificateResourceCrud) SetData() error {
	s.D.Set("certificate_profile_type", s.Res.CertificateProfileType)
func (s *CertificatesManagementCertificateResourceCrud) mapToCreateCertificateConfigDetails(fieldKeyFormat string) (oci_certificates_management.CreateCertificateConfigDetails, error) {
	var baseObject oci_certificates_management.CreateCertificateConfigDetails
func (s *CertificatesManagementCertificateResourceCrud) mapToCertificateSubjectAlternativeNames(fieldKeyFormat string) (oci_certificates_management.CertificateSubjectAlternativeName, error) {
	var subjectAlternativeName oci_certificates_management.CertificateSubjectAlternativeName
func (s *CertificatesManagementCertificateResourceCrud) mapToCertificateSubject(fieldKeyFormat string) (oci_certificates_management.CertificateSubject, error) {
	result := oci_certificates_management.CertificateSubject{}
func (s *CertificatesManagementCertificateResourceCrud) updateCompartment(compartment interface{}) error {
	changeCompartmentRequest := oci_certificates_management.ChangeCertificateCompartmentRequest{}
func (s *CertificatesManagementCertificateResourceCrud) mapToCertificateRule(fieldKeyFormat string) (oci_certificates_management.CertificateRule, error) {
	var baseObject oci_certificates_management.CertificateRule
func (s *CertificatesManagementCertificateResourceCrud) mapToUpdateCertificateConfigDetails(fieldKeyFormat string) (oci_certificates_management.UpdateCertificateConfigDetails, error) {
	var baseObject oci_certificates_management.UpdateCertificateConfigDetails
func (s *CertificatesManagementCertificateResourceCrud) mapToValidity(fieldKeyFormat string) (oci_certificates_management.Validity, error) {
	result := oci_certificates_management.Validity{}

=== ./internal/service/certificates_management/certificates_management_certificate_data_source.go ===
func CertificatesManagementCertificateDataSource() *schema.Resource {
	fieldMap := make(map[string]*schema.Schema)
func readSingularCertificatesManagementCertificate(d *schema.ResourceData, m interface{}) error {
	sync := &CertificatesManagementCertificateDataSourceCrud{}
func (s *CertificatesManagementCertificateDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *CertificatesManagementCertificateDataSourceCrud) Get() error {
	request := oci_certificates_management.GetCertificateRequest{}
func (s *CertificatesManagementCertificateDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/certificates_management/certificates_management_ca_bundle_data_source.go ===
func CertificatesManagementCaBundleDataSource() *schema.Resource {
	fieldMap := make(map[string]*schema.Schema)
func readSingularCertificatesManagementCaBundle(d *schema.ResourceData, m interface{}) error {
	sync := &CertificatesManagementCaBundleDataSourceCrud{}
func (s *CertificatesManagementCaBundleDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *CertificatesManagementCaBundleDataSourceCrud) Get() error {
	request := oci_certificates_management.GetCaBundleRequest{}
func (s *CertificatesManagementCaBundleDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/certificates_management/certificates_management_associations_data_source.go ===
func CertificatesManagementAssociationsDataSource() *schema.Resource {
	return &schema.Resource{
func readCertificatesManagementAssociations(d *schema.ResourceData, m interface{}) error {
	sync := &CertificatesManagementAssociationsDataSourceCrud{}
func (s *CertificatesManagementAssociationsDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *CertificatesManagementAssociationsDataSourceCrud) Get() error {
	request := oci_certificates_management.ListAssociationsRequest{}
func (s *CertificatesManagementAssociationsDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/certificates_management/certificates_management_ca_bundles_data_source.go ===
func CertificatesManagementCaBundlesDataSource() *schema.Resource {
	return &schema.Resource{
func readCertificatesManagementCaBundles(d *schema.ResourceData, m interface{}) error {
	sync := &CertificatesManagementCaBundlesDataSourceCrud{}
func (s *CertificatesManagementCaBundlesDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *CertificatesManagementCaBundlesDataSourceCrud) Get() error {
	request := oci_certificates_management.ListCaBundlesRequest{}
func (s *CertificatesManagementCaBundlesDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/certificates_management/certificates_management_certificate_authority_data_source.go ===
func CertificatesManagementCertificateAuthorityDataSource() *schema.Resource {
	fieldMap := make(map[string]*schema.Schema)
func readSingularCertificatesManagementCertificateAuthority(d *schema.ResourceData, m interface{}) error {
	sync := &CertificatesManagementCertificateAuthorityDataSourceCrud{}
func (s *CertificatesManagementCertificateAuthorityDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *CertificatesManagementCertificateAuthorityDataSourceCrud) Get() error {
	request := oci_certificates_management.GetCertificateAuthorityRequest{}
func (s *CertificatesManagementCertificateAuthorityDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/certificates_management/certificates_management_certificate_authority_resource.go ===
func CertificatesManagementCertificateAuthorityResource() *schema.Resource {
	return &schema.Resource{
func createCertificatesManagementCertificateAuthority(d *schema.ResourceData, m interface{}) error {
	sync := &CertificatesManagementCertificateAuthorityResourceCrud{}
func readCertificatesManagementCertificateAuthority(d *schema.ResourceData, m interface{}) error {
	sync := &CertificatesManagementCertificateAuthorityResourceCrud{}
func updateCertificatesManagementCertificateAuthority(d *schema.ResourceData, m interface{}) error {
	sync := &CertificatesManagementCertificateAuthorityResourceCrud{}
func deleteCertificatesManagementCertificateAuthority(d *schema.ResourceData, m interface{}) error {
	sync := &CertificatesManagementCertificateAuthorityResourceCrud{}
func (s *CertificatesManagementCertificateAuthorityResourceCrud) ID() string {
	return *s.Res.Id
func (s *CertificatesManagementCertificateAuthorityResourceCrud) CreatedPending() []string {
	return []string{
func (s *CertificatesManagementCertificateAuthorityResourceCrud) CreatedTarget() []string {
	return []string{
func (s *CertificatesManagementCertificateAuthorityResourceCrud) UpdatedPending() []string {
	return []string{
func (s *CertificatesManagementCertificateAuthorityResourceCrud) UpdatedTarget() []string {
	return []string{
func (s *CertificatesManagementCertificateAuthorityResourceCrud) DeletedPending() []string {
	return []string{
func (s *CertificatesManagementCertificateAuthorityResourceCrud) DeletedTarget() []string {
	return []string{
func (s *CertificatesManagementCertificateAuthorityResourceCrud) Create() error {
	request := oci_certificates_management.CreateCertificateAuthorityRequest{}
func (s *CertificatesManagementCertificateAuthorityResourceCrud) Get() error {
	request := oci_certificates_management.GetCertificateAuthorityRequest{}
func (s *CertificatesManagementCertificateAuthorityResourceCrud) Update() error {
	if compartment, ok := s.D.GetOkExists("compartment_id"); ok && s.D.HasChange("compartment_id") {
func (s *CertificatesManagementCertificateAuthorityResourceCrud) UpdateRules() error {
	request := oci_certificates_management.UpdateCertificateAuthorityRequest{}
func (s *CertificatesManagementCertificateAuthorityResourceCrud) Delete() error {
	request := oci_certificates_management.ScheduleCertificateAuthorityDeletionRequest{}
func (s *CertificatesManagementCertificateAuthorityResourceCrud) SetData() error {
	certificateAuthorityRules := []interface{}{}
func (s *CertificatesManagementCertificateAuthorityResourceCrud) mapToCertificateRevocationListDetails(fieldKeyFormat string) (oci_certificates_management.CertificateRevocationListDetails, error) {
	result := oci_certificates_management.CertificateRevocationListDetails{}
func (s *CertificatesManagementCertificateAuthorityResourceCrud) mapToCertificateAuthoritySubject(fieldKeyFormat string) (oci_certificates_management.CertificateSubject, error) {
	result := oci_certificates_management.CertificateSubject{}
func (s *CertificatesManagementCertificateAuthorityResourceCrud) mapToCreateCertificateAuthorityConfigDetails(fieldKeyFormat string) (oci_certificates_management.CreateCertificateAuthorityConfigDetails, error) {
	var baseObject oci_certificates_management.CreateCertificateAuthorityConfigDetails
func (s *CertificatesManagementCertificateAuthorityResourceCrud) mapToObjectStorageBucketConfigDetails(fieldKeyFormat string) (oci_certificates_management.ObjectStorageBucketConfigDetails, error) {
	result := oci_certificates_management.ObjectStorageBucketConfigDetails{}
func (s *CertificatesManagementCertificateAuthorityResourceCrud) updateCompartment(compartment interface{}) error {
	changeCompartmentRequest := oci_certificates_management.ChangeCertificateAuthorityCompartmentRequest{}
func (s *CertificatesManagementCertificateAuthorityResourceCrud) mapToValidity(fieldKeyFormat string) (oci_certificates_management.Validity, error) {
	result := oci_certificates_management.Validity{}
func (s *CertificatesManagementCertificateAuthorityResourceCrud) mapToCertificateAuthorityRule(fieldKeyFormat string) (oci_certificates_management.CertificateAuthorityRule, error) {
	var baseObject oci_certificates_management.CertificateAuthorityRule
func (s *CertificatesManagementCertificateAuthorityResourceCrud) mapToUpdateCertificateAuthorityConfigDetails(fieldKeyFormat string) (oci_certificates_management.UpdateCertificateAuthorityConfigDetails, error) {
	var baseObject oci_certificates_management.UpdateCertificateAuthorityConfigDetails

=== ./internal/service/certificates_management/certificates_management_certificate_version_data_source.go ===
func CertificatesManagementCertificateVersionDataSource() *schema.Resource {
	return &schema.Resource{
func readSingularCertificatesManagementCertificateVersion(d *schema.ResourceData, m interface{}) error {
	sync := &CertificatesManagementCertificateVersionDataSourceCrud{}
func (s *CertificatesManagementCertificateVersionDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *CertificatesManagementCertificateVersionDataSourceCrud) Get() error {
	request := oci_certificates_management.GetCertificateVersionRequest{}
func (s *CertificatesManagementCertificateVersionDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/certificates_management/certificates_management_certificate_authority_version_data_source.go ===
func CertificatesManagementCertificateAuthorityVersionDataSource() *schema.Resource {
	return &schema.Resource{
func readSingularCertificatesManagementCertificateAuthorityVersion(d *schema.ResourceData, m interface{}) error {
	sync := &CertificatesManagementCertificateAuthorityVersionDataSourceCrud{}
func (s *CertificatesManagementCertificateAuthorityVersionDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *CertificatesManagementCertificateAuthorityVersionDataSourceCrud) Get() error {
	request := oci_certificates_management.GetCertificateAuthorityVersionRequest{}
func (s *CertificatesManagementCertificateAuthorityVersionDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/certificates_management/certificates_management_certificate_authority_versions_data_source.go ===
func CertificatesManagementCertificateAuthorityVersionsDataSource() *schema.Resource {
	return &schema.Resource{
func readCertificatesManagementCertificateAuthorityVersions(d *schema.ResourceData, m interface{}) error {
	sync := &CertificatesManagementCertificateAuthorityVersionsDataSourceCrud{}
func (s *CertificatesManagementCertificateAuthorityVersionsDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *CertificatesManagementCertificateAuthorityVersionsDataSourceCrud) Get() error {
	request := oci_certificates_management.ListCertificateAuthorityVersionsRequest{}
func (s *CertificatesManagementCertificateAuthorityVersionsDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/certificates_management/certificates_management_certificate_authorities_data_source.go ===
func CertificatesManagementCertificateAuthoritiesDataSource() *schema.Resource {
	return &schema.Resource{
func readCertificatesManagementCertificateAuthorities(d *schema.ResourceData, m interface{}) error {
	sync := &CertificatesManagementCertificateAuthoritiesDataSourceCrud{}
func (s *CertificatesManagementCertificateAuthoritiesDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *CertificatesManagementCertificateAuthoritiesDataSourceCrud) Get() error {
	request := oci_certificates_management.ListCertificateAuthoritiesRequest{}
func (s *CertificatesManagementCertificateAuthoritiesDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/certificates_management/certificates_management_certificate_versions_data_source.go ===
func CertificatesManagementCertificateVersionsDataSource() *schema.Resource {
	return &schema.Resource{
func readCertificatesManagementCertificateVersions(d *schema.ResourceData, m interface{}) error {
	sync := &CertificatesManagementCertificateVersionsDataSourceCrud{}
func (s *CertificatesManagementCertificateVersionsDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *CertificatesManagementCertificateVersionsDataSourceCrud) Get() error {
	request := oci_certificates_management.ListCertificateVersionsRequest{}
func (s *CertificatesManagementCertificateVersionsDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/certificates_management/register_resource.go ===
func RegisterResource() {
	tfresource.RegisterResource("oci_certificates_management_ca_bundle", CertificatesManagementCaBundleResource())

=== ./internal/service/certificates_management/certificates_management_certificates_data_source.go ===
func CertificatesManagementCertificatesDataSource() *schema.Resource {
	return &schema.Resource{
func readCertificatesManagementCertificates(d *schema.ResourceData, m interface{}) error {
	sync := &CertificatesManagementCertificatesDataSourceCrud{}
func (s *CertificatesManagementCertificatesDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *CertificatesManagementCertificatesDataSourceCrud) Get() error {
	request := oci_certificates_management.ListCertificatesRequest{}
func (s *CertificatesManagementCertificatesDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/opensearch/opensearch_opensearch_cluster_data_source.go ===
func OpensearchOpensearchClusterDataSource() *schema.Resource {
	fieldMap := make(map[string]*schema.Schema)
func readSingularOpensearchOpensearchCluster(d *schema.ResourceData, m interface{}) error {
	sync := &OpensearchOpensearchClusterDataSourceCrud{}
func (s *OpensearchOpensearchClusterDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *OpensearchOpensearchClusterDataSourceCrud) Get() error {
	request := oci_opensearch.GetOpensearchClusterRequest{}
func (s *OpensearchOpensearchClusterDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/opensearch/opensearch_opensearch_version_data_source.go ===
func OpensearchOpensearchVersionDataSource() *schema.Resource {
	return &schema.Resource{
func readSingularOpensearchOpensearchVersion(d *schema.ResourceData, m interface{}) error {
	sync := &OpensearchOpensearchVersionDataSourceCrud{}
func (s *OpensearchOpensearchVersionDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *OpensearchOpensearchVersionDataSourceCrud) Get() error {
	request := oci_opensearch.ListOpensearchVersionsRequest{}
func (s *OpensearchOpensearchVersionDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/opensearch/opensearch_opensearch_clusters_data_source.go ===
func OpensearchOpensearchClustersDataSource() *schema.Resource {
	return &schema.Resource{
func readOpensearchOpensearchClusters(d *schema.ResourceData, m interface{}) error {
	sync := &OpensearchOpensearchClustersDataSourceCrud{}
func (s *OpensearchOpensearchClustersDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *OpensearchOpensearchClustersDataSourceCrud) Get() error {
	request := oci_opensearch.ListOpensearchClustersRequest{}
func (s *OpensearchOpensearchClustersDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/opensearch/opensearch_opensearch_versions_data_source.go ===
func OpensearchOpensearchVersionsDataSource() *schema.Resource {
	return &schema.Resource{
func readOpensearchOpensearchVersions(d *schema.ResourceData, m interface{}) error {
	sync := &OpensearchOpensearchVersionsDataSourceCrud{}
func (s *OpensearchOpensearchVersionsDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *OpensearchOpensearchVersionsDataSourceCrud) Get() error {
	request := oci_opensearch.ListOpensearchVersionsRequest{}
func (s *OpensearchOpensearchVersionsDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/opensearch/opensearch_opensearch_cluster_resource.go ===
func OpensearchOpensearchClusterResource() *schema.Resource {
	return &schema.Resource{
func createOpensearchOpensearchCluster(d *schema.ResourceData, m interface{}) error {
	sync := &OpensearchOpensearchClusterResourceCrud{}
func readOpensearchOpensearchCluster(d *schema.ResourceData, m interface{}) error {
	sync := &OpensearchOpensearchClusterResourceCrud{}
func updateOpensearchOpensearchCluster(d *schema.ResourceData, m interface{}) error {
	sync := &OpensearchOpensearchClusterResourceCrud{}
func deleteOpensearchOpensearchCluster(d *schema.ResourceData, m interface{}) error {
	sync := &OpensearchOpensearchClusterResourceCrud{}
func (s *OpensearchOpensearchClusterResourceCrud) ID() string {
	return *s.Res.Id
func (s *OpensearchOpensearchClusterResourceCrud) CreatedPending() []string {
	return []string{
func (s *OpensearchOpensearchClusterResourceCrud) CreatedTarget() []string {
	return []string{
func (s *OpensearchOpensearchClusterResourceCrud) DeletedPending() []string {
	return []string{
func (s *OpensearchOpensearchClusterResourceCrud) DeletedTarget() []string {
	return []string{
func (s *OpensearchOpensearchClusterResourceCrud) Create() error {
	request := oci_opensearch.CreateOpensearchClusterRequest{}
func (s *OpensearchOpensearchClusterResourceCrud) getOpensearchClusterFromWorkRequest(workId *string, retryPolicy *oci_common.RetryPolicy,
	actionTypeEnum oci_opensearch.ActionTypeEnum, timeout time.Duration) error {
func (s *OpensearchOpensearchClusterResourceCrud) Get() error {
	request := oci_opensearch.GetOpensearchClusterRequest{}
func (s *OpensearchOpensearchClusterResourceCrud) HorizontalConditionMet() (result bool) {
	if _, ok := s.D.GetOkExists("data_node_count"); ok && s.D.HasChange("data_node_count") {
func (s *OpensearchOpensearchClusterResourceCrud) VerticalConditionMet() (result bool) {
	if _, ok := s.D.GetOkExists("master_node_host_ocpu_count"); ok && s.D.HasChange("master_node_host_ocpu_count") {
func (s *OpensearchOpensearchClusterResourceCrud) Update() error {
	if s.HorizontalConditionMet() {
func (s *OpensearchOpensearchClusterResourceCrud) Delete() error {
	request := oci_opensearch.DeleteOpensearchClusterRequest{}
func (s *OpensearchOpensearchClusterResourceCrud) SetData() error {
	s.D.Set("availability_domains", s.Res.AvailabilityDomains)
func (s *OpensearchOpensearchClusterResourceCrud) ResizeOpensearchClusterHorizontal() error {
	tfresource.ShortRetryTime = tfresource.LongRetryTime * 5
func (s *OpensearchOpensearchClusterResourceCrud) ResizeOpensearchClusterVertical() error {
	tfresource.ShortRetryTime = tfresource.LongRetryTime * 5

=== ./internal/service/opensearch/register_resource.go ===
func RegisterResource() {
	tfresource.RegisterResource("oci_opensearch_opensearch_cluster", OpensearchOpensearchClusterResource())

=== ./internal/service/cloud_migrations/cloud_migrations_replication_schedule_data_source.go ===
func CloudMigrationsReplicationScheduleDataSource() *schema.Resource {
	fieldMap := make(map[string]*schema.Schema)
func readSingularCloudMigrationsReplicationSchedule(d *schema.ResourceData, m interface{}) error {
	sync := &CloudMigrationsReplicationScheduleDataSourceCrud{}
func (s *CloudMigrationsReplicationScheduleDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *CloudMigrationsReplicationScheduleDataSourceCrud) Get() error {
	request := oci_cloud_migrations.GetReplicationScheduleRequest{}
func (s *CloudMigrationsReplicationScheduleDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/cloud_migrations/cloud_migrations_migration_assets_data_source.go ===
func CloudMigrationsMigrationAssetsDataSource() *schema.Resource {
	return &schema.Resource{
func readCloudMigrationsMigrationAssets(d *schema.ResourceData, m interface{}) error {
	sync := &CloudMigrationsMigrationAssetsDataSourceCrud{}
func (s *CloudMigrationsMigrationAssetsDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *CloudMigrationsMigrationAssetsDataSourceCrud) Get() error {
	request := oci_cloud_migrations.ListMigrationAssetsRequest{}
func (s *CloudMigrationsMigrationAssetsDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/cloud_migrations/cloud_migrations_target_asset_data_source.go ===
func CloudMigrationsTargetAssetDataSource() *schema.Resource {
	fieldMap := make(map[string]*schema.Schema)
func readSingularCloudMigrationsTargetAsset(d *schema.ResourceData, m interface{}) error {
	sync := &CloudMigrationsTargetAssetDataSourceCrud{}
func (s *CloudMigrationsTargetAssetDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *CloudMigrationsTargetAssetDataSourceCrud) Get() error {
	request := oci_cloud_migrations.GetTargetAssetRequest{}
func (s *CloudMigrationsTargetAssetDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/cloud_migrations/cloud_migrations_migration_plan_available_shape_data_source.go ===
func CloudMigrationsMigrationPlanAvailableShapeDataSource() *schema.Resource {
	return &schema.Resource{
func readSingularCloudMigrationsMigrationPlanAvailableShape(d *schema.ResourceData, m interface{}) error {
	sync := &CloudMigrationsMigrationPlanAvailableShapeDataSourceCrud{}
func (s *CloudMigrationsMigrationPlanAvailableShapeDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *CloudMigrationsMigrationPlanAvailableShapeDataSourceCrud) Get() error {
	request := oci_cloud_migrations.ListAvailableShapesRequest{}
func (s *CloudMigrationsMigrationPlanAvailableShapeDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/cloud_migrations/cloud_migrations_migration_resource.go ===
func CloudMigrationsMigrationResource() *schema.Resource {
	return &schema.Resource{
func createCloudMigrationsMigration(d *schema.ResourceData, m interface{}) error {
	sync := &CloudMigrationsMigrationResourceCrud{}
func readCloudMigrationsMigration(d *schema.ResourceData, m interface{}) error {
	sync := &CloudMigrationsMigrationResourceCrud{}
func updateCloudMigrationsMigration(d *schema.ResourceData, m interface{}) error {
	sync := &CloudMigrationsMigrationResourceCrud{}
func deleteCloudMigrationsMigration(d *schema.ResourceData, m interface{}) error {
	sync := &CloudMigrationsMigrationResourceCrud{}
func (s *CloudMigrationsMigrationResourceCrud) ID() string {
	return *s.Res.Id
func (s *CloudMigrationsMigrationResourceCrud) CreatedPending() []string {
	return []string{
func (s *CloudMigrationsMigrationResourceCrud) CreatedTarget() []string {
	return []string{
func (s *CloudMigrationsMigrationResourceCrud) DeletedPending() []string {
	return []string{
func (s *CloudMigrationsMigrationResourceCrud) DeletedTarget() []string {
	return []string{
func (s *CloudMigrationsMigrationResourceCrud) Create() error {
	request := oci_cloud_migrations.CreateMigrationRequest{}
func (s *CloudMigrationsMigrationResourceCrud) getMigrationFromWorkRequest(workId *string, retryPolicy *oci_common.RetryPolicy,
	actionTypeEnum oci_cloud_migrations.ActionTypeEnum, timeout time.Duration) error {
func (s *CloudMigrationsMigrationResourceCrud) Get() error {
	request := oci_cloud_migrations.GetMigrationRequest{}
func (s *CloudMigrationsMigrationResourceCrud) Update() error {
	if compartment, ok := s.D.GetOkExists("compartment_id"); ok && s.D.HasChange("compartment_id") {
func (s *CloudMigrationsMigrationResourceCrud) Delete() error {
	request := oci_cloud_migrations.DeleteMigrationRequest{}
func (s *CloudMigrationsMigrationResourceCrud) SetData() error {
	if s.Res.CompartmentId != nil {
func (s *CloudMigrationsMigrationResourceCrud) updateCompartment(compartment interface{}) error {
	changeCompartmentRequest := oci_cloud_migrations.ChangeMigrationCompartmentRequest{}

=== ./internal/service/cloud_migrations/cloud_migrations_migrations_data_source.go ===
func CloudMigrationsMigrationsDataSource() *schema.Resource {
	return &schema.Resource{
func readCloudMigrationsMigrations(d *schema.ResourceData, m interface{}) error {
	sync := &CloudMigrationsMigrationsDataSourceCrud{}
func (s *CloudMigrationsMigrationsDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *CloudMigrationsMigrationsDataSourceCrud) Get() error {
	request := oci_cloud_migrations.ListMigrationsRequest{}
func (s *CloudMigrationsMigrationsDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/cloud_migrations/cloud_migrations_migration_plans_data_source.go ===
func CloudMigrationsMigrationPlansDataSource() *schema.Resource {
	return &schema.Resource{
func readCloudMigrationsMigrationPlans(d *schema.ResourceData, m interface{}) error {
	sync := &CloudMigrationsMigrationPlansDataSourceCrud{}
func (s *CloudMigrationsMigrationPlansDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *CloudMigrationsMigrationPlansDataSourceCrud) Get() error {
	request := oci_cloud_migrations.ListMigrationPlansRequest{}
func (s *CloudMigrationsMigrationPlansDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/cloud_migrations/cloud_migrations_migration_asset_resource.go ===
func CloudMigrationsMigrationAssetResource() *schema.Resource {
	return &schema.Resource{
func createCloudMigrationsMigrationAsset(d *schema.ResourceData, m interface{}) error {
	sync := &CloudMigrationsMigrationAssetResourceCrud{}
func readCloudMigrationsMigrationAsset(d *schema.ResourceData, m interface{}) error {
	sync := &CloudMigrationsMigrationAssetResourceCrud{}
func updateCloudMigrationsMigrationAsset(d *schema.ResourceData, m interface{}) error {
	sync := &CloudMigrationsMigrationAssetResourceCrud{}
func deleteCloudMigrationsMigrationAsset(d *schema.ResourceData, m interface{}) error {
	sync := &CloudMigrationsMigrationAssetResourceCrud{}
func (s *CloudMigrationsMigrationAssetResourceCrud) ID() string {
	return *s.Res.Id
func (s *CloudMigrationsMigrationAssetResourceCrud) CreatedPending() []string {
	return []string{
func (s *CloudMigrationsMigrationAssetResourceCrud) CreatedTarget() []string {
	return []string{
func (s *CloudMigrationsMigrationAssetResourceCrud) DeletedPending() []string {
	return []string{
func (s *CloudMigrationsMigrationAssetResourceCrud) DeletedTarget() []string {
	return []string{
func (s *CloudMigrationsMigrationAssetResourceCrud) Create() error {
	request := oci_cloud_migrations.CreateMigrationAssetRequest{}
func (s *CloudMigrationsMigrationAssetResourceCrud) getMigrationAssetFromWorkRequest(workId *string, retryPolicy *oci_common.RetryPolicy,
	actionTypeEnum oci_cloud_migrations.ActionTypeEnum, timeout time.Duration) error {
func (s *CloudMigrationsMigrationAssetResourceCrud) Get() error {
	request := oci_cloud_migrations.GetMigrationAssetRequest{}
func (s *CloudMigrationsMigrationAssetResourceCrud) Update() error {
	request := oci_cloud_migrations.UpdateMigrationAssetRequest{}
func (s *CloudMigrationsMigrationAssetResourceCrud) Delete() error {
	request := oci_cloud_migrations.DeleteMigrationAssetRequest{}
func (s *CloudMigrationsMigrationAssetResourceCrud) SetData() error {
	if s.Res.AvailabilityDomain != nil {

=== ./internal/service/cloud_migrations/cloud_migrations_replication_schedules_data_source.go ===
func CloudMigrationsReplicationSchedulesDataSource() *schema.Resource {
	return &schema.Resource{
func readCloudMigrationsReplicationSchedules(d *schema.ResourceData, m interface{}) error {
	sync := &CloudMigrationsReplicationSchedulesDataSourceCrud{}
func (s *CloudMigrationsReplicationSchedulesDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *CloudMigrationsReplicationSchedulesDataSourceCrud) Get() error {
	request := oci_cloud_migrations.ListReplicationSchedulesRequest{}
func (s *CloudMigrationsReplicationSchedulesDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/cloud_migrations/cloud_migrations_migration_plan_resource.go ===
func CloudMigrationsMigrationPlanResource() *schema.Resource {
	return &schema.Resource{
func createCloudMigrationsMigrationPlan(d *schema.ResourceData, m interface{}) error {
	sync := &CloudMigrationsMigrationPlanResourceCrud{}
func readCloudMigrationsMigrationPlan(d *schema.ResourceData, m interface{}) error {
	sync := &CloudMigrationsMigrationPlanResourceCrud{}
func updateCloudMigrationsMigrationPlan(d *schema.ResourceData, m interface{}) error {
	sync := &CloudMigrationsMigrationPlanResourceCrud{}
func deleteCloudMigrationsMigrationPlan(d *schema.ResourceData, m interface{}) error {
	sync := &CloudMigrationsMigrationPlanResourceCrud{}
func (s *CloudMigrationsMigrationPlanResourceCrud) ID() string {
	return *s.Res.Id
func (s *CloudMigrationsMigrationPlanResourceCrud) CreatedPending() []string {
	return []string{
func (s *CloudMigrationsMigrationPlanResourceCrud) CreatedTarget() []string {
	return []string{
func (s *CloudMigrationsMigrationPlanResourceCrud) DeletedPending() []string {
	return []string{
func (s *CloudMigrationsMigrationPlanResourceCrud) DeletedTarget() []string {
	return []string{
func (s *CloudMigrationsMigrationPlanResourceCrud) Create() error {
	request := oci_cloud_migrations.CreateMigrationPlanRequest{}
func (s *CloudMigrationsMigrationPlanResourceCrud) getMigrationPlanFromWorkRequest(workId *string, retryPolicy *oci_common.RetryPolicy,
	actionTypeEnum oci_cloud_migrations.ActionTypeEnum, timeout time.Duration) error {
func (s *CloudMigrationsMigrationPlanResourceCrud) Get() error {
	request := oci_cloud_migrations.GetMigrationPlanRequest{}
func (s *CloudMigrationsMigrationPlanResourceCrud) Update() error {
	if compartment, ok := s.D.GetOkExists("compartment_id"); ok && s.D.HasChange("compartment_id") {
func (s *CloudMigrationsMigrationPlanResourceCrud) Delete() error {
	request := oci_cloud_migrations.DeleteMigrationPlanRequest{}
func (s *CloudMigrationsMigrationPlanResourceCrud) SetData() error {

func (s *CloudMigrationsMigrationPlanResourceCrud) mapToResourceAssessmentStrategy(fieldKeyFormat string) (oci_cloud_migrations.ResourceAssessmentStrategy, error) {
	var baseObject oci_cloud_migrations.ResourceAssessmentStrategy
func ResourceAssessmentStrategyToMap(obj oci_cloud_migrations.ResourceAssessmentStrategy) map[string]interface{} {
	result := map[string]interface{}{}
func (s *CloudMigrationsMigrationPlanResourceCrud) mapToTargetEnvironment(fieldKeyFormat string) (oci_cloud_migrations.TargetEnvironment, error) {
	var baseObject oci_cloud_migrations.TargetEnvironment
func (s *CloudMigrationsMigrationPlanResourceCrud) updateCompartment(compartment interface{}) error {
	changeCompartmentRequest := oci_cloud_migrations.ChangeMigrationPlanCompartmentRequest{}

=== ./internal/service/cloud_migrations/cloud_migrations_target_assets_data_source.go ===
func CloudMigrationsTargetAssetsDataSource() *schema.Resource {
	return &schema.Resource{
func readCloudMigrationsTargetAssets(d *schema.ResourceData, m interface{}) error {
	sync := &CloudMigrationsTargetAssetsDataSourceCrud{}
func (s *CloudMigrationsTargetAssetsDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *CloudMigrationsTargetAssetsDataSourceCrud) Get() error {
	request := oci_cloud_migrations.ListTargetAssetsRequest{}
func (s *CloudMigrationsTargetAssetsDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/cloud_migrations/cloud_migrations_migration_asset_data_source.go ===
func CloudMigrationsMigrationAssetDataSource() *schema.Resource {
	fieldMap := make(map[string]*schema.Schema)
func readSingularCloudMigrationsMigrationAsset(d *schema.ResourceData, m interface{}) error {
	sync := &CloudMigrationsMigrationAssetDataSourceCrud{}
func (s *CloudMigrationsMigrationAssetDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *CloudMigrationsMigrationAssetDataSourceCrud) Get() error {
	request := oci_cloud_migrations.GetMigrationAssetRequest{}
func (s *CloudMigrationsMigrationAssetDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/cloud_migrations/cloud_migrations_migration_plan_available_shapes_data_source.go ===
func CloudMigrationsMigrationPlanAvailableShapesDataSource() *schema.Resource {
	return &schema.Resource{
func readCloudMigrationsMigrationPlanAvailableShapes(d *schema.ResourceData, m interface{}) error {
	sync := &CloudMigrationsMigrationPlanAvailableShapesDataSourceCrud{}
func (s *CloudMigrationsMigrationPlanAvailableShapesDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *CloudMigrationsMigrationPlanAvailableShapesDataSourceCrud) Get() error {
	request := oci_cloud_migrations.ListAvailableShapesRequest{}
func (s *CloudMigrationsMigrationPlanAvailableShapesDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/cloud_migrations/cloud_migrations_migration_data_source.go ===
func CloudMigrationsMigrationDataSource() *schema.Resource {
	fieldMap := make(map[string]*schema.Schema)
func readSingularCloudMigrationsMigration(d *schema.ResourceData, m interface{}) error {
	sync := &CloudMigrationsMigrationDataSourceCrud{}
func (s *CloudMigrationsMigrationDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *CloudMigrationsMigrationDataSourceCrud) Get() error {
	request := oci_cloud_migrations.GetMigrationRequest{}
func (s *CloudMigrationsMigrationDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/cloud_migrations/cloud_migrations_target_asset_resource.go ===
func CloudMigrationsTargetAssetResource() *schema.Resource {
	return &schema.Resource{
func createCloudMigrationsTargetAsset(d *schema.ResourceData, m interface{}) error {
	sync := &CloudMigrationsTargetAssetResourceCrud{}
func readCloudMigrationsTargetAsset(d *schema.ResourceData, m interface{}) error {
	sync := &CloudMigrationsTargetAssetResourceCrud{}
func updateCloudMigrationsTargetAsset(d *schema.ResourceData, m interface{}) error {
	sync := &CloudMigrationsTargetAssetResourceCrud{}
func deleteCloudMigrationsTargetAsset(d *schema.ResourceData, m interface{}) error {
	sync := &CloudMigrationsTargetAssetResourceCrud{}
func (s *CloudMigrationsTargetAssetResourceCrud) ID() string {
	targetAsset := *s.Res
func (s *CloudMigrationsTargetAssetResourceCrud) CreatedPending() []string {
	return []string{
func (s *CloudMigrationsTargetAssetResourceCrud) CreatedTarget() []string {
	return []string{
func (s *CloudMigrationsTargetAssetResourceCrud) DeletedPending() []string {
	return []string{
func (s *CloudMigrationsTargetAssetResourceCrud) DeletedTarget() []string {
	return []string{
func (s *CloudMigrationsTargetAssetResourceCrud) Create() error {
	request := oci_cloud_migrations.CreateTargetAssetRequest{}
func (s *CloudMigrationsTargetAssetResourceCrud) getTargetAssetFromWorkRequest(workId *string, retryPolicy *oci_common.RetryPolicy,
	actionTypeEnum oci_cloud_migrations.ActionTypeEnum, timeout time.Duration) error {
func (s *CloudMigrationsTargetAssetResourceCrud) Get() error {
	request := oci_cloud_migrations.GetTargetAssetRequest{}
func (s *CloudMigrationsTargetAssetResourceCrud) Update() error {
	request := oci_cloud_migrations.UpdateTargetAssetRequest{}
func (s *CloudMigrationsTargetAssetResourceCrud) Delete() error {
	request := oci_cloud_migrations.DeleteTargetAssetRequest{}
func (s *CloudMigrationsTargetAssetResourceCrud) SetData() error {
	switch v := (*s.Res).(type) {
func (s *CloudMigrationsTargetAssetResourceCrud) mapToCreateVnicDetails(fieldKeyFormat string) (oci_cloud_migrations.CreateVnicDetails, error) {
	result := oci_cloud_migrations.CreateVnicDetails{}
func (s *CloudMigrationsTargetAssetResourceCrud) mapToInstanceAgentPluginConfigDetails(fieldKeyFormat string) (oci_cloud_migrations.InstanceAgentPluginConfigDetails, error) {
	result := oci_cloud_migrations.InstanceAgentPluginConfigDetails{}
func (s *CloudMigrationsTargetAssetResourceCrud) mapToInstanceOptions(fieldKeyFormat string) (oci_cloud_migrations.InstanceOptions, error) {
	result := oci_cloud_migrations.InstanceOptions{}
func (s *CloudMigrationsTargetAssetResourceCrud) mapToInstanceSourceDetails(fieldKeyFormat string) (oci_cloud_migrations.InstanceSourceDetails, error) {
	var baseObject oci_cloud_migrations.InstanceSourceDetails
func (s *CloudMigrationsTargetAssetResourceCrud) mapToLaunchInstanceAgentConfigDetails(fieldKeyFormat string) (oci_cloud_migrations.LaunchInstanceAgentConfigDetails, error) {
	result := oci_cloud_migrations.LaunchInstanceAgentConfigDetails{}
func (s *CloudMigrationsTargetAssetResourceCrud) mapToLaunchInstanceDetails(fieldKeyFormat string) (oci_cloud_migrations.LaunchInstanceDetails, error) {
	result := oci_cloud_migrations.LaunchInstanceDetails{}
func (s *CloudMigrationsTargetAssetResourceCrud) mapToLaunchInstanceShapeConfigDetails(fieldKeyFormat string) (oci_cloud_migrations.LaunchInstanceShapeConfigDetails, error) {
	result := oci_cloud_migrations.LaunchInstanceShapeConfigDetails{}
func (s *CloudMigrationsTargetAssetResourceCrud) mapToPreemptibleInstanceConfigDetails(fieldKeyFormat string) (oci_cloud_migrations.PreemptibleInstanceConfigDetails, error) {
	result := oci_cloud_migrations.PreemptibleInstanceConfigDetails{}
func (s *CloudMigrationsTargetAssetResourceCrud) mapToPreemptionAction(fieldKeyFormat string) (oci_cloud_migrations.PreemptionAction, error) {
	var baseObject oci_cloud_migrations.PreemptionAction
func (s *CloudMigrationsTargetAssetResourceCrud) populateTopLevelPolymorphicCreateTargetAssetRequest(request *oci_cloud_migrations.CreateTargetAssetRequest) error {
	//discriminator
func (s *CloudMigrationsTargetAssetResourceCrud) populateTopLevelPolymorphicUpdateTargetAssetRequest(request *oci_cloud_migrations.UpdateTargetAssetRequest) error {
	//discriminator

=== ./internal/service/cloud_migrations/cloud_migrations_replication_schedule_resource.go ===
func CloudMigrationsReplicationScheduleResource() *schema.Resource {
	return &schema.Resource{
func createCloudMigrationsReplicationSchedule(d *schema.ResourceData, m interface{}) error {
	sync := &CloudMigrationsReplicationScheduleResourceCrud{}
func readCloudMigrationsReplicationSchedule(d *schema.ResourceData, m interface{}) error {
	sync := &CloudMigrationsReplicationScheduleResourceCrud{}
func updateCloudMigrationsReplicationSchedule(d *schema.ResourceData, m interface{}) error {
	sync := &CloudMigrationsReplicationScheduleResourceCrud{}
func deleteCloudMigrationsReplicationSchedule(d *schema.ResourceData, m interface{}) error {
	sync := &CloudMigrationsReplicationScheduleResourceCrud{}
func (s *CloudMigrationsReplicationScheduleResourceCrud) ID() string {
	return *s.Res.Id
func (s *CloudMigrationsReplicationScheduleResourceCrud) CreatedPending() []string {
	return []string{
func (s *CloudMigrationsReplicationScheduleResourceCrud) CreatedTarget() []string {
	return []string{
func (s *CloudMigrationsReplicationScheduleResourceCrud) DeletedPending() []string {
	return []string{
func (s *CloudMigrationsReplicationScheduleResourceCrud) DeletedTarget() []string {
	return []string{
func (s *CloudMigrationsReplicationScheduleResourceCrud) Create() error {
	request := oci_cloud_migrations.CreateReplicationScheduleRequest{}
func (s *CloudMigrationsReplicationScheduleResourceCrud) getReplicationScheduleFromWorkRequest(workId *string, retryPolicy *oci_common.RetryPolicy,
	actionTypeEnum oci_cloud_migrations.ActionTypeEnum, timeout time.Duration) error {
func (s *CloudMigrationsReplicationScheduleResourceCrud) Get() error {
	request := oci_cloud_migrations.GetReplicationScheduleRequest{}
func (s *CloudMigrationsReplicationScheduleResourceCrud) Update() error {
	if compartment, ok := s.D.GetOkExists("compartment_id"); ok && s.D.HasChange("compartment_id") {
func (s *CloudMigrationsReplicationScheduleResourceCrud) Delete() error {
	request := oci_cloud_migrations.DeleteReplicationScheduleRequest{}
func (s *CloudMigrationsReplicationScheduleResourceCrud) SetData() error {
	if s.Res.CompartmentId != nil {
func (s *CloudMigrationsReplicationScheduleResourceCrud) updateCompartment(compartment interface{}) error {
	changeCompartmentRequest := oci_cloud_migrations.ChangeReplicationScheduleCompartmentRequest{}

=== ./internal/service/cloud_migrations/cloud_migrations_migration_plan_data_source.go ===
func CloudMigrationsMigrationPlanDataSource() *schema.Resource {
	fieldMap := make(map[string]*schema.Schema)
func readSingularCloudMigrationsMigrationPlan(d *schema.ResourceData, m interface{}) error {
	sync := &CloudMigrationsMigrationPlanDataSourceCrud{}
func (s *CloudMigrationsMigrationPlanDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *CloudMigrationsMigrationPlanDataSourceCrud) Get() error {
	request := oci_cloud_migrations.GetMigrationPlanRequest{}
func (s *CloudMigrationsMigrationPlanDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/cloud_migrations/register_resource.go ===
func RegisterResource() {
	tfresource.RegisterResource("oci_cloud_migrations_migration", CloudMigrationsMigrationResource())

=== ./internal/service/ai_vision/ai_vision_models_data_source.go ===
func AiVisionModelsDataSource() *schema.Resource {
	return &schema.Resource{
func readAiVisionModels(d *schema.ResourceData, m interface{}) error {
	sync := &AiVisionModelsDataSourceCrud{}
func (s *AiVisionModelsDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *AiVisionModelsDataSourceCrud) Get() error {
	request := oci_ai_vision.ListModelsRequest{}
func (s *AiVisionModelsDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/ai_vision/ai_vision_project_data_source.go ===
func AiVisionProjectDataSource() *schema.Resource {
	fieldMap := make(map[string]*schema.Schema)
func readSingularAiVisionProject(d *schema.ResourceData, m interface{}) error {
	sync := &AiVisionProjectDataSourceCrud{}
func (s *AiVisionProjectDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *AiVisionProjectDataSourceCrud) Get() error {
	request := oci_ai_vision.GetProjectRequest{}
func (s *AiVisionProjectDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/ai_vision/ai_vision_project_resource.go ===
func AiVisionProjectResource() *schema.Resource {
	return &schema.Resource{
func createAiVisionProject(d *schema.ResourceData, m interface{}) error {
	sync := &AiVisionProjectResourceCrud{}
func readAiVisionProject(d *schema.ResourceData, m interface{}) error {
	sync := &AiVisionProjectResourceCrud{}
func updateAiVisionProject(d *schema.ResourceData, m interface{}) error {
	sync := &AiVisionProjectResourceCrud{}
func deleteAiVisionProject(d *schema.ResourceData, m interface{}) error {
	sync := &AiVisionProjectResourceCrud{}
func (s *AiVisionProjectResourceCrud) ID() string {
	return *s.Res.Id
func (s *AiVisionProjectResourceCrud) CreatedPending() []string {
	return []string{
func (s *AiVisionProjectResourceCrud) CreatedTarget() []string {
	return []string{
func (s *AiVisionProjectResourceCrud) DeletedPending() []string {
	return []string{
func (s *AiVisionProjectResourceCrud) DeletedTarget() []string {
	return []string{
func (s *AiVisionProjectResourceCrud) Create() error {
	request := oci_ai_vision.CreateProjectRequest{}
func (s *AiVisionProjectResourceCrud) getProjectFromWorkRequest(workId *string, retryPolicy *oci_common.RetryPolicy,
	actionTypeEnum oci_ai_vision.ActionTypeEnum, timeout time.Duration) error {
func (s *AiVisionProjectResourceCrud) Get() error {
	request := oci_ai_vision.GetProjectRequest{}
func (s *AiVisionProjectResourceCrud) Update() error {
	if compartment, ok := s.D.GetOkExists("compartment_id"); ok && s.D.HasChange("compartment_id") {
func (s *AiVisionProjectResourceCrud) Delete() error {
	request := oci_ai_vision.DeleteProjectRequest{}
func (s *AiVisionProjectResourceCrud) SetData() error {
	if s.Res.CompartmentId != nil {
func (s *AiVisionProjectResourceCrud) updateCompartment(compartment interface{}) error {
	changeCompartmentRequest := oci_ai_vision.ChangeProjectCompartmentRequest{}

=== ./internal/service/ai_vision/ai_vision_projects_data_source.go ===
func AiVisionProjectsDataSource() *schema.Resource {
	return &schema.Resource{
func readAiVisionProjects(d *schema.ResourceData, m interface{}) error {
	sync := &AiVisionProjectsDataSourceCrud{}
func (s *AiVisionProjectsDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *AiVisionProjectsDataSourceCrud) Get() error {
	request := oci_ai_vision.ListProjectsRequest{}
func (s *AiVisionProjectsDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/ai_vision/ai_vision_model_data_source.go ===
func AiVisionModelDataSource() *schema.Resource {
	fieldMap := make(map[string]*schema.Schema)
func readSingularAiVisionModel(d *schema.ResourceData, m interface{}) error {
	sync := &AiVisionModelDataSourceCrud{}
func (s *AiVisionModelDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *AiVisionModelDataSourceCrud) Get() error {
	request := oci_ai_vision.GetModelRequest{}
func (s *AiVisionModelDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/ai_vision/register_resource.go ===
func RegisterResource() {
	tfresource.RegisterResource("oci_ai_vision_model", AiVisionModelResource())

=== ./internal/service/ai_vision/ai_vision_model_resource.go ===
func AiVisionModelResource() *schema.Resource {
	return &schema.Resource{
func createAiVisionModel(d *schema.ResourceData, m interface{}) error {
	sync := &AiVisionModelResourceCrud{}
func readAiVisionModel(d *schema.ResourceData, m interface{}) error {
	sync := &AiVisionModelResourceCrud{}
func updateAiVisionModel(d *schema.ResourceData, m interface{}) error {
	sync := &AiVisionModelResourceCrud{}
func deleteAiVisionModel(d *schema.ResourceData, m interface{}) error {
	sync := &AiVisionModelResourceCrud{}
func (s *AiVisionModelResourceCrud) ID() string {
	return *s.Res.Id
func (s *AiVisionModelResourceCrud) CreatedPending() []string {
	return []string{
func (s *AiVisionModelResourceCrud) CreatedTarget() []string {
	return []string{
func (s *AiVisionModelResourceCrud) DeletedPending() []string {
	return []string{
func (s *AiVisionModelResourceCrud) DeletedTarget() []string {
	return []string{
func (s *AiVisionModelResourceCrud) Create() error {
	request := oci_ai_vision.CreateModelRequest{}
func (s *AiVisionModelResourceCrud) getModelFromWorkRequest(workId *string, retryPolicy *oci_common.RetryPolicy,
	actionTypeEnum oci_ai_vision.ActionTypeEnum, timeout time.Duration) error {
func (s *AiVisionModelResourceCrud) Get() error {
	request := oci_ai_vision.GetModelRequest{}
func (s *AiVisionModelResourceCrud) Update() error {
	if compartment, ok := s.D.GetOkExists("compartment_id"); ok && s.D.HasChange("compartment_id") {
func (s *AiVisionModelResourceCrud) Delete() error {
	request := oci_ai_vision.DeleteModelRequest{}
func (s *AiVisionModelResourceCrud) SetData() error {
	if s.Res.AveragePrecision != nil {
func (s *AiVisionModelResourceCrud) mapToDataset(fieldKeyFormat string) (oci_ai_vision.Dataset, error) {
	var baseObject oci_ai_vision.Dataset
func (s *AiVisionModelResourceCrud) updateCompartment(compartment interface{}) error {
	changeCompartmentRequest := oci_ai_vision.ChangeModelCompartmentRequest{}

=== ./internal/service/marketplace/marketplace_listing_package_agreements_data_source.go ===
func MarketplaceListingPackageAgreementsDataSource() *schema.Resource {
	return &schema.Resource{
func readMarketplaceListingPackageAgreements(d *schema.ResourceData, m interface{}) error {
	sync := &MarketplaceListingPackageAgreementsDataSourceCrud{}
func (s *MarketplaceListingPackageAgreementsDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *MarketplaceListingPackageAgreementsDataSourceCrud) Get() error {
	request := oci_marketplace.ListAgreementsRequest{}
func (s *MarketplaceListingPackageAgreementsDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/marketplace/marketplace_listing_taxes_data_source.go ===
func MarketplaceListingTaxesDataSource() *schema.Resource {
	return &schema.Resource{
func readMarketplaceListingTaxes(d *schema.ResourceData, m interface{}) error {
	sync := &MarketplaceListingTaxesDataSourceCrud{}
func (s *MarketplaceListingTaxesDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *MarketplaceListingTaxesDataSourceCrud) Get() error {
	request := oci_marketplace.ListTaxesRequest{}
func (s *MarketplaceListingTaxesDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/marketplace/marketplace_listing_package_agreement_resource.go ===
func MarketplaceListingPackageAgreementResource() *schema.Resource {
	return &schema.Resource{
func createMarketplaceListingPackageAgreement(d *schema.ResourceData, m interface{}) error {
	sync := &MarketplaceListingPackageAgreementResourceCrud{}
func readMarketplaceListingPackageAgreement(d *schema.ResourceData, m interface{}) error {
	sync := &MarketplaceListingPackageAgreementResourceCrud{}
func deleteMarketplaceListingPackageAgreement(d *schema.ResourceData, m interface{}) error {
	sync := &MarketplaceListingPackageAgreementResourceCrud{}
func (s *MarketplaceListingPackageAgreementResourceCrud) ID() string {
	return *s.Res.Id
func (s *MarketplaceListingPackageAgreementResourceCrud) Create() error {
	request := oci_marketplace.GetAgreementRequest{}
func (s *MarketplaceListingPackageAgreementResourceCrud) Get() error {
	return nil
func (s *MarketplaceListingPackageAgreementResourceCrud) Delete() error {
	return nil
func (s *MarketplaceListingPackageAgreementResourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/marketplace/marketplace_publication_resource.go ===
func MarketplacePublicationResource() *schema.Resource {
	return &schema.Resource{
func createMarketplacePublication(d *schema.ResourceData, m interface{}) error {
	sync := &MarketplacePublicationResourceCrud{}
func readMarketplacePublication(d *schema.ResourceData, m interface{}) error {
	sync := &MarketplacePublicationResourceCrud{}
func updateMarketplacePublication(d *schema.ResourceData, m interface{}) error {
	sync := &MarketplacePublicationResourceCrud{}
func deleteMarketplacePublication(d *schema.ResourceData, m interface{}) error {
	sync := &MarketplacePublicationResourceCrud{}
func (s *MarketplacePublicationResourceCrud) ID() string {
	return *s.Res.Id
func (s *MarketplacePublicationResourceCrud) CreatedPending() []string {
	return []string{
func (s *MarketplacePublicationResourceCrud) CreatedTarget() []string {
	return []string{
func (s *MarketplacePublicationResourceCrud) DeletedPending() []string {
	return []string{
func (s *MarketplacePublicationResourceCrud) DeletedTarget() []string {
	return []string{
func (s *MarketplacePublicationResourceCrud) Create() error {
	request := oci_marketplace.CreatePublicationRequest{}
func (s *MarketplacePublicationResourceCrud) Get() error {
	request := oci_marketplace.GetPublicationRequest{}
func (s *MarketplacePublicationResourceCrud) Update() error {
	if compartment, ok := s.D.GetOkExists("compartment_id"); ok && s.D.HasChange("compartment_id") {
func (s *MarketplacePublicationResourceCrud) Delete() error {
	request := oci_marketplace.DeletePublicationRequest{}
func (s *MarketplacePublicationResourceCrud) SetData() error {
	if s.Res.CompartmentId != nil {
func (s *MarketplacePublicationResourceCrud) mapToCreatePublicationPackage(fieldKeyFormat string) (oci_marketplace.CreatePublicationPackage, error) {
	var baseObject oci_marketplace.CreatePublicationPackage
func (s *MarketplacePublicationResourceCrud) mapToEula(fieldKeyFormat string) (oci_marketplace.Eula, error) {
	var baseObject oci_marketplace.Eula
func (s *MarketplacePublicationResourceCrud) mapToSupportContact(fieldKeyFormat string) (oci_marketplace.SupportContact, error) {
	result := oci_marketplace.SupportContact{}
func (s *MarketplacePublicationResourceCrud) updateCompartment(compartment interface{}) error {
	changeCompartmentRequest := oci_marketplace.ChangePublicationCompartmentRequest{}
func (s *MarketplacePublicationResourceCrud) mapToOperatingSystem(fieldKeyFormat string) (oci_marketplace.OperatingSystem, error) {
	result := oci_marketplace.OperatingSystem{}

=== ./internal/service/marketplace/marketplace_categories_data_source.go ===
func MarketplaceCategoriesDataSource() *schema.Resource {
	return &schema.Resource{
func readMarketplaceCategories(d *schema.ResourceData, m interface{}) error {
	sync := &MarketplaceCategoriesDataSourceCrud{}
func (s *MarketplaceCategoriesDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *MarketplaceCategoriesDataSourceCrud) Get() error {
	request := oci_marketplace.ListCategoriesRequest{}
func (s *MarketplaceCategoriesDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/marketplace/marketplace_publication_packages_data_source.go ===
func MarketplacePublicationPackagesDataSource() *schema.Resource {
	return &schema.Resource{
func readMarketplacePublicationPackages(d *schema.ResourceData, m interface{}) error {
	sync := &MarketplacePublicationPackagesDataSourceCrud{}
func (s *MarketplacePublicationPackagesDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *MarketplacePublicationPackagesDataSourceCrud) Get() error {
	request := oci_marketplace.ListPublicationPackagesRequest{}
func (s *MarketplacePublicationPackagesDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/marketplace/marketplace_publications_data_source.go ===
func MarketplacePublicationsDataSource() *schema.Resource {
	return &schema.Resource{
func readMarketplacePublications(d *schema.ResourceData, m interface{}) error {
	sync := &MarketplacePublicationsDataSourceCrud{}
func (s *MarketplacePublicationsDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *MarketplacePublicationsDataSourceCrud) Get() error {
	request := oci_marketplace.ListPublicationsRequest{}
func (s *MarketplacePublicationsDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/marketplace/marketplace_accepted_agreements_data_source.go ===
func MarketplaceAcceptedAgreementsDataSource() *schema.Resource {
	return &schema.Resource{
func readMarketplaceAcceptedAgreements(d *schema.ResourceData, m interface{}) error {
	sync := &MarketplaceAcceptedAgreementsDataSourceCrud{}
func (s *MarketplaceAcceptedAgreementsDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *MarketplaceAcceptedAgreementsDataSourceCrud) Get() error {
	request := oci_marketplace.ListAcceptedAgreementsRequest{}
func (s *MarketplaceAcceptedAgreementsDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/marketplace/marketplace_export.go ===
func findPublications(ctx *tf_export.ResourceDiscoveryContext, tfMeta *tf_export.TerraformResourceAssociation, parent *tf_export.OCIResource, resourceGraph *tf_export.TerraformResourceGraph) (resources []*tf_export.OCIResource, err error) {
	results := []*tf_export.OCIResource{}

=== ./internal/service/marketplace/marketplace_listing_data_source.go ===
func MarketplaceListingDataSource() *schema.Resource {
	return &schema.Resource{
func readSingularMarketplaceListing(d *schema.ResourceData, m interface{}) error {
	sync := &MarketplaceListingDataSourceCrud{}
func (s *MarketplaceListingDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *MarketplaceListingDataSourceCrud) Get() error {
	request := oci_marketplace.GetListingRequest{}
func (s *MarketplaceListingDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/marketplace/marketplace_accepted_agreement_data_source.go ===
func MarketplaceAcceptedAgreementDataSource() *schema.Resource {
	fieldMap := make(map[string]*schema.Schema)
func readSingularMarketplaceAcceptedAgreement(d *schema.ResourceData, m interface{}) error {
	sync := &MarketplaceAcceptedAgreementDataSourceCrud{}
func (s *MarketplaceAcceptedAgreementDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *MarketplaceAcceptedAgreementDataSourceCrud) Get() error {
	request := oci_marketplace.GetAcceptedAgreementRequest{}
func (s *MarketplaceAcceptedAgreementDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/marketplace/marketplace_publication_data_source.go ===
func MarketplacePublicationDataSource() *schema.Resource {
	fieldMap := make(map[string]*schema.Schema)
func readSingularMarketplacePublication(d *schema.ResourceData, m interface{}) error {
	sync := &MarketplacePublicationDataSourceCrud{}
func (s *MarketplacePublicationDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *MarketplacePublicationDataSourceCrud) Get() error {
	request := oci_marketplace.GetPublicationRequest{}
func (s *MarketplacePublicationDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/marketplace/marketplace_listings_data_source.go ===
func MarketplaceListingsDataSource() *schema.Resource {
	return &schema.Resource{
func readMarketplaceListings(d *schema.ResourceData, m interface{}) error {
	sync := &MarketplaceListingsDataSourceCrud{}
func (s *MarketplaceListingsDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *MarketplaceListingsDataSourceCrud) Get() error {
	request := oci_marketplace.ListListingsRequest{}
func (s *MarketplaceListingsDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/marketplace/marketplace_publishers_data_source.go ===
func MarketplacePublishersDataSource() *schema.Resource {
	return &schema.Resource{
func readMarketplacePublishers(d *schema.ResourceData, m interface{}) error {
	sync := &MarketplacePublishersDataSourceCrud{}
func (s *MarketplacePublishersDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *MarketplacePublishersDataSourceCrud) Get() error {
	request := oci_marketplace.ListPublishersRequest{}
func (s *MarketplacePublishersDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/marketplace/marketplace_listing_packages_data_source.go ===
func MarketplaceListingPackagesDataSource() *schema.Resource {
	return &schema.Resource{
func readMarketplaceListingPackages(d *schema.ResourceData, m interface{}) error {
	sync := &MarketplaceListingPackagesDataSourceCrud{}
func (s *MarketplaceListingPackagesDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *MarketplaceListingPackagesDataSourceCrud) Get() error {
	request := oci_marketplace.ListPackagesRequest{}
func (s *MarketplaceListingPackagesDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/marketplace/marketplace_publication_package_data_source.go ===
func MarketplacePublicationPackageDataSource() *schema.Resource {
	return &schema.Resource{
func readSingularMarketplacePublicationPackage(d *schema.ResourceData, m interface{}) error {
	sync := &MarketplacePublicationPackageDataSourceCrud{}
func (s *MarketplacePublicationPackageDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *MarketplacePublicationPackageDataSourceCrud) Get() error {
	request := oci_marketplace.GetPublicationPackageRequest{}
func (s *MarketplacePublicationPackageDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/marketplace/marketplace_accepted_agreement_resource.go ===
func MarketplaceAcceptedAgreementResource() *schema.Resource {
	return &schema.Resource{
func createMarketplaceAcceptedAgreement(d *schema.ResourceData, m interface{}) error {
	sync := &MarketplaceAcceptedAgreementResourceCrud{}
func readMarketplaceAcceptedAgreement(d *schema.ResourceData, m interface{}) error {
	sync := &MarketplaceAcceptedAgreementResourceCrud{}
func updateMarketplaceAcceptedAgreement(d *schema.ResourceData, m interface{}) error {
	sync := &MarketplaceAcceptedAgreementResourceCrud{}
func deleteMarketplaceAcceptedAgreement(d *schema.ResourceData, m interface{}) error {
	sync := &MarketplaceAcceptedAgreementResourceCrud{}
func (s *MarketplaceAcceptedAgreementResourceCrud) ID() string {
	return *s.Res.Id
func (s *MarketplaceAcceptedAgreementResourceCrud) Create() error {
	request := oci_marketplace.CreateAcceptedAgreementRequest{}
func (s *MarketplaceAcceptedAgreementResourceCrud) Get() error {
	request := oci_marketplace.GetAcceptedAgreementRequest{}
func (s *MarketplaceAcceptedAgreementResourceCrud) Update() error {
	request := oci_marketplace.UpdateAcceptedAgreementRequest{}
func (s *MarketplaceAcceptedAgreementResourceCrud) Delete() error {
	request := oci_marketplace.DeleteAcceptedAgreementRequest{}
func (s *MarketplaceAcceptedAgreementResourceCrud) SetData() error {
	if s.Res.AgreementId != nil {

=== ./internal/service/marketplace/register_resource.go ===
func RegisterResource() {
	tfresource.RegisterResource("oci_marketplace_accepted_agreement", MarketplaceAcceptedAgreementResource())

=== ./internal/service/marketplace/marketplace_listing_package_data_source.go ===
func MarketplaceListingPackageDataSource() *schema.Resource {
	return &schema.Resource{
func readSingularMarketplaceListingPackage(d *schema.ResourceData, m interface{}) error {
	sync := &MarketplaceListingPackageDataSourceCrud{}
func (s *MarketplaceListingPackageDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *MarketplaceListingPackageDataSourceCrud) Get() error {
	request := oci_marketplace.GetPackageRequest{}
func (s *MarketplaceListingPackageDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/fleet_software_update/fleet_software_update_fsu_collection_data_source.go ===
func FleetSoftwareUpdateFsuCollectionDataSource() *schema.Resource {
	fieldMap := make(map[string]*schema.Schema)
func readSingularFleetSoftwareUpdateFsuCollection(d *schema.ResourceData, m interface{}) error {
	sync := &FleetSoftwareUpdateFsuCollectionDataSourceCrud{}
func (s *FleetSoftwareUpdateFsuCollectionDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *FleetSoftwareUpdateFsuCollectionDataSourceCrud) Get() error {
	request := oci_fleet_software_update.GetFsuCollectionRequest{}
func (s *FleetSoftwareUpdateFsuCollectionDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/fleet_software_update/fleet_software_update_fsu_cycles_data_source.go ===
func FleetSoftwareUpdateFsuCyclesDataSource() *schema.Resource {
	return &schema.Resource{
func readFleetSoftwareUpdateFsuCycles(d *schema.ResourceData, m interface{}) error {
	sync := &FleetSoftwareUpdateFsuCyclesDataSourceCrud{}
func (s *FleetSoftwareUpdateFsuCyclesDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *FleetSoftwareUpdateFsuCyclesDataSourceCrud) Get() error {
	request := oci_fleet_software_update.ListFsuCyclesRequest{}
func (s *FleetSoftwareUpdateFsuCyclesDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/fleet_software_update/fleet_software_update_fsu_cycle_resource.go ===
func FleetSoftwareUpdateFsuCycleResource() *schema.Resource {
	return &schema.Resource{
func createFleetSoftwareUpdateFsuCycle(d *schema.ResourceData, m interface{}) error {
	sync := &FleetSoftwareUpdateFsuCycleResourceCrud{}
func readFleetSoftwareUpdateFsuCycle(d *schema.ResourceData, m interface{}) error {
	sync := &FleetSoftwareUpdateFsuCycleResourceCrud{}
func updateFleetSoftwareUpdateFsuCycle(d *schema.ResourceData, m interface{}) error {
	sync := &FleetSoftwareUpdateFsuCycleResourceCrud{}
func deleteFleetSoftwareUpdateFsuCycle(d *schema.ResourceData, m interface{}) error {
	sync := &FleetSoftwareUpdateFsuCycleResourceCrud{}
func (s *FleetSoftwareUpdateFsuCycleResourceCrud) ID() string {
	fsuCycle := *s.Res
func (s *FleetSoftwareUpdateFsuCycleResourceCrud) CreatedPending() []string {
	return []string{
func (s *FleetSoftwareUpdateFsuCycleResourceCrud) CreatedTarget() []string {
	return []string{
func (s *FleetSoftwareUpdateFsuCycleResourceCrud) DeletedPending() []string {
	return []string{
func (s *FleetSoftwareUpdateFsuCycleResourceCrud) DeletedTarget() []string {
	return []string{
func (s *FleetSoftwareUpdateFsuCycleResourceCrud) Create() error {
	request := oci_fleet_software_update.CreateFsuCycleRequest{}
func (s *FleetSoftwareUpdateFsuCycleResourceCrud) getFsuCycleFromWorkRequest(workId *string, retryPolicy *oci_common.RetryPolicy,
	actionTypeEnum oci_fleet_software_update.ActionTypeEnum, timeout time.Duration) error {
func (s *FleetSoftwareUpdateFsuCycleResourceCrud) Get() error {
	request := oci_fleet_software_update.GetFsuCycleRequest{}
func (s *FleetSoftwareUpdateFsuCycleResourceCrud) Update() error {
	if compartment, ok := s.D.GetOkExists("compartment_id"); ok && s.D.HasChange("compartment_id") {
func (s *FleetSoftwareUpdateFsuCycleResourceCrud) Delete() error {
	request := oci_fleet_software_update.DeleteFsuCycleRequest{}
func (s *FleetSoftwareUpdateFsuCycleResourceCrud) SetData() error {
	switch v := (*s.Res).(type) {
func (s *FleetSoftwareUpdateFsuCycleResourceCrud) mapToCreateBatchingStrategyDetails(fieldKeyFormat string) (oci_fleet_software_update.CreateBatchingStrategyDetails, error) {
	var baseObject oci_fleet_software_update.CreateBatchingStrategyDetails
func (s *FleetSoftwareUpdateFsuCycleResourceCrud) mapToUpdateBatchingStrategyDetails(fieldKeyFormat string) (oci_fleet_software_update.UpdateBatchingStrategyDetails, error) {
	var baseObject oci_fleet_software_update.UpdateBatchingStrategyDetails
func (s *FleetSoftwareUpdateFsuCycleResourceCrud) mapToCreateScheduleDetails(fieldKeyFormat string) (oci_fleet_software_update.CreateScheduleDetails, error) {
	var baseObject oci_fleet_software_update.CreateScheduleDetails
func (s *FleetSoftwareUpdateFsuCycleResourceCrud) mapToDiagnosticsCollectionDetails(fieldKeyFormat string) (oci_fleet_software_update.DiagnosticsCollectionDetails, error) {
	result := oci_fleet_software_update.DiagnosticsCollectionDetails{}
func (s *FleetSoftwareUpdateFsuCycleResourceCrud) mapToFsuGoalVersionDetails(fieldKeyFormat string) (oci_fleet_software_update.FsuGoalVersionDetails, error) {
	var baseObject oci_fleet_software_update.FsuGoalVersionDetails
func (s *FleetSoftwareUpdateFsuCycleResourceCrud) populateTopLevelPolymorphicCreateFsuCycleRequest(request *oci_fleet_software_update.CreateFsuCycleRequest) error {
	//discriminator
func (s *FleetSoftwareUpdateFsuCycleResourceCrud) populateTopLevelPolymorphicUpdateFsuCycleRequest(request *oci_fleet_software_update.UpdateFsuCycleRequest) error {
	//discriminator
func (s *FleetSoftwareUpdateFsuCycleResourceCrud) updateCompartment(compartment interface{}) error {
	changeCompartmentRequest := oci_fleet_software_update.ChangeFsuCycleCompartmentRequest{}

=== ./internal/service/fleet_software_update/fleet_software_update_export.go ===
func processFleetSoftwareUpdateCollection(ctx *tf_export.ResourceDiscoveryContext, resources []*tf_export.OCIResource) ([]*tf_export.OCIResource, error) {
	for _, resource := range resources {

=== ./internal/service/fleet_software_update/fleet_software_update_fsu_cycle_data_source.go ===
func FleetSoftwareUpdateFsuCycleDataSource() *schema.Resource {
	fieldMap := make(map[string]*schema.Schema)
func readSingularFleetSoftwareUpdateFsuCycle(d *schema.ResourceData, m interface{}) error {
	sync := &FleetSoftwareUpdateFsuCycleDataSourceCrud{}
func (s *FleetSoftwareUpdateFsuCycleDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *FleetSoftwareUpdateFsuCycleDataSourceCrud) Get() error {
	request := oci_fleet_software_update.GetFsuCycleRequest{}
func (s *FleetSoftwareUpdateFsuCycleDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/fleet_software_update/fleet_software_update_fsu_collections_data_source.go ===
func FleetSoftwareUpdateFsuCollectionsDataSource() *schema.Resource {
	return &schema.Resource{
func readFleetSoftwareUpdateFsuCollections(d *schema.ResourceData, m interface{}) error {
	sync := &FleetSoftwareUpdateFsuCollectionsDataSourceCrud{}
func (s *FleetSoftwareUpdateFsuCollectionsDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *FleetSoftwareUpdateFsuCollectionsDataSourceCrud) Get() error {
	request := oci_fleet_software_update.ListFsuCollectionsRequest{}
func (s *FleetSoftwareUpdateFsuCollectionsDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/fleet_software_update/fleet_software_update_fsu_collection_resource.go ===
func FleetSoftwareUpdateFsuCollectionResource() *schema.Resource {
	return &schema.Resource{
func createFleetSoftwareUpdateFsuCollection(d *schema.ResourceData, m interface{}) error {
	sync := &FleetSoftwareUpdateFsuCollectionResourceCrud{}
func readFleetSoftwareUpdateFsuCollection(d *schema.ResourceData, m interface{}) error {
	sync := &FleetSoftwareUpdateFsuCollectionResourceCrud{}
func updateFleetSoftwareUpdateFsuCollection(d *schema.ResourceData, m interface{}) error {
	sync := &FleetSoftwareUpdateFsuCollectionResourceCrud{}
func deleteFleetSoftwareUpdateFsuCollection(d *schema.ResourceData, m interface{}) error {
	sync := &FleetSoftwareUpdateFsuCollectionResourceCrud{}
func (s *FleetSoftwareUpdateFsuCollectionResourceCrud) ID() string {
	fsuCollection := *s.Res
func (s *FleetSoftwareUpdateFsuCollectionResourceCrud) CreatedPending() []string {
	return []string{
func (s *FleetSoftwareUpdateFsuCollectionResourceCrud) CreatedTarget() []string {
	return []string{
func (s *FleetSoftwareUpdateFsuCollectionResourceCrud) DeletedPending() []string {
	return []string{
func (s *FleetSoftwareUpdateFsuCollectionResourceCrud) DeletedTarget() []string {
	return []string{
func (s *FleetSoftwareUpdateFsuCollectionResourceCrud) Create() error {
	request := oci_fleet_software_update.CreateFsuCollectionRequest{}
func (s *FleetSoftwareUpdateFsuCollectionResourceCrud) getFsuCollectionFromWorkRequest(workId *string, retryPolicy *oci_common.RetryPolicy,
	actionTypeEnum oci_fleet_software_update.ActionTypeEnum, timeout time.Duration) error {
func (s *FleetSoftwareUpdateFsuCollectionResourceCrud) Get() error {
	request := oci_fleet_software_update.GetFsuCollectionRequest{}
func (s *FleetSoftwareUpdateFsuCollectionResourceCrud) Update() error {
	if compartment, ok := s.D.GetOkExists("compartment_id"); ok && s.D.HasChange("compartment_id") {
func (s *FleetSoftwareUpdateFsuCollectionResourceCrud) Delete() error {
	request := oci_fleet_software_update.DeleteFsuCollectionRequest{}
func (s *FleetSoftwareUpdateFsuCollectionResourceCrud) SetData() error {
	s.D.SetId(s.D.Id())
func (s *FleetSoftwareUpdateFsuCollectionResourceCrud) mapToDbFleetDiscoveryDetails(fieldKeyFormat string) (oci_fleet_software_update.DbFleetDiscoveryDetails, error) {
	var baseObject oci_fleet_software_update.DbFleetDiscoveryDetails
func (s *FleetSoftwareUpdateFsuCollectionResourceCrud) mapToDbFleetDiscoveryFilter(fieldKeyFormat string) (oci_fleet_software_update.DbFleetDiscoveryFilter, error) {
	var baseObject oci_fleet_software_update.DbFleetDiscoveryFilter
func (s *FleetSoftwareUpdateFsuCollectionResourceCrud) mapToDefinedTagFilterEntry(fieldKeyFormat string) (oci_fleet_software_update.DefinedTagFilterEntry, error) {
	result := oci_fleet_software_update.DefinedTagFilterEntry{}
func (s *FleetSoftwareUpdateFsuCollectionResourceCrud) mapToFreeformTagFilterEntry(fieldKeyFormat string) (oci_fleet_software_update.FreeformTagFilterEntry, error) {
	result := oci_fleet_software_update.FreeformTagFilterEntry{}
func (s *FleetSoftwareUpdateFsuCollectionResourceCrud) mapToGiFleetDiscoveryDetails(fieldKeyFormat string) (oci_fleet_software_update.GiFleetDiscoveryDetails, error) {
	var baseObject oci_fleet_software_update.GiFleetDiscoveryDetails
func (s *FleetSoftwareUpdateFsuCollectionResourceCrud) mapToGiFleetDiscoveryFilter(fieldKeyFormat string) (oci_fleet_software_update.GiFleetDiscoveryFilter, error) {
	var baseObject oci_fleet_software_update.GiFleetDiscoveryFilter
func (s *FleetSoftwareUpdateFsuCollectionResourceCrud) populateTopLevelPolymorphicCreateFsuCollectionRequest(request *oci_fleet_software_update.CreateFsuCollectionRequest) error {
	//discriminator
func (s *FleetSoftwareUpdateFsuCollectionResourceCrud) updateCompartment(compartment interface{}) error {
	changeCompartmentRequest := oci_fleet_software_update.ChangeFsuCollectionCompartmentRequest{}

=== ./internal/service/fleet_software_update/register_resource.go ===
func RegisterResource() {
	tfresource.RegisterResource("oci_fleet_software_update_fsu_collection", FleetSoftwareUpdateFsuCollectionResource())

=== ./internal/service/apm_config/apm_config_config_resource.go ===
func ApmConfigConfigResource() *schema.Resource {
	return &schema.Resource{
func createApmConfigConfig(d *schema.ResourceData, m interface{}) error {
	sync := &ApmConfigConfigResourceCrud{}
func readApmConfigConfig(d *schema.ResourceData, m interface{}) error {
	sync := &ApmConfigConfigResourceCrud{}
func updateApmConfigConfig(d *schema.ResourceData, m interface{}) error {
	sync := &ApmConfigConfigResourceCrud{}
func deleteApmConfigConfig(d *schema.ResourceData, m interface{}) error {
	sync := &ApmConfigConfigResourceCrud{}
func (s *ApmConfigConfigResourceCrud) ID() string {
	config := *s.Res
func (s *ApmConfigConfigResourceCrud) Create() error {
	request := oci_apm_config.CreateConfigRequest{}
func (s *ApmConfigConfigResourceCrud) Get() error {
	request := oci_apm_config.GetConfigRequest{}
func (s *ApmConfigConfigResourceCrud) Update() error {
	request := oci_apm_config.UpdateConfigRequest{}
func (s *ApmConfigConfigResourceCrud) Delete() error {
	request := oci_apm_config.DeleteConfigRequest{}
func (s *ApmConfigConfigResourceCrud) SetData() error {

func (s *ApmConfigConfigResourceCrud) mapToApdex(fieldKeyFormat string) (oci_apm_config.Apdex, error) {
	result := oci_apm_config.Apdex{}
func (s *ApmConfigConfigResourceCrud) mapToDimension(fieldKeyFormat string) (oci_apm_config.Dimension, error) {
	result := oci_apm_config.Dimension{}
func (s *ApmConfigConfigResourceCrud) mapToMetric(fieldKeyFormat string) (oci_apm_config.Metric, error) {
	result := oci_apm_config.Metric{}
func (s *ApmConfigConfigResourceCrud) populateTopLevelPolymorphicCreateConfigRequest(request *oci_apm_config.CreateConfigRequest) error {
	//discriminator
func (s *ApmConfigConfigResourceCrud) populateTopLevelPolymorphicUpdateConfigRequest(request *oci_apm_config.UpdateConfigRequest) error {
	//discriminator

=== ./internal/service/apm_config/apm_config_export.go ===
func getApmConfigConfigId(resource *tf_export.OCIResource) (string, error) {


=== ./internal/service/apm_config/apm_config_config_data_source.go ===
func ApmConfigConfigDataSource() *schema.Resource {
	fieldMap := make(map[string]*schema.Schema)
func readSingularApmConfigConfig(d *schema.ResourceData, m interface{}) error {
	sync := &ApmConfigConfigDataSourceCrud{}
func (s *ApmConfigConfigDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *ApmConfigConfigDataSourceCrud) Get() error {
	request := oci_apm_config.GetConfigRequest{}
func (s *ApmConfigConfigDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/apm_config/apm_config_configs_data_source.go ===
func ApmConfigConfigsDataSource() *schema.Resource {
	return &schema.Resource{
func readApmConfigConfigs(d *schema.ResourceData, m interface{}) error {
	sync := &ApmConfigConfigsDataSourceCrud{}
func (s *ApmConfigConfigsDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *ApmConfigConfigsDataSourceCrud) Get() error {
	request := oci_apm_config.ListConfigsRequest{}
func (s *ApmConfigConfigsDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/apm_config/register_resource.go ===
func RegisterResource() {
	tfresource.RegisterResource("oci_apm_config_config", ApmConfigConfigResource())

=== ./internal/service/psql/psql_db_system_primary_db_instance_data_source.go ===
func PsqlDbSystemPrimaryDbInstanceDataSource() *schema.Resource {
	return &schema.Resource{
func readSingularPsqlDbSystemPrimaryDbInstance(d *schema.ResourceData, m interface{}) error {
	sync := &PsqlDbSystemPrimaryDbInstanceDataSourceCrud{}
func (s *PsqlDbSystemPrimaryDbInstanceDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *PsqlDbSystemPrimaryDbInstanceDataSourceCrud) Get() error {
	request := oci_psql.GetPrimaryDbInstanceRequest{}
func (s *PsqlDbSystemPrimaryDbInstanceDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/psql/psql_db_system_resource.go ===
func PsqlDbSystemResource() *schema.Resource {
	return &schema.Resource{
func createPsqlDbSystem(d *schema.ResourceData, m interface{}) error {
	sync := &PsqlDbSystemResourceCrud{}
func readPsqlDbSystem(d *schema.ResourceData, m interface{}) error {
	sync := &PsqlDbSystemResourceCrud{}
func updatePsqlDbSystem(d *schema.ResourceData, m interface{}) error {
	sync := &PsqlDbSystemResourceCrud{}
func deletePsqlDbSystem(d *schema.ResourceData, m interface{}) error {
	sync := &PsqlDbSystemResourceCrud{}
func (s *PsqlDbSystemResourceCrud) ID() string {
	return *s.Res.Id
func (s *PsqlDbSystemResourceCrud) CreatedPending() []string {
	return []string{
func (s *PsqlDbSystemResourceCrud) CreatedTarget() []string {
	return []string{
func (s *PsqlDbSystemResourceCrud) DeletedPending() []string {
	return []string{
func (s *PsqlDbSystemResourceCrud) DeletedTarget() []string {
	return []string{
func (s *PsqlDbSystemResourceCrud) Create() error {
	request := oci_psql.CreateDbSystemRequest{}
func (s *PsqlDbSystemResourceCrud) Patch() error {
	request := oci_psql.PatchDbSystemRequest{}
func (s *PsqlDbSystemResourceCrud) getDbSystemFromWorkRequest(workId *string, retryPolicy *oci_common.RetryPolicy,
	actionTypeEnum oci_psql.ActionTypeEnum, timeout time.Duration) error {
func (s *PsqlDbSystemResourceCrud) Get() error {
	request := oci_psql.GetDbSystemRequest{}
func (s *PsqlDbSystemResourceCrud) Update() error {

func (s *PsqlDbSystemResourceCrud) Delete() error {
	request := oci_psql.DeleteDbSystemRequest{}
func (s *PsqlDbSystemResourceCrud) SetData() error {
	if s.Res.AdminUsername != nil {
func (s *PsqlDbSystemResourceCrud) ResetMasterUserPassword() error {
	request := oci_psql.ResetMasterUserPasswordRequest{}
func (s *PsqlDbSystemResourceCrud) mapToBackupPolicy(fieldKeyFormat string) (oci_psql.BackupPolicy, error) {
	var baseObject oci_psql.BackupPolicy
func (s *PsqlDbSystemResourceCrud) mapToCreateDbInstanceDetails(fieldKeyFormat string) (oci_psql.CreateDbInstanceDetails, error) {
	result := oci_psql.CreateDbInstanceDetails{}
func (s *PsqlDbSystemResourceCrud) mapToCredentials(fieldKeyFormat string) (oci_psql.Credentials, error) {
	result := oci_psql.Credentials{}
func (s *PsqlDbSystemResourceCrud) mapToManagementPolicyDetails(fieldKeyFormat string) (oci_psql.ManagementPolicyDetails, error) {
	result := oci_psql.ManagementPolicyDetails{}
func (s *PsqlDbSystemResourceCrud) mapToNetworkDetails(fieldKeyFormat string) (oci_psql.NetworkDetails, error) {
	result := oci_psql.NetworkDetails{}
func (s *PsqlDbSystemResourceCrud) mapToUpdateNetworkDetails(fieldKeyFormat string) (oci_psql.UpdateNetworkDetails, error) {
	result := oci_psql.UpdateNetworkDetails{}
func (s *PsqlDbSystemResourceCrud) mapToPasswordDetails(fieldKeyFormat string) (oci_psql.PasswordDetails, error) {
	var baseObject oci_psql.PasswordDetails
func (s *PsqlDbSystemResourceCrud) mapToPatchInstruction(fieldKeyFormat string) (oci_psql.PatchInstruction, error) {
	var baseObject oci_psql.PatchInstruction
func (s *PsqlDbSystemResourceCrud) mapToSourceDetails(fieldKeyFormat string) (oci_psql.SourceDetails, error) {
	var baseObject oci_psql.SourceDetails
func (s *PsqlDbSystemResourceCrud) mapToStorageDetails(fieldKeyFormat string) (oci_psql.StorageDetails, error) {
	var baseObject oci_psql.StorageDetails
func (s *PsqlDbSystemResourceCrud) mapToUpdateStorageDetailsParams(fieldKeyFormat string) (oci_psql.UpdateStorageDetailsParams, error) {
	var baseObject oci_psql.UpdateStorageDetailsParams
func (s *PsqlDbSystemResourceCrud) mapToUpdateDbConfigParams(fieldKeyFormat string) (oci_psql.UpdateDbConfigParams, error) {
	result := oci_psql.UpdateDbConfigParams{}
func (s *PsqlDbSystemResourceCrud) updateCompartment(compartment interface{}) error {
	changeCompartmentRequest := oci_psql.ChangeDbSystemCompartmentRequest{}
func (s *PsqlDbSystemResourceCrud) isFlexibleConfig(configId *string) bool {
	if strings.Contains(*configId, "defaultconfiguration") {

=== ./internal/service/psql/psql_db_system_connection_detail_data_source.go ===
func PsqlDbSystemConnectionDetailDataSource() *schema.Resource {
	return &schema.Resource{
func readSingularPsqlDbSystemConnectionDetail(d *schema.ResourceData, m interface{}) error {
	sync := &PsqlDbSystemConnectionDetailDataSourceCrud{}
func (s *PsqlDbSystemConnectionDetailDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *PsqlDbSystemConnectionDetailDataSourceCrud) Get() error {
	request := oci_psql.GetConnectionDetailsRequest{}
func (s *PsqlDbSystemConnectionDetailDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/psql/psql_configuration_resource.go ===
func PsqlConfigurationResource() *schema.Resource {
	return &schema.Resource{
func createPsqlConfiguration(d *schema.ResourceData, m interface{}) error {
	sync := &PsqlConfigurationResourceCrud{}
func readPsqlConfiguration(d *schema.ResourceData, m interface{}) error {
	sync := &PsqlConfigurationResourceCrud{}
func updatePsqlConfiguration(d *schema.ResourceData, m interface{}) error {
	sync := &PsqlConfigurationResourceCrud{}
func deletePsqlConfiguration(d *schema.ResourceData, m interface{}) error {
	sync := &PsqlConfigurationResourceCrud{}
func (s *PsqlConfigurationResourceCrud) ID() string {
	return *s.Res.Id
func (s *PsqlConfigurationResourceCrud) CreatedPending() []string {
	return []string{}
func (s *PsqlConfigurationResourceCrud) CreatedTarget() []string {
	return []string{
func (s *PsqlConfigurationResourceCrud) DeletedPending() []string {
	return []string{
func (s *PsqlConfigurationResourceCrud) DeletedTarget() []string {
	return []string{
func (s *PsqlConfigurationResourceCrud) Create() error {
	request := oci_psql.CreateConfigurationRequest{}
func (s *PsqlConfigurationResourceCrud) Get() error {
	request := oci_psql.GetConfigurationRequest{}
func (s *PsqlConfigurationResourceCrud) Update() error {
	if compartment, ok := s.D.GetOkExists("compartment_id"); ok && s.D.HasChange("compartment_id") {
func (s *PsqlConfigurationResourceCrud) Delete() error {
	request := oci_psql.DeleteConfigurationRequest{}
func (s *PsqlConfigurationResourceCrud) SetData() error {
	if s.Res.CompartmentId != nil {
func (s *PsqlConfigurationResourceCrud) mapToConfigOverrides(fieldKeyFormat string) (oci_psql.ConfigOverrides, error) {
	result := oci_psql.ConfigOverrides{}
func (s *PsqlConfigurationResourceCrud) mapToDbConfigurationOverrideCollection(fieldKeyFormat string) (oci_psql.DbConfigurationOverrideCollection, error) {
	result := oci_psql.DbConfigurationOverrideCollection{}
func (s *PsqlConfigurationResourceCrud) updateCompartment(compartment interface{}) error {
	changeCompartmentRequest := oci_psql.ChangeConfigurationCompartmentRequest{}

=== ./internal/service/psql/psql_configuration_data_source.go ===
func PsqlConfigurationDataSource() *schema.Resource {
	fieldMap := make(map[string]*schema.Schema)
func readSingularPsqlConfiguration(d *schema.ResourceData, m interface{}) error {
	sync := &PsqlConfigurationDataSourceCrud{}
func (s *PsqlConfigurationDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *PsqlConfigurationDataSourceCrud) Get() error {
	request := oci_psql.GetConfigurationRequest{}
func (s *PsqlConfigurationDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/psql/psql_db_system_data_source.go ===
func PsqlDbSystemDataSource() *schema.Resource {
	fieldMap := make(map[string]*schema.Schema)
func readSingularPsqlDbSystem(d *schema.ResourceData, m interface{}) error {
	sync := &PsqlDbSystemDataSourceCrud{}
func (s *PsqlDbSystemDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *PsqlDbSystemDataSourceCrud) Get() error {
	request := oci_psql.GetDbSystemRequest{}
func (s *PsqlDbSystemDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/psql/psql_shapes_data_source.go ===
func PsqlShapesDataSource() *schema.Resource {
	return &schema.Resource{
func readPsqlShapes(d *schema.ResourceData, m interface{}) error {
	sync := &PsqlShapesDataSourceCrud{}
func (s *PsqlShapesDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *PsqlShapesDataSourceCrud) Get() error {
	request := oci_psql.ListShapesRequest{}
func (s *PsqlShapesDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/psql/psql_configurations_data_source.go ===
func PsqlConfigurationsDataSource() *schema.Resource {
	return &schema.Resource{
func readPsqlConfigurations(d *schema.ResourceData, m interface{}) error {
	sync := &PsqlConfigurationsDataSourceCrud{}
func (s *PsqlConfigurationsDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *PsqlConfigurationsDataSourceCrud) Get() error {
	request := oci_psql.ListConfigurationsRequest{}
func (s *PsqlConfigurationsDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/psql/psql_default_configurations_data_source.go ===
func PsqlDefaultConfigurationsDataSource() *schema.Resource {
	return &schema.Resource{
func readPsqlDefaultConfigurations(d *schema.ResourceData, m interface{}) error {
	sync := &PsqlDefaultConfigurationsDataSourceCrud{}
func (s *PsqlDefaultConfigurationsDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *PsqlDefaultConfigurationsDataSourceCrud) Get() error {
	request := oci_psql.ListDefaultConfigurationsRequest{}
func (s *PsqlDefaultConfigurationsDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/psql/psql_backup_resource.go ===
func PsqlBackupResource() *schema.Resource {
	return &schema.Resource{
func createPsqlBackup(d *schema.ResourceData, m interface{}) error {
	sync := &PsqlBackupResourceCrud{}
func readPsqlBackup(d *schema.ResourceData, m interface{}) error {
	sync := &PsqlBackupResourceCrud{}
func updatePsqlBackup(d *schema.ResourceData, m interface{}) error {
	sync := &PsqlBackupResourceCrud{}
func deletePsqlBackup(d *schema.ResourceData, m interface{}) error {
	sync := &PsqlBackupResourceCrud{}
func (s *PsqlBackupResourceCrud) ID() string {
	return *s.Res.Id
func (s *PsqlBackupResourceCrud) CreatedPending() []string {
	return []string{
func (s *PsqlBackupResourceCrud) CreatedTarget() []string {
	return []string{
func (s *PsqlBackupResourceCrud) DeletedPending() []string {
	return []string{
func (s *PsqlBackupResourceCrud) DeletedTarget() []string {
	return []string{
func (s *PsqlBackupResourceCrud) Create() error {
	request := oci_psql.CreateBackupRequest{}
func (s *PsqlBackupResourceCrud) getBackupFromWorkRequest(workId *string, retryPolicy *oci_common.RetryPolicy,
	actionTypeEnum oci_psql.ActionTypeEnum, timeout time.Duration) error {
func (s *PsqlBackupResourceCrud) Get() error {
	request := oci_psql.GetBackupRequest{}
func (s *PsqlBackupResourceCrud) Update() error {
	if compartment, ok := s.D.GetOkExists("compartment_id"); ok && s.D.HasChange("compartment_id") {
func (s *PsqlBackupResourceCrud) Delete() error {
	request := oci_psql.DeleteBackupRequest{}
func (s *PsqlBackupResourceCrud) SetData() error {
	if s.Res.BackupSize != nil {
func (s *PsqlBackupResourceCrud) updateCompartment(compartment interface{}) error {
	changeCompartmentRequest := oci_psql.ChangeBackupCompartmentRequest{}

=== ./internal/service/psql/psql_default_configuration_data_source.go ===
func PsqlDefaultConfigurationDataSource() *schema.Resource {
	return &schema.Resource{
func readSingularPsqlDefaultConfiguration(d *schema.ResourceData, m interface{}) error {
	sync := &PsqlDefaultConfigurationDataSourceCrud{}
func (s *PsqlDefaultConfigurationDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *PsqlDefaultConfigurationDataSourceCrud) Get() error {
	request := oci_psql.GetDefaultConfigurationRequest{}
func (s *PsqlDefaultConfigurationDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/psql/psql_backups_data_source.go ===
func PsqlBackupsDataSource() *schema.Resource {
	return &schema.Resource{
func readPsqlBackups(d *schema.ResourceData, m interface{}) error {
	sync := &PsqlBackupsDataSourceCrud{}
func (s *PsqlBackupsDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *PsqlBackupsDataSourceCrud) Get() error {
	request := oci_psql.ListBackupsRequest{}
func (s *PsqlBackupsDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/psql/psql_backup_data_source.go ===
func PsqlBackupDataSource() *schema.Resource {
	fieldMap := make(map[string]*schema.Schema)
func readSingularPsqlBackup(d *schema.ResourceData, m interface{}) error {
	sync := &PsqlBackupDataSourceCrud{}
func (s *PsqlBackupDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *PsqlBackupDataSourceCrud) Get() error {
	request := oci_psql.GetBackupRequest{}
func (s *PsqlBackupDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/psql/register_resource.go ===
func RegisterResource() {
	tfresource.RegisterResource("oci_psql_backup", PsqlBackupResource())

=== ./internal/service/psql/psql_db_systems_data_source.go ===
func PsqlDbSystemsDataSource() *schema.Resource {
	return &schema.Resource{
func readPsqlDbSystems(d *schema.ResourceData, m interface{}) error {
	sync := &PsqlDbSystemsDataSourceCrud{}
func (s *PsqlDbSystemsDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *PsqlDbSystemsDataSourceCrud) Get() error {
	request := oci_psql.ListDbSystemsRequest{}
func (s *PsqlDbSystemsDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/database_management/database_management_external_exadata_storage_server_data_source.go ===
func DatabaseManagementExternalExadataStorageServerDataSource() *schema.Resource {
	fieldMap := make(map[string]*schema.Schema)
func readSingularDatabaseManagementExternalExadataStorageServer(d *schema.ResourceData, m interface{}) error {
	sync := &DatabaseManagementExternalExadataStorageServerDataSourceCrud{}
func (s *DatabaseManagementExternalExadataStorageServerDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *DatabaseManagementExternalExadataStorageServerDataSourceCrud) Get() error {
	request := oci_database_management.GetExternalExadataStorageServerRequest{}
func (s *DatabaseManagementExternalExadataStorageServerDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/database_management/database_management_managed_databases_user_proxy_user_data_source.go ===
func DatabaseManagementManagedDatabasesUserProxyUserDataSource() *schema.Resource {
	return &schema.Resource{
func readSingularDatabaseManagementManagedDatabasesUserProxyUser(d *schema.ResourceData, m interface{}) error {
	sync := &DatabaseManagementManagedDatabasesUserProxyUserDataSourceCrud{}
func (s *DatabaseManagementManagedDatabasesUserProxyUserDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *DatabaseManagementManagedDatabasesUserProxyUserDataSourceCrud) Get() error {
	request := oci_database_management.ListProxyUsersRequest{}
func (s *DatabaseManagementManagedDatabasesUserProxyUserDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/database_management/database_management_external_exadata_storage_grid_data_source.go ===
func DatabaseManagementExternalExadataStorageGridDataSource() *schema.Resource {
	fieldMap := make(map[string]*schema.Schema)
func readSingularDatabaseManagementExternalExadataStorageGrid(d *schema.ResourceData, m interface{}) error {
	sync := &DatabaseManagementExternalExadataStorageGridDataSourceCrud{}
func (s *DatabaseManagementExternalExadataStorageGridDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *DatabaseManagementExternalExadataStorageGridDataSourceCrud) Get() error {
	request := oci_database_management.GetExternalExadataStorageGridRequest{}
func (s *DatabaseManagementExternalExadataStorageGridDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/database_management/database_management_external_exadata_storage_connectors_data_source.go ===
func DatabaseManagementExternalExadataStorageConnectorsDataSource() *schema.Resource {
	return &schema.Resource{
func readDatabaseManagementExternalExadataStorageConnectors(d *schema.ResourceData, m interface{}) error {
	sync := &DatabaseManagementExternalExadataStorageConnectorsDataSourceCrud{}
func (s *DatabaseManagementExternalExadataStorageConnectorsDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *DatabaseManagementExternalExadataStorageConnectorsDataSourceCrud) Get() error {
	request := oci_database_management.ListExternalExadataStorageConnectorsRequest{}
func (s *DatabaseManagementExternalExadataStorageConnectorsDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/database_management/database_management_external_cluster_instances_data_source.go ===
func DatabaseManagementExternalClusterInstancesDataSource() *schema.Resource {
	return &schema.Resource{
func readDatabaseManagementExternalClusterInstances(d *schema.ResourceData, m interface{}) error {
	sync := &DatabaseManagementExternalClusterInstancesDataSourceCrud{}
func (s *DatabaseManagementExternalClusterInstancesDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *DatabaseManagementExternalClusterInstancesDataSourceCrud) Get() error {
	request := oci_database_management.ListExternalClusterInstancesRequest{}
func (s *DatabaseManagementExternalClusterInstancesDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/database_management/database_management_external_db_system_resource.go ===
func DatabaseManagementExternalDbSystemResource() *schema.Resource {
	return &schema.Resource{
func createDatabaseManagementExternalDbSystem(d *schema.ResourceData, m interface{}) error {
	sync := &DatabaseManagementExternalDbSystemResourceCrud{}
func readDatabaseManagementExternalDbSystem(d *schema.ResourceData, m interface{}) error {
	sync := &DatabaseManagementExternalDbSystemResourceCrud{}
func updateDatabaseManagementExternalDbSystem(d *schema.ResourceData, m interface{}) error {
	sync := &DatabaseManagementExternalDbSystemResourceCrud{}
func deleteDatabaseManagementExternalDbSystem(d *schema.ResourceData, m interface{}) error {
	sync := &DatabaseManagementExternalDbSystemResourceCrud{}
func (s *DatabaseManagementExternalDbSystemResourceCrud) ID() string {
	return *s.Res.Id
func (s *DatabaseManagementExternalDbSystemResourceCrud) CreatedPending() []string {
	return []string{
func (s *DatabaseManagementExternalDbSystemResourceCrud) CreatedTarget() []string {
	return []string{
func (s *DatabaseManagementExternalDbSystemResourceCrud) DeletedPending() []string {
	return []string{
func (s *DatabaseManagementExternalDbSystemResourceCrud) DeletedTarget() []string {
	return []string{
func (s *DatabaseManagementExternalDbSystemResourceCrud) Create() error {
	request := oci_database_management.CreateExternalDbSystemRequest{}
func (s *DatabaseManagementExternalDbSystemResourceCrud) getExternalDbSystemFromWorkRequest(workId *string, retryPolicy *oci_common.RetryPolicy,
	actionTypeEnum oci_database_management.WorkRequestResourceActionTypeEnum, timeout time.Duration) error {
func externalDbSystemWaitForWorkRequest(wId *string, entityType string, action oci_database_management.WorkRequestResourceActionTypeEnum,
	timeout time.Duration, disableFoundRetries bool, client *oci_database_management.DbManagementClient) (*string, error) {
func getErrorFromDatabaseManagementExternalDbSystemWorkRequest(client *oci_database_management.DbManagementClient, workId *string, retryPolicy *oci_common.RetryPolicy, entityType string, action oci_database_management.WorkRequestResourceActionTypeEnum) error {
	response, err := client.ListWorkRequestErrors(context.Background(),
func (s *DatabaseManagementExternalDbSystemResourceCrud) Get() error {
	request := oci_database_management.GetExternalDbSystemRequest{}
func (s *DatabaseManagementExternalDbSystemResourceCrud) Update() error {
	if compartment, ok := s.D.GetOkExists("compartment_id"); ok && s.D.HasChange("compartment_id") {
func (s *DatabaseManagementExternalDbSystemResourceCrud) Delete() error {
	request := oci_database_management.DeleteExternalDbSystemRequest{}
func (s *DatabaseManagementExternalDbSystemResourceCrud) SetData() error {
	if s.Res.CompartmentId != nil {
func (s *DatabaseManagementExternalDbSystemResourceCrud) mapToAssociatedServiceDetails(fieldKeyFormat string) (oci_database_management.AssociatedServiceDetails, error) {
	result := oci_database_management.AssociatedServiceDetails{}
func (s *DatabaseManagementExternalDbSystemResourceCrud) mapToExternalDbSystemDatabaseManagementConfigDetails(fieldKeyFormat string) (oci_database_management.ExternalDbSystemDatabaseManagementConfigDetails, error) {
	result := oci_database_management.ExternalDbSystemDatabaseManagementConfigDetails{}
func (s *DatabaseManagementExternalDbSystemResourceCrud) updateCompartment(compartment interface{}) error {
	changeCompartmentRequest := oci_database_management.ChangeExternalDbSystemCompartmentRequest{}

=== ./internal/service/database_management/database_management_external_asm_users_data_source.go ===
func DatabaseManagementExternalAsmUsersDataSource() *schema.Resource {
	return &schema.Resource{
func readDatabaseManagementExternalAsmUsers(d *schema.ResourceData, m interface{}) error {
	sync := &DatabaseManagementExternalAsmUsersDataSourceCrud{}
func (s *DatabaseManagementExternalAsmUsersDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *DatabaseManagementExternalAsmUsersDataSourceCrud) Get() error {
	request := oci_database_management.ListExternalAsmUsersRequest{}
func (s *DatabaseManagementExternalAsmUsersDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/database_management/database_management_external_db_system_discovery_resource.go ===
func DatabaseManagementExternalDbSystemDiscoveryResource() *schema.Resource {
	return &schema.Resource{
func createDatabaseManagementExternalDbSystemDiscovery(d *schema.ResourceData, m interface{}) error {
	sync := &DatabaseManagementExternalDbSystemDiscoveryResourceCrud{}
func readDatabaseManagementExternalDbSystemDiscovery(d *schema.ResourceData, m interface{}) error {
	sync := &DatabaseManagementExternalDbSystemDiscoveryResourceCrud{}
func updateDatabaseManagementExternalDbSystemDiscovery(d *schema.ResourceData, m interface{}) error {
	sync := &DatabaseManagementExternalDbSystemDiscoveryResourceCrud{}
func deleteDatabaseManagementExternalDbSystemDiscovery(d *schema.ResourceData, m interface{}) error {
	sync := &DatabaseManagementExternalDbSystemDiscoveryResourceCrud{}
func (s *DatabaseManagementExternalDbSystemDiscoveryResourceCrud) ID() string {
	return *s.Res.Id
func (s *DatabaseManagementExternalDbSystemDiscoveryResourceCrud) CreatedPending() []string {
	return []string{
func (s *DatabaseManagementExternalDbSystemDiscoveryResourceCrud) CreatedTarget() []string {
	return []string{
func (s *DatabaseManagementExternalDbSystemDiscoveryResourceCrud) DeletedPending() []string {
	return []string{
func (s *DatabaseManagementExternalDbSystemDiscoveryResourceCrud) DeletedTarget() []string {
	return []string{
func (s *DatabaseManagementExternalDbSystemDiscoveryResourceCrud) Create() error {
	request := oci_database_management.CreateExternalDbSystemDiscoveryRequest{}
func (s *DatabaseManagementExternalDbSystemDiscoveryResourceCrud) Patch() error {
	request := oci_database_management.PatchExternalDbSystemDiscoveryRequest{}
func (s *DatabaseManagementExternalDbSystemDiscoveryResourceCrud) getExternalDbSystemDiscoveryFromWorkRequest(workId *string, retryPolicy *oci_common.RetryPolicy,
	actionTypeEnum oci_database_management.WorkRequestResourceActionTypeEnum, timeout time.Duration) error {
func externalDbSystemDiscoveryWaitForWorkRequest(wId *string, entityType string, action oci_database_management.WorkRequestResourceActionTypeEnum,
	timeout time.Duration, disableFoundRetries bool, client *oci_database_management.DbManagementClient) (*string, error) {
func getErrorFromDatabaseManagementExternalDbSystemDiscoveryWorkRequest(client *oci_database_management.DbManagementClient, workId *string, retryPolicy *oci_common.RetryPolicy, entityType string, action oci_database_management.WorkRequestResourceActionTypeEnum) error {
	response, err := client.ListWorkRequestErrors(context.Background(),
func (s *DatabaseManagementExternalDbSystemDiscoveryResourceCrud) Get() error {
	request := oci_database_management.GetExternalDbSystemDiscoveryRequest{}
func (s *DatabaseManagementExternalDbSystemDiscoveryResourceCrud) Update() error {
	request := oci_database_management.UpdateExternalDbSystemDiscoveryRequest{}
func (s *DatabaseManagementExternalDbSystemDiscoveryResourceCrud) Delete() error {
	request := oci_database_management.DeleteExternalDbSystemDiscoveryRequest{}
func (s *DatabaseManagementExternalDbSystemDiscoveryResourceCrud) SetData() error {
	if s.Res.AgentId != nil {
func (s *DatabaseManagementExternalDbSystemDiscoveryResourceCrud) mapToAsmConnectionCredentials(fieldKeyFormat string) (oci_database_management.AsmConnectionCredentials, error) {
	var baseObject oci_database_management.AsmConnectionCredentials
func (s *DatabaseManagementExternalDbSystemDiscoveryResourceCrud) mapToAsmConnectionString(fieldKeyFormat string) (oci_database_management.AsmConnectionString, error) {
	result := oci_database_management.AsmConnectionString{}
func (s *DatabaseManagementExternalDbSystemDiscoveryResourceCrud) mapToDatabaseConnectionCredentials(fieldKeyFormat string) (oci_database_management.DatabaseConnectionCredentials, error) {
	var baseObject oci_database_management.DatabaseConnectionCredentials
func (s *DatabaseManagementExternalDbSystemDiscoveryResourceCrud) mapToDatabaseConnectionString(fieldKeyFormat string) (oci_database_management.DatabaseConnectionString, error) {
	result := oci_database_management.DatabaseConnectionString{}
func (s *DatabaseManagementExternalDbSystemDiscoveryResourceCrud) mapToDatabaseCredentialDetails(fieldKeyFormat string) (oci_database_management.DatabaseCredentialDetails, error) {
	var baseObject oci_database_management.DatabaseCredentialDetails
func (s *DatabaseManagementExternalDbSystemDiscoveryResourceCrud) mapToDiscoveredExternalAsmInstance(fieldKeyFormat string) (oci_database_management.DiscoveredExternalAsmInstance, error) {
	result := oci_database_management.DiscoveredExternalAsmInstance{}
func (s *DatabaseManagementExternalDbSystemDiscoveryResourceCrud) mapToDiscoveredExternalClusterInstance(fieldKeyFormat string) (oci_database_management.DiscoveredExternalClusterInstance, error) {
	result := oci_database_management.DiscoveredExternalClusterInstance{}
func (s *DatabaseManagementExternalDbSystemDiscoveryResourceCrud) mapToDiscoveredExternalPluggableDatabase(fieldKeyFormat string) (oci_database_management.DiscoveredExternalPluggableDatabase, error) {
	result := oci_database_management.DiscoveredExternalPluggableDatabase{}
func (s *DatabaseManagementExternalDbSystemDiscoveryResourceCrud) mapToExternalClusterNetworkConfiguration(fieldKeyFormat string) (oci_database_management.ExternalClusterNetworkConfiguration, error) {
	result := oci_database_management.ExternalClusterNetworkConfiguration{}
func (s *DatabaseManagementExternalDbSystemDiscoveryResourceCrud) mapToExternalClusterScanListenerConfiguration(fieldKeyFormat string) (oci_database_management.ExternalClusterScanListenerConfiguration, error) {
	result := oci_database_management.ExternalClusterScanListenerConfiguration{}
func (s *DatabaseManagementExternalDbSystemDiscoveryResourceCrud) mapToExternalClusterVipConfiguration(fieldKeyFormat string) (oci_database_management.ExternalClusterVipConfiguration, error) {
	result := oci_database_management.ExternalClusterVipConfiguration{}
func (s *DatabaseManagementExternalDbSystemDiscoveryResourceCrud) mapToExternalDbSystemConnectionInfo(fieldKeyFormat string) (oci_database_management.ExternalDbSystemConnectionInfo, error) {
	var baseObject oci_database_management.ExternalDbSystemConnectionInfo
func (s *DatabaseManagementExternalDbSystemDiscoveryResourceCrud) mapToExternalDbSystemDiscoveryConnector(fieldKeyFormat string) (oci_database_management.ExternalDbSystemDiscoveryConnector, error) {
	var baseObject oci_database_management.ExternalDbSystemDiscoveryConnector
func (s *DatabaseManagementExternalDbSystemDiscoveryResourceCrud) mapToExternalListenerEndpoint(fieldKeyFormat string) (oci_database_management.ExternalListenerEndpoint, error) {
	var baseObject oci_database_management.ExternalListenerEndpoint
func (s *DatabaseManagementExternalDbSystemDiscoveryResourceCrud) mapToPatchInstruction(fieldKeyFormat string) (oci_database_management.PatchInstruction, error) {
	var baseObject oci_database_management.PatchInstruction
func (s *DatabaseManagementExternalDbSystemDiscoveryResourceCrud) mapToPatchMergeInstructionValue(fieldKeyFormat string) (*interface{}, error) {
	var result interface{}

=== ./internal/service/database_management/database_management_managed_database_optimizer_statistics_collection_operations_data_source.go ===
func DatabaseManagementManagedDatabaseOptimizerStatisticsCollectionOperationsDataSource() *schema.Resource {
	return &schema.Resource{
func readDatabaseManagementManagedDatabaseOptimizerStatisticsCollectionOperations(d *schema.ResourceData, m interface{}) error {
	sync := &DatabaseManagementManagedDatabaseOptimizerStatisticsCollectionOperationsDataSourceCrud{}
func (s *DatabaseManagementManagedDatabaseOptimizerStatisticsCollectionOperationsDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *DatabaseManagementManagedDatabaseOptimizerStatisticsCollectionOperationsDataSourceCrud) Get() error {
	request := oci_database_management.ListOptimizerStatisticsCollectionOperationsRequest{}
func (s *DatabaseManagementManagedDatabaseOptimizerStatisticsCollectionOperationsDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/database_management/database_management_external_asm_data_source.go ===
func DatabaseManagementExternalAsmDataSource() *schema.Resource {
	fieldMap := make(map[string]*schema.Schema)
func readSingularDatabaseManagementExternalAsm(d *schema.ResourceData, m interface{}) error {
	sync := &DatabaseManagementExternalAsmDataSourceCrud{}
func (s *DatabaseManagementExternalAsmDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *DatabaseManagementExternalAsmDataSourceCrud) Get() error {
	request := oci_database_management.GetExternalAsmRequest{}
func (s *DatabaseManagementExternalAsmDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/database_management/database_management_managed_database_sql_plan_baseline_jobs_data_source.go ===
func DatabaseManagementManagedDatabaseSqlPlanBaselineJobsDataSource() *schema.Resource {
	return &schema.Resource{
func readDatabaseManagementManagedDatabaseSqlPlanBaselineJobs(d *schema.ResourceData, m interface{}) error {
	sync := &DatabaseManagementManagedDatabaseSqlPlanBaselineJobsDataSourceCrud{}
func (s *DatabaseManagementManagedDatabaseSqlPlanBaselineJobsDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *DatabaseManagementManagedDatabaseSqlPlanBaselineJobsDataSourceCrud) Get() error {
	request := oci_database_management.ListSqlPlanBaselineJobsRequest{}
func (s *DatabaseManagementManagedDatabaseSqlPlanBaselineJobsDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/database_management/database_management_managed_database_user_data_source.go ===
func DatabaseManagementManagedDatabaseUserDataSource() *schema.Resource {
	return &schema.Resource{
func readSingularDatabaseManagementManagedDatabaseUser(d *schema.ResourceData, m interface{}) error {
	sync := &DatabaseManagementManagedDatabaseUserDataSourceCrud{}
func (s *DatabaseManagementManagedDatabaseUserDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *DatabaseManagementManagedDatabaseUserDataSourceCrud) Get() error {
	request := oci_database_management.GetUserRequest{}
func (s *DatabaseManagementManagedDatabaseUserDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/database_management/database_management_external_db_node_resource.go ===
func DatabaseManagementExternalDbNodeResource() *schema.Resource {
	return &schema.Resource{
func createDatabaseManagementExternalDbNode(d *schema.ResourceData, m interface{}) error {
	sync := &DatabaseManagementExternalDbNodeResourceCrud{}
func readDatabaseManagementExternalDbNode(d *schema.ResourceData, m interface{}) error {
	sync := &DatabaseManagementExternalDbNodeResourceCrud{}
func updateDatabaseManagementExternalDbNode(d *schema.ResourceData, m interface{}) error {
	sync := &DatabaseManagementExternalDbNodeResourceCrud{}
func deleteDatabaseManagementExternalDbNode(d *schema.ResourceData, m interface{}) error {
	return nil
func (s *DatabaseManagementExternalDbNodeResourceCrud) ID() string {
	return *s.Res.Id
func (s *DatabaseManagementExternalDbNodeResourceCrud) CreatedPending() []string {
	return []string{
func (s *DatabaseManagementExternalDbNodeResourceCrud) CreatedTarget() []string {
	return []string{
func (s *DatabaseManagementExternalDbNodeResourceCrud) DeletedPending() []string {
	return []string{
func (s *DatabaseManagementExternalDbNodeResourceCrud) DeletedTarget() []string {
	return []string{
func (s *DatabaseManagementExternalDbNodeResourceCrud) Create() error {
	request := oci_database_management.UpdateExternalDbNodeRequest{}
func (s *DatabaseManagementExternalDbNodeResourceCrud) getExternalDbNodeFromWorkRequest(workId *string, retryPolicy *oci_common.RetryPolicy,
	actionTypeEnum oci_database_management.WorkRequestResourceActionTypeEnum, timeout time.Duration) error {
func externalDbNodeWaitForWorkRequest(wId *string, entityType string, action oci_database_management.WorkRequestResourceActionTypeEnum,
	timeout time.Duration, disableFoundRetries bool, client *oci_database_management.DbManagementClient) (*string, error) {
func getErrorFromDatabaseManagementExternalDbNodeWorkRequest(client *oci_database_management.DbManagementClient, workId *string, retryPolicy *oci_common.RetryPolicy, entityType string, action oci_database_management.WorkRequestResourceActionTypeEnum) error {
	response, err := client.ListWorkRequestErrors(context.Background(),
func (s *DatabaseManagementExternalDbNodeResourceCrud) Get() error {
	request := oci_database_management.GetExternalDbNodeRequest{}
func (s *DatabaseManagementExternalDbNodeResourceCrud) Update() error {
	request := oci_database_management.UpdateExternalDbNodeRequest{}
func (s *DatabaseManagementExternalDbNodeResourceCrud) SetData() error {
	s.D.Set("additional_details", s.Res.AdditionalDetails)

=== ./internal/service/database_management/database_management_external_db_system_stack_monitorings_management_resource.go ===
func DatabaseManagementExternalDbSystemStackMonitoringsManagementResource() *schema.Resource {
	return &schema.Resource{
func createDatabaseManagementExternalDbSystemStackMonitoringsManagement(d *schema.ResourceData, m interface{}) error {
	sync := &DatabaseManagementExternalDbSystemStackMonitoringsManagementResourceCrud{}
func readDatabaseManagementExternalDbSystemStackMonitoringsManagement(d *schema.ResourceData, m interface{}) error {
	return nil
func updateDatabaseManagementExternalDbSystemStackMonitoringsManagement(d *schema.ResourceData, m interface{}) error {
	sync := &DatabaseManagementExternalDbSystemStackMonitoringsManagementResourceCrud{}
func deleteDatabaseManagementExternalDbSystemStackMonitoringsManagement(d *schema.ResourceData, m interface{}) error {
	sync := &DatabaseManagementExternalDbSystemStackMonitoringsManagementResourceCrud{}
func (s *DatabaseManagementExternalDbSystemStackMonitoringsManagementResourceCrud) ID() string {
	return tfresource.GenerateDataSourceHashID("DatabaseManagementExternalDbSystemStackMonitoringsManagementResource-", DatabaseManagementExternalDbSystemStackMonitoringsManagementResource(), s.D)
func (s *DatabaseManagementExternalDbSystemStackMonitoringsManagementResourceCrud) Create() error {
	var operation bool
func (s *DatabaseManagementExternalDbSystemStackMonitoringsManagementResourceCrud) getExternalDbSystemStackMonitoringsManagementFromWorkRequest(workId *string, retryPolicy *oci_common.RetryPolicy,
	actionTypeEnum oci_database_management.WorkRequestResourceActionTypeEnum, timeout time.Duration) error {
func externalDbSystemStackMonitoringsManagementWaitForWorkRequest(wId *string, entityType string, action oci_database_management.WorkRequestResourceActionTypeEnum,
	timeout time.Duration, disableFoundRetries bool, client *oci_database_management.DbManagementClient) (*string, error) {
func getErrorFromDatabaseManagementExternalDbSystemStackMonitoringsManagementWorkRequest(client *oci_database_management.DbManagementClient, workId *string, retryPolicy *oci_common.RetryPolicy, entityType string, action oci_database_management.WorkRequestResourceActionTypeEnum) error {
	response, err := client.ListWorkRequestErrors(context.Background(),
func (s *DatabaseManagementExternalDbSystemStackMonitoringsManagementResourceCrud) Update() error {
	var operation bool
func (s *DatabaseManagementExternalDbSystemStackMonitoringsManagementResourceCrud) Delete() error {
	var operation bool
func (s *DatabaseManagementExternalDbSystemStackMonitoringsManagementResourceCrud) SetData() error {
	return nil

=== ./internal/service/database_management/database_management_db_management_private_endpoint_data_source.go ===
func DatabaseManagementDbManagementPrivateEndpointDataSource() *schema.Resource {
	fieldMap := make(map[string]*schema.Schema)
func readSingularDatabaseManagementDbManagementPrivateEndpoint(d *schema.ResourceData, m interface{}) error {
	sync := &DatabaseManagementDbManagementPrivateEndpointDataSourceCrud{}
func (s *DatabaseManagementDbManagementPrivateEndpointDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *DatabaseManagementDbManagementPrivateEndpointDataSourceCrud) Get() error {
	request := oci_database_management.GetDbManagementPrivateEndpointRequest{}
func (s *DatabaseManagementDbManagementPrivateEndpointDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/database_management/database_management_external_exadata_infrastructure_resource.go ===
func DatabaseManagementExternalExadataInfrastructureResource() *schema.Resource {
	return &schema.Resource{
func createDatabaseManagementExternalExadataInfrastructure(d *schema.ResourceData, m interface{}) error {
	sync := &DatabaseManagementExternalExadataInfrastructureResourceCrud{}
func readDatabaseManagementExternalExadataInfrastructure(d *schema.ResourceData, m interface{}) error {
	sync := &DatabaseManagementExternalExadataInfrastructureResourceCrud{}
func updateDatabaseManagementExternalExadataInfrastructure(d *schema.ResourceData, m interface{}) error {
	sync := &DatabaseManagementExternalExadataInfrastructureResourceCrud{}
func deleteDatabaseManagementExternalExadataInfrastructure(d *schema.ResourceData, m interface{}) error {
	sync := &DatabaseManagementExternalExadataInfrastructureResourceCrud{}
func (s *DatabaseManagementExternalExadataInfrastructureResourceCrud) ID() string {
	return *s.Res.Id
func (s *DatabaseManagementExternalExadataInfrastructureResourceCrud) CreatedPending() []string {
	return []string{
func (s *DatabaseManagementExternalExadataInfrastructureResourceCrud) CreatedTarget() []string {
	return []string{
func (s *DatabaseManagementExternalExadataInfrastructureResourceCrud) DeletedPending() []string {
	return []string{
func (s *DatabaseManagementExternalExadataInfrastructureResourceCrud) DeletedTarget() []string {
	return []string{
func (s *DatabaseManagementExternalExadataInfrastructureResourceCrud) Create() error {
	request := oci_database_management.CreateExternalExadataInfrastructureRequest{}
func (s *DatabaseManagementExternalExadataInfrastructureResourceCrud) getExternalExadataInfrastructureFromWorkRequest(workId *string, retryPolicy *oci_common.RetryPolicy,
	actionTypeEnum oci_database_management.WorkRequestResourceActionTypeEnum, timeout time.Duration) error {
func externalExadataInfrastructureWaitForWorkRequest(wId *string, entityType string, action oci_database_management.WorkRequestResourceActionTypeEnum,
	timeout time.Duration, disableFoundRetries bool, client *oci_database_management.DbManagementClient) (*string, error) {
func getErrorFromDatabaseManagementExternalExadataInfrastructureWorkRequest(client *oci_database_management.DbManagementClient, workId *string, retryPolicy *oci_common.RetryPolicy, entityType string, action oci_database_management.WorkRequestResourceActionTypeEnum) error {
	response, err := client.ListWorkRequestErrors(context.Background(),
func (s *DatabaseManagementExternalExadataInfrastructureResourceCrud) Get() error {
	request := oci_database_management.GetExternalExadataInfrastructureRequest{}
func (s *DatabaseManagementExternalExadataInfrastructureResourceCrud) Update() error {
	if compartment, ok := s.D.GetOkExists("compartment_id"); ok && s.D.HasChange("compartment_id") {
func (s *DatabaseManagementExternalExadataInfrastructureResourceCrud) Delete() error {
	request := oci_database_management.DeleteExternalExadataInfrastructureRequest{}
func (s *DatabaseManagementExternalExadataInfrastructureResourceCrud) SetData() error {
	s.D.Set("additional_details", s.Res.AdditionalDetails)
func (s *DatabaseManagementExternalExadataInfrastructureResourceCrud) updateCompartment(compartment interface{}) error {
	changeCompartmentRequest := oci_database_management.ChangeExternalExadataInfrastructureCompartmentRequest{}

=== ./internal/service/database_management/database_management_pluggabledatabase_pluggable_database_dbm_features_management_resource.go ===
func DatabaseManagementPluggabledatabasePluggableDatabaseDbmFeaturesManagementResource() *schema.Resource {
	return &schema.Resource{
func createDatabaseManagementPluggabledatabasePluggableDatabaseDbmFeaturesManagement(d *schema.ResourceData, m interface{}) error {
	sync := &DatabaseManagementPluggabledatabasePluggableDatabaseDbmFeaturesManagementResourceCrud{}
func readDatabaseManagementPluggabledatabasePluggableDatabaseDbmFeaturesManagement(d *schema.ResourceData, m interface{}) error {
	return nil
func updateDatabaseManagementPluggabledatabasePluggableDatabaseDbmFeaturesManagement(d *schema.ResourceData, m interface{}) error {
	sync := &DatabaseManagementPluggabledatabasePluggableDatabaseDbmFeaturesManagementResourceCrud{}
func deleteDatabaseManagementPluggabledatabasePluggableDatabaseDbmFeaturesManagement(d *schema.ResourceData, m interface{}) error {
	sync := &DatabaseManagementPluggabledatabasePluggableDatabaseDbmFeaturesManagementResourceCrud{}
func (s *DatabaseManagementPluggabledatabasePluggableDatabaseDbmFeaturesManagementResourceCrud) ID() string {
	return tfresource.GenerateDataSourceHashID("DatabaseManagementPluggabledatabasePluggableDatabaseDbmFeaturesManagementResource-", DatabaseManagementPluggabledatabasePluggableDatabaseDbmFeaturesManagementResource(), s.D)
func (s *DatabaseManagementPluggabledatabasePluggableDatabaseDbmFeaturesManagementResourceCrud) Create() error {
	var operation bool
func (s *DatabaseManagementPluggabledatabasePluggableDatabaseDbmFeaturesManagementResourceCrud) getPluggabledatabasePluggableDatabaseDbmFeaturesManagementFromWorkRequest(workId *string, retryPolicy *oci_common.RetryPolicy,
	actionTypeEnum oci_database_management.WorkRequestResourceActionTypeEnum, timeout time.Duration) error {
func pluggabledatabasePluggableDatabaseDbmFeaturesManagementWaitForWorkRequest(wId *string, entityType string, action oci_database_management.WorkRequestResourceActionTypeEnum,
	timeout time.Duration, disableFoundRetries bool, client *oci_database_management.DbManagementClient) (*string, error) {
func getErrorFromDatabaseManagementPluggabledatabasePluggableDatabaseDbmFeaturesManagementWorkRequest(client *oci_database_management.DbManagementClient, workId *string, retryPolicy *oci_common.RetryPolicy, entityType string, action oci_database_management.WorkRequestResourceActionTypeEnum) error {
	response, err := client.ListWorkRequestErrors(context.Background(),
func (s *DatabaseManagementPluggabledatabasePluggableDatabaseDbmFeaturesManagementResourceCrud) Update() error {
	var operation bool
func (s *DatabaseManagementPluggabledatabasePluggableDatabaseDbmFeaturesManagementResourceCrud) Delete() error {
	var operation bool
func (s *DatabaseManagementPluggabledatabasePluggableDatabaseDbmFeaturesManagementResourceCrud) SetData() error {
	return nil
func (s *DatabaseManagementPluggabledatabasePluggableDatabaseDbmFeaturesManagementResourceCrud) mapToConnectorDetails(fieldKeyFormat string) (oci_database_management.ConnectorDetails, error) {
	var baseObject oci_database_management.ConnectorDetails
func (s *DatabaseManagementPluggabledatabasePluggableDatabaseDbmFeaturesManagementResourceCrud) mapToDatabaseConnectionCredentials(fieldKeyFormat string) (oci_database_management.DatabaseConnectionCredentials, error) {
	var baseObject oci_database_management.DatabaseConnectionCredentials
func (s *DatabaseManagementPluggabledatabasePluggableDatabaseDbmFeaturesManagementResourceCrud) mapToDatabaseConnectionDetails(fieldKeyFormat string) (oci_database_management.DatabaseConnectionDetails, error) {
	result := oci_database_management.DatabaseConnectionDetails{}
func (s *DatabaseManagementPluggabledatabasePluggableDatabaseDbmFeaturesManagementResourceCrud) mapToDatabaseConnectionStringDetails(fieldKeyFormat string) (oci_database_management.DatabaseConnectionStringDetails, error) {
	var baseObject oci_database_management.DatabaseConnectionStringDetails
func (s *DatabaseManagementPluggabledatabasePluggableDatabaseDbmFeaturesManagementResourceCrud) mapToDatabaseFeatureDetails(fieldKeyFormat string) (oci_database_management.DatabaseFeatureDetails, error) {
	var baseObject oci_database_management.DatabaseFeatureDetails
func enableCloudPDBFeature(s *DatabaseManagementPluggabledatabasePluggableDatabaseDbmFeaturesManagementResourceCrud) error {
	request := oci_database_management.EnablePluggableDatabaseManagementFeatureRequest{}
func disableCloudPDBFeature(s *DatabaseManagementPluggabledatabasePluggableDatabaseDbmFeaturesManagementResourceCrud) error {
	request := oci_database_management.DisablePluggableDatabaseManagementFeatureRequest{}
func modifyCloudPDBFeature(s *DatabaseManagementPluggabledatabasePluggableDatabaseDbmFeaturesManagementResourceCrud) error {
	request := oci_database_management.ModifyPluggableDatabaseManagementFeatureRequest{}

=== ./internal/service/database_management/database_management_managed_database_cursor_cache_statements_data_source.go ===
func DatabaseManagementManagedDatabaseCursorCacheStatementsDataSource() *schema.Resource {
	return &schema.Resource{
func readDatabaseManagementManagedDatabaseCursorCacheStatements(d *schema.ResourceData, m interface{}) error {
	sync := &DatabaseManagementManagedDatabaseCursorCacheStatementsDataSourceCrud{}
func (s *DatabaseManagementManagedDatabaseCursorCacheStatementsDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *DatabaseManagementManagedDatabaseCursorCacheStatementsDataSourceCrud) Get() error {
	request := oci_database_management.ListCursorCacheStatementsRequest{}
func (s *DatabaseManagementManagedDatabaseCursorCacheStatementsDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/database_management/database_management_managed_database_attention_log_counts_data_source.go ===
func DatabaseManagementManagedDatabaseAttentionLogCountsDataSource() *schema.Resource {
	return &schema.Resource{
func readDatabaseManagementManagedDatabaseAttentionLogCounts(d *schema.ResourceData, m interface{}) error {
	sync := &DatabaseManagementManagedDatabaseAttentionLogCountsDataSourceCrud{}
func (s *DatabaseManagementManagedDatabaseAttentionLogCountsDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *DatabaseManagementManagedDatabaseAttentionLogCountsDataSourceCrud) Get() error {
	request := oci_database_management.SummarizeAttentionLogCountsRequest{}
func (s *DatabaseManagementManagedDatabaseAttentionLogCountsDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/database_management/database_management_externalpluggabledatabase_external_pluggable_dbm_features_management_resource.go ===
func DatabaseManagementExternalpluggabledatabaseExternalPluggableDbmFeaturesManagementResource() *schema.Resource {
	return &schema.Resource{
func createDatabaseManagementExternalpluggabledatabaseExternalPluggableDbmFeaturesManagement(d *schema.ResourceData, m interface{}) error {
	sync := &DatabaseManagementExternalpluggabledatabaseExternalPluggableDbmFeaturesManagementResourceCrud{}
func readDatabaseManagementExternalpluggabledatabaseExternalPluggableDbmFeaturesManagement(d *schema.ResourceData, m interface{}) error {
	return nil
func updateDatabaseManagementExternalpluggabledatabaseExternalPluggableDbmFeaturesManagement(d *schema.ResourceData, m interface{}) error {
	sync := &DatabaseManagementExternalpluggabledatabaseExternalPluggableDbmFeaturesManagementResourceCrud{}
func deleteDatabaseManagementExternalpluggabledatabaseExternalPluggableDbmFeaturesManagement(d *schema.ResourceData, m interface{}) error {
	sync := &DatabaseManagementExternalpluggabledatabaseExternalPluggableDbmFeaturesManagementResourceCrud{}
func (s *DatabaseManagementExternalpluggabledatabaseExternalPluggableDbmFeaturesManagementResourceCrud) ID() string {
	return tfresource.GenerateDataSourceHashID("DatabaseManagementExternalpluggabledatabaseExternalPluggableDbmFeaturesManagementResource-", DatabaseManagementExternalpluggabledatabaseExternalPluggableDbmFeaturesManagementResource(), s.D)
func (s *DatabaseManagementExternalpluggabledatabaseExternalPluggableDbmFeaturesManagementResourceCrud) Create() error {
	var operation bool
func (s *DatabaseManagementExternalpluggabledatabaseExternalPluggableDbmFeaturesManagementResourceCrud) getExternalpluggabledatabaseExternalPluggableDbmFeaturesManagementFromWorkRequest(workId *string, retryPolicy *oci_common.RetryPolicy,
	actionTypeEnum oci_database_management.WorkRequestResourceActionTypeEnum, timeout time.Duration) error {
func externalpluggabledatabaseExternalPluggableDbmFeaturesManagementWaitForWorkRequest(wId *string, entityType string, action oci_database_management.WorkRequestResourceActionTypeEnum,
	timeout time.Duration, disableFoundRetries bool, client *oci_database_management.DbManagementClient) (*string, error) {
func getErrorFromDatabaseManagementExternalpluggabledatabaseExternalPluggableDbmFeaturesManagementWorkRequest(client *oci_database_management.DbManagementClient, workId *string, retryPolicy *oci_common.RetryPolicy, entityType string, action oci_database_management.WorkRequestResourceActionTypeEnum) error {
	response, err := client.ListWorkRequestErrors(context.Background(),
func (s *DatabaseManagementExternalpluggabledatabaseExternalPluggableDbmFeaturesManagementResourceCrud) Update() error {
	var operation bool
func (s *DatabaseManagementExternalpluggabledatabaseExternalPluggableDbmFeaturesManagementResourceCrud) Delete() error {
	var operation bool
func (s *DatabaseManagementExternalpluggabledatabaseExternalPluggableDbmFeaturesManagementResourceCrud) SetData() error {
	return nil
func (s *DatabaseManagementExternalpluggabledatabaseExternalPluggableDbmFeaturesManagementResourceCrud) mapToConnectorDetails(fieldKeyFormat string) (oci_database_management.ConnectorDetails, error) {
	var baseObject oci_database_management.ConnectorDetails
func (s *DatabaseManagementExternalpluggabledatabaseExternalPluggableDbmFeaturesManagementResourceCrud) mapToExternalPluggableDatabaseFeatureDetails(fieldKeyFormat string) (oci_database_management.ExternalPluggableDatabaseFeatureDetails, error) {
	var baseObject oci_database_management.ExternalPluggableDatabaseFeatureDetails

=== ./internal/service/database_management/database_management_managed_database_user_proxied_for_users_data_source.go ===
func DatabaseManagementManagedDatabaseUserProxiedForUsersDataSource() *schema.Resource {
	return &schema.Resource{
func readDatabaseManagementManagedDatabaseUserProxiedForUsers(d *schema.ResourceData, m interface{}) error {
	sync := &DatabaseManagementManagedDatabaseUserProxiedForUsersDataSourceCrud{}
func (s *DatabaseManagementManagedDatabaseUserProxiedForUsersDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *DatabaseManagementManagedDatabaseUserProxiedForUsersDataSourceCrud) Get() error {
	request := oci_database_management.ListProxiedForUsersRequest{}
func (s *DatabaseManagementManagedDatabaseUserProxiedForUsersDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/database_management/database_management_managed_my_sql_database_data_source.go ===
func DatabaseManagementManagedMySqlDatabaseDataSource() *schema.Resource {
	return &schema.Resource{
func readSingularDatabaseManagementManagedMySqlDatabase(d *schema.ResourceData, m interface{}) error {
	sync := &DatabaseManagementManagedMySqlDatabaseDataSourceCrud{}
func (s *DatabaseManagementManagedMySqlDatabaseDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *DatabaseManagementManagedMySqlDatabaseDataSourceCrud) Get() error {
	request := oci_database_management.GetManagedMySqlDatabaseRequest{}
func (s *DatabaseManagementManagedMySqlDatabaseDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/database_management/database_management_managed_my_sql_database_sql_data_data_source.go ===
func DatabaseManagementManagedMySqlDatabaseSqlDataDataSource() *schema.Resource {
	return &schema.Resource{
func readDatabaseManagementManagedMySqlDatabaseSqlData(d *schema.ResourceData, m interface{}) error {
	sync := &DatabaseManagementManagedMySqlDatabaseSqlDataDataSourceCrud{}
func (s *DatabaseManagementManagedMySqlDatabaseSqlDataDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *DatabaseManagementManagedMySqlDatabaseSqlDataDataSourceCrud) Get() error {
	request := oci_database_management.ListManagedMySqlDatabaseSqlDataRequest{}
func (s *DatabaseManagementManagedMySqlDatabaseSqlDataDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/database_management/database_management_external_db_system_data_source.go ===
func DatabaseManagementExternalDbSystemDataSource() *schema.Resource {
	fieldMap := make(map[string]*schema.Schema)
func readSingularDatabaseManagementExternalDbSystem(d *schema.ResourceData, m interface{}) error {
	sync := &DatabaseManagementExternalDbSystemDataSourceCrud{}
func (s *DatabaseManagementExternalDbSystemDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *DatabaseManagementExternalDbSystemDataSourceCrud) Get() error {
	request := oci_database_management.GetExternalDbSystemRequest{}
func (s *DatabaseManagementExternalDbSystemDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/database_management/database_management_managed_my_sql_database_configuration_data_data_source.go ===
func DatabaseManagementManagedMySqlDatabaseConfigurationDataDataSource() *schema.Resource {
	return &schema.Resource{
func readDatabaseManagementManagedMySqlDatabaseConfigurationData(d *schema.ResourceData, m interface{}) error {
	sync := &DatabaseManagementManagedMySqlDatabaseConfigurationDataDataSourceCrud{}
func (s *DatabaseManagementManagedMySqlDatabaseConfigurationDataDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *DatabaseManagementManagedMySqlDatabaseConfigurationDataDataSourceCrud) Get() error {
	request := oci_database_management.ListManagedMySqlDatabaseConfigurationDataRequest{}
func (s *DatabaseManagementManagedMySqlDatabaseConfigurationDataDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/database_management/database_management_managed_database_user_consumer_group_privileges_data_source.go ===
func DatabaseManagementManagedDatabaseUserConsumerGroupPrivilegesDataSource() *schema.Resource {
	return &schema.Resource{
func readDatabaseManagementManagedDatabaseUserConsumerGroupPrivileges(d *schema.ResourceData, m interface{}) error {
	sync := &DatabaseManagementManagedDatabaseUserConsumerGroupPrivilegesDataSourceCrud{}
func (s *DatabaseManagementManagedDatabaseUserConsumerGroupPrivilegesDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *DatabaseManagementManagedDatabaseUserConsumerGroupPrivilegesDataSourceCrud) Get() error {
	request := oci_database_management.ListConsumerGroupPrivilegesRequest{}
func (s *DatabaseManagementManagedDatabaseUserConsumerGroupPrivilegesDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/database_management/database_management_managed_database_users_data_source.go ===
func DatabaseManagementManagedDatabaseUsersDataSource() *schema.Resource {
	return &schema.Resource{
func readDatabaseManagementManagedDatabaseUsers(d *schema.ResourceData, m interface{}) error {
	sync := &DatabaseManagementManagedDatabaseUsersDataSourceCrud{}
func (s *DatabaseManagementManagedDatabaseUsersDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *DatabaseManagementManagedDatabaseUsersDataSourceCrud) Get() error {
	request := oci_database_management.ListUsersRequest{}
func (s *DatabaseManagementManagedDatabaseUsersDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/database_management/database_management_external_db_home_data_source.go ===
func DatabaseManagementExternalDbHomeDataSource() *schema.Resource {
	fieldMap := make(map[string]*schema.Schema)
func readSingularDatabaseManagementExternalDbHome(d *schema.ResourceData, m interface{}) error {
	sync := &DatabaseManagementExternalDbHomeDataSourceCrud{}
func (s *DatabaseManagementExternalDbHomeDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *DatabaseManagementExternalDbHomeDataSourceCrud) Get() error {
	request := oci_database_management.GetExternalDbHomeRequest{}
func (s *DatabaseManagementExternalDbHomeDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/database_management/database_management_job_executions_status_data_source.go ===
func DatabaseManagementJobExecutionsStatusDataSource() *schema.Resource {
	return &schema.Resource{
func readSingularDatabaseManagementJobExecutionsStatus(d *schema.ResourceData, m interface{}) error {
	sync := &DatabaseManagementJobExecutionsStatusDataSourceCrud{}
func (s *DatabaseManagementJobExecutionsStatusDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *DatabaseManagementJobExecutionsStatusDataSourceCrud) Get() error {
	request := oci_database_management.SummarizeJobExecutionsStatusesRequest{}
func (s *DatabaseManagementJobExecutionsStatusDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/database_management/database_management_external_exadata_storage_server_resource.go ===
func DatabaseManagementExternalExadataStorageServerResource() *schema.Resource {
	return &schema.Resource{
func createDatabaseManagementExternalExadataStorageServer(d *schema.ResourceData, m interface{}) error {
	sync := &DatabaseManagementExternalExadataStorageServerResourceCrud{}
func readDatabaseManagementExternalExadataStorageServer(d *schema.ResourceData, m interface{}) error {
	sync := &DatabaseManagementExternalExadataStorageServerResourceCrud{}
func updateDatabaseManagementExternalExadataStorageServer(d *schema.ResourceData, m interface{}) error {
	sync := &DatabaseManagementExternalExadataStorageServerResourceCrud{}
func deleteDatabaseManagementExternalExadataStorageServer(d *schema.ResourceData, m interface{}) error {
	return nil
func (s *DatabaseManagementExternalExadataStorageServerResourceCrud) ID() string {
	return *s.Res.Id
func (s *DatabaseManagementExternalExadataStorageServerResourceCrud) CreatedPending() []string {
	return []string{
func (s *DatabaseManagementExternalExadataStorageServerResourceCrud) CreatedTarget() []string {
	return []string{
func (s *DatabaseManagementExternalExadataStorageServerResourceCrud) DeletedPending() []string {
	return []string{
func (s *DatabaseManagementExternalExadataStorageServerResourceCrud) DeletedTarget() []string {
	return []string{
func (s *DatabaseManagementExternalExadataStorageServerResourceCrud) Create() error {
	request := oci_database_management.UpdateExternalExadataStorageServerRequest{}
func (s *DatabaseManagementExternalExadataStorageServerResourceCrud) Get() error {
	request := oci_database_management.GetExternalExadataStorageServerRequest{}
func (s *DatabaseManagementExternalExadataStorageServerResourceCrud) Update() error {
	request := oci_database_management.UpdateExternalExadataStorageServerRequest{}
func (s *DatabaseManagementExternalExadataStorageServerResourceCrud) SetData() error {
	s.D.Set("additional_details", s.Res.AdditionalDetails)

=== ./internal/service/database_management/database_management_external_db_system_discovery_data_source.go ===
func DatabaseManagementExternalDbSystemDiscoveryDataSource() *schema.Resource {
	fieldMap := make(map[string]*schema.Schema)
func readSingularDatabaseManagementExternalDbSystemDiscovery(d *schema.ResourceData, m interface{}) error {
	sync := &DatabaseManagementExternalDbSystemDiscoveryDataSourceCrud{}
func (s *DatabaseManagementExternalDbSystemDiscoveryDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *DatabaseManagementExternalDbSystemDiscoveryDataSourceCrud) Get() error {
	request := oci_database_management.GetExternalDbSystemDiscoveryRequest{}
func (s *DatabaseManagementExternalDbSystemDiscoveryDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/database_management/database_management_external_db_system_discoveries_data_source.go ===
func DatabaseManagementExternalDbSystemDiscoveriesDataSource() *schema.Resource {
	return &schema.Resource{
func readDatabaseManagementExternalDbSystemDiscoveries(d *schema.ResourceData, m interface{}) error {
	sync := &DatabaseManagementExternalDbSystemDiscoveriesDataSourceCrud{}
func (s *DatabaseManagementExternalDbSystemDiscoveriesDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *DatabaseManagementExternalDbSystemDiscoveriesDataSourceCrud) Get() error {
	request := oci_database_management.ListExternalDbSystemDiscoveriesRequest{}
func (s *DatabaseManagementExternalDbSystemDiscoveriesDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/database_management/database_management_managed_database_data_source.go ===
func DatabaseManagementManagedDatabaseDataSource() *schema.Resource {
	return &schema.Resource{
func readSingularDatabaseManagementManagedDatabase(d *schema.ResourceData, m interface{}) error {
	sync := &DatabaseManagementManagedDatabaseDataSourceCrud{}
func (s *DatabaseManagementManagedDatabaseDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *DatabaseManagementManagedDatabaseDataSourceCrud) Get() error {
	request := oci_database_management.GetManagedDatabaseRequest{}
func (s *DatabaseManagementManagedDatabaseDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/database_management/database_management_external_cluster_instance_data_source.go ===
func DatabaseManagementExternalClusterInstanceDataSource() *schema.Resource {
	fieldMap := make(map[string]*schema.Schema)
func readSingularDatabaseManagementExternalClusterInstance(d *schema.ResourceData, m interface{}) error {
	sync := &DatabaseManagementExternalClusterInstanceDataSourceCrud{}
func (s *DatabaseManagementExternalClusterInstanceDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *DatabaseManagementExternalClusterInstanceDataSourceCrud) Get() error {
	request := oci_database_management.GetExternalClusterInstanceRequest{}
func (s *DatabaseManagementExternalClusterInstanceDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/database_management/database_management_managed_database_sql_tuning_advisor_tasks_data_source.go ===
func DatabaseManagementManagedDatabaseSqlTuningAdvisorTasksDataSource() *schema.Resource {
	return &schema.Resource{
func readDatabaseManagementManagedDatabaseSqlTuningAdvisorTasks(d *schema.ResourceData, m interface{}) error {
	sync := &DatabaseManagementManagedDatabaseSqlTuningAdvisorTasksDataSourceCrud{}
func (s *DatabaseManagementManagedDatabaseSqlTuningAdvisorTasksDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *DatabaseManagementManagedDatabaseSqlTuningAdvisorTasksDataSourceCrud) Get() error {
	request := oci_database_management.ListSqlTuningAdvisorTasksRequest{}
func (s *DatabaseManagementManagedDatabaseSqlTuningAdvisorTasksDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/database_management/database_management_managed_database_group_data_source.go ===
func DatabaseManagementManagedDatabaseGroupDataSource() *schema.Resource {
	fieldMap := make(map[string]*schema.Schema)
func readSingularDatabaseManagementManagedDatabaseGroup(d *schema.ResourceData, m interface{}) error {
	sync := &DatabaseManagementManagedDatabaseGroupDataSourceCrud{}
func (s *DatabaseManagementManagedDatabaseGroupDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *DatabaseManagementManagedDatabaseGroupDataSourceCrud) Get() error {
	request := oci_database_management.GetManagedDatabaseGroupRequest{}
func (s *DatabaseManagementManagedDatabaseGroupDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/database_management/database_management_external_listeners_data_source.go ===
func DatabaseManagementExternalListenersDataSource() *schema.Resource {
	return &schema.Resource{
func readDatabaseManagementExternalListeners(d *schema.ResourceData, m interface{}) error {
	sync := &DatabaseManagementExternalListenersDataSourceCrud{}
func (s *DatabaseManagementExternalListenersDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *DatabaseManagementExternalListenersDataSourceCrud) Get() error {
	request := oci_database_management.ListExternalListenersRequest{}
func (s *DatabaseManagementExternalListenersDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/database_management/database_management_managed_database_sql_tuning_advisor_task_data_source.go ===
func DatabaseManagementManagedDatabaseSqlTuningAdvisorTaskDataSource() *schema.Resource {
	return &schema.Resource{
func readSingularDatabaseManagementManagedDatabaseSqlTuningAdvisorTask(d *schema.ResourceData, m interface{}) error {
	sync := &DatabaseManagementManagedDatabaseSqlTuningAdvisorTaskDataSourceCrud{}
func (s *DatabaseManagementManagedDatabaseSqlTuningAdvisorTaskDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *DatabaseManagementManagedDatabaseSqlTuningAdvisorTaskDataSourceCrud) Get() error {
	request := oci_database_management.ListSqlTuningAdvisorTasksRequest{}
func (s *DatabaseManagementManagedDatabaseSqlTuningAdvisorTaskDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/database_management/database_management_managed_databases_user_system_privilege_data_source.go ===
func DatabaseManagementManagedDatabasesUserSystemPrivilegeDataSource() *schema.Resource {
	return &schema.Resource{
func readSingularDatabaseManagementManagedDatabasesUserSystemPrivilege(d *schema.ResourceData, m interface{}) error {
	sync := &DatabaseManagementManagedDatabasesUserSystemPrivilegeDataSourceCrud{}
func (s *DatabaseManagementManagedDatabasesUserSystemPrivilegeDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *DatabaseManagementManagedDatabasesUserSystemPrivilegeDataSourceCrud) Get() error {
	request := oci_database_management.ListSystemPrivilegesRequest{}
func (s *DatabaseManagementManagedDatabasesUserSystemPrivilegeDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/database_management/database_management_db_management_private_endpoint_resource.go ===
func DatabaseManagementDbManagementPrivateEndpointResource() *schema.Resource {
	return &schema.Resource{
func createDatabaseManagementDbManagementPrivateEndpoint(d *schema.ResourceData, m interface{}) error {
	sync := &DatabaseManagementDbManagementPrivateEndpointResourceCrud{}
func readDatabaseManagementDbManagementPrivateEndpoint(d *schema.ResourceData, m interface{}) error {
	sync := &DatabaseManagementDbManagementPrivateEndpointResourceCrud{}
func updateDatabaseManagementDbManagementPrivateEndpoint(d *schema.ResourceData, m interface{}) error {
	sync := &DatabaseManagementDbManagementPrivateEndpointResourceCrud{}
func deleteDatabaseManagementDbManagementPrivateEndpoint(d *schema.ResourceData, m interface{}) error {
	sync := &DatabaseManagementDbManagementPrivateEndpointResourceCrud{}
func (s *DatabaseManagementDbManagementPrivateEndpointResourceCrud) ID() string {
	return *s.Res.Id
func (s *DatabaseManagementDbManagementPrivateEndpointResourceCrud) CreatedPending() []string {
	return []string{
func (s *DatabaseManagementDbManagementPrivateEndpointResourceCrud) CreatedTarget() []string {
	return []string{
func (s *DatabaseManagementDbManagementPrivateEndpointResourceCrud) DeletedPending() []string {
	return []string{
func (s *DatabaseManagementDbManagementPrivateEndpointResourceCrud) DeletedTarget() []string {
	return []string{
func (s *DatabaseManagementDbManagementPrivateEndpointResourceCrud) Create() error {
	request := oci_database_management.CreateDbManagementPrivateEndpointRequest{}
func (s *DatabaseManagementDbManagementPrivateEndpointResourceCrud) getDbManagementPrivateEndpointFromWorkRequest(workId *string, retryPolicy *oci_common.RetryPolicy,
	actionTypeEnum oci_database_management.WorkRequestResourceActionTypeEnum, timeout time.Duration) error {
func dbManagementPrivateEndpointWaitForWorkRequest(wId *string, entityType string, action oci_database_management.WorkRequestResourceActionTypeEnum,
	timeout time.Duration, disableFoundRetries bool, client *oci_database_management.DbManagementClient) (*string, error) {
func getErrorFromDatabaseManagementDbManagementPrivateEndpointWorkRequest(client *oci_database_management.DbManagementClient, workId *string, retryPolicy *oci_common.RetryPolicy, entityType string, action oci_database_management.WorkRequestResourceActionTypeEnum) error {
	response, err := client.ListWorkRequestErrors(context.Background(),
func (s *DatabaseManagementDbManagementPrivateEndpointResourceCrud) Get() error {
	request := oci_database_management.GetDbManagementPrivateEndpointRequest{}
func (s *DatabaseManagementDbManagementPrivateEndpointResourceCrud) Update() error {
	if compartment, ok := s.D.GetOkExists("compartment_id"); ok && s.D.HasChange("compartment_id") {
func (s *DatabaseManagementDbManagementPrivateEndpointResourceCrud) Delete() error {
	request := oci_database_management.DeleteDbManagementPrivateEndpointRequest{}
func (s *DatabaseManagementDbManagementPrivateEndpointResourceCrud) SetData() error {
	if s.Res.CompartmentId != nil {
func (s *DatabaseManagementDbManagementPrivateEndpointResourceCrud) updateCompartment(compartment interface{}) error {
	changeCompartmentRequest := oci_database_management.ChangeDbManagementPrivateEndpointCompartmentRequest{}

=== ./internal/service/database_management/database_management_managed_database_sql_tuning_advisor_tasks_execution_plan_stats_comparision_data_source.go ===
func DatabaseManagementManagedDatabaseSqlTuningAdvisorTasksExecutionPlanStatsComparisionDataSource() *schema.Resource {
	return &schema.Resource{
func readSingularDatabaseManagementManagedDatabaseSqlTuningAdvisorTasksExecutionPlanStatsComparision(d *schema.ResourceData, m interface{}) error {
	sync := &DatabaseManagementManagedDatabaseSqlTuningAdvisorTasksExecutionPlanStatsComparisionDataSourceCrud{}
func (s *DatabaseManagementManagedDatabaseSqlTuningAdvisorTasksExecutionPlanStatsComparisionDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *DatabaseManagementManagedDatabaseSqlTuningAdvisorTasksExecutionPlanStatsComparisionDataSourceCrud) Get() error {
	request := oci_database_management.GetExecutionPlanStatsComparisionRequest{}
func (s *DatabaseManagementManagedDatabaseSqlTuningAdvisorTasksExecutionPlanStatsComparisionDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/database_management/database_management_managed_databases_database_parameters_data_source.go ===
func DatabaseManagementManagedDatabasesDatabaseParametersDataSource() *schema.Resource {
	return &schema.Resource{
func readDatabaseManagementManagedDatabasesDatabaseParameters(d *schema.ResourceData, m interface{}) error {
	sync := &DatabaseManagementManagedDatabasesDatabaseParametersDataSourceCrud{}
func (s *DatabaseManagementManagedDatabasesDatabaseParametersDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *DatabaseManagementManagedDatabasesDatabaseParametersDataSourceCrud) Get() error {
	request := oci_database_management.ListDatabaseParametersRequest{}
func (s *DatabaseManagementManagedDatabasesDatabaseParametersDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/database_management/database_management_managed_database_preferred_credentials_data_source.go ===
func DatabaseManagementManagedDatabasePreferredCredentialsDataSource() *schema.Resource {
	return &schema.Resource{
func readDatabaseManagementManagedDatabasePreferredCredentials(d *schema.ResourceData, m interface{}) error {
	sync := &DatabaseManagementManagedDatabasePreferredCredentialsDataSourceCrud{}
func (s *DatabaseManagementManagedDatabasePreferredCredentialsDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *DatabaseManagementManagedDatabasePreferredCredentialsDataSourceCrud) Get() error {
	request := oci_database_management.ListPreferredCredentialsRequest{}
func (s *DatabaseManagementManagedDatabasePreferredCredentialsDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/database_management/database_management_managed_database_user_role_data_source.go ===
func DatabaseManagementManagedDatabaseUserRoleDataSource() *schema.Resource {
	return &schema.Resource{
func readSingularDatabaseManagementManagedDatabaseUserRole(d *schema.ResourceData, m interface{}) error {
	sync := &DatabaseManagementManagedDatabaseUserRoleDataSourceCrud{}
func (s *DatabaseManagementManagedDatabaseUserRoleDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *DatabaseManagementManagedDatabaseUserRoleDataSourceCrud) Get() error {
	request := oci_database_management.ListRolesRequest{}
func (s *DatabaseManagementManagedDatabaseUserRoleDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/database_management/database_management_managed_database_user_proxied_for_user_data_source.go ===
func DatabaseManagementManagedDatabaseUserProxiedForUserDataSource() *schema.Resource {
	return &schema.Resource{
func readSingularDatabaseManagementManagedDatabaseUserProxiedForUser(d *schema.ResourceData, m interface{}) error {
	sync := &DatabaseManagementManagedDatabaseUserProxiedForUserDataSourceCrud{}
func (s *DatabaseManagementManagedDatabaseUserProxiedForUserDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *DatabaseManagementManagedDatabaseUserProxiedForUserDataSourceCrud) Get() error {
	request := oci_database_management.ListProxiedForUsersRequest{}
func (s *DatabaseManagementManagedDatabaseUserProxiedForUserDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/database_management/database_management_managed_database_sql_tuning_advisor_tasks_findings_data_source.go ===
func DatabaseManagementManagedDatabaseSqlTuningAdvisorTasksFindingsDataSource() *schema.Resource {
	return &schema.Resource{
func readDatabaseManagementManagedDatabaseSqlTuningAdvisorTasksFindings(d *schema.ResourceData, m interface{}) error {
	sync := &DatabaseManagementManagedDatabaseSqlTuningAdvisorTasksFindingsDataSourceCrud{}
func (s *DatabaseManagementManagedDatabaseSqlTuningAdvisorTasksFindingsDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *DatabaseManagementManagedDatabaseSqlTuningAdvisorTasksFindingsDataSourceCrud) Get() error {
	request := oci_database_management.ListSqlTuningAdvisorTaskFindingsRequest{}
func (s *DatabaseManagementManagedDatabaseSqlTuningAdvisorTasksFindingsDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/database_management/database_management_managed_database_sql_plan_baseline_data_source.go ===
func DatabaseManagementManagedDatabaseSqlPlanBaselineDataSource() *schema.Resource {
	return &schema.Resource{
func readSingularDatabaseManagementManagedDatabaseSqlPlanBaseline(d *schema.ResourceData, m interface{}) error {
	sync := &DatabaseManagementManagedDatabaseSqlPlanBaselineDataSourceCrud{}
func (s *DatabaseManagementManagedDatabaseSqlPlanBaselineDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *DatabaseManagementManagedDatabaseSqlPlanBaselineDataSourceCrud) Get() error {
	request := oci_database_management.GetSqlPlanBaselineRequest{}
func (s *DatabaseManagementManagedDatabaseSqlPlanBaselineDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/database_management/database_management_named_credential_resource.go ===
func DatabaseManagementNamedCredentialResource() *schema.Resource {
	return &schema.Resource{
func createDatabaseManagementNamedCredential(d *schema.ResourceData, m interface{}) error {
	sync := &DatabaseManagementNamedCredentialResourceCrud{}
func readDatabaseManagementNamedCredential(d *schema.ResourceData, m interface{}) error {
	sync := &DatabaseManagementNamedCredentialResourceCrud{}
func updateDatabaseManagementNamedCredential(d *schema.ResourceData, m interface{}) error {
	sync := &DatabaseManagementNamedCredentialResourceCrud{}
func deleteDatabaseManagementNamedCredential(d *schema.ResourceData, m interface{}) error {
	sync := &DatabaseManagementNamedCredentialResourceCrud{}
func (s *DatabaseManagementNamedCredentialResourceCrud) ID() string {
	return *s.Res.Id
func (s *DatabaseManagementNamedCredentialResourceCrud) CreatedPending() []string {
	return []string{
func (s *DatabaseManagementNamedCredentialResourceCrud) CreatedTarget() []string {
	return []string{
func (s *DatabaseManagementNamedCredentialResourceCrud) DeletedPending() []string {
	return []string{
func (s *DatabaseManagementNamedCredentialResourceCrud) DeletedTarget() []string {
	return []string{
func (s *DatabaseManagementNamedCredentialResourceCrud) Create() error {
	request := oci_database_management.CreateNamedCredentialRequest{}
func (s *DatabaseManagementNamedCredentialResourceCrud) Get() error {
	request := oci_database_management.GetNamedCredentialRequest{}
func (s *DatabaseManagementNamedCredentialResourceCrud) Update() error {
	if compartment, ok := s.D.GetOkExists("compartment_id"); ok && s.D.HasChange("compartment_id") {
func (s *DatabaseManagementNamedCredentialResourceCrud) Delete() error {
	request := oci_database_management.DeleteNamedCredentialRequest{}
func (s *DatabaseManagementNamedCredentialResourceCrud) SetData() error {
	if s.Res.AssociatedResource != nil {
func (s *DatabaseManagementNamedCredentialResourceCrud) mapToNamedCredentialContent(fieldKeyFormat string) (oci_database_management.NamedCredentialContent, error) {
	var baseObject oci_database_management.NamedCredentialContent
func (s *DatabaseManagementNamedCredentialResourceCrud) updateCompartment(compartment interface{}) error {
	changeCompartmentRequest := oci_database_management.ChangeNamedCredentialCompartmentRequest{}

=== ./internal/service/database_management/database_management_external_asm_disk_groups_data_source.go ===
func DatabaseManagementExternalAsmDiskGroupsDataSource() *schema.Resource {
	return &schema.Resource{
func readDatabaseManagementExternalAsmDiskGroups(d *schema.ResourceData, m interface{}) error {
	sync := &DatabaseManagementExternalAsmDiskGroupsDataSourceCrud{}
func (s *DatabaseManagementExternalAsmDiskGroupsDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *DatabaseManagementExternalAsmDiskGroupsDataSourceCrud) Get() error {
	request := oci_database_management.ListExternalAsmDiskGroupsRequest{}
func (s *DatabaseManagementExternalAsmDiskGroupsDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/database_management/database_management_managed_database_user_data_access_containers_data_source.go ===
func DatabaseManagementManagedDatabaseUserDataAccessContainersDataSource() *schema.Resource {
	return &schema.Resource{
func readDatabaseManagementManagedDatabaseUserDataAccessContainers(d *schema.ResourceData, m interface{}) error {
	sync := &DatabaseManagementManagedDatabaseUserDataAccessContainersDataSourceCrud{}
func (s *DatabaseManagementManagedDatabaseUserDataAccessContainersDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *DatabaseManagementManagedDatabaseUserDataAccessContainersDataSourceCrud) Get() error {
	request := oci_database_management.ListDataAccessContainersRequest{}
func (s *DatabaseManagementManagedDatabaseUserDataAccessContainersDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/database_management/database_management_external_listener_resource.go ===
func DatabaseManagementExternalListenerResource() *schema.Resource {
	return &schema.Resource{
func createDatabaseManagementExternalListener(d *schema.ResourceData, m interface{}) error {
	sync := &DatabaseManagementExternalListenerResourceCrud{}
func readDatabaseManagementExternalListener(d *schema.ResourceData, m interface{}) error {
	sync := &DatabaseManagementExternalListenerResourceCrud{}
func updateDatabaseManagementExternalListener(d *schema.ResourceData, m interface{}) error {
	sync := &DatabaseManagementExternalListenerResourceCrud{}
func deleteDatabaseManagementExternalListener(d *schema.ResourceData, m interface{}) error {
	return nil
func (s *DatabaseManagementExternalListenerResourceCrud) ID() string {
	return *s.Res.Id
func (s *DatabaseManagementExternalListenerResourceCrud) CreatedPending() []string {
	return []string{
func (s *DatabaseManagementExternalListenerResourceCrud) CreatedTarget() []string {
	return []string{
func (s *DatabaseManagementExternalListenerResourceCrud) DeletedPending() []string {
	return []string{
func (s *DatabaseManagementExternalListenerResourceCrud) DeletedTarget() []string {
	return []string{
func (s *DatabaseManagementExternalListenerResourceCrud) Create() error {
	request := oci_database_management.UpdateExternalListenerRequest{}
func (s *DatabaseManagementExternalListenerResourceCrud) getExternalListenerFromWorkRequest(workId *string, retryPolicy *oci_common.RetryPolicy,
	actionTypeEnum oci_database_management.WorkRequestResourceActionTypeEnum, timeout time.Duration) error {
func externalListenerWaitForWorkRequest(wId *string, entityType string, action oci_database_management.WorkRequestResourceActionTypeEnum,
	timeout time.Duration, disableFoundRetries bool, client *oci_database_management.DbManagementClient) (*string, error) {
func getErrorFromDatabaseManagementExternalListenerWorkRequest(client *oci_database_management.DbManagementClient, workId *string, retryPolicy *oci_common.RetryPolicy, entityType string, action oci_database_management.WorkRequestResourceActionTypeEnum) error {
	response, err := client.ListWorkRequestErrors(context.Background(),
func (s *DatabaseManagementExternalListenerResourceCrud) Get() error {
	request := oci_database_management.GetExternalListenerRequest{}
func (s *DatabaseManagementExternalListenerResourceCrud) Update() error {
	request := oci_database_management.UpdateExternalListenerRequest{}
func (s *DatabaseManagementExternalListenerResourceCrud) SetData() error {
	s.D.Set("additional_details", s.Res.AdditionalDetails)

=== ./internal/service/database_management/database_management_managed_database_optimizer_statistics_collection_operation_data_source.go ===
func DatabaseManagementManagedDatabaseOptimizerStatisticsCollectionOperationDataSource() *schema.Resource {
	return &schema.Resource{
func readSingularDatabaseManagementManagedDatabaseOptimizerStatisticsCollectionOperation(d *schema.ResourceData, m interface{}) error {
	sync := &DatabaseManagementManagedDatabaseOptimizerStatisticsCollectionOperationDataSourceCrud{}
func (s *DatabaseManagementManagedDatabaseOptimizerStatisticsCollectionOperationDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *DatabaseManagementManagedDatabaseOptimizerStatisticsCollectionOperationDataSourceCrud) Get() error {
	request := oci_database_management.GetOptimizerStatisticsCollectionOperationRequest{}
func (s *DatabaseManagementManagedDatabaseOptimizerStatisticsCollectionOperationDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/database_management/database_management_named_credential_data_source.go ===
func DatabaseManagementNamedCredentialDataSource() *schema.Resource {
	fieldMap := make(map[string]*schema.Schema)
func readSingularDatabaseManagementNamedCredential(d *schema.ResourceData, m interface{}) error {
	sync := &DatabaseManagementNamedCredentialDataSourceCrud{}
func (s *DatabaseManagementNamedCredentialDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *DatabaseManagementNamedCredentialDataSourceCrud) Get() error {
	request := oci_database_management.GetNamedCredentialRequest{}
func (s *DatabaseManagementNamedCredentialDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/database_management/database_management_managed_database_sql_tuning_advisor_tasks_recommendations_data_source.go ===
func DatabaseManagementManagedDatabaseSqlTuningAdvisorTasksRecommendationsDataSource() *schema.Resource {
	return &schema.Resource{
func readDatabaseManagementManagedDatabaseSqlTuningAdvisorTasksRecommendations(d *schema.ResourceData, m interface{}) error {
	sync := &DatabaseManagementManagedDatabaseSqlTuningAdvisorTasksRecommendationsDataSourceCrud{}
func (s *DatabaseManagementManagedDatabaseSqlTuningAdvisorTasksRecommendationsDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *DatabaseManagementManagedDatabaseSqlTuningAdvisorTasksRecommendationsDataSourceCrud) Get() error {
	request := oci_database_management.ListSqlTuningAdvisorTaskRecommendationsRequest{}
func (s *DatabaseManagementManagedDatabaseSqlTuningAdvisorTasksRecommendationsDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/database_management/database_management_managed_databases_change_database_parameter_resource.go ===
func DatabaseManagementManagedDatabasesChangeDatabaseParameterResource() *schema.Resource {
	return &schema.Resource{
func createDatabaseManagementManagedDatabasesChangeDatabaseParameter(d *schema.ResourceData, m interface{}) error {
	sync := &DatabaseManagementManagedDatabasesChangeDatabaseParameterResourceCrud{}
func readDatabaseManagementManagedDatabasesChangeDatabaseParameter(d *schema.ResourceData, m interface{}) error {
	return nil
func deleteDatabaseManagementManagedDatabasesChangeDatabaseParameter(d *schema.ResourceData, m interface{}) error {
	return nil
func updateDatabaseManagementManagedDatabasesChangeDatabaseParameter(d *schema.ResourceData, m interface{}) error {
	return nil
func (s *DatabaseManagementManagedDatabasesChangeDatabaseParameterResourceCrud) ID() string {
	return *s.Req.ManagedDatabaseId
func (s *DatabaseManagementManagedDatabasesChangeDatabaseParameterResourceCrud) Create() error {
	request := oci_database_management.ChangeDatabaseParametersRequest{}
func (s *DatabaseManagementManagedDatabasesChangeDatabaseParameterResourceCrud) SetData() error {
	return nil
func (s *DatabaseManagementManagedDatabasesChangeDatabaseParameterResourceCrud) mapToChangeDatabaseParameterDetails(fieldKeyFormat string) (oci_database_management.ChangeDatabaseParameterDetails, error) {
	result := oci_database_management.ChangeDatabaseParameterDetails{}
func (s *DatabaseManagementManagedDatabasesChangeDatabaseParameterResourceCrud) mapToDatabaseCredentialDetails(fieldKeyFormat string) (oci_database_management.DatabaseCredentialDetails, error) {
	var baseObject oci_database_management.DatabaseCredentialDetails
func (s *DatabaseManagementManagedDatabasesChangeDatabaseParameterResourceCrud) dbmgmt_mapToDatabaseCredentials(fieldKeyFormat string) (oci_database_management.DatabaseCredentials, error) {
	result := oci_database_management.DatabaseCredentials{}

=== ./internal/service/database_management/database_management_managed_database_sql_tuning_advisor_tasks_summary_report_data_source.go ===
func DatabaseManagementManagedDatabaseSqlTuningAdvisorTasksSummaryReportDataSource() *schema.Resource {
	return &schema.Resource{
func readSingularDatabaseManagementManagedDatabaseSqlTuningAdvisorTasksSummaryReport(d *schema.ResourceData, m interface{}) error {
	sync := &DatabaseManagementManagedDatabaseSqlTuningAdvisorTasksSummaryReportDataSourceCrud{}
func (s *DatabaseManagementManagedDatabaseSqlTuningAdvisorTasksSummaryReportDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *DatabaseManagementManagedDatabaseSqlTuningAdvisorTasksSummaryReportDataSourceCrud) Get() error {
	request := oci_database_management.GetSqlTuningAdvisorTaskSummaryReportRequest{}
func (s *DatabaseManagementManagedDatabaseSqlTuningAdvisorTasksSummaryReportDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/database_management/database_management_external_db_systems_data_source.go ===
func DatabaseManagementExternalDbSystemsDataSource() *schema.Resource {
	return &schema.Resource{
func readDatabaseManagementExternalDbSystems(d *schema.ResourceData, m interface{}) error {
	sync := &DatabaseManagementExternalDbSystemsDataSourceCrud{}
func (s *DatabaseManagementExternalDbSystemsDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *DatabaseManagementExternalDbSystemsDataSourceCrud) Get() error {
	request := oci_database_management.ListExternalDbSystemsRequest{}
func (s *DatabaseManagementExternalDbSystemsDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/database_management/database_management_managed_database_sql_tuning_sets_data_source.go ===
func DatabaseManagementManagedDatabaseSqlTuningSetsDataSource() *schema.Resource {
	return &schema.Resource{
func readDatabaseManagementManagedDatabaseSqlTuningSets(d *schema.ResourceData, m interface{}) error {
	sync := &DatabaseManagementManagedDatabaseSqlTuningSetsDataSourceCrud{}
func (s *DatabaseManagementManagedDatabaseSqlTuningSetsDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *DatabaseManagementManagedDatabaseSqlTuningSetsDataSourceCrud) Get() error {
	request := oci_database_management.ListSqlTuningSetsRequest{}
func (s *DatabaseManagementManagedDatabaseSqlTuningSetsDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/database_management/database_management_managed_database_user_consumer_group_privilege_data_source.go ===
func DatabaseManagementManagedDatabaseUserConsumerGroupPrivilegeDataSource() *schema.Resource {
	return &schema.Resource{
func readSingularDatabaseManagementManagedDatabaseUserConsumerGroupPrivilege(d *schema.ResourceData, m interface{}) error {
	sync := &DatabaseManagementManagedDatabaseUserConsumerGroupPrivilegeDataSourceCrud{}
func (s *DatabaseManagementManagedDatabaseUserConsumerGroupPrivilegeDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *DatabaseManagementManagedDatabaseUserConsumerGroupPrivilegeDataSourceCrud) Get() error {
	request := oci_database_management.ListConsumerGroupPrivilegesRequest{}
func (s *DatabaseManagementManagedDatabaseUserConsumerGroupPrivilegeDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/database_management/database_management_external_asm_resource.go ===
func DatabaseManagementExternalAsmResource() *schema.Resource {
	return &schema.Resource{
func createDatabaseManagementExternalAsm(d *schema.ResourceData, m interface{}) error {
	sync := &DatabaseManagementExternalAsmResourceCrud{}
func readDatabaseManagementExternalAsm(d *schema.ResourceData, m interface{}) error {
	sync := &DatabaseManagementExternalAsmResourceCrud{}
func updateDatabaseManagementExternalAsm(d *schema.ResourceData, m interface{}) error {
	sync := &DatabaseManagementExternalAsmResourceCrud{}
func deleteDatabaseManagementExternalAsm(d *schema.ResourceData, m interface{}) error {
	return nil
func (s *DatabaseManagementExternalAsmResourceCrud) ID() string {
	return *s.Res.Id
func (s *DatabaseManagementExternalAsmResourceCrud) CreatedPending() []string {
	return []string{
func (s *DatabaseManagementExternalAsmResourceCrud) CreatedTarget() []string {
	return []string{
func (s *DatabaseManagementExternalAsmResourceCrud) DeletedPending() []string {
	return []string{
func (s *DatabaseManagementExternalAsmResourceCrud) DeletedTarget() []string {
	return []string{
func (s *DatabaseManagementExternalAsmResourceCrud) Create() error {
	request := oci_database_management.UpdateExternalAsmRequest{}
func (s *DatabaseManagementExternalAsmResourceCrud) getExternalAsmFromWorkRequest(workId *string, retryPolicy *oci_common.RetryPolicy,
	actionTypeEnum oci_database_management.WorkRequestResourceActionTypeEnum, timeout time.Duration) error {
func externalAsmWaitForWorkRequest(wId *string, entityType string, action oci_database_management.WorkRequestResourceActionTypeEnum,
	timeout time.Duration, disableFoundRetries bool, client *oci_database_management.DbManagementClient) (*string, error) {
func getErrorFromDatabaseManagementExternalAsmWorkRequest(client *oci_database_management.DbManagementClient, workId *string, retryPolicy *oci_common.RetryPolicy, entityType string, action oci_database_management.WorkRequestResourceActionTypeEnum) error {
	response, err := client.ListWorkRequestErrors(context.Background(),
func (s *DatabaseManagementExternalAsmResourceCrud) Get() error {
	request := oci_database_management.GetExternalAsmRequest{}
func (s *DatabaseManagementExternalAsmResourceCrud) Update() error {
	request := oci_database_management.UpdateExternalAsmRequest{}
func (s *DatabaseManagementExternalAsmResourceCrud) SetData() error {
	s.D.Set("additional_details", s.Res.AdditionalDetails)

=== ./internal/service/database_management/database_management_managed_database_optimizer_statistics_advisor_executions_data_source.go ===
func DatabaseManagementManagedDatabaseOptimizerStatisticsAdvisorExecutionsDataSource() *schema.Resource {
	return &schema.Resource{
func readDatabaseManagementManagedDatabaseOptimizerStatisticsAdvisorExecutions(d *schema.ResourceData, m interface{}) error {
	sync := &DatabaseManagementManagedDatabaseOptimizerStatisticsAdvisorExecutionsDataSourceCrud{}
func (s *DatabaseManagementManagedDatabaseOptimizerStatisticsAdvisorExecutionsDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *DatabaseManagementManagedDatabaseOptimizerStatisticsAdvisorExecutionsDataSourceCrud) Get() error {
	request := oci_database_management.ListOptimizerStatisticsAdvisorExecutionsRequest{}
func (s *DatabaseManagementManagedDatabaseOptimizerStatisticsAdvisorExecutionsDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/database_management/database_management_managed_databases_asm_properties_data_source.go ===
func DatabaseManagementManagedDatabasesAsmPropertiesDataSource() *schema.Resource {
	return &schema.Resource{
func readDatabaseManagementManagedDatabasesAsmProperties(d *schema.ResourceData, m interface{}) error {
	sync := &DatabaseManagementManagedDatabasesAsmPropertiesDataSourceCrud{}
func (s *DatabaseManagementManagedDatabasesAsmPropertiesDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *DatabaseManagementManagedDatabasesAsmPropertiesDataSourceCrud) Get() error {
	request := oci_database_management.ListAsmPropertiesRequest{}
func (s *DatabaseManagementManagedDatabasesAsmPropertiesDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/database_management/database_management_external_db_home_resource.go ===
func DatabaseManagementExternalDbHomeResource() *schema.Resource {
	return &schema.Resource{
func createDatabaseManagementExternalDbHome(d *schema.ResourceData, m interface{}) error {
	sync := &DatabaseManagementExternalDbHomeResourceCrud{}
func readDatabaseManagementExternalDbHome(d *schema.ResourceData, m interface{}) error {
	sync := &DatabaseManagementExternalDbHomeResourceCrud{}
func updateDatabaseManagementExternalDbHome(d *schema.ResourceData, m interface{}) error {
	sync := &DatabaseManagementExternalDbHomeResourceCrud{}
func deleteDatabaseManagementExternalDbHome(d *schema.ResourceData, m interface{}) error {
	return nil
func (s *DatabaseManagementExternalDbHomeResourceCrud) ID() string {
	return *s.Res.Id
func (s *DatabaseManagementExternalDbHomeResourceCrud) CreatedPending() []string {
	return []string{
func (s *DatabaseManagementExternalDbHomeResourceCrud) CreatedTarget() []string {
	return []string{
func (s *DatabaseManagementExternalDbHomeResourceCrud) DeletedPending() []string {
	return []string{
func (s *DatabaseManagementExternalDbHomeResourceCrud) DeletedTarget() []string {
	return []string{
func (s *DatabaseManagementExternalDbHomeResourceCrud) Create() error {
	request := oci_database_management.UpdateExternalDbHomeRequest{}
func (s *DatabaseManagementExternalDbHomeResourceCrud) Get() error {
	request := oci_database_management.GetExternalDbHomeRequest{}
func (s *DatabaseManagementExternalDbHomeResourceCrud) Update() error {
	request := oci_database_management.UpdateExternalDbHomeRequest{}
func (s *DatabaseManagementExternalDbHomeResourceCrud) SetData() error {
	s.D.Set("additional_details", s.Res.AdditionalDetails)

=== ./internal/service/database_management/database_management_external_db_homes_data_source.go ===
func DatabaseManagementExternalDbHomesDataSource() *schema.Resource {
	return &schema.Resource{
func readDatabaseManagementExternalDbHomes(d *schema.ResourceData, m interface{}) error {
	sync := &DatabaseManagementExternalDbHomesDataSourceCrud{}
func (s *DatabaseManagementExternalDbHomesDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *DatabaseManagementExternalDbHomesDataSourceCrud) Get() error {
	request := oci_database_management.ListExternalDbHomesRequest{}
func (s *DatabaseManagementExternalDbHomesDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/database_management/database_management_external_cluster_data_source.go ===
func DatabaseManagementExternalClusterDataSource() *schema.Resource {
	fieldMap := make(map[string]*schema.Schema)
func readSingularDatabaseManagementExternalCluster(d *schema.ResourceData, m interface{}) error {
	sync := &DatabaseManagementExternalClusterDataSourceCrud{}
func (s *DatabaseManagementExternalClusterDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *DatabaseManagementExternalClusterDataSourceCrud) Get() error {
	request := oci_database_management.GetExternalClusterRequest{}
func (s *DatabaseManagementExternalClusterDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/database_management/database_management_database_dbm_features_management_resource.go ===
func DatabaseManagementDatabaseDbmFeaturesManagementResource() *schema.Resource {
	return &schema.Resource{
func createDatabaseManagementDatabaseDbmFeaturesManagement(d *schema.ResourceData, m interface{}) error {
	sync := &DatabaseManagementDatabaseDbmFeaturesManagementResourceCrud{}
func readDatabaseManagementDatabaseDbmFeaturesManagement(d *schema.ResourceData, m interface{}) error {
	return nil
func updateDatabaseManagementDatabaseDbmFeaturesManagement(d *schema.ResourceData, m interface{}) error {
	sync := &DatabaseManagementDatabaseDbmFeaturesManagementResourceCrud{}
func deleteDatabaseManagementDatabaseDbmFeaturesManagement(d *schema.ResourceData, m interface{}) error {
	sync := &DatabaseManagementDatabaseDbmFeaturesManagementResourceCrud{}
func (s *DatabaseManagementDatabaseDbmFeaturesManagementResourceCrud) ID() string {
	return tfresource.GenerateDataSourceHashID("DatabaseManagementDatabaseDbmFeaturesManagementResource-", DatabaseManagementDatabaseDbmFeaturesManagementResource(), s.D)
func (s *DatabaseManagementDatabaseDbmFeaturesManagementResourceCrud) Create() error {
	var operation bool
func (s *DatabaseManagementDatabaseDbmFeaturesManagementResourceCrud) getDatabaseDbmFeaturesManagementFromWorkRequest(workId *string, retryPolicy *oci_common.RetryPolicy,
	actionTypeEnum oci_database_management.WorkRequestResourceActionTypeEnum, timeout time.Duration) error {
func databaseDbmFeaturesManagementWaitForWorkRequest(wId *string, entityType string, action oci_database_management.WorkRequestResourceActionTypeEnum,
	timeout time.Duration, disableFoundRetries bool, client *oci_database_management.DbManagementClient) (*string, error) {
func getErrorFromDatabaseManagementDatabaseDbmFeaturesManagementWorkRequest(client *oci_database_management.DbManagementClient, workId *string, retryPolicy *oci_common.RetryPolicy, entityType string, action oci_database_management.WorkRequestResourceActionTypeEnum) error {
	response, err := client.ListWorkRequestErrors(context.Background(),
func (s *DatabaseManagementDatabaseDbmFeaturesManagementResourceCrud) Update() error {
	var operation bool
func (s *DatabaseManagementDatabaseDbmFeaturesManagementResourceCrud) Delete() error {
	var operation bool
func (s *DatabaseManagementDatabaseDbmFeaturesManagementResourceCrud) SetData() error {
	return nil
func (s *DatabaseManagementDatabaseDbmFeaturesManagementResourceCrud) mapToConnectorDetails(fieldKeyFormat string) (oci_database_management.ConnectorDetails, error) {
	var baseObject oci_database_management.ConnectorDetails
func (s *DatabaseManagementDatabaseDbmFeaturesManagementResourceCrud) mapToDatabaseConnectionCredentials(fieldKeyFormat string) (oci_database_management.DatabaseConnectionCredentials, error) {
	var baseObject oci_database_management.DatabaseConnectionCredentials
func (s *DatabaseManagementDatabaseDbmFeaturesManagementResourceCrud) mapToDatabaseConnectionDetails(fieldKeyFormat string) (oci_database_management.DatabaseConnectionDetails, error) {
	result := oci_database_management.DatabaseConnectionDetails{}
func (s *DatabaseManagementDatabaseDbmFeaturesManagementResourceCrud) mapToDatabaseConnectionStringDetails(fieldKeyFormat string) (oci_database_management.DatabaseConnectionStringDetails, error) {
	var baseObject oci_database_management.DatabaseConnectionStringDetails
func (s *DatabaseManagementDatabaseDbmFeaturesManagementResourceCrud) mapToDatabaseFeatureDetails(fieldKeyFormat string) (oci_database_management.DatabaseFeatureDetails, error) {
	var baseObject oci_database_management.DatabaseFeatureDetails
func enableCloudDBFeature(s *DatabaseManagementDatabaseDbmFeaturesManagementResourceCrud) error {
	request := oci_database_management.EnableDatabaseManagementFeatureRequest{}
func disableCloudDBFeature(s *DatabaseManagementDatabaseDbmFeaturesManagementResourceCrud) error {
	request := oci_database_management.DisableDatabaseManagementFeatureRequest{}
func modifyCloudDBFeature(s *DatabaseManagementDatabaseDbmFeaturesManagementResourceCrud) error {
	request := oci_database_management.ModifyDatabaseManagementFeatureRequest{}

=== ./internal/service/database_management/database_management_external_cluster_instance_resource.go ===
func DatabaseManagementExternalClusterInstanceResource() *schema.Resource {
	return &schema.Resource{
func createDatabaseManagementExternalClusterInstance(d *schema.ResourceData, m interface{}) error {
	sync := &DatabaseManagementExternalClusterInstanceResourceCrud{}
func readDatabaseManagementExternalClusterInstance(d *schema.ResourceData, m interface{}) error {
	sync := &DatabaseManagementExternalClusterInstanceResourceCrud{}
func updateDatabaseManagementExternalClusterInstance(d *schema.ResourceData, m interface{}) error {
	sync := &DatabaseManagementExternalClusterInstanceResourceCrud{}
func deleteDatabaseManagementExternalClusterInstance(d *schema.ResourceData, m interface{}) error {
	return nil
func (s *DatabaseManagementExternalClusterInstanceResourceCrud) ID() string {
	return *s.Res.Id
func (s *DatabaseManagementExternalClusterInstanceResourceCrud) CreatedPending() []string {
	return []string{
func (s *DatabaseManagementExternalClusterInstanceResourceCrud) CreatedTarget() []string {
	return []string{
func (s *DatabaseManagementExternalClusterInstanceResourceCrud) DeletedPending() []string {
	return []string{
func (s *DatabaseManagementExternalClusterInstanceResourceCrud) DeletedTarget() []string {
	return []string{
func (s *DatabaseManagementExternalClusterInstanceResourceCrud) Create() error {
	request := oci_database_management.UpdateExternalClusterInstanceRequest{}
func (s *DatabaseManagementExternalClusterInstanceResourceCrud) getExternalClusterInstanceFromWorkRequest(workId *string, retryPolicy *oci_common.RetryPolicy,
	actionTypeEnum oci_database_management.WorkRequestResourceActionTypeEnum, timeout time.Duration) error {
func externalClusterInstanceWaitForWorkRequest(wId *string, entityType string, action oci_database_management.WorkRequestResourceActionTypeEnum,
	timeout time.Duration, disableFoundRetries bool, client *oci_database_management.DbManagementClient) (*string, error) {
func getErrorFromDatabaseManagementExternalClusterInstanceWorkRequest(client *oci_database_management.DbManagementClient, workId *string, retryPolicy *oci_common.RetryPolicy, entityType string, action oci_database_management.WorkRequestResourceActionTypeEnum) error {
	response, err := client.ListWorkRequestErrors(context.Background(),
func (s *DatabaseManagementExternalClusterInstanceResourceCrud) Get() error {
	request := oci_database_management.GetExternalClusterInstanceRequest{}
func (s *DatabaseManagementExternalClusterInstanceResourceCrud) Update() error {
	request := oci_database_management.UpdateExternalClusterInstanceRequest{}
func (s *DatabaseManagementExternalClusterInstanceResourceCrud) SetData() error {
	if s.Res.AdrHomeDirectory != nil {

=== ./internal/service/database_management/database_management_managed_database_addm_tasks_data_source.go ===
func DatabaseManagementManagedDatabaseAddmTasksDataSource() *schema.Resource {
	return &schema.Resource{
func readDatabaseManagementManagedDatabaseAddmTasks(d *schema.ResourceData, m interface{}) error {
	sync := &DatabaseManagementManagedDatabaseAddmTasksDataSourceCrud{}
func (s *DatabaseManagementManagedDatabaseAddmTasksDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *DatabaseManagementManagedDatabaseAddmTasksDataSourceCrud) Get() error {
	request := oci_database_management.AddmTasksRequest{}
func (s *DatabaseManagementManagedDatabaseAddmTasksDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/database_management/database_management_managed_database_sql_plan_baseline_configuration_data_source.go ===
func DatabaseManagementManagedDatabaseSqlPlanBaselineConfigurationDataSource() *schema.Resource {
	return &schema.Resource{
func readSingularDatabaseManagementManagedDatabaseSqlPlanBaselineConfiguration(d *schema.ResourceData, m interface{}) error {
	sync := &DatabaseManagementManagedDatabaseSqlPlanBaselineConfigurationDataSourceCrud{}
func (s *DatabaseManagementManagedDatabaseSqlPlanBaselineConfigurationDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *DatabaseManagementManagedDatabaseSqlPlanBaselineConfigurationDataSourceCrud) Get() error {
	request := oci_database_management.GetSqlPlanBaselineConfigurationRequest{}
func (s *DatabaseManagementManagedDatabaseSqlPlanBaselineConfigurationDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/database_management/database_management_external_db_system_connector_resource.go ===
func DatabaseManagementExternalDbSystemConnectorResource() *schema.Resource {
	return &schema.Resource{
func createDatabaseManagementExternalDbSystemConnector(d *schema.ResourceData, m interface{}) error {
	sync := &DatabaseManagementExternalDbSystemConnectorResourceCrud{}
func readDatabaseManagementExternalDbSystemConnector(d *schema.ResourceData, m interface{}) error {
	sync := &DatabaseManagementExternalDbSystemConnectorResourceCrud{}
func updateDatabaseManagementExternalDbSystemConnector(d *schema.ResourceData, m interface{}) error {
	sync := &DatabaseManagementExternalDbSystemConnectorResourceCrud{}
func deleteDatabaseManagementExternalDbSystemConnector(d *schema.ResourceData, m interface{}) error {
	sync := &DatabaseManagementExternalDbSystemConnectorResourceCrud{}
func (s *DatabaseManagementExternalDbSystemConnectorResourceCrud) ID() string {
	externalDbSystemConnector := *s.Res
func (s *DatabaseManagementExternalDbSystemConnectorResourceCrud) CreatedPending() []string {
	return []string{
func (s *DatabaseManagementExternalDbSystemConnectorResourceCrud) CreatedTarget() []string {
	return []string{
func (s *DatabaseManagementExternalDbSystemConnectorResourceCrud) DeletedPending() []string {
	return []string{
func (s *DatabaseManagementExternalDbSystemConnectorResourceCrud) DeletedTarget() []string {
	return []string{
func (s *DatabaseManagementExternalDbSystemConnectorResourceCrud) Create() error {
	request := oci_database_management.CreateExternalDbSystemConnectorRequest{}
func (s *DatabaseManagementExternalDbSystemConnectorResourceCrud) getExternalDbSystemConnectorFromWorkRequest(workId *string, retryPolicy *oci_common.RetryPolicy,
	actionTypeEnum oci_database_management.WorkRequestResourceActionTypeEnum, timeout time.Duration) error {
func externalDbSystemConnectorWaitForWorkRequest(wId *string, entityType string, action oci_database_management.WorkRequestResourceActionTypeEnum,
	timeout time.Duration, disableFoundRetries bool, client *oci_database_management.DbManagementClient) (*string, error) {
func getErrorFromDatabaseManagementExternalDbSystemConnectorWorkRequest(client *oci_database_management.DbManagementClient, workId *string, retryPolicy *oci_common.RetryPolicy, entityType string, action oci_database_management.WorkRequestResourceActionTypeEnum) error {
	response, err := client.ListWorkRequestErrors(context.Background(),
func (s *DatabaseManagementExternalDbSystemConnectorResourceCrud) Get() error {
	request := oci_database_management.GetExternalDbSystemConnectorRequest{}
func (s *DatabaseManagementExternalDbSystemConnectorResourceCrud) Update() error {
	request := oci_database_management.UpdateExternalDbSystemConnectorRequest{}
func (s *DatabaseManagementExternalDbSystemConnectorResourceCrud) Delete() error {
	request := oci_database_management.DeleteExternalDbSystemConnectorRequest{}
func (s *DatabaseManagementExternalDbSystemConnectorResourceCrud) SetData() error {
	switch v := (*s.Res).(type) {
func (s *DatabaseManagementExternalDbSystemConnectorResourceCrud) mapToAsmConnectionCredentials(fieldKeyFormat string) (oci_database_management.AsmConnectionCredentials, error) {
	var baseObject oci_database_management.AsmConnectionCredentials
func (s *DatabaseManagementExternalDbSystemConnectorResourceCrud) mapToAsmConnectionString(fieldKeyFormat string) (oci_database_management.AsmConnectionString, error) {
	result := oci_database_management.AsmConnectionString{}
func (s *DatabaseManagementExternalDbSystemConnectorResourceCrud) mapToDatabaseConnectionCredentials(fieldKeyFormat string) (oci_database_management.DatabaseConnectionCredentials, error) {
	var baseObject oci_database_management.DatabaseConnectionCredentials
func (s *DatabaseManagementExternalDbSystemConnectorResourceCrud) mapToDatabaseConnectionString(fieldKeyFormat string) (oci_database_management.DatabaseConnectionString, error) {
	result := oci_database_management.DatabaseConnectionString{}
func (s *DatabaseManagementExternalDbSystemConnectorResourceCrud) mapToDatabaseCredentialDetails(fieldKeyFormat string) (oci_database_management.DatabaseCredentialDetails, error) {
	var baseObject oci_database_management.DatabaseCredentialDetails
func (s *DatabaseManagementExternalDbSystemConnectorResourceCrud) mapToExternalDbSystemConnectionInfo(fieldKeyFormat string) (oci_database_management.ExternalDbSystemConnectionInfo, error) {
	var baseObject oci_database_management.ExternalDbSystemConnectionInfo
func (s *DatabaseManagementExternalDbSystemConnectorResourceCrud) populateTopLevelPolymorphicCreateExternalDbSystemConnectorRequest(request *oci_database_management.CreateExternalDbSystemConnectorRequest) error {
	//discriminator
func (s *DatabaseManagementExternalDbSystemConnectorResourceCrud) populateTopLevelPolymorphicUpdateExternalDbSystemConnectorRequest(request *oci_database_management.UpdateExternalDbSystemConnectorRequest) error {
	//discriminator

=== ./internal/service/database_management/database_management_managed_database_sql_plan_baselines_data_source.go ===
func DatabaseManagementManagedDatabaseSqlPlanBaselinesDataSource() *schema.Resource {
	return &schema.Resource{
func readDatabaseManagementManagedDatabaseSqlPlanBaselines(d *schema.ResourceData, m interface{}) error {
	sync := &DatabaseManagementManagedDatabaseSqlPlanBaselinesDataSourceCrud{}
func (s *DatabaseManagementManagedDatabaseSqlPlanBaselinesDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *DatabaseManagementManagedDatabaseSqlPlanBaselinesDataSourceCrud) Get() error {
	request := oci_database_management.ListSqlPlanBaselinesRequest{}
func (s *DatabaseManagementManagedDatabaseSqlPlanBaselinesDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/database_management/database_management_external_exadata_storage_server_top_sql_cpu_activity_data_source.go ===
func DatabaseManagementExternalExadataStorageServerTopSqlCpuActivityDataSource() *schema.Resource {
	return &schema.Resource{
func readSingularDatabaseManagementExternalExadataStorageServerTopSqlCpuActivity(d *schema.ResourceData, m interface{}) error {
	sync := &DatabaseManagementExternalExadataStorageServerTopSqlCpuActivityDataSourceCrud{}
func (s *DatabaseManagementExternalExadataStorageServerTopSqlCpuActivityDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *DatabaseManagementExternalExadataStorageServerTopSqlCpuActivityDataSourceCrud) Get() error {
	request := oci_database_management.GetTopSqlCpuActivityRequest{}
func (s *DatabaseManagementExternalExadataStorageServerTopSqlCpuActivityDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/database_management/database_management_managed_database_user_data_access_container_data_source.go ===
func DatabaseManagementManagedDatabaseUserDataAccessContainerDataSource() *schema.Resource {
	return &schema.Resource{
func readSingularDatabaseManagementManagedDatabaseUserDataAccessContainer(d *schema.ResourceData, m interface{}) error {
	sync := &DatabaseManagementManagedDatabaseUserDataAccessContainerDataSourceCrud{}
func (s *DatabaseManagementManagedDatabaseUserDataAccessContainerDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *DatabaseManagementManagedDatabaseUserDataAccessContainerDataSourceCrud) Get() error {
	request := oci_database_management.ListDataAccessContainersRequest{}
func (s *DatabaseManagementManagedDatabaseUserDataAccessContainerDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/database_management/database_management_db_management_private_endpoint_associated_databases_data_source.go ===
func DatabaseManagementDbManagementPrivateEndpointAssociatedDatabasesDataSource() *schema.Resource {
	return &schema.Resource{
func readDatabaseManagementDbManagementPrivateEndpointAssociatedDatabases(d *schema.ResourceData, m interface{}) error {
	sync := &DatabaseManagementDbManagementPrivateEndpointAssociatedDatabasesDataSourceCrud{}
func (s *DatabaseManagementDbManagementPrivateEndpointAssociatedDatabasesDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *DatabaseManagementDbManagementPrivateEndpointAssociatedDatabasesDataSourceCrud) Get() error {
	request := oci_database_management.ListAssociatedDatabasesRequest{}
func (s *DatabaseManagementDbManagementPrivateEndpointAssociatedDatabasesDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/database_management/database_management_externalnoncontainerdatabase_external_non_container_dbm_features_management_resource.go ===
func DatabaseManagementExternalnoncontainerdatabaseExternalNonContainerDbmFeaturesManagementResource() *schema.Resource {
	return &schema.Resource{
func createDatabaseManagementExternalnoncontainerdatabaseExternalNonContainerDbmFeaturesManagement(d *schema.ResourceData, m interface{}) error {
	sync := &DatabaseManagementExternalnoncontainerdatabaseExternalNonContainerDbmFeaturesManagementResourceCrud{}
func readDatabaseManagementExternalnoncontainerdatabaseExternalNonContainerDbmFeaturesManagement(d *schema.ResourceData, m interface{}) error {
	return nil
func updateDatabaseManagementExternalnoncontainerdatabaseExternalNonContainerDbmFeaturesManagement(d *schema.ResourceData, m interface{}) error {
	sync := &DatabaseManagementExternalnoncontainerdatabaseExternalNonContainerDbmFeaturesManagementResourceCrud{}
func deleteDatabaseManagementExternalnoncontainerdatabaseExternalNonContainerDbmFeaturesManagement(d *schema.ResourceData, m interface{}) error {
	sync := &DatabaseManagementExternalnoncontainerdatabaseExternalNonContainerDbmFeaturesManagementResourceCrud{}
func (s *DatabaseManagementExternalnoncontainerdatabaseExternalNonContainerDbmFeaturesManagementResourceCrud) ID() string {
	return tfresource.GenerateDataSourceHashID("DatabaseManagementExternalnoncontainerdatabaseExternalNonContainerDbmFeaturesManagementResource-", DatabaseManagementExternalnoncontainerdatabaseExternalNonContainerDbmFeaturesManagementResource(), s.D)
func (s *DatabaseManagementExternalnoncontainerdatabaseExternalNonContainerDbmFeaturesManagementResourceCrud) Create() error {
	var operation bool
func (s *DatabaseManagementExternalnoncontainerdatabaseExternalNonContainerDbmFeaturesManagementResourceCrud) getExternalnoncontainerdatabaseExternalNonContainerDbmFeaturesManagementFromWorkRequest(workId *string, retryPolicy *oci_common.RetryPolicy,
	actionTypeEnum oci_database_management.WorkRequestResourceActionTypeEnum, timeout time.Duration) error {
func externalnoncontainerdatabaseExternalNonContainerDbmFeaturesManagementWaitForWorkRequest(wId *string, entityType string, action oci_database_management.WorkRequestResourceActionTypeEnum,
	timeout time.Duration, disableFoundRetries bool, client *oci_database_management.DbManagementClient) (*string, error) {
func getErrorFromDatabaseManagementExternalnoncontainerdatabaseExternalNonContainerDbmFeaturesManagementWorkRequest(client *oci_database_management.DbManagementClient, workId *string, retryPolicy *oci_common.RetryPolicy, entityType string, action oci_database_management.WorkRequestResourceActionTypeEnum) error {
	response, err := client.ListWorkRequestErrors(context.Background(),
func (s *DatabaseManagementExternalnoncontainerdatabaseExternalNonContainerDbmFeaturesManagementResourceCrud) Update() error {
	var operation bool
func (s *DatabaseManagementExternalnoncontainerdatabaseExternalNonContainerDbmFeaturesManagementResourceCrud) Delete() error {
	var operation bool
func (s *DatabaseManagementExternalnoncontainerdatabaseExternalNonContainerDbmFeaturesManagementResourceCrud) SetData() error {
	return nil
func (s *DatabaseManagementExternalnoncontainerdatabaseExternalNonContainerDbmFeaturesManagementResourceCrud) mapToConnectorDetails(fieldKeyFormat string) (oci_database_management.ConnectorDetails, error) {
	var baseObject oci_database_management.ConnectorDetails
func (s *DatabaseManagementExternalnoncontainerdatabaseExternalNonContainerDbmFeaturesManagementResourceCrud) mapToExternalDatabaseFeatureDetails(fieldKeyFormat string) (oci_database_management.ExternalDatabaseFeatureDetails, error) {
	var baseObject oci_database_management.ExternalDatabaseFeatureDetails

=== ./internal/service/database_management/database_management_managed_database_group_resource.go ===
func DatabaseManagementManagedDatabaseGroupResource() *schema.Resource {
	return &schema.Resource{
func createDatabaseManagementManagedDatabaseGroup(d *schema.ResourceData, m interface{}) error {
	sync := &DatabaseManagementManagedDatabaseGroupResourceCrud{}
func readDatabaseManagementManagedDatabaseGroup(d *schema.ResourceData, m interface{}) error {
	sync := &DatabaseManagementManagedDatabaseGroupResourceCrud{}
func updateDatabaseManagementManagedDatabaseGroup(d *schema.ResourceData, m interface{}) error {
	sync := &DatabaseManagementManagedDatabaseGroupResourceCrud{}
func deleteDatabaseManagementManagedDatabaseGroup(d *schema.ResourceData, m interface{}) error {
	sync := &DatabaseManagementManagedDatabaseGroupResourceCrud{}
func (s *DatabaseManagementManagedDatabaseGroupResourceCrud) ID() string {
	return *s.Res.Id
func (s *DatabaseManagementManagedDatabaseGroupResourceCrud) CreatedPending() []string {
	return []string{
func (s *DatabaseManagementManagedDatabaseGroupResourceCrud) CreatedTarget() []string {
	return []string{
func (s *DatabaseManagementManagedDatabaseGroupResourceCrud) DeletedPending() []string {
	return []string{
func (s *DatabaseManagementManagedDatabaseGroupResourceCrud) DeletedTarget() []string {
	return []string{
func (s *DatabaseManagementManagedDatabaseGroupResourceCrud) Create() error {
	defer func() {
func (s *DatabaseManagementManagedDatabaseGroupResourceCrud) addManagedDatabaseToManagedDatabaseGroup(managedDatabaseGroupId string, managedDatabaseDetails oci_database_management.AddManagedDatabaseToManagedDatabaseGroupDetails) error {
	request := oci_database_management.AddManagedDatabaseToManagedDatabaseGroupRequest{}
func (s *DatabaseManagementManagedDatabaseGroupResourceCrud) removeManagedDatabaseFromManagedDatabaseGroup(managedDatabaseGroupId string, managedDatabaseDetails oci_database_management.RemoveManagedDatabaseFromManagedDatabaseGroupDetails) error {
	request := oci_database_management.RemoveManagedDatabaseFromManagedDatabaseGroupRequest{}
func (s *DatabaseManagementManagedDatabaseGroupResourceCrud) GetManagedDatabaseGroupForManagedDatabaseGroupId(managedDatabaseGroupId string) error {
	request := oci_database_management.GetManagedDatabaseGroupRequest{}
func (s *DatabaseManagementManagedDatabaseGroupResourceCrud) Get() error {
	request := oci_database_management.GetManagedDatabaseGroupRequest{}
func (s *DatabaseManagementManagedDatabaseGroupResourceCrud) Update() error {
	defer func() {
func (s *DatabaseManagementManagedDatabaseGroupResourceCrud) updateManagedDatabases(managedDatabaseGroupId *string) error {
	if _, ok := s.D.GetOkExists("managed_databases"); ok && s.D.HasChange("managed_databases") {
func (s *DatabaseManagementManagedDatabaseGroupResourceCrud) removeAllManagedDatabases(managedDatabaseGroupId *string) error {
	if managedDatabases, ok := s.D.GetOkExists("managed_databases"); ok {
func (s *DatabaseManagementManagedDatabaseGroupResourceCrud) Delete() error {
	request := oci_database_management.DeleteManagedDatabaseGroupRequest{}
func (s *DatabaseManagementManagedDatabaseGroupResourceCrud) SetData() error {
	if s.Res == nil {
func (s *DatabaseManagementManagedDatabaseGroupResourceCrud) updateCompartment(compartment interface{}) error {
	changeCompartmentRequest := oci_database_management.ChangeManagedDatabaseGroupCompartmentRequest{}

=== ./internal/service/database_management/database_management_external_exadata_storage_servers_data_source.go ===
func DatabaseManagementExternalExadataStorageServersDataSource() *schema.Resource {
	return &schema.Resource{
func readDatabaseManagementExternalExadataStorageServers(d *schema.ResourceData, m interface{}) error {
	sync := &DatabaseManagementExternalExadataStorageServersDataSourceCrud{}
func (s *DatabaseManagementExternalExadataStorageServersDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *DatabaseManagementExternalExadataStorageServersDataSourceCrud) Get() error {
	request := oci_database_management.ListExternalExadataStorageServersRequest{}
func (s *DatabaseManagementExternalExadataStorageServersDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/database_management/database_management_managed_database_optimizer_statistics_advisor_execution_script_data_source.go ===
func DatabaseManagementManagedDatabaseOptimizerStatisticsAdvisorExecutionScriptDataSource() *schema.Resource {
	return &schema.Resource{
func readSingularDatabaseManagementManagedDatabaseOptimizerStatisticsAdvisorExecutionScript(d *schema.ResourceData, m interface{}) error {
	sync := &DatabaseManagementManagedDatabaseOptimizerStatisticsAdvisorExecutionScriptDataSourceCrud{}
func (s *DatabaseManagementManagedDatabaseOptimizerStatisticsAdvisorExecutionScriptDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *DatabaseManagementManagedDatabaseOptimizerStatisticsAdvisorExecutionScriptDataSourceCrud) Get() error {
	request := oci_database_management.GetOptimizerStatisticsAdvisorExecutionScriptRequest{}
func (s *DatabaseManagementManagedDatabaseOptimizerStatisticsAdvisorExecutionScriptDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/database_management/database_management_managed_database_alert_log_count_data_source.go ===
func DatabaseManagementManagedDatabaseAlertLogCountDataSource() *schema.Resource {
	return &schema.Resource{
func readSingularDatabaseManagementManagedDatabaseAlertLogCount(d *schema.ResourceData, m interface{}) error {
	sync := &DatabaseManagementManagedDatabaseAlertLogCountDataSourceCrud{}
func (s *DatabaseManagementManagedDatabaseAlertLogCountDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *DatabaseManagementManagedDatabaseAlertLogCountDataSourceCrud) Get() error {
	request := oci_database_management.SummarizeAlertLogCountsRequest{}
func (s *DatabaseManagementManagedDatabaseAlertLogCountDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/database_management/database_management_external_exadata_storage_server_open_alert_history_data_source.go ===
func DatabaseManagementExternalExadataStorageServerOpenAlertHistoryDataSource() *schema.Resource {
	return &schema.Resource{
func readSingularDatabaseManagementExternalExadataStorageServerOpenAlertHistory(d *schema.ResourceData, m interface{}) error {
	sync := &DatabaseManagementExternalExadataStorageServerOpenAlertHistoryDataSourceCrud{}
func (s *DatabaseManagementExternalExadataStorageServerOpenAlertHistoryDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *DatabaseManagementExternalExadataStorageServerOpenAlertHistoryDataSourceCrud) Get() error {
	request := oci_database_management.GetOpenAlertHistoryRequest{}
func (s *DatabaseManagementExternalExadataStorageServerOpenAlertHistoryDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/database_management/database_management_managed_database_user_object_privilege_data_source.go ===
func DatabaseManagementManagedDatabaseUserObjectPrivilegeDataSource() *schema.Resource {
	return &schema.Resource{
func readSingularDatabaseManagementManagedDatabaseUserObjectPrivilege(d *schema.ResourceData, m interface{}) error {
	sync := &DatabaseManagementManagedDatabaseUserObjectPrivilegeDataSourceCrud{}
func (s *DatabaseManagementManagedDatabaseUserObjectPrivilegeDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *DatabaseManagementManagedDatabaseUserObjectPrivilegeDataSourceCrud) Get() error {
	request := oci_database_management.ListObjectPrivilegesRequest{}
func (s *DatabaseManagementManagedDatabaseUserObjectPrivilegeDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/database_management/database_management_external_db_node_data_source.go ===
func DatabaseManagementExternalDbNodeDataSource() *schema.Resource {
	fieldMap := make(map[string]*schema.Schema)
func readSingularDatabaseManagementExternalDbNode(d *schema.ResourceData, m interface{}) error {
	sync := &DatabaseManagementExternalDbNodeDataSourceCrud{}
func (s *DatabaseManagementExternalDbNodeDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *DatabaseManagementExternalDbNodeDataSourceCrud) Get() error {
	request := oci_database_management.GetExternalDbNodeRequest{}
func (s *DatabaseManagementExternalDbNodeDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/database_management/database_management_external_exadata_infrastructure_data_source.go ===
func DatabaseManagementExternalExadataInfrastructureDataSource() *schema.Resource {
	fieldMap := make(map[string]*schema.Schema)
func readSingularDatabaseManagementExternalExadataInfrastructure(d *schema.ResourceData, m interface{}) error {
	sync := &DatabaseManagementExternalExadataInfrastructureDataSourceCrud{}
func (s *DatabaseManagementExternalExadataInfrastructureDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *DatabaseManagementExternalExadataInfrastructureDataSourceCrud) Get() error {
	request := oci_database_management.GetExternalExadataInfrastructureRequest{}
func (s *DatabaseManagementExternalExadataInfrastructureDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/database_management/database_management_managed_database_sql_tuning_set_data_source.go ===
func DatabaseManagementManagedDatabaseSqlTuningSetDataSource() *schema.Resource {
	return &schema.Resource{
func readSingularDatabaseManagementManagedDatabaseSqlTuningSet(d *schema.ResourceData, m interface{}) error {
	sync := &DatabaseManagementManagedDatabaseSqlTuningSetDataSourceCrud{}
func (s *DatabaseManagementManagedDatabaseSqlTuningSetDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *DatabaseManagementManagedDatabaseSqlTuningSetDataSourceCrud) Get() error {
	request := oci_database_management.ListSqlTuningSetsRequest{}
func (s *DatabaseManagementManagedDatabaseSqlTuningSetDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/database_management/database_management_managed_database_preferred_credential_data_source.go ===
func DatabaseManagementManagedDatabasePreferredCredentialDataSource() *schema.Resource {
	return &schema.Resource{
func readSingularDatabaseManagementManagedDatabasePreferredCredential(d *schema.ResourceData, m interface{}) error {
	sync := &DatabaseManagementManagedDatabasePreferredCredentialDataSourceCrud{}
func (s *DatabaseManagementManagedDatabasePreferredCredentialDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *DatabaseManagementManagedDatabasePreferredCredentialDataSourceCrud) Get() error {
	request := oci_database_management.GetPreferredCredentialRequest{}
func (s *DatabaseManagementManagedDatabasePreferredCredentialDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/database_management/database_management_managed_database_sql_tuning_advisor_tasks_sql_execution_plan_data_source.go ===
func DatabaseManagementManagedDatabaseSqlTuningAdvisorTasksSqlExecutionPlanDataSource() *schema.Resource {
	return &schema.Resource{
func readSingularDatabaseManagementManagedDatabaseSqlTuningAdvisorTasksSqlExecutionPlan(d *schema.ResourceData, m interface{}) error {
	sync := &DatabaseManagementManagedDatabaseSqlTuningAdvisorTasksSqlExecutionPlanDataSourceCrud{}
func (s *DatabaseManagementManagedDatabaseSqlTuningAdvisorTasksSqlExecutionPlanDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *DatabaseManagementManagedDatabaseSqlTuningAdvisorTasksSqlExecutionPlanDataSourceCrud) Get() error {
	request := oci_database_management.GetSqlExecutionPlanRequest{}
func (s *DatabaseManagementManagedDatabaseSqlTuningAdvisorTasksSqlExecutionPlanDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/database_management/database_management_external_clusters_data_source.go ===
func DatabaseManagementExternalClustersDataSource() *schema.Resource {
	return &schema.Resource{
func readDatabaseManagementExternalClusters(d *schema.ResourceData, m interface{}) error {
	sync := &DatabaseManagementExternalClustersDataSourceCrud{}
func (s *DatabaseManagementExternalClustersDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *DatabaseManagementExternalClustersDataSourceCrud) Get() error {
	request := oci_database_management.ListExternalClustersRequest{}
func (s *DatabaseManagementExternalClustersDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/database_management/database_management_external_exadata_infrastructure_exadata_management_resource.go ===
func DatabaseManagementExternalExadataInfrastructureExadataManagementResource() *schema.Resource {
	return &schema.Resource{
func createDatabaseManagementExternalExadataInfrastructureExadataManagement(d *schema.ResourceData, m interface{}) error {
	sync := &DatabaseManagementExternalExadataInfrastructureExadataManagementResourceCrud{}
func readDatabaseManagementExternalExadataInfrastructureExadataManagement(d *schema.ResourceData, m interface{}) error {
	return nil
func updateDatabaseManagementExternalExadataInfrastructureExadataManagement(d *schema.ResourceData, m interface{}) error {
	sync := &DatabaseManagementExternalExadataInfrastructureExadataManagementResourceCrud{}
func deleteDatabaseManagementExternalExadataInfrastructureExadataManagement(d *schema.ResourceData, m interface{}) error {
	sync := &DatabaseManagementExternalExadataInfrastructureExadataManagementResourceCrud{}
func (s *DatabaseManagementExternalExadataInfrastructureExadataManagementResourceCrud) ID() string {
	return tfresource.GenerateDataSourceHashID("DatabaseManagementExternalExadataInfrastructureExadataManagementResource-", DatabaseManagementExternalExadataInfrastructureExadataManagementResource(), s.D)
func (s *DatabaseManagementExternalExadataInfrastructureExadataManagementResourceCrud) Create() error {
	var operation bool
func (s *DatabaseManagementExternalExadataInfrastructureExadataManagementResourceCrud) getExternalExadataInfrastructureExadataManagementFromWorkRequest(workId *string, retryPolicy *oci_common.RetryPolicy,
	actionTypeEnum oci_database_management.WorkRequestResourceActionTypeEnum, timeout time.Duration) error {
func externalExadataInfrastructureExadataManagementWaitForWorkRequest(wId *string, entityType string, action oci_database_management.WorkRequestResourceActionTypeEnum,
	timeout time.Duration, disableFoundRetries bool, client *oci_database_management.DbManagementClient) (*string, error) {
func getErrorFromDatabaseManagementExternalExadataInfrastructureExadataManagementWorkRequest(client *oci_database_management.DbManagementClient, workId *string, retryPolicy *oci_common.RetryPolicy, entityType string, action oci_database_management.WorkRequestResourceActionTypeEnum) error {
	response, err := client.ListWorkRequestErrors(context.Background(),
func (s *DatabaseManagementExternalExadataInfrastructureExadataManagementResourceCrud) Update() error {
	var operation bool
func (s *DatabaseManagementExternalExadataInfrastructureExadataManagementResourceCrud) Delete() error {
	var operation bool
func (s *DatabaseManagementExternalExadataInfrastructureExadataManagementResourceCrud) SetData() error {
	return nil

=== ./internal/service/database_management/database_management_job_executions_statuses_data_source.go ===
func DatabaseManagementJobExecutionsStatusesDataSource() *schema.Resource {
	return &schema.Resource{
func readDatabaseManagementJobExecutionsStatuses(d *schema.ResourceData, m interface{}) error {
	sync := &DatabaseManagementJobExecutionsStatusesDataSourceCrud{}
func (s *DatabaseManagementJobExecutionsStatusesDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *DatabaseManagementJobExecutionsStatusesDataSourceCrud) Get() error {
	request := oci_database_management.SummarizeJobExecutionsStatusesRequest{}
func (s *DatabaseManagementJobExecutionsStatusesDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/database_management/database_management_externalcontainerdatabase_external_container_dbm_features_management_resource.go ===
func DatabaseManagementExternalcontainerdatabaseExternalContainerDbmFeaturesManagementResource() *schema.Resource {
	return &schema.Resource{
func createDatabaseManagementExternalcontainerdatabaseExternalContainerDbmFeaturesManagement(d *schema.ResourceData, m interface{}) error {
	sync := &DatabaseManagementExternalcontainerdatabaseExternalContainerDbmFeaturesManagementResourceCrud{}
func readDatabaseManagementExternalcontainerdatabaseExternalContainerDbmFeaturesManagement(d *schema.ResourceData, m interface{}) error {
	return nil
func updateDatabaseManagementExternalcontainerdatabaseExternalContainerDbmFeaturesManagement(d *schema.ResourceData, m interface{}) error {
	sync := &DatabaseManagementExternalcontainerdatabaseExternalContainerDbmFeaturesManagementResourceCrud{}
func deleteDatabaseManagementExternalcontainerdatabaseExternalContainerDbmFeaturesManagement(d *schema.ResourceData, m interface{}) error {
	sync := &DatabaseManagementExternalcontainerdatabaseExternalContainerDbmFeaturesManagementResourceCrud{}
func (s *DatabaseManagementExternalcontainerdatabaseExternalContainerDbmFeaturesManagementResourceCrud) ID() string {
	return tfresource.GenerateDataSourceHashID("DatabaseManagementExternalcontainerdatabaseExternalContainerDbmFeaturesManagementResource-", DatabaseManagementExternalcontainerdatabaseExternalContainerDbmFeaturesManagementResource(), s.D)
func (s *DatabaseManagementExternalcontainerdatabaseExternalContainerDbmFeaturesManagementResourceCrud) Create() error {
	var operation bool
func (s *DatabaseManagementExternalcontainerdatabaseExternalContainerDbmFeaturesManagementResourceCrud) getExternalcontainerdatabaseExternalContainerDbmFeaturesManagementFromWorkRequest(workId *string, retryPolicy *oci_common.RetryPolicy,
	actionTypeEnum oci_database_management.WorkRequestResourceActionTypeEnum, timeout time.Duration) error {
func externalcontainerdatabaseExternalContainerDbmFeaturesManagementWaitForWorkRequest(wId *string, entityType string, action oci_database_management.WorkRequestResourceActionTypeEnum,
	timeout time.Duration, disableFoundRetries bool, client *oci_database_management.DbManagementClient) (*string, error) {
func getErrorFromDatabaseManagementExternalcontainerdatabaseExternalContainerDbmFeaturesManagementWorkRequest(client *oci_database_management.DbManagementClient, workId *string, retryPolicy *oci_common.RetryPolicy, entityType string, action oci_database_management.WorkRequestResourceActionTypeEnum) error {
	response, err := client.ListWorkRequestErrors(context.Background(),
func (s *DatabaseManagementExternalcontainerdatabaseExternalContainerDbmFeaturesManagementResourceCrud) Update() error {
	log.Printf("[INFO] Executing update for DatabaseManagementExternalcontainerdatabaseExternalContainerDbmFeaturesManagementResource")
func (s *DatabaseManagementExternalcontainerdatabaseExternalContainerDbmFeaturesManagementResourceCrud) Delete() error {
	log.Printf("[INFO] Executing delete for DatabaseManagementExternalcontainerdatabaseExternalContainerDbmFeaturesManagementResource")
func (s *DatabaseManagementExternalcontainerdatabaseExternalContainerDbmFeaturesManagementResourceCrud) SetData() error {
	return nil
func (s *DatabaseManagementExternalcontainerdatabaseExternalContainerDbmFeaturesManagementResourceCrud) mapToConnectorDetails(fieldKeyFormat string) (oci_database_management.ConnectorDetails, error) {
	var baseObject oci_database_management.ConnectorDetails
func (s *DatabaseManagementExternalcontainerdatabaseExternalContainerDbmFeaturesManagementResourceCrud) mapToExternalDatabaseFeatureDetails(fieldKeyFormat string) (oci_database_management.ExternalDatabaseFeatureDetails, error) {
	var baseObject oci_database_management.ExternalDatabaseFeatureDetails

=== ./internal/service/database_management/database_management_external_exadata_storage_server_iorm_plan_data_source.go ===
func DatabaseManagementExternalExadataStorageServerIormPlanDataSource() *schema.Resource {
	return &schema.Resource{
func readSingularDatabaseManagementExternalExadataStorageServerIormPlan(d *schema.ResourceData, m interface{}) error {
	sync := &DatabaseManagementExternalExadataStorageServerIormPlanDataSourceCrud{}
func (s *DatabaseManagementExternalExadataStorageServerIormPlanDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *DatabaseManagementExternalExadataStorageServerIormPlanDataSourceCrud) Get() error {
	request := oci_database_management.GetIormPlanRequest{}
func (s *DatabaseManagementExternalExadataStorageServerIormPlanDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/database_management/database_management_external_databases_data_source.go ===
func DatabaseManagementExternalDatabasesDataSource() *schema.Resource {
	return &schema.Resource{
func readDatabaseManagementExternalDatabases(d *schema.ResourceData, m interface{}) error {
	sync := &DatabaseManagementExternalDatabasesDataSourceCrud{}
func (s *DatabaseManagementExternalDatabasesDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *DatabaseManagementExternalDatabasesDataSourceCrud) Get() error {
	request := oci_database_management.ListExternalDatabasesRequest{}
func (s *DatabaseManagementExternalDatabasesDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/database_management/database_management_external_db_nodes_data_source.go ===
func DatabaseManagementExternalDbNodesDataSource() *schema.Resource {
	return &schema.Resource{
func readDatabaseManagementExternalDbNodes(d *schema.ResourceData, m interface{}) error {
	sync := &DatabaseManagementExternalDbNodesDataSourceCrud{}
func (s *DatabaseManagementExternalDbNodesDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *DatabaseManagementExternalDbNodesDataSourceCrud) Get() error {
	request := oci_database_management.ListExternalDbNodesRequest{}
func (s *DatabaseManagementExternalDbNodesDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/database_management/database_management_external_exadata_infrastructures_data_source.go ===
func DatabaseManagementExternalExadataInfrastructuresDataSource() *schema.Resource {
	return &schema.Resource{
func readDatabaseManagementExternalExadataInfrastructures(d *schema.ResourceData, m interface{}) error {
	sync := &DatabaseManagementExternalExadataInfrastructuresDataSourceCrud{}
func (s *DatabaseManagementExternalExadataInfrastructuresDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *DatabaseManagementExternalExadataInfrastructuresDataSourceCrud) Get() error {
	request := oci_database_management.ListExternalExadataInfrastructuresRequest{}
func (s *DatabaseManagementExternalExadataInfrastructuresDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/database_management/database_management_managed_database_optimizer_statistics_advisor_execution_data_source.go ===
func DatabaseManagementManagedDatabaseOptimizerStatisticsAdvisorExecutionDataSource() *schema.Resource {
	return &schema.Resource{
func readSingularDatabaseManagementManagedDatabaseOptimizerStatisticsAdvisorExecution(d *schema.ResourceData, m interface{}) error {
	sync := &DatabaseManagementManagedDatabaseOptimizerStatisticsAdvisorExecutionDataSourceCrud{}
func (s *DatabaseManagementManagedDatabaseOptimizerStatisticsAdvisorExecutionDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *DatabaseManagementManagedDatabaseOptimizerStatisticsAdvisorExecutionDataSourceCrud) Get() error {
	request := oci_database_management.GetOptimizerStatisticsAdvisorExecutionRequest{}
func (s *DatabaseManagementManagedDatabaseOptimizerStatisticsAdvisorExecutionDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/database_management/database_management_autonomous_database_autonomous_database_dbm_features_management_resource.go ===
func DatabaseManagementAutonomousDatabaseAutonomousDatabaseDbmFeaturesManagementResource() *schema.Resource {
	return &schema.Resource{
func createDatabaseManagementAutonomousDatabaseAutonomousDatabaseDbmFeaturesManagement(d *schema.ResourceData, m interface{}) error {
	sync := &DatabaseManagementAutonomousDatabaseAutonomousDatabaseDbmFeaturesManagementResourceCrud{}
func readDatabaseManagementAutonomousDatabaseAutonomousDatabaseDbmFeaturesManagement(d *schema.ResourceData, m interface{}) error {
	return nil
func updateDatabaseManagementAutonomousDatabaseAutonomousDatabaseDbmFeaturesManagement(d *schema.ResourceData, m interface{}) error {
	sync := &DatabaseManagementAutonomousDatabaseAutonomousDatabaseDbmFeaturesManagementResourceCrud{}
func deleteDatabaseManagementAutonomousDatabaseAutonomousDatabaseDbmFeaturesManagement(d *schema.ResourceData, m interface{}) error {
	sync := &DatabaseManagementAutonomousDatabaseAutonomousDatabaseDbmFeaturesManagementResourceCrud{}
func (s *DatabaseManagementAutonomousDatabaseAutonomousDatabaseDbmFeaturesManagementResourceCrud) ID() string {
	return tfresource.GenerateDataSourceHashID("DatabaseManagementAutonomousDatabaseAutonomousDatabaseDbmFeaturesManagementResource-", DatabaseManagementAutonomousDatabaseAutonomousDatabaseDbmFeaturesManagementResource(), s.D)
func (s *DatabaseManagementAutonomousDatabaseAutonomousDatabaseDbmFeaturesManagementResourceCrud) Create() error {
	var operation bool
func (s *DatabaseManagementAutonomousDatabaseAutonomousDatabaseDbmFeaturesManagementResourceCrud) getAutonomousDatabaseAutonomousDatabaseDbmFeaturesManagementFromWorkRequest(workId *string, retryPolicy *oci_common.RetryPolicy,
	actionTypeEnum oci_database_management.WorkRequestResourceActionTypeEnum, timeout time.Duration) error {
func autonomousDatabaseAutonomousDatabaseDbmFeaturesManagementWaitForWorkRequest(wId *string, entityType string, action oci_database_management.WorkRequestResourceActionTypeEnum,
	timeout time.Duration, disableFoundRetries bool, client *oci_database_management.DbManagementClient) (*string, error) {
func getErrorFromDatabaseManagementAutonomousDatabaseAutonomousDatabaseDbmFeaturesManagementWorkRequest(client *oci_database_management.DbManagementClient, workId *string, retryPolicy *oci_common.RetryPolicy, entityType string, action oci_database_management.WorkRequestResourceActionTypeEnum) error {
	response, err := client.ListWorkRequestErrors(context.Background(),
func (s *DatabaseManagementAutonomousDatabaseAutonomousDatabaseDbmFeaturesManagementResourceCrud) Update() error {
	var operation bool
func (s *DatabaseManagementAutonomousDatabaseAutonomousDatabaseDbmFeaturesManagementResourceCrud) Delete() error {
	var operation bool
func (s *DatabaseManagementAutonomousDatabaseAutonomousDatabaseDbmFeaturesManagementResourceCrud) SetData() error {
	return nil
func (s *DatabaseManagementAutonomousDatabaseAutonomousDatabaseDbmFeaturesManagementResourceCrud) mapToAutonomousDatabaseFeatureDetails(fieldKeyFormat string) (oci_database_management.AutonomousDatabaseFeatureDetails, error) {
	var baseObject oci_database_management.AutonomousDatabaseFeatureDetails
func (s *DatabaseManagementAutonomousDatabaseAutonomousDatabaseDbmFeaturesManagementResourceCrud) mapToConnectorDetails(fieldKeyFormat string) (oci_database_management.ConnectorDetails, error) {
	var baseObject oci_database_management.ConnectorDetails
func (s *DatabaseManagementAutonomousDatabaseAutonomousDatabaseDbmFeaturesManagementResourceCrud) mapToDatabaseConnectionCredentials(fieldKeyFormat string) (oci_database_management.DatabaseConnectionCredentials, error) {
	var baseObject oci_database_management.DatabaseConnectionCredentials
func (s *DatabaseManagementAutonomousDatabaseAutonomousDatabaseDbmFeaturesManagementResourceCrud) mapToDatabaseConnectionDetails(fieldKeyFormat string) (oci_database_management.DatabaseConnectionDetails, error) {
	result := oci_database_management.DatabaseConnectionDetails{}
func (s *DatabaseManagementAutonomousDatabaseAutonomousDatabaseDbmFeaturesManagementResourceCrud) mapToDatabaseConnectionStringDetails(fieldKeyFormat string) (oci_database_management.DatabaseConnectionStringDetails, error) {
	var baseObject oci_database_management.DatabaseConnectionStringDetails

=== ./internal/service/database_management/database_management_managed_databases_user_proxy_users_data_source.go ===
func DatabaseManagementManagedDatabasesUserProxyUsersDataSource() *schema.Resource {
	return &schema.Resource{
func readDatabaseManagementManagedDatabasesUserProxyUsers(d *schema.ResourceData, m interface{}) error {
	sync := &DatabaseManagementManagedDatabasesUserProxyUsersDataSourceCrud{}
func (s *DatabaseManagementManagedDatabasesUserProxyUsersDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *DatabaseManagementManagedDatabasesUserProxyUsersDataSourceCrud) Get() error {
	request := oci_database_management.ListProxyUsersRequest{}
func (s *DatabaseManagementManagedDatabasesUserProxyUsersDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/database_management/database_management_external_db_system_database_managements_management_resource.go ===
func DatabaseManagementExternalDbSystemDatabaseManagementsManagementResource() *schema.Resource {
	return &schema.Resource{
func createDatabaseManagementExternalDbSystemDatabaseManagementsManagement(d *schema.ResourceData, m interface{}) error {
	sync := &DatabaseManagementExternalDbSystemDatabaseManagementsManagementResourceCrud{}
func readDatabaseManagementExternalDbSystemDatabaseManagementsManagement(d *schema.ResourceData, m interface{}) error {
	return nil
func updateDatabaseManagementExternalDbSystemDatabaseManagementsManagement(d *schema.ResourceData, m interface{}) error {
	sync := &DatabaseManagementExternalDbSystemDatabaseManagementsManagementResourceCrud{}
func deleteDatabaseManagementExternalDbSystemDatabaseManagementsManagement(d *schema.ResourceData, m interface{}) error {
	sync := &DatabaseManagementExternalDbSystemDatabaseManagementsManagementResourceCrud{}
func (s *DatabaseManagementExternalDbSystemDatabaseManagementsManagementResourceCrud) ID() string {
	return tfresource.GenerateDataSourceHashID("DatabaseManagementExternalDbSystemDatabaseManagementsManagementResource-", DatabaseManagementExternalDbSystemDatabaseManagementsManagementResource(), s.D)
func (s *DatabaseManagementExternalDbSystemDatabaseManagementsManagementResourceCrud) Create() error {
	var operation bool
func (s *DatabaseManagementExternalDbSystemDatabaseManagementsManagementResourceCrud) getExternalDbSystemDatabaseManagementsManagementFromWorkRequest(workId *string, retryPolicy *oci_common.RetryPolicy,
	actionTypeEnum oci_database_management.WorkRequestResourceActionTypeEnum, timeout time.Duration) error {
func externalDbSystemDatabaseManagementsManagementWaitForWorkRequest(wId *string, entityType string, action oci_database_management.WorkRequestResourceActionTypeEnum,
	timeout time.Duration, disableFoundRetries bool, client *oci_database_management.DbManagementClient) (*string, error) {
func getErrorFromDatabaseManagementExternalDbSystemDatabaseManagementsManagementWorkRequest(client *oci_database_management.DbManagementClient, workId *string, retryPolicy *oci_common.RetryPolicy, entityType string, action oci_database_management.WorkRequestResourceActionTypeEnum) error {
	response, err := client.ListWorkRequestErrors(context.Background(),
func (s *DatabaseManagementExternalDbSystemDatabaseManagementsManagementResourceCrud) Update() error {
	var operation bool
func (s *DatabaseManagementExternalDbSystemDatabaseManagementsManagementResourceCrud) Delete() error {
	var operation bool
func (s *DatabaseManagementExternalDbSystemDatabaseManagementsManagementResourceCrud) SetData() error {
	return nil

=== ./internal/service/database_management/database_management_external_listener_data_source.go ===
func DatabaseManagementExternalListenerDataSource() *schema.Resource {
	fieldMap := make(map[string]*schema.Schema)
func readSingularDatabaseManagementExternalListener(d *schema.ResourceData, m interface{}) error {
	sync := &DatabaseManagementExternalListenerDataSourceCrud{}
func (s *DatabaseManagementExternalListenerDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *DatabaseManagementExternalListenerDataSourceCrud) Get() error {
	request := oci_database_management.GetExternalListenerRequest{}
func (s *DatabaseManagementExternalListenerDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/database_management/database_management_external_exadata_storage_connector_resource.go ===
func DatabaseManagementExternalExadataStorageConnectorResource() *schema.Resource {
	return &schema.Resource{
func createDatabaseManagementExternalExadataStorageConnector(d *schema.ResourceData, m interface{}) error {
	sync := &DatabaseManagementExternalExadataStorageConnectorResourceCrud{}
func readDatabaseManagementExternalExadataStorageConnector(d *schema.ResourceData, m interface{}) error {
	sync := &DatabaseManagementExternalExadataStorageConnectorResourceCrud{}
func updateDatabaseManagementExternalExadataStorageConnector(d *schema.ResourceData, m interface{}) error {
	sync := &DatabaseManagementExternalExadataStorageConnectorResourceCrud{}
func deleteDatabaseManagementExternalExadataStorageConnector(d *schema.ResourceData, m interface{}) error {
	sync := &DatabaseManagementExternalExadataStorageConnectorResourceCrud{}
func (s *DatabaseManagementExternalExadataStorageConnectorResourceCrud) ID() string {
	return *s.Res.Id
func (s *DatabaseManagementExternalExadataStorageConnectorResourceCrud) CreatedPending() []string {
	return []string{
func (s *DatabaseManagementExternalExadataStorageConnectorResourceCrud) CreatedTarget() []string {
	return []string{
func (s *DatabaseManagementExternalExadataStorageConnectorResourceCrud) DeletedPending() []string {
	return []string{
func (s *DatabaseManagementExternalExadataStorageConnectorResourceCrud) DeletedTarget() []string {
	return []string{
func (s *DatabaseManagementExternalExadataStorageConnectorResourceCrud) Create() error {
	request := oci_database_management.CreateExternalExadataStorageConnectorRequest{}
func (s *DatabaseManagementExternalExadataStorageConnectorResourceCrud) Get() error {
	request := oci_database_management.GetExternalExadataStorageConnectorRequest{}
func (s *DatabaseManagementExternalExadataStorageConnectorResourceCrud) Update() error {
	request := oci_database_management.UpdateExternalExadataStorageConnectorRequest{}
func (s *DatabaseManagementExternalExadataStorageConnectorResourceCrud) Delete() error {
	request := oci_database_management.DeleteExternalExadataStorageConnectorRequest{}
func (s *DatabaseManagementExternalExadataStorageConnectorResourceCrud) SetData() error {
	s.D.Set("additional_details", s.Res.AdditionalDetails)
func (s *DatabaseManagementExternalExadataStorageConnectorResourceCrud) mapToRestCredential(fieldKeyFormat string) (oci_database_management.RestCredential, error) {
	result := oci_database_management.RestCredential{}

=== ./internal/service/database_management/database_management_managed_database_table_statistics_data_source.go ===
func DatabaseManagementManagedDatabaseTableStatisticsDataSource() *schema.Resource {
	return &schema.Resource{
func readDatabaseManagementManagedDatabaseTableStatistics(d *schema.ResourceData, m interface{}) error {
	sync := &DatabaseManagementManagedDatabaseTableStatisticsDataSourceCrud{}
func (s *DatabaseManagementManagedDatabaseTableStatisticsDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *DatabaseManagementManagedDatabaseTableStatisticsDataSourceCrud) Get() error {
	request := oci_database_management.ListTableStatisticsRequest{}
func (s *DatabaseManagementManagedDatabaseTableStatisticsDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/database_management/database_management_managed_database_attention_log_count_data_source.go ===
func DatabaseManagementManagedDatabaseAttentionLogCountDataSource() *schema.Resource {
	return &schema.Resource{
func readSingularDatabaseManagementManagedDatabaseAttentionLogCount(d *schema.ResourceData, m interface{}) error {
	sync := &DatabaseManagementManagedDatabaseAttentionLogCountDataSourceCrud{}
func (s *DatabaseManagementManagedDatabaseAttentionLogCountDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *DatabaseManagementManagedDatabaseAttentionLogCountDataSourceCrud) Get() error {
	request := oci_database_management.SummarizeAttentionLogCountsRequest{}
func (s *DatabaseManagementManagedDatabaseAttentionLogCountDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/database_management/database_management_managed_database_optimizer_statistics_collection_aggregations_data_source.go ===
func DatabaseManagementManagedDatabaseOptimizerStatisticsCollectionAggregationsDataSource() *schema.Resource {
	return &schema.Resource{
func readDatabaseManagementManagedDatabaseOptimizerStatisticsCollectionAggregations(d *schema.ResourceData, m interface{}) error {
	sync := &DatabaseManagementManagedDatabaseOptimizerStatisticsCollectionAggregationsDataSourceCrud{}
func (s *DatabaseManagementManagedDatabaseOptimizerStatisticsCollectionAggregationsDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *DatabaseManagementManagedDatabaseOptimizerStatisticsCollectionAggregationsDataSourceCrud) Get() error {
	request := oci_database_management.ListOptimizerStatisticsCollectionAggregationsRequest{}
func (s *DatabaseManagementManagedDatabaseOptimizerStatisticsCollectionAggregationsDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/database_management/database_management_external_exadata_storage_grid_resource.go ===
func DatabaseManagementExternalExadataStorageGridResource() *schema.Resource {
	return &schema.Resource{
func createDatabaseManagementExternalExadataStorageGrid(d *schema.ResourceData, m interface{}) error {
	sync := &DatabaseManagementExternalExadataStorageGridResourceCrud{}
func readDatabaseManagementExternalExadataStorageGrid(d *schema.ResourceData, m interface{}) error {
	sync := &DatabaseManagementExternalExadataStorageGridResourceCrud{}
func updateDatabaseManagementExternalExadataStorageGrid(d *schema.ResourceData, m interface{}) error {
	sync := &DatabaseManagementExternalExadataStorageGridResourceCrud{}
func deleteDatabaseManagementExternalExadataStorageGrid(d *schema.ResourceData, m interface{}) error {
	return nil
func (s *DatabaseManagementExternalExadataStorageGridResourceCrud) ID() string {
	return *s.Res.Id
func (s *DatabaseManagementExternalExadataStorageGridResourceCrud) CreatedPending() []string {
	return []string{
func (s *DatabaseManagementExternalExadataStorageGridResourceCrud) CreatedTarget() []string {
	return []string{
func (s *DatabaseManagementExternalExadataStorageGridResourceCrud) DeletedPending() []string {
	return []string{
func (s *DatabaseManagementExternalExadataStorageGridResourceCrud) DeletedTarget() []string {
	return []string{
func (s *DatabaseManagementExternalExadataStorageGridResourceCrud) Create() error {
	request := oci_database_management.UpdateExternalExadataStorageGridRequest{}
func (s *DatabaseManagementExternalExadataStorageGridResourceCrud) Get() error {
	request := oci_database_management.GetExternalExadataStorageGridRequest{}
func (s *DatabaseManagementExternalExadataStorageGridResourceCrud) Update() error {
	request := oci_database_management.UpdateExternalExadataStorageGridRequest{}
func (s *DatabaseManagementExternalExadataStorageGridResourceCrud) SetData() error {
	s.D.Set("additional_details", s.Res.AdditionalDetails)

=== ./internal/service/database_management/database_management_external_db_system_connector_data_source.go ===
func DatabaseManagementExternalDbSystemConnectorDataSource() *schema.Resource {
	fieldMap := make(map[string]*schema.Schema)
func readSingularDatabaseManagementExternalDbSystemConnector(d *schema.ResourceData, m interface{}) error {
	sync := &DatabaseManagementExternalDbSystemConnectorDataSourceCrud{}
func (s *DatabaseManagementExternalDbSystemConnectorDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *DatabaseManagementExternalDbSystemConnectorDataSourceCrud) Get() error {
	request := oci_database_management.GetExternalDbSystemConnectorRequest{}
func (s *DatabaseManagementExternalDbSystemConnectorDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/database_management/database_management_managed_database_alert_log_counts_data_source.go ===
func DatabaseManagementManagedDatabaseAlertLogCountsDataSource() *schema.Resource {
	return &schema.Resource{
func readDatabaseManagementManagedDatabaseAlertLogCounts(d *schema.ResourceData, m interface{}) error {
	sync := &DatabaseManagementManagedDatabaseAlertLogCountsDataSourceCrud{}
func (s *DatabaseManagementManagedDatabaseAlertLogCountsDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *DatabaseManagementManagedDatabaseAlertLogCountsDataSourceCrud) Get() error {
	request := oci_database_management.SummarizeAlertLogCountsRequest{}
func (s *DatabaseManagementManagedDatabaseAlertLogCountsDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/database_management/database_management_managed_database_groups_data_source.go ===
func DatabaseManagementManagedDatabaseGroupsDataSource() *schema.Resource {
	return &schema.Resource{
func readDatabaseManagementManagedDatabaseGroups(d *schema.ResourceData, m interface{}) error {
	sync := &DatabaseManagementManagedDatabaseGroupsDataSourceCrud{}
func (s *DatabaseManagementManagedDatabaseGroupsDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *DatabaseManagementManagedDatabaseGroupsDataSourceCrud) Get() error {
	request := oci_database_management.ListManagedDatabaseGroupsRequest{}
func (s *DatabaseManagementManagedDatabaseGroupsDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/database_management/database_management_managed_databases_reset_database_parameter_resource.go ===
func DatabaseManagementManagedDatabasesResetDatabaseParameterResource() *schema.Resource {
	return &schema.Resource{
func createDatabaseManagementManagedDatabasesResetDatabaseParameter(d *schema.ResourceData, m interface{}) error {
	sync := &DatabaseManagementManagedDatabasesResetDatabaseParameterResourceCrud{}
func readDatabaseManagementManagedDatabasesResetDatabaseParameter(d *schema.ResourceData, m interface{}) error {
	return nil
func deleteDatabaseManagementManagedDatabasesResetDatabaseParameter(d *schema.ResourceData, m interface{}) error {
	return nil
func (s *DatabaseManagementManagedDatabasesResetDatabaseParameterResourceCrud) ID() string {
	return *s.Req.ManagedDatabaseId
func (s *DatabaseManagementManagedDatabasesResetDatabaseParameterResourceCrud) Create() error {
	request := oci_database_management.ResetDatabaseParametersRequest{}
func (s *DatabaseManagementManagedDatabasesResetDatabaseParameterResourceCrud) SetData() error {
	return nil
func (s *DatabaseManagementManagedDatabasesResetDatabaseParameterResourceCrud) mapToDatabaseCredentialDetails(fieldKeyFormat string) (oci_database_management.DatabaseCredentialDetails, error) {
	var baseObject oci_database_management.DatabaseCredentialDetails
func (s *DatabaseManagementManagedDatabasesResetDatabaseParameterResourceCrud) mapToDatabaseCredentials(fieldKeyFormat string) (oci_database_management.DatabaseCredentials, error) {
	result := oci_database_management.DatabaseCredentials{}

=== ./internal/service/database_management/database_management_managed_database_user_roles_data_source.go ===
func DatabaseManagementManagedDatabaseUserRolesDataSource() *schema.Resource {
	return &schema.Resource{
func readDatabaseManagementManagedDatabaseUserRoles(d *schema.ResourceData, m interface{}) error {
	sync := &DatabaseManagementManagedDatabaseUserRolesDataSourceCrud{}
func (s *DatabaseManagementManagedDatabaseUserRolesDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *DatabaseManagementManagedDatabaseUserRolesDataSourceCrud) Get() error {
	request := oci_database_management.ListRolesRequest{}
func (s *DatabaseManagementManagedDatabaseUserRolesDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/database_management/database_management_external_exadata_storage_connector_data_source.go ===
func DatabaseManagementExternalExadataStorageConnectorDataSource() *schema.Resource {
	fieldMap := make(map[string]*schema.Schema)
func readSingularDatabaseManagementExternalExadataStorageConnector(d *schema.ResourceData, m interface{}) error {
	sync := &DatabaseManagementExternalExadataStorageConnectorDataSourceCrud{}
func (s *DatabaseManagementExternalExadataStorageConnectorDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *DatabaseManagementExternalExadataStorageConnectorDataSourceCrud) Get() error {
	request := oci_database_management.GetExternalExadataStorageConnectorRequest{}
func (s *DatabaseManagementExternalExadataStorageConnectorDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/database_management/database_management_managed_database_resource.go ===
func DatabaseManagementManagedDatabaseResource() *schema.Resource {
	return &schema.Resource{
func createDatabaseManagementManagedDatabase(d *schema.ResourceData, m interface{}) error {
	sync := &DatabaseManagementManagedDatabaseResourceCrud{}
func readDatabaseManagementManagedDatabase(d *schema.ResourceData, m interface{}) error {
	sync := &DatabaseManagementManagedDatabaseResourceCrud{}
func updateDatabaseManagementManagedDatabase(d *schema.ResourceData, m interface{}) error {
	sync := &DatabaseManagementManagedDatabaseResourceCrud{}
func deleteDatabaseManagementManagedDatabase(d *schema.ResourceData, m interface{}) error {
	return nil
func (s *DatabaseManagementManagedDatabaseResourceCrud) ID() string {
	return *s.Res.Id
func (s *DatabaseManagementManagedDatabaseResourceCrud) Create() error {
	request := oci_database_management.UpdateManagedDatabaseRequest{}
func (s *DatabaseManagementManagedDatabaseResourceCrud) Get() error {
	request := oci_database_management.GetManagedDatabaseRequest{}
func (s *DatabaseManagementManagedDatabaseResourceCrud) Update() error {
	request := oci_database_management.UpdateManagedDatabaseRequest{}
func (s *DatabaseManagementManagedDatabaseResourceCrud) SetData() error {
	s.D.Set("additional_details", s.Res.AdditionalDetails)

=== ./internal/service/database_management/database_management_managed_databases_asm_property_data_source.go ===
func DatabaseManagementManagedDatabasesAsmPropertyDataSource() *schema.Resource {
	return &schema.Resource{
func readSingularDatabaseManagementManagedDatabasesAsmProperty(d *schema.ResourceData, m interface{}) error {
	sync := &DatabaseManagementManagedDatabasesAsmPropertyDataSourceCrud{}
func (s *DatabaseManagementManagedDatabasesAsmPropertyDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *DatabaseManagementManagedDatabasesAsmPropertyDataSourceCrud) Get() error {
	request := oci_database_management.ListAsmPropertiesRequest{}
func (s *DatabaseManagementManagedDatabasesAsmPropertyDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/database_management/database_management_external_asm_instance_data_source.go ===
func DatabaseManagementExternalAsmInstanceDataSource() *schema.Resource {
	fieldMap := make(map[string]*schema.Schema)
func readSingularDatabaseManagementExternalAsmInstance(d *schema.ResourceData, m interface{}) error {
	sync := &DatabaseManagementExternalAsmInstanceDataSourceCrud{}
func (s *DatabaseManagementExternalAsmInstanceDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *DatabaseManagementExternalAsmInstanceDataSourceCrud) Get() error {
	request := oci_database_management.GetExternalAsmInstanceRequest{}
func (s *DatabaseManagementExternalAsmInstanceDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/database_management/database_management_managed_database_user_object_privileges_data_source.go ===
func DatabaseManagementManagedDatabaseUserObjectPrivilegesDataSource() *schema.Resource {
	return &schema.Resource{
func readDatabaseManagementManagedDatabaseUserObjectPrivileges(d *schema.ResourceData, m interface{}) error {
	sync := &DatabaseManagementManagedDatabaseUserObjectPrivilegesDataSourceCrud{}
func (s *DatabaseManagementManagedDatabaseUserObjectPrivilegesDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *DatabaseManagementManagedDatabaseUserObjectPrivilegesDataSourceCrud) Get() error {
	request := oci_database_management.ListObjectPrivilegesRequest{}
func (s *DatabaseManagementManagedDatabaseUserObjectPrivilegesDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/database_management/database_management_external_asm_configuration_data_source.go ===
func DatabaseManagementExternalAsmConfigurationDataSource() *schema.Resource {
	return &schema.Resource{
func readSingularDatabaseManagementExternalAsmConfiguration(d *schema.ResourceData, m interface{}) error {
	sync := &DatabaseManagementExternalAsmConfigurationDataSourceCrud{}
func (s *DatabaseManagementExternalAsmConfigurationDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *DatabaseManagementExternalAsmConfigurationDataSourceCrud) Get() error {
	request := oci_database_management.GetExternalAsmConfigurationRequest{}
func (s *DatabaseManagementExternalAsmConfigurationDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/database_management/database_management_external_db_system_connectors_data_source.go ===
func DatabaseManagementExternalDbSystemConnectorsDataSource() *schema.Resource {
	return &schema.Resource{
func readDatabaseManagementExternalDbSystemConnectors(d *schema.ResourceData, m interface{}) error {
	sync := &DatabaseManagementExternalDbSystemConnectorsDataSourceCrud{}
func (s *DatabaseManagementExternalDbSystemConnectorsDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *DatabaseManagementExternalDbSystemConnectorsDataSourceCrud) Get() error {
	request := oci_database_management.ListExternalDbSystemConnectorsRequest{}
func (s *DatabaseManagementExternalDbSystemConnectorsDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/database_management/database_management_managed_databases_database_parameter_data_source.go ===
func DatabaseManagementManagedDatabasesDatabaseParameterDataSource() *schema.Resource {
	return &schema.Resource{
func readSingularDatabaseManagementManagedDatabasesDatabaseParameter(d *schema.ResourceData, m interface{}) error {
	sync := &DatabaseManagementManagedDatabasesDatabaseParameterDataSourceCrud{}
func (s *DatabaseManagementManagedDatabasesDatabaseParameterDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *DatabaseManagementManagedDatabasesDatabaseParameterDataSourceCrud) Get() error {
	request := oci_database_management.ListDatabaseParametersRequest{}
func (s *DatabaseManagementManagedDatabasesDatabaseParameterDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/database_management/database_management_external_asm_instances_data_source.go ===
func DatabaseManagementExternalAsmInstancesDataSource() *schema.Resource {
	return &schema.Resource{
func readDatabaseManagementExternalAsmInstances(d *schema.ResourceData, m interface{}) error {
	sync := &DatabaseManagementExternalAsmInstancesDataSourceCrud{}
func (s *DatabaseManagementExternalAsmInstancesDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *DatabaseManagementExternalAsmInstancesDataSourceCrud) Get() error {
	request := oci_database_management.ListExternalAsmInstancesRequest{}
func (s *DatabaseManagementExternalAsmInstancesDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/database_management/database_management_db_management_private_endpoints_data_source.go ===
func DatabaseManagementDbManagementPrivateEndpointsDataSource() *schema.Resource {
	return &schema.Resource{
func readDatabaseManagementDbManagementPrivateEndpoints(d *schema.ResourceData, m interface{}) error {
	sync := &DatabaseManagementDbManagementPrivateEndpointsDataSourceCrud{}
func (s *DatabaseManagementDbManagementPrivateEndpointsDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *DatabaseManagementDbManagementPrivateEndpointsDataSourceCrud) Get() error {
	request := oci_database_management.ListDbManagementPrivateEndpointsRequest{}
func (s *DatabaseManagementDbManagementPrivateEndpointsDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/database_management/database_management_managed_database_sql_tuning_advisor_tasks_recommendation_data_source.go ===
func DatabaseManagementManagedDatabaseSqlTuningAdvisorTasksRecommendationDataSource() *schema.Resource {
	return &schema.Resource{
func readSingularDatabaseManagementManagedDatabaseSqlTuningAdvisorTasksRecommendation(d *schema.ResourceData, m interface{}) error {
	sync := &DatabaseManagementManagedDatabaseSqlTuningAdvisorTasksRecommendationDataSourceCrud{}
func (s *DatabaseManagementManagedDatabaseSqlTuningAdvisorTasksRecommendationDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *DatabaseManagementManagedDatabaseSqlTuningAdvisorTasksRecommendationDataSourceCrud) Get() error {
	request := oci_database_management.ListSqlTuningAdvisorTaskRecommendationsRequest{}
func (s *DatabaseManagementManagedDatabaseSqlTuningAdvisorTasksRecommendationDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/database_management/database_management_db_management_private_endpoint_associated_database_data_source.go ===
func DatabaseManagementDbManagementPrivateEndpointAssociatedDatabaseDataSource() *schema.Resource {
	return &schema.Resource{
func readSingularDatabaseManagementDbManagementPrivateEndpointAssociatedDatabase(d *schema.ResourceData, m interface{}) error {
	sync := &DatabaseManagementDbManagementPrivateEndpointAssociatedDatabaseDataSourceCrud{}
func (s *DatabaseManagementDbManagementPrivateEndpointAssociatedDatabaseDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *DatabaseManagementDbManagementPrivateEndpointAssociatedDatabaseDataSourceCrud) Get() error {
	request := oci_database_management.ListAssociatedDatabasesRequest{}
func (s *DatabaseManagementDbManagementPrivateEndpointAssociatedDatabaseDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/database_management/database_management_managed_databases_user_system_privileges_data_source.go ===
func DatabaseManagementManagedDatabasesUserSystemPrivilegesDataSource() *schema.Resource {
	return &schema.Resource{
func readDatabaseManagementManagedDatabasesUserSystemPrivileges(d *schema.ResourceData, m interface{}) error {
	sync := &DatabaseManagementManagedDatabasesUserSystemPrivilegesDataSourceCrud{}
func (s *DatabaseManagementManagedDatabasesUserSystemPrivilegesDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *DatabaseManagementManagedDatabasesUserSystemPrivilegesDataSourceCrud) Get() error {
	request := oci_database_management.ListSystemPrivilegesRequest{}
func (s *DatabaseManagementManagedDatabasesUserSystemPrivilegesDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/database_management/database_management_external_asms_data_source.go ===
func DatabaseManagementExternalAsmsDataSource() *schema.Resource {
	return &schema.Resource{
func readDatabaseManagementExternalAsms(d *schema.ResourceData, m interface{}) error {
	sync := &DatabaseManagementExternalAsmsDataSourceCrud{}
func (s *DatabaseManagementExternalAsmsDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *DatabaseManagementExternalAsmsDataSourceCrud) Get() error {
	request := oci_database_management.ListExternalAsmsRequest{}
func (s *DatabaseManagementExternalAsmsDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/database_management/database_management_named_credentials_data_source.go ===
func DatabaseManagementNamedCredentialsDataSource() *schema.Resource {
	return &schema.Resource{
func readDatabaseManagementNamedCredentials(d *schema.ResourceData, m interface{}) error {
	sync := &DatabaseManagementNamedCredentialsDataSourceCrud{}
func (s *DatabaseManagementNamedCredentialsDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *DatabaseManagementNamedCredentialsDataSourceCrud) Get() error {
	request := oci_database_management.ListNamedCredentialsRequest{}
func (s *DatabaseManagementNamedCredentialsDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/database_management/database_management_external_asm_instance_resource.go ===
func DatabaseManagementExternalAsmInstanceResource() *schema.Resource {
	return &schema.Resource{
func createDatabaseManagementExternalAsmInstance(d *schema.ResourceData, m interface{}) error {
	sync := &DatabaseManagementExternalAsmInstanceResourceCrud{}
func readDatabaseManagementExternalAsmInstance(d *schema.ResourceData, m interface{}) error {
	sync := &DatabaseManagementExternalAsmInstanceResourceCrud{}
func updateDatabaseManagementExternalAsmInstance(d *schema.ResourceData, m interface{}) error {
	sync := &DatabaseManagementExternalAsmInstanceResourceCrud{}
func deleteDatabaseManagementExternalAsmInstance(d *schema.ResourceData, m interface{}) error {
	return nil
func (s *DatabaseManagementExternalAsmInstanceResourceCrud) ID() string {
	return *s.Res.Id
func (s *DatabaseManagementExternalAsmInstanceResourceCrud) CreatedPending() []string {
	return []string{
func (s *DatabaseManagementExternalAsmInstanceResourceCrud) CreatedTarget() []string {
	return []string{
func (s *DatabaseManagementExternalAsmInstanceResourceCrud) DeletedPending() []string {
	return []string{
func (s *DatabaseManagementExternalAsmInstanceResourceCrud) DeletedTarget() []string {
	return []string{
func (s *DatabaseManagementExternalAsmInstanceResourceCrud) Create() error {
	request := oci_database_management.UpdateExternalAsmInstanceRequest{}
func (s *DatabaseManagementExternalAsmInstanceResourceCrud) Get() error {
	request := oci_database_management.GetExternalAsmInstanceRequest{}
func (s *DatabaseManagementExternalAsmInstanceResourceCrud) Update() error {
	request := oci_database_management.UpdateExternalAsmInstanceRequest{}
func (s *DatabaseManagementExternalAsmInstanceResourceCrud) SetData() error {
	if s.Res.AdrHomeDirectory != nil {

=== ./internal/service/database_management/database_management_managed_databases_data_source.go ===
func DatabaseManagementManagedDatabasesDataSource() *schema.Resource {
	return &schema.Resource{
func readDatabaseManagementManagedDatabases(d *schema.ResourceData, m interface{}) error {
	sync := &DatabaseManagementManagedDatabasesDataSourceCrud{}
func (s *DatabaseManagementManagedDatabasesDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *DatabaseManagementManagedDatabasesDataSourceCrud) Get() error {
	request := oci_database_management.ListManagedDatabasesRequest{}
func (s *DatabaseManagementManagedDatabasesDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/database_management/database_management_managed_database_addm_task_data_source.go ===
func DatabaseManagementManagedDatabaseAddmTaskDataSource() *schema.Resource {
	return &schema.Resource{
func readSingularDatabaseManagementManagedDatabaseAddmTask(d *schema.ResourceData, m interface{}) error {
	sync := &DatabaseManagementManagedDatabaseAddmTaskDataSourceCrud{}
func (s *DatabaseManagementManagedDatabaseAddmTaskDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *DatabaseManagementManagedDatabaseAddmTaskDataSourceCrud) Get() error {
	request := oci_database_management.AddmTasksRequest{}
func (s *DatabaseManagementManagedDatabaseAddmTaskDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/database_management/register_resource.go ===
func RegisterResource() {
	tfresource.RegisterResource("oci_database_management_autonomous_database_autonomous_database_dbm_features_management", DatabaseManagementAutonomousDatabaseAutonomousDatabaseDbmFeaturesManagementResource())

=== ./internal/service/database_management/database_management_managed_my_sql_databases_data_source.go ===
func DatabaseManagementManagedMySqlDatabasesDataSource() *schema.Resource {
	return &schema.Resource{
func readDatabaseManagementManagedMySqlDatabases(d *schema.ResourceData, m interface{}) error {
	sync := &DatabaseManagementManagedMySqlDatabasesDataSourceCrud{}
func (s *DatabaseManagementManagedMySqlDatabasesDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *DatabaseManagementManagedMySqlDatabasesDataSourceCrud) Get() error {
	request := oci_database_management.ListManagedMySqlDatabasesRequest{}
func (s *DatabaseManagementManagedMySqlDatabasesDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/database_management/database_management_managed_database_sql_tuning_advisor_tasks_finding_data_source.go ===
func DatabaseManagementManagedDatabaseSqlTuningAdvisorTasksFindingDataSource() *schema.Resource {
	return &schema.Resource{
func readSingularDatabaseManagementManagedDatabaseSqlTuningAdvisorTasksFinding(d *schema.ResourceData, m interface{}) error {
	sync := &DatabaseManagementManagedDatabaseSqlTuningAdvisorTasksFindingDataSourceCrud{}
func (s *DatabaseManagementManagedDatabaseSqlTuningAdvisorTasksFindingDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *DatabaseManagementManagedDatabaseSqlTuningAdvisorTasksFindingDataSourceCrud) Get() error {
	request := oci_database_management.ListSqlTuningAdvisorTaskFindingsRequest{}
func (s *DatabaseManagementManagedDatabaseSqlTuningAdvisorTasksFindingDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/database_management/database_management_external_cluster_resource.go ===
func DatabaseManagementExternalClusterResource() *schema.Resource {
	return &schema.Resource{
func createDatabaseManagementExternalCluster(d *schema.ResourceData, m interface{}) error {
	sync := &DatabaseManagementExternalClusterResourceCrud{}
func readDatabaseManagementExternalCluster(d *schema.ResourceData, m interface{}) error {
	sync := &DatabaseManagementExternalClusterResourceCrud{}
func updateDatabaseManagementExternalCluster(d *schema.ResourceData, m interface{}) error {
	sync := &DatabaseManagementExternalClusterResourceCrud{}
func deleteDatabaseManagementExternalCluster(d *schema.ResourceData, m interface{}) error {
	return nil
func (s *DatabaseManagementExternalClusterResourceCrud) ID() string {
	return *s.Res.Id
func (s *DatabaseManagementExternalClusterResourceCrud) CreatedPending() []string {
	return []string{
func (s *DatabaseManagementExternalClusterResourceCrud) CreatedTarget() []string {
	return []string{
func (s *DatabaseManagementExternalClusterResourceCrud) DeletedPending() []string {
	return []string{
func (s *DatabaseManagementExternalClusterResourceCrud) DeletedTarget() []string {
	return []string{
func (s *DatabaseManagementExternalClusterResourceCrud) Create() error {
	request := oci_database_management.UpdateExternalClusterRequest{}
func (s *DatabaseManagementExternalClusterResourceCrud) getExternalClusterFromWorkRequest(workId *string, retryPolicy *oci_common.RetryPolicy,
	actionTypeEnum oci_database_management.WorkRequestResourceActionTypeEnum, timeout time.Duration) error {
func externalClusterWaitForWorkRequest(wId *string, entityType string, action oci_database_management.WorkRequestResourceActionTypeEnum,
	timeout time.Duration, disableFoundRetries bool, client *oci_database_management.DbManagementClient) (*string, error) {
func getErrorFromDatabaseManagementExternalClusterWorkRequest(client *oci_database_management.DbManagementClient, workId *string, retryPolicy *oci_common.RetryPolicy, entityType string, action oci_database_management.WorkRequestResourceActionTypeEnum) error {
	response, err := client.ListWorkRequestErrors(context.Background(),
func (s *DatabaseManagementExternalClusterResourceCrud) Get() error {
	request := oci_database_management.GetExternalClusterRequest{}
func (s *DatabaseManagementExternalClusterResourceCrud) Update() error {
	request := oci_database_management.UpdateExternalClusterRequest{}
func (s *DatabaseManagementExternalClusterResourceCrud) SetData() error {
	s.D.Set("additional_details", s.Res.AdditionalDetails)

=== ./internal/service/database_management/database_management_external_listener_services_data_source.go ===
func DatabaseManagementExternalListenerServicesDataSource() *schema.Resource {
	return &schema.Resource{
func readDatabaseManagementExternalListenerServices(d *schema.ResourceData, m interface{}) error {
	sync := &DatabaseManagementExternalListenerServicesDataSourceCrud{}
func (s *DatabaseManagementExternalListenerServicesDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *DatabaseManagementExternalListenerServicesDataSourceCrud) Get() error {
	request := oci_database_management.ListExternalListenerServicesRequest{}
func (s *DatabaseManagementExternalListenerServicesDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/kms/kms_vault_data_source.go ===
func KmsVaultDataSource() *schema.Resource {
	fieldMap := make(map[string]*schema.Schema)
func readSingularKmsVault(d *schema.ResourceData, m interface{}) error {
	sync := &KmsVaultDataSourceCrud{}
func (s *KmsVaultDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *KmsVaultDataSourceCrud) Get() error {
	request := oci_kms.GetVaultRequest{}
func (s *KmsVaultDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/kms/kms_ekms_private_endpoints_data_source.go ===
func KmsEkmsPrivateEndpointsDataSource() *schema.Resource {
	return &schema.Resource{
func readKmsEkmsPrivateEndpoints(d *schema.ResourceData, m interface{}) error {
	sync := &KmsEkmsPrivateEndpointsDataSourceCrud{}
func (s *KmsEkmsPrivateEndpointsDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *KmsEkmsPrivateEndpointsDataSourceCrud) Get() error {
	request := oci_kms.ListEkmsPrivateEndpointsRequest{}
func (s *KmsEkmsPrivateEndpointsDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/kms/kms_vault_replication_resource.go ===
func KmsVaultReplicationResource() *schema.Resource {
	return &schema.Resource{
func createKmsVaultReplica(d *schema.ResourceData, m interface{}) error {
	sync := &KmsVaultReplicaResourceCrud{}
func readKmsVaultReplica(d *schema.ResourceData, m interface{}) error {
	sync := &KmsVaultReplicaResourceCrud{}
func updateKmsVaultReplica(d *schema.ResourceData, m interface{}) error {
	sync := &KmsVaultReplicaResourceCrud{}
func deleteKmsVaultReplica(d *schema.ResourceData, m interface{}) error {
	sync := &KmsVaultReplicaResourceCrud{}
func (s *KmsVaultReplicaResourceCrud) ID() string {
	return *s.Res.OpcRequestId
func (s *KmsVaultReplicaResourceCrud) Create() error {
	replicaRegionStr := ""
func (s *KmsVaultReplicaResourceCrud) Get() error {
	request := oci_kms.ListVaultReplicasRequest{}
func (s *KmsVaultReplicaResourceCrud) Update() error {

func (s *KmsVaultReplicaResourceCrud) Delete() error {
	replicaRegionStr := ""
func (s *KmsVaultReplicaResourceCrud) createVaultReplicaHelper(vaultId string, replicaRegion string) error {
	request := oci_kms.CreateVaultReplicaRequest{}
func (s *KmsVaultReplicaResourceCrud) deleteVaultReplicaHelper(vaultId string, replicaRegion string) error {
	request := oci_kms.DeleteVaultReplicaRequest{}
func (s *KmsVaultReplicaResourceCrud) SetData() error {
	return nil
func (s *KmsVaultReplicaResourceCrud) State() oci_kms.VaultReplicaSummaryStatusEnum {
	if len(s.Res.Items) > 0 {
func (s *KmsVaultReplicaResourceCrud) CreatedPending() []string {
	return []string{
func (s *KmsVaultReplicaResourceCrud) CreatedTarget() []string {
	return []string{
func (s *KmsVaultReplicaResourceCrud) DeletedPending() []string {
	return []string{
func (s *KmsVaultReplicaResourceCrud) DeletedTarget() []string {
	return []string{

=== ./internal/service/kms/kms_key_version_data_source.go ===
func KmsKeyVersionDataSource() *schema.Resource {
	fieldMap := make(map[string]*schema.Schema)
func readSingularKmsKeyVersion(d *schema.ResourceData, m interface{}) error {
	sync := &KmsKeyVersionDataSourceCrud{}
func (s *KmsKeyVersionDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *KmsKeyVersionDataSourceCrud) Get() error {
	request := oci_kms.GetKeyVersionRequest{}
func (s *KmsKeyVersionDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/kms/kms_export.go ===
func processKmsKey(ctx *tf_export.ResourceDiscoveryContext, resources []*tf_export.OCIResource) ([]*tf_export.OCIResource, error) {
	for _, resource := range resources {
func processKmsKeyVersion(ctx *tf_export.ResourceDiscoveryContext, resources []*tf_export.OCIResource) ([]*tf_export.OCIResource, error) {
	for _, resource := range resources {
func getKmsKeyId(resource *tf_export.OCIResource) (string, error) {

func getKmsKeyVersionId(resource *tf_export.OCIResource) (string, error) {


=== ./internal/service/kms/kms_vaults_data_source.go ===
func KmsVaultsDataSource() *schema.Resource {
	return &schema.Resource{
func readKmsVaults(d *schema.ResourceData, m interface{}) error {
	sync := &KmsVaultsDataSourceCrud{}
func (s *KmsVaultsDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *KmsVaultsDataSourceCrud) Get() error {
	request := oci_kms.ListVaultsRequest{}
func (s *KmsVaultsDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/kms/kms_replication_status_data_source.go ===
func KmsReplicationStatusDataSource() *schema.Resource {
	return &schema.Resource{
func readSingularKmsReplicationStatus(d *schema.ResourceData, m interface{}) error {
	sync := &KmsReplicationStatusDataSourceCrud{}
func (s *KmsReplicationStatusDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *KmsReplicationStatusDataSourceCrud) Get() error {
	request := oci_kms.GetReplicationStatusRequest{}
func (s *KmsReplicationStatusDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/kms/kms_encrypted_data_resource.go ===
func KmsEncryptedDataResource() *schema.Resource {
	return &schema.Resource{
func createKmsEncryptedData(d *schema.ResourceData, m interface{}) error {
	sync := &KmsEncryptedDataResourceCrud{}
func readKmsEncryptedData(d *schema.ResourceData, m interface{}) error {
	sync := &KmsEncryptedDataResourceCrud{}
func deleteKmsEncryptedData(d *schema.ResourceData, m interface{}) error {
	return nil
func (s *KmsEncryptedDataResourceCrud) ID() string {
	return fmt.Sprint(utils.GetStringHashcode(*s.Res.Ciphertext))
func (s *KmsEncryptedDataResourceCrud) Create() error {
	request := oci_kms.EncryptRequest{}
func (s *KmsEncryptedDataResourceCrud) Get() error {

func (s *KmsEncryptedDataResourceCrud) SetData() error {
	if s.Res.Ciphertext != nil {

=== ./internal/service/kms/kms_ekms_private_endpoint_data_source.go ===
func KmsEkmsPrivateEndpointDataSource() *schema.Resource {
	fieldMap := make(map[string]*schema.Schema)
func readSingularKmsEkmsPrivateEndpoint(d *schema.ResourceData, m interface{}) error {
	sync := &KmsEkmsPrivateEndpointDataSourceCrud{}
func (s *KmsEkmsPrivateEndpointDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *KmsEkmsPrivateEndpointDataSourceCrud) Get() error {
	request := oci_kms.GetEkmsPrivateEndpointRequest{}
func (s *KmsEkmsPrivateEndpointDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/kms/kms_vault_usage_data_source.go ===
func KmsVaultUsageDataSource() *schema.Resource {
	return &schema.Resource{
func readSingularKmsVaultUsage(d *schema.ResourceData, m interface{}) error {
	sync := &KmsVaultUsageDataSourceCrud{}
func (s *KmsVaultUsageDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *KmsVaultUsageDataSourceCrud) Get() error {
	request := oci_kms.GetVaultUsageRequest{}
func (s *KmsVaultUsageDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/kms/kms_key_version_resource.go ===
func KmsKeyVersionResource() *schema.Resource {
	return &schema.Resource{
func createKmsKeyVersion(d *schema.ResourceData, m interface{}) error {
	sync := &KmsKeyVersionResourceCrud{}
func readKmsKeyVersion(d *schema.ResourceData, m interface{}) error {
	sync := &KmsKeyVersionResourceCrud{}
func deleteKmsKeyVersion(d *schema.ResourceData, m interface{}) error {
	// prevent kms version deletion as part of testing as version deletion is only applicable when the version is not the current version of the key
func (s *KmsKeyVersionResourceCrud) ID() string {
	return getKeyVersionCompositeId(*s.Res.KeyId, *s.Res.Id)
func (s *KmsKeyVersionResourceCrud) CreatedPending() []string {
	return []string{
func (s *KmsKeyVersionResourceCrud) CreatedTarget() []string {
	return []string{
func (s *KmsKeyVersionResourceCrud) DeletedPending() []string {
	return []string{
func (s *KmsKeyVersionResourceCrud) DeletedTarget() []string {
	return []string{
func (s *KmsKeyVersionResourceCrud) Create() error {
	request := oci_kms.CreateKeyVersionRequest{}
func (s *KmsKeyVersionResourceCrud) Get() error {
	request := oci_kms.GetKeyVersionRequest{}
func (s *KmsKeyVersionResourceCrud) Delete() error {
	request := oci_kms.ScheduleKeyVersionDeletionRequest{}
func (s *KmsKeyVersionResourceCrud) SetData() error {


=== ./internal/service/kms/kms_vault_resource.go ===
func KmsVaultResource() *schema.Resource {
	return &schema.Resource{
func createKmsVault(d *schema.ResourceData, m interface{}) error {
	sync := &KmsVaultResourceCrud{}
func readKmsVault(d *schema.ResourceData, m interface{}) error {
	sync := &KmsVaultResourceCrud{}
func updateKmsVault(d *schema.ResourceData, m interface{}) error {
	sync := &KmsVaultResourceCrud{}
func deleteKmsVault(d *schema.ResourceData, m interface{}) error {
	sync := &KmsVaultResourceCrud{}
func (s *KmsVaultResourceCrud) ID() string {
	return *s.Res.Id
func (s *KmsVaultResourceCrud) CreatedPending() []string {
	return []string{
func (s *KmsVaultResourceCrud) CreatedTarget() []string {
	return []string{
func (s *KmsVaultResourceCrud) DeletedPending() []string {
	return []string{
func (s *KmsVaultResourceCrud) DeletedTarget() []string {
	return []string{
func (s *KmsVaultResourceCrud) Create() error {
	if _, ok := s.D.GetOkExists("restore_from_file"); ok {
func (s *KmsVaultResourceCrud) Get() error {
	request := oci_kms.GetVaultRequest{}
func (s *KmsVaultResourceCrud) Update() error {
	if _, ok := s.D.GetOk("restore_from_file"); ok && s.D.HasChange("restore_trigger") {
func (s *KmsVaultResourceCrud) UpdateVaultDetails() error {
	if compartment, ok := s.D.GetOkExists("compartment_id"); ok && s.D.HasChange("compartment_id") {
func (s *KmsVaultResourceCrud) Delete() error {
	request := oci_kms.ScheduleVaultDeletionRequest{}
func (s *KmsVaultResourceCrud) SetData() error {
	if s.Res.CompartmentId != nil {
func (s *KmsVaultResourceCrud) mapToExternalKeyManagerMetadata(fieldKeyFormat string) (oci_kms.ExternalKeyManagerMetadata, error) {
	result := oci_kms.ExternalKeyManagerMetadata{}
func (s *KmsVaultResourceCrud) mapToOauthMetadata(fieldKeyFormat string) (oci_kms.OauthMetadata, error) {
	result := oci_kms.OauthMetadata{}
func (s *KmsVaultResourceCrud) updateCompartment(compartment interface{}) error {
	changeCompartmentRequest := oci_kms.ChangeVaultCompartmentRequest{}
func (s *KmsVaultResourceCrud) RestoreVaultFromObjectStore() error {
	request := oci_kms.RestoreVaultFromObjectStoreRequest{}
func (s *KmsVaultResourceCrud) RestoreVaultFromFile() error {
	request := oci_kms.RestoreVaultFromFileRequest{}
func (s *KmsVaultResourceCrud) mapToBackupLocation(fieldKeyFormat string) (oci_kms.BackupLocation, error) {
	var baseObject oci_kms.BackupLocation

=== ./internal/service/kms/kms_keys_data_source.go ===
func KmsKeysDataSource() *schema.Resource {
	return &schema.Resource{
func readKmsKeys(d *schema.ResourceData, m interface{}) error {
	sync := &KmsKeysDataSourceCrud{}
func (s *KmsKeysDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *KmsKeysDataSourceCrud) Get() error {
	request := oci_kms.ListKeysRequest{}
func (s *KmsKeysDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/kms/kms_decrypted_data_data_source.go ===
func KmsDecryptedDataDataSource() *schema.Resource {
	return &schema.Resource{
func readSingularDecryptedData(d *schema.ResourceData, m interface{}) error {
	sync := &DecryptedDataDataSourceCrud{}
func (s *DecryptedDataDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *DecryptedDataDataSourceCrud) Get() error {
	request := oci_kms.DecryptRequest{}
func (s *DecryptedDataDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/kms/kms_verify_resource.go ===
func KmsVerifyResource() *schema.Resource {
	return &schema.Resource{
func createKmsVerify(d *schema.ResourceData, m interface{}) error {
	sync := &KmsVerifyResourceCrud{}
func readKmsVerify(d *schema.ResourceData, m interface{}) error {
	return nil
func deleteKmsVerify(d *schema.ResourceData, m interface{}) error {
	return nil
func (s *KmsVerifyResourceCrud) ID() string {
	return s.D.Get("signature").(string)
func (s *KmsVerifyResourceCrud) Create() error {
	request := oci_kms.VerifyRequest{}
func (s *KmsVerifyResourceCrud) SetData() error {
	if s.Res.IsSignatureValid != nil {

=== ./internal/service/kms/kms_key_resource.go ===
func KmsKeyResource() *schema.Resource {
	return &schema.Resource{
func createKmsKey(d *schema.ResourceData, m interface{}) error {
	sync := &KmsKeyResourceCrud{}
func readKmsKey(d *schema.ResourceData, m interface{}) error {
	sync := &KmsKeyResourceCrud{}
func updateKmsKey(d *schema.ResourceData, m interface{}) error {
	sync := &KmsKeyResourceCrud{}
func deleteKmsKey(d *schema.ResourceData, m interface{}) error {
	sync := &KmsKeyResourceCrud{}
func (s *KmsKeyResourceCrud) ID() string {
	return *s.Res.Id
func (s *KmsKeyResourceCrud) CreatedPending() []string {
	return []string{
func (s *KmsKeyResourceCrud) CreatedTarget() []string {
	return []string{
func (s *KmsKeyResourceCrud) DeletedPending() []string {
	return []string{
func (s *KmsKeyResourceCrud) DeletedTarget() []string {
	return []string{
func (s *KmsKeyResourceCrud) UpdatedPending() []string {
	return []string{
func (s *KmsKeyResourceCrud) UpdatedTarget() []string {
	return []string{
func (s *KmsKeyResourceCrud) Create() error {
	if _, ok := s.D.GetOk("restore_from_file"); ok {
func (s *KmsKeyResourceCrud) Get() error {
	request := oci_kms.GetKeyRequest{}
func (s *KmsKeyResourceCrud) Update() error {
	if _, ok := s.D.GetOk("restore_from_file"); ok && s.D.HasChange("restore_trigger") {
func (s *KmsKeyResourceCrud) UpdateKeyDetails() error {
	if compartment, ok := s.D.GetOkExists("compartment_id"); ok && s.D.HasChange("compartment_id") {
func (s *KmsKeyResourceCrud) Delete() error {
	request := oci_kms.ScheduleKeyDeletionRequest{}
func (s *KmsKeyResourceCrud) SetData() error {
	if s.Res.CompartmentId != nil {
func (s *KmsKeyResourceCrud) mapToAutoKeyRotationDetails(fieldKeyFormat string) (oci_kms.AutoKeyRotationDetails, error) {
	result := oci_kms.AutoKeyRotationDetails{}
func (s *KmsKeyResourceCrud) mapToExternalKeyReference(fieldKeyFormat string) (oci_kms.ExternalKeyReference, error) {
	result := oci_kms.ExternalKeyReference{}
func (s *KmsKeyResourceCrud) mapToKeyShape(fieldKeyFormat string) (oci_kms.KeyShape, error) {
	result := oci_kms.KeyShape{}
func (s *KmsKeyResourceCrud) updateCompartment(compartment interface{}) error {
	changeCompartmentRequest := oci_kms.ChangeKeyCompartmentRequest{}
func (s *KmsKeyResourceCrud) RestoreKeyFromObjectStore() error {
	request := oci_kms.RestoreKeyFromObjectStoreRequest{}
func (s *KmsKeyResourceCrud) RestoreKeyFromFile() error {
	request := oci_kms.RestoreKeyFromFileRequest{}
func (s *KmsKeyResourceCrud) mapToBackupLocation(fieldKeyFormat string) (oci_kms.BackupLocation, error) {
	var baseObject oci_kms.BackupLocation

=== ./internal/service/kms/kms_vault_replicas_data_source.go ===
func KmsVaultReplicasDataSource() *schema.Resource {
	return &schema.Resource{
func readKmsVaultReplicas(d *schema.ResourceData, m interface{}) error {
	sync := &KmsVaultReplicasDataSourceCrud{}
func (s *KmsVaultReplicasDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *KmsVaultReplicasDataSourceCrud) Get() error {
	request := oci_kms.ListVaultReplicasRequest{}
func (s *KmsVaultReplicasDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/kms/kms_encrypted_data_data_source.go ===
func KmsEncryptedDataDataSource() *schema.Resource {
	return &schema.Resource{
func readSingularEncryptedData(d *schema.ResourceData, m interface{}) error {
	sync := &EncryptedDataDataSourceCrud{}
func (s *EncryptedDataDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *EncryptedDataDataSourceCrud) Get() error {
	request := oci_kms.EncryptRequest{}
func (s *EncryptedDataDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/kms/kms_ekms_private_endpoint_resource.go ===
func KmsEkmsPrivateEndpointResource() *schema.Resource {
	return &schema.Resource{
func createKmsEkmsPrivateEndpoint(d *schema.ResourceData, m interface{}) error {
	sync := &KmsEkmsPrivateEndpointResourceCrud{}
func readKmsEkmsPrivateEndpoint(d *schema.ResourceData, m interface{}) error {
	sync := &KmsEkmsPrivateEndpointResourceCrud{}
func updateKmsEkmsPrivateEndpoint(d *schema.ResourceData, m interface{}) error {
	sync := &KmsEkmsPrivateEndpointResourceCrud{}
func deleteKmsEkmsPrivateEndpoint(d *schema.ResourceData, m interface{}) error {
	sync := &KmsEkmsPrivateEndpointResourceCrud{}
func (s *KmsEkmsPrivateEndpointResourceCrud) ID() string {
	return *s.Res.Id
func (s *KmsEkmsPrivateEndpointResourceCrud) CreatedPending() []string {
	return []string{
func (s *KmsEkmsPrivateEndpointResourceCrud) CreatedTarget() []string {
	return []string{
func (s *KmsEkmsPrivateEndpointResourceCrud) DeletedPending() []string {
	return []string{
func (s *KmsEkmsPrivateEndpointResourceCrud) DeletedTarget() []string {
	return []string{
func (s *KmsEkmsPrivateEndpointResourceCrud) Create() error {
	request := oci_kms.CreateEkmsPrivateEndpointRequest{}
func (s *KmsEkmsPrivateEndpointResourceCrud) Get() error {
	request := oci_kms.GetEkmsPrivateEndpointRequest{}
func (s *KmsEkmsPrivateEndpointResourceCrud) Update() error {
	request := oci_kms.UpdateEkmsPrivateEndpointRequest{}
func (s *KmsEkmsPrivateEndpointResourceCrud) Delete() error {
	request := oci_kms.DeleteEkmsPrivateEndpointRequest{}
func (s *KmsEkmsPrivateEndpointResourceCrud) SetData() error {
	if s.Res.CaBundle != nil {

=== ./internal/service/kms/kms_key_versions_data_source.go ===
func KmsKeyVersionsDataSource() *schema.Resource {
	return &schema.Resource{
func readKmsKeyVersions(d *schema.ResourceData, m interface{}) error {
	sync := &KmsKeyVersionsDataSourceCrud{}
func (s *KmsKeyVersionsDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *KmsKeyVersionsDataSourceCrud) Get() error {
	request := oci_kms.ListKeyVersionsRequest{}
func getKeyID(s *KmsKeyVersionsDataSourceCrud) *string {
	var finalKeyId string
func (s *KmsKeyVersionsDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/kms/kms_sign_resource.go ===
func KmsSignResource() *schema.Resource {
	return &schema.Resource{
func createKmsSign(d *schema.ResourceData, m interface{}) error {
	sync := &KmsSignResourceCrud{}
func readKmsSign(d *schema.ResourceData, m interface{}) error {
	return nil
func deleteKmsSign(d *schema.ResourceData, m interface{}) error {
	return nil
func (s *KmsSignResourceCrud) ID() string {
	return *s.Res.KeyId
func (s *KmsSignResourceCrud) Create() error {
	request := oci_kms.SignRequest{}
func (s *KmsSignResourceCrud) SetData() error {
	if s.Res.KeyId != nil {

=== ./internal/service/kms/kms_key_data_source.go ===
func KmsKeyDataSource() *schema.Resource {
	fieldMap := make(map[string]*schema.Schema)
func readSingularKmsKey(d *schema.ResourceData, m interface{}) error {
	sync := &KmsKeyDataSourceCrud{}
func (s *KmsKeyDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *KmsKeyDataSourceCrud) Get() error {
	request := oci_kms.GetKeyRequest{}
func (s *KmsKeyDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/kms/register_resource.go ===
func RegisterResource() {
	tfresource.RegisterResource("oci_kms_ekms_private_endpoint", KmsEkmsPrivateEndpointResource())

=== ./internal/service/kms/kms_generated_key_resource.go ===
func KmsGeneratedKeyResource() *schema.Resource {
	return &schema.Resource{
func createKmsGeneratedKey(d *schema.ResourceData, m interface{}) error {
	sync := &KmsGeneratedKeyResourceCrud{}
func readKmsGeneratedKey(d *schema.ResourceData, m interface{}) error {
	return nil
func deleteKmsGeneratedKey(d *schema.ResourceData, m interface{}) error {
	return nil
func (s *KmsGeneratedKeyResourceCrud) ID() string {
	return fmt.Sprint(utils.GetStringHashcode(*s.Res.Ciphertext))
func (s *KmsGeneratedKeyResourceCrud) Create() error {
	request := oci_kms.GenerateDataEncryptionKeyRequest{}
func (s *KmsGeneratedKeyResourceCrud) SetData() error {
	if s.Res.Ciphertext != nil {
func (s *KmsGeneratedKeyResourceCrud) mapToKeyShape(fieldKeyFormat string) (oci_kms.KeyShape, error) {
	result := oci_kms.KeyShape{}

=== ./internal/service/apm_synthetics/apm_synthetics_public_vantage_points_data_source.go ===
func ApmSyntheticsPublicVantagePointsDataSource() *schema.Resource {
	return &schema.Resource{
func readApmSyntheticsPublicVantagePoints(d *schema.ResourceData, m interface{}) error {
	sync := &ApmSyntheticsPublicVantagePointsDataSourceCrud{}
func (s *ApmSyntheticsPublicVantagePointsDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *ApmSyntheticsPublicVantagePointsDataSourceCrud) Get() error {
	request := oci_apm_synthetics.ListPublicVantagePointsRequest{}
func (s *ApmSyntheticsPublicVantagePointsDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/apm_synthetics/apm_synthetics_on_premise_vantage_point_worker_data_source.go ===
func ApmSyntheticsOnPremiseVantagePointWorkerDataSource() *schema.Resource {
	fieldMap := make(map[string]*schema.Schema)
func readSingularApmSyntheticsOnPremiseVantagePointWorker(d *schema.ResourceData, m interface{}) error {
	sync := &ApmSyntheticsOnPremiseVantagePointWorkerDataSourceCrud{}
func (s *ApmSyntheticsOnPremiseVantagePointWorkerDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *ApmSyntheticsOnPremiseVantagePointWorkerDataSourceCrud) Get() error {
	request := oci_apm_synthetics.GetWorkerRequest{}
func (s *ApmSyntheticsOnPremiseVantagePointWorkerDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/apm_synthetics/apm_synthetics_script_data_source.go ===
func ApmSyntheticsScriptDataSource() *schema.Resource {
	fieldMap := make(map[string]*schema.Schema)
func readSingularApmSyntheticsScript(d *schema.ResourceData, m interface{}) error {
	sync := &ApmSyntheticsScriptDataSourceCrud{}
func (s *ApmSyntheticsScriptDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *ApmSyntheticsScriptDataSourceCrud) Get() error {
	request := oci_apm_synthetics.GetScriptRequest{}
func (s *ApmSyntheticsScriptDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/apm_synthetics/apm_synthetics_monitors_data_source.go ===
func ApmSyntheticsMonitorsDataSource() *schema.Resource {
	return &schema.Resource{
func readApmSyntheticsMonitors(d *schema.ResourceData, m interface{}) error {
	sync := &ApmSyntheticsMonitorsDataSourceCrud{}
func (s *ApmSyntheticsMonitorsDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *ApmSyntheticsMonitorsDataSourceCrud) Get() error {
	request := oci_apm_synthetics.ListMonitorsRequest{}
func (s *ApmSyntheticsMonitorsDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/apm_synthetics/apm_synthetics_scripts_data_source.go ===
func ApmSyntheticsScriptsDataSource() *schema.Resource {
	return &schema.Resource{
func readApmSyntheticsScripts(d *schema.ResourceData, m interface{}) error {
	sync := &ApmSyntheticsScriptsDataSourceCrud{}
func (s *ApmSyntheticsScriptsDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *ApmSyntheticsScriptsDataSourceCrud) Get() error {
	request := oci_apm_synthetics.ListScriptsRequest{}
func (s *ApmSyntheticsScriptsDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/apm_synthetics/apm_synthetics_on_premise_vantage_point_data_source.go ===
func ApmSyntheticsOnPremiseVantagePointDataSource() *schema.Resource {
	fieldMap := make(map[string]*schema.Schema)
func readSingularApmSyntheticsOnPremiseVantagePoint(d *schema.ResourceData, m interface{}) error {
	sync := &ApmSyntheticsOnPremiseVantagePointDataSourceCrud{}
func (s *ApmSyntheticsOnPremiseVantagePointDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *ApmSyntheticsOnPremiseVantagePointDataSourceCrud) Get() error {
	request := oci_apm_synthetics.GetOnPremiseVantagePointRequest{}
func (s *ApmSyntheticsOnPremiseVantagePointDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/apm_synthetics/apm_synthetics_result_data_source.go ===
func ApmSyntheticsResultDataSource() *schema.Resource {
	return &schema.Resource{
func readSingularApmSyntheticsResult(d *schema.ResourceData, m interface{}) error {
	sync := &ApmSyntheticsResultDataSourceCrud{}
func (s *ApmSyntheticsResultDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *ApmSyntheticsResultDataSourceCrud) Get() error {
	request := oci_apm_synthetics.GetMonitorResultRequest{}
func (s *ApmSyntheticsResultDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/apm_synthetics/apm_synthetics_on_premise_vantage_point_resource.go ===
func ApmSyntheticsOnPremiseVantagePointResource() *schema.Resource {
	return &schema.Resource{
func createApmSyntheticsOnPremiseVantagePoint(d *schema.ResourceData, m interface{}) error {
	sync := &ApmSyntheticsOnPremiseVantagePointResourceCrud{}
func readApmSyntheticsOnPremiseVantagePoint(d *schema.ResourceData, m interface{}) error {
	sync := &ApmSyntheticsOnPremiseVantagePointResourceCrud{}
func updateApmSyntheticsOnPremiseVantagePoint(d *schema.ResourceData, m interface{}) error {
	sync := &ApmSyntheticsOnPremiseVantagePointResourceCrud{}
func deleteApmSyntheticsOnPremiseVantagePoint(d *schema.ResourceData, m interface{}) error {
	sync := &ApmSyntheticsOnPremiseVantagePointResourceCrud{}
func (s *ApmSyntheticsOnPremiseVantagePointResourceCrud) ID() string {
	return GetOnPremiseVantagePointCompositeId(*s.Res.Id, s.D.Get("apm_domain_id").(string))
func (s *ApmSyntheticsOnPremiseVantagePointResourceCrud) Create() error {
	request := oci_apm_synthetics.CreateOnPremiseVantagePointRequest{}
func (s *ApmSyntheticsOnPremiseVantagePointResourceCrud) Get() error {
	request := oci_apm_synthetics.GetOnPremiseVantagePointRequest{}
func (s *ApmSyntheticsOnPremiseVantagePointResourceCrud) Update() error {
	request := oci_apm_synthetics.UpdateOnPremiseVantagePointRequest{}
func (s *ApmSyntheticsOnPremiseVantagePointResourceCrud) Delete() error {
	request := oci_apm_synthetics.DeleteOnPremiseVantagePointRequest{}
func (s *ApmSyntheticsOnPremiseVantagePointResourceCrud) SetData() error {


=== ./internal/service/apm_synthetics/apm_synthetics_monitor_resource.go ===
func ApmSyntheticsMonitorResource() *schema.Resource {
	return &schema.Resource{
func createApmSyntheticsMonitor(d *schema.ResourceData, m interface{}) error {
	sync := &ApmSyntheticsMonitorResourceCrud{}
func readApmSyntheticsMonitor(d *schema.ResourceData, m interface{}) error {
	sync := &ApmSyntheticsMonitorResourceCrud{}
func updateApmSyntheticsMonitor(d *schema.ResourceData, m interface{}) error {
	sync := &ApmSyntheticsMonitorResourceCrud{}
func deleteApmSyntheticsMonitor(d *schema.ResourceData, m interface{}) error {
	sync := &ApmSyntheticsMonitorResourceCrud{}
func (s *ApmSyntheticsMonitorResourceCrud) ID() string {
	return GetMonitorCompositeId(*s.Res.Id, s.D.Get("apm_domain_id").(string))
func (s *ApmSyntheticsMonitorResourceCrud) Create() error {
	request := oci_apm_synthetics.CreateMonitorRequest{}
func (s *ApmSyntheticsMonitorResourceCrud) Get() error {
	request := oci_apm_synthetics.GetMonitorRequest{}
func (s *ApmSyntheticsMonitorResourceCrud) Update() error {
	request := oci_apm_synthetics.UpdateMonitorRequest{}
func (s *ApmSyntheticsMonitorResourceCrud) Delete() error {
	request := oci_apm_synthetics.DeleteMonitorRequest{}
func (s *ApmSyntheticsMonitorResourceCrud) SetData() error {

func (s *ApmSyntheticsMonitorResourceCrud) mapToAvailabilityConfiguration(fieldKeyFormat string) (oci_apm_synthetics.AvailabilityConfiguration, error) {
	result := oci_apm_synthetics.AvailabilityConfiguration{}
func (s *ApmSyntheticsMonitorResourceCrud) mapToBasicAuthenticationDetails(fieldKeyFormat string) (oci_apm_synthetics.BasicAuthenticationDetails, error) {
	result := oci_apm_synthetics.BasicAuthenticationDetails{}
func (s *ApmSyntheticsMonitorResourceCrud) mapToClientCertificate(fieldKeyFormat string) (oci_apm_synthetics.ClientCertificate, error) {
	result := oci_apm_synthetics.ClientCertificate{}
func (s *ApmSyntheticsMonitorResourceCrud) mapToClientCertificateDetails(fieldKeyFormat string) (oci_apm_synthetics.ClientCertificateDetails, error) {
	result := oci_apm_synthetics.ClientCertificateDetails{}
func (s *ApmSyntheticsMonitorResourceCrud) mapToDatabaseWalletDetails(fieldKeyFormat string) (oci_apm_synthetics.DatabaseWalletDetails, error) {
	result := oci_apm_synthetics.DatabaseWalletDetails{}
func (s *ApmSyntheticsMonitorResourceCrud) mapToDnsConfiguration(fieldKeyFormat string) (oci_apm_synthetics.DnsConfiguration, error) {
	result := oci_apm_synthetics.DnsConfiguration{}
func (s *ApmSyntheticsMonitorResourceCrud) mapToHeader(fieldKeyFormat string) (oci_apm_synthetics.Header, error) {
	result := oci_apm_synthetics.Header{}
func (s *ApmSyntheticsMonitorResourceCrud) mapToMaintenanceWindowSchedule(fieldKeyFormat string) (oci_apm_synthetics.MaintenanceWindowSchedule, error) {
	result := oci_apm_synthetics.MaintenanceWindowSchedule{}
func (s *ApmSyntheticsMonitorResourceCrud) mapToMonitorConfiguration(fieldKeyFormat string) (oci_apm_synthetics.MonitorConfiguration, error) {
	var baseObject oci_apm_synthetics.MonitorConfiguration
func (s *ApmSyntheticsMonitorResourceCrud) mapToNetworkConfiguration(fieldKeyFormat string) (oci_apm_synthetics.NetworkConfiguration, error) {
	result := oci_apm_synthetics.NetworkConfiguration{}
func (s *ApmSyntheticsMonitorResourceCrud) mapToPassword(fieldKeyFormat string) (oci_apm_synthetics.Password, error) {
	var baseObject oci_apm_synthetics.Password
func (s *ApmSyntheticsMonitorResourceCrud) mapToPrivateKey(fieldKeyFormat string) (oci_apm_synthetics.PrivateKey, error) {
	result := oci_apm_synthetics.PrivateKey{}
func (s *ApmSyntheticsMonitorResourceCrud) mapToRequestAuthenticationDetails(fieldKeyFormat string) (oci_apm_synthetics.RequestAuthenticationDetails, error) {
	result := oci_apm_synthetics.RequestAuthenticationDetails{}
func (s *ApmSyntheticsMonitorResourceCrud) mapToRequestQueryParam(fieldKeyFormat string) (oci_apm_synthetics.RequestQueryParam, error) {
	result := oci_apm_synthetics.RequestQueryParam{}
func (s *ApmSyntheticsMonitorResourceCrud) mapToVerifyText(fieldKeyFormat string) (oci_apm_synthetics.VerifyText, error) {
	result := oci_apm_synthetics.VerifyText{}
func (s *ApmSyntheticsMonitorResourceCrud) mapToMonitorScriptParameter(fieldKeyFormat string) (oci_apm_synthetics.MonitorScriptParameter, error) {
	result := oci_apm_synthetics.MonitorScriptParameter{}
func (s *ApmSyntheticsMonitorResourceCrud) mapToVantagePointInfo(fieldKeyFormat string) (oci_apm_synthetics.VantagePointInfo, error) {
	result := oci_apm_synthetics.VantagePointInfo{}

=== ./internal/service/apm_synthetics/apm_synthetics_dedicated_vantage_point_data_source.go ===
func ApmSyntheticsDedicatedVantagePointDataSource() *schema.Resource {
	fieldMap := make(map[string]*schema.Schema)
func readSingularApmSyntheticsDedicatedVantagePoint(d *schema.ResourceData, m interface{}) error {
	sync := &ApmSyntheticsDedicatedVantagePointDataSourceCrud{}
func (s *ApmSyntheticsDedicatedVantagePointDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *ApmSyntheticsDedicatedVantagePointDataSourceCrud) Get() error {
	request := oci_apm_synthetics.GetDedicatedVantagePointRequest{}
func (s *ApmSyntheticsDedicatedVantagePointDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/apm_synthetics/apm_synthetics_on_premise_vantage_point_worker_resource.go ===
func ApmSyntheticsOnPremiseVantagePointWorkerResource() *schema.Resource {
	return &schema.Resource{
func createApmSyntheticsOnPremiseVantagePointWorker(d *schema.ResourceData, m interface{}) error {
	sync := &ApmSyntheticsOnPremiseVantagePointWorkerResourceCrud{}
func readApmSyntheticsOnPremiseVantagePointWorker(d *schema.ResourceData, m interface{}) error {
	sync := &ApmSyntheticsOnPremiseVantagePointWorkerResourceCrud{}
func updateApmSyntheticsOnPremiseVantagePointWorker(d *schema.ResourceData, m interface{}) error {
	sync := &ApmSyntheticsOnPremiseVantagePointWorkerResourceCrud{}
func deleteApmSyntheticsOnPremiseVantagePointWorker(d *schema.ResourceData, m interface{}) error {
	sync := &ApmSyntheticsOnPremiseVantagePointWorkerResourceCrud{}
func (s *ApmSyntheticsOnPremiseVantagePointWorkerResourceCrud) ID() string {
	return GetOnPremiseVantagePointWorkerCompositeId(s.D.Get("on_premise_vantage_point_id").(string), *s.Res.Id, s.D.Get("apm_domain_id").(string))
func (s *ApmSyntheticsOnPremiseVantagePointWorkerResourceCrud) Create() error {
	request := oci_apm_synthetics.CreateWorkerRequest{}
func (s *ApmSyntheticsOnPremiseVantagePointWorkerResourceCrud) Get() error {
	request := oci_apm_synthetics.GetWorkerRequest{}
func (s *ApmSyntheticsOnPremiseVantagePointWorkerResourceCrud) Update() error {
	request := oci_apm_synthetics.UpdateWorkerRequest{}
func (s *ApmSyntheticsOnPremiseVantagePointWorkerResourceCrud) Delete() error {
	request := oci_apm_synthetics.DeleteWorkerRequest{}
func (s *ApmSyntheticsOnPremiseVantagePointWorkerResourceCrud) SetData() error {


=== ./internal/service/apm_synthetics/apm_synthetics_script_resource.go ===
func ApmSyntheticsScriptResource() *schema.Resource {
	return &schema.Resource{
func createApmSyntheticsScript(d *schema.ResourceData, m interface{}) error {
	sync := &ApmSyntheticsScriptResourceCrud{}
func readApmSyntheticsScript(d *schema.ResourceData, m interface{}) error {
	sync := &ApmSyntheticsScriptResourceCrud{}
func updateApmSyntheticsScript(d *schema.ResourceData, m interface{}) error {
	sync := &ApmSyntheticsScriptResourceCrud{}
func deleteApmSyntheticsScript(d *schema.ResourceData, m interface{}) error {
	sync := &ApmSyntheticsScriptResourceCrud{}
func (s *ApmSyntheticsScriptResourceCrud) ID() string {
	return GetScriptCompositeId(*s.Res.Id, s.D.Get("apm_domain_id").(string))
func (s *ApmSyntheticsScriptResourceCrud) Create() error {
	request := oci_apm_synthetics.CreateScriptRequest{}
func (s *ApmSyntheticsScriptResourceCrud) Get() error {
	request := oci_apm_synthetics.GetScriptRequest{}
func (s *ApmSyntheticsScriptResourceCrud) Update() error {
	request := oci_apm_synthetics.UpdateScriptRequest{}
func (s *ApmSyntheticsScriptResourceCrud) Delete() error {
	request := oci_apm_synthetics.DeleteScriptRequest{}
func (s *ApmSyntheticsScriptResourceCrud) SetData() error {

func (s *ApmSyntheticsScriptResourceCrud) mapToScriptParameter(fieldKeyFormat string) (oci_apm_synthetics.ScriptParameter, error) {
	result := oci_apm_synthetics.ScriptParameter{}

=== ./internal/service/apm_synthetics/apm_synthetics_monitor_data_source.go ===
func ApmSyntheticsMonitorDataSource() *schema.Resource {
	fieldMap := make(map[string]*schema.Schema)
func readSingularApmSyntheticsMonitor(d *schema.ResourceData, m interface{}) error {
	sync := &ApmSyntheticsMonitorDataSourceCrud{}
func (s *ApmSyntheticsMonitorDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *ApmSyntheticsMonitorDataSourceCrud) Get() error {
	request := oci_apm_synthetics.GetMonitorRequest{}
func (s *ApmSyntheticsMonitorDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/apm_synthetics/apm_synthetics_export.go ===
func getApmSyntheticsScriptId(resource *tf_export.OCIResource) (string, error) {

func getApmSyntheticsMonitorId(resource *tf_export.OCIResource) (string, error) {

func getApmSyntheticsOnPremiseVantagePointWorkerId(resource *tf_export.OCIResource) (string, error) {

func getApmSyntheticsOnPremiseVantagePointId(resource *tf_export.OCIResource) (string, error) {


=== ./internal/service/apm_synthetics/apm_synthetics_dedicated_vantage_point_resource.go ===
func ApmSyntheticsDedicatedVantagePointResource() *schema.Resource {
	return &schema.Resource{
func createApmSyntheticsDedicatedVantagePoint(d *schema.ResourceData, m interface{}) error {
	sync := &ApmSyntheticsDedicatedVantagePointResourceCrud{}
func readApmSyntheticsDedicatedVantagePoint(d *schema.ResourceData, m interface{}) error {
	sync := &ApmSyntheticsDedicatedVantagePointResourceCrud{}
func updateApmSyntheticsDedicatedVantagePoint(d *schema.ResourceData, m interface{}) error {
	sync := &ApmSyntheticsDedicatedVantagePointResourceCrud{}
func deleteApmSyntheticsDedicatedVantagePoint(d *schema.ResourceData, m interface{}) error {
	sync := &ApmSyntheticsDedicatedVantagePointResourceCrud{}
func (s *ApmSyntheticsDedicatedVantagePointResourceCrud) ID() string {
	return GetDedicatedVantagePointCompositeId(*s.Res.Id, s.D.Get("apm_domain_id").(string))
func (s *ApmSyntheticsDedicatedVantagePointResourceCrud) Create() error {
	request := oci_apm_synthetics.CreateDedicatedVantagePointRequest{}
func (s *ApmSyntheticsDedicatedVantagePointResourceCrud) Get() error {
	request := oci_apm_synthetics.GetDedicatedVantagePointRequest{}
func (s *ApmSyntheticsDedicatedVantagePointResourceCrud) Update() error {
	request := oci_apm_synthetics.UpdateDedicatedVantagePointRequest{}
func (s *ApmSyntheticsDedicatedVantagePointResourceCrud) Delete() error {
	request := oci_apm_synthetics.DeleteDedicatedVantagePointRequest{}
func (s *ApmSyntheticsDedicatedVantagePointResourceCrud) SetData() error {

func (s *ApmSyntheticsDedicatedVantagePointResourceCrud) mapToDvpStackDetails(fieldKeyFormat string) (oci_apm_synthetics.OracleRmStack, error) {
	result := oci_apm_synthetics.OracleRmStack{}

=== ./internal/service/apm_synthetics/apm_synthetics_on_premise_vantage_points_data_source.go ===
func ApmSyntheticsOnPremiseVantagePointsDataSource() *schema.Resource {
	return &schema.Resource{
func readApmSyntheticsOnPremiseVantagePoints(d *schema.ResourceData, m interface{}) error {
	sync := &ApmSyntheticsOnPremiseVantagePointsDataSourceCrud{}
func (s *ApmSyntheticsOnPremiseVantagePointsDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *ApmSyntheticsOnPremiseVantagePointsDataSourceCrud) Get() error {
	request := oci_apm_synthetics.ListOnPremiseVantagePointsRequest{}
func (s *ApmSyntheticsOnPremiseVantagePointsDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/apm_synthetics/apm_synthetics_dedicated_vantage_points_data_source.go ===
func ApmSyntheticsDedicatedVantagePointsDataSource() *schema.Resource {
	return &schema.Resource{
func readApmSyntheticsDedicatedVantagePoints(d *schema.ResourceData, m interface{}) error {
	sync := &ApmSyntheticsDedicatedVantagePointsDataSourceCrud{}
func (s *ApmSyntheticsDedicatedVantagePointsDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *ApmSyntheticsDedicatedVantagePointsDataSourceCrud) Get() error {
	request := oci_apm_synthetics.ListDedicatedVantagePointsRequest{}
func (s *ApmSyntheticsDedicatedVantagePointsDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/apm_synthetics/apm_synthetics_public_vantage_point_data_source.go ===
func ApmSyntheticsPublicVantagePointDataSource() *schema.Resource {
	return &schema.Resource{
func readSingularApmSyntheticsPublicVantagePoint(d *schema.ResourceData, m interface{}) error {
	sync := &ApmSyntheticsPublicVantagePointDataSourceCrud{}
func (s *ApmSyntheticsPublicVantagePointDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *ApmSyntheticsPublicVantagePointDataSourceCrud) Get() error {
	request := oci_apm_synthetics.ListPublicVantagePointsRequest{}
func (s *ApmSyntheticsPublicVantagePointDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/apm_synthetics/register_resource.go ===
func RegisterResource() {
	tfresource.RegisterResource("oci_apm_synthetics_dedicated_vantage_point", ApmSyntheticsDedicatedVantagePointResource())

=== ./internal/service/apm_synthetics/apm_synthetics_on_premise_vantage_point_workers_data_source.go ===
func ApmSyntheticsOnPremiseVantagePointWorkersDataSource() *schema.Resource {
	return &schema.Resource{
func readApmSyntheticsOnPremiseVantagePointWorkers(d *schema.ResourceData, m interface{}) error {
	sync := &ApmSyntheticsOnPremiseVantagePointWorkersDataSourceCrud{}
func (s *ApmSyntheticsOnPremiseVantagePointWorkersDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *ApmSyntheticsOnPremiseVantagePointWorkersDataSourceCrud) Get() error {
	request := oci_apm_synthetics.ListWorkersRequest{}
func (s *ApmSyntheticsOnPremiseVantagePointWorkersDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/network_load_balancer/network_load_balancer_backend_resource.go ===
func NetworkLoadBalancerBackendResource() *schema.Resource {
	return &schema.Resource{
func createNetworkLoadBalancerBackend(d *schema.ResourceData, m interface{}) error {
	sync := &NetworkLoadBalancerBackendResourceCrud{}
func readNetworkLoadBalancerBackend(d *schema.ResourceData, m interface{}) error {
	sync := &NetworkLoadBalancerBackendResourceCrud{}
func updateNetworkLoadBalancerBackend(d *schema.ResourceData, m interface{}) error {
	sync := &NetworkLoadBalancerBackendResourceCrud{}
func deleteNetworkLoadBalancerBackend(d *schema.ResourceData, m interface{}) error {
	sync := &NetworkLoadBalancerBackendResourceCrud{}
func (s *NetworkLoadBalancerBackendResourceCrud) GetMutex() *sync.Mutex {
	return nlbBackendSetMutexes.GetOrCreateNlbBackendSetMutex(s.D.Get("network_load_balancer_id").(string), s.D.Get("backend_set_name").(string))
func (s *NetworkLoadBalancerBackendResourceCrud) ID() string {
	tmp := s.determineBackendName()
func (s *NetworkLoadBalancerBackendResourceCrud) determineBackendName() string {
	if name, ok := s.D.GetOkExists("name"); ok {
func (s *NetworkLoadBalancerBackendResourceCrud) Create() error {
	request := oci_network_load_balancer.CreateBackendRequest{}
func (s *NetworkLoadBalancerBackendResourceCrud) getBackendFromWorkRequest(workId *string, retryPolicy *oci_common.RetryPolicy,
	actionTypeEnum oci_network_load_balancer.ActionTypeEnum, timeout time.Duration) error {
func (s *NetworkLoadBalancerBackendResourceCrud) Get() error {
	request := oci_network_load_balancer.GetBackendRequest{}
func (s *NetworkLoadBalancerBackendResourceCrud) Update() error {
	request := oci_network_load_balancer.UpdateBackendRequest{}
func (s *NetworkLoadBalancerBackendResourceCrud) Delete() error {
	request := oci_network_load_balancer.DeleteBackendRequest{}
func (s *NetworkLoadBalancerBackendResourceCrud) SetData() error {


=== ./internal/service/network_load_balancer/network_load_balancer_network_load_balancer_resource.go ===
func NetworkLoadBalancerNetworkLoadBalancerResource() *schema.Resource {
	return &schema.Resource{
func createNetworkLoadBalancerNetworkLoadBalancer(d *schema.ResourceData, m interface{}) error {
	sync := &NetworkLoadBalancerNetworkLoadBalancerResourceCrud{}
func readNetworkLoadBalancerNetworkLoadBalancer(d *schema.ResourceData, m interface{}) error {
	sync := &NetworkLoadBalancerNetworkLoadBalancerResourceCrud{}
func updateNetworkLoadBalancerNetworkLoadBalancer(d *schema.ResourceData, m interface{}) error {
	sync := &NetworkLoadBalancerNetworkLoadBalancerResourceCrud{}
func deleteNetworkLoadBalancerNetworkLoadBalancer(d *schema.ResourceData, m interface{}) error {
	sync := &NetworkLoadBalancerNetworkLoadBalancerResourceCrud{}
func (s *NetworkLoadBalancerNetworkLoadBalancerResourceCrud) ID() string {
	return *s.Res.Id
func (s *NetworkLoadBalancerNetworkLoadBalancerResourceCrud) CreatedPending() []string {
	return []string{
func (s *NetworkLoadBalancerNetworkLoadBalancerResourceCrud) CreatedTarget() []string {
	return []string{
func (s *NetworkLoadBalancerNetworkLoadBalancerResourceCrud) DeletedPending() []string {
	return []string{
func (s *NetworkLoadBalancerNetworkLoadBalancerResourceCrud) DeletedTarget() []string {
	return []string{
func (s *NetworkLoadBalancerNetworkLoadBalancerResourceCrud) Create() error {
	request := oci_network_load_balancer.CreateNetworkLoadBalancerRequest{}
func (s *NetworkLoadBalancerNetworkLoadBalancerResourceCrud) getNetworkLoadBalancerFromWorkRequest(workId *string, retryPolicy *oci_common.RetryPolicy,
	actionTypeEnum oci_network_load_balancer.ActionTypeEnum, timeout time.Duration) error {
func (s *NetworkLoadBalancerNetworkLoadBalancerResourceCrud) Get() error {
	request := oci_network_load_balancer.GetNetworkLoadBalancerRequest{}
func (s *NetworkLoadBalancerNetworkLoadBalancerResourceCrud) Update() error {
	if compartment, ok := s.D.GetOkExists("compartment_id"); ok && s.D.HasChange("compartment_id") {
func (s *NetworkLoadBalancerNetworkLoadBalancerResourceCrud) Delete() error {
	request := oci_network_load_balancer.DeleteNetworkLoadBalancerRequest{}
func (s *NetworkLoadBalancerNetworkLoadBalancerResourceCrud) SetData() error {
	if s.Res.CompartmentId != nil {
func (s *NetworkLoadBalancerNetworkLoadBalancerResourceCrud) mapToNetworkLoadBalancerReservedIp(fieldKeyFormat string) (oci_network_load_balancer.ReservedIp, error) {
	result := oci_network_load_balancer.ReservedIp{}
func (s *NetworkLoadBalancerNetworkLoadBalancerResourceCrud) updateNetworkSecurityGroups() error {
	updateNsgIdsRequest := oci_network_load_balancer.UpdateNetworkSecurityGroupsRequest{}
func (s *NetworkLoadBalancerNetworkLoadBalancerResourceCrud) updateCompartment(compartment interface{}) error {
	changeCompartmentRequest := oci_network_load_balancer.ChangeNetworkLoadBalancerCompartmentRequest{}

=== ./internal/service/network_load_balancer/network_load_balancer_listeners_data_source.go ===
func NetworkLoadBalancerListenersDataSource() *schema.Resource {
	return &schema.Resource{
func readNetworkLoadBalancerListeners(d *schema.ResourceData, m interface{}) error {
	sync := &NetworkLoadBalancerListenersDataSourceCrud{}
func (s *NetworkLoadBalancerListenersDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *NetworkLoadBalancerListenersDataSourceCrud) Get() error {
	request := oci_network_load_balancer.ListListenersRequest{}
func (s *NetworkLoadBalancerListenersDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/network_load_balancer/network_load_balancer_network_load_balancers_backend_sets_unified_resource.go ===
func NetworkLoadBalancerNetworkLoadBalancersBackendSetsUnifiedResource() *schema.Resource {
	return &schema.Resource{
func createNetworkLoadBalancerNetworkLoadBalancersBackendSetsUnified(d *schema.ResourceData, m interface{}) error {
	sync := &NetworkLoadBalancerNetworkLoadBalancersBackendSetsUnifiedResourceCrud{}
func readNetworkLoadBalancerNetworkLoadBalancersBackendSetsUnified(d *schema.ResourceData, m interface{}) error {
	sync := &NetworkLoadBalancerNetworkLoadBalancersBackendSetsUnifiedResourceCrud{}
func updateNetworkLoadBalancerNetworkLoadBalancersBackendSetsUnified(d *schema.ResourceData, m interface{}) error {
	sync := &NetworkLoadBalancerNetworkLoadBalancersBackendSetsUnifiedResourceCrud{}
func deleteNetworkLoadBalancerNetworkLoadBalancersBackendSetsUnified(d *schema.ResourceData, m interface{}) error {
	sync := &NetworkLoadBalancerNetworkLoadBalancersBackendSetsUnifiedResourceCrud{}
func (s *NetworkLoadBalancerNetworkLoadBalancersBackendSetsUnifiedResourceCrud) ID() string {
	return GetNetworkLoadBalancersBackendSetsUnifiedCompositeId(s.D.Get("name").(string), s.D.Get("network_load_balancer_id").(string))
func (s *NetworkLoadBalancerNetworkLoadBalancersBackendSetsUnifiedResourceCrud) Create() error {
	request := oci_network_load_balancer.CreateBackendSetRequest{}
func (s *NetworkLoadBalancerNetworkLoadBalancersBackendSetsUnifiedResourceCrud) getNetworkLoadBalancersBackendSetsUnifiedFromWorkRequest(workId *string, retryPolicy *oci_common.RetryPolicy,
	actionTypeEnum oci_network_load_balancer.ActionTypeEnum, timeout time.Duration) error {
func (s *NetworkLoadBalancerNetworkLoadBalancersBackendSetsUnifiedResourceCrud) Get() error {
	request := oci_network_load_balancer.GetBackendSetRequest{}
func (s *NetworkLoadBalancerNetworkLoadBalancersBackendSetsUnifiedResourceCrud) Update() error {
	request := oci_network_load_balancer.UpdateBackendSetRequest{}
func (s *NetworkLoadBalancerNetworkLoadBalancersBackendSetsUnifiedResourceCrud) Delete() error {
	request := oci_network_load_balancer.DeleteBackendSetRequest{}
func (s *NetworkLoadBalancerNetworkLoadBalancersBackendSetsUnifiedResourceCrud) SetData() error {

func (s *NetworkLoadBalancerNetworkLoadBalancersBackendSetsUnifiedResourceCrud) mapToBackendDetails(fieldKeyFormat string) (oci_network_load_balancer.BackendDetails, error) {
	result := oci_network_load_balancer.BackendDetails{}
func (s *NetworkLoadBalancerNetworkLoadBalancersBackendSetsUnifiedResourceCrud) mapToHealthCheckerDetails(fieldKeyFormat string) (oci_network_load_balancer.HealthCheckerDetails, error) {
	result := oci_network_load_balancer.HealthCheckerDetails{}
func (s *NetworkLoadBalancerNetworkLoadBalancersBackendSetsUnifiedResourceCrud) mapToDnsHealthCheckerDetails(fieldKeyFormat string) (oci_network_load_balancer.DnsHealthCheckerDetails, error) {
	result := oci_network_load_balancer.DnsHealthCheckerDetails{}

=== ./internal/service/network_load_balancer/network_load_balancer_backend_sets_data_source.go ===
func NetworkLoadBalancerBackendSetsDataSource() *schema.Resource {
	return &schema.Resource{
func readNetworkLoadBalancerBackendSets(d *schema.ResourceData, m interface{}) error {
	sync := &NetworkLoadBalancerBackendSetsDataSourceCrud{}
func (s *NetworkLoadBalancerBackendSetsDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *NetworkLoadBalancerBackendSetsDataSourceCrud) Get() error {
	request := oci_network_load_balancer.ListBackendSetsRequest{}
func (s *NetworkLoadBalancerBackendSetsDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/network_load_balancer/network_load_balancer_backend_health_data_source.go ===
func NetworkLoadBalancerBackendHealthDataSource() *schema.Resource {
	return &schema.Resource{
func readSingularNetworkLoadBalancerBackendHealth(d *schema.ResourceData, m interface{}) error {
	sync := &NetworkLoadBalancerBackendHealthDataSourceCrud{}
func (s *NetworkLoadBalancerBackendHealthDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *NetworkLoadBalancerBackendHealthDataSourceCrud) Get() error {
	request := oci_network_load_balancer.GetBackendHealthRequest{}
func (s *NetworkLoadBalancerBackendHealthDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/network_load_balancer/network_load_balancer_network_load_balancers_protocols_data_source.go ===
func NetworkLoadBalancerNetworkLoadBalancersProtocolsDataSource() *schema.Resource {
	return &schema.Resource{
func readNetworkLoadBalancerNetworkLoadBalancersProtocols(d *schema.ResourceData, m interface{}) error {
	sync := &NetworkLoadBalancerNetworkLoadBalancersProtocolsDataSourceCrud{}
func (s *NetworkLoadBalancerNetworkLoadBalancersProtocolsDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *NetworkLoadBalancerNetworkLoadBalancersProtocolsDataSourceCrud) Get() error {
	request := oci_network_load_balancer.ListNetworkLoadBalancersProtocolsRequest{}
func (s *NetworkLoadBalancerNetworkLoadBalancersProtocolsDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/network_load_balancer/network_load_balancer_backends_data_source.go ===
func NetworkLoadBalancerBackendsDataSource() *schema.Resource {
	return &schema.Resource{
func readNetworkLoadBalancerBackends(d *schema.ResourceData, m interface{}) error {
	sync := &NetworkLoadBalancerBackendsDataSourceCrud{}
func (s *NetworkLoadBalancerBackendsDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *NetworkLoadBalancerBackendsDataSourceCrud) Get() error {
	request := oci_network_load_balancer.ListBackendsRequest{}
func (s *NetworkLoadBalancerBackendsDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/network_load_balancer/network_load_balancer_network_load_balancers_data_source.go ===
func NetworkLoadBalancerNetworkLoadBalancersDataSource() *schema.Resource {
	return &schema.Resource{
func readNetworkLoadBalancerNetworkLoadBalancers(d *schema.ResourceData, m interface{}) error {
	sync := &NetworkLoadBalancerNetworkLoadBalancersDataSourceCrud{}
func (s *NetworkLoadBalancerNetworkLoadBalancersDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *NetworkLoadBalancerNetworkLoadBalancersDataSourceCrud) Get() error {
	request := oci_network_load_balancer.ListNetworkLoadBalancersRequest{}
func (s *NetworkLoadBalancerNetworkLoadBalancersDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/network_load_balancer/network_load_balancer_backend_set_resource.go ===
func NetworkLoadBalancerBackendSetResource() *schema.Resource {
	return &schema.Resource{
func createNetworkLoadBalancerBackendSet(d *schema.ResourceData, m interface{}) error {
	sync := &NetworkLoadBalancerBackendSetResourceCrud{}
func readNetworkLoadBalancerBackendSet(d *schema.ResourceData, m interface{}) error {
	sync := &NetworkLoadBalancerBackendSetResourceCrud{}
func updateNetworkLoadBalancerBackendSet(d *schema.ResourceData, m interface{}) error {
	sync := &NetworkLoadBalancerBackendSetResourceCrud{}
func deleteNetworkLoadBalancerBackendSet(d *schema.ResourceData, m interface{}) error {
	sync := &NetworkLoadBalancerBackendSetResourceCrud{}
func (s *NetworkLoadBalancerBackendSetResourceCrud) GetMutex() *sync.Mutex {
	return nlbBackendSetMutexes.GetOrCreateNlbBackendSetMutex(s.D.Get("network_load_balancer_id").(string), s.D.Get("name").(string))
func (s *NetworkLoadBalancerBackendSetResourceCrud) ID() string {
	return GetNlbBackendSetCompositeId(s.D.Get("name").(string), s.D.Get("network_load_balancer_id").(string))
func (s *NetworkLoadBalancerBackendSetResourceCrud) Create() error {
	request := oci_network_load_balancer.CreateBackendSetRequest{}
func (s *NetworkLoadBalancerBackendSetResourceCrud) getBackendSetFromWorkRequest(workId *string, retryPolicy *oci_common.RetryPolicy,
	actionTypeEnum oci_network_load_balancer.ActionTypeEnum, timeout time.Duration) error {
func (s *NetworkLoadBalancerBackendSetResourceCrud) Get() error {
	request := oci_network_load_balancer.GetBackendSetRequest{}
func (s *NetworkLoadBalancerBackendSetResourceCrud) Update() error {
	request := oci_network_load_balancer.UpdateBackendSetRequest{}
func (s *NetworkLoadBalancerBackendSetResourceCrud) Delete() error {
	request := oci_network_load_balancer.DeleteBackendSetRequest{}
func (s *NetworkLoadBalancerBackendSetResourceCrud) SetData() error {

func (s *NetworkLoadBalancerBackendSetResourceCrud) mapToNlbBackendDetails(fieldKeyFormat string) (oci_network_load_balancer.BackendDetails, error) {
	result := oci_network_load_balancer.BackendDetails{}
func (s *NetworkLoadBalancerBackendSetResourceCrud) mapToNetworkLoadBalancerHealthCheckerDetails(fieldKeyFormat string) (oci_network_load_balancer.HealthCheckerDetails, error) {
	result := oci_network_load_balancer.HealthCheckerDetails{}
func (s *NetworkLoadBalancerBackendSetResourceCrud) mapToDnsHealthCheckerDetails(fieldKeyFormat string) (oci_network_load_balancer.DnsHealthCheckerDetails, error) {
	result := oci_network_load_balancer.DnsHealthCheckerDetails{}

=== ./internal/service/network_load_balancer/network_load_balancer_network_load_balancer_data_source.go ===
func NetworkLoadBalancerNetworkLoadBalancerDataSource() *schema.Resource {
	fieldMap := make(map[string]*schema.Schema)
func readSingularNetworkLoadBalancerNetworkLoadBalancer(d *schema.ResourceData, m interface{}) error {
	sync := &NetworkLoadBalancerNetworkLoadBalancerDataSourceCrud{}
func (s *NetworkLoadBalancerNetworkLoadBalancerDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *NetworkLoadBalancerNetworkLoadBalancerDataSourceCrud) Get() error {
	request := oci_network_load_balancer.GetNetworkLoadBalancerRequest{}
func (s *NetworkLoadBalancerNetworkLoadBalancerDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/network_load_balancer/network_load_balancer_listener_resource.go ===
func NetworkLoadBalancerListenerResource() *schema.Resource {
	return &schema.Resource{
func createNetworkLoadBalancerListener(d *schema.ResourceData, m interface{}) error {
	sync := &NetworkLoadBalancerListenerResourceCrud{}
func readNetworkLoadBalancerListener(d *schema.ResourceData, m interface{}) error {
	sync := &NetworkLoadBalancerListenerResourceCrud{}
func updateNetworkLoadBalancerListener(d *schema.ResourceData, m interface{}) error {
	sync := &NetworkLoadBalancerListenerResourceCrud{}
func deleteNetworkLoadBalancerListener(d *schema.ResourceData, m interface{}) error {
	sync := &NetworkLoadBalancerListenerResourceCrud{}
func (s *NetworkLoadBalancerListenerResourceCrud) ID() string {
	return GetNlbListenerCompositeId(s.D.Get("name").(string), s.D.Get("network_load_balancer_id").(string))
func (s *NetworkLoadBalancerListenerResourceCrud) Create() error {
	request := oci_network_load_balancer.CreateListenerRequest{}
func (s *NetworkLoadBalancerListenerResourceCrud) getListenerFromWorkRequest(workId *string, retryPolicy *oci_common.RetryPolicy,
	actionTypeEnum oci_network_load_balancer.ActionTypeEnum, timeout time.Duration) error {
func (s *NetworkLoadBalancerListenerResourceCrud) Get() error {
	request := oci_network_load_balancer.GetListenerRequest{}
func (s *NetworkLoadBalancerListenerResourceCrud) Update() error {
	request := oci_network_load_balancer.UpdateListenerRequest{}
func (s *NetworkLoadBalancerListenerResourceCrud) Delete() error {
	request := oci_network_load_balancer.DeleteListenerRequest{}
func (s *NetworkLoadBalancerListenerResourceCrud) SetData() error {


=== ./internal/service/network_load_balancer/network_load_balancer_network_load_balancers_policies_data_source.go ===
func NetworkLoadBalancerNetworkLoadBalancersPoliciesDataSource() *schema.Resource {
	return &schema.Resource{
func readNetworkLoadBalancerNetworkLoadBalancersPolicies(d *schema.ResourceData, m interface{}) error {
	sync := &NetworkLoadBalancerNetworkLoadBalancersPoliciesDataSourceCrud{}
func (s *NetworkLoadBalancerNetworkLoadBalancersPoliciesDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *NetworkLoadBalancerNetworkLoadBalancersPoliciesDataSourceCrud) Get() error {
	request := oci_network_load_balancer.ListNetworkLoadBalancersPoliciesRequest{}
func (s *NetworkLoadBalancerNetworkLoadBalancersPoliciesDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/network_load_balancer/network_load_balancer_listener_data_source.go ===
func NetworkLoadBalancerListenerDataSource() *schema.Resource {
	fieldMap := make(map[string]*schema.Schema)
func readSingularNetworkLoadBalancerListener(d *schema.ResourceData, m interface{}) error {
	sync := &NetworkLoadBalancerListenerDataSourceCrud{}
func (s *NetworkLoadBalancerListenerDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *NetworkLoadBalancerListenerDataSourceCrud) Get() error {
	request := oci_network_load_balancer.GetListenerRequest{}
func (s *NetworkLoadBalancerListenerDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/network_load_balancer/network_load_balancer_export.go ===
func processNetworkLoadBalancerBackends(ctx *tf_export.ResourceDiscoveryContext, resources []*tf_export.OCIResource) ([]*tf_export.OCIResource, error) {
	for _, backend := range resources {
func processNetworkLoadBalancerBackendSets(ctx *tf_export.ResourceDiscoveryContext, resources []*tf_export.OCIResource) ([]*tf_export.OCIResource, error) {
	for _, backendSet := range resources {
func findNetworkLoadBalancerListeners(ctx *tf_export.ResourceDiscoveryContext, tfMeta *tf_export.TerraformResourceAssociation, parent *tf_export.OCIResource, resourceGraph *tf_export.TerraformResourceGraph) ([]*tf_export.OCIResource, error) {
	networkLoadBalancerId := parent.SourceAttributes["network_load_balancer_id"].(string)
func processNetworkLoadBalancerListeners(ctx *tf_export.ResourceDiscoveryContext, resources []*tf_export.OCIResource) ([]*tf_export.OCIResource, error) {
	for _, listener := range resources {
func getNetworkLoadBalancerBackendSetId(resource *tf_export.OCIResource) (string, error) {

func getNetworkLoadBalancerBackendId(resource *tf_export.OCIResource) (string, error) {

func getNetworkLoadBalancerListenerId(resource *tf_export.OCIResource) (string, error) {


=== ./internal/service/network_load_balancer/network_load_balancer_backend_set_data_source.go ===
func NetworkLoadBalancerBackendSetDataSource() *schema.Resource {
	fieldMap := make(map[string]*schema.Schema)
func readSingularNetworkLoadBalancerBackendSet(d *schema.ResourceData, m interface{}) error {
	sync := &NetworkLoadBalancerBackendSetDataSourceCrud{}
func (s *NetworkLoadBalancerBackendSetDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *NetworkLoadBalancerBackendSetDataSourceCrud) Get() error {
	request := oci_network_load_balancer.GetBackendSetRequest{}
func (s *NetworkLoadBalancerBackendSetDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/network_load_balancer/network_load_balancer_network_load_balancer_health_data_source.go ===
func NetworkLoadBalancerNetworkLoadBalancerHealthDataSource() *schema.Resource {
	return &schema.Resource{
func readSingularNetworkLoadBalancerNetworkLoadBalancerHealth(d *schema.ResourceData, m interface{}) error {
	sync := &NetworkLoadBalancerNetworkLoadBalancerHealthDataSourceCrud{}
func (s *NetworkLoadBalancerNetworkLoadBalancerHealthDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *NetworkLoadBalancerNetworkLoadBalancerHealthDataSourceCrud) Get() error {
	request := oci_network_load_balancer.GetNetworkLoadBalancerHealthRequest{}
func (s *NetworkLoadBalancerNetworkLoadBalancerHealthDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/network_load_balancer/network_load_balancer_backend_sets_health_data_source.go ===
func NetworkLoadBalancerBackendSetHealthDataSource() *schema.Resource {
	return &schema.Resource{
func readSingularNetworkLoadBalancerBackendSetHealth(d *schema.ResourceData, m interface{}) error {
	sync := &NetworkLoadBalancerBackendSetHealthDataSourceCrud{}
func (s *NetworkLoadBalancerBackendSetHealthDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *NetworkLoadBalancerBackendSetHealthDataSourceCrud) Get() error {
	request := oci_network_load_balancer.GetBackendSetHealthRequest{}
func (s *NetworkLoadBalancerBackendSetHealthDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/network_load_balancer/register_resource.go ===
func RegisterResource() {
	tfresource.RegisterResource("oci_network_load_balancer_backend", NetworkLoadBalancerBackendResource())

=== ./internal/service/dns/dns_tsig_key_resource.go ===
func DnsTsigKeyResource() *schema.Resource {
	return &schema.Resource{
func createDnsTsigKey(d *schema.ResourceData, m interface{}) error {
	sync := &DnsTsigKeyResourceCrud{}
func readDnsTsigKey(d *schema.ResourceData, m interface{}) error {
	sync := &DnsTsigKeyResourceCrud{}
func updateDnsTsigKey(d *schema.ResourceData, m interface{}) error {
	sync := &DnsTsigKeyResourceCrud{}
func deleteDnsTsigKey(d *schema.ResourceData, m interface{}) error {
	sync := &DnsTsigKeyResourceCrud{}
func (s *DnsTsigKeyResourceCrud) ID() string {
	return *s.Res.Id
func (s *DnsTsigKeyResourceCrud) CreatedPending() []string {
	return []string{
func (s *DnsTsigKeyResourceCrud) CreatedTarget() []string {
	return []string{
func (s *DnsTsigKeyResourceCrud) UpdatedPending() []string {
	return []string{
func (s *DnsTsigKeyResourceCrud) UpdatedTarget() []string {
	return []string{
func (s *DnsTsigKeyResourceCrud) DeletedPending() []string {
	return []string{
func (s *DnsTsigKeyResourceCrud) DeletedTarget() []string {
	return []string{
func (s *DnsTsigKeyResourceCrud) Create() error {
	request := oci_dns.CreateTsigKeyRequest{}
func (s *DnsTsigKeyResourceCrud) Get() error {
	request := oci_dns.GetTsigKeyRequest{}
func (s *DnsTsigKeyResourceCrud) Update() error {
	if compartment, ok := s.D.GetOkExists("compartment_id"); ok && s.D.HasChange("compartment_id") {
func (s *DnsTsigKeyResourceCrud) Delete() error {
	request := oci_dns.DeleteTsigKeyRequest{}
func (s *DnsTsigKeyResourceCrud) SetData() error {
	if s.Res.Algorithm != nil {
func (s *DnsTsigKeyResourceCrud) updateCompartment(compartment interface{}) error {
	changeCompartmentRequest := oci_dns.ChangeTsigKeyCompartmentRequest{}

=== ./internal/service/dns/dns_view_resource.go ===
func DnsViewResource() *schema.Resource {
	return &schema.Resource{
func createDnsView(d *schema.ResourceData, m interface{}) error {
	sync := &DnsViewResourceCrud{}
func readDnsView(d *schema.ResourceData, m interface{}) error {
	sync := &DnsViewResourceCrud{}
func updateDnsView(d *schema.ResourceData, m interface{}) error {
	sync := &DnsViewResourceCrud{}
func deleteDnsView(d *schema.ResourceData, m interface{}) error {
	sync := &DnsViewResourceCrud{}
func (s *DnsViewResourceCrud) ID() string {
	return *s.Res.Id
func (s *DnsViewResourceCrud) CreatedPending() []string {
	return []string{}
func (s *DnsViewResourceCrud) CreatedTarget() []string {
	return []string{
func (s *DnsViewResourceCrud) UpdatedPending() []string {
	return []string{
func (s *DnsViewResourceCrud) UpdatedTarget() []string {
	return []string{
func (s *DnsViewResourceCrud) DeletedPending() []string {
	return []string{
func (s *DnsViewResourceCrud) DeletedTarget() []string {
	return []string{
func (s *DnsViewResourceCrud) Create() error {
	request := oci_dns.CreateViewRequest{}
func (s *DnsViewResourceCrud) Get() error {
	request := oci_dns.GetViewRequest{}
func (s *DnsViewResourceCrud) Update() error {
	if compartment, ok := s.D.GetOkExists("compartment_id"); ok && s.D.HasChange("compartment_id") {
func (s *DnsViewResourceCrud) Delete() error {
	request := oci_dns.DeleteViewRequest{}
func (s *DnsViewResourceCrud) SetData() error {
	if s.Res.CompartmentId != nil {
func (s *DnsViewResourceCrud) updateCompartment(compartment interface{}) error {
	changeCompartmentRequest := oci_dns.ChangeViewCompartmentRequest{}

=== ./internal/service/dns/dns_rrset_data_source.go ===
func DnsRrsetDataSource() *schema.Resource {
	fieldMap := make(map[string]*schema.Schema)
func readSingularDnsRrset(d *schema.ResourceData, m interface{}) error {
	sync := &DnsRrsetDataSourceCrud{}
func (s *DnsRrsetDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *DnsRrsetDataSourceCrud) Get() error {
	request := oci_dns.GetRRSetRequest{}
func (s *DnsRrsetDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/dns/dns_records_data_source.go ===
func DnsRecordsDataSource() *schema.Resource {
	return &schema.Resource{
func readDnsRecords(d *schema.ResourceData, m interface{}) error {
	sync := &DnsRecordsDataSourceCrud{}
func (s *DnsRecordsDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *DnsRecordsDataSourceCrud) Get() error {
	request := oci_dns.GetZoneRecordsRequest{}
func (s *DnsRecordsDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/dns/dns_resolver_data_source.go ===
func DnsResolverDataSource() *schema.Resource {
	fieldMap := make(map[string]*schema.Schema)
func readSingularDnsResolver(d *schema.ResourceData, m interface{}) error {
	sync := &DnsResolverDataSourceCrud{}
func (s *DnsResolverDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *DnsResolverDataSourceCrud) Get() error {
	request := oci_dns.GetResolverRequest{}
func (s *DnsResolverDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/dns/dns_zone_promote_dnssec_key_version_resource.go ===
func DnsZonePromoteDnssecKeyVersionResource() *schema.Resource {
	return &schema.Resource{
func createDnsZonePromoteDnssecKeyVersion(d *schema.ResourceData, m interface{}) error {
	sync := &DnsZonePromoteDnssecKeyVersionResourceCrud{}
func readDnsZonePromoteDnssecKeyVersion(d *schema.ResourceData, m interface{}) error {
	return nil
func deleteDnsZonePromoteDnssecKeyVersion(d *schema.ResourceData, m interface{}) error {
	return nil
func (s *DnsZonePromoteDnssecKeyVersionResourceCrud) ID() string {
	return s.D.Id()
func (s *DnsZonePromoteDnssecKeyVersionResourceCrud) Create() error {
	request := oci_dns.PromoteZoneDnssecKeyVersionRequest{}
func (s *DnsZonePromoteDnssecKeyVersionResourceCrud) SetData() error {
	return nil

=== ./internal/service/dns/dns_view_data_source.go ===
func DnsViewDataSource() *schema.Resource {
	fieldMap := make(map[string]*schema.Schema)
func readSingularDnsView(d *schema.ResourceData, m interface{}) error {
	sync := &DnsViewDataSourceCrud{}
func (s *DnsViewDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *DnsViewDataSourceCrud) Get() error {
	request := oci_dns.GetViewRequest{}
func (s *DnsViewDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/dns/dns_steering_policy_attachment_resource.go ===
func DnsSteeringPolicyAttachmentResource() *schema.Resource {
	return &schema.Resource{
func createDnsSteeringPolicyAttachment(d *schema.ResourceData, m interface{}) error {
	sync := &DnsSteeringPolicyAttachmentResourceCrud{}
func readDnsSteeringPolicyAttachment(d *schema.ResourceData, m interface{}) error {
	sync := &DnsSteeringPolicyAttachmentResourceCrud{}
func updateDnsSteeringPolicyAttachment(d *schema.ResourceData, m interface{}) error {
	sync := &DnsSteeringPolicyAttachmentResourceCrud{}
func deleteDnsSteeringPolicyAttachment(d *schema.ResourceData, m interface{}) error {
	sync := &DnsSteeringPolicyAttachmentResourceCrud{}
func (s *DnsSteeringPolicyAttachmentResourceCrud) ID() string {
	return *s.Res.Id
func (s *DnsSteeringPolicyAttachmentResourceCrud) CreatedPending() []string {
	return []string{
func (s *DnsSteeringPolicyAttachmentResourceCrud) CreatedTarget() []string {
	return []string{
func (s *DnsSteeringPolicyAttachmentResourceCrud) DeletedPending() []string {
	return []string{
func (s *DnsSteeringPolicyAttachmentResourceCrud) DeletedTarget() []string {
	return []string{}
func (s *DnsSteeringPolicyAttachmentResourceCrud) Create() error {
	request := oci_dns.CreateSteeringPolicyAttachmentRequest{}
func (s *DnsSteeringPolicyAttachmentResourceCrud) Get() error {
	request := oci_dns.GetSteeringPolicyAttachmentRequest{}
func (s *DnsSteeringPolicyAttachmentResourceCrud) Update() error {
	request := oci_dns.UpdateSteeringPolicyAttachmentRequest{}
func (s *DnsSteeringPolicyAttachmentResourceCrud) Delete() error {
	request := oci_dns.DeleteSteeringPolicyAttachmentRequest{}
func (s *DnsSteeringPolicyAttachmentResourceCrud) SetData() error {
	if s.Res.CompartmentId != nil {

=== ./internal/service/dns/dns_steering_policies_data_source.go ===
func DnsSteeringPoliciesDataSource() *schema.Resource {
	return &schema.Resource{
func readDnsSteeringPolicies(d *schema.ResourceData, m interface{}) error {
	sync := &DnsSteeringPoliciesDataSourceCrud{}
func (s *DnsSteeringPoliciesDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *DnsSteeringPoliciesDataSourceCrud) Get() error {
	request := oci_dns.ListSteeringPoliciesRequest{}
func (s *DnsSteeringPoliciesDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/dns/dns_rrset_resource.go ===
func DnsRrsetResource() *schema.Resource {
	return &schema.Resource{
func createDnsRrset(d *schema.ResourceData, m interface{}) error {
	sync := &DnsRrsetResourceCrud{}
func readDnsRrset(d *schema.ResourceData, m interface{}) error {
	sync := &DnsRrsetResourceCrud{}
func updateDnsRrset(d *schema.ResourceData, m interface{}) error {
	sync := &DnsRrsetResourceCrud{}
func deleteDnsRrset(d *schema.ResourceData, m interface{}) error {
	sync := &DnsRrsetResourceCrud{}
func (s *DnsRrsetResourceCrud) ID() string {
	return getRrsetCompositeId(s.D.Get("domain").(string), s.D.Get("rtype").(string), s.D.Get("zone_name_or_id").(string))
func (s *DnsRrsetResourceCrud) Create() error {
	request := oci_dns.UpdateRRSetRequest{}
func (s *DnsRrsetResourceCrud) Get() error {
	request := oci_dns.GetRRSetRequest{}
func (s *DnsRrsetResourceCrud) Update() error {
	request := oci_dns.UpdateRRSetRequest{}
func (s *DnsRrsetResourceCrud) Delete() error {
	// To ensure terraform does not attempt to delete protected records, which
func (s *DnsRrsetResourceCrud) SetData() error {

func (s *DnsRrsetResourceCrud) mapToRecordDetails(fieldKeyFormat string) (oci_dns.RecordDetails, error) {
	result := oci_dns.RecordDetails{}

=== ./internal/service/dns/dns_steering_policy_attachment_data_source.go ===
func DnsSteeringPolicyAttachmentDataSource() *schema.Resource {
	fieldMap := make(map[string]*schema.Schema)
func readSingularDnsSteeringPolicyAttachment(d *schema.ResourceData, m interface{}) error {
	sync := &DnsSteeringPolicyAttachmentDataSourceCrud{}
func (s *DnsSteeringPolicyAttachmentDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *DnsSteeringPolicyAttachmentDataSourceCrud) Get() error {
	request := oci_dns.GetSteeringPolicyAttachmentRequest{}
func (s *DnsSteeringPolicyAttachmentDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/dns/dns_steering_policy_attachments_data_source.go ===
func DnsSteeringPolicyAttachmentsDataSource() *schema.Resource {
	return &schema.Resource{
func readDnsSteeringPolicyAttachments(d *schema.ResourceData, m interface{}) error {
	sync := &DnsSteeringPolicyAttachmentsDataSourceCrud{}
func (s *DnsSteeringPolicyAttachmentsDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *DnsSteeringPolicyAttachmentsDataSourceCrud) Get() error {
	request := oci_dns.ListSteeringPolicyAttachmentsRequest{}
func (s *DnsSteeringPolicyAttachmentsDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/dns/dns_record_resource.go ===
func DnsRecordResource() *schema.Resource {
	return &schema.Resource{
func createDnsRecord(d *schema.ResourceData, m interface{}) error {
	sync := &DnsRecordResourceCrud{}
func readDnsRecord(d *schema.ResourceData, m interface{}) error {
	sync := &DnsRecordResourceCrud{}
func updateDnsRecord(d *schema.ResourceData, m interface{}) error {
	sync := &DnsRecordResourceCrud{}
func deleteDnsRecord(d *schema.ResourceData, m interface{}) error {
	sync := &DnsRecordResourceCrud{}
func (s *DnsRecordResourceCrud) ID() string {
	return s.D.Get("record_hash").(string)
func (s *DnsRecordResourceCrud) Create() error {
	request := oci_dns.PatchRRSetRequest{}
func (s *DnsRecordResourceCrud) Get() error {
	request := oci_dns.GetRRSetRequest{}
func (s *DnsRecordResourceCrud) Update() error {
	zoneNameOrId := s.D.Get("zone_name_or_id").(string)
func (s *DnsRecordResourceCrud) Delete() error {
	request := oci_dns.PatchRRSetRequest{}
func (s *DnsRecordResourceCrud) SetData() error {
	s.D.SetId(*s.Res.RecordHash)
func FindItem(rc *[]oci_dns.Record, r *schema.ResourceData) (*oci_dns.Record, error) {
	rType := r.Get("rtype").(string)

=== ./internal/service/dns/dns_action_create_zone_from_zone_file_resource.go ===
func DnsActionCreateZoneFromZoneFileResource() *schema.Resource {
	return &schema.Resource{
func createDnsActionCreateZoneFromZoneFile(d *schema.ResourceData, m interface{}) error {
	sync := &DnsActionCreateZoneFromZoneFileResourceCrud{}
func readDnsActionCreateZoneFromZoneFile(d *schema.ResourceData, m interface{}) error {
	return nil
func deleteDnsActionCreateZoneFromZoneFile(d *schema.ResourceData, m interface{}) error {
	return nil
func (s *DnsActionCreateZoneFromZoneFileResourceCrud) ID() string {
	return *s.Res.Id
func (s *DnsActionCreateZoneFromZoneFileResourceCrud) CreatedPending() []string {
	return []string{
func (s *DnsActionCreateZoneFromZoneFileResourceCrud) CreatedTarget() []string {
	return []string{
func (s *DnsActionCreateZoneFromZoneFileResourceCrud) DeletedPending() []string {
	return []string{
func (s *DnsActionCreateZoneFromZoneFileResourceCrud) DeletedTarget() []string {
	return []string{
func (s *DnsActionCreateZoneFromZoneFileResourceCrud) Create() error {
	request := oci_dns.CreateZoneFromZoneFileRequest{}
func (s *DnsActionCreateZoneFromZoneFileResourceCrud) Get() error {
	request := oci_dns.GetZoneRequest{}
func (s *DnsActionCreateZoneFromZoneFileResourceCrud) SetData() error {
	if s.Res.CompartmentId != nil {

=== ./internal/service/dns/dns_tsig_key_data_source.go ===
func DnsTsigKeyDataSource() *schema.Resource {
	fieldMap := make(map[string]*schema.Schema)
func readSingularDnsTsigKey(d *schema.ResourceData, m interface{}) error {
	sync := &DnsTsigKeyDataSourceCrud{}
func (s *DnsTsigKeyDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *DnsTsigKeyDataSourceCrud) Get() error {
	request := oci_dns.GetTsigKeyRequest{}
func (s *DnsTsigKeyDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/dns/dns_zones_data_source.go ===
func DnsZonesDataSource() *schema.Resource {
	return &schema.Resource{
func readDnsZones(d *schema.ResourceData, m interface{}) error {
	sync := &DnsZonesDataSourceCrud{}
func (s *DnsZonesDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *DnsZonesDataSourceCrud) Get() error {
	request := oci_dns.ListZonesRequest{}
func (s *DnsZonesDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/dns/dns_tsig_keys_data_source.go ===
func DnsTsigKeysDataSource() *schema.Resource {
	return &schema.Resource{
func readDnsTsigKeys(d *schema.ResourceData, m interface{}) error {
	sync := &DnsTsigKeysDataSourceCrud{}
func (s *DnsTsigKeysDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *DnsTsigKeysDataSourceCrud) Get() error {
	request := oci_dns.ListTsigKeysRequest{}
func (s *DnsTsigKeysDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/dns/dns_resolver_endpoints_data_source.go ===
func DnsResolverEndpointsDataSource() *schema.Resource {
	return &schema.Resource{
func readDnsResolverEndpoints(d *schema.ResourceData, m interface{}) error {
	sync := &DnsResolverEndpointsDataSourceCrud{}
func (s *DnsResolverEndpointsDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *DnsResolverEndpointsDataSourceCrud) Get() error {
	request := oci_dns.ListResolverEndpointsRequest{}
func (s *DnsResolverEndpointsDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/dns/dns_steering_policy_resource.go ===
func DnsSteeringPolicyResource() *schema.Resource {
	return &schema.Resource{
func createDnsSteeringPolicy(d *schema.ResourceData, m interface{}) error {
	sync := &DnsSteeringPolicyResourceCrud{}
func readDnsSteeringPolicy(d *schema.ResourceData, m interface{}) error {
	sync := &DnsSteeringPolicyResourceCrud{}
func updateDnsSteeringPolicy(d *schema.ResourceData, m interface{}) error {
	sync := &DnsSteeringPolicyResourceCrud{}
func deleteDnsSteeringPolicy(d *schema.ResourceData, m interface{}) error {
	sync := &DnsSteeringPolicyResourceCrud{}
func (s *DnsSteeringPolicyResourceCrud) ID() string {
	return *s.Res.Id
func (s *DnsSteeringPolicyResourceCrud) CreatedPending() []string {
	return []string{
func (s *DnsSteeringPolicyResourceCrud) CreatedTarget() []string {
	return []string{
func (s *DnsSteeringPolicyResourceCrud) DeletedPending() []string {
	return []string{
func (s *DnsSteeringPolicyResourceCrud) DeletedTarget() []string {
	return []string{
func (s *DnsSteeringPolicyResourceCrud) Create() error {
	request := oci_dns.CreateSteeringPolicyRequest{}
func (s *DnsSteeringPolicyResourceCrud) Get() error {
	request := oci_dns.GetSteeringPolicyRequest{}
func (s *DnsSteeringPolicyResourceCrud) Update() error {
	if compartment, ok := s.D.GetOkExists("compartment_id"); ok && s.D.HasChange("compartment_id") {
func (s *DnsSteeringPolicyResourceCrud) Delete() error {
	request := oci_dns.DeleteSteeringPolicyRequest{}
func (s *DnsSteeringPolicyResourceCrud) SetData() error {
	answers := []interface{}{}
func (s *DnsSteeringPolicyResourceCrud) mapToSteeringPolicyAnswer(fieldKeyFormat string) (oci_dns.SteeringPolicyAnswer, error) {
	result := oci_dns.SteeringPolicyAnswer{}
func (s *DnsSteeringPolicyResourceCrud) mapToSteeringPolicyFilterAnswerData(fieldKeyFormat string) (oci_dns.SteeringPolicyFilterAnswerData, error) {
	result := oci_dns.SteeringPolicyFilterAnswerData{}
func (s *DnsSteeringPolicyResourceCrud) mapToSteeringPolicyFilterRuleCase(fieldKeyFormat string) (oci_dns.SteeringPolicyFilterRuleCase, error) {
	result := oci_dns.SteeringPolicyFilterRuleCase{}
func (s *DnsSteeringPolicyResourceCrud) mapToSteeringPolicyHealthRuleCase(fieldKeyFormat string) (oci_dns.SteeringPolicyHealthRuleCase, error) {
	result := oci_dns.SteeringPolicyHealthRuleCase{}
func (s *DnsSteeringPolicyResourceCrud) mapToSteeringPolicyLimitRuleCase(fieldKeyFormat string) (oci_dns.SteeringPolicyLimitRuleCase, error) {
	result := oci_dns.SteeringPolicyLimitRuleCase{}
func (s *DnsSteeringPolicyResourceCrud) mapToSteeringPolicyPriorityAnswerData(fieldKeyFormat string) (oci_dns.SteeringPolicyPriorityAnswerData, error) {
	result := oci_dns.SteeringPolicyPriorityAnswerData{}
func (s *DnsSteeringPolicyResourceCrud) mapToSteeringPolicyPriorityRuleCase(fieldKeyFormat string) (oci_dns.SteeringPolicyPriorityRuleCase, error) {
	result := oci_dns.SteeringPolicyPriorityRuleCase{}
func (s *DnsSteeringPolicyResourceCrud) mapToSteeringPolicyRule(fieldKeyFormat string) (oci_dns.SteeringPolicyRule, error) {
	var baseObject oci_dns.SteeringPolicyRule
func (s *DnsSteeringPolicyResourceCrud) mapToSteeringPolicyWeightedAnswerData(fieldKeyFormat string) (oci_dns.SteeringPolicyWeightedAnswerData, error) {
	result := oci_dns.SteeringPolicyWeightedAnswerData{}
func (s *DnsSteeringPolicyResourceCrud) mapToSteeringPolicyWeightedRuleCase(fieldKeyFormat string) (oci_dns.SteeringPolicyWeightedRuleCase, error) {
	result := oci_dns.SteeringPolicyWeightedRuleCase{}
func (s *DnsSteeringPolicyResourceCrud) updateCompartment(compartment interface{}) error {
	changeCompartmentRequest := oci_dns.ChangeSteeringPolicyCompartmentRequest{}

=== ./internal/service/dns/dns_zone_stage_dnssec_key_version_resource.go ===
func DnsZoneStageDnssecKeyVersionResource() *schema.Resource {
	return &schema.Resource{
func createDnsZoneStageDnssecKeyVersion(d *schema.ResourceData, m interface{}) error {
	sync := &DnsZoneStageDnssecKeyVersionResourceCrud{}
func readDnsZoneStageDnssecKeyVersion(d *schema.ResourceData, m interface{}) error {
	return nil
func deleteDnsZoneStageDnssecKeyVersion(d *schema.ResourceData, m interface{}) error {
	return nil
func (s *DnsZoneStageDnssecKeyVersionResourceCrud) ID() string {
	return s.D.Id()
func (s *DnsZoneStageDnssecKeyVersionResourceCrud) Create() error {
	request := oci_dns.StageZoneDnssecKeyVersionRequest{}
func (s *DnsZoneStageDnssecKeyVersionResourceCrud) SetData() error {
	return nil

=== ./internal/service/dns/dns_rrsets_data_source.go ===
func DnsRrsetsDataSource() *schema.Resource {
	return &schema.Resource{
func readDnsRrsets(d *schema.ResourceData, m interface{}) error {
	sync := &DnsRrsetsDataSourceCrud{}
func (s *DnsRrsetsDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *DnsRrsetsDataSourceCrud) Get() error {
	request := oci_dns.GetZoneRecordsRequest{}
func (s *DnsRrsetsDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/dns/dns_resolvers_data_source.go ===
func DnsResolversDataSource() *schema.Resource {
	return &schema.Resource{
func readDnsResolvers(d *schema.ResourceData, m interface{}) error {
	sync := &DnsResolversDataSourceCrud{}
func (s *DnsResolversDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *DnsResolversDataSourceCrud) Get() error {
	request := oci_dns.ListResolversRequest{}
func (s *DnsResolversDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/dns/dns_export.go ===
func getDnsResolverEndpointId(resource *tf_export.OCIResource) (string, error) {

func processDnsRrset(ctx *tf_export.ResourceDiscoveryContext, resources []*tf_export.OCIResource) ([]*tf_export.OCIResource, error) {

func findDnsRrset(ctx *tf_export.ResourceDiscoveryContext, tfMeta *tf_export.TerraformResourceAssociation, parent *tf_export.OCIResource, resourceGraph *tf_export.TerraformResourceGraph) (resources []*tf_export.OCIResource, err error) {
	// Rrset is singular datasource only
func getDnsRrsetId(resource *tf_export.OCIResource) (string, error) {

func findDnsZones(ctx *tf_export.ResourceDiscoveryContext, tfMeta *tf_export.TerraformResourceAssociation, parent *tf_export.OCIResource, resourceGraph *tf_export.TerraformResourceGraph) (resources []*tf_export.OCIResource, err error) {
	if tfMeta.DatasourceQueryParams == nil {

=== ./internal/service/dns/dns_steering_policy_data_source.go ===
func DnsSteeringPolicyDataSource() *schema.Resource {
	fieldMap := make(map[string]*schema.Schema)
func readSingularDnsSteeringPolicy(d *schema.ResourceData, m interface{}) error {
	sync := &DnsSteeringPolicyDataSourceCrud{}
func (s *DnsSteeringPolicyDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *DnsSteeringPolicyDataSourceCrud) Get() error {
	request := oci_dns.GetSteeringPolicyRequest{}
func (s *DnsSteeringPolicyDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/dns/dns_resolver_endpoint_data_source.go ===
func DnsResolverEndpointDataSource() *schema.Resource {
	fieldMap := make(map[string]*schema.Schema)
func readSingularDnsResolverEndpoint(d *schema.ResourceData, m interface{}) error {
	sync := &DnsResolverEndpointDataSourceCrud{}
func (s *DnsResolverEndpointDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *DnsResolverEndpointDataSourceCrud) Get() error {
	request := oci_dns.GetResolverEndpointRequest{}
func (s *DnsResolverEndpointDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/dns/dns_zone_resource.go ===
func DnsZoneResource() *schema.Resource {
	return &schema.Resource{
func createDnsZone(d *schema.ResourceData, m interface{}) error {
	sync := &DnsZoneResourceCrud{}
func readDnsZone(d *schema.ResourceData, m interface{}) error {
	sync := &DnsZoneResourceCrud{}
func updateDnsZone(d *schema.ResourceData, m interface{}) error {
	sync := &DnsZoneResourceCrud{}
func deleteDnsZone(d *schema.ResourceData, m interface{}) error {
	sync := &DnsZoneResourceCrud{}
func (s *DnsZoneResourceCrud) ID() string {
	return *s.Res.Id
func (s *DnsZoneResourceCrud) CreatedPending() []string {
	return []string{
func (s *DnsZoneResourceCrud) CreatedTarget() []string {
	return []string{
func (s *DnsZoneResourceCrud) DeletedPending() []string {
	return []string{
func (s *DnsZoneResourceCrud) DeletedTarget() []string {
	return []string{
func (s *DnsZoneResourceCrud) UpdatedPending() []string {
	return []string{
func (s *DnsZoneResourceCrud) UpdatedTarget() []string {
	return []string{
func (s *DnsZoneResourceCrud) Create() error {
	request := oci_dns.CreateZoneRequest{}
func (s *DnsZoneResourceCrud) Get() error {
	request := oci_dns.GetZoneRequest{}
func (s *DnsZoneResourceCrud) Update() error {
	if compartment, ok := s.D.GetOkExists("compartment_id"); ok && s.D.HasChange("compartment_id") {
func (s *DnsZoneResourceCrud) Delete() error {
	request := oci_dns.DeleteZoneRequest{}
func (s *DnsZoneResourceCrud) SetData() error {
	s.D.SetId(*s.Res.Id)
func (s *DnsZoneResourceCrud) mapToExternalDownstream(fieldKeyFormat string) (oci_dns.ExternalDownstream, error) {
	result := oci_dns.ExternalDownstream{}
func (s *DnsZoneResourceCrud) mapToExternalMaster(fieldKeyFormat string) (oci_dns.ExternalMaster, error) {
	result := oci_dns.ExternalMaster{}
func (s *DnsZoneResourceCrud) updateCompartment(compartment interface{}) error {
	changeCompartmentRequest := oci_dns.ChangeZoneCompartmentRequest{}

=== ./internal/service/dns/dns_resolver_resource.go ===
func DnsResolverResource() *schema.Resource {
	return &schema.Resource{
func createDnsResolver(d *schema.ResourceData, m interface{}) error {
	sync := &DnsResolverResourceCrud{}
func readDnsResolver(d *schema.ResourceData, m interface{}) error {
	sync := &DnsResolverResourceCrud{}
func updateDnsResolver(d *schema.ResourceData, m interface{}) error {
	sync := &DnsResolverResourceCrud{}
func deleteDnsResolver(d *schema.ResourceData, m interface{}) error {
	sync := &DnsResolverResourceCrud{}
func (s *DnsResolverResourceCrud) ID() string {
	return *s.Res.Id
func (s *DnsResolverResourceCrud) CreatedPending() []string {
	return []string{
func (s *DnsResolverResourceCrud) CreatedTarget() []string {
	return []string{
func (s *DnsResolverResourceCrud) UpdatedPending() []string {
	return []string{
func (s *DnsResolverResourceCrud) UpdatedTarget() []string {
	return []string{
func (s *DnsResolverResourceCrud) DeletedPending() []string {
	return []string{
func (s *DnsResolverResourceCrud) DeletedTarget() []string {
	return []string{
func (s *DnsResolverResourceCrud) Create() error {
	request := oci_dns.UpdateResolverRequest{}
func (s *DnsResolverResourceCrud) Get() error {
	request := oci_dns.GetResolverRequest{}
func (s *DnsResolverResourceCrud) Update() error {
	if compartment, ok := s.D.GetOkExists("compartment_id"); ok && s.D.HasChange("compartment_id") {
func (s *DnsResolverResourceCrud) Delete() error {
	var hasAttachedViews, hasRules, hasDefinedtags, hasFreeformTags bool
func (s *DnsResolverResourceCrud) SetData() error {
	if s.Res.Id != nil {
func (s *DnsResolverResourceCrud) mapToAttachedViewDetails(fieldKeyFormat string) (oci_dns.AttachedViewDetails, error) {
	result := oci_dns.AttachedViewDetails{}
func (s *DnsResolverResourceCrud) mapToResolverRuleDetails(fieldKeyFormat string) (oci_dns.ResolverRuleDetails, error) {
	var baseObject oci_dns.ResolverRuleDetails
func (s *DnsResolverResourceCrud) updateCompartment(compartment interface{}) error {
	changeCompartmentRequest := oci_dns.ChangeResolverCompartmentRequest{}

=== ./internal/service/dns/dns_resolver_endpoint_resource.go ===
func DnsResolverEndpointResource() *schema.Resource {
	return &schema.Resource{
func createDnsResolverEndpoint(d *schema.ResourceData, m interface{}) error {
	sync := &DnsResolverEndpointResourceCrud{}
func readDnsResolverEndpoint(d *schema.ResourceData, m interface{}) error {
	sync := &DnsResolverEndpointResourceCrud{}
func updateDnsResolverEndpoint(d *schema.ResourceData, m interface{}) error {
	sync := &DnsResolverEndpointResourceCrud{}
func deleteDnsResolverEndpoint(d *schema.ResourceData, m interface{}) error {
	sync := &DnsResolverEndpointResourceCrud{}
func (s *DnsResolverEndpointResourceCrud) ID() string {
	return GetResolverEndpointCompositeId(s.D.Get("name").(string), s.D.Get("resolver_id").(string))
func (s *DnsResolverEndpointResourceCrud) CreatedPending() []string {
	return []string{
func (s *DnsResolverEndpointResourceCrud) CreatedTarget() []string {
	return []string{
func (s *DnsResolverEndpointResourceCrud) UpdatedPending() []string {
	return []string{
func (s *DnsResolverEndpointResourceCrud) UpdatedTarget() []string {
	return []string{
func (s *DnsResolverEndpointResourceCrud) DeletedPending() []string {
	return []string{
func (s *DnsResolverEndpointResourceCrud) DeletedTarget() []string {
	return []string{
func (s *DnsResolverEndpointResourceCrud) Create() error {
	request := oci_dns.CreateResolverEndpointRequest{}
func (s *DnsResolverEndpointResourceCrud) Get() error {
	request := oci_dns.GetResolverEndpointRequest{}
func (s *DnsResolverEndpointResourceCrud) Update() error {
	request := oci_dns.UpdateResolverEndpointRequest{}
func (s *DnsResolverEndpointResourceCrud) Delete() error {
	request := oci_dns.DeleteResolverEndpointRequest{}
func (s *DnsResolverEndpointResourceCrud) SetData() error {

func (s *DnsResolverEndpointResourceCrud) populateTopLevelPolymorphicCreateResolverEndpointRequest(request *oci_dns.CreateResolverEndpointRequest) error {
	//discriminator
func (s *DnsResolverEndpointResourceCrud) populateTopLevelPolymorphicUpdateResolverEndpointRequest(request *oci_dns.UpdateResolverEndpointRequest) error {
	//discriminator

=== ./internal/service/dns/register_resource.go ===
func RegisterResource() {
	tfresource.RegisterResource("oci_dns_action_create_zone_from_zone_file", DnsActionCreateZoneFromZoneFileResource())

=== ./internal/service/dns/dns_views_data_source.go ===
func DnsViewsDataSource() *schema.Resource {
	return &schema.Resource{
func readDnsViews(d *schema.ResourceData, m interface{}) error {
	sync := &DnsViewsDataSourceCrud{}
func (s *DnsViewsDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *DnsViewsDataSourceCrud) Get() error {
	request := oci_dns.ListViewsRequest{}
func (s *DnsViewsDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/events/events_rule_resource.go ===
func EventsRuleResource() *schema.Resource {
	return &schema.Resource{
func createEventsRule(d *schema.ResourceData, m interface{}) error {
	sync := &EventsRuleResourceCrud{}
func readEventsRule(d *schema.ResourceData, m interface{}) error {
	sync := &EventsRuleResourceCrud{}
func updateEventsRule(d *schema.ResourceData, m interface{}) error {
	sync := &EventsRuleResourceCrud{}
func deleteEventsRule(d *schema.ResourceData, m interface{}) error {
	sync := &EventsRuleResourceCrud{}
func (s *EventsRuleResourceCrud) ID() string {
	return *s.Res.Id
func (s *EventsRuleResourceCrud) CreatedPending() []string {
	return []string{
func (s *EventsRuleResourceCrud) CreatedTarget() []string {
	return []string{
func (s *EventsRuleResourceCrud) DeletedPending() []string {
	return []string{
func (s *EventsRuleResourceCrud) DeletedTarget() []string {
	return []string{
func (s *EventsRuleResourceCrud) Create() error {
	request := oci_events.CreateRuleRequest{}
func (s *EventsRuleResourceCrud) Get() error {
	request := oci_events.GetRuleRequest{}
func (s *EventsRuleResourceCrud) Update() error {
	if compartment, ok := s.D.GetOkExists("compartment_id"); ok && s.D.HasChange("compartment_id") {
func (s *EventsRuleResourceCrud) Delete() error {
	request := oci_events.DeleteRuleRequest{}
func (s *EventsRuleResourceCrud) SetData() error {
	if s.Res.Actions != nil {
func (s *EventsRuleResourceCrud) mapToActionDetails(fieldKeyFormat string) (oci_events.ActionDetails, error) {
	var baseObject oci_events.ActionDetails
func (s *EventsRuleResourceCrud) mapToActionDetailsList(fieldKeyFormat string) (oci_events.ActionDetailsList, error) {
	result := oci_events.ActionDetailsList{}
func (s *EventsRuleResourceCrud) updateCompartment(compartment interface{}) error {
	changeCompartmentRequest := oci_events.ChangeRuleCompartmentRequest{}

=== ./internal/service/events/events_rules_data_source.go ===
func EventsRulesDataSource() *schema.Resource {
	return &schema.Resource{
func readEventsRules(d *schema.ResourceData, m interface{}) error {
	sync := &EventsRulesDataSourceCrud{}
func (s *EventsRulesDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *EventsRulesDataSourceCrud) Get() error {
	request := oci_events.ListRulesRequest{}
func (s *EventsRulesDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/events/events_rule_data_source.go ===
func EventsRuleDataSource() *schema.Resource {
	fieldMap := make(map[string]*schema.Schema)
func readSingularEventsRule(d *schema.ResourceData, m interface{}) error {
	sync := &EventsRuleDataSourceCrud{}
func (s *EventsRuleDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *EventsRuleDataSourceCrud) Get() error {
	request := oci_events.GetRuleRequest{}
func (s *EventsRuleDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/events/register_resource.go ===
func RegisterResource() {
	tfresource.RegisterResource("oci_events_rule", EventsRuleResource())

=== ./internal/service/email/email_email_return_path_data_source.go ===
func EmailEmailReturnPathDataSource() *schema.Resource {
	fieldMap := make(map[string]*schema.Schema)
func readSingularEmailEmailReturnPath(d *schema.ResourceData, m interface{}) error {
	sync := &EmailEmailReturnPathDataSourceCrud{}
func (s *EmailEmailReturnPathDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *EmailEmailReturnPathDataSourceCrud) Get() error {
	request := oci_email.GetEmailReturnPathRequest{}
func (s *EmailEmailReturnPathDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/email/email_dkim_resource.go ===
func EmailDkimResource() *schema.Resource {
	return &schema.Resource{
func createEmailDkim(d *schema.ResourceData, m interface{}) error {
	sync := &EmailDkimResourceCrud{}
func readEmailDkim(d *schema.ResourceData, m interface{}) error {
	sync := &EmailDkimResourceCrud{}
func updateEmailDkim(d *schema.ResourceData, m interface{}) error {
	sync := &EmailDkimResourceCrud{}
func deleteEmailDkim(d *schema.ResourceData, m interface{}) error {
	sync := &EmailDkimResourceCrud{}
func (s *EmailDkimResourceCrud) ID() string {
	return *s.Res.Id
func (s *EmailDkimResourceCrud) CreatedPending() []string {
	return []string{
func (s *EmailDkimResourceCrud) CreatedTarget() []string {
	return []string{
func (s *EmailDkimResourceCrud) DeletedPending() []string {
	return []string{
func (s *EmailDkimResourceCrud) DeletedTarget() []string {
	return []string{
func (s *EmailDkimResourceCrud) Create() error {
	request := oci_email.CreateDkimRequest{}
func (s *EmailDkimResourceCrud) getDkimFromWorkRequest(workId *string, retryPolicy *oci_common.RetryPolicy,
	actionTypeEnum oci_email.ActionTypeEnum, timeout time.Duration) error {
func (s *EmailDkimResourceCrud) Get() error {
	request := oci_email.GetDkimRequest{}
func (s *EmailDkimResourceCrud) Update() error {
	request := oci_email.UpdateDkimRequest{}
func (s *EmailDkimResourceCrud) Delete() error {
	request := oci_email.DeleteDkimRequest{}
func (s *EmailDkimResourceCrud) SetData() error {
	if s.Res.CnameRecordValue != nil {

=== ./internal/service/email/email_sender_resource.go ===
func EmailSenderResource() *schema.Resource {
	return &schema.Resource{
func createEmailSender(d *schema.ResourceData, m interface{}) error {
	sync := &EmailSenderResourceCrud{}
func readEmailSender(d *schema.ResourceData, m interface{}) error {
	sync := &EmailSenderResourceCrud{}
func updateEmailSender(d *schema.ResourceData, m interface{}) error {
	sync := &EmailSenderResourceCrud{}
func deleteEmailSender(d *schema.ResourceData, m interface{}) error {
	sync := &EmailSenderResourceCrud{}
func (s *EmailSenderResourceCrud) ID() string {
	return *s.Res.Id
func (s *EmailSenderResourceCrud) CreatedPending() []string {
	return []string{
func (s *EmailSenderResourceCrud) CreatedTarget() []string {
	return []string{
func (s *EmailSenderResourceCrud) DeletedPending() []string {
	return []string{
func (s *EmailSenderResourceCrud) DeletedTarget() []string {
	return []string{
func (s *EmailSenderResourceCrud) Create() error {
	request := oci_email.CreateSenderRequest{}
func (s *EmailSenderResourceCrud) Get() error {
	request := oci_email.GetSenderRequest{}
func (s *EmailSenderResourceCrud) Update() error {
	if compartment, ok := s.D.GetOkExists("compartment_id"); ok && s.D.HasChange("compartment_id") {
func (s *EmailSenderResourceCrud) Delete() error {
	request := oci_email.DeleteSenderRequest{}
func (s *EmailSenderResourceCrud) SetData() error {
	if s.Res.CompartmentId != nil {
func (s *EmailSenderResourceCrud) updateCompartment(compartment interface{}) error {
	changeCompartmentRequest := oci_email.ChangeSenderCompartmentRequest{}

=== ./internal/service/email/email_email_domain_resource.go ===
func EmailEmailDomainResource() *schema.Resource {
	return &schema.Resource{
func createEmailEmailDomain(d *schema.ResourceData, m interface{}) error {
	sync := &EmailEmailDomainResourceCrud{}
func readEmailEmailDomain(d *schema.ResourceData, m interface{}) error {
	sync := &EmailEmailDomainResourceCrud{}
func updateEmailEmailDomain(d *schema.ResourceData, m interface{}) error {
	sync := &EmailEmailDomainResourceCrud{}
func deleteEmailEmailDomain(d *schema.ResourceData, m interface{}) error {
	sync := &EmailEmailDomainResourceCrud{}
func (s *EmailEmailDomainResourceCrud) ID() string {
	return *s.Res.Id
func (s *EmailEmailDomainResourceCrud) CreatedPending() []string {
	return []string{
func (s *EmailEmailDomainResourceCrud) CreatedTarget() []string {
	return []string{
func (s *EmailEmailDomainResourceCrud) DeletedPending() []string {
	return []string{
func (s *EmailEmailDomainResourceCrud) DeletedTarget() []string {
	return []string{
func (s *EmailEmailDomainResourceCrud) Create() error {
	request := oci_email.CreateEmailDomainRequest{}
func (s *EmailEmailDomainResourceCrud) getEmailDomainFromWorkRequest(workId *string, retryPolicy *oci_common.RetryPolicy,
	actionTypeEnum oci_email.ActionTypeEnum, timeout time.Duration) error {
func (s *EmailEmailDomainResourceCrud) Get() error {
	request := oci_email.GetEmailDomainRequest{}
func (s *EmailEmailDomainResourceCrud) Update() error {
	if compartment, ok := s.D.GetOkExists("compartment_id"); ok && s.D.HasChange("compartment_id") {
func (s *EmailEmailDomainResourceCrud) Delete() error {
	request := oci_email.DeleteEmailDomainRequest{}
func (s *EmailEmailDomainResourceCrud) SetData() error {
	if s.Res.ActiveDkimId != nil {
func (s *EmailEmailDomainResourceCrud) updateCompartment(compartment interface{}) error {
	changeCompartmentRequest := oci_email.ChangeEmailDomainCompartmentRequest{}

=== ./internal/service/email/email_dkims_data_source.go ===
func EmailDkimsDataSource() *schema.Resource {
	return &schema.Resource{
func readEmailDkims(d *schema.ResourceData, m interface{}) error {
	sync := &EmailDkimsDataSourceCrud{}
func (s *EmailDkimsDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *EmailDkimsDataSourceCrud) Get() error {
	request := oci_email.ListDkimsRequest{}
func (s *EmailDkimsDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/email/email_configuration_data_source.go ===
func EmailConfigurationDataSource() *schema.Resource {
	return &schema.Resource{
func readSingularEmailConfiguration(d *schema.ResourceData, m interface{}) error {
	sync := &EmailConfigurationDataSourceCrud{}
func (s *EmailConfigurationDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *EmailConfigurationDataSourceCrud) Get() error {
	request := oci_email.GetEmailConfigurationRequest{}
func (s *EmailConfigurationDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/email/email_sender_data_source.go ===
func EmailSenderDataSource() *schema.Resource {
	fieldMap := make(map[string]*schema.Schema)
func readSingularEmailSender(d *schema.ResourceData, m interface{}) error {
	sync := &EmailSenderDataSourceCrud{}
func (s *EmailSenderDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *EmailSenderDataSourceCrud) Get() error {
	request := oci_email.GetSenderRequest{}
func (s *EmailSenderDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/email/email_email_domains_data_source.go ===
func EmailEmailDomainsDataSource() *schema.Resource {
	return &schema.Resource{
func readEmailEmailDomains(d *schema.ResourceData, m interface{}) error {
	sync := &EmailEmailDomainsDataSourceCrud{}
func (s *EmailEmailDomainsDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *EmailEmailDomainsDataSourceCrud) Get() error {
	request := oci_email.ListEmailDomainsRequest{}
func (s *EmailEmailDomainsDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/email/email_email_return_path_resource.go ===
func EmailEmailReturnPathResource() *schema.Resource {
	return &schema.Resource{
func createEmailEmailReturnPath(d *schema.ResourceData, m interface{}) error {
	sync := &EmailEmailReturnPathResourceCrud{}
func readEmailEmailReturnPath(d *schema.ResourceData, m interface{}) error {
	sync := &EmailEmailReturnPathResourceCrud{}
func updateEmailEmailReturnPath(d *schema.ResourceData, m interface{}) error {
	sync := &EmailEmailReturnPathResourceCrud{}
func deleteEmailEmailReturnPath(d *schema.ResourceData, m interface{}) error {
	sync := &EmailEmailReturnPathResourceCrud{}
func (s *EmailEmailReturnPathResourceCrud) ID() string {
	return *s.Res.Id
func (s *EmailEmailReturnPathResourceCrud) CreatedPending() []string {
	return []string{
func (s *EmailEmailReturnPathResourceCrud) CreatedTarget() []string {
	return []string{
func (s *EmailEmailReturnPathResourceCrud) DeletedPending() []string {
	return []string{
func (s *EmailEmailReturnPathResourceCrud) DeletedTarget() []string {
	return []string{
func (s *EmailEmailReturnPathResourceCrud) Create() error {
	request := oci_email.CreateEmailReturnPathRequest{}
func (s *EmailEmailReturnPathResourceCrud) getEmailReturnPathFromWorkRequest(workId *string, retryPolicy *oci_common.RetryPolicy,
	actionTypeEnum oci_email.ActionTypeEnum, timeout time.Duration) error {
func (s *EmailEmailReturnPathResourceCrud) Get() error {
	request := oci_email.GetEmailReturnPathRequest{}
func (s *EmailEmailReturnPathResourceCrud) Update() error {
	request := oci_email.UpdateEmailReturnPathRequest{}
func (s *EmailEmailReturnPathResourceCrud) Delete() error {
	request := oci_email.DeleteEmailReturnPathRequest{}
func (s *EmailEmailReturnPathResourceCrud) SetData() error {
	if s.Res.CnameRecordValue != nil {

=== ./internal/service/email/email_email_domain_data_source.go ===
func EmailEmailDomainDataSource() *schema.Resource {
	fieldMap := make(map[string]*schema.Schema)
func readSingularEmailEmailDomain(d *schema.ResourceData, m interface{}) error {
	sync := &EmailEmailDomainDataSourceCrud{}
func (s *EmailEmailDomainDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *EmailEmailDomainDataSourceCrud) Get() error {
	request := oci_email.GetEmailDomainRequest{}
func (s *EmailEmailDomainDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/email/email_suppressions_data_source.go ===
func EmailSuppressionsDataSource() *schema.Resource {
	return &schema.Resource{
func readEmailSuppressions(d *schema.ResourceData, m interface{}) error {
	sync := &EmailSuppressionsDataSourceCrud{}
func (s *EmailSuppressionsDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *EmailSuppressionsDataSourceCrud) Get() error {
	request := oci_email.ListSuppressionsRequest{}
func (s *EmailSuppressionsDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/email/email_suppression_data_source.go ===
func EmailSuppressionDataSource() *schema.Resource {
	fieldMap := make(map[string]*schema.Schema)
func readSingularEmailSuppression(d *schema.ResourceData, m interface{}) error {
	sync := &EmailSuppressionDataSourceCrud{}
func (s *EmailSuppressionDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *EmailSuppressionDataSourceCrud) Get() error {
	request := oci_email.GetSuppressionRequest{}
func (s *EmailSuppressionDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/email/email_suppression_resource.go ===
func EmailSuppressionResource() *schema.Resource {
	return &schema.Resource{
func createEmailSuppression(d *schema.ResourceData, m interface{}) error {
	sync := &EmailSuppressionResourceCrud{}
func readEmailSuppression(d *schema.ResourceData, m interface{}) error {
	sync := &EmailSuppressionResourceCrud{}
func deleteEmailSuppression(d *schema.ResourceData, m interface{}) error {
	sync := &EmailSuppressionResourceCrud{}
func (s *EmailSuppressionResourceCrud) ID() string {
	return *s.Res.Id
func (s *EmailSuppressionResourceCrud) Create() error {
	request := oci_email.CreateSuppressionRequest{}
func (s *EmailSuppressionResourceCrud) Get() error {
	request := oci_email.GetSuppressionRequest{}
func (s *EmailSuppressionResourceCrud) Delete() error {
	request := oci_email.DeleteSuppressionRequest{}
func (s *EmailSuppressionResourceCrud) SetData() error {
	if s.Res.CompartmentId != nil {

=== ./internal/service/email/email_senders_data_source.go ===
func EmailSendersDataSource() *schema.Resource {
	return &schema.Resource{
func readEmailSenders(d *schema.ResourceData, m interface{}) error {
	sync := &EmailSendersDataSourceCrud{}
func (s *EmailSendersDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *EmailSendersDataSourceCrud) Get() error {
	request := oci_email.ListSendersRequest{}
func (s *EmailSendersDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/email/email_dkim_data_source.go ===
func EmailDkimDataSource() *schema.Resource {
	fieldMap := make(map[string]*schema.Schema)
func readSingularEmailDkim(d *schema.ResourceData, m interface{}) error {
	sync := &EmailDkimDataSourceCrud{}
func (s *EmailDkimDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *EmailDkimDataSourceCrud) Get() error {
	request := oci_email.GetDkimRequest{}
func (s *EmailDkimDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/email/register_resource.go ===
func RegisterResource() {
	tfresource.RegisterResource("oci_email_dkim", EmailDkimResource())

=== ./internal/service/email/email_email_return_paths_data_source.go ===
func EmailEmailReturnPathsDataSource() *schema.Resource {
	return &schema.Resource{
func readEmailEmailReturnPaths(d *schema.ResourceData, m interface{}) error {
	sync := &EmailEmailReturnPathsDataSourceCrud{}
func (s *EmailEmailReturnPathsDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *EmailEmailReturnPathsDataSourceCrud) Get() error {
	request := oci_email.ListEmailReturnPathsRequest{}
func (s *EmailEmailReturnPathsDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/service_mesh/service_mesh_mesh_resource.go ===
func ServiceMeshMeshResource() *schema.Resource {
	return &schema.Resource{
func createServiceMeshMesh(d *schema.ResourceData, m interface{}) error {
	sync := &ServiceMeshMeshResourceCrud{}
func readServiceMeshMesh(d *schema.ResourceData, m interface{}) error {
	sync := &ServiceMeshMeshResourceCrud{}
func updateServiceMeshMesh(d *schema.ResourceData, m interface{}) error {
	sync := &ServiceMeshMeshResourceCrud{}
func deleteServiceMeshMesh(d *schema.ResourceData, m interface{}) error {
	sync := &ServiceMeshMeshResourceCrud{}
func (s *ServiceMeshMeshResourceCrud) ID() string {
	return *s.Res.Id
func (s *ServiceMeshMeshResourceCrud) CreatedPending() []string {
	return []string{
func (s *ServiceMeshMeshResourceCrud) CreatedTarget() []string {
	return []string{
func (s *ServiceMeshMeshResourceCrud) DeletedPending() []string {
	return []string{
func (s *ServiceMeshMeshResourceCrud) DeletedTarget() []string {
	return []string{
func (s *ServiceMeshMeshResourceCrud) Create() error {
	request := oci_service_mesh.CreateMeshRequest{}
func (s *ServiceMeshMeshResourceCrud) getMeshFromWorkRequest(workId *string, retryPolicy *oci_common.RetryPolicy,
	actionTypeEnum oci_service_mesh.ActionTypeEnum, timeout time.Duration) error {
func (s *ServiceMeshMeshResourceCrud) Get() error {
	request := oci_service_mesh.GetMeshRequest{}
func (s *ServiceMeshMeshResourceCrud) Update() error {
	if compartment, ok := s.D.GetOkExists("compartment_id"); ok && s.D.HasChange("compartment_id") {
func (s *ServiceMeshMeshResourceCrud) Delete() error {
	request := oci_service_mesh.DeleteMeshRequest{}
func (s *ServiceMeshMeshResourceCrud) SetData() error {
	certificateAuthorities := []interface{}{}
func (s *ServiceMeshMeshResourceCrud) mapToCertificateAuthority(fieldKeyFormat string) (oci_service_mesh.CertificateAuthority, error) {
	result := oci_service_mesh.CertificateAuthority{}
func (s *ServiceMeshMeshResourceCrud) mapToMeshMutualTransportLayerSecurity(fieldKeyFormat string) (oci_service_mesh.MeshMutualTransportLayerSecurity, error) {
	result := oci_service_mesh.MeshMutualTransportLayerSecurity{}
func (s *ServiceMeshMeshResourceCrud) updateCompartment(compartment interface{}) error {
	changeCompartmentRequest := oci_service_mesh.ChangeMeshCompartmentRequest{}

=== ./internal/service/service_mesh/service_mesh_virtual_service_route_table_resource.go ===
func ServiceMeshVirtualServiceRouteTableResource() *schema.Resource {
	return &schema.Resource{
func createServiceMeshVirtualServiceRouteTable(d *schema.ResourceData, m interface{}) error {
	sync := &ServiceMeshVirtualServiceRouteTableResourceCrud{}
func readServiceMeshVirtualServiceRouteTable(d *schema.ResourceData, m interface{}) error {
	sync := &ServiceMeshVirtualServiceRouteTableResourceCrud{}
func updateServiceMeshVirtualServiceRouteTable(d *schema.ResourceData, m interface{}) error {
	sync := &ServiceMeshVirtualServiceRouteTableResourceCrud{}
func deleteServiceMeshVirtualServiceRouteTable(d *schema.ResourceData, m interface{}) error {
	sync := &ServiceMeshVirtualServiceRouteTableResourceCrud{}
func (s *ServiceMeshVirtualServiceRouteTableResourceCrud) ID() string {
	return *s.Res.Id
func (s *ServiceMeshVirtualServiceRouteTableResourceCrud) CreatedPending() []string {
	return []string{
func (s *ServiceMeshVirtualServiceRouteTableResourceCrud) CreatedTarget() []string {
	return []string{
func (s *ServiceMeshVirtualServiceRouteTableResourceCrud) DeletedPending() []string {
	return []string{
func (s *ServiceMeshVirtualServiceRouteTableResourceCrud) DeletedTarget() []string {
	return []string{
func (s *ServiceMeshVirtualServiceRouteTableResourceCrud) Create() error {
	request := oci_service_mesh.CreateVirtualServiceRouteTableRequest{}
func (s *ServiceMeshVirtualServiceRouteTableResourceCrud) getVirtualServiceRouteTableFromWorkRequest(workId *string, retryPolicy *oci_common.RetryPolicy,
	actionTypeEnum oci_service_mesh.ActionTypeEnum, timeout time.Duration) error {
func (s *ServiceMeshVirtualServiceRouteTableResourceCrud) Get() error {
	request := oci_service_mesh.GetVirtualServiceRouteTableRequest{}
func (s *ServiceMeshVirtualServiceRouteTableResourceCrud) Update() error {
	if compartment, ok := s.D.GetOkExists("compartment_id"); ok && s.D.HasChange("compartment_id") {
func (s *ServiceMeshVirtualServiceRouteTableResourceCrud) Delete() error {
	request := oci_service_mesh.DeleteVirtualServiceRouteTableRequest{}
func (s *ServiceMeshVirtualServiceRouteTableResourceCrud) SetData() error {
	if s.Res.CompartmentId != nil {
func (s *ServiceMeshVirtualServiceRouteTableResourceCrud) mapToVirtualDeploymentTrafficRuleTargetDetails(fieldKeyFormat string) (oci_service_mesh.VirtualDeploymentTrafficRuleTargetDetails, error) {
	result := oci_service_mesh.VirtualDeploymentTrafficRuleTargetDetails{}
func (s *ServiceMeshVirtualServiceRouteTableResourceCrud) mapToVirtualServiceTrafficRouteRuleDetails(fieldKeyFormat string) (oci_service_mesh.VirtualServiceTrafficRouteRuleDetails, error) {
	var baseObject oci_service_mesh.VirtualServiceTrafficRouteRuleDetails
func (s *ServiceMeshVirtualServiceRouteTableResourceCrud) updateCompartment(compartment interface{}) error {
	changeCompartmentRequest := oci_service_mesh.ChangeVirtualServiceRouteTableCompartmentRequest{}

=== ./internal/service/service_mesh/service_mesh_virtual_service_resource.go ===
func ServiceMeshVirtualServiceResource() *schema.Resource {
	return &schema.Resource{
func createServiceMeshVirtualService(d *schema.ResourceData, m interface{}) error {
	sync := &ServiceMeshVirtualServiceResourceCrud{}
func readServiceMeshVirtualService(d *schema.ResourceData, m interface{}) error {
	sync := &ServiceMeshVirtualServiceResourceCrud{}
func updateServiceMeshVirtualService(d *schema.ResourceData, m interface{}) error {
	sync := &ServiceMeshVirtualServiceResourceCrud{}
func deleteServiceMeshVirtualService(d *schema.ResourceData, m interface{}) error {
	sync := &ServiceMeshVirtualServiceResourceCrud{}
func (s *ServiceMeshVirtualServiceResourceCrud) ID() string {
	return *s.Res.Id
func (s *ServiceMeshVirtualServiceResourceCrud) CreatedPending() []string {
	return []string{
func (s *ServiceMeshVirtualServiceResourceCrud) CreatedTarget() []string {
	return []string{
func (s *ServiceMeshVirtualServiceResourceCrud) DeletedPending() []string {
	return []string{
func (s *ServiceMeshVirtualServiceResourceCrud) DeletedTarget() []string {
	return []string{
func (s *ServiceMeshVirtualServiceResourceCrud) Create() error {
	request := oci_service_mesh.CreateVirtualServiceRequest{}
func (s *ServiceMeshVirtualServiceResourceCrud) getVirtualServiceFromWorkRequest(workId *string, retryPolicy *oci_common.RetryPolicy,
	actionTypeEnum oci_service_mesh.ActionTypeEnum, timeout time.Duration) error {
func (s *ServiceMeshVirtualServiceResourceCrud) Get() error {
	request := oci_service_mesh.GetVirtualServiceRequest{}
func (s *ServiceMeshVirtualServiceResourceCrud) Update() error {
	if compartment, ok := s.D.GetOkExists("compartment_id"); ok && s.D.HasChange("compartment_id") {
func (s *ServiceMeshVirtualServiceResourceCrud) Delete() error {
	request := oci_service_mesh.DeleteVirtualServiceRequest{}
func (s *ServiceMeshVirtualServiceResourceCrud) SetData() error {
	if s.Res.CompartmentId != nil {
func (s *ServiceMeshVirtualServiceResourceCrud) mapToDefaultVirtualServiceRoutingPolicy(fieldKeyFormat string) (oci_service_mesh.DefaultVirtualServiceRoutingPolicy, error) {
	result := oci_service_mesh.DefaultVirtualServiceRoutingPolicy{}
func (s *ServiceMeshVirtualServiceResourceCrud) mapToVirtualServiceMutualTransportLayerSecurityDetails(fieldKeyFormat string) (oci_service_mesh.VirtualServiceMutualTransportLayerSecurityDetails, error) {
	result := oci_service_mesh.VirtualServiceMutualTransportLayerSecurityDetails{}
func (s *ServiceMeshVirtualServiceResourceCrud) updateCompartment(compartment interface{}) error {
	changeCompartmentRequest := oci_service_mesh.ChangeVirtualServiceCompartmentRequest{}

=== ./internal/service/service_mesh/service_mesh_mesh_data_source.go ===
func ServiceMeshMeshDataSource() *schema.Resource {
	fieldMap := make(map[string]*schema.Schema)
func readSingularServiceMeshMesh(d *schema.ResourceData, m interface{}) error {
	sync := &ServiceMeshMeshDataSourceCrud{}
func (s *ServiceMeshMeshDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *ServiceMeshMeshDataSourceCrud) Get() error {
	request := oci_service_mesh.GetMeshRequest{}
func (s *ServiceMeshMeshDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/service_mesh/service_mesh_virtual_service_route_tables_data_source.go ===
func ServiceMeshVirtualServiceRouteTablesDataSource() *schema.Resource {
	return &schema.Resource{
func readServiceMeshVirtualServiceRouteTables(d *schema.ResourceData, m interface{}) error {
	sync := &ServiceMeshVirtualServiceRouteTablesDataSourceCrud{}
func (s *ServiceMeshVirtualServiceRouteTablesDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *ServiceMeshVirtualServiceRouteTablesDataSourceCrud) Get() error {
	request := oci_service_mesh.ListVirtualServiceRouteTablesRequest{}
func (s *ServiceMeshVirtualServiceRouteTablesDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/service_mesh/service_mesh_ingress_gateway_route_tables_data_source.go ===
func ServiceMeshIngressGatewayRouteTablesDataSource() *schema.Resource {
	return &schema.Resource{
func readServiceMeshIngressGatewayRouteTables(d *schema.ResourceData, m interface{}) error {
	sync := &ServiceMeshIngressGatewayRouteTablesDataSourceCrud{}
func (s *ServiceMeshIngressGatewayRouteTablesDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *ServiceMeshIngressGatewayRouteTablesDataSourceCrud) Get() error {
	request := oci_service_mesh.ListIngressGatewayRouteTablesRequest{}
func (s *ServiceMeshIngressGatewayRouteTablesDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/service_mesh/service_mesh_meshes_data_source.go ===
func ServiceMeshMeshesDataSource() *schema.Resource {
	return &schema.Resource{
func readServiceMeshMeshes(d *schema.ResourceData, m interface{}) error {
	sync := &ServiceMeshMeshesDataSourceCrud{}
func (s *ServiceMeshMeshesDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *ServiceMeshMeshesDataSourceCrud) Get() error {
	request := oci_service_mesh.ListMeshesRequest{}
func (s *ServiceMeshMeshesDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/service_mesh/service_mesh_access_policy_data_source.go ===
func ServiceMeshAccessPolicyDataSource() *schema.Resource {
	fieldMap := make(map[string]*schema.Schema)
func readSingularServiceMeshAccessPolicy(d *schema.ResourceData, m interface{}) error {
	sync := &ServiceMeshAccessPolicyDataSourceCrud{}
func (s *ServiceMeshAccessPolicyDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *ServiceMeshAccessPolicyDataSourceCrud) Get() error {
	request := oci_service_mesh.GetAccessPolicyRequest{}
func (s *ServiceMeshAccessPolicyDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/service_mesh/service_mesh_virtual_deployments_data_source.go ===
func ServiceMeshVirtualDeploymentsDataSource() *schema.Resource {
	return &schema.Resource{
func readServiceMeshVirtualDeployments(d *schema.ResourceData, m interface{}) error {
	sync := &ServiceMeshVirtualDeploymentsDataSourceCrud{}
func (s *ServiceMeshVirtualDeploymentsDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *ServiceMeshVirtualDeploymentsDataSourceCrud) Get() error {
	request := oci_service_mesh.ListVirtualDeploymentsRequest{}
func (s *ServiceMeshVirtualDeploymentsDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/service_mesh/service_mesh_ingress_gateway_data_source.go ===
func ServiceMeshIngressGatewayDataSource() *schema.Resource {
	fieldMap := make(map[string]*schema.Schema)
func readSingularServiceMeshIngressGateway(d *schema.ResourceData, m interface{}) error {
	sync := &ServiceMeshIngressGatewayDataSourceCrud{}
func (s *ServiceMeshIngressGatewayDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *ServiceMeshIngressGatewayDataSourceCrud) Get() error {
	request := oci_service_mesh.GetIngressGatewayRequest{}
func (s *ServiceMeshIngressGatewayDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/service_mesh/service_mesh_ingress_gateway_route_table_resource.go ===
func ServiceMeshIngressGatewayRouteTableResource() *schema.Resource {
	return &schema.Resource{
func createServiceMeshIngressGatewayRouteTable(d *schema.ResourceData, m interface{}) error {
	sync := &ServiceMeshIngressGatewayRouteTableResourceCrud{}
func readServiceMeshIngressGatewayRouteTable(d *schema.ResourceData, m interface{}) error {
	sync := &ServiceMeshIngressGatewayRouteTableResourceCrud{}
func updateServiceMeshIngressGatewayRouteTable(d *schema.ResourceData, m interface{}) error {
	sync := &ServiceMeshIngressGatewayRouteTableResourceCrud{}
func deleteServiceMeshIngressGatewayRouteTable(d *schema.ResourceData, m interface{}) error {
	sync := &ServiceMeshIngressGatewayRouteTableResourceCrud{}
func (s *ServiceMeshIngressGatewayRouteTableResourceCrud) ID() string {
	return *s.Res.Id
func (s *ServiceMeshIngressGatewayRouteTableResourceCrud) CreatedPending() []string {
	return []string{
func (s *ServiceMeshIngressGatewayRouteTableResourceCrud) CreatedTarget() []string {
	return []string{
func (s *ServiceMeshIngressGatewayRouteTableResourceCrud) DeletedPending() []string {
	return []string{
func (s *ServiceMeshIngressGatewayRouteTableResourceCrud) DeletedTarget() []string {
	return []string{
func (s *ServiceMeshIngressGatewayRouteTableResourceCrud) Create() error {
	request := oci_service_mesh.CreateIngressGatewayRouteTableRequest{}
func (s *ServiceMeshIngressGatewayRouteTableResourceCrud) getIngressGatewayRouteTableFromWorkRequest(workId *string, retryPolicy *oci_common.RetryPolicy,
	actionTypeEnum oci_service_mesh.ActionTypeEnum, timeout time.Duration) error {
func (s *ServiceMeshIngressGatewayRouteTableResourceCrud) Get() error {
	request := oci_service_mesh.GetIngressGatewayRouteTableRequest{}
func (s *ServiceMeshIngressGatewayRouteTableResourceCrud) Update() error {
	if compartment, ok := s.D.GetOkExists("compartment_id"); ok && s.D.HasChange("compartment_id") {
func (s *ServiceMeshIngressGatewayRouteTableResourceCrud) Delete() error {
	request := oci_service_mesh.DeleteIngressGatewayRouteTableRequest{}
func (s *ServiceMeshIngressGatewayRouteTableResourceCrud) SetData() error {
	if s.Res.CompartmentId != nil {
func (s *ServiceMeshIngressGatewayRouteTableResourceCrud) mapToIngressGatewayHostRef(fieldKeyFormat string) (oci_service_mesh.IngressGatewayHostRef, error) {
	result := oci_service_mesh.IngressGatewayHostRef{}
func (s *ServiceMeshIngressGatewayRouteTableResourceCrud) mapToIngressGatewayTrafficRouteRuleDetails(fieldKeyFormat string) (oci_service_mesh.IngressGatewayTrafficRouteRuleDetails, error) {
	var baseObject oci_service_mesh.IngressGatewayTrafficRouteRuleDetails
func (s *ServiceMeshIngressGatewayRouteTableResourceCrud) mapToVirtualServiceTrafficRuleTargetDetails(fieldKeyFormat string) (oci_service_mesh.VirtualServiceTrafficRuleTargetDetails, error) {
	result := oci_service_mesh.VirtualServiceTrafficRuleTargetDetails{}
func (s *ServiceMeshIngressGatewayRouteTableResourceCrud) updateCompartment(compartment interface{}) error {
	changeCompartmentRequest := oci_service_mesh.ChangeIngressGatewayRouteTableCompartmentRequest{}

=== ./internal/service/service_mesh/service_mesh_virtual_service_route_table_data_source.go ===
func ServiceMeshVirtualServiceRouteTableDataSource() *schema.Resource {
	fieldMap := make(map[string]*schema.Schema)
func readSingularServiceMeshVirtualServiceRouteTable(d *schema.ResourceData, m interface{}) error {
	sync := &ServiceMeshVirtualServiceRouteTableDataSourceCrud{}
func (s *ServiceMeshVirtualServiceRouteTableDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *ServiceMeshVirtualServiceRouteTableDataSourceCrud) Get() error {
	request := oci_service_mesh.GetVirtualServiceRouteTableRequest{}
func (s *ServiceMeshVirtualServiceRouteTableDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/service_mesh/service_mesh_virtual_services_data_source.go ===
func ServiceMeshVirtualServicesDataSource() *schema.Resource {
	return &schema.Resource{
func readServiceMeshVirtualServices(d *schema.ResourceData, m interface{}) error {
	sync := &ServiceMeshVirtualServicesDataSourceCrud{}
func (s *ServiceMeshVirtualServicesDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *ServiceMeshVirtualServicesDataSourceCrud) Get() error {
	request := oci_service_mesh.ListVirtualServicesRequest{}
func (s *ServiceMeshVirtualServicesDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/service_mesh/service_mesh_access_policies_data_source.go ===
func ServiceMeshAccessPoliciesDataSource() *schema.Resource {
	return &schema.Resource{
func readServiceMeshAccessPolicies(d *schema.ResourceData, m interface{}) error {
	sync := &ServiceMeshAccessPoliciesDataSourceCrud{}
func (s *ServiceMeshAccessPoliciesDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *ServiceMeshAccessPoliciesDataSourceCrud) Get() error {
	request := oci_service_mesh.ListAccessPoliciesRequest{}
func (s *ServiceMeshAccessPoliciesDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/service_mesh/service_mesh_ingress_gateway_resource.go ===
func ServiceMeshIngressGatewayResource() *schema.Resource {
	return &schema.Resource{
func createServiceMeshIngressGateway(d *schema.ResourceData, m interface{}) error {
	sync := &ServiceMeshIngressGatewayResourceCrud{}
func readServiceMeshIngressGateway(d *schema.ResourceData, m interface{}) error {
	sync := &ServiceMeshIngressGatewayResourceCrud{}
func updateServiceMeshIngressGateway(d *schema.ResourceData, m interface{}) error {
	sync := &ServiceMeshIngressGatewayResourceCrud{}
func deleteServiceMeshIngressGateway(d *schema.ResourceData, m interface{}) error {
	sync := &ServiceMeshIngressGatewayResourceCrud{}
func (s *ServiceMeshIngressGatewayResourceCrud) ID() string {
	return *s.Res.Id
func (s *ServiceMeshIngressGatewayResourceCrud) CreatedPending() []string {
	return []string{
func (s *ServiceMeshIngressGatewayResourceCrud) CreatedTarget() []string {
	return []string{
func (s *ServiceMeshIngressGatewayResourceCrud) DeletedPending() []string {
	return []string{
func (s *ServiceMeshIngressGatewayResourceCrud) DeletedTarget() []string {
	return []string{
func (s *ServiceMeshIngressGatewayResourceCrud) Create() error {
	request := oci_service_mesh.CreateIngressGatewayRequest{}
func (s *ServiceMeshIngressGatewayResourceCrud) getIngressGatewayFromWorkRequest(workId *string, retryPolicy *oci_common.RetryPolicy,
	actionTypeEnum oci_service_mesh.ActionTypeEnum, timeout time.Duration) error {
func (s *ServiceMeshIngressGatewayResourceCrud) Get() error {
	request := oci_service_mesh.GetIngressGatewayRequest{}
func (s *ServiceMeshIngressGatewayResourceCrud) Update() error {
	if compartment, ok := s.D.GetOkExists("compartment_id"); ok && s.D.HasChange("compartment_id") {
func (s *ServiceMeshIngressGatewayResourceCrud) Delete() error {
	request := oci_service_mesh.DeleteIngressGatewayRequest{}
func (s *ServiceMeshIngressGatewayResourceCrud) SetData() error {
	if s.Res.AccessLogging != nil {
func (s *ServiceMeshIngressGatewayResourceCrud) mapToAccessLoggingConfiguration(fieldKeyFormat string) (oci_service_mesh.AccessLoggingConfiguration, error) {
	result := oci_service_mesh.AccessLoggingConfiguration{}
func (s *ServiceMeshIngressGatewayResourceCrud) mapToCaBundle(fieldKeyFormat string) (oci_service_mesh.CaBundle, error) {
	var baseObject oci_service_mesh.CaBundle
func (s *ServiceMeshIngressGatewayResourceCrud) mapToCreateIngressGatewayMutualTransportLayerSecurityDetails(fieldKeyFormat string) (oci_service_mesh.IngressGatewayMutualTransportLayerSecurityDetails, error) {
	result := oci_service_mesh.IngressGatewayMutualTransportLayerSecurityDetails{}
func (s *ServiceMeshIngressGatewayResourceCrud) mapToIngressGatewayHost(fieldKeyFormat string) (oci_service_mesh.IngressGatewayHost, error) {
	result := oci_service_mesh.IngressGatewayHost{}
func (s *ServiceMeshIngressGatewayResourceCrud) mapToIngressGatewayListener(fieldKeyFormat string) (oci_service_mesh.IngressGatewayListener, error) {
	result := oci_service_mesh.IngressGatewayListener{}
func (s *ServiceMeshIngressGatewayResourceCrud) mapToIngressGatewayMutualTransportLayerSecurityDetails(fieldKeyFormat string) (oci_service_mesh.IngressGatewayMutualTransportLayerSecurityDetails, error) {
	result := oci_service_mesh.IngressGatewayMutualTransportLayerSecurityDetails{}
func (s *ServiceMeshIngressGatewayResourceCrud) mapToIngressListenerClientValidationConfig(fieldKeyFormat string) (oci_service_mesh.IngressListenerClientValidationConfig, error) {
	result := oci_service_mesh.IngressListenerClientValidationConfig{}
func (s *ServiceMeshIngressGatewayResourceCrud) mapToIngressListenerTlsConfig(fieldKeyFormat string) (oci_service_mesh.IngressListenerTlsConfig, error) {
	result := oci_service_mesh.IngressListenerTlsConfig{}
func (s *ServiceMeshIngressGatewayResourceCrud) mapToTlsCertificate(fieldKeyFormat string) (oci_service_mesh.TlsCertificate, error) {
	var baseObject oci_service_mesh.TlsCertificate
func (s *ServiceMeshIngressGatewayResourceCrud) updateCompartment(compartment interface{}) error {
	changeCompartmentRequest := oci_service_mesh.ChangeIngressGatewayCompartmentRequest{}

=== ./internal/service/service_mesh/service_mesh_ingress_gateway_route_table_data_source.go ===
func ServiceMeshIngressGatewayRouteTableDataSource() *schema.Resource {
	fieldMap := make(map[string]*schema.Schema)
func readSingularServiceMeshIngressGatewayRouteTable(d *schema.ResourceData, m interface{}) error {
	sync := &ServiceMeshIngressGatewayRouteTableDataSourceCrud{}
func (s *ServiceMeshIngressGatewayRouteTableDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *ServiceMeshIngressGatewayRouteTableDataSourceCrud) Get() error {
	request := oci_service_mesh.GetIngressGatewayRouteTableRequest{}
func (s *ServiceMeshIngressGatewayRouteTableDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/service_mesh/service_mesh_virtual_service_data_source.go ===
func ServiceMeshVirtualServiceDataSource() *schema.Resource {
	fieldMap := make(map[string]*schema.Schema)
func readSingularServiceMeshVirtualService(d *schema.ResourceData, m interface{}) error {
	sync := &ServiceMeshVirtualServiceDataSourceCrud{}
func (s *ServiceMeshVirtualServiceDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *ServiceMeshVirtualServiceDataSourceCrud) Get() error {
	request := oci_service_mesh.GetVirtualServiceRequest{}
func (s *ServiceMeshVirtualServiceDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/service_mesh/service_mesh_virtual_deployment_data_source.go ===
func ServiceMeshVirtualDeploymentDataSource() *schema.Resource {
	fieldMap := make(map[string]*schema.Schema)
func readSingularServiceMeshVirtualDeployment(d *schema.ResourceData, m interface{}) error {
	sync := &ServiceMeshVirtualDeploymentDataSourceCrud{}
func (s *ServiceMeshVirtualDeploymentDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *ServiceMeshVirtualDeploymentDataSourceCrud) Get() error {
	request := oci_service_mesh.GetVirtualDeploymentRequest{}
func (s *ServiceMeshVirtualDeploymentDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/service_mesh/service_mesh_ingress_gateways_data_source.go ===
func ServiceMeshIngressGatewaysDataSource() *schema.Resource {
	return &schema.Resource{
func readServiceMeshIngressGateways(d *schema.ResourceData, m interface{}) error {
	sync := &ServiceMeshIngressGatewaysDataSourceCrud{}
func (s *ServiceMeshIngressGatewaysDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *ServiceMeshIngressGatewaysDataSourceCrud) Get() error {
	request := oci_service_mesh.ListIngressGatewaysRequest{}
func (s *ServiceMeshIngressGatewaysDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/service_mesh/service_mesh_proxy_detail_data_source.go ===
func ServiceMeshProxyDetailDataSource() *schema.Resource {
	return &schema.Resource{
func readSingularServiceMeshProxyDetail(d *schema.ResourceData, m interface{}) error {
	sync := &ServiceMeshProxyDetailDataSourceCrud{}
func (s *ServiceMeshProxyDetailDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *ServiceMeshProxyDetailDataSourceCrud) Get() error {
	request := oci_service_mesh.GetProxyDetailsRequest{}
func (s *ServiceMeshProxyDetailDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/service_mesh/service_mesh_virtual_deployment_resource.go ===
func ServiceMeshVirtualDeploymentResource() *schema.Resource {
	return &schema.Resource{
func createServiceMeshVirtualDeployment(d *schema.ResourceData, m interface{}) error {
	sync := &ServiceMeshVirtualDeploymentResourceCrud{}
func readServiceMeshVirtualDeployment(d *schema.ResourceData, m interface{}) error {
	sync := &ServiceMeshVirtualDeploymentResourceCrud{}
func updateServiceMeshVirtualDeployment(d *schema.ResourceData, m interface{}) error {
	sync := &ServiceMeshVirtualDeploymentResourceCrud{}
func deleteServiceMeshVirtualDeployment(d *schema.ResourceData, m interface{}) error {
	sync := &ServiceMeshVirtualDeploymentResourceCrud{}
func (s *ServiceMeshVirtualDeploymentResourceCrud) ID() string {
	return *s.Res.Id
func (s *ServiceMeshVirtualDeploymentResourceCrud) CreatedPending() []string {
	return []string{
func (s *ServiceMeshVirtualDeploymentResourceCrud) CreatedTarget() []string {
	return []string{
func (s *ServiceMeshVirtualDeploymentResourceCrud) DeletedPending() []string {
	return []string{
func (s *ServiceMeshVirtualDeploymentResourceCrud) DeletedTarget() []string {
	return []string{
func (s *ServiceMeshVirtualDeploymentResourceCrud) Create() error {
	request := oci_service_mesh.CreateVirtualDeploymentRequest{}
func (s *ServiceMeshVirtualDeploymentResourceCrud) getVirtualDeploymentFromWorkRequest(workId *string, retryPolicy *oci_common.RetryPolicy,
	actionTypeEnum oci_service_mesh.ActionTypeEnum, timeout time.Duration) error {
func (s *ServiceMeshVirtualDeploymentResourceCrud) Get() error {
	request := oci_service_mesh.GetVirtualDeploymentRequest{}
func (s *ServiceMeshVirtualDeploymentResourceCrud) Update() error {
	if compartment, ok := s.D.GetOkExists("compartment_id"); ok && s.D.HasChange("compartment_id") {
func (s *ServiceMeshVirtualDeploymentResourceCrud) Delete() error {
	request := oci_service_mesh.DeleteVirtualDeploymentRequest{}
func (s *ServiceMeshVirtualDeploymentResourceCrud) SetData() error {
	if s.Res.AccessLogging != nil {
func (s *ServiceMeshVirtualDeploymentResourceCrud) mapToAccessLoggingConfiguration(fieldKeyFormat string) (oci_service_mesh.AccessLoggingConfiguration, error) {
	result := oci_service_mesh.AccessLoggingConfiguration{}
func (s *ServiceMeshVirtualDeploymentResourceCrud) mapToServiceDiscoveryConfiguration(fieldKeyFormat string) (oci_service_mesh.ServiceDiscoveryConfiguration, error) {
	var baseObject oci_service_mesh.ServiceDiscoveryConfiguration
func (s *ServiceMeshVirtualDeploymentResourceCrud) mapToVirtualDeploymentListener(fieldKeyFormat string) (oci_service_mesh.VirtualDeploymentListener, error) {
	result := oci_service_mesh.VirtualDeploymentListener{}
func (s *ServiceMeshVirtualDeploymentResourceCrud) updateCompartment(compartment interface{}) error {
	changeCompartmentRequest := oci_service_mesh.ChangeVirtualDeploymentCompartmentRequest{}

=== ./internal/service/service_mesh/service_mesh_access_policy_resource.go ===
func ServiceMeshAccessPolicyResource() *schema.Resource {
	return &schema.Resource{
func createServiceMeshAccessPolicy(d *schema.ResourceData, m interface{}) error {
	sync := &ServiceMeshAccessPolicyResourceCrud{}
func readServiceMeshAccessPolicy(d *schema.ResourceData, m interface{}) error {
	sync := &ServiceMeshAccessPolicyResourceCrud{}
func updateServiceMeshAccessPolicy(d *schema.ResourceData, m interface{}) error {
	sync := &ServiceMeshAccessPolicyResourceCrud{}
func deleteServiceMeshAccessPolicy(d *schema.ResourceData, m interface{}) error {
	sync := &ServiceMeshAccessPolicyResourceCrud{}
func (s *ServiceMeshAccessPolicyResourceCrud) ID() string {
	return *s.Res.Id
func (s *ServiceMeshAccessPolicyResourceCrud) CreatedPending() []string {
	return []string{
func (s *ServiceMeshAccessPolicyResourceCrud) CreatedTarget() []string {
	return []string{
func (s *ServiceMeshAccessPolicyResourceCrud) DeletedPending() []string {
	return []string{
func (s *ServiceMeshAccessPolicyResourceCrud) DeletedTarget() []string {
	return []string{
func (s *ServiceMeshAccessPolicyResourceCrud) Create() error {
	request := oci_service_mesh.CreateAccessPolicyRequest{}
func (s *ServiceMeshAccessPolicyResourceCrud) getAccessPolicyFromWorkRequest(workId *string, retryPolicy *oci_common.RetryPolicy,
	actionTypeEnum oci_service_mesh.ActionTypeEnum, timeout time.Duration) error {
func (s *ServiceMeshAccessPolicyResourceCrud) Get() error {
	request := oci_service_mesh.GetAccessPolicyRequest{}
func (s *ServiceMeshAccessPolicyResourceCrud) Update() error {
	if compartment, ok := s.D.GetOkExists("compartment_id"); ok && s.D.HasChange("compartment_id") {
func (s *ServiceMeshAccessPolicyResourceCrud) Delete() error {
	request := oci_service_mesh.DeleteAccessPolicyRequest{}
func (s *ServiceMeshAccessPolicyResourceCrud) SetData() error {
	if s.Res.CompartmentId != nil {
func (s *ServiceMeshAccessPolicyResourceCrud) mapToAccessPolicyRuleDetails(fieldKeyFormat string) (oci_service_mesh.AccessPolicyRuleDetails, error) {
	result := oci_service_mesh.AccessPolicyRuleDetails{}
func (s *ServiceMeshAccessPolicyResourceCrud) mapToAccessPolicyTargetDetails(fieldKeyFormat string) (oci_service_mesh.AccessPolicyTargetDetails, error) {
	var baseObject oci_service_mesh.AccessPolicyTargetDetails
func (s *ServiceMeshAccessPolicyResourceCrud) updateCompartment(compartment interface{}) error {
	changeCompartmentRequest := oci_service_mesh.ChangeAccessPolicyCompartmentRequest{}

=== ./internal/service/service_mesh/register_resource.go ===
func RegisterResource() {
	tfresource.RegisterResource("oci_service_mesh_access_policy", ServiceMeshAccessPolicyResource())

=== ./internal/service/oce/oce_oce_instance_resource.go ===
func OceOceInstanceResource() *schema.Resource {
	return &schema.Resource{
func createOceOceInstance(d *schema.ResourceData, m interface{}) error {
	sync := &OceOceInstanceResourceCrud{}
func readOceOceInstance(d *schema.ResourceData, m interface{}) error {
	sync := &OceOceInstanceResourceCrud{}
func updateOceOceInstance(d *schema.ResourceData, m interface{}) error {
	sync := &OceOceInstanceResourceCrud{}
func deleteOceOceInstance(d *schema.ResourceData, m interface{}) error {
	sync := &OceOceInstanceResourceCrud{}
func (s *OceOceInstanceResourceCrud) ID() string {
	return *s.Res.Id
func (s *OceOceInstanceResourceCrud) CreatedPending() []string {
	return []string{
func (s *OceOceInstanceResourceCrud) CreatedTarget() []string {
	return []string{
func (s *OceOceInstanceResourceCrud) DeletedPending() []string {
	return []string{
func (s *OceOceInstanceResourceCrud) DeletedTarget() []string {
	return []string{
func (s *OceOceInstanceResourceCrud) Create() error {
	request := oci_oce.CreateOceInstanceRequest{}
func (s *OceOceInstanceResourceCrud) getOceInstanceFromWorkRequest(workId *string, retryPolicy *oci_common.RetryPolicy,
	actionTypeEnum oci_oce.WorkRequestResourceActionTypeEnum, timeout time.Duration) error {
func oceInstanceWaitForWorkRequest(wId *string, entityType string, action oci_oce.WorkRequestResourceActionTypeEnum,
	timeout time.Duration, disableFoundRetries bool, client *oci_oce.OceInstanceClient) (*string, error) {
func getErrorFromOceOceInstanceWorkRequest(client *oci_oce.OceInstanceClient, workId *string, retryPolicy *oci_common.RetryPolicy, entityType string, action oci_oce.WorkRequestResourceActionTypeEnum) error {
	response, err := client.ListWorkRequestErrors(context.Background(),
func (s *OceOceInstanceResourceCrud) Get() error {
	request := oci_oce.GetOceInstanceRequest{}
func (s *OceOceInstanceResourceCrud) Update() error {
	if compartment, ok := s.D.GetOkExists("compartment_id"); ok && s.D.HasChange("compartment_id") {
func (s *OceOceInstanceResourceCrud) Delete() error {
	request := oci_oce.DeleteOceInstanceRequest{}
func (s *OceOceInstanceResourceCrud) SetData() error {
	s.D.Set("add_on_features", s.Res.AddOnFeatures)
func (s *OceOceInstanceResourceCrud) updateCompartment(compartment interface{}) error {
	changeCompartmentRequest := oci_oce.ChangeOceInstanceCompartmentRequest{}

=== ./internal/service/oce/oce_oce_instance_data_source.go ===
func OceOceInstanceDataSource() *schema.Resource {
	fieldMap := make(map[string]*schema.Schema)
func readSingularOceOceInstance(d *schema.ResourceData, m interface{}) error {
	sync := &OceOceInstanceDataSourceCrud{}
func (s *OceOceInstanceDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *OceOceInstanceDataSourceCrud) Get() error {
	request := oci_oce.GetOceInstanceRequest{}
func (s *OceOceInstanceDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/oce/register_resource.go ===
func RegisterResource() {
	tfresource.RegisterResource("oci_oce_oce_instance", OceOceInstanceResource())

=== ./internal/service/oce/oce_oce_instances_data_source.go ===
func OceOceInstancesDataSource() *schema.Resource {
	return &schema.Resource{
func readOceOceInstances(d *schema.ResourceData, m interface{}) error {
	sync := &OceOceInstancesDataSourceCrud{}
func (s *OceOceInstancesDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *OceOceInstancesDataSourceCrud) Get() error {
	request := oci_oce.ListOceInstancesRequest{}
func (s *OceOceInstancesDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/container_instances/container_instances_container_instance_data_source.go ===
func ContainerInstancesContainerInstanceDataSource() *schema.Resource {
	fieldMap := make(map[string]*schema.Schema)
func readSingularContainerInstancesContainerInstance(d *schema.ResourceData, m interface{}) error {
	sync := &ContainerInstancesContainerInstanceDataSourceCrud{}
func (s *ContainerInstancesContainerInstanceDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *ContainerInstancesContainerInstanceDataSourceCrud) Get() error {
	request := oci_container_instances.GetContainerInstanceRequest{}
func (s *ContainerInstancesContainerInstanceDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/container_instances/container_instances_container_instance_shapes_data_source.go ===
func ContainerInstancesContainerInstanceShapesDataSource() *schema.Resource {
	return &schema.Resource{
func readContainerInstancesContainerInstanceShapes(d *schema.ResourceData, m interface{}) error {
	sync := &ContainerInstancesContainerInstanceShapesDataSourceCrud{}
func (s *ContainerInstancesContainerInstanceShapesDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *ContainerInstancesContainerInstanceShapesDataSourceCrud) Get() error {
	request := oci_container_instances.ListContainerInstanceShapesRequest{}
func (s *ContainerInstancesContainerInstanceShapesDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/container_instances/container_instances_container_instances_data_source.go ===
func ContainerInstancesContainerInstancesDataSource() *schema.Resource {
	return &schema.Resource{
func readContainerInstancesContainerInstances(d *schema.ResourceData, m interface{}) error {
	sync := &ContainerInstancesContainerInstancesDataSourceCrud{}
func (s *ContainerInstancesContainerInstancesDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *ContainerInstancesContainerInstancesDataSourceCrud) Get() error {
	request := oci_container_instances.ListContainerInstancesRequest{}
func (s *ContainerInstancesContainerInstancesDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/container_instances/container_instances_container_instance_shape_data_source.go ===
func ContainerInstancesContainerInstanceShapeDataSource() *schema.Resource {
	return &schema.Resource{
func readSingularContainerInstancesContainerInstanceShape(d *schema.ResourceData, m interface{}) error {
	sync := &ContainerInstancesContainerInstanceShapeDataSourceCrud{}
func (s *ContainerInstancesContainerInstanceShapeDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *ContainerInstancesContainerInstanceShapeDataSourceCrud) Get() error {
	request := oci_container_instances.ListContainerInstanceShapesRequest{}
func (s *ContainerInstancesContainerInstanceShapeDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/container_instances/container_instances_container_instance_resource.go ===
func ContainerInstancesContainerInstanceResource() *schema.Resource {
	return &schema.Resource{
func createContainerInstancesContainerInstance(d *schema.ResourceData, m interface{}) error {
	sync := &ContainerInstancesContainerInstanceResourceCrud{}
func readContainerInstancesContainerInstance(d *schema.ResourceData, m interface{}) error {
	sync := &ContainerInstancesContainerInstanceResourceCrud{}
func updateContainerInstancesContainerInstance(d *schema.ResourceData, m interface{}) error {
	sync := &ContainerInstancesContainerInstanceResourceCrud{}
func deleteContainerInstancesContainerInstance(d *schema.ResourceData, m interface{}) error {
	sync := &ContainerInstancesContainerInstanceResourceCrud{}
func (s *ContainerInstancesContainerInstanceResourceCrud) ID() string {
	return *s.Res.Id
func (s *ContainerInstancesContainerInstanceResourceCrud) CreatedPending() []string {
	return []string{
func (s *ContainerInstancesContainerInstanceResourceCrud) CreatedTarget() []string {
	return []string{
func (s *ContainerInstancesContainerInstanceResourceCrud) DeletedPending() []string {
	return []string{
func (s *ContainerInstancesContainerInstanceResourceCrud) DeletedTarget() []string {
	return []string{
func (s *ContainerInstancesContainerInstanceResourceCrud) Create() error {
	request := oci_container_instances.CreateContainerInstanceRequest{}
func (s *ContainerInstancesContainerInstanceResourceCrud) getContainerInstanceFromWorkRequest(workId *string, retryPolicy *oci_common.RetryPolicy,
	actionTypeEnum oci_container_instances.ActionTypeEnum, timeout time.Duration) error {
func (s *ContainerInstancesContainerInstanceResourceCrud) getContainerFromWorkRequest(workId *string, retryPolicy *oci_common.RetryPolicy,
	actionTypeEnum oci_container_instances.ActionTypeEnum, timeout time.Duration) error {
func (s *ContainerInstancesContainerInstanceResourceCrud) Get() error {
	request := oci_container_instances.GetContainerInstanceRequest{}
func (s *ContainerInstancesContainerInstanceResourceCrud) Update() error {
	if compartment, ok := s.D.GetOkExists("compartment_id"); ok && s.D.HasChange("compartment_id") {
func (s *ContainerInstancesContainerInstanceResourceCrud) mapToUpdateVnicDetailsInstance(fieldKeyFormat string) (oci_core.UpdateVnicDetails, error) {
	result := oci_core.UpdateVnicDetails{}
func (s *ContainerInstancesContainerInstanceResourceCrud) Delete() error {
	request := oci_container_instances.DeleteContainerInstanceRequest{}
func (s *ContainerInstancesContainerInstanceResourceCrud) SetData() error {
	if s.Res.AvailabilityDomain != nil {
func (s *ContainerInstancesContainerInstanceResourceCrud) StartContainerInstance() error {
	request := oci_container_instances.StartContainerInstanceRequest{}
func (s *ContainerInstancesContainerInstanceResourceCrud) StopContainerInstance() error {
	request := oci_container_instances.StopContainerInstanceRequest{}
func (s *ContainerInstancesContainerInstanceResourceCrud) mapToContainerCapabilities(fieldKeyFormat string) (oci_container_instances.ContainerCapabilities, error) {
	result := oci_container_instances.ContainerCapabilities{}
func (s *ContainerInstancesContainerInstanceResourceCrud) mapToContainerConfigFile(fieldKeyFormat string) (oci_container_instances.ContainerConfigFile, error) {
	result := oci_container_instances.ContainerConfigFile{}
func ContainerConfigFileToMap(obj oci_container_instances.ContainerConfigFile, d *schema.ResourceData, volumeIndex int, configIndex int) map[string]interface{} {
	result := map[string]interface{}{}
func (s *ContainerInstancesContainerInstanceResourceCrud) mapToCreateContainerDetails(fieldKeyFormat string) (oci_container_instances.CreateContainerDetails, error) {
	result := oci_container_instances.CreateContainerDetails{}
func (s *ContainerInstancesContainerInstanceResourceCrud) mapToCreateContainerDnsConfigDetails(fieldKeyFormat string) (oci_container_instances.CreateContainerDnsConfigDetails, error) {
	result := oci_container_instances.CreateContainerDnsConfigDetails{}
func (s *ContainerInstancesContainerInstanceResourceCrud) mapToCreateContainerHealthCheckDetails(fieldKeyFormat string) (oci_container_instances.CreateContainerHealthCheckDetails, error) {
	var baseObject oci_container_instances.CreateContainerHealthCheckDetails
func (s *ContainerInstancesContainerInstanceResourceCrud) mapToCreateContainerInstanceShapeConfigDetails(fieldKeyFormat string) (oci_container_instances.CreateContainerInstanceShapeConfigDetails, error) {
	result := oci_container_instances.CreateContainerInstanceShapeConfigDetails{}
func (s *ContainerInstancesContainerInstanceResourceCrud) mapToCreateContainerResourceConfigDetails(fieldKeyFormat string) (oci_container_instances.CreateContainerResourceConfigDetails, error) {
	result := oci_container_instances.CreateContainerResourceConfigDetails{}
func (s *ContainerInstancesContainerInstanceResourceCrud) mapToCreateContainerVnicDetails(fieldKeyFormat string) (oci_container_instances.CreateContainerVnicDetails, error) {
	result := oci_container_instances.CreateContainerVnicDetails{}
func (s *ContainerInstancesContainerInstanceResourceCrud) mapToCreateContainerVolumeDetails(fieldKeyFormat string) (oci_container_instances.CreateContainerVolumeDetails, error) {
	var baseObject oci_container_instances.CreateContainerVolumeDetails
func ContainerVolumeToMap(obj oci_container_instances.ContainerVolume, d *schema.ResourceData, index int) map[string]interface{} {
	result := map[string]interface{}{}
func (s *ContainerInstancesContainerInstanceResourceCrud) mapToCreateImagePullSecretDetails(fieldKeyFormat string) (oci_container_instances.CreateImagePullSecretDetails, error) {
	var baseObject oci_container_instances.CreateImagePullSecretDetails
func ImagePullSecretToMap(obj oci_container_instances.ImagePullSecret, d *schema.ResourceData, index int) map[string]interface{} {
	result := map[string]interface{}{}
func (s *ContainerInstancesContainerInstanceResourceCrud) mapToCreateSecurityContextDetails(fieldKeyFormat string) (oci_container_instances.CreateSecurityContextDetails, error) {
	var baseObject oci_container_instances.CreateSecurityContextDetails
func (s *ContainerInstancesContainerInstanceResourceCrud) mapToCreateVolumeMountDetails(fieldKeyFormat string) (oci_container_instances.CreateVolumeMountDetails, error) {
	result := oci_container_instances.CreateVolumeMountDetails{}
func (s *ContainerInstancesContainerInstanceResourceCrud) mapToHealthCheckHttpHeader(fieldKeyFormat string) (oci_container_instances.HealthCheckHttpHeader, error) {
	result := oci_container_instances.HealthCheckHttpHeader{}
func (s *ContainerInstancesContainerInstanceResourceCrud) updateCompartment(compartment interface{}) error {
	changeCompartmentRequest := oci_container_instances.ChangeContainerInstanceCompartmentRequest{}
func (s *ContainerInstancesContainerInstanceResourceCrud) mapToCreateVnicDetails(fieldKeyFormat string) (oci_core.CreateVnicDetails, error) {
	result := oci_core.CreateVnicDetails{}
func (s *ContainerInstancesContainerInstanceResourceCrud) mapToUpdateContainer(fieldKeyFormat string) (oci_container_instances.UpdateContainerRequest, error) {
	result := oci_container_instances.UpdateContainerRequest{}
func ContainerResourceConfigToMap(obj *oci_container_instances.ContainerResourceConfig) map[string]interface{} {
	result := map[string]interface{}{}

=== ./internal/service/container_instances/register_resource.go ===
func RegisterResource() {
	tfresource.RegisterResource("oci_container_instances_container_instance", ContainerInstancesContainerInstanceResource())

=== ./internal/service/osub_subscription/osub_subscription_commitments_data_source.go ===
func OsubSubscriptionCommitmentsDataSource() *schema.Resource {
	return &schema.Resource{
func readOsubSubscriptionCommitments(d *schema.ResourceData, m interface{}) error {
	sync := &OsubSubscriptionCommitmentsDataSourceCrud{}
func (s *OsubSubscriptionCommitmentsDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *OsubSubscriptionCommitmentsDataSourceCrud) Get() error {
	request := oci_osub_subscription.ListCommitmentsRequest{}
func (s *OsubSubscriptionCommitmentsDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/osub_subscription/osub_subscription_subscriptions_data_source.go ===
func OsubSubscriptionSubscriptionsDataSource() *schema.Resource {
	return &schema.Resource{
func readOsubSubscriptionSubscriptions(d *schema.ResourceData, m interface{}) error {
	sync := &OsubSubscriptionSubscriptionsDataSourceCrud{}
func (s *OsubSubscriptionSubscriptionsDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *OsubSubscriptionSubscriptionsDataSourceCrud) Get() error {
	request := oci_osub_subscription.ListSubscriptionsRequest{}
func (s *OsubSubscriptionSubscriptionsDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/osub_subscription/osub_subscription_commitment_data_source.go ===
func OsubSubscriptionCommitmentDataSource() *schema.Resource {
	return &schema.Resource{
func readSingularOsubSubscriptionCommitment(d *schema.ResourceData, m interface{}) error {
	sync := &OsubSubscriptionCommitmentDataSourceCrud{}
func (s *OsubSubscriptionCommitmentDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *OsubSubscriptionCommitmentDataSourceCrud) Get() error {
	request := oci_osub_subscription.GetCommitmentRequest{}
func (s *OsubSubscriptionCommitmentDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/osub_subscription/osub_subscription_ratecards_data_source.go ===
func OsubSubscriptionRatecardsDataSource() *schema.Resource {
	return &schema.Resource{
func readOsubSubscriptionRatecards(d *schema.ResourceData, m interface{}) error {
	sync := &OsubSubscriptionRatecardsDataSourceCrud{}
func (s *OsubSubscriptionRatecardsDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *OsubSubscriptionRatecardsDataSourceCrud) Get() error {
	request := oci_osub_subscription.ListRateCardsRequest{}
func (s *OsubSubscriptionRatecardsDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/osub_subscription/register_resource.go ===
func RegisterResource() {
}

=== ./internal/service/database/database_exascale_db_storage_vaults_data_source.go ===
func DatabaseExascaleDbStorageVaultsDataSource() *schema.Resource {
	return &schema.Resource{
func readDatabaseExascaleDbStorageVaults(d *schema.ResourceData, m interface{}) error {
	sync := &DatabaseExascaleDbStorageVaultsDataSourceCrud{}
func (s *DatabaseExascaleDbStorageVaultsDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *DatabaseExascaleDbStorageVaultsDataSourceCrud) Get() error {
	request := oci_database.ListExascaleDbStorageVaultsRequest{}
func (s *DatabaseExascaleDbStorageVaultsDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/database/database_database_upgrade_history_entries_data_source.go ===
func DatabaseDatabaseUpgradeHistoryEntriesDataSource() *schema.Resource {
	return &schema.Resource{
func readDatabaseDatabaseUpgradeHistoryEntries(d *schema.ResourceData, m interface{}) error {
	sync := &DatabaseDatabaseUpgradeHistoryEntriesDataSourceCrud{}
func (s *DatabaseDatabaseUpgradeHistoryEntriesDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *DatabaseDatabaseUpgradeHistoryEntriesDataSourceCrud) Get() error {
	request := oci_database.ListDatabaseUpgradeHistoryEntriesRequest{}
func (s *DatabaseDatabaseUpgradeHistoryEntriesDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/database/database_vm_cluster_data_source.go ===
func DatabaseVmClusterDataSource() *schema.Resource {
	fieldMap := make(map[string]*schema.Schema)
func readSingularDatabaseVmCluster(d *schema.ResourceData, m interface{}) error {
	sync := &DatabaseVmClusterDataSourceCrud{}
func (s *DatabaseVmClusterDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *DatabaseVmClusterDataSourceCrud) Get() error {
	request := oci_database.GetVmClusterRequest{}
func (s *DatabaseVmClusterDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/database/database_cloud_autonomous_vm_cluster_resource_usage_data_source.go ===
func DatabaseCloudAutonomousVmClusterResourceUsageDataSource() *schema.Resource {
	return &schema.Resource{
func readSingularDatabaseCloudAutonomousVmClusterResourceUsage(d *schema.ResourceData, m interface{}) error {
	sync := &DatabaseCloudAutonomousVmClusterResourceUsageDataSourceCrud{}
func (s *DatabaseCloudAutonomousVmClusterResourceUsageDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *DatabaseCloudAutonomousVmClusterResourceUsageDataSourceCrud) Get() error {
	request := oci_database.GetCloudAutonomousVmClusterResourceUsageRequest{}
func (s *DatabaseCloudAutonomousVmClusterResourceUsageDataSourceCrud) SetData() error {
	if s.Res == nil {
func AutonomousVmResourceUsageToMap(obj oci_database.AutonomousVmResourceUsage) map[string]interface{} {
	result := map[string]interface{}{}
func AvmAcdResourceStatsToMap(obj oci_database.AvmAcdResourceStats) map[string]interface{} {
	result := map[string]interface{}{}

=== ./internal/service/database/database_autonomous_databases_clones_data_source.go ===
func DatabaseAutonomousDatabasesClonesDataSource() *schema.Resource {
	return &schema.Resource{
func readDatabaseAutonomousDatabasesClones(d *schema.ResourceData, m interface{}) error {
	sync := &DatabaseAutonomousDatabasesClonesDataSourceCrud{}
func (s *DatabaseAutonomousDatabasesClonesDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *DatabaseAutonomousDatabasesClonesDataSourceCrud) Get() error {
	request := oci_database.ListAutonomousDatabaseClonesRequest{}
func (s *DatabaseAutonomousDatabasesClonesDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/database/database_external_database_connector_data_source.go ===
func DatabaseExternalDatabaseConnectorDataSource() *schema.Resource {
	fieldMap := make(map[string]*schema.Schema)
func readSingularDatabaseExternalDatabaseConnector(d *schema.ResourceData, m interface{}) error {
	sync := &DatabaseExternalDatabaseConnectorDataSourceCrud{}
func (s *DatabaseExternalDatabaseConnectorDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *DatabaseExternalDatabaseConnectorDataSourceCrud) Get() error {
	request := oci_database.GetExternalDatabaseConnectorRequest{}
func (s *DatabaseExternalDatabaseConnectorDataSourceCrud) SetData() error {
	if s.Res == nil {
func (s *DatabaseExternalDatabaseConnectorDataSourceCrud) DatabaseConnectionCredentialsToMap(obj *oci_database.DatabaseConnectionCredentials) map[string]interface{} {
	result := map[string]interface{}{}

=== ./internal/service/database/database_backup_destinations_data_source.go ===
func DatabaseBackupDestinationsDataSource() *schema.Resource {
	return &schema.Resource{
func readDatabaseBackupDestinations(d *schema.ResourceData, m interface{}) error {
	sync := &DatabaseBackupDestinationsDataSourceCrud{}
func (s *DatabaseBackupDestinationsDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *DatabaseBackupDestinationsDataSourceCrud) Get() error {
	request := oci_database.ListBackupDestinationRequest{}
func (s *DatabaseBackupDestinationsDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/database/database_pluggable_databases_data_source.go ===
func DatabasePluggableDatabasesDataSource() *schema.Resource {
	return &schema.Resource{
func readDatabasePluggableDatabases(d *schema.ResourceData, m interface{}) error {
	sync := &DatabasePluggableDatabasesDataSourceCrud{}
func (s *DatabasePluggableDatabasesDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *DatabasePluggableDatabasesDataSourceCrud) Get() error {
	request := oci_database.ListPluggableDatabasesRequest{}
func (s *DatabasePluggableDatabasesDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/database/database_cloud_autonomous_vm_cluster_data_source.go ===
func DatabaseCloudAutonomousVmClusterDataSource() *schema.Resource {
	fieldMap := make(map[string]*schema.Schema)
func readSingularDatabaseCloudAutonomousVmCluster(d *schema.ResourceData, m interface{}) error {
	sync := &DatabaseCloudAutonomousVmClusterDataSourceCrud{}
func (s *DatabaseCloudAutonomousVmClusterDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *DatabaseCloudAutonomousVmClusterDataSourceCrud) Get() error {
	request := oci_database.GetCloudAutonomousVmClusterRequest{}
func (s *DatabaseCloudAutonomousVmClusterDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/database/database_database_software_images_data_source.go ===
func DatabaseDatabaseSoftwareImagesDataSource() *schema.Resource {
	return &schema.Resource{
func readDatabaseDatabaseSoftwareImages(d *schema.ResourceData, m interface{}) error {
	sync := &DatabaseDatabaseSoftwareImagesDataSourceCrud{}
func (s *DatabaseDatabaseSoftwareImagesDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *DatabaseDatabaseSoftwareImagesDataSourceCrud) Get() error {
	request := oci_database.ListDatabaseSoftwareImagesRequest{}
func (s *DatabaseDatabaseSoftwareImagesDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/database/database_db_systems_upgrade_history_entry_data_source.go ===
func DatabaseDbSystemsUpgradeHistoryEntryDataSource() *schema.Resource {
	return &schema.Resource{
func readSingularDatabaseDbSystemsUpgradeHistoryEntry(d *schema.ResourceData, m interface{}) error {
	sync := &DatabaseDbSystemsUpgradeHistoryEntryDataSourceCrud{}
func (s *DatabaseDbSystemsUpgradeHistoryEntryDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *DatabaseDbSystemsUpgradeHistoryEntryDataSourceCrud) Get() error {
	request := oci_database.GetDbSystemUpgradeHistoryEntryRequest{}
func (s *DatabaseDbSystemsUpgradeHistoryEntryDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/database/database_oneoff_patches_data_source.go ===
func DatabaseOneoffPatchesDataSource() *schema.Resource {
	return &schema.Resource{
func readDatabaseOneoffPatches(d *schema.ResourceData, m interface{}) error {
	sync := &DatabaseOneoffPatchesDataSourceCrud{}
func (s *DatabaseOneoffPatchesDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *DatabaseOneoffPatchesDataSourceCrud) Get() error {
	request := oci_database.ListOneoffPatchesRequest{}
func (s *DatabaseOneoffPatchesDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/database/database_autonomous_container_database_dataguard_association_operation_resource.go ===
func DatabaseAutonomousContainerDatabaseDataguardAssociationOperationResource() *schema.Resource {
	return &schema.Resource{
func (s *DatabaseAutonomousContainerDatabaseDataguardAssociationOperationResourceCrud) ID() string {
	return fmt.Sprint(utils.GetStringHashcode(s.D.Get("autonomous_container_database_id").(string)))
func createDatabaseAutonomousContainerDatabaseDataguardAssociationOperation(d *schema.ResourceData, m interface{}) error {
	sync := &DatabaseAutonomousContainerDatabaseDataguardAssociationOperationResourceCrud{}
func readDatabaseAutonomousContainerDatabaseDataguardAssociationOperation(d *schema.ResourceData, m interface{}) error {
	sync := &DatabaseAutonomousContainerDatabaseDataguardAssociationOperationResourceCrud{}
func deleteDatabaseAutonomousContainerDatabaseDataguardAssociationOperation(d *schema.ResourceData, m interface{}) error {
	return nil
func (s *DatabaseAutonomousContainerDatabaseDataguardAssociationOperationResourceCrud) Get() error {
	return nil
func (s *DatabaseAutonomousContainerDatabaseDataguardAssociationOperationResourceCrud) SetData() error {
	return nil
func (s *DatabaseAutonomousContainerDatabaseDataguardAssociationOperationResourceCrud) Create() error {
	return s.dataguardOperation()
func (s *DatabaseAutonomousContainerDatabaseDataguardAssociationOperationResourceCrud) dataguardOperation() error {
	dataguardAssociationId := ""

=== ./internal/service/database/database_autonomous_virtual_machine_data_source.go ===
func DatabaseAutonomousVirtualMachineDataSource() *schema.Resource {
	return &schema.Resource{
func readSingularDatabaseAutonomousVirtualMachine(d *schema.ResourceData, m interface{}) error {
	sync := &DatabaseAutonomousVirtualMachineDataSourceCrud{}
func (s *DatabaseAutonomousVirtualMachineDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *DatabaseAutonomousVirtualMachineDataSourceCrud) Get() error {
	request := oci_database.GetAutonomousVirtualMachineRequest{}
func (s *DatabaseAutonomousVirtualMachineDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/database/database_export.go ===
func findAllAutonomousContainerDatabases(ctx *tf_export.ResourceDiscoveryContext, tfMeta *tf_export.TerraformResourceAssociation, parent *tf_export.OCIResource, resourceGraph *tf_export.TerraformResourceGraph) (resources []*tf_export.OCIResource, err error) {
	results := []*tf_export.OCIResource{}
func processDatabaseExadataInfrastructures(ctx *tf_export.ResourceDiscoveryContext, resources []*tf_export.OCIResource) ([]*tf_export.OCIResource, error) {
	// Remove weeks_of_month if there is no item in response
func processDatabases(ctx *tf_export.ResourceDiscoveryContext, resources []*tf_export.OCIResource) ([]*tf_export.OCIResource, error) {
	// Fix database db version to remove the PSU date from versions with 18+ major version
func processDatabaseDbNodeConsoleHistory(ctx *tf_export.ResourceDiscoveryContext, resources []*tf_export.OCIResource) ([]*tf_export.OCIResource, error) {
	for _, resource := range resources {
func filterPrimaryDatabases(ctx *tf_export.ResourceDiscoveryContext, resources []*tf_export.OCIResource) ([]*tf_export.OCIResource, error) {
	results := []*tf_export.OCIResource{}
func filterPrimaryDbHomes(ctx *tf_export.ResourceDiscoveryContext, resources []*tf_export.OCIResource) ([]*tf_export.OCIResource, error) {
	// No need to filter if db homes are in vm cluster
func processDbSystems(ctx *tf_export.ResourceDiscoveryContext, resources []*tf_export.OCIResource) ([]*tf_export.OCIResource, error) {
	// Fix db version to remove the PSU date from versions with 18+ major version
func processAutonomousDatabaseSource(ctx *tf_export.ResourceDiscoveryContext, resources []*tf_export.OCIResource) ([]*tf_export.OCIResource, error) {
	for _, resource := range resources {
func getDatabaseAutonomousContainerDatabaseDataguardAssociationId(resource *tf_export.OCIResource) (string, error) {

func getDatabaseVmClusterNetworkId(resource *tf_export.OCIResource) (string, error) {

func getDatabaseDbNodeConsoleHistoryId(resource *tf_export.OCIResource) (string, error) {


=== ./internal/service/database/database_external_container_databases_data_source.go ===
func DatabaseExternalContainerDatabasesDataSource() *schema.Resource {
	return &schema.Resource{
func readDatabaseExternalContainerDatabases(d *schema.ResourceData, m interface{}) error {
	sync := &DatabaseExternalContainerDatabasesDataSourceCrud{}
func (s *DatabaseExternalContainerDatabasesDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *DatabaseExternalContainerDatabasesDataSourceCrud) Get() error {
	request := oci_database.ListExternalContainerDatabasesRequest{}
func (s *DatabaseExternalContainerDatabasesDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/database/database_backup_destination_data_source.go ===
func DatabaseBackupDestinationDataSource() *schema.Resource {
	fieldMap := make(map[string]*schema.Schema)
func readSingularDatabaseBackupDestination(d *schema.ResourceData, m interface{}) error {
	sync := &DatabaseBackupDestinationDataSourceCrud{}
func (s *DatabaseBackupDestinationDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *DatabaseBackupDestinationDataSourceCrud) Get() error {
	request := oci_database.GetBackupDestinationRequest{}
func (s *DatabaseBackupDestinationDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/database/database_externalpluggabledatabases_stack_monitoring_resource.go ===
func DatabaseExternalpluggabledatabasesStackMonitoringResource() *schema.Resource {
	return &schema.Resource{
func createDatabaseExternalpluggabledatabasesStackMonitoring(d *schema.ResourceData, m interface{}) error {
	sync := &DatabaseExternalpluggabledatabasesStackMonitoringResourceCrud{}
func updateDatabaseExternalpluggabledatabasesStackMonitoring(d *schema.ResourceData, m interface{}) error {
	return nil
func readDatabaseExternalpluggabledatabasesStackMonitoring(d *schema.ResourceData, m interface{}) error {
	return nil
func deleteDatabaseExternalpluggabledatabasesStackMonitoring(d *schema.ResourceData, m interface{}) error {
	sync := &DatabaseExternalpluggabledatabasesStackMonitoringResourceCrud{}
func (s *DatabaseExternalpluggabledatabasesStackMonitoringResourceCrud) ID() string {
	return tfresource.GenerateDataSourceHashID("DatabaseExternalpluggabledatabasesStackMonitoringResource-", DatabaseExternalpluggabledatabasesStackMonitoringResource(), s.D)
func (s *DatabaseExternalpluggabledatabasesStackMonitoringResourceCrud) Create() error {
	var operation_stack_monitoring bool
func (s *DatabaseExternalpluggabledatabasesStackMonitoringResourceCrud) Delete() error {
	var operation_stack_monitoring bool
func (s *DatabaseExternalpluggabledatabasesStackMonitoringResourceCrud) SetData() error {
	return nil

=== ./internal/service/database/database_db_node_resource.go ===
func DatabaseDbNodeResource() *schema.Resource {
	return &schema.Resource{
func createDatabaseDbNode(d *schema.ResourceData, m interface{}) error {
	sync := &DatabaseDbNodeResourceCrud{}
func readDatabaseDbNode(d *schema.ResourceData, m interface{}) error {
	sync := &DatabaseDbNodeResourceCrud{}
func updateDatabaseDbNode(d *schema.ResourceData, m interface{}) error {
	sync := &DatabaseDbNodeResourceCrud{}
func deleteDatabaseDbNode(d *schema.ResourceData, m interface{}) error {
	return nil
func (s *DatabaseDbNodeResourceCrud) ID() string {
	return *s.Res.Id
func (s *DatabaseDbNodeResourceCrud) CreatedPending() []string {
	return []string{
func (s *DatabaseDbNodeResourceCrud) CreatedTarget() []string {
	return []string{
func (s *DatabaseDbNodeResourceCrud) DeletedPending() []string {
	return []string{
func (s *DatabaseDbNodeResourceCrud) DeletedTarget() []string {
	return []string{
func (s *DatabaseDbNodeResourceCrud) Create() error {
	request := oci_database.UpdateDbNodeRequest{}
func (s *DatabaseDbNodeResourceCrud) Get() error {
	request := oci_database.GetDbNodeRequest{}
func (s *DatabaseDbNodeResourceCrud) Update() error {
	request := oci_database.UpdateDbNodeRequest{}
func (s *DatabaseDbNodeResourceCrud) SetData() error {
	if s.Res.Id != nil {

=== ./internal/service/database/database_db_system_patches_data_source.go ===
func DatabaseDbSystemPatchesDataSource() *schema.Resource {
	return &schema.Resource{
func readDatabaseDbSystemPatches(d *schema.ResourceData, m interface{}) error {
	sync := &DatabaseDbSystemPatchesDataSourceCrud{}
func (s *DatabaseDbSystemPatchesDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *DatabaseDbSystemPatchesDataSourceCrud) Get() error {
	request := oci_database.ListDbSystemPatchesRequest{}
func (s *DatabaseDbSystemPatchesDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/database/database_database_resource.go ===
func DatabaseDatabaseResource() *schema.Resource {
	return &schema.Resource{
func createDatabaseDatabase(d *schema.ResourceData, m interface{}) error {
	sync := &DatabaseDatabaseResourceCrud{}
func readDatabaseDatabase(d *schema.ResourceData, m interface{}) error {
	sync := &DatabaseDatabaseResourceCrud{}
func deleteDatabaseDatabase(d *schema.ResourceData, m interface{}) error {
	sync := &DatabaseDatabaseResourceCrud{}
func (s *DatabaseDatabaseResourceCrud) ID() string {
	return *s.Res.Id
func (s *DatabaseDatabaseResourceCrud) CreatedPending() []string {
	return []string{
func (s *DatabaseDatabaseResourceCrud) CreatedTarget() []string {
	return []string{
func (s *DatabaseDatabaseResourceCrud) DeletedPending() []string {
	return []string{
func (s *DatabaseDatabaseResourceCrud) DeletedTarget() []string {
	return []string{
func (s *DatabaseDatabaseResourceCrud) UpdatedPending() []string {
	return []string{
func (s *DatabaseDatabaseResourceCrud) UpdatedTarget() []string {
	return []string{
func (s *DatabaseDatabaseResourceCrud) Create() error {
	request := oci_database.CreateDatabaseRequest{}
func (s *DatabaseDatabaseResourceCrud) Get() error {
	request := oci_database.GetDatabaseRequest{}
func (s *DatabaseDatabaseResourceCrud) Delete() error {
	request := oci_database.DeleteDatabaseRequest{}
func (s *DatabaseDatabaseResourceCrud) SetData() error {

func (s *DatabaseDatabaseResourceCrud) ChangeKeyStoreType() error {
	if _, ok := s.D.GetOkExists("key_store_id"); ok && s.D.HasChange("key_store_id") {
func (s *DatabaseDatabaseResourceCrud) mapToBackupDestinationDetails(fieldKeyFormat string) (oci_database.BackupDestinationDetails, error) {
	result := oci_database.BackupDestinationDetails{}
func (s *DatabaseDatabaseResourceCrud) mapToCreateDatabaseDetails(fieldKeyFormat string) (oci_database.CreateDatabaseDetails, error) {
	result := oci_database.CreateDatabaseDetails{}
func (s *DatabaseDatabaseResourceCrud) mapToCreateDatabaseFromBackupDetails(fieldKeyFormat string) (oci_database.CreateDatabaseFromBackupDetails, error) {
	result := oci_database.CreateDatabaseFromBackupDetails{}
func (s *DatabaseDatabaseResourceCrud) mapToDbBackupConfig(fieldKeyFormat string) (oci_database.DbBackupConfig, error) {
	result := oci_database.DbBackupConfig{}
func (s *DatabaseDatabaseResourceCrud) populateTopLevelPolymorphicCreateDatabaseRequest(request *oci_database.CreateDatabaseRequest) error {
	//discriminator
func updateDatabaseDatabase(d *schema.ResourceData, m interface{}) error {
	sync := &DatabaseDatabaseResourceCrud{}
func (s *DatabaseDatabaseResourceCrud) Update() error {
	request := oci_database.UpdateDatabaseRequest{}
func (s *DatabaseDatabaseResourceCrud) mapToUpdateDbBackupConfig(fieldKeyFormat string) (oci_database.DbBackupConfig, error) {
	result := oci_database.DbBackupConfig{}
func (s *DatabaseDatabaseResourceCrud) mapToUpdateDatabaseDetails(fieldKeyFormat string) (oci_database.UpdateDatabaseDetails, error) {
	result := oci_database.UpdateDatabaseDetails{}
func (s *DatabaseDatabaseResourceCrud) DatabaseToMap(obj *oci_database.Database) map[string]interface{} {
	result := map[string]interface{}{}
func (s *DatabaseDatabaseResourceCrud) setDbKeyVersion(databaseId string) error {
	if kmsKeyVersionId, ok := s.D.GetOkExists("kms_key_version_id"); ok && s.D.HasChange("kms_key_version_id") {
func (s *DatabaseDatabaseResourceCrud) kmsRotation(databaseId string) error {
	if _, ok := s.D.GetOkExists("kms_key_rotation"); ok && s.D.HasChange("kms_key_rotation") {
func (s *DatabaseDatabaseResourceCrud) kmsMigration(databaseId string) error {
	migrateOperation := false

=== ./internal/service/database/database_application_vips_data_source.go ===
func DatabaseApplicationVipsDataSource() *schema.Resource {
	return &schema.Resource{
func readDatabaseApplicationVips(d *schema.ResourceData, m interface{}) error {
	sync := &DatabaseApplicationVipsDataSourceCrud{}
func (s *DatabaseApplicationVipsDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *DatabaseApplicationVipsDataSourceCrud) Get() error {
	request := oci_database.ListApplicationVipsRequest{}
func (s *DatabaseApplicationVipsDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/database/database_exadata_infrastructure_un_allocated_resource_data_source.go ===
func DatabaseExadataInfrastructureUnAllocatedResourceDataSource() *schema.Resource {
	return &schema.Resource{
func readSingularDatabaseExadataInfrastructureUnAllocatedResource(d *schema.ResourceData, m interface{}) error {
	sync := &DatabaseExadataInfrastructureUnAllocatedResourceDataSourceCrud{}
func (s *DatabaseExadataInfrastructureUnAllocatedResourceDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *DatabaseExadataInfrastructureUnAllocatedResourceDataSourceCrud) Get() error {
	request := oci_database.GetExadataInfrastructureUnAllocatedResourcesRequest{}
func (s *DatabaseExadataInfrastructureUnAllocatedResourceDataSourceCrud) SetData() error {
	if s.Res == nil {
func AutonomousVmClusterResourceDetailsToMap(obj oci_database.AutonomousVmClusterResourceDetails) map[string]interface{} {
	result := map[string]interface{}{}

=== ./internal/service/database/database_autonomous_database_regional_wallet_management_data_source.go ===
func DatabaseAutonomousDatabaseRegionalWalletManagementDataSource() *schema.Resource {
	fieldMap := make(map[string]*schema.Schema)
func readSingularDatabaseAutonomousDatabaseRegionalWalletManagement(d *schema.ResourceData, m interface{}) error {
	sync := &DatabaseAutonomousDatabaseRegionalWalletManagementDataSourceCrud{}
func (s *DatabaseAutonomousDatabaseRegionalWalletManagementDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *DatabaseAutonomousDatabaseRegionalWalletManagementDataSourceCrud) Get() error {
	request := oci_database.GetAutonomousDatabaseRegionalWalletRequest{}
func (s *DatabaseAutonomousDatabaseRegionalWalletManagementDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/database/database_db_system_patch_history_entries_data_source.go ===
func DatabaseDbSystemPatchHistoryEntriesDataSource() *schema.Resource {
	return &schema.Resource{
func readDatabaseDbSystemPatchHistoryEntries(d *schema.ResourceData, m interface{}) error {
	sync := &DatabaseDbSystemPatchHistoryEntriesDataSourceCrud{}
func (s *DatabaseDbSystemPatchHistoryEntriesDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *DatabaseDbSystemPatchHistoryEntriesDataSourceCrud) Get() error {
	request := oci_database.ListDbSystemPatchHistoryEntriesRequest{}
func (s *DatabaseDbSystemPatchHistoryEntriesDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/database/database_vm_cluster_add_virtual_machine_resource.go ===
func DatabaseVmClusterAddVirtualMachineResource() *schema.Resource {
	return &schema.Resource{
func createDatabaseVmClusterAddVirtualMachine(d *schema.ResourceData, m interface{}) error {
	sync := &DatabaseVmClusterAddVirtualMachineResourceCrud{}
func readDatabaseVmClusterAddVirtualMachine(d *schema.ResourceData, m interface{}) error {
	return nil
func deleteDatabaseVmClusterAddVirtualMachine(d *schema.ResourceData, m interface{}) error {
	return nil
func (s *DatabaseVmClusterAddVirtualMachineResourceCrud) ID() string {
	return *s.Res.Id
func (s *DatabaseVmClusterAddVirtualMachineResourceCrud) CreatedPending() []string {
	return []string{
func (s *DatabaseVmClusterAddVirtualMachineResourceCrud) CreatedTarget() []string {
	return []string{
func (s *DatabaseVmClusterAddVirtualMachineResourceCrud) DeletedPending() []string {
	return []string{
func (s *DatabaseVmClusterAddVirtualMachineResourceCrud) DeletedTarget() []string {
	return []string{
func (s *DatabaseVmClusterAddVirtualMachineResourceCrud) Create() error {
	request := oci_database.AddVirtualMachineToVmClusterRequest{}
func (s *DatabaseVmClusterAddVirtualMachineResourceCrud) SetData() error {
	if s.Res.AvailabilityDomain != nil {
func (s *DatabaseVmClusterAddVirtualMachineResourceCrud) CloudAutomationApplyUpdateTimePreferenceToMap(obj *oci_database.CloudAutomationApplyUpdateTimePreference) map[string]interface{} {
	result := map[string]interface{}{}
func (s *DatabaseVmClusterAddVirtualMachineResourceCrud) CloudAutomationFreezePeriodToMap(obj *oci_database.CloudAutomationFreezePeriod) map[string]interface{} {
	result := map[string]interface{}{}
func (s *DatabaseVmClusterAddVirtualMachineResourceCrud) CloudAutomationUpdateDetailsToMap(obj *oci_database.CloudAutomationUpdateDetails) map[string]interface{} {
	result := map[string]interface{}{}
func (s *DatabaseVmClusterAddVirtualMachineResourceCrud) DataCollectionOptionsToMap(obj *oci_database.DataCollectionOptions) map[string]interface{} {
	result := map[string]interface{}{}
func (s *DatabaseVmClusterAddVirtualMachineResourceCrud) mapToDbServerDetails(fieldKeyFormat string) (oci_database.DbServerDetails, error) {
	result := oci_database.DbServerDetails{}

=== ./internal/service/database/database_exadb_vm_cluster_data_source.go ===
func DatabaseExadbVmClusterDataSource() *schema.Resource {
	fieldMap := make(map[string]*schema.Schema)
func readSingularDatabaseExadbVmCluster(d *schema.ResourceData, m interface{}) error {
	sync := &DatabaseExadbVmClusterDataSourceCrud{}
func (s *DatabaseExadbVmClusterDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *DatabaseExadbVmClusterDataSourceCrud) Get() error {
	request := oci_database.GetExadbVmClusterRequest{}
func (s *DatabaseExadbVmClusterDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/database/database_external_database_connectors_data_source.go ===
func DatabaseExternalDatabaseConnectorsDataSource() *schema.Resource {
	return &schema.Resource{
func readDatabaseExternalDatabaseConnectors(d *schema.ResourceData, m interface{}) error {
	sync := &DatabaseExternalDatabaseConnectorsDataSourceCrud{}
func (s *DatabaseExternalDatabaseConnectorsDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *DatabaseExternalDatabaseConnectorsDataSourceCrud) Get() error {
	request := oci_database.ListExternalDatabaseConnectorsRequest{}
func (s *DatabaseExternalDatabaseConnectorsDataSourceCrud) SetData() error {
	if s.Res == nil {
func (s *DatabaseExternalDatabaseConnectorsDataSourceCrud) DatabaseConnectionCredentialsToMap(obj *oci_database.DatabaseConnectionCredentials) map[string]interface{} {
	result := map[string]interface{}{}

=== ./internal/service/database/database_autonomous_virtual_machines_data_source.go ===
func DatabaseAutonomousVirtualMachinesDataSource() *schema.Resource {
	return &schema.Resource{
func readDatabaseAutonomousVirtualMachines(d *schema.ResourceData, m interface{}) error {
	sync := &DatabaseAutonomousVirtualMachinesDataSourceCrud{}
func (s *DatabaseAutonomousVirtualMachinesDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *DatabaseAutonomousVirtualMachinesDataSourceCrud) Get() error {
	request := oci_database.ListAutonomousVirtualMachinesRequest{}
func (s *DatabaseAutonomousVirtualMachinesDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/database/database_autonomous_container_database_versions_data_source.go ===
func DatabaseAutonomousContainerDatabaseVersionsDataSource() *schema.Resource {
	return &schema.Resource{
func readDatabaseAutonomousContainerDatabaseVersions(d *schema.ResourceData, m interface{}) error {
	sync := &DatabaseAutonomousContainerDatabaseVersionsDataSourceCrud{}
func (s *DatabaseAutonomousContainerDatabaseVersionsDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *DatabaseAutonomousContainerDatabaseVersionsDataSourceCrud) Get() error {
	request := oci_database.ListAutonomousContainerDatabaseVersionsRequest{}
func (s *DatabaseAutonomousContainerDatabaseVersionsDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/database/database_vm_cluster_update_data_source.go ===
func DatabaseVmClusterUpdateDataSource() *schema.Resource {
	return &schema.Resource{
func readSingularDatabaseVmClusterUpdate(d *schema.ResourceData, m interface{}) error {
	sync := &DatabaseVmClusterUpdateDataSourceCrud{}
func (s *DatabaseVmClusterUpdateDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *DatabaseVmClusterUpdateDataSourceCrud) Get() error {
	request := oci_database.GetVmClusterUpdateRequest{}
func (s *DatabaseVmClusterUpdateDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/database/database_vm_cluster_patch_history_entry_data_source.go ===
func DatabaseVmClusterPatchHistoryEntryDataSource() *schema.Resource {
	return &schema.Resource{
func readSingularDatabaseVmClusterPatchHistoryEntry(d *schema.ResourceData, m interface{}) error {
	sync := &DatabaseVmClusterPatchHistoryEntryDataSourceCrud{}
func (s *DatabaseVmClusterPatchHistoryEntryDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *DatabaseVmClusterPatchHistoryEntryDataSourceCrud) Get() error {
	request := oci_database.GetVmClusterPatchHistoryEntryRequest{}
func (s *DatabaseVmClusterPatchHistoryEntryDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/database/database_vm_cluster_network_download_config_file_data_source.go ===
func DatabaseVmClusterNetworkDownloadConfigFileDataSource() *schema.Resource {
	return &schema.Resource{
func readSingularDatabaseVmClusterNetworkDownloadConfigFile(d *schema.ResourceData, m interface{}) error {
	sync := &DatabaseVmClusterNetworkDownloadConfigFileDataSourceCrud{}
func (s *DatabaseVmClusterNetworkDownloadConfigFileDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *DatabaseVmClusterNetworkDownloadConfigFileDataSourceCrud) Get() error {
	request := oci_database.DownloadVmClusterNetworkConfigFileRequest{}
func (s *DatabaseVmClusterNetworkDownloadConfigFileDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/database/database_autonomous_database_wallet_data_source.go ===
func DatabaseAutonomousDatabaseWalletDataSource() *schema.Resource {
	return &schema.Resource{
func readSingularDatabaseAutonomousDatabaseWallet(d *schema.ResourceData, m interface{}) error {
	sync := &DatabaseAutonomousDatabaseWalletDataSourceCrud{}
func (s *DatabaseAutonomousDatabaseWalletDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *DatabaseAutonomousDatabaseWalletDataSourceCrud) Get() error {
	request := oci_database.GenerateAutonomousDatabaseWalletRequest{}
func (s *DatabaseAutonomousDatabaseWalletDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/database/database_cloud_exadata_infrastructures_data_source.go ===
func DatabaseCloudExadataInfrastructuresDataSource() *schema.Resource {
	return &schema.Resource{
func readDatabaseCloudExadataInfrastructures(d *schema.ResourceData, m interface{}) error {
	sync := &DatabaseCloudExadataInfrastructuresDataSourceCrud{}
func (s *DatabaseCloudExadataInfrastructuresDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *DatabaseCloudExadataInfrastructuresDataSourceCrud) Get() error {
	request := oci_database.ListCloudExadataInfrastructuresRequest{}
func (s *DatabaseCloudExadataInfrastructuresDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/database/database_db_node_console_histories_data_source.go ===
func DatabaseDbNodeConsoleHistoriesDataSource() *schema.Resource {
	return &schema.Resource{
func readDatabaseDbNodeConsoleHistories(d *schema.ResourceData, m interface{}) error {
	sync := &DatabaseDbNodeConsoleHistoriesDataSourceCrud{}
func (s *DatabaseDbNodeConsoleHistoriesDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *DatabaseDbNodeConsoleHistoriesDataSourceCrud) Get() error {
	request := oci_database.ListConsoleHistoriesRequest{}
func (s *DatabaseDbNodeConsoleHistoriesDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/database/database_cloud_autonomous_vm_clusters_data_source.go ===
func DatabaseCloudAutonomousVmClustersDataSource() *schema.Resource {
	return &schema.Resource{
func readDatabaseCloudAutonomousVmClusters(d *schema.ResourceData, m interface{}) error {
	sync := &DatabaseCloudAutonomousVmClustersDataSourceCrud{}
func (s *DatabaseCloudAutonomousVmClustersDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *DatabaseCloudAutonomousVmClustersDataSourceCrud) Get() error {
	request := oci_database.ListCloudAutonomousVmClustersRequest{}
func (s *DatabaseCloudAutonomousVmClustersDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/database/database_autonomous_db_preview_versions_data_source.go ===
func DatabaseAutonomousDbPreviewVersionsDataSource() *schema.Resource {
	return &schema.Resource{
func readDatabaseAutonomousDbPreviewVersions(d *schema.ResourceData, m interface{}) error {
	sync := &DatabaseAutonomousDbPreviewVersionsDataSourceCrud{}
func (s *DatabaseAutonomousDbPreviewVersionsDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *DatabaseAutonomousDbPreviewVersionsDataSourceCrud) Get() error {
	request := oci_database.ListAutonomousDbPreviewVersionsRequest{}
func (s *DatabaseAutonomousDbPreviewVersionsDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/database/database_autonomous_database_instance_wallet_management_data_source.go ===
func DatabaseAutonomousDatabaseInstanceWalletManagementDataSource() *schema.Resource {
	fieldMap := make(map[string]*schema.Schema)
func readSingularDatabaseAutonomousDatabaseInstanceWalletManagement(d *schema.ResourceData, m interface{}) error {
	sync := &DatabaseAutonomousDatabaseInstanceWalletManagementDataSourceCrud{}
func (s *DatabaseAutonomousDatabaseInstanceWalletManagementDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *DatabaseAutonomousDatabaseInstanceWalletManagementDataSourceCrud) Get() error {
	request := oci_database.GetAutonomousDatabaseWalletRequest{}
func (s *DatabaseAutonomousDatabaseInstanceWalletManagementDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/database/database_exascale_db_storage_vault_data_source.go ===
func DatabaseExascaleDbStorageVaultDataSource() *schema.Resource {
	fieldMap := make(map[string]*schema.Schema)
func readSingularDatabaseExascaleDbStorageVault(d *schema.ResourceData, m interface{}) error {
	sync := &DatabaseExascaleDbStorageVaultDataSourceCrud{}
func (s *DatabaseExascaleDbStorageVaultDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *DatabaseExascaleDbStorageVaultDataSourceCrud) Get() error {
	request := oci_database.GetExascaleDbStorageVaultRequest{}
func (s *DatabaseExascaleDbStorageVaultDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/database/database_db_server_data_source.go ===
func DatabaseDbServerDataSource() *schema.Resource {
	return &schema.Resource{
func readSingularDatabaseDbServer(d *schema.ResourceData, m interface{}) error {
	sync := &DatabaseDbServerDataSourceCrud{}
func (s *DatabaseDbServerDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *DatabaseDbServerDataSourceCrud) Get() error {
	request := oci_database.GetDbServerRequest{}
func (s *DatabaseDbServerDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/database/database_vm_cluster_patch_data_source.go ===
func DatabaseVmClusterPatchDataSource() *schema.Resource {
	return &schema.Resource{
func readSingularDatabaseVmClusterPatch(d *schema.ResourceData, m interface{}) error {
	sync := &DatabaseVmClusterPatchDataSourceCrud{}
func (s *DatabaseVmClusterPatchDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *DatabaseVmClusterPatchDataSourceCrud) Get() error {
	request := oci_database.GetVmClusterPatchRequest{}
func (s *DatabaseVmClusterPatchDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/database/database_autonomous_exadata_infrastructures_data_source.go ===
func DatabaseAutonomousExadataInfrastructuresDataSource() *schema.Resource {
	return &schema.Resource{
func readDatabaseAutonomousExadataInfrastructures(d *schema.ResourceData, m interface{}) error {
	sync := &DatabaseAutonomousExadataInfrastructuresDataSourceCrud{}
func (s *DatabaseAutonomousExadataInfrastructuresDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *DatabaseAutonomousExadataInfrastructuresDataSourceCrud) Get() error {
	request := oci_database.ListAutonomousExadataInfrastructuresRequest{}
func (s *DatabaseAutonomousExadataInfrastructuresDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/database/database_exadb_vm_clusters_data_source.go ===
func DatabaseExadbVmClustersDataSource() *schema.Resource {
	return &schema.Resource{
func readDatabaseExadbVmClusters(d *schema.ResourceData, m interface{}) error {
	sync := &DatabaseExadbVmClustersDataSourceCrud{}
func (s *DatabaseExadbVmClustersDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *DatabaseExadbVmClustersDataSourceCrud) Get() error {
	request := oci_database.ListExadbVmClustersRequest{}
func (s *DatabaseExadbVmClustersDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/database/database_autonomous_database_software_image_resource.go ===
func DatabaseAutonomousDatabaseSoftwareImageResource() *schema.Resource {
	return &schema.Resource{
func createDatabaseAutonomousDatabaseSoftwareImage(d *schema.ResourceData, m interface{}) error {
	sync := &DatabaseAutonomousDatabaseSoftwareImageResourceCrud{}
func readDatabaseAutonomousDatabaseSoftwareImage(d *schema.ResourceData, m interface{}) error {
	sync := &DatabaseAutonomousDatabaseSoftwareImageResourceCrud{}
func updateDatabaseAutonomousDatabaseSoftwareImage(d *schema.ResourceData, m interface{}) error {
	sync := &DatabaseAutonomousDatabaseSoftwareImageResourceCrud{}
func deleteDatabaseAutonomousDatabaseSoftwareImage(d *schema.ResourceData, m interface{}) error {
	sync := &DatabaseAutonomousDatabaseSoftwareImageResourceCrud{}
func (s *DatabaseAutonomousDatabaseSoftwareImageResourceCrud) ID() string {
	return *s.Res.Id
func (s *DatabaseAutonomousDatabaseSoftwareImageResourceCrud) CreatedPending() []string {
	return []string{
func (s *DatabaseAutonomousDatabaseSoftwareImageResourceCrud) CreatedTarget() []string {
	return []string{
func (s *DatabaseAutonomousDatabaseSoftwareImageResourceCrud) DeletedPending() []string {
	return []string{
func (s *DatabaseAutonomousDatabaseSoftwareImageResourceCrud) DeletedTarget() []string {
	return []string{
func (s *DatabaseAutonomousDatabaseSoftwareImageResourceCrud) Create() error {
	request := oci_database.CreateAutonomousDatabaseSoftwareImageRequest{}
func (s *DatabaseAutonomousDatabaseSoftwareImageResourceCrud) Get() error {
	request := oci_database.GetAutonomousDatabaseSoftwareImageRequest{}
func (s *DatabaseAutonomousDatabaseSoftwareImageResourceCrud) Update() error {
	if compartment, ok := s.D.GetOkExists("compartment_id"); ok && s.D.HasChange("compartment_id") {
func (s *DatabaseAutonomousDatabaseSoftwareImageResourceCrud) Delete() error {
	request := oci_database.DeleteAutonomousDatabaseSoftwareImageRequest{}
func (s *DatabaseAutonomousDatabaseSoftwareImageResourceCrud) SetData() error {
	s.D.Set("autonomous_dsi_one_off_patches", s.Res.AutonomousDsiOneOffPatches)
func (s *DatabaseAutonomousDatabaseSoftwareImageResourceCrud) updateCompartment(compartment interface{}) error {
	changeCompartmentRequest := oci_database.ChangeAutonomousDatabaseSoftwareImageCompartmentRequest{}

=== ./internal/service/database/database_exadb_vm_cluster_update_history_entries_data_source.go ===
func DatabaseExadbVmClusterUpdateHistoryEntriesDataSource() *schema.Resource {
	return &schema.Resource{
func readDatabaseExadbVmClusterUpdateHistoryEntries(d *schema.ResourceData, m interface{}) error {
	sync := &DatabaseExadbVmClusterUpdateHistoryEntriesDataSourceCrud{}
func (s *DatabaseExadbVmClusterUpdateHistoryEntriesDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *DatabaseExadbVmClusterUpdateHistoryEntriesDataSourceCrud) Get() error {
	request := oci_database.ListExadbVmClusterUpdateHistoryEntriesRequest{}
func (s *DatabaseExadbVmClusterUpdateHistoryEntriesDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/database/database_cloud_vm_cluster_resource.go ===
func DatabaseCloudVmClusterResource() *schema.Resource {
	return &schema.Resource{
func createDatabaseCloudVmCluster(d *schema.ResourceData, m interface{}) error {
	sync := &DatabaseCloudVmClusterResourceCrud{}
func readDatabaseCloudVmCluster(d *schema.ResourceData, m interface{}) error {
	sync := &DatabaseCloudVmClusterResourceCrud{}
func updateDatabaseCloudVmCluster(d *schema.ResourceData, m interface{}) error {
	sync := &DatabaseCloudVmClusterResourceCrud{}
func deleteDatabaseCloudVmCluster(d *schema.ResourceData, m interface{}) error {
	sync := &DatabaseCloudVmClusterResourceCrud{}
func (s *DatabaseCloudVmClusterResourceCrud) ID() string {
	return *s.Res.Id
func (s *DatabaseCloudVmClusterResourceCrud) CreatedPending() []string {
	return []string{
func (s *DatabaseCloudVmClusterResourceCrud) CreatedTarget() []string {
	if createAsyn, ok := s.D.GetOk("create_async"); ok {
func (s *DatabaseCloudVmClusterResourceCrud) DeletedPending() []string {
	return []string{
func (s *DatabaseCloudVmClusterResourceCrud) DeletedTarget() []string {
	return []string{
func (s *DatabaseCloudVmClusterResourceCrud) UpdatedPending() []string {
	return []string{
func (s *DatabaseCloudVmClusterResourceCrud) UpdatedTarget() []string {
	return []string{
func (s *DatabaseCloudVmClusterResourceCrud) Create() error {
	request := oci_database.CreateCloudVmClusterRequest{}
func (s *DatabaseCloudVmClusterResourceCrud) Get() error {
	request := oci_database.GetCloudVmClusterRequest{}
func (s *DatabaseCloudVmClusterResourceCrud) Update() error {
	if compartment, ok := s.D.GetOkExists("compartment_id"); ok && s.D.HasChange("compartment_id") {
func (s *DatabaseCloudVmClusterResourceCrud) Delete() error {
	request := oci_database.DeleteCloudVmClusterRequest{}
func (s *DatabaseCloudVmClusterResourceCrud) SetData() error {
	if s.Res.AvailabilityDomain != nil {
func (s *DatabaseCloudVmClusterResourceCrud) mapToCloudAutomationApplyUpdateTimePreference(fieldKeyFormat string) (oci_database.CloudAutomationApplyUpdateTimePreference, error) {
	result := oci_database.CloudAutomationApplyUpdateTimePreference{}
func (s *DatabaseCloudVmClusterResourceCrud) mapToCloudAutomationFreezePeriod(fieldKeyFormat string) (oci_database.CloudAutomationFreezePeriod, error) {
	result := oci_database.CloudAutomationFreezePeriod{}
func (s *DatabaseCloudVmClusterResourceCrud) mapToCloudAutomationUpdateDetails(fieldKeyFormat string) (oci_database.CloudAutomationUpdateDetails, error) {
	result := oci_database.CloudAutomationUpdateDetails{}
func (s *DatabaseCloudVmClusterResourceCrud) mapToDataCollectionOptions(fieldKeyFormat string) (oci_database.DataCollectionOptions, error) {
	result := oci_database.DataCollectionOptions{}
func (s *DatabaseCloudVmClusterResourceCrud) updateCompartment(compartment interface{}) error {
	changeCompartmentRequest := oci_database.ChangeCloudVmClusterCompartmentRequest{}
func (s *DatabaseCloudVmClusterResourceCrud) mapToFileSystemConfigurationDetail(fieldKeyFormat string) (oci_database.FileSystemConfigurationDetail, error) {
	result := oci_database.FileSystemConfigurationDetail{}
func (s *DatabaseCloudVmClusterResourceCrud) flexAvailableDbStorageInGBs(compartmentId string, shapeName string) (int, error) {
	request := oci_database.ListFlexComponentsRequest{}
func (s *DatabaseCloudVmClusterResourceCrud) getInfraInfo(ceiId string) error {
	request := oci_database.GetCloudExadataInfrastructureRequest{}

=== ./internal/service/database/database_exascale_db_storage_vault_resource.go ===
func DatabaseExascaleDbStorageVaultResource() *schema.Resource {
	return &schema.Resource{
func createDatabaseExascaleDbStorageVault(d *schema.ResourceData, m interface{}) error {
	sync := &DatabaseExascaleDbStorageVaultResourceCrud{}
func readDatabaseExascaleDbStorageVault(d *schema.ResourceData, m interface{}) error {
	sync := &DatabaseExascaleDbStorageVaultResourceCrud{}
func updateDatabaseExascaleDbStorageVault(d *schema.ResourceData, m interface{}) error {
	sync := &DatabaseExascaleDbStorageVaultResourceCrud{}
func deleteDatabaseExascaleDbStorageVault(d *schema.ResourceData, m interface{}) error {
	sync := &DatabaseExascaleDbStorageVaultResourceCrud{}
func (s *DatabaseExascaleDbStorageVaultResourceCrud) ID() string {
	return *s.Res.Id
func (s *DatabaseExascaleDbStorageVaultResourceCrud) CreatedPending() []string {
	return []string{
func (s *DatabaseExascaleDbStorageVaultResourceCrud) CreatedTarget() []string {
	return []string{
func (s *DatabaseExascaleDbStorageVaultResourceCrud) DeletedPending() []string {
	return []string{
func (s *DatabaseExascaleDbStorageVaultResourceCrud) DeletedTarget() []string {
	return []string{
func (s *DatabaseExascaleDbStorageVaultResourceCrud) UpdatePending() []string {
	return []string{
func (s *DatabaseExascaleDbStorageVaultResourceCrud) UpdateTarget() []string {
	return []string{
func (s *DatabaseExascaleDbStorageVaultResourceCrud) Create() error {
	request := oci_database.CreateExascaleDbStorageVaultRequest{}
func (s *DatabaseExascaleDbStorageVaultResourceCrud) Get() error {
	request := oci_database.GetExascaleDbStorageVaultRequest{}
func (s *DatabaseExascaleDbStorageVaultResourceCrud) Update() error {
	if compartment, ok := s.D.GetOkExists("compartment_id"); ok && s.D.HasChange("compartment_id") {
func (s *DatabaseExascaleDbStorageVaultResourceCrud) Delete() error {
	request := oci_database.DeleteExascaleDbStorageVaultRequest{}
func (s *DatabaseExascaleDbStorageVaultResourceCrud) SetData() error {
	if s.Res.AdditionalFlashCacheInPercent != nil {
func (s *DatabaseExascaleDbStorageVaultResourceCrud) mapToExascaleDbStorageInputDetails(fieldKeyFormat string) (oci_database.ExascaleDbStorageInputDetails, error) {
	result := oci_database.ExascaleDbStorageInputDetails{}
func (s *DatabaseExascaleDbStorageVaultResourceCrud) updateCompartment(compartment interface{}) error {
	changeCompartmentRequest := oci_database.ChangeExascaleDbStorageVaultCompartmentRequest{}

=== ./internal/service/database/database_oneoff_patch_resource.go ===
func DatabaseOneoffPatchResource() *schema.Resource {
	return &schema.Resource{
func createDatabaseOneoffPatch(d *schema.ResourceData, m interface{}) error {
	sync := &DatabaseOneoffPatchResourceCrud{}
func readDatabaseOneoffPatch(d *schema.ResourceData, m interface{}) error {
	sync := &DatabaseOneoffPatchResourceCrud{}
func updateDatabaseOneoffPatch(d *schema.ResourceData, m interface{}) error {
	sync := &DatabaseOneoffPatchResourceCrud{}
func deleteDatabaseOneoffPatch(d *schema.ResourceData, m interface{}) error {
	sync := &DatabaseOneoffPatchResourceCrud{}
func (s *DatabaseOneoffPatchResourceCrud) ID() string {
	return *s.Res.Id
func (s *DatabaseOneoffPatchResourceCrud) CreatedPending() []string {
	return []string{
func (s *DatabaseOneoffPatchResourceCrud) CreatedTarget() []string {
	return []string{
func (s *DatabaseOneoffPatchResourceCrud) DeletedPending() []string {
	return []string{
func (s *DatabaseOneoffPatchResourceCrud) DeletedTarget() []string {
	return []string{
func (s *DatabaseOneoffPatchResourceCrud) Create() error {
	request := oci_database.CreateOneoffPatchRequest{}
func (s *DatabaseOneoffPatchResourceCrud) Get() error {
	request := oci_database.GetOneoffPatchRequest{}
func (s *DatabaseOneoffPatchResourceCrud) Update() error {

func (s *DatabaseOneoffPatchResourceCrud) Delete() error {
	request := oci_database.DeleteOneoffPatchRequest{}
func (s *DatabaseOneoffPatchResourceCrud) SetData() error {
	if s.Res.CompartmentId != nil {
func (s *DatabaseOneoffPatchResourceCrud) DownloadOneoffPatch() error {
	request := oci_database.DownloadOneoffPatchRequest{}
func (s *DatabaseOneoffPatchResourceCrud) ChangeOneoffPatchCompartment() error {
	request := oci_database.ChangeOneoffPatchCompartmentRequest{}
func (s *DatabaseOneoffPatchResourceCrud) updateCompartment(compartment interface{}) error {
	changeCompartmentRequest := oci_database.ChangeOneoffPatchCompartmentRequest{}

=== ./internal/service/database/database_external_pluggable_database_data_source.go ===
func DatabaseExternalPluggableDatabaseDataSource() *schema.Resource {
	fieldMap := make(map[string]*schema.Schema)
func readSingularDatabaseExternalPluggableDatabase(d *schema.ResourceData, m interface{}) error {
	sync := &DatabaseExternalPluggableDatabaseDataSourceCrud{}
func (s *DatabaseExternalPluggableDatabaseDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *DatabaseExternalPluggableDatabaseDataSourceCrud) Get() error {
	request := oci_database.GetExternalPluggableDatabaseRequest{}
func (s *DatabaseExternalPluggableDatabaseDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/database/database_autonomous_database_dataguard_associations_data_source.go ===
func DatabaseAutonomousDatabaseDataguardAssociationsDataSource() *schema.Resource {
	return &schema.Resource{
func readDatabaseAutonomousDatabaseDataguardAssociations(d *schema.ResourceData, m interface{}) error {
	sync := &DatabaseAutonomousDatabaseDataguardAssociationsDataSourceCrud{}
func (s *DatabaseAutonomousDatabaseDataguardAssociationsDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *DatabaseAutonomousDatabaseDataguardAssociationsDataSourceCrud) Get() error {
	request := oci_database.ListAutonomousDatabaseDataguardAssociationsRequest{}
func (s *DatabaseAutonomousDatabaseDataguardAssociationsDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/database/database_db_home_data_source.go ===
func DatabaseDbHomeDataSource() *schema.Resource {
	fieldMap := make(map[string]*schema.Schema)
func readSingularDatabaseDbHome(d *schema.ResourceData, m interface{}) error {
	sync := &DatabaseDbHomeDataSourceCrud{}
func (s *DatabaseDbHomeDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *DatabaseDbHomeDataSourceCrud) Get() error {
	request := oci_database.GetDbHomeRequest{}
func (s *DatabaseDbHomeDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/database/database_autonomous_exadata_infrastructure_ocpu_data_source.go ===
func DatabaseAutonomousExadataInfrastructureOcpuDataSource() *schema.Resource {
	return &schema.Resource{
func readSingularDatabaseAutonomousExadataInfrastructureOcpu(d *schema.ResourceData, m interface{}) error {
	sync := &DatabaseAutonomousExadataInfrastructureOcpuDataSourceCrud{}
func (s *DatabaseAutonomousExadataInfrastructureOcpuDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *DatabaseAutonomousExadataInfrastructureOcpuDataSourceCrud) Get() error {
	request := oci_database.GetExadataInfrastructureOcpusRequest{}
func (s *DatabaseAutonomousExadataInfrastructureOcpuDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/database/database_exadata_infrastructure_compute_managed_resource.go ===
func DatabaseExadataInfrastructureComputeManagedResource() *schema.Resource {
	return &schema.Resource{
func updateDatabaseExadataInfrastructureComputeManagedResource(d *schema.ResourceData, m interface{}) error {
	sync := &DatabaseExadataInfrastructureComputeManagedResourceCrud{}
func readDatabaseExadataInfrastructureComputeManagedResource(d *schema.ResourceData, m interface{}) error {
	sync := &DatabaseExadataInfrastructureComputeManagedResourceCrud{}
func deleteDatabaseExadataInfrastructureComputeManagedResource(d *schema.ResourceData, m interface{}) error {
	return nil
func (s *DatabaseExadataInfrastructureComputeManagedResourceCrud) UpdatedPending() []string {
	return []string{
func (s *DatabaseExadataInfrastructureComputeManagedResourceCrud) UpdatedTarget() []string {
	return []string{
func (s *DatabaseExadataInfrastructureComputeManagedResourceCrud) DeletedPending() []string {
	return []string{
func (s *DatabaseExadataInfrastructureComputeManagedResourceCrud) DeletedTarget() []string {
	return []string{
func (s *DatabaseExadataInfrastructureComputeManagedResourceCrud) ID() string {
	return *s.Res.Id
func (s *DatabaseExadataInfrastructureComputeManagedResourceCrud) Update() error {
	request := oci_database.UpdateExadataInfrastructureRequest{}
func (s *DatabaseExadataInfrastructureComputeManagedResourceCrud) SetData() error {

func (s *DatabaseExadataInfrastructureComputeManagedResourceCrud) Get() error {
	request := oci_database.GetExadataInfrastructureRequest{}
func (s *DatabaseExadataInfrastructureComputeManagedResourceCrud) activateExadataInfrastructureComputeManagedResource(activationFile string, exadataInfrastructureId string) (*oci_database.ActivateExadataInfrastructureResponse, error) {
	request := oci_database.ActivateExadataInfrastructureRequest{}
func (s *DatabaseExadataInfrastructureComputeManagedResourceCrud) mapToExadataInfrastructureContact(fieldKeyFormat string) (oci_database.ExadataInfrastructureContact, error) {
	result := oci_database.ExadataInfrastructureContact{}
func (s *DatabaseExadataInfrastructureComputeManagedResourceCrud) mapToMaintenanceWindow(fieldKeyFormat string) (oci_database.MaintenanceWindow, error) {
	result := oci_database.MaintenanceWindow{}
func (s *DatabaseExadataInfrastructureComputeManagedResourceCrud) mapToDayOfWeek(fieldKeyFormat string) (oci_database.DayOfWeek, error) {
	result := oci_database.DayOfWeek{}
func (s *DatabaseExadataInfrastructureComputeManagedResourceCrud) mapToMonth(fieldKeyFormat string) (oci_database.Month, error) {
	result := oci_database.Month{}

=== ./internal/service/database/database_exadata_infrastructure_storage_resource.go ===
func DatabaseExadataInfrastructureStorageResource() *schema.Resource {
	return &schema.Resource{
func updateDatabaseExadataInfrastructureStorage(d *schema.ResourceData, m interface{}) error {
	sync := &DatabaseExadataInfrastructureStorageResourceCrud{}
func (s *DatabaseExadataInfrastructureStorageResourceCrud) ID() string {
	return *s.Res.Id
func (s *DatabaseExadataInfrastructureStorageResourceCrud) Update() error {
	request := oci_database.AddStorageCapacityExadataInfrastructureRequest{}
func (s *DatabaseExadataInfrastructureStorageResourceCrud) SetData() error {


=== ./internal/service/database/database_autonomous_container_database_data_source.go ===
func DatabaseAutonomousContainerDatabaseDataSource() *schema.Resource {
	fieldMap := make(map[string]*schema.Schema)
func readSingularDatabaseAutonomousContainerDatabase(d *schema.ResourceData, m interface{}) error {
	sync := &DatabaseAutonomousContainerDatabaseDataSourceCrud{}
func (s *DatabaseAutonomousContainerDatabaseDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *DatabaseAutonomousContainerDatabaseDataSourceCrud) Get() error {
	request := oci_database.GetAutonomousContainerDatabaseRequest{}
func (s *DatabaseAutonomousContainerDatabaseDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/database/database_cloud_autonomous_vm_cluster_resource.go ===
func DatabaseCloudAutonomousVmClusterResource() *schema.Resource {
	return &schema.Resource{
func createDatabaseCloudAutonomousVmCluster(d *schema.ResourceData, m interface{}) error {
	sync := &DatabaseCloudAutonomousVmClusterResourceCrud{}
func readDatabaseCloudAutonomousVmCluster(d *schema.ResourceData, m interface{}) error {
	sync := &DatabaseCloudAutonomousVmClusterResourceCrud{}
func updateDatabaseCloudAutonomousVmCluster(d *schema.ResourceData, m interface{}) error {
	sync := &DatabaseCloudAutonomousVmClusterResourceCrud{}
func deleteDatabaseCloudAutonomousVmCluster(d *schema.ResourceData, m interface{}) error {
	sync := &DatabaseCloudAutonomousVmClusterResourceCrud{}
func (s *DatabaseCloudAutonomousVmClusterResourceCrud) ID() string {
	return *s.Res.Id
func (s *DatabaseCloudAutonomousVmClusterResourceCrud) CreatedPending() []string {
	return []string{
func (s *DatabaseCloudAutonomousVmClusterResourceCrud) CreatedTarget() []string {
	return []string{
func (s *DatabaseCloudAutonomousVmClusterResourceCrud) DeletedPending() []string {
	return []string{
func (s *DatabaseCloudAutonomousVmClusterResourceCrud) DeletedTarget() []string {
	return []string{
func (s *DatabaseCloudAutonomousVmClusterResourceCrud) Create() error {
	request := oci_database.CreateCloudAutonomousVmClusterRequest{}
func (s *DatabaseCloudAutonomousVmClusterResourceCrud) Get() error {
	request := oci_database.GetCloudAutonomousVmClusterRequest{}
func (s *DatabaseCloudAutonomousVmClusterResourceCrud) Update() error {
	if compartment, ok := s.D.GetOkExists("compartment_id"); ok && s.D.HasChange("compartment_id") {
func (s *DatabaseCloudAutonomousVmClusterResourceCrud) Delete() error {
	request := oci_database.DeleteCloudAutonomousVmClusterRequest{}
func (s *DatabaseCloudAutonomousVmClusterResourceCrud) SetData() error {
	if s.Res.AutonomousDataStoragePercentage != nil {
func (s *DatabaseCloudAutonomousVmClusterResourceCrud) mapToDayOfWeek(fieldKeyFormat string) (oci_database.DayOfWeek, error) {
	result := oci_database.DayOfWeek{}
func (s *DatabaseCloudAutonomousVmClusterResourceCrud) mapToMaintenanceWindow(fieldKeyFormat string) (oci_database.MaintenanceWindow, error) {
	result := oci_database.MaintenanceWindow{}
func (s *DatabaseCloudAutonomousVmClusterResourceCrud) mapToMonth(fieldKeyFormat string) (oci_database.Month, error) {
	result := oci_database.Month{}
func (s *DatabaseCloudAutonomousVmClusterResourceCrud) updateCompartment(compartment interface{}) error {
	changeCompartmentRequest := oci_database.ChangeCloudAutonomousVmClusterCompartmentRequest{}
func (s *DatabaseCloudAutonomousVmClusterResourceCrud) RotateAutonomousCloudVmClusterOrdsCerts() error {
	request := oci_database.RotateCloudAutonomousVmClusterOrdsCertsRequest{}
func (s *DatabaseCloudAutonomousVmClusterResourceCrud) RotateAutonomousCloudVmClusterSslCerts() error {
	request := oci_database.RotateCloudAutonomousVmClusterSslCertsRequest{}

=== ./internal/service/database/database_autonomous_vm_cluster_ords_certificate_management_resource.go ===
func DatabaseAutonomousVmClusterOrdsCertificateManagementResource() *schema.Resource {
	return &schema.Resource{
func createDatabaseAutonomousVmClusterOrdsCertificateManagement(d *schema.ResourceData, m interface{}) error {
	sync := &DatabaseAutonomousVmClusterOrdsCertificateManagementResourceCrud{}
func readDatabaseAutonomousVmClusterOrdsCertificateManagement(d *schema.ResourceData, m interface{}) error {
	return nil
func deleteDatabaseAutonomousVmClusterOrdsCertificateManagement(d *schema.ResourceData, m interface{}) error {
	return nil
func (s *DatabaseAutonomousVmClusterOrdsCertificateManagementResourceCrud) ID() string {
	return tfresource.GenerateDataSourceHashID("DatabaseAutonomousVmClusterOrdsCertificateManagementResource-", DatabaseAutonomousVmClusterOrdsCertificateManagementResource(), s.D)
func (s *DatabaseAutonomousVmClusterOrdsCertificateManagementResourceCrud) Create() error {
	request := oci_database.RotateAutonomousVmClusterOrdsCertsRequest{}
func (s *DatabaseAutonomousVmClusterOrdsCertificateManagementResourceCrud) SetData() error {
	return nil

=== ./internal/service/database/database_vm_cluster_updates_data_source.go ===
func DatabaseVmClusterUpdatesDataSource() *schema.Resource {
	return &schema.Resource{
func readDatabaseVmClusterUpdates(d *schema.ResourceData, m interface{}) error {
	sync := &DatabaseVmClusterUpdatesDataSourceCrud{}
func (s *DatabaseVmClusterUpdatesDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *DatabaseVmClusterUpdatesDataSourceCrud) Get() error {
	request := oci_database.ListVmClusterUpdatesRequest{}
func (s *DatabaseVmClusterUpdatesDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/database/database_autonomous_database_wallet_resource.go ===
func DatabaseAutonomousDatabaseWalletResource() *schema.Resource {
	return &schema.Resource{
func createDatabaseAutonomousDatabaseWallet(d *schema.ResourceData, m interface{}) error {
	sync := &DatabaseAutonomousDatabaseWalletResourceCrud{}
func readDatabaseAutonomousDatabaseWallet(d *schema.ResourceData, m interface{}) error {
	return nil
func deleteDatabaseAutonomousDatabaseWallet(d *schema.ResourceData, m interface{}) error {
	return nil
func (s *DatabaseAutonomousDatabaseWalletResourceCrud) ID() string {
	return tfresource.GenerateDataSourceHashID("DatabaseAutonomousDatabaseWalletResource-", DatabaseAutonomousDatabaseWalletResource(), s.D)
func (s *DatabaseAutonomousDatabaseWalletResourceCrud) Create() error {
	request := oci_database.GenerateAutonomousDatabaseWalletRequest{}
func (s *DatabaseAutonomousDatabaseWalletResourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/database/database_db_node_console_history_resource.go ===
func DatabaseDbNodeConsoleHistoryResource() *schema.Resource {
	return &schema.Resource{
func createDatabaseDbNodeConsoleHistory(d *schema.ResourceData, m interface{}) error {
	sync := &DatabaseDbNodeConsoleHistoryResourceCrud{}
func readDatabaseDbNodeConsoleHistory(d *schema.ResourceData, m interface{}) error {
	sync := &DatabaseDbNodeConsoleHistoryResourceCrud{}
func updateDatabaseDbNodeConsoleHistory(d *schema.ResourceData, m interface{}) error {
	sync := &DatabaseDbNodeConsoleHistoryResourceCrud{}
func deleteDatabaseDbNodeConsoleHistory(d *schema.ResourceData, m interface{}) error {
	sync := &DatabaseDbNodeConsoleHistoryResourceCrud{}
func (s *DatabaseDbNodeConsoleHistoryResourceCrud) ID() string {
	return GetDbNodeConsoleHistoryCompositeId(s.D.Get("db_node_id").(string), *s.Res.Id)
func (s *DatabaseDbNodeConsoleHistoryResourceCrud) CreatedPending() []string {
	return []string{
func (s *DatabaseDbNodeConsoleHistoryResourceCrud) CreatedTarget() []string {
	return []string{
func (s *DatabaseDbNodeConsoleHistoryResourceCrud) DeletedPending() []string {
	return []string{
func (s *DatabaseDbNodeConsoleHistoryResourceCrud) DeletedTarget() []string {
	return []string{
func (s *DatabaseDbNodeConsoleHistoryResourceCrud) Create() error {
	request := oci_database.CreateConsoleHistoryRequest{}
func (s *DatabaseDbNodeConsoleHistoryResourceCrud) Get() error {
	request := oci_database.GetConsoleHistoryRequest{}
func (s *DatabaseDbNodeConsoleHistoryResourceCrud) Update() error {
	request := oci_database.UpdateConsoleHistoryRequest{}
func (s *DatabaseDbNodeConsoleHistoryResourceCrud) Delete() error {
	request := oci_database.DeleteConsoleHistoryRequest{}
func (s *DatabaseDbNodeConsoleHistoryResourceCrud) SetData() error {


=== ./internal/service/database/database_autonomous_database_resource.go ===
func DatabaseAutonomousDatabaseResource() *schema.Resource {
	return &schema.Resource{
func createDatabaseAutonomousDatabase(d *schema.ResourceData, m interface{}) error {
	sync := &DatabaseAutonomousDatabaseResourceCrud{}
func readDatabaseAutonomousDatabase(d *schema.ResourceData, m interface{}) error {
	sync := &DatabaseAutonomousDatabaseResourceCrud{}
func updateDatabaseAutonomousDatabase(d *schema.ResourceData, m interface{}) error {
	sync := &DatabaseAutonomousDatabaseResourceCrud{}
func deleteDatabaseAutonomousDatabase(d *schema.ResourceData, m interface{}) error {
	sync := &DatabaseAutonomousDatabaseResourceCrud{}
func (s *DatabaseAutonomousDatabaseResourceCrud) ID() string {
	return *s.Res.Id
func (s *DatabaseAutonomousDatabaseResourceCrud) CreatedPending() []string {
	return []string{
func (s *DatabaseAutonomousDatabaseResourceCrud) CreatedTarget() []string {
	return []string{
func (s *DatabaseAutonomousDatabaseResourceCrud) DeletedPending() []string {
	return []string{
func (s *DatabaseAutonomousDatabaseResourceCrud) DeletedTarget() []string {
	return []string{
func (s *DatabaseAutonomousDatabaseResourceCrud) UpdatedPending() []string {
	return []string{
func (s *DatabaseAutonomousDatabaseResourceCrud) UpdatedTarget() []string {
	return []string{
func (s *DatabaseAutonomousDatabaseResourceCrud) Create() error {
	request := oci_database.CreateAutonomousDatabaseRequest{}
func (s *DatabaseAutonomousDatabaseResourceCrud) Get() error {
	request := oci_database.GetAutonomousDatabaseRequest{}
func (s *DatabaseAutonomousDatabaseResourceCrud) Update() error {
	if compartment, ok := s.D.GetOkExists("compartment_id"); ok && s.D.HasChange("compartment_id") {
func (s *DatabaseAutonomousDatabaseResourceCrud) Delete() error {
	request := oci_database.DeleteAutonomousDatabaseRequest{}
func longTermBackupSupressDiff(key string, old string, new string, d *schema.ResourceData) bool {
	if longTermBackupSchedule, ok := d.GetOkExists("long_term_backup_schedule"); ok {
func (s *DatabaseAutonomousDatabaseResourceCrud) SetData() error {
	if s.Res.ActualUsedDataStorageSizeInTBs != nil {
func (s *DatabaseAutonomousDatabaseResourceCrud) mapToAutonomousDatabaseEncryptionKeyDetails(fieldKeyFormat string) (oci_database.AutonomousDatabaseEncryptionKeyDetails, error) {
	var baseObject oci_database.AutonomousDatabaseEncryptionKeyDetails
func (s *DatabaseAutonomousDatabaseResourceCrud) mapToCustomerContact(fieldKeyFormat string) (oci_database.CustomerContact, error) {
	result := oci_database.CustomerContact{}
func (s *DatabaseAutonomousDatabaseResourceCrud) mapToDatabaseTool(fieldKeyFormat string) (oci_database.DatabaseTool, error) {
	result := oci_database.DatabaseTool{}
func (s *DatabaseAutonomousDatabaseResourceCrud) adbMapToDayOfWeek(fieldKeyFormat string) (oci_database.DayOfWeek, error) {
	result := oci_database.DayOfWeek{}
func (s *DatabaseAutonomousDatabaseResourceCrud) mapToLongTermBackUpScheduleDetails(fieldKeyFormat string) (oci_database.LongTermBackUpScheduleDetails, error) {
	result := oci_database.LongTermBackUpScheduleDetails{}
func (s *DatabaseAutonomousDatabaseResourceCrud) mapToResourcePoolSummary(fieldKeyFormat string) (oci_database.ResourcePoolSummary, error) {
	result := oci_database.ResourcePoolSummary{}
func ResourcePoolSummaryToMap(obj *oci_database.ResourcePoolSummary) map[string]interface{} {
	result := map[string]interface{}{}
func (s *DatabaseAutonomousDatabaseResourceCrud) mapToScheduledOperationDetails(fieldKeyFormat string) (oci_database.ScheduledOperationDetails, error) {
	result := oci_database.ScheduledOperationDetails{}
func (s *DatabaseAutonomousDatabaseResourceCrud) populateTopLevelPolymorphicCreateAutonomousDatabaseRequest(request *oci_database.CreateAutonomousDatabaseRequest) error {
	//discriminator
func (s *DatabaseAutonomousDatabaseResourceCrud) updateCompartment(compartment interface{}) error {
	changeCompartmentRequest := oci_database.ChangeAutonomousDatabaseCompartmentRequest{}
func (s *DatabaseAutonomousDatabaseResourceCrud) updateSubscription(subscriptionId string) error {
	changeSubscriptionRequest := oci_database.ChangeAutonomousDatabaseSubscriptionRequest{}
func (s *DatabaseAutonomousDatabaseResourceCrud) updateDataSafeStatus(autonomousDatabaseId string, dataSafeStatus oci_database.AutonomousDatabaseDataSafeStatusEnum) error {
	switch dataSafeStatus {
func (s *DatabaseAutonomousDatabaseResourceCrud) updateDbVersion(dbVersion string) error {
	changeDbVersionRequest := oci_database.UpdateAutonomousDatabaseRequest{}
func (s *DatabaseAutonomousDatabaseResourceCrud) updateNsgIds(nsgIds []string) error {
	changeNsgIdsRequest := oci_database.UpdateAutonomousDatabaseRequest{}
func (s *DatabaseAutonomousDatabaseResourceCrud) validateSwitchoverDatabase() error {
	err := s.Get()
func (s *DatabaseAutonomousDatabaseResourceCrud) switchoverDatabase(peerDbId string) error {
	request := oci_database.SwitchoverAutonomousDatabaseRequest{}
func (s *DatabaseAutonomousDatabaseResourceCrud) updateOperationsInsightsStatus(autonomousDatabaseId string, operationsInsightsStatus oci_database.AutonomousDatabaseOperationsInsightsStatusEnum) error {
	switch operationsInsightsStatus {
func (s *DatabaseAutonomousDatabaseResourceCrud) updateAutonomousDatabaseManagementStatus(autonomousDatabaseId string, autonomousDatabaseManagement oci_database.AutonomousDatabaseDatabaseManagementStatusEnum) error {
	switch autonomousDatabaseManagement {
func inactiveAutonomousDatabaseIfNeeded(d *schema.ResourceData, sync *DatabaseAutonomousDatabaseResourceCrud) error {
	if err := sync.StopAutonomousDatabase(oci_database.AutonomousDatabaseLifecycleStateStopped); err != nil {
func (s *DatabaseAutonomousDatabaseResourceCrud) StartAutonomousDatabase(state oci_database.AutonomousDatabaseLifecycleStateEnum) error {
	request := oci_database.StartAutonomousDatabaseRequest{}
func (s *DatabaseAutonomousDatabaseResourceCrud) StopAutonomousDatabase(state oci_database.AutonomousDatabaseLifecycleStateEnum) error {
	request := oci_database.StopAutonomousDatabaseRequest{}
func (s *DatabaseAutonomousDatabaseResourceCrud) ShrinkAutonomousDatabase(state oci_database.AutonomousDatabaseLifecycleStateEnum) error {
	request := oci_database.ShrinkAutonomousDatabaseRequest{}
func (s *DatabaseAutonomousDatabaseResourceCrud) updateOpenModeAndPermission(autonomousDatabaseId string, openMode oci_database.UpdateAutonomousDatabaseDetailsOpenModeEnum, permissionLevel oci_database.UpdateAutonomousDatabaseDetailsPermissionLevelEnum) error {
	updateRequest := oci_database.UpdateAutonomousDatabaseRequest{}
func (s *DatabaseAutonomousDatabaseResourceCrud) RotateAutonomousDatabaseEncryptionKey() error {
	request := oci_database.RotateAutonomousDatabaseEncryptionKeyRequest{}
func (s *DatabaseAutonomousDatabaseResourceCrud) ConfigureAutonomousDatabaseVaultKey(autonomousDatabaseId string, kmsKeyId string, vautlId string) error {
	request := oci_database.ConfigureAutonomousDatabaseVaultKeyRequest{}
func validateLocalAdgCreate(s *DatabaseAutonomousDatabaseResourceCrud) (bool, int) {
	localAdg := false
func (s *DatabaseAutonomousDatabaseResourceCrud) UpdateLocalAdg(adg bool, limit int) error {
	updateLocalAdgRequest := oci_database.UpdateAutonomousDatabaseRequest{}

=== ./internal/service/database/database_autonomous_container_databases_data_source.go ===
func DatabaseAutonomousContainerDatabasesDataSource() *schema.Resource {
	return &schema.Resource{
func readDatabaseAutonomousContainerDatabases(d *schema.ResourceData, m interface{}) error {
	sync := &DatabaseAutonomousContainerDatabasesDataSourceCrud{}
func (s *DatabaseAutonomousContainerDatabasesDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *DatabaseAutonomousContainerDatabasesDataSourceCrud) Get() error {
	request := oci_database.ListAutonomousContainerDatabasesRequest{}
func (s *DatabaseAutonomousContainerDatabasesDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/database/database_oneoff_patch_data_source.go ===
func DatabaseOneoffPatchDataSource() *schema.Resource {
	fieldMap := make(map[string]*schema.Schema)
func readSingularDatabaseOneoffPatch(d *schema.ResourceData, m interface{}) error {
	sync := &DatabaseOneoffPatchDataSourceCrud{}
func (s *DatabaseOneoffPatchDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *DatabaseOneoffPatchDataSourceCrud) Get() error {
	request := oci_database.GetOneoffPatchRequest{}
func (s *DatabaseOneoffPatchDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/database/database_db_systems_upgrade_history_entries_data_source.go ===
func DatabaseDbSystemsUpgradeHistoryEntriesDataSource() *schema.Resource {
	return &schema.Resource{
func readDatabaseDbSystemsUpgradeHistoryEntries(d *schema.ResourceData, m interface{}) error {
	sync := &DatabaseDbSystemsUpgradeHistoryEntriesDataSourceCrud{}
func (s *DatabaseDbSystemsUpgradeHistoryEntriesDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *DatabaseDbSystemsUpgradeHistoryEntriesDataSourceCrud) Get() error {
	request := oci_database.ListDbSystemUpgradeHistoryEntriesRequest{}
func (s *DatabaseDbSystemsUpgradeHistoryEntriesDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/database/database_database_upgrade_history_entry_data_source.go ===
func DatabaseDatabaseUpgradeHistoryEntryDataSource() *schema.Resource {
	return &schema.Resource{
func readSingularDatabaseDatabaseUpgradeHistoryEntry(d *schema.ResourceData, m interface{}) error {
	sync := &DatabaseDatabaseUpgradeHistoryEntryDataSourceCrud{}
func (s *DatabaseDatabaseUpgradeHistoryEntryDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *DatabaseDatabaseUpgradeHistoryEntryDataSourceCrud) Get() error {
	request := oci_database.GetDatabaseUpgradeHistoryEntryRequest{}
func (s *DatabaseDatabaseUpgradeHistoryEntryDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/database/database_autonomous_container_database_dataguard_association_resource.go ===
func DatabaseAutonomousContainerDatabaseDataguardAssociationResource() *schema.Resource {
	return &schema.Resource{
func createDatabaseAutonomousContainerDatabaseDataguardAssociation(d *schema.ResourceData, m interface{}) error {
	sync := &DatabaseAutonomousContainerDatabaseDataguardAssociationResourceCrud{}
func readDatabaseAutonomousContainerDatabaseDataguardAssociation(d *schema.ResourceData, m interface{}) error {
	sync := &DatabaseAutonomousContainerDatabaseDataguardAssociationResourceCrud{}
func updateDatabaseAutonomousContainerDatabaseDataguardAssociation(d *schema.ResourceData, m interface{}) error {
	sync := &DatabaseAutonomousContainerDatabaseDataguardAssociationResourceCrud{}
func deleteDatabaseAutonomousContainerDatabaseDataguardAssociation(d *schema.ResourceData, m interface{}) error {
	return nil
func (s *DatabaseAutonomousContainerDatabaseDataguardAssociationResourceCrud) ID() string {
	return *s.Res.Id
func (s *DatabaseAutonomousContainerDatabaseDataguardAssociationResourceCrud) CreatedPending() []string {
	return []string{
func (s *DatabaseAutonomousContainerDatabaseDataguardAssociationResourceCrud) CreatedTarget() []string {
	return []string{
func (s *DatabaseAutonomousContainerDatabaseDataguardAssociationResourceCrud) DeletedPending() []string {
	return []string{
func (s *DatabaseAutonomousContainerDatabaseDataguardAssociationResourceCrud) DeletedTarget() []string {
	return []string{
func (s *DatabaseAutonomousContainerDatabaseDataguardAssociationResourceCrud) Create() error {

func (s *DatabaseAutonomousContainerDatabaseDataguardAssociationResourceCrud) Get() error {
	request := oci_database.GetAutonomousContainerDatabaseDataguardAssociationRequest{}
func (s *DatabaseAutonomousContainerDatabaseDataguardAssociationResourceCrud) Update() error {
	request := oci_database.UpdateAutonomousContainerDatabaseDataguardAssociationRequest{}
func (s *DatabaseAutonomousContainerDatabaseDataguardAssociationResourceCrud) SetData() error {

func (s *DatabaseAutonomousContainerDatabaseDataguardAssociationResourceCrud) mapToBackupDestinationDetails(fieldKeyFormat string) (oci_database.BackupDestinationDetails, error) {
	result := oci_database.BackupDestinationDetails{}
func (s *DatabaseAutonomousContainerDatabaseDataguardAssociationResourceCrud) mapToPeerAutonomousContainerDatabaseBackupConfig(fieldKeyFormat string) (oci_database.PeerAutonomousContainerDatabaseBackupConfig, error) {
	result := oci_database.PeerAutonomousContainerDatabaseBackupConfig{}

=== ./internal/service/database/database_autonomous_database_backup_resource.go ===
func DatabaseAutonomousDatabaseBackupResource() *schema.Resource {
	return &schema.Resource{
func createDatabaseAutonomousDatabaseBackup(d *schema.ResourceData, m interface{}) error {
	sync := &DatabaseAutonomousDatabaseBackupResourceCrud{}
func readDatabaseAutonomousDatabaseBackup(d *schema.ResourceData, m interface{}) error {
	sync := &DatabaseAutonomousDatabaseBackupResourceCrud{}
func updateDatabaseAutonomousDatabaseBackup(d *schema.ResourceData, m interface{}) error {
	sync := &DatabaseAutonomousDatabaseBackupResourceCrud{}
func deleteDatabaseAutonomousDatabaseBackup(d *schema.ResourceData, m interface{}) error {
	sync := &DatabaseAutonomousDatabaseBackupResourceCrud{}
func (s *DatabaseAutonomousDatabaseBackupResourceCrud) ID() string {
	return *s.Res.Id
func (s *DatabaseAutonomousDatabaseBackupResourceCrud) CreatedPending() []string {
	return []string{
func (s *DatabaseAutonomousDatabaseBackupResourceCrud) CreatedTarget() []string {
	return []string{
func (s *DatabaseAutonomousDatabaseBackupResourceCrud) DeletedPending() []string {
	return []string{
func (s *DatabaseAutonomousDatabaseBackupResourceCrud) DeletedTarget() []string {
	return []string{
func (s *DatabaseAutonomousDatabaseBackupResourceCrud) Create() error {
	request := oci_database.CreateAutonomousDatabaseBackupRequest{}
func (s *DatabaseAutonomousDatabaseBackupResourceCrud) Get() error {
	request := oci_database.GetAutonomousDatabaseBackupRequest{}
func (s *DatabaseAutonomousDatabaseBackupResourceCrud) Update() error {
	request := oci_database.UpdateAutonomousDatabaseBackupRequest{}
func (s *DatabaseAutonomousDatabaseBackupResourceCrud) Delete() error {
	request := oci_database.DeleteAutonomousDatabaseBackupRequest{}
func (s *DatabaseAutonomousDatabaseBackupResourceCrud) SetData() error {
	if s.Res.AutonomousDatabaseId != nil {
func (s *DatabaseAutonomousDatabaseBackupResourceCrud) mapToAutonomousBackupDestinationDetails(fieldKeyFormat string) (oci_database.BackupDestinationDetails, error) {
	result := oci_database.BackupDestinationDetails{}

=== ./internal/service/database/database_db_system_compute_performances_data_source.go ===
func DatabaseDbSystemComputePerformancesDataSource() *schema.Resource {
	return &schema.Resource{
func readDatabaseDbSystemComputePerformances(d *schema.ResourceData, m interface{}) error {
	sync := &DatabaseDbSystemComputePerformancesDataSourceCrud{}
func (s *DatabaseDbSystemComputePerformancesDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *DatabaseDbSystemComputePerformancesDataSourceCrud) Get() error {
	request := oci_database.ListDbSystemComputePerformancesRequest{}
func (s *DatabaseDbSystemComputePerformancesDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/database/database_data_guard_association_resource.go ===
func DatabaseDataGuardAssociationResource() *schema.Resource {
	return &schema.Resource{
func createDatabaseDataGuardAssociation(d *schema.ResourceData, m interface{}) error {
	sync := &DatabaseDataGuardAssociationResourceCrud{}
func readDatabaseDataGuardAssociation(d *schema.ResourceData, m interface{}) error {
	sync := &DatabaseDataGuardAssociationResourceCrud{}
func updateDatabaseDataGuardAssociation(d *schema.ResourceData, m interface{}) error {
	sync := &DatabaseDataGuardAssociationResourceCrud{}
func deleteDatabaseDataGuardAssociation(d *schema.ResourceData, m interface{}) error {
	sync := &DatabaseDataGuardAssociationResourceCrud{}
func (s *DatabaseDataGuardAssociationResourceCrud) ID() string {
	return *s.Res.Id
func (s *DatabaseDataGuardAssociationResourceCrud) CreatedPending() []string {
	return []string{
func (s *DatabaseDataGuardAssociationResourceCrud) CreatedTarget() []string {
	if createAsyn, ok := s.D.GetOk("create_async"); ok {
func (s *DatabaseDataGuardAssociationResourceCrud) DeletedPending() []string {
	return []string{
func (s *DatabaseDataGuardAssociationResourceCrud) DeletedTarget() []string {
	return []string{
func (s *DatabaseDataGuardAssociationResourceCrud) Create() error {
	request := oci_database.CreateDataGuardAssociationRequest{}
func (s *DatabaseDataGuardAssociationResourceCrud) Get() error {
	request := oci_database.GetDataGuardAssociationRequest{}
func (s *DatabaseDataGuardAssociationResourceCrud) Update() error {
	request := oci_database.UpdateDataGuardAssociationRequest{}
func (s *DatabaseDataGuardAssociationResourceCrud) SetData() error {

func (s *DatabaseDataGuardAssociationResourceCrud) mapToDataCollectionOptions(fieldKeyFormat string) (oci_database.DataCollectionOptions, error) {
	result := oci_database.DataCollectionOptions{}
func (s *DatabaseDataGuardAssociationResourceCrud) populateTopLevelPolymorphicCreateDataGuardAssociationRequest(request *oci_database.CreateDataGuardAssociationRequest) error {
	//discriminator
func (s *DatabaseDataGuardAssociationResourceCrud) Delete() error {
	if deleteStandbyDbHomeOnDelete, ok := s.D.GetOkExists("delete_standby_db_home_on_delete"); ok {
func (s *DatabaseDataGuardAssociationResourceCrud) ExtraWaitPostCreateDelete() time.Duration {
	if httpreplay.ShouldRetryImmediately() {
func (s *DatabaseDataGuardAssociationResourceCrud) GetDbHomeIdFromDatabaseId(databaseId *string) (*string, error) {
	request := oci_database.GetDatabaseRequest{}
func (s *DatabaseDataGuardAssociationResourceCrud) GetDbSystemIdFromDatabaseId(databaseId *string) (*string, error) {
	dbHomeId, err := s.GetDbHomeIdFromDatabaseId(databaseId)
func (s *DatabaseDataGuardAssociationResourceCrud) GetDbSystemIdFromDbHomeId(dbHomeId *string) (*string, error) {
	request := oci_database.GetDbHomeRequest{}

=== ./internal/service/database/database_autonomous_database_peers_data_source.go ===
func DatabaseAutonomousDatabasePeersDataSource() *schema.Resource {
	return &schema.Resource{
func readDatabaseAutonomousDatabasePeers(d *schema.ResourceData, m interface{}) error {
	sync := &DatabaseAutonomousDatabasePeersDataSourceCrud{}
func (s *DatabaseAutonomousDatabasePeersDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *DatabaseAutonomousDatabasePeersDataSourceCrud) Get() error {
	request := oci_database.ListAutonomousDatabasePeersRequest{}
func (s *DatabaseAutonomousDatabasePeersDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/database/database_database_software_image_data_source.go ===
func DatabaseDatabaseSoftwareImageDataSource() *schema.Resource {
	fieldMap := make(map[string]*schema.Schema)
func readSingularDatabaseDatabaseSoftwareImage(d *schema.ResourceData, m interface{}) error {
	sync := &DatabaseDatabaseSoftwareImageDataSourceCrud{}
func (s *DatabaseDatabaseSoftwareImageDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *DatabaseDatabaseSoftwareImageDataSourceCrud) Get() error {
	request := oci_database.GetDatabaseSoftwareImageRequest{}
func (s *DatabaseDatabaseSoftwareImageDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/database/database_migration_resource.go ===
func DatabaseMigrationResource() *schema.Resource {
	return &schema.Resource{
func createDatabaseMigration(d *schema.ResourceData, m interface{}) error {
	sync := &DatabaseMigrationResourceCrud{}
func readDatabaseMigration(d *schema.ResourceData, m interface{}) error {
	return nil
func deleteDatabaseMigration(d *schema.ResourceData, m interface{}) error {
	return nil
func (s *DatabaseMigrationResourceCrud) ID() string {
	return *s.Res.DbSystemId
func (s *DatabaseMigrationResourceCrud) Create() error {
	request := oci_database.MigrateExadataDbSystemResourceModelRequest{}
func (s *DatabaseMigrationResourceCrud) SetData() error {
	additionalMigrations := []interface{}{}

=== ./internal/service/database/database_autonomous_exadata_infrastructure_resource.go ===
func DatabaseAutonomousExadataInfrastructureResource() *schema.Resource {
	return &schema.Resource{
func createDatabaseAutonomousExadataInfrastructure(d *schema.ResourceData, m interface{}) error {
	sync := &DatabaseAutonomousExadataInfrastructureResourceCrud{}
func readDatabaseAutonomousExadataInfrastructure(d *schema.ResourceData, m interface{}) error {
	sync := &DatabaseAutonomousExadataInfrastructureResourceCrud{}
func updateDatabaseAutonomousExadataInfrastructure(d *schema.ResourceData, m interface{}) error {
	sync := &DatabaseAutonomousExadataInfrastructureResourceCrud{}
func deleteDatabaseAutonomousExadataInfrastructure(d *schema.ResourceData, m interface{}) error {
	sync := &DatabaseAutonomousExadataInfrastructureResourceCrud{}
func (s *DatabaseAutonomousExadataInfrastructureResourceCrud) ID() string {
	return *s.Res.Id
func (s *DatabaseAutonomousExadataInfrastructureResourceCrud) CreatedPending() []string {
	return []string{
func (s *DatabaseAutonomousExadataInfrastructureResourceCrud) CreatedTarget() []string {

func (s *DatabaseAutonomousExadataInfrastructureResourceCrud) DeletedPending() []string {
	return []string{
func (s *DatabaseAutonomousExadataInfrastructureResourceCrud) DeletedTarget() []string {
	return []string{
func (s *DatabaseAutonomousExadataInfrastructureResourceCrud) UpdatedPending() []string {
	return []string{
func (s *DatabaseAutonomousExadataInfrastructureResourceCrud) UpdatedTarget() []string {
	return []string{
func (s *DatabaseAutonomousExadataInfrastructureResourceCrud) Create() error {
	request := oci_database.LaunchAutonomousExadataInfrastructureRequest{}
func (s *DatabaseAutonomousExadataInfrastructureResourceCrud) Get() error {
	request := oci_database.GetAutonomousExadataInfrastructureRequest{}
func (s *DatabaseAutonomousExadataInfrastructureResourceCrud) Update() error {
	if compartment, ok := s.D.GetOkExists("compartment_id"); ok && s.D.HasChange("compartment_id") {
func (s *DatabaseAutonomousExadataInfrastructureResourceCrud) Delete() error {
	request := oci_database.TerminateAutonomousExadataInfrastructureRequest{}
func (s *DatabaseAutonomousExadataInfrastructureResourceCrud) SetData() error {
	if s.Res.AvailabilityDomain != nil {
func (s *DatabaseAutonomousExadataInfrastructureResourceCrud) mapToDayOfWeek(fieldKeyFormat string) (oci_database.DayOfWeek, error) {
	result := oci_database.DayOfWeek{}
func (s *DatabaseAutonomousExadataInfrastructureResourceCrud) mapToMaintenanceWindow(fieldKeyFormat string) (oci_database.MaintenanceWindow, error) {
	result := oci_database.MaintenanceWindow{}
func (s *DatabaseAutonomousExadataInfrastructureResourceCrud) mapToMonth(fieldKeyFormat string) (oci_database.Month, error) {
	result := oci_database.Month{}
func (s *DatabaseAutonomousExadataInfrastructureResourceCrud) updateCompartment(compartment interface{}) error {
	changeCompartmentRequest := oci_database.ChangeAutonomousExadataInfrastructureCompartmentRequest{}

=== ./internal/service/database/database_gi_version_minor_versions_data_source.go ===
func DatabaseGiVersionMinorVersionsDataSource() *schema.Resource {
	return &schema.Resource{
func readDatabaseGiVersionMinorVersions(d *schema.ResourceData, m interface{}) error {
	sync := &DatabaseGiVersionMinorVersionsDataSourceCrud{}
func (s *DatabaseGiVersionMinorVersionsDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *DatabaseGiVersionMinorVersionsDataSourceCrud) Get() error {
	request := oci_database.ListGiVersionMinorVersionsRequest{}
func (s *DatabaseGiVersionMinorVersionsDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/database/database_database_pdb_conversion_history_entries_data_source.go ===
func DatabaseDatabasePdbConversionHistoryEntriesDataSource() *schema.Resource {
	return &schema.Resource{
func readDatabaseDatabasePdbConversionHistoryEntries(d *schema.ResourceData, m interface{}) error {
	sync := &DatabaseDatabasePdbConversionHistoryEntriesDataSourceCrud{}
func (s *DatabaseDatabasePdbConversionHistoryEntriesDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *DatabaseDatabasePdbConversionHistoryEntriesDataSourceCrud) Get() error {
	request := oci_database.ListPdbConversionHistoryEntriesRequest{}
func (s *DatabaseDatabasePdbConversionHistoryEntriesDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/database/database_autonomous_exadata_infrastructure_data_source.go ===
func DatabaseAutonomousExadataInfrastructureDataSource() *schema.Resource {
	fieldMap := make(map[string]*schema.Schema)
func readSingularDatabaseAutonomousExadataInfrastructure(d *schema.ResourceData, m interface{}) error {
	sync := &DatabaseAutonomousExadataInfrastructureDataSourceCrud{}
func (s *DatabaseAutonomousExadataInfrastructureDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *DatabaseAutonomousExadataInfrastructureDataSourceCrud) Get() error {
	request := oci_database.GetAutonomousExadataInfrastructureRequest{}
func (s *DatabaseAutonomousExadataInfrastructureDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/database/database_data_guard_association_data_source.go ===
func DatabaseDataGuardAssociationDataSource() *schema.Resource {
	fieldMap := make(map[string]*schema.Schema)
func readSingularDatabaseDataGuardAssociation(d *schema.ResourceData, m interface{}) error {
	sync := &DatabaseDataGuardAssociationDataSourceCrud{}
func (s *DatabaseDataGuardAssociationDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *DatabaseDataGuardAssociationDataSourceCrud) Get() error {
	request := oci_database.GetDataGuardAssociationRequest{}
func (s *DatabaseDataGuardAssociationDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/database/database_external_container_database_resource.go ===
func DatabaseExternalContainerDatabaseResource() *schema.Resource {
	return &schema.Resource{
func createDatabaseExternalContainerDatabase(d *schema.ResourceData, m interface{}) error {
	sync := &DatabaseExternalContainerDatabaseResourceCrud{}
func readDatabaseExternalContainerDatabase(d *schema.ResourceData, m interface{}) error {
	sync := &DatabaseExternalContainerDatabaseResourceCrud{}
func updateDatabaseExternalContainerDatabase(d *schema.ResourceData, m interface{}) error {
	sync := &DatabaseExternalContainerDatabaseResourceCrud{}
func deleteDatabaseExternalContainerDatabase(d *schema.ResourceData, m interface{}) error {
	sync := &DatabaseExternalContainerDatabaseResourceCrud{}
func (s *DatabaseExternalContainerDatabaseResourceCrud) ID() string {
	return *s.Res.Id
func (s *DatabaseExternalContainerDatabaseResourceCrud) CreatedPending() []string {
	return []string{
func (s *DatabaseExternalContainerDatabaseResourceCrud) CreatedTarget() []string {
	return []string{
func (s *DatabaseExternalContainerDatabaseResourceCrud) DeletedPending() []string {
	return []string{
func (s *DatabaseExternalContainerDatabaseResourceCrud) DeletedTarget() []string {
	return []string{
func (s *DatabaseExternalContainerDatabaseResourceCrud) Create() error {
	request := oci_database.CreateExternalContainerDatabaseRequest{}
func (s *DatabaseExternalContainerDatabaseResourceCrud) Get() error {
	request := oci_database.GetExternalContainerDatabaseRequest{}
func (s *DatabaseExternalContainerDatabaseResourceCrud) Update() error {
	if compartment, ok := s.D.GetOkExists("compartment_id"); ok && s.D.HasChange("compartment_id") {
func (s *DatabaseExternalContainerDatabaseResourceCrud) Delete() error {
	request := oci_database.DeleteExternalContainerDatabaseRequest{}
func (s *DatabaseExternalContainerDatabaseResourceCrud) SetData() error {
	if s.Res.CharacterSet != nil {
func (s *DatabaseExternalContainerDatabaseResourceCrud) updateCompartment(compartment interface{}) error {
	changeCompartmentRequest := oci_database.ChangeExternalContainerDatabaseCompartmentRequest{}

=== ./internal/service/database/database_pluggable_database_resource.go ===
func DatabasePluggableDatabaseResource() *schema.Resource {
	return &schema.Resource{
func createDatabasePluggableDatabase(d *schema.ResourceData, m interface{}) error {
	sync := &DatabasePluggableDatabaseResourceCrud{}
func readDatabasePluggableDatabase(d *schema.ResourceData, m interface{}) error {
	sync := &DatabasePluggableDatabaseResourceCrud{}
func updateDatabasePluggableDatabase(d *schema.ResourceData, m interface{}) error {
	sync := &DatabasePluggableDatabaseResourceCrud{}
func deleteDatabasePluggableDatabase(d *schema.ResourceData, m interface{}) error {
	sync := &DatabasePluggableDatabaseResourceCrud{}
func (s *DatabasePluggableDatabaseResourceCrud) ID() string {
	return *s.Res.Id
func (s *DatabasePluggableDatabaseResourceCrud) CreatedPending() []string {
	return []string{
func (s *DatabasePluggableDatabaseResourceCrud) CreatedTarget() []string {
	return []string{
func (s *DatabasePluggableDatabaseResourceCrud) DeletedPending() []string {
	return []string{
func (s *DatabasePluggableDatabaseResourceCrud) DeletedTarget() []string {
	return []string{
func (s *DatabasePluggableDatabaseResourceCrud) Create() error {
	request := oci_database.CreatePluggableDatabaseRequest{}
func (s *DatabasePluggableDatabaseResourceCrud) Get() error {
	request := oci_database.GetPluggableDatabaseRequest{}
func (s *DatabasePluggableDatabaseResourceCrud) Update() error {
	request := oci_database.UpdatePluggableDatabaseRequest{}
func (s *DatabasePluggableDatabaseResourceCrud) Delete() error {
	request := oci_database.DeletePluggableDatabaseRequest{}
func (s *DatabasePluggableDatabaseResourceCrud) SetData() error {
	if s.Res.CompartmentId != nil {
func (s *DatabasePluggableDatabaseResourceCrud) setPdbDbKeyVersion(databaseId string) error {
	setPdbDbKeyVersionRequest := oci_database.SetPdbKeyVersionRequest{}
func (s *DatabasePluggableDatabaseResourceCrud) ConvertToRegularPluggableDatabase() error {
	request := oci_database.ConvertToRegularPluggableDatabaseRequest{}
func (s *DatabasePluggableDatabaseResourceCrud) RefreshPluggableDatabase() error {
	request := oci_database.RefreshPluggableDatabaseRequest{}
func (s *DatabasePluggableDatabaseResourceCrud) RotatePluggableDatabaseEncryptionKey() error {
	request := oci_database.RotatePluggableDatabaseEncryptionKeyRequest{}
func (s *DatabasePluggableDatabaseResourceCrud) mapToCreatePluggableDatabaseCreationTypeDetails(fieldKeyFormat string) (oci_database.CreatePluggableDatabaseCreationTypeDetails, error) {
	var baseObject oci_database.CreatePluggableDatabaseCreationTypeDetails
func (s *DatabasePluggableDatabaseResourceCrud) mapToCreatePluggableDatabaseRefreshableCloneDetails(fieldKeyFormat string) (oci_database.CreatePluggableDatabaseRefreshableCloneDetails, error) {
	result := oci_database.CreatePluggableDatabaseRefreshableCloneDetails{}

=== ./internal/service/database/database_autonomous_container_patches_data_source.go ===
func DatabaseAutonomousContainerPatchesDataSource() *schema.Resource {
	return &schema.Resource{
func readDatabaseAutonomousContainerPatches(d *schema.ResourceData, m interface{}) error {
	sync := &DatabaseAutonomousContainerPatchesDataSourceCrud{}
func (s *DatabaseAutonomousContainerPatchesDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *DatabaseAutonomousContainerPatchesDataSourceCrud) Get() error {
	request := oci_database.ListContainerDatabasePatchesRequest{}
func (s *DatabaseAutonomousContainerPatchesDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/database/database_exadb_vm_cluster_resource.go ===
func DatabaseExadbVmClusterResource() *schema.Resource {
	return &schema.Resource{
func createDatabaseExadbVmCluster(d *schema.ResourceData, m interface{}) error {
	sync := &DatabaseExadbVmClusterResourceCrud{}
func readDatabaseExadbVmCluster(d *schema.ResourceData, m interface{}) error {
	sync := &DatabaseExadbVmClusterResourceCrud{}
func updateDatabaseExadbVmCluster(d *schema.ResourceData, m interface{}) error {
	sync := &DatabaseExadbVmClusterResourceCrud{}
func deleteDatabaseExadbVmCluster(d *schema.ResourceData, m interface{}) error {
	sync := &DatabaseExadbVmClusterResourceCrud{}
func (s *DatabaseExadbVmClusterResourceCrud) ID() string {
	return *s.Res.Id
func (s *DatabaseExadbVmClusterResourceCrud) CreatedPending() []string {
	return []string{
func (s *DatabaseExadbVmClusterResourceCrud) CreatedTarget() []string {
	return []string{
func (s *DatabaseExadbVmClusterResourceCrud) DeletedPending() []string {
	return []string{
func (s *DatabaseExadbVmClusterResourceCrud) DeletedTarget() []string {
	return []string{
func (s *DatabaseExadbVmClusterResourceCrud) UpdatePending() []string {
	return []string{
func (s *DatabaseExadbVmClusterResourceCrud) UpdateTarget() []string {
	return []string{
func (s *DatabaseExadbVmClusterResourceCrud) Create() error {
	request := oci_database.CreateExadbVmClusterRequest{}
func (s *DatabaseExadbVmClusterResourceCrud) Get() error {
	request := oci_database.GetExadbVmClusterRequest{}
func (s *DatabaseExadbVmClusterResourceCrud) Update() error {
	if compartment, ok := s.D.GetOkExists("compartment_id"); ok && s.D.HasChange("compartment_id") {
func (s *DatabaseExadbVmClusterResourceCrud) Delete() error {
	request := oci_database.DeleteExadbVmClusterRequest{}
func (s *DatabaseExadbVmClusterResourceCrud) SetData() error {
	if s.Res.AvailabilityDomain != nil {
func (s *DatabaseExadbVmClusterResourceCrud) mapToDataCollectionOptions(fieldKeyFormat string) (oci_database.DataCollectionOptions, error) {
	result := oci_database.DataCollectionOptions{}
func (s *DatabaseExadbVmClusterResourceCrud) updateCompartment(compartment interface{}) error {
	changeCompartmentRequest := oci_database.ChangeExadbVmClusterCompartmentRequest{}
func (s *DatabaseExadbVmClusterResourceCrud) setNodeConfigInCreateExaDbVmClusterRequest(request *oci_database.CreateExadbVmClusterRequest) error {

func (s *DatabaseExadbVmClusterResourceCrud) removeVirtualMachineFromExadbVmCluster(oldNodeResourceList []interface{}, newNodeResourceList []interface{}) error {
	if len(oldNodeResourceList) <= len(newNodeResourceList) {
func getNodeResourceKey() string {
	return "node_resource"
func buildNodeNameToNodeResourceMap(nodeResourceList []interface{}) (map[string]interface{}, error) {
	nodeNameToNodeResourceMap := make(map[string]interface{})
func getNodeIdFromNodeResource(nodeResource interface{}) string {

func getNodeResourceList(VmClusterId *string, CompartmentId *string, Client *oci_database.DatabaseClient) ([]interface{}, error) {
	request := oci_database.ListDbNodesRequest{}
func addLiveNodeToNodeResourceList(dbNodes []interface{}, response oci_database.ListDbNodesResponse) []interface{} {
	for _, item := range response.Items {
func removeEntryWithBlankNodeNameFromOldList(oldNodeResourceList []interface{}) []interface{} {
	resultList := []interface{}{}
func customValidationOnNodeResources(context context.Context, resourceDiff *schema.ResourceDiff, meta interface{}) error {
	oldNodeResourcesRaw, newNodeResourcesRaw := resourceDiff.GetChange(getNodeResourceKey())
func nodeResourceHashCodeForSets(v interface{}) int {
	var buf bytes.Buffer

=== ./internal/service/database/database_db_home_resource.go ===
func DatabaseDbHomeResource() *schema.Resource {
	return &schema.Resource{
func createDatabaseDbHome(d *schema.ResourceData, m interface{}) error {
	sync := &DatabaseDbHomeResourceCrud{}
func readDatabaseDbHome(d *schema.ResourceData, m interface{}) error {
	sync := &DatabaseDbHomeResourceCrud{}
func deleteDatabaseDbHome(d *schema.ResourceData, m interface{}) error {
	sync := &DatabaseDbHomeResourceCrud{}
func (s *DatabaseDbHomeResourceCrud) ID() string {
	return *s.Res.Id
func (s *DatabaseDbHomeResourceCrud) CreatedPending() []string {
	return []string{
func (s *DatabaseDbHomeResourceCrud) CreatedTarget() []string {
	return []string{
func (s *DatabaseDbHomeResourceCrud) DeletedPending() []string {
	return []string{
func (s *DatabaseDbHomeResourceCrud) DeletedTarget() []string {
	return []string{
func (s *DatabaseDbHomeResourceCrud) UpdatedPending() []string {
	return []string{
func (s *DatabaseDbHomeResourceCrud) UpdatedTarget() []string {
	return []string{
func (s *DatabaseDbHomeResourceCrud) Create() error {
	request := oci_database.CreateDbHomeRequest{}
func (s *DatabaseDbHomeResourceCrud) Get() error {
	request := oci_database.GetDbHomeRequest{}
func (s *DatabaseDbHomeResourceCrud) Update() error {
	updateDbHomeRequest := oci_database.UpdateDbHomeRequest{}
func (s *DatabaseDbHomeResourceCrud) setDbKeyVersion(databaseId *string) error {
	setDbKeyVersionRequest := oci_database.SetDbKeyVersionRequest{}
func (s *DatabaseDbHomeResourceCrud) getDatabaseId(fieldKeyFormat string) (string, error) {

func (s *DatabaseDbHomeResourceCrud) Delete() error {
	oldRaw, _ := s.D.GetChange("database")
func (s *DatabaseDbHomeResourceCrud) SetData() error {

func (s *DatabaseDbHomeResourceCrud) ChangeKeyStoreType() error {
	if _, ok := s.D.GetOkExists("key_store_id"); ok && s.D.HasChange("key_store_id") {
func (s *DatabaseDbHomeResourceCrud) mapToBackupDestinationDetails(fieldKeyFormat string) (oci_database.BackupDestinationDetails, error) {
	result := oci_database.BackupDestinationDetails{}
func (s *DatabaseDbHomeResourceCrud) populateCreateDatabaseRequest(request *oci_database.CreateDatabaseRequest) error {
	details := oci_database.CreateNewDatabaseDetails{}
func (s *DatabaseDbHomeResourceCrud) mapToCreateDatabaseDetails(fieldKeyFormat string) (oci_database.CreateDatabaseDetails, error) {
	result := oci_database.CreateDatabaseDetails{}
func (s *DatabaseDbHomeResourceCrud) mapToCreateDatabaseFromAnotherDatabaseDetails(fieldKeyFormat string) (oci_database.CreateDatabaseFromAnotherDatabaseDetails, error) {
	result := oci_database.CreateDatabaseFromAnotherDatabaseDetails{}
func (s *DatabaseDbHomeResourceCrud) mapToCreateDatabaseFromBackupDetails(fieldKeyFormat string) (oci_database.CreateDatabaseFromBackupDetails, error) {
	result := oci_database.CreateDatabaseFromBackupDetails{}
func (s *DatabaseDbHomeResourceCrud) mapToDbBackupConfig(fieldKeyFormat string) (oci_database.DbBackupConfig, error) {
	result := oci_database.DbBackupConfig{}
func (s *DatabaseDbHomeResourceCrud) populateTopLevelPolymorphicCreateDbHomeRequest(request *oci_database.CreateDbHomeRequest) error {
	//discriminator
func updateDatabaseDbHome(d *schema.ResourceData, m interface{}) error {
	sync := &DatabaseDbHomeResourceCrud{}
func (s *DatabaseDbHomeResourceCrud) deleteNestedDB() error {

func (s *DatabaseDbHomeResourceCrud) getDatabaseInfo() error {
	listDatabasesRequest := oci_database.ListDatabasesRequest{}
func (s *DatabaseDbHomeResourceCrud) DatabaseToMap(obj *oci_database.Database) map[string]interface{} {
	result := map[string]interface{}{}
func (s *DatabaseDbHomeResourceCrud) mapToUpdateDatabaseDetails(fieldKeyFormat string) (oci_database.UpdateDatabaseDetails, error) {
	result := oci_database.UpdateDatabaseDetails{}
func (s *DatabaseDbHomeResourceCrud) CreateDatabaseFromBackupDetailsToMap(obj *oci_database.CreateDatabaseFromBackupDetails) map[string]interface{} {
	result := map[string]interface{}{}
func (s *DatabaseDbHomeResourceCrud) mapToUpdateDbBackupConfig(fieldKeyFormat string) (oci_database.DbBackupConfig, error) {
	result := oci_database.DbBackupConfig{}
func dbHomeNestedDbSuppressfunc(k string, old, new string, d *schema.ResourceData) bool {
	oldRaw, newRaw := d.GetChange("database")
func disableAutoBackupSuppressfunc(k string, old, new string, d *schema.ResourceData) bool {
	// if autoBackupEnabled is false then ignore any field in the state and config backupWindow

=== ./internal/service/database/database_cloud_autonomous_vm_cluster_acd_resource_usages_data_source.go ===
func DatabaseCloudAutonomousVmClusterAcdResourceUsagesDataSource() *schema.Resource {
	return &schema.Resource{
func readDatabaseCloudAutonomousVmClusterAcdResourceUsages(d *schema.ResourceData, m interface{}) error {
	sync := &DatabaseCloudAutonomousVmClusterAcdResourceUsagesDataSourceCrud{}
func (s *DatabaseCloudAutonomousVmClusterAcdResourceUsagesDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *DatabaseCloudAutonomousVmClusterAcdResourceUsagesDataSourceCrud) Get() error {
	request := oci_database.ListCloudAutonomousVmClusterAcdResourceUsageRequest{}
func (s *DatabaseCloudAutonomousVmClusterAcdResourceUsagesDataSourceCrud) SetData() error {
	if s.Res == nil {
func AcdAvmResourceStatsMap(obj oci_database.AcdAvmResourceStats) map[string]interface{} {
	result := map[string]interface{}{}

=== ./internal/service/database/database_application_vip_resource.go ===
func DatabaseApplicationVipResource() *schema.Resource {
	return &schema.Resource{
func createDatabaseApplicationVip(d *schema.ResourceData, m interface{}) error {
	sync := &DatabaseApplicationVipResourceCrud{}
func readDatabaseApplicationVip(d *schema.ResourceData, m interface{}) error {
	sync := &DatabaseApplicationVipResourceCrud{}
func deleteDatabaseApplicationVip(d *schema.ResourceData, m interface{}) error {
	sync := &DatabaseApplicationVipResourceCrud{}
func (s *DatabaseApplicationVipResourceCrud) ID() string {
	return *s.Res.Id
func (s *DatabaseApplicationVipResourceCrud) CreatedPending() []string {
	return []string{
func (s *DatabaseApplicationVipResourceCrud) CreatedTarget() []string {
	return []string{
func (s *DatabaseApplicationVipResourceCrud) DeletedPending() []string {
	return []string{
func (s *DatabaseApplicationVipResourceCrud) DeletedTarget() []string {
	return []string{
func (s *DatabaseApplicationVipResourceCrud) Create() error {
	request := oci_database.CreateApplicationVipRequest{}
func (s *DatabaseApplicationVipResourceCrud) Get() error {
	request := oci_database.GetApplicationVipRequest{}
func (s *DatabaseApplicationVipResourceCrud) Delete() error {
	request := oci_database.DeleteApplicationVipRequest{}
func (s *DatabaseApplicationVipResourceCrud) SetData() error {
	if s.Res.CloudVmClusterId != nil {

=== ./internal/service/database/database_autonomous_container_database_dataguard_association_data_source.go ===
func DatabaseAutonomousContainerDatabaseDataguardAssociationDataSource() *schema.Resource {
	fieldMap := make(map[string]*schema.Schema)
func readSingularDatabaseAutonomousContainerDatabaseDataguardAssociation(d *schema.ResourceData, m interface{}) error {
	sync := &DatabaseAutonomousContainerDatabaseDataguardAssociationDataSourceCrud{}
func (s *DatabaseAutonomousContainerDatabaseDataguardAssociationDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *DatabaseAutonomousContainerDatabaseDataguardAssociationDataSourceCrud) Get() error {
	request := oci_database.GetAutonomousContainerDatabaseDataguardAssociationRequest{}
func (s *DatabaseAutonomousContainerDatabaseDataguardAssociationDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/database/database_cloud_exadata_infrastructure_resource.go ===
func DatabaseCloudExadataInfrastructureResource() *schema.Resource {
	return &schema.Resource{
func createDatabaseCloudExadataInfrastructure(d *schema.ResourceData, m interface{}) error {
	sync := &DatabaseCloudExadataInfrastructureResourceCrud{}
func readDatabaseCloudExadataInfrastructure(d *schema.ResourceData, m interface{}) error {
	sync := &DatabaseCloudExadataInfrastructureResourceCrud{}
func updateDatabaseCloudExadataInfrastructure(d *schema.ResourceData, m interface{}) error {
	sync := &DatabaseCloudExadataInfrastructureResourceCrud{}
func deleteDatabaseCloudExadataInfrastructure(d *schema.ResourceData, m interface{}) error {
	sync := &DatabaseCloudExadataInfrastructureResourceCrud{}
func (s *DatabaseCloudExadataInfrastructureResourceCrud) ID() string {
	return *s.Res.Id
func (s *DatabaseCloudExadataInfrastructureResourceCrud) CreatedPending() []string {
	return []string{
func (s *DatabaseCloudExadataInfrastructureResourceCrud) CreatedTarget() []string {
	return []string{
func (s *DatabaseCloudExadataInfrastructureResourceCrud) DeletedPending() []string {
	return []string{
func (s *DatabaseCloudExadataInfrastructureResourceCrud) DeletedTarget() []string {
	return []string{
func (s *DatabaseCloudExadataInfrastructureResourceCrud) UpdatedPending() []string {
	return []string{
func (s *DatabaseCloudExadataInfrastructureResourceCrud) UpdatedTarget() []string {
	return []string{
func (s *DatabaseCloudExadataInfrastructureResourceCrud) Create() error {
	request := oci_database.CreateCloudExadataInfrastructureRequest{}
func (s *DatabaseCloudExadataInfrastructureResourceCrud) Get() error {
	request := oci_database.GetCloudExadataInfrastructureRequest{}
func (s *DatabaseCloudExadataInfrastructureResourceCrud) Update() error {
	if compartment, ok := s.D.GetOkExists("compartment_id"); ok && s.D.HasChange("compartment_id") {
func (s *DatabaseCloudExadataInfrastructureResourceCrud) Delete() error {
	request := oci_database.DeleteCloudExadataInfrastructureRequest{}
func (s *DatabaseCloudExadataInfrastructureResourceCrud) SetData() error {
	if s.Res.ActivatedStorageCount != nil {
func (s *DatabaseCloudExadataInfrastructureResourceCrud) mapToCustomerContact(fieldKeyFormat string) (oci_database.CustomerContact, error) {
	result := oci_database.CustomerContact{}
func (s *DatabaseCloudExadataInfrastructureResourceCrud) mapToDayOfWeek(fieldKeyFormat string) (oci_database.DayOfWeek, error) {
	result := oci_database.DayOfWeek{}
func (s *DatabaseCloudExadataInfrastructureResourceCrud) mapToMaintenanceWindow(fieldKeyFormat string) (oci_database.MaintenanceWindow, error) {
	result := oci_database.MaintenanceWindow{}
func (s *DatabaseCloudExadataInfrastructureResourceCrud) mapToMonth(fieldKeyFormat string) (oci_database.Month, error) {
	result := oci_database.Month{}
func (s *DatabaseCloudExadataInfrastructureResourceCrud) updateCompartment(compartment interface{}) error {
	changeCompartmentRequest := oci_database.ChangeCloudExadataInfrastructureCompartmentRequest{}
func (s *DatabaseCloudExadataInfrastructureResourceCrud) addStorageMVM() error {
	addStorageRequest := oci_database.AddStorageCapacityCloudExadataInfrastructureRequest{}

=== ./internal/service/database/database_key_store_data_source.go ===
func DatabaseKeyStoreDataSource() *schema.Resource {
	fieldMap := make(map[string]*schema.Schema)
func readSingularDatabaseKeyStore(d *schema.ResourceData, m interface{}) error {
	sync := &DatabaseKeyStoreDataSourceCrud{}
func (s *DatabaseKeyStoreDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *DatabaseKeyStoreDataSourceCrud) Get() error {
	request := oci_database.GetKeyStoreRequest{}
func (s *DatabaseKeyStoreDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/database/database_maintenance_run_resource.go ===
func DatabaseMaintenanceRunResource() *schema.Resource {
	return &schema.Resource{
func createDatabaseMaintenanceRun(d *schema.ResourceData, m interface{}) error {
	sync := &DatabaseMaintenanceRunResourceCrud{}
func readDatabaseMaintenanceRun(d *schema.ResourceData, m interface{}) error {
	sync := &DatabaseMaintenanceRunResourceCrud{}
func updateDatabaseMaintenanceRun(d *schema.ResourceData, m interface{}) error {
	sync := &DatabaseMaintenanceRunResourceCrud{}
func deleteDatabaseMaintenanceRun(d *schema.ResourceData, m interface{}) error {
	return nil
func (s *DatabaseMaintenanceRunResourceCrud) ID() string {
	return *s.Res.Id
func (s *DatabaseMaintenanceRunResourceCrud) CreatedPending() []string {
	return []string{
func (s *DatabaseMaintenanceRunResourceCrud) CreatedTarget() []string {
	return []string{
func (s *DatabaseMaintenanceRunResourceCrud) DeletedPending() []string {
	return []string{
func (s *DatabaseMaintenanceRunResourceCrud) DeletedTarget() []string {
	return []string{
func (s *DatabaseMaintenanceRunResourceCrud) Create() error {
	request := oci_database.CreateMaintenanceRunRequest{}
func (s *DatabaseMaintenanceRunResourceCrud) Get() error {
	request := oci_database.GetMaintenanceRunRequest{}
func (s *DatabaseMaintenanceRunResourceCrud) Update() error {

func (s *DatabaseMaintenanceRunResourceCrud) SetData() error {
	if s.Res.CompartmentId != nil {

=== ./internal/service/database/database_external_non_container_database_operations_insights_management_resource.go ===
func DatabaseExternalNonContainerDatabaseOperationsInsightsManagementResource() *schema.Resource {
	return &schema.Resource{
func createDatabaseExternalNonContainerDatabaseOperationsInsightsManagement(d *schema.ResourceData, m interface{}) error {
	sync := &DatabaseExternalNonContainerDatabaseOperationsInsightsManagementResourceCrud{}
func updateDatabaseExternalNonContainerDatabaseOperationsInsightsManagement(d *schema.ResourceData, m interface{}) error {
	sync := &DatabaseExternalNonContainerDatabaseOperationsInsightsManagementResourceCrud{}
func readDatabaseExternalNonContainerDatabaseOperationsInsightsManagement(d *schema.ResourceData, m interface{}) error {
	return nil
func deleteDatabaseExternalNonContainerDatabaseOperationsInsightsManagement(d *schema.ResourceData, m interface{}) error {
	sync := &DatabaseExternalNonContainerDatabaseOperationsInsightsManagementResourceCrud{}
func (s *DatabaseExternalNonContainerDatabaseOperationsInsightsManagementResourceCrud) ID() string {
	return tfresource.GenerateDataSourceHashID("DatabaseExternalNonContainerDatabaseOperationsInsightsManagementResource-", DatabaseExternalNonContainerDatabaseOperationsInsightsManagementResource(), s.D)
func (s *DatabaseExternalNonContainerDatabaseOperationsInsightsManagementResourceCrud) Create() error {
	var operation bool
func (s *DatabaseExternalNonContainerDatabaseOperationsInsightsManagementResourceCrud) Update() error {

func (s *DatabaseExternalNonContainerDatabaseOperationsInsightsManagementResourceCrud) Delete() error {
	var operation bool
func (s *DatabaseExternalNonContainerDatabaseOperationsInsightsManagementResourceCrud) SetData() error {
	return nil

=== ./internal/service/database/database_autonomous_vm_cluster_resource.go ===
func DatabaseAutonomousVmClusterResource() *schema.Resource {
	return &schema.Resource{
func createDatabaseAutonomousVmCluster(d *schema.ResourceData, m interface{}) error {
	sync := &DatabaseAutonomousVmClusterResourceCrud{}
func readDatabaseAutonomousVmCluster(d *schema.ResourceData, m interface{}) error {
	sync := &DatabaseAutonomousVmClusterResourceCrud{}
func updateDatabaseAutonomousVmCluster(d *schema.ResourceData, m interface{}) error {
	sync := &DatabaseAutonomousVmClusterResourceCrud{}
func deleteDatabaseAutonomousVmCluster(d *schema.ResourceData, m interface{}) error {
	sync := &DatabaseAutonomousVmClusterResourceCrud{}
func (s *DatabaseAutonomousVmClusterResourceCrud) ID() string {
	return *s.Res.Id
func (s *DatabaseAutonomousVmClusterResourceCrud) CreatedPending() []string {
	return []string{
func (s *DatabaseAutonomousVmClusterResourceCrud) CreatedTarget() []string {
	return []string{
func (s *DatabaseAutonomousVmClusterResourceCrud) DeletedPending() []string {
	return []string{
func (s *DatabaseAutonomousVmClusterResourceCrud) DeletedTarget() []string {
	return []string{
func (s *DatabaseAutonomousVmClusterResourceCrud) UpdatedPending() []string {
	return []string{
func (s *DatabaseAutonomousVmClusterResourceCrud) UpdatedTarget() []string {
	return []string{
func (s *DatabaseAutonomousVmClusterResourceCrud) Create() error {
	request := oci_database.CreateAutonomousVmClusterRequest{}
func (s *DatabaseAutonomousVmClusterResourceCrud) Get() error {
	request := oci_database.GetAutonomousVmClusterRequest{}
func (s *DatabaseAutonomousVmClusterResourceCrud) Update() error {
	if compartment, ok := s.D.GetOkExists("compartment_id"); ok && s.D.HasChange("compartment_id") {
func (s *DatabaseAutonomousVmClusterResourceCrud) Delete() error {
	request := oci_database.DeleteAutonomousVmClusterRequest{}
func (s *DatabaseAutonomousVmClusterResourceCrud) SetData() error {
	if s.Res.AutonomousDataStoragePercentage != nil {
func (s *DatabaseAutonomousVmClusterResourceCrud) mapToDayOfWeek(fieldKeyFormat string) (oci_database.DayOfWeek, error) {
	result := oci_database.DayOfWeek{}
func (s *DatabaseAutonomousVmClusterResourceCrud) mapToMaintenanceWindow(fieldKeyFormat string) (oci_database.MaintenanceWindow, error) {
	result := oci_database.MaintenanceWindow{}
func (s *DatabaseAutonomousVmClusterResourceCrud) mapToMonth(fieldKeyFormat string) (oci_database.Month, error) {
	result := oci_database.Month{}
func (s *DatabaseAutonomousVmClusterResourceCrud) updateCompartment(compartment interface{}) error {
	changeCompartmentRequest := oci_database.ChangeAutonomousVmClusterCompartmentRequest{}

=== ./internal/service/database/database_autonomous_database_regional_wallet_management_resource.go ===
func DatabaseAutonomousDatabaseRegionalWalletManagementResource() *schema.Resource {
	return &schema.Resource{
func createDatabaseAutonomousDatabaseRegionalWalletManagement(d *schema.ResourceData, m interface{}) error {
	sync := &DatabaseAutonomousDatabaseRegionalWalletManagementResourceCrud{}
func readDatabaseAutonomousDatabaseRegionalWalletManagement(d *schema.ResourceData, m interface{}) error {
	sync := &DatabaseAutonomousDatabaseRegionalWalletManagementResourceCrud{}
func updateDatabaseAutonomousDatabaseRegionalWalletManagement(d *schema.ResourceData, m interface{}) error {
	sync := &DatabaseAutonomousDatabaseRegionalWalletManagementResourceCrud{}
func deleteDatabaseAutonomousDatabaseRegionalWalletManagement(d *schema.ResourceData, m interface{}) error {
	return nil
func (s *DatabaseAutonomousDatabaseRegionalWalletManagementResourceCrud) ID() string {
	return "/autonomousDatabaseRegionalWallet/" + s.Configuration["region"]
func (s *DatabaseAutonomousDatabaseRegionalWalletManagementResourceCrud) CreatedPending() []string {
	return []string{}
func (s *DatabaseAutonomousDatabaseRegionalWalletManagementResourceCrud) CreatedTarget() []string {
	return []string{
func (s *DatabaseAutonomousDatabaseRegionalWalletManagementResourceCrud) DeletedPending() []string {
	return []string{}
func (s *DatabaseAutonomousDatabaseRegionalWalletManagementResourceCrud) DeletedTarget() []string {
	return []string{}
func (s *DatabaseAutonomousDatabaseRegionalWalletManagementResourceCrud) UpdatedPending() []string {
	return []string{
func (s *DatabaseAutonomousDatabaseRegionalWalletManagementResourceCrud) UpdatedTarget() []string {
	return []string{
func (s *DatabaseAutonomousDatabaseRegionalWalletManagementResourceCrud) Create() error {
	if shouldRotate, ok := s.D.GetOkExists("should_rotate"); ok {
func (s *DatabaseAutonomousDatabaseRegionalWalletManagementResourceCrud) Get() error {
	request := oci_database.GetAutonomousDatabaseRegionalWalletRequest{}
func (s *DatabaseAutonomousDatabaseRegionalWalletManagementResourceCrud) Update() error {
	request := oci_database.UpdateAutonomousDatabaseRegionalWalletRequest{}
func (s *DatabaseAutonomousDatabaseRegionalWalletManagementResourceCrud) SetData() error {


=== ./internal/service/database/database_database_software_image_resource.go ===
func DatabaseDatabaseSoftwareImageResource() *schema.Resource {
	return &schema.Resource{
func createDatabaseDatabaseSoftwareImage(d *schema.ResourceData, m interface{}) error {
	sync := &DatabaseDatabaseSoftwareImageResourceCrud{}
func readDatabaseDatabaseSoftwareImage(d *schema.ResourceData, m interface{}) error {
	sync := &DatabaseDatabaseSoftwareImageResourceCrud{}
func updateDatabaseDatabaseSoftwareImage(d *schema.ResourceData, m interface{}) error {
	sync := &DatabaseDatabaseSoftwareImageResourceCrud{}
func deleteDatabaseDatabaseSoftwareImage(d *schema.ResourceData, m interface{}) error {
	sync := &DatabaseDatabaseSoftwareImageResourceCrud{}
func (s *DatabaseDatabaseSoftwareImageResourceCrud) ID() string {
	return *s.Res.Id
func (s *DatabaseDatabaseSoftwareImageResourceCrud) CreatedPending() []string {
	return []string{
func (s *DatabaseDatabaseSoftwareImageResourceCrud) CreatedTarget() []string {
	return []string{
func (s *DatabaseDatabaseSoftwareImageResourceCrud) DeletedPending() []string {
	return []string{
func (s *DatabaseDatabaseSoftwareImageResourceCrud) DeletedTarget() []string {
	return []string{
func (s *DatabaseDatabaseSoftwareImageResourceCrud) Create() error {
	request := oci_database.CreateDatabaseSoftwareImageRequest{}
func (s *DatabaseDatabaseSoftwareImageResourceCrud) Get() error {
	request := oci_database.GetDatabaseSoftwareImageRequest{}
func (s *DatabaseDatabaseSoftwareImageResourceCrud) Update() error {
	if compartment, ok := s.D.GetOkExists("compartment_id"); ok && s.D.HasChange("compartment_id") {
func (s *DatabaseDatabaseSoftwareImageResourceCrud) Delete() error {
	request := oci_database.DeleteDatabaseSoftwareImageRequest{}
func (s *DatabaseDatabaseSoftwareImageResourceCrud) SetData() error {
	if s.Res.CompartmentId != nil {
func (s *DatabaseDatabaseSoftwareImageResourceCrud) updateCompartment(compartment interface{}) error {
	changeCompartmentRequest := oci_database.ChangeDatabaseSoftwareImageCompartmentRequest{}

=== ./internal/service/database/database_key_stores_data_source.go ===
func DatabaseKeyStoresDataSource() *schema.Resource {
	return &schema.Resource{
func readDatabaseKeyStores(d *schema.ResourceData, m interface{}) error {
	sync := &DatabaseKeyStoresDataSourceCrud{}
func (s *DatabaseKeyStoresDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *DatabaseKeyStoresDataSourceCrud) Get() error {
	request := oci_database.ListKeyStoresRequest{}
func (s *DatabaseKeyStoresDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/database/database_cloud_vm_cluster_iorm_config_data_source.go ===
func DatabaseCloudVmClusterIormConfigDataSource() *schema.Resource {
	fieldMap := make(map[string]*schema.Schema)
func readSingularDatabaseCloudVmClusterIormConfig(d *schema.ResourceData, m interface{}) error {
	sync := &DatabaseCloudVmClusterConfigDataSourceCrud{}
func (s *DatabaseCloudVmClusterConfigDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *DatabaseCloudVmClusterConfigDataSourceCrud) Get() error {
	request := oci_database.GetCloudVmClusterIormConfigRequest{}
func (s *DatabaseCloudVmClusterConfigDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/database/database_infrastructure_target_version_data_source.go ===
func DatabaseInfrastructureTargetVersionDataSource() *schema.Resource {
	return &schema.Resource{
func readSingularDatabaseInfrastructureTargetVersion(d *schema.ResourceData, m interface{}) error {
	sync := &DatabaseInfrastructureTargetVersionDataSourceCrud{}
func (s *DatabaseInfrastructureTargetVersionDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *DatabaseInfrastructureTargetVersionDataSourceCrud) Get() error {
	request := oci_database.GetInfrastructureTargetVersionsRequest{}
func (s *DatabaseInfrastructureTargetVersionDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/database/database_pluggable_databases_local_clone_resource.go ===
func DatabasePluggableDatabasesLocalCloneResource() *schema.Resource {
	return &schema.Resource{
func createDatabasePluggableDatabasesLocalClone(d *schema.ResourceData, m interface{}) error {
	sync := &DatabasePluggableDatabasesLocalCloneResourceCrud{}
func readDatabasePluggableDatabasesLocalClone(d *schema.ResourceData, m interface{}) error {
	return nil
func deleteDatabasePluggableDatabasesLocalClone(d *schema.ResourceData, m interface{}) error {
	return nil
func (s *DatabasePluggableDatabasesLocalCloneResourceCrud) ID() string {
	return *s.Res.Id
func (s *DatabasePluggableDatabasesLocalCloneResourceCrud) CreatedPending() []string {
	return []string{
func (s *DatabasePluggableDatabasesLocalCloneResourceCrud) CreatedTarget() []string {
	return []string{
func (s *DatabasePluggableDatabasesLocalCloneResourceCrud) DeletedPending() []string {
	return []string{
func (s *DatabasePluggableDatabasesLocalCloneResourceCrud) DeletedTarget() []string {
	return []string{
func (s *DatabasePluggableDatabasesLocalCloneResourceCrud) Create() error {
	request := oci_database.LocalClonePluggableDatabaseRequest{}
func (s *DatabasePluggableDatabasesLocalCloneResourceCrud) SetData() error {
	if s.Res.CompartmentId != nil {

=== ./internal/service/database/database_autonomous_exadata_infrastructure_shapes_data_source.go ===
func DatabaseAutonomousExadataInfrastructureShapesDataSource() *schema.Resource {
	return &schema.Resource{
func readDatabaseAutonomousExadataInfrastructureShapes(d *schema.ResourceData, m interface{}) error {
	sync := &DatabaseAutonomousExadataInfrastructureShapesDataSourceCrud{}
func (s *DatabaseAutonomousExadataInfrastructureShapesDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *DatabaseAutonomousExadataInfrastructureShapesDataSourceCrud) Get() error {
	request := oci_database.ListAutonomousExadataInfrastructureShapesRequest{}
func (s *DatabaseAutonomousExadataInfrastructureShapesDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/database/database_db_home_patch_history_entries_data_source.go ===
func DatabaseDbHomePatchHistoryEntriesDataSource() *schema.Resource {
	return &schema.Resource{
func readDatabaseDbHomePatchHistoryEntries(d *schema.ResourceData, m interface{}) error {
	sync := &DatabaseDbHomePatchHistoryEntriesDataSourceCrud{}
func (s *DatabaseDbHomePatchHistoryEntriesDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *DatabaseDbHomePatchHistoryEntriesDataSourceCrud) Get() error {
	request := oci_database.ListDbHomePatchHistoryEntriesRequest{}
func (s *DatabaseDbHomePatchHistoryEntriesDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/database/database_backup_cancel_management_resource.go ===
func DatabaseBackupCancelManagementResource() *schema.Resource {
	return &schema.Resource{
func createDatabaseBackupCancelManagement(d *schema.ResourceData, m interface{}) error {
	sync := &DatabaseBackupCancelManagementResourceCrud{}
func readDatabaseBackupCancelManagement(d *schema.ResourceData, m interface{}) error {
	return nil
func deleteDatabaseBackupCancelManagement(d *schema.ResourceData, m interface{}) error {
	return nil
func (s *DatabaseBackupCancelManagementResourceCrud) ID() string {
	return tfresource.GenerateDataSourceHashID("DatabaseBackupCancelManagementResource-", DatabaseBackupCancelManagementResource(), s.D)
func (s *DatabaseBackupCancelManagementResourceCrud) Create() error {
	request := oci_database.CancelBackupRequest{}
func (s *DatabaseBackupCancelManagementResourceCrud) SetData() error {
	return nil
func (s *DatabaseBackupCancelManagementResourceCrud) getBackupInfo(backupId string) error {
	request := oci_database.GetBackupRequest{}
func (s *DatabaseBackupCancelManagementResourceCrud) IsAutomaticBackup(backupType string) bool {
	// Only allowing cancelation of automatic backups

=== ./internal/service/database/database_external_database_connector_resource.go ===
func DatabaseExternalDatabaseConnectorResource() *schema.Resource {
	return &schema.Resource{
func createDatabaseExternalDatabaseConnector(d *schema.ResourceData, m interface{}) error {
	sync := &DatabaseExternalDatabaseConnectorResourceCrud{}
func readDatabaseExternalDatabaseConnector(d *schema.ResourceData, m interface{}) error {
	sync := &DatabaseExternalDatabaseConnectorResourceCrud{}
func updateDatabaseExternalDatabaseConnector(d *schema.ResourceData, m interface{}) error {
	sync := &DatabaseExternalDatabaseConnectorResourceCrud{}
func deleteDatabaseExternalDatabaseConnector(d *schema.ResourceData, m interface{}) error {
	sync := &DatabaseExternalDatabaseConnectorResourceCrud{}
func (s *DatabaseExternalDatabaseConnectorResourceCrud) ID() string {
	externalDatabaseConnector := *s.Res
func (s *DatabaseExternalDatabaseConnectorResourceCrud) CreatedPending() []string {
	return []string{
func (s *DatabaseExternalDatabaseConnectorResourceCrud) CreatedTarget() []string {
	return []string{
func (s *DatabaseExternalDatabaseConnectorResourceCrud) DeletedPending() []string {
	return []string{
func (s *DatabaseExternalDatabaseConnectorResourceCrud) DeletedTarget() []string {
	return []string{
func (s *DatabaseExternalDatabaseConnectorResourceCrud) Create() error {
	request := oci_database.CreateExternalDatabaseConnectorRequest{}
func (s *DatabaseExternalDatabaseConnectorResourceCrud) Get() error {
	request := oci_database.GetExternalDatabaseConnectorRequest{}
func (s *DatabaseExternalDatabaseConnectorResourceCrud) Update() error {
	request := oci_database.UpdateExternalDatabaseConnectorRequest{}
func (s *DatabaseExternalDatabaseConnectorResourceCrud) Delete() error {
	request := oci_database.DeleteExternalDatabaseConnectorRequest{}
func (s *DatabaseExternalDatabaseConnectorResourceCrud) SetData() error {
	switch v := (*s.Res).(type) {
func (s *DatabaseExternalDatabaseConnectorResourceCrud) mapToDatabaseConnectionCredentials(fieldKeyFormat string) (oci_database.DatabaseConnectionCredentials, error) {
	var baseObject oci_database.DatabaseConnectionCredentials
func (s *DatabaseExternalDatabaseConnectorResourceCrud) DatabaseConnectionCredentialsToMap(obj *oci_database.DatabaseConnectionCredentials) map[string]interface{} {
	result := map[string]interface{}{}
func (s *DatabaseExternalDatabaseConnectorResourceCrud) mapToDatabaseConnectionString(fieldKeyFormat string) (oci_database.DatabaseConnectionString, error) {
	result := oci_database.DatabaseConnectionString{}
func (s *DatabaseExternalDatabaseConnectorResourceCrud) populateTopLevelPolymorphicCreateExternalDatabaseConnectorRequest(request *oci_database.CreateExternalDatabaseConnectorRequest) error {
	//discriminator
func (s *DatabaseExternalDatabaseConnectorResourceCrud) populateTopLevelPolymorphicUpdateExternalDatabaseConnectorRequest(request *oci_database.UpdateExternalDatabaseConnectorRequest) error {
	//discriminator

=== ./internal/service/database/database_backup_resource.go ===
func DatabaseBackupResource() *schema.Resource {
	return &schema.Resource{
func createDatabaseBackup(d *schema.ResourceData, m interface{}) error {
	sync := &DatabaseBackupResourceCrud{}
func readDatabaseBackup(d *schema.ResourceData, m interface{}) error {
	sync := &DatabaseBackupResourceCrud{}
func deleteDatabaseBackup(d *schema.ResourceData, m interface{}) error {
	sync := &DatabaseBackupResourceCrud{}
func (s *DatabaseBackupResourceCrud) ID() string {
	return *s.Res.Id
func (s *DatabaseBackupResourceCrud) CreatedPending() []string {
	return []string{
func (s *DatabaseBackupResourceCrud) CreatedTarget() []string {
	return []string{
func (s *DatabaseBackupResourceCrud) DeletedPending() []string {
	return []string{
func (s *DatabaseBackupResourceCrud) DeletedTarget() []string {
	return []string{
func (s *DatabaseBackupResourceCrud) Create() error {
	request := oci_database.CreateBackupRequest{}
func (s *DatabaseBackupResourceCrud) Get() error {
	request := oci_database.GetBackupRequest{}
func (s *DatabaseBackupResourceCrud) Delete() error {
	request := oci_database.DeleteBackupRequest{}
func (s *DatabaseBackupResourceCrud) SetData() error {
	if s.Res.AvailabilityDomain != nil {

=== ./internal/service/database/database_db_node_console_connections_data_source.go ===
func DatabaseDbNodeConsoleConnectionsDataSource() *schema.Resource {
	return &schema.Resource{
func readDatabaseDbNodeConsoleConnections(d *schema.ResourceData, m interface{}) error {
	sync := &DatabaseDbNodeConsoleConnectionsDataSourceCrud{}
func (s *DatabaseDbNodeConsoleConnectionsDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *DatabaseDbNodeConsoleConnectionsDataSourceCrud) Get() error {
	request := oci_database.ListConsoleConnectionsRequest{}
func (s *DatabaseDbNodeConsoleConnectionsDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/database/database_exadata_infrastructure_resource.go ===
func DatabaseExadataInfrastructureResource() *schema.Resource {
	return &schema.Resource{
func createDatabaseExadataInfrastructure(d *schema.ResourceData, m interface{}) error {
	sync := &DatabaseExadataInfrastructureResourceCrud{}
func readDatabaseExadataInfrastructure(d *schema.ResourceData, m interface{}) error {
	sync := &DatabaseExadataInfrastructureResourceCrud{}
func updateDatabaseExadataInfrastructure(d *schema.ResourceData, m interface{}) error {
	sync := &DatabaseExadataInfrastructureResourceCrud{}
func deleteDatabaseExadataInfrastructure(d *schema.ResourceData, m interface{}) error {
	sync := &DatabaseExadataInfrastructureResourceCrud{}
func (s *DatabaseExadataInfrastructureResourceCrud) ID() string {
	return *s.Res.Id
func (s *DatabaseExadataInfrastructureResourceCrud) CreatedPending() []string {
	return []string{
func (s *DatabaseExadataInfrastructureResourceCrud) CreatedTarget() []string {
	if createAsyn, ok := s.D.GetOk("create_async"); ok {
func (s *DatabaseExadataInfrastructureResourceCrud) DeletedPending() []string {
	return []string{
func (s *DatabaseExadataInfrastructureResourceCrud) DeletedTarget() []string {
	return []string{
func (s *DatabaseExadataInfrastructureResourceCrud) UpdatedPending() []string {
	return []string{
func (s *DatabaseExadataInfrastructureResourceCrud) UpdatedTarget() []string {
	return []string{
func (s *DatabaseExadataInfrastructureResourceCrud) Create() error {
	request := oci_database.CreateExadataInfrastructureRequest{}
func (s *DatabaseExadataInfrastructureResourceCrud) Get() error {
	request := oci_database.GetExadataInfrastructureRequest{}
func (s *DatabaseExadataInfrastructureResourceCrud) Update() error {
	if compartment, ok := s.D.GetOkExists("compartment_id"); ok && s.D.HasChange("compartment_id") {
func (s *DatabaseExadataInfrastructureResourceCrud) Delete() error {
	request := oci_database.DeleteExadataInfrastructureRequest{}
func (s *DatabaseExadataInfrastructureResourceCrud) SetData() error {
	if s.Res.ActivatedStorageCount != nil {
func (s *DatabaseExadataInfrastructureResourceCrud) mapToDayOfWeek(fieldKeyFormat string) (oci_database.DayOfWeek, error) {
	result := oci_database.DayOfWeek{}
func (s *DatabaseExadataInfrastructureResourceCrud) mapToExadataInfrastructureContact(fieldKeyFormat string) (oci_database.ExadataInfrastructureContact, error) {
	result := oci_database.ExadataInfrastructureContact{}
func (s *DatabaseExadataInfrastructureResourceCrud) mapToMaintenanceWindow(fieldKeyFormat string) (oci_database.MaintenanceWindow, error) {
	result := oci_database.MaintenanceWindow{}
func (s *DatabaseExadataInfrastructureResourceCrud) mapToMonth(fieldKeyFormat string) (oci_database.Month, error) {
	result := oci_database.Month{}
func (s *DatabaseExadataInfrastructureResourceCrud) mapToNetworkBondingModeDetails(fieldKeyFormat string) (oci_database.NetworkBondingModeDetails, error) {
	result := oci_database.NetworkBondingModeDetails{}
func (s *DatabaseExadataInfrastructureResourceCrud) updateCompartment(compartment interface{}) error {
	changeCompartmentRequest := oci_database.ChangeExadataInfrastructureCompartmentRequest{}
func (s *DatabaseExadataInfrastructureResourceCrud) activateExadataInfrastructure(activationFile string, exadataInfrastructureId string) (*oci_database.ActivateExadataInfrastructureResponse, error) {
	request := oci_database.ActivateExadataInfrastructureRequest{}

=== ./internal/service/database/database_cloud_exadata_infrastructure_un_allocated_resource_data_source.go ===
func DatabaseCloudExadataInfrastructureUnAllocatedResourceDataSource() *schema.Resource {
	return &schema.Resource{
func readSingularDatabaseCloudExadataInfrastructureUnAllocatedResource(d *schema.ResourceData, m interface{}) error {
	sync := &DatabaseCloudExadataInfrastructureUnAllocatedResourceDataSourceCrud{}
func (s *DatabaseCloudExadataInfrastructureUnAllocatedResourceDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *DatabaseCloudExadataInfrastructureUnAllocatedResourceDataSourceCrud) Get() error {
	request := oci_database.GetCloudExadataInfrastructureUnallocatedResourcesRequest{}
func (s *DatabaseCloudExadataInfrastructureUnAllocatedResourceDataSourceCrud) SetData() error {
	if s.Res == nil {
func CloudAutonomousVmClusterResourceDetailsToMap(obj oci_database.CloudAutonomousVmClusterResourceDetails) map[string]interface{} {
	result := map[string]interface{}{}

=== ./internal/service/database/database_vm_cluster_network_resource.go ===
func DatabaseVmClusterNetworkResource() *schema.Resource {
	return &schema.Resource{
func createDatabaseVmClusterNetwork(d *schema.ResourceData, m interface{}) error {
	sync := &DatabaseVmClusterNetworkResourceCrud{}
func readDatabaseVmClusterNetwork(d *schema.ResourceData, m interface{}) error {
	sync := &DatabaseVmClusterNetworkResourceCrud{}
func updateDatabaseVmClusterNetwork(d *schema.ResourceData, m interface{}) error {
	sync := &DatabaseVmClusterNetworkResourceCrud{}
func deleteDatabaseVmClusterNetwork(d *schema.ResourceData, m interface{}) error {
	sync := &DatabaseVmClusterNetworkResourceCrud{}
func (s *DatabaseVmClusterNetworkResourceCrud) ID() string {
	return *s.Res.Id
func (s *DatabaseVmClusterNetworkResourceCrud) CreatedPending() []string {
	return []string{
func (s *DatabaseVmClusterNetworkResourceCrud) CreatedTarget() []string {
	return []string{
func (s *DatabaseVmClusterNetworkResourceCrud) DeletedPending() []string {
	return []string{
func (s *DatabaseVmClusterNetworkResourceCrud) DeletedTarget() []string {
	return []string{
func (s *DatabaseVmClusterNetworkResourceCrud) UpdatedPending() []string {
	return []string{
func (s *DatabaseVmClusterNetworkResourceCrud) UpdatedTarget() []string {
	return []string{
func (s *DatabaseVmClusterNetworkResourceCrud) Create() error {
	request := oci_database.CreateVmClusterNetworkRequest{}
func (s *DatabaseVmClusterNetworkResourceCrud) Get() error {
	request := oci_database.GetVmClusterNetworkRequest{}
func (s *DatabaseVmClusterNetworkResourceCrud) Update() error {

func (s *DatabaseVmClusterNetworkResourceCrud) Delete() error {
	request := oci_database.DeleteVmClusterNetworkRequest{}
func (s *DatabaseVmClusterNetworkResourceCrud) SetData() error {

func (s *DatabaseVmClusterNetworkResourceCrud) mapToDrScanDetails(fieldKeyFormat string) (oci_database.DrScanDetails, error) {
	result := oci_database.DrScanDetails{}
func (s *DatabaseVmClusterNetworkResourceCrud) mapToNodeDetails(fieldKeyFormat string) (oci_database.NodeDetails, error) {
	result := oci_database.NodeDetails{}
func (s *DatabaseVmClusterNetworkResourceCrud) mapToScanDetails(fieldKeyFormat string) (oci_database.ScanDetails, error) {
	result := oci_database.ScanDetails{}
func (s *DatabaseVmClusterNetworkResourceCrud) mapToVmNetworkDetails(fieldKeyFormat string) (oci_database.VmNetworkDetails, error) {
	result := oci_database.VmNetworkDetails{}
func (s *DatabaseVmClusterNetworkResourceCrud) validateVmClusterNetwork(vmClusterNetworkId string, exadataInfrastructureId string) (*oci_database.ValidateVmClusterNetworkResponse, error) {
	request := oci_database.ValidateVmClusterNetworkRequest{}

=== ./internal/service/database/database_db_nodes_data_source.go ===
func DatabaseDbNodesDataSource() *schema.Resource {
	return &schema.Resource{
func readDatabaseDbNodes(d *schema.ResourceData, m interface{}) error {
	sync := &DatabaseDbNodesDataSourceCrud{}
func (s *DatabaseDbNodesDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *DatabaseDbNodesDataSourceCrud) Get() error {
	request := oci_database.ListDbNodesRequest{}
func (s *DatabaseDbNodesDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/database/database_external_pluggable_database_operations_insights_management_resource.go ===
func DatabaseExternalPluggableDatabaseOperationsInsightsManagementResource() *schema.Resource {
	return &schema.Resource{
func createDatabaseExternalPluggableDatabaseOperationsInsightsManagement(d *schema.ResourceData, m interface{}) error {
	sync := &DatabaseExternalPluggableDatabaseOperationsInsightsManagementResourceCrud{}
func updateDatabaseExternalPluggableDatabaseOperationsInsightsManagement(d *schema.ResourceData, m interface{}) error {
	sync := &DatabaseExternalPluggableDatabaseOperationsInsightsManagementResourceCrud{}
func readDatabaseExternalPluggableDatabaseOperationsInsightsManagement(d *schema.ResourceData, m interface{}) error {
	return nil
func deleteDatabaseExternalPluggableDatabaseOperationsInsightsManagement(d *schema.ResourceData, m interface{}) error {
	sync := &DatabaseExternalPluggableDatabaseOperationsInsightsManagementResourceCrud{}
func (s *DatabaseExternalPluggableDatabaseOperationsInsightsManagementResourceCrud) ID() string {
	return tfresource.GenerateDataSourceHashID("DatabaseExternalPluggableDatabaseOperationsInsightsManagementResource-", DatabaseExternalPluggableDatabaseOperationsInsightsManagementResource(), s.D)
func (s *DatabaseExternalPluggableDatabaseOperationsInsightsManagementResourceCrud) Create() error {
	var operation bool
func (s *DatabaseExternalPluggableDatabaseOperationsInsightsManagementResourceCrud) Update() error {
	var operation bool
func (s *DatabaseExternalPluggableDatabaseOperationsInsightsManagementResourceCrud) Delete() error {
	var operation bool
func (s *DatabaseExternalPluggableDatabaseOperationsInsightsManagementResourceCrud) SetData() error {
	return nil

=== ./internal/service/database/database_cloud_vm_clusters_data_source.go ===
func DatabaseCloudVmClustersDataSource() *schema.Resource {
	return &schema.Resource{
func readDatabaseCloudVmClusters(d *schema.ResourceData, m interface{}) error {
	sync := &DatabaseCloudVmClustersDataSourceCrud{}
func (s *DatabaseCloudVmClustersDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *DatabaseCloudVmClustersDataSourceCrud) Get() error {
	request := oci_database.ListCloudVmClustersRequest{}
func (s *DatabaseCloudVmClustersDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/database/database_db_system_shapes_data_source.go ===
func DatabaseDbSystemShapesDataSource() *schema.Resource {
	return &schema.Resource{
func readDatabaseDbSystemShapes(d *schema.ResourceData, m interface{}) error {
	sync := &DatabaseDbSystemShapesDataSourceCrud{}
func (s *DatabaseDbSystemShapesDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *DatabaseDbSystemShapesDataSourceCrud) Get() error {
	request := oci_database.ListDbSystemShapesRequest{}
func (s *DatabaseDbSystemShapesDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/database/database_autonomous_database_software_images_data_source.go ===
func DatabaseAutonomousDatabaseSoftwareImagesDataSource() *schema.Resource {
	return &schema.Resource{
func readDatabaseAutonomousDatabaseSoftwareImages(d *schema.ResourceData, m interface{}) error {
	sync := &DatabaseAutonomousDatabaseSoftwareImagesDataSourceCrud{}
func (s *DatabaseAutonomousDatabaseSoftwareImagesDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *DatabaseAutonomousDatabaseSoftwareImagesDataSourceCrud) Get() error {
	request := oci_database.ListAutonomousDatabaseSoftwareImagesRequest{}
func (s *DatabaseAutonomousDatabaseSoftwareImagesDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/database/database_exadb_vm_cluster_update_history_entry_data_source.go ===
func DatabaseExadbVmClusterUpdateHistoryEntryDataSource() *schema.Resource {
	return &schema.Resource{
func readSingularDatabaseExadbVmClusterUpdateHistoryEntry(d *schema.ResourceData, m interface{}) error {
	sync := &DatabaseExadbVmClusterUpdateHistoryEntryDataSourceCrud{}
func (s *DatabaseExadbVmClusterUpdateHistoryEntryDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *DatabaseExadbVmClusterUpdateHistoryEntryDataSourceCrud) Get() error {
	request := oci_database.GetExadbVmClusterUpdateHistoryEntryRequest{}
func (s *DatabaseExadbVmClusterUpdateHistoryEntryDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/database/database_autonomous_database_saas_admin_user_resource.go ===
func DatabaseAutonomousDatabaseSaasAdminUserResource() *schema.Resource {
	return &schema.Resource{
func createDatabaseAutonomousDatabaseSaasAdminUser(d *schema.ResourceData, m interface{}) error {
	sync := &DatabaseAutonomousDatabaseSaasAdminUserResourceCrud{}
func readDatabaseAutonomousDatabaseSaasAdminUser(d *schema.ResourceData, m interface{}) error {
	sync := &DatabaseAutonomousDatabaseSaasAdminUserResourceCrud{}
func deleteDatabaseAutonomousDatabaseSaasAdminUser(d *schema.ResourceData, m interface{}) error {
	sync := &DatabaseAutonomousDatabaseSaasAdminUserResourceCrud{}
func (s *DatabaseAutonomousDatabaseSaasAdminUserResourceCrud) ID() string {
	return "saas-admin-user-admin-user-" + *s.Res.AutonomousDatabaseId
func (s *DatabaseAutonomousDatabaseSaasAdminUserResourceCrud) Create() error {
	request := oci_database.ConfigureSaasAdminUserRequest{}
func (s *DatabaseAutonomousDatabaseSaasAdminUserResourceCrud) Get() error {
	request := oci_database.SaasAdminUserStatusRequest{}
func (s *DatabaseAutonomousDatabaseSaasAdminUserResourceCrud) Delete() error {
	request := oci_database.ConfigureSaasAdminUserRequest{}
func (s *DatabaseAutonomousDatabaseSaasAdminUserResourceCrud) SetData() error {
	if s.Res.TimeSaasAdminUserEnabled != nil {

=== ./internal/service/database/database_cloud_vm_cluster_data_source.go ===
func DatabaseCloudVmClusterDataSource() *schema.Resource {
	fieldMap := make(map[string]*schema.Schema)
func readSingularDatabaseCloudVmCluster(d *schema.ResourceData, m interface{}) error {
	sync := &DatabaseCloudVmClusterDataSourceCrud{}
func (s *DatabaseCloudVmClusterDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *DatabaseCloudVmClusterDataSourceCrud) Get() error {
	request := oci_database.GetCloudVmClusterRequest{}
func (s *DatabaseCloudVmClusterDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/database/database_autonomous_patch_data_source.go ===
func DatabaseAutonomousPatchDataSource() *schema.Resource {
	return &schema.Resource{
func readSingularDatabaseAutonomousPatch(d *schema.ResourceData, m interface{}) error {
	sync := &DatabaseAutonomousPatchDataSourceCrud{}
func (s *DatabaseAutonomousPatchDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *DatabaseAutonomousPatchDataSourceCrud) Get() error {
	request := oci_database.GetAutonomousPatchRequest{}
func (s *DatabaseAutonomousPatchDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/database/database_autonomous_vm_cluster_data_source.go ===
func DatabaseAutonomousVmClusterDataSource() *schema.Resource {
	fieldMap := make(map[string]*schema.Schema)
func readSingularDatabaseAutonomousVmCluster(d *schema.ResourceData, m interface{}) error {
	sync := &DatabaseAutonomousVmClusterDataSourceCrud{}
func (s *DatabaseAutonomousVmClusterDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *DatabaseAutonomousVmClusterDataSourceCrud) Get() error {
	request := oci_database.GetAutonomousVmClusterRequest{}
func (s *DatabaseAutonomousVmClusterDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/database/database_db_systems_data_source.go ===
func DatabaseDbSystemsDataSource() *schema.Resource {
	return &schema.Resource{
func readDatabaseDbSystems(d *schema.ResourceData, m interface{}) error {
	sync := &DatabaseDbSystemsDataSourceCrud{}
func (s *DatabaseDbSystemsDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *DatabaseDbSystemsDataSourceCrud) Get() error {
	request := oci_database.ListDbSystemsRequest{}
func (s *DatabaseDbSystemsDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/database/database_cloud_vm_cluster_iorm_config_resource.go ===
func DatabaseCloudVmClusterIormConfigResource() *schema.Resource {
	return &schema.Resource{
func createDatabaseCloudVmClusterIormConfig(d *schema.ResourceData, m interface{}) error {
	sync := &DatabaseCloudVmClusterIormConfigResourceCrud{}
func readDatabaseCloudVmClusterIormConfig(d *schema.ResourceData, m interface{}) error {
	sync := &DatabaseCloudVmClusterIormConfigResourceCrud{}
func updateDatabaseCloudVmClusterIormConfig(d *schema.ResourceData, m interface{}) error {
	sync := &DatabaseCloudVmClusterIormConfigResourceCrud{}
func deleteDatabaseCloudVmClusterIormConfig(d *schema.ResourceData, m interface{}) error {
	sync := &DatabaseCloudVmClusterIormConfigResourceCrud{}
func (s *DatabaseCloudVmClusterIormConfigResourceCrud) ID() string {
	return s.D.Get("cloud_vm_cluster_id").(string)
func (s *DatabaseCloudVmClusterIormConfigResourceCrud) CreatedPending() []string {
	return []string{
func (s *DatabaseCloudVmClusterIormConfigResourceCrud) CreatedTarget() []string {
	return []string{
func (s *DatabaseCloudVmClusterIormConfigResourceCrud) DeletedPending() []string {
	return []string{
func (s *DatabaseCloudVmClusterIormConfigResourceCrud) DeletedTarget() []string {
	return []string{
func (s *DatabaseCloudVmClusterIormConfigResourceCrud) Create() error {
	request := oci_database.GetCloudVmClusterIormConfigRequest{}
func (s *DatabaseCloudVmClusterIormConfigResourceCrud) Get() error {
	request := oci_database.GetCloudVmClusterIormConfigRequest{}
func (s *DatabaseCloudVmClusterIormConfigResourceCrud) Update() error {
	request := oci_database.UpdateCloudVmClusterIormConfigRequest{}
func (s *DatabaseCloudVmClusterIormConfigResourceCrud) SetData() error {

func (s *DatabaseCloudVmClusterIormConfigResourceCrud) mapTodbIormConfigUpdateDetail(fieldKeyFormat string) (oci_database.DbIormConfigUpdateDetail, error) {
	result := oci_database.DbIormConfigUpdateDetail{}
func (s *DatabaseCloudVmClusterIormConfigResourceCrud) Delete() error {
	request := oci_database.UpdateCloudVmClusterIormConfigRequest{}

=== ./internal/service/database/database_autonomous_container_database_dataguard_associations_data_source.go ===
func DatabaseAutonomousContainerDatabaseDataguardAssociationsDataSource() *schema.Resource {
	return &schema.Resource{
func readDatabaseAutonomousContainerDatabaseDataguardAssociations(d *schema.ResourceData, m interface{}) error {
	sync := &DatabaseAutonomousContainerDatabaseDataguardAssociationsDataSourceCrud{}
func (s *DatabaseAutonomousContainerDatabaseDataguardAssociationsDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *DatabaseAutonomousContainerDatabaseDataguardAssociationsDataSourceCrud) Get() error {
	request := oci_database.ListAutonomousContainerDatabaseDataguardAssociationsRequest{}
func (s *DatabaseAutonomousContainerDatabaseDataguardAssociationsDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/database/database_db_node_console_history_content_data_source.go ===
func DatabaseDbNodeConsoleHistoryContentDataSource() *schema.Resource {
	return &schema.Resource{
func readSingularDatabaseDbNodeConsoleHistoryContent(d *schema.ResourceData, m interface{}) error {
	sync := &DatabaseDbNodeConsoleHistoryContentDataSourceCrud{}
func (s *DatabaseDbNodeConsoleHistoryContentDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *DatabaseDbNodeConsoleHistoryContentDataSourceCrud) Get() error {
	request := oci_database.GetConsoleHistoryContentRequest{}
func (s *DatabaseDbNodeConsoleHistoryContentDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/database/database_autonomous_db_versions_data_source.go ===
func DatabaseAutonomousDbVersionsDataSource() *schema.Resource {
	return &schema.Resource{
func readDatabaseAutonomousDbVersions(d *schema.ResourceData, m interface{}) error {
	sync := &DatabaseAutonomousDbVersionsDataSourceCrud{}
func (s *DatabaseAutonomousDbVersionsDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *DatabaseAutonomousDbVersionsDataSourceCrud) Get() error {
	request := oci_database.ListAutonomousDbVersionsRequest{}
func (s *DatabaseAutonomousDbVersionsDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/database/helpers_database.go ===
func fileSystemConfigDiffFunc(ctx context.Context, diff *schema.ResourceDiff, meta interface{}) error {
	// Access the current and proposed values

=== ./internal/service/database/database_db_node_console_history_data_source.go ===
func DatabaseDbNodeConsoleHistoryDataSource() *schema.Resource {
	fieldMap := make(map[string]*schema.Schema)
func readSingularDatabaseDbNodeConsoleHistory(d *schema.ResourceData, m interface{}) error {
	sync := &DatabaseDbNodeConsoleHistoryDataSourceCrud{}
func (s *DatabaseDbNodeConsoleHistoryDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *DatabaseDbNodeConsoleHistoryDataSourceCrud) Get() error {
	request := oci_database.GetConsoleHistoryRequest{}
func (s *DatabaseDbNodeConsoleHistoryDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/database/database_vm_cluster_patches_data_source.go ===
func DatabaseVmClusterPatchesDataSource() *schema.Resource {
	return &schema.Resource{
func readDatabaseVmClusterPatches(d *schema.ResourceData, m interface{}) error {
	sync := &DatabaseVmClusterPatchesDataSourceCrud{}
func (s *DatabaseVmClusterPatchesDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *DatabaseVmClusterPatchesDataSourceCrud) Get() error {
	request := oci_database.ListVmClusterPatchesRequest{}
func (s *DatabaseVmClusterPatchesDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/database/database_maintenance_run_histories_data_source.go ===
func DatabaseMaintenanceRunHistoriesDataSource() *schema.Resource {
	return &schema.Resource{
func readDatabaseMaintenanceRunHistories(d *schema.ResourceData, m interface{}) error {
	sync := &DatabaseMaintenanceRunHistoriesDataSourceCrud{}
func (s *DatabaseMaintenanceRunHistoriesDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *DatabaseMaintenanceRunHistoriesDataSourceCrud) Get() error {
	request := oci_database.ListMaintenanceRunHistoryRequest{}
func (s *DatabaseMaintenanceRunHistoriesDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/database/database_db_versions_data_source.go ===
func DatabaseDbVersionsDataSource() *schema.Resource {
	return &schema.Resource{
func readDatabaseDbVersions(d *schema.ResourceData, m interface{}) error {
	sync := &DatabaseDbVersionsDataSourceCrud{}
func (s *DatabaseDbVersionsDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *DatabaseDbVersionsDataSourceCrud) Get() error {
	request := oci_database.ListDbVersionsRequest{}
func (s *DatabaseDbVersionsDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/database/database_key_store_resource.go ===
func DatabaseKeyStoreResource() *schema.Resource {
	return &schema.Resource{
func createDatabaseKeyStore(d *schema.ResourceData, m interface{}) error {
	sync := &DatabaseKeyStoreResourceCrud{}
func readDatabaseKeyStore(d *schema.ResourceData, m interface{}) error {
	sync := &DatabaseKeyStoreResourceCrud{}
func updateDatabaseKeyStore(d *schema.ResourceData, m interface{}) error {
	sync := &DatabaseKeyStoreResourceCrud{}
func deleteDatabaseKeyStore(d *schema.ResourceData, m interface{}) error {
	sync := &DatabaseKeyStoreResourceCrud{}
func (s *DatabaseKeyStoreResourceCrud) ID() string {
	return *s.Res.Id
func (s *DatabaseKeyStoreResourceCrud) CreatedPending() []string {
	return []string{}
func (s *DatabaseKeyStoreResourceCrud) CreatedTarget() []string {
	return []string{
func (s *DatabaseKeyStoreResourceCrud) DeletedPending() []string {
	return []string{}
func (s *DatabaseKeyStoreResourceCrud) DeletedTarget() []string {
	return []string{
func (s *DatabaseKeyStoreResourceCrud) Create() error {
	request := oci_database.CreateKeyStoreRequest{}
func (s *DatabaseKeyStoreResourceCrud) Get() error {
	request := oci_database.GetKeyStoreRequest{}
func (s *DatabaseKeyStoreResourceCrud) Update() error {
	if _, ok := s.D.GetOkExists("confirm_details_trigger"); ok {
func (s *DatabaseKeyStoreResourceCrud) Delete() error {
	request := oci_database.DeleteKeyStoreRequest{}
func (s *DatabaseKeyStoreResourceCrud) SetData() error {
	associatedDatabases := []interface{}{}
func (s *DatabaseKeyStoreResourceCrud) ConfirmKeyStoreDetailsAreCorrect() error {
	request := oci_database.ConfirmKeyStoreDetailsAreCorrectRequest{}
func (s *DatabaseKeyStoreResourceCrud) mapToKeyStoreTypeDetails(fieldKeyFormat string) (oci_database.KeyStoreTypeDetails, error) {
	var baseObject oci_database.KeyStoreTypeDetails
func (s *DatabaseKeyStoreResourceCrud) updateCompartment(compartment interface{}) error {
	changeCompartmentRequest := oci_database.ChangeKeyStoreCompartmentRequest{}

=== ./internal/service/database/database_exadb_vm_cluster_update_data_source.go ===
func DatabaseExadbVmClusterUpdateDataSource() *schema.Resource {
	return &schema.Resource{
func readSingularDatabaseExadbVmClusterUpdate(d *schema.ResourceData, m interface{}) error {
	sync := &DatabaseExadbVmClusterUpdateDataSourceCrud{}
func (s *DatabaseExadbVmClusterUpdateDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *DatabaseExadbVmClusterUpdateDataSourceCrud) Get() error {
	request := oci_database.GetExadbVmClusterUpdateRequest{}
func (s *DatabaseExadbVmClusterUpdateDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/database/database_autonomous_database_data_source.go ===
func DatabaseAutonomousDatabaseDataSource() *schema.Resource {
	fieldMap := make(map[string]*schema.Schema)
func readSingularDatabaseAutonomousDatabase(d *schema.ResourceData, m interface{}) error {
	sync := &DatabaseAutonomousDatabaseDataSourceCrud{}
func (s *DatabaseAutonomousDatabaseDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *DatabaseAutonomousDatabaseDataSourceCrud) Get() error {
	request := oci_database.GetAutonomousDatabaseRequest{}
func (s *DatabaseAutonomousDatabaseDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/database/database_maintenance_runs_data_source.go ===
func DatabaseMaintenanceRunsDataSource() *schema.Resource {
	return &schema.Resource{
func readDatabaseMaintenanceRuns(d *schema.ResourceData, m interface{}) error {
	sync := &DatabaseMaintenanceRunsDataSourceCrud{}
func (s *DatabaseMaintenanceRunsDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *DatabaseMaintenanceRunsDataSourceCrud) Get() error {
	request := oci_database.ListMaintenanceRunsRequest{}
func (s *DatabaseMaintenanceRunsDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/database/database_vm_cluster_recommended_network_data_source.go ===
func DatabaseVmClusterRecommendedNetworkDataSource() *schema.Resource {
	return &schema.Resource{
func readSingularDatabaseVmClusterRecommendedNetwork(d *schema.ResourceData, m interface{}) error {
	sync := &DatabaseVmClusterRecommendedNetworkDataSourceCrud{}
func (s *DatabaseVmClusterRecommendedNetworkDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *DatabaseVmClusterRecommendedNetworkDataSourceCrud) Get() error {
	request := oci_database.GenerateRecommendedVmClusterNetworkRequest{}
func (s *DatabaseVmClusterRecommendedNetworkDataSourceCrud) SetData() error {
	if s.Res == nil {
func (s *DatabaseVmClusterRecommendedNetworkDataSourceCrud) mapToInfoForNetworkGenDetails(fieldKeyFormat string) (oci_database.InfoForNetworkGenDetails, error) {
	result := oci_database.InfoForNetworkGenDetails{}

=== ./internal/service/database/database_autonomous_database_character_sets_data_source.go ===
func DatabaseAutonomousDatabaseCharacterSetsDataSource() *schema.Resource {
	return &schema.Resource{
func readDatabaseAutonomousDatabaseCharacterSets(d *schema.ResourceData, m interface{}) error {
	sync := &DatabaseAutonomousDatabaseCharacterSetsDataSourceCrud{}
func (s *DatabaseAutonomousDatabaseCharacterSetsDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *DatabaseAutonomousDatabaseCharacterSetsDataSourceCrud) Get() error {
	request := oci_database.ListAutonomousDatabaseCharacterSetsRequest{}
func (s *DatabaseAutonomousDatabaseCharacterSetsDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/database/database_db_servers_data_source.go ===
func DatabaseDbServersDataSource() *schema.Resource {
	return &schema.Resource{
func readDatabaseDbServers(d *schema.ResourceData, m interface{}) error {
	sync := &DatabaseDbServersDataSourceCrud{}
func (s *DatabaseDbServersDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *DatabaseDbServersDataSourceCrud) Get() error {
	request := oci_database.ListDbServersRequest{}
func (s *DatabaseDbServersDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/database/database_vm_cluster_patch_history_entries_data_source.go ===
func DatabaseVmClusterPatchHistoryEntriesDataSource() *schema.Resource {
	return &schema.Resource{
func readDatabaseVmClusterPatchHistoryEntries(d *schema.ResourceData, m interface{}) error {
	sync := &DatabaseVmClusterPatchHistoryEntriesDataSourceCrud{}
func (s *DatabaseVmClusterPatchHistoryEntriesDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *DatabaseVmClusterPatchHistoryEntriesDataSourceCrud) Get() error {
	request := oci_database.ListVmClusterPatchHistoryEntriesRequest{}
func (s *DatabaseVmClusterPatchHistoryEntriesDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/database/database_external_non_container_database_management_resource.go ===
func DatabaseExternalNonContainerDatabaseManagementResource() *schema.Resource {
	return &schema.Resource{
func createDatabaseExternalNonContainerDatabaseManagement(d *schema.ResourceData, m interface{}) error {
	sync := &DatabaseExternalNonContainerDatabaseManagementResourceCrud{}
func updateDatabaseExternalNonContainerDatabaseManagement(d *schema.ResourceData, m interface{}) error {
	sync := &DatabaseExternalNonContainerDatabaseManagementResourceCrud{}
func readDatabaseExternalNonContainerDatabaseManagement(d *schema.ResourceData, m interface{}) error {
	return nil
func deleteDatabaseExternalNonContainerDatabaseManagement(d *schema.ResourceData, m interface{}) error {
	sync := &DatabaseExternalNonContainerDatabaseManagementResourceCrud{}
func (s *DatabaseExternalNonContainerDatabaseManagementResourceCrud) ID() string {
	return tfresource.GenerateDataSourceHashID("DatabaseExternalNonContainerDatabaseManagementResource-", DatabaseExternalNonContainerDatabaseManagementResource(), s.D)
func (s *DatabaseExternalNonContainerDatabaseManagementResourceCrud) Create() error {

func (s *DatabaseExternalNonContainerDatabaseManagementResourceCrud) Update() error {
	var operation bool
func (s *DatabaseExternalNonContainerDatabaseManagementResourceCrud) Delete() error {
	var operation bool
func (s *DatabaseExternalNonContainerDatabaseManagementResourceCrud) SetData() error {
	return nil

=== ./internal/service/database/database_exadata_infrastructures_data_source.go ===
func DatabaseExadataInfrastructuresDataSource() *schema.Resource {
	return &schema.Resource{
func readDatabaseExadataInfrastructures(d *schema.ResourceData, m interface{}) error {
	sync := &DatabaseExadataInfrastructuresDataSourceCrud{}
func (s *DatabaseExadataInfrastructuresDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *DatabaseExadataInfrastructuresDataSourceCrud) Get() error {
	request := oci_database.ListExadataInfrastructuresRequest{}
func (s *DatabaseExadataInfrastructuresDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/database/database_database_pdb_conversion_history_entry_data_source.go ===
func DatabaseDatabasePdbConversionHistoryEntryDataSource() *schema.Resource {
	return &schema.Resource{
func readSingularDatabaseDatabasePdbConversionHistoryEntry(d *schema.ResourceData, m interface{}) error {
	sync := &DatabaseDatabasePdbConversionHistoryEntryDataSourceCrud{}
func (s *DatabaseDatabasePdbConversionHistoryEntryDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *DatabaseDatabasePdbConversionHistoryEntryDataSourceCrud) Get() error {
	request := oci_database.GetPdbConversionHistoryEntryRequest{}
func (s *DatabaseDatabasePdbConversionHistoryEntryDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/database/database_exadata_infrastructure_download_config_file_data_source.go ===
func DatabaseExadataInfrastructureDownloadConfigFileDataSource() *schema.Resource {
	return &schema.Resource{
func readSingularDatabaseExadataInfrastructureDownloadConfigFile(d *schema.ResourceData, m interface{}) error {
	sync := &DatabaseExadataInfrastructureDownloadConfigFileDataSourceCrud{}
func (s *DatabaseExadataInfrastructureDownloadConfigFileDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *DatabaseExadataInfrastructureDownloadConfigFileDataSourceCrud) Get() error {
	request := oci_database.DownloadExadataInfrastructureConfigFileRequest{}
func (s *DatabaseExadataInfrastructureDownloadConfigFileDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/database/database_data_guard_associations_data_source.go ===
func DatabaseDataGuardAssociationsDataSource() *schema.Resource {
	return &schema.Resource{
func readDatabaseDataGuardAssociations(d *schema.ResourceData, m interface{}) error {
	sync := &DatabaseDataGuardAssociationsDataSourceCrud{}
func (s *DatabaseDataGuardAssociationsDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *DatabaseDataGuardAssociationsDataSourceCrud) Get() error {
	request := oci_database.ListDataGuardAssociationsRequest{}
func (s *DatabaseDataGuardAssociationsDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/database/database_autonomous_container_database_dataguard_role_change_resource.go ===
func DatabaseAutonomousContainerDatabaseDataguardRoleChangeResource() *schema.Resource {
	return &schema.Resource{
func (s *DatabaseAutonomousContainerDatabaseDataguardRoleChangeResourceCrud) ID() string {
	return fmt.Sprint(utils.GetStringHashcode(s.D.Get("autonomous_container_database_id").(string)))
func createDatabaseAutonomousContainerDatabaseDataguardRoleChange(d *schema.ResourceData, m interface{}) error {
	sync := &DatabaseAutonomousContainerDatabaseDataguardRoleChangeResourceCrud{}
func readDatabaseAutonomousContainerDatabaseDataguardRoleChange(d *schema.ResourceData, m interface{}) error {
	sync := &DatabaseAutonomousContainerDatabaseDataguardRoleChangeResourceCrud{}
func deleteDatabaseAutonomousContainerDatabaseDataguardRoleChange(d *schema.ResourceData, m interface{}) error {
	return nil
func (s *DatabaseAutonomousContainerDatabaseDataguardRoleChangeResourceCrud) Get() error {
	return nil
func (s *DatabaseAutonomousContainerDatabaseDataguardRoleChangeResourceCrud) SetData() error {
	return nil
func (s *DatabaseAutonomousContainerDatabaseDataguardRoleChangeResourceCrud) Create() error {


=== ./internal/service/database/database_cloud_database_management_resource.go ===
func DatabaseCloudDatabaseManagementResource() *schema.Resource {
	return &schema.Resource{
func createDatabaseCloudDatabaseManagement(d *schema.ResourceData, m interface{}) error {
	sync := &DatabaseCloudDatabaseManagementResourceCrud{}
func updateDatabaseCloudDatabaseManagement(d *schema.ResourceData, m interface{}) error {
	sync := &DatabaseCloudDatabaseManagementResourceCrud{}
func readDatabaseCloudDatabaseManagement(d *schema.ResourceData, m interface{}) error {
	return nil
func deleteDatabaseCloudDatabaseManagement(d *schema.ResourceData, m interface{}) error {
	sync := &DatabaseCloudDatabaseManagementResourceCrud{}
func (s *DatabaseCloudDatabaseManagementResourceCrud) ID() string {
	return tfresource.GenerateDataSourceHashID("DatabaseCloudDatabaseManagementResource-", DatabaseCloudDatabaseManagementResource(), s.D)
func (s *DatabaseCloudDatabaseManagementResourceCrud) Create() error {

func (s *DatabaseCloudDatabaseManagementResourceCrud) Update() error {
	var operation bool
func (s *DatabaseCloudDatabaseManagementResourceCrud) Delete() error {
	var operation bool
func (s *DatabaseCloudDatabaseManagementResourceCrud) SetData() error {
	return nil
func (s *DatabaseCloudDatabaseManagementResourceCrud) mapToDatabaseManagementCredentialDetails(fieldKeyFormat string) (oci_database.DatabaseCredentialDetails, error) {
	result := oci_database.DatabaseCredentialDetails{}
func (s *DatabaseCloudDatabaseManagementResourceCrud) getDatabaseFromWorkRequest(workId *string, actionTypeEnum oci_work_requests.WorkRequestResourceActionTypeEnum, timeout time.Duration) error {
	databaseId, err := tfresource.WaitForWorkRequest(s.WorkRequestClient, workId, "database", actionTypeEnum, timeout, s.DisableNotFoundRetries, true)
func (s *DatabaseCloudDatabaseManagementResourceCrud) Get() error {
	request := oci_database.GetDatabaseRequest{}

=== ./internal/service/database/database_vm_cluster_remove_virtual_machine_resource.go ===
func DatabaseVmClusterRemoveVirtualMachineResource() *schema.Resource {
	return &schema.Resource{
func createDatabaseVmClusterRemoveVirtualMachine(d *schema.ResourceData, m interface{}) error {
	sync := &DatabaseVmClusterRemoveVirtualMachineResourceCrud{}
func readDatabaseVmClusterRemoveVirtualMachine(d *schema.ResourceData, m interface{}) error {
	return nil
func deleteDatabaseVmClusterRemoveVirtualMachine(d *schema.ResourceData, m interface{}) error {
	return nil
func (s *DatabaseVmClusterRemoveVirtualMachineResourceCrud) ID() string {
	return *s.Res.Id
func (s *DatabaseVmClusterRemoveVirtualMachineResourceCrud) CreatedPending() []string {
	return []string{
func (s *DatabaseVmClusterRemoveVirtualMachineResourceCrud) CreatedTarget() []string {
	return []string{
func (s *DatabaseVmClusterRemoveVirtualMachineResourceCrud) DeletedPending() []string {
	return []string{
func (s *DatabaseVmClusterRemoveVirtualMachineResourceCrud) DeletedTarget() []string {
	return []string{
func (s *DatabaseVmClusterRemoveVirtualMachineResourceCrud) Create() error {
	request := oci_database.RemoveVirtualMachineFromVmClusterRequest{}
func (s *DatabaseVmClusterRemoveVirtualMachineResourceCrud) SetData() error {
	if s.Res.AvailabilityDomain != nil {
func (s *DatabaseVmClusterRemoveVirtualMachineResourceCrud) CloudAutomationApplyUpdateTimePreferenceToMap(obj *oci_database.CloudAutomationApplyUpdateTimePreference) map[string]interface{} {
	result := map[string]interface{}{}
func (s *DatabaseVmClusterRemoveVirtualMachineResourceCrud) CloudAutomationFreezePeriodToMap(obj *oci_database.CloudAutomationFreezePeriod) map[string]interface{} {
	result := map[string]interface{}{}
func (s *DatabaseVmClusterRemoveVirtualMachineResourceCrud) CloudAutomationUpdateDetailsToMap(obj *oci_database.CloudAutomationUpdateDetails) map[string]interface{} {
	result := map[string]interface{}{}
func (s *DatabaseVmClusterRemoveVirtualMachineResourceCrud) mapToDbServerDetails(fieldKeyFormat string) (oci_database.DbServerDetails, error) {
	result := oci_database.DbServerDetails{}

=== ./internal/service/database/database_pluggable_database_data_source.go ===
func DatabasePluggableDatabaseDataSource() *schema.Resource {
	fieldMap := make(map[string]*schema.Schema)
func readSingularDatabasePluggableDatabase(d *schema.ResourceData, m interface{}) error {
	sync := &DatabasePluggableDatabaseDataSourceCrud{}
func (s *DatabasePluggableDatabaseDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *DatabasePluggableDatabaseDataSourceCrud) Get() error {
	request := oci_database.GetPluggableDatabaseRequest{}
func (s *DatabasePluggableDatabaseDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/database/database_autonomous_database_backup_data_source.go ===
func DatabaseAutonomousDatabaseBackupDataSource() *schema.Resource {
	fieldMap := make(map[string]*schema.Schema)
func readSingularDatabaseAutonomousDatabaseBackup(d *schema.ResourceData, m interface{}) error {
	sync := &DatabaseAutonomousDatabaseBackupDataSourceCrud{}
func (s *DatabaseAutonomousDatabaseBackupDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *DatabaseAutonomousDatabaseBackupDataSourceCrud) Get() error {
	request := oci_database.GetAutonomousDatabaseBackupRequest{}
func (s *DatabaseAutonomousDatabaseBackupDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/database/database_exadb_vm_cluster_updates_data_source.go ===
func DatabaseExadbVmClusterUpdatesDataSource() *schema.Resource {
	return &schema.Resource{
func readDatabaseExadbVmClusterUpdates(d *schema.ResourceData, m interface{}) error {
	sync := &DatabaseExadbVmClusterUpdatesDataSourceCrud{}
func (s *DatabaseExadbVmClusterUpdatesDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *DatabaseExadbVmClusterUpdatesDataSourceCrud) Get() error {
	request := oci_database.ListExadbVmClusterUpdatesRequest{}
func (s *DatabaseExadbVmClusterUpdatesDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/database/database_autonomous_vm_cluster_acd_resource_usages_data_source.go ===
func DatabaseAutonomousVmClusterAcdResourceUsagesDataSource() *schema.Resource {
	return &schema.Resource{
func readDatabaseAutonomousVmClusterAcdResourceUsages(d *schema.ResourceData, m interface{}) error {
	sync := &DatabaseAutonomousVmClusterAcdResourceUsagesDataSourceCrud{}
func (s *DatabaseAutonomousVmClusterAcdResourceUsagesDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *DatabaseAutonomousVmClusterAcdResourceUsagesDataSourceCrud) Get() error {
	request := oci_database.ListAutonomousVmClusterAcdResourceUsageRequest{}
func (s *DatabaseAutonomousVmClusterAcdResourceUsagesDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/database/database_db_systems_upgrade_resource.go ===
func DatabaseDbSystemsUpgradeResource() *schema.Resource {
	return &schema.Resource{
func createDatabaseDbSystemsUpgrade(d *schema.ResourceData, m interface{}) error {
	sync := &DatabaseDbSystemsUpgradeResourceCrud{}
func readDatabaseDbSystemsUpgrade(d *schema.ResourceData, m interface{}) error {
	return nil
func deleteDatabaseDbSystemsUpgrade(d *schema.ResourceData, m interface{}) error {
	return nil
func (s *DatabaseDbSystemsUpgradeResourceCrud) ID() string {
	return *s.Res.Id
func (s *DatabaseDbSystemsUpgradeResourceCrud) CreatedPending() []string {
	return []string{
func (s *DatabaseDbSystemsUpgradeResourceCrud) CreatedTarget() []string {
	return []string{
func (s *DatabaseDbSystemsUpgradeResourceCrud) DeletedPending() []string {
	return []string{
func (s *DatabaseDbSystemsUpgradeResourceCrud) DeletedTarget() []string {
	return []string{
func (s *DatabaseDbSystemsUpgradeResourceCrud) Create() error {
	request := oci_database.UpgradeDbSystemRequest{}
func (s *DatabaseDbSystemsUpgradeResourceCrud) Get() error {
	request := oci_database.GetDbSystemRequest{}
func (s *DatabaseDbSystemsUpgradeResourceCrud) SetData() error {
	if s.Res.AvailabilityDomain != nil {

=== ./internal/service/database/database_db_node_data_source.go ===
func DatabaseDbNodeDataSource() *schema.Resource {
	fieldMap := make(map[string]*schema.Schema)
func readSingularDatabaseDbNode(d *schema.ResourceData, m interface{}) error {
	sync := &DatabaseDbNodeDataSourceCrud{}
func (s *DatabaseDbNodeDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *DatabaseDbNodeDataSourceCrud) Get() error {
	request := oci_database.GetDbNodeRequest{}
func (s *DatabaseDbNodeDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/database/database_maintenance_run_history_data_source.go ===
func DatabaseMaintenanceRunHistoryDataSource() *schema.Resource {
	return &schema.Resource{
func readSingularDatabaseMaintenanceRunHistory(d *schema.ResourceData, m interface{}) error {
	sync := &DatabaseMaintenanceRunHistoryDataSourceCrud{}
func (s *DatabaseMaintenanceRunHistoryDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *DatabaseMaintenanceRunHistoryDataSourceCrud) Get() error {
	request := oci_database.GetMaintenanceRunHistoryRequest{}
func (s *DatabaseMaintenanceRunHistoryDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/database/database_autonomous_container_database_resource_usage_data_source.go ===
func DatabaseAutonomousContainerDatabaseResourceUsageDataSource() *schema.Resource {
	return &schema.Resource{
func readSingularDatabaseAutonomousContainerDatabaseResourceUsage(d *schema.ResourceData, m interface{}) error {
	sync := &DatabaseAutonomousContainerDatabaseResourceUsageDataSourceCrud{}
func (s *DatabaseAutonomousContainerDatabaseResourceUsageDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *DatabaseAutonomousContainerDatabaseResourceUsageDataSourceCrud) Get() error {
	request := oci_database.GetAutonomousContainerDatabaseResourceUsageRequest{}
func (s *DatabaseAutonomousContainerDatabaseResourceUsageDataSourceCrud) SetData() error {
	if s.Res == nil {
func AcdAvmResourceStatsToMap(obj oci_database.AcdAvmResourceStats) map[string]interface{} {
	result := map[string]interface{}{}

=== ./internal/service/database/database_external_pluggable_databases_data_source.go ===
func DatabaseExternalPluggableDatabasesDataSource() *schema.Resource {
	return &schema.Resource{
func readDatabaseExternalPluggableDatabases(d *schema.ResourceData, m interface{}) error {
	sync := &DatabaseExternalPluggableDatabasesDataSourceCrud{}
func (s *DatabaseExternalPluggableDatabasesDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *DatabaseExternalPluggableDatabasesDataSourceCrud) Get() error {
	request := oci_database.ListExternalPluggableDatabasesRequest{}
func (s *DatabaseExternalPluggableDatabasesDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/database/database_autonomous_vm_cluster_resource_usage_data_source.go ===
func DatabaseAutonomousVmClusterResourceUsageDataSource() *schema.Resource {
	return &schema.Resource{
func readSingularDatabaseAutonomousVmClusterResourceUsage(d *schema.ResourceData, m interface{}) error {
	sync := &DatabaseAutonomousVmClusterResourceUsageDataSourceCrud{}
func (s *DatabaseAutonomousVmClusterResourceUsageDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *DatabaseAutonomousVmClusterResourceUsageDataSourceCrud) Get() error {
	request := oci_database.GetAutonomousVmClusterResourceUsageRequest{}
func (s *DatabaseAutonomousVmClusterResourceUsageDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/database/database_vm_cluster_network_data_source.go ===
func DatabaseVmClusterNetworkDataSource() *schema.Resource {
	fieldMap := make(map[string]*schema.Schema)
func readSingularDatabaseVmClusterNetwork(d *schema.ResourceData, m interface{}) error {
	sync := &DatabaseVmClusterNetworkDataSourceCrud{}
func (s *DatabaseVmClusterNetworkDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *DatabaseVmClusterNetworkDataSourceCrud) Get() error {
	request := oci_database.GetVmClusterNetworkRequest{}
func (s *DatabaseVmClusterNetworkDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/database/database_external_pluggable_database_resource.go ===
func DatabaseExternalPluggableDatabaseResource() *schema.Resource {
	return &schema.Resource{
func createDatabaseExternalPluggableDatabase(d *schema.ResourceData, m interface{}) error {
	sync := &DatabaseExternalPluggableDatabaseResourceCrud{}
func readDatabaseExternalPluggableDatabase(d *schema.ResourceData, m interface{}) error {
	sync := &DatabaseExternalPluggableDatabaseResourceCrud{}
func updateDatabaseExternalPluggableDatabase(d *schema.ResourceData, m interface{}) error {
	sync := &DatabaseExternalPluggableDatabaseResourceCrud{}
func deleteDatabaseExternalPluggableDatabase(d *schema.ResourceData, m interface{}) error {
	sync := &DatabaseExternalPluggableDatabaseResourceCrud{}
func (s *DatabaseExternalPluggableDatabaseResourceCrud) ID() string {
	return *s.Res.Id
func (s *DatabaseExternalPluggableDatabaseResourceCrud) CreatedPending() []string {
	return []string{
func (s *DatabaseExternalPluggableDatabaseResourceCrud) CreatedTarget() []string {
	return []string{
func (s *DatabaseExternalPluggableDatabaseResourceCrud) DeletedPending() []string {
	return []string{
func (s *DatabaseExternalPluggableDatabaseResourceCrud) DeletedTarget() []string {
	return []string{
func (s *DatabaseExternalPluggableDatabaseResourceCrud) Create() error {
	request := oci_database.CreateExternalPluggableDatabaseRequest{}
func (s *DatabaseExternalPluggableDatabaseResourceCrud) Get() error {
	request := oci_database.GetExternalPluggableDatabaseRequest{}
func (s *DatabaseExternalPluggableDatabaseResourceCrud) Update() error {
	if compartment, ok := s.D.GetOkExists("compartment_id"); ok && s.D.HasChange("compartment_id") {
func (s *DatabaseExternalPluggableDatabaseResourceCrud) Delete() error {
	request := oci_database.DeleteExternalPluggableDatabaseRequest{}
func (s *DatabaseExternalPluggableDatabaseResourceCrud) SetData() error {
	if s.Res.CharacterSet != nil {
func (s *DatabaseExternalPluggableDatabaseResourceCrud) updateCompartment(compartment interface{}) error {
	changeCompartmentRequest := oci_database.ChangeExternalPluggableDatabaseCompartmentRequest{}

=== ./internal/service/database/database_maintenance_run_data_source.go ===
func DatabaseMaintenanceRunDataSource() *schema.Resource {
	fieldMap := make(map[string]*schema.Schema)
func readSingularDatabaseMaintenanceRun(d *schema.ResourceData, m interface{}) error {
	sync := &DatabaseMaintenanceRunDataSourceCrud{}
func (s *DatabaseMaintenanceRunDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *DatabaseMaintenanceRunDataSourceCrud) Get() error {
	request := oci_database.GetMaintenanceRunRequest{}
func (s *DatabaseMaintenanceRunDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/database/database_externalnoncontainerdatabases_stack_monitoring_resource.go ===
func DatabaseExternalnoncontainerdatabasesStackMonitoringResource() *schema.Resource {
	return &schema.Resource{
func createDatabaseExternalnoncontainerdatabasesStackMonitoring(d *schema.ResourceData, m interface{}) error {
	sync := &DatabaseExternalnoncontainerdatabasesStackMonitoringResourceCrud{}
func updateDatabaseExternalnoncontainerdatabasesStackMonitoring(d *schema.ResourceData, m interface{}) error {
	return nil
func readDatabaseExternalnoncontainerdatabasesStackMonitoring(d *schema.ResourceData, m interface{}) error {
	return nil
func deleteDatabaseExternalnoncontainerdatabasesStackMonitoring(d *schema.ResourceData, m interface{}) error {
	sync := &DatabaseExternalnoncontainerdatabasesStackMonitoringResourceCrud{}
func (s *DatabaseExternalnoncontainerdatabasesStackMonitoringResourceCrud) ID() string {
	return tfresource.GenerateDataSourceHashID("DatabaseExternalnoncontainerdatabasesStackMonitoringResource-", DatabaseExternalnoncontainerdatabasesStackMonitoringResource(), s.D)
func (s *DatabaseExternalnoncontainerdatabasesStackMonitoringResourceCrud) Create() error {

func (s *DatabaseExternalnoncontainerdatabasesStackMonitoringResourceCrud) Delete() error {
	var operation_stack_monitoring bool
func (s *DatabaseExternalnoncontainerdatabasesStackMonitoringResourceCrud) SetData() error {
	return nil

=== ./internal/service/database/database_gi_versions_data_source.go ===
func DatabaseGiVersionsDataSource() *schema.Resource {
	return &schema.Resource{
func readDatabaseGiVersions(d *schema.ResourceData, m interface{}) error {
	sync := &DatabaseGiVersionsDataSourceCrud{}
func (s *DatabaseGiVersionsDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *DatabaseGiVersionsDataSourceCrud) Get() error {
	request := oci_database.ListGiVersionsRequest{}
func (s *DatabaseGiVersionsDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/database/database_db_system_storage_performances_data_source.go ===
func DatabaseDbSystemStoragePerformancesDataSource() *schema.Resource {
	return &schema.Resource{
func readDatabaseDbSystemStoragePerformances(d *schema.ResourceData, m interface{}) error {
	sync := &DatabaseDbSystemStoragePerformancesDataSourceCrud{}
func (s *DatabaseDbSystemStoragePerformancesDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *DatabaseDbSystemStoragePerformancesDataSourceCrud) Get() error {
	request := oci_database.ListDbSystemStoragePerformancesRequest{}
func (s *DatabaseDbSystemStoragePerformancesDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/database/database_pluggable_databases_remote_clone_resource.go ===
func DatabasePluggableDatabasesRemoteCloneResource() *schema.Resource {
	return &schema.Resource{
func createDatabasePluggableDatabasesRemoteClone(d *schema.ResourceData, m interface{}) error {
	sync := &DatabasePluggableDatabasesRemoteCloneResourceCrud{}
func readDatabasePluggableDatabasesRemoteClone(d *schema.ResourceData, m interface{}) error {
	return nil
func deleteDatabasePluggableDatabasesRemoteClone(d *schema.ResourceData, m interface{}) error {
	return nil
func (s *DatabasePluggableDatabasesRemoteCloneResourceCrud) ID() string {
	return *s.Res.Id
func (s *DatabasePluggableDatabasesRemoteCloneResourceCrud) CreatedPending() []string {
	return []string{
func (s *DatabasePluggableDatabasesRemoteCloneResourceCrud) CreatedTarget() []string {
	return []string{
func (s *DatabasePluggableDatabasesRemoteCloneResourceCrud) DeletedPending() []string {
	return []string{
func (s *DatabasePluggableDatabasesRemoteCloneResourceCrud) DeletedTarget() []string {
	return []string{
func (s *DatabasePluggableDatabasesRemoteCloneResourceCrud) Create() error {
	request := oci_database.RemoteClonePluggableDatabaseRequest{}
func (s *DatabasePluggableDatabasesRemoteCloneResourceCrud) SetData() error {
	if s.Res.CompartmentId != nil {

=== ./internal/service/database/database_vm_cluster_networks_data_source.go ===
func DatabaseVmClusterNetworksDataSource() *schema.Resource {
	return &schema.Resource{
func readDatabaseVmClusterNetworks(d *schema.ResourceData, m interface{}) error {
	sync := &DatabaseVmClusterNetworksDataSourceCrud{}
func (s *DatabaseVmClusterNetworksDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *DatabaseVmClusterNetworksDataSourceCrud) Get() error {
	request := oci_database.ListVmClusterNetworksRequest{}
func (s *DatabaseVmClusterNetworksDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/database/database_backup_destination_resource.go ===
func DatabaseBackupDestinationResource() *schema.Resource {
	return &schema.Resource{
func createDatabaseBackupDestination(d *schema.ResourceData, m interface{}) error {
	sync := &DatabaseBackupDestinationResourceCrud{}
func readDatabaseBackupDestination(d *schema.ResourceData, m interface{}) error {
	sync := &DatabaseBackupDestinationResourceCrud{}
func updateDatabaseBackupDestination(d *schema.ResourceData, m interface{}) error {
	sync := &DatabaseBackupDestinationResourceCrud{}
func deleteDatabaseBackupDestination(d *schema.ResourceData, m interface{}) error {
	sync := &DatabaseBackupDestinationResourceCrud{}
func (s *DatabaseBackupDestinationResourceCrud) ID() string {
	return *s.Res.Id
func (s *DatabaseBackupDestinationResourceCrud) CreatedPending() []string {
	return []string{}
func (s *DatabaseBackupDestinationResourceCrud) CreatedTarget() []string {
	return []string{
func (s *DatabaseBackupDestinationResourceCrud) DeletedPending() []string {
	return []string{}
func (s *DatabaseBackupDestinationResourceCrud) DeletedTarget() []string {
	return []string{
func (s *DatabaseBackupDestinationResourceCrud) Create() error {
	request := oci_database.CreateBackupDestinationRequest{}
func (s *DatabaseBackupDestinationResourceCrud) Get() error {
	request := oci_database.GetBackupDestinationRequest{}
func (s *DatabaseBackupDestinationResourceCrud) Update() error {
	if compartment, ok := s.D.GetOkExists("compartment_id"); ok && s.D.HasChange("compartment_id") {
func (s *DatabaseBackupDestinationResourceCrud) Delete() error {
	request := oci_database.DeleteBackupDestinationRequest{}
func (s *DatabaseBackupDestinationResourceCrud) SetData() error {
	associatedDatabases := []interface{}{}
func (s *DatabaseBackupDestinationResourceCrud) mapToMountTypeDetails(fieldKeyFormat string) (oci_database.MountTypeDetails, error) {
	var baseObject oci_database.MountTypeDetails
func (s *DatabaseBackupDestinationResourceCrud) mapMountTypeDetailsForUpdate(fieldKeyFormat string, request *oci_database.UpdateBackupDestinationRequest) error {
	mountTypeRaw, ok := s.D.GetOkExists(fmt.Sprintf(fieldKeyFormat, "mount_type"))
func (s *DatabaseBackupDestinationResourceCrud) populateTopLevelPolymorphicCreateBackupDestinationRequest(request *oci_database.CreateBackupDestinationRequest) error {
	//discriminator
func (s *DatabaseBackupDestinationResourceCrud) updateCompartment(compartment interface{}) error {
	changeCompartmentRequest := oci_database.ChangeBackupDestinationCompartmentRequest{}

=== ./internal/service/database/database_autonomous_database_software_image_data_source.go ===
func DatabaseAutonomousDatabaseSoftwareImageDataSource() *schema.Resource {
	fieldMap := make(map[string]*schema.Schema)
func readSingularDatabaseAutonomousDatabaseSoftwareImage(d *schema.ResourceData, m interface{}) error {
	sync := &DatabaseAutonomousDatabaseSoftwareImageDataSourceCrud{}
func (s *DatabaseAutonomousDatabaseSoftwareImageDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *DatabaseAutonomousDatabaseSoftwareImageDataSourceCrud) Get() error {
	request := oci_database.GetAutonomousDatabaseSoftwareImageRequest{}
func (s *DatabaseAutonomousDatabaseSoftwareImageDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/database/database_external_non_container_database_resource.go ===
func DatabaseExternalNonContainerDatabaseResource() *schema.Resource {
	return &schema.Resource{
func createDatabaseExternalNonContainerDatabase(d *schema.ResourceData, m interface{}) error {
	sync := &DatabaseExternalNonContainerDatabaseResourceCrud{}
func readDatabaseExternalNonContainerDatabase(d *schema.ResourceData, m interface{}) error {
	sync := &DatabaseExternalNonContainerDatabaseResourceCrud{}
func updateDatabaseExternalNonContainerDatabase(d *schema.ResourceData, m interface{}) error {
	sync := &DatabaseExternalNonContainerDatabaseResourceCrud{}
func deleteDatabaseExternalNonContainerDatabase(d *schema.ResourceData, m interface{}) error {
	sync := &DatabaseExternalNonContainerDatabaseResourceCrud{}
func (s *DatabaseExternalNonContainerDatabaseResourceCrud) ID() string {
	return *s.Res.Id
func (s *DatabaseExternalNonContainerDatabaseResourceCrud) CreatedPending() []string {
	return []string{
func (s *DatabaseExternalNonContainerDatabaseResourceCrud) CreatedTarget() []string {
	return []string{
func (s *DatabaseExternalNonContainerDatabaseResourceCrud) DeletedPending() []string {
	return []string{
func (s *DatabaseExternalNonContainerDatabaseResourceCrud) DeletedTarget() []string {
	return []string{
func (s *DatabaseExternalNonContainerDatabaseResourceCrud) Create() error {
	request := oci_database.CreateExternalNonContainerDatabaseRequest{}
func (s *DatabaseExternalNonContainerDatabaseResourceCrud) Get() error {
	request := oci_database.GetExternalNonContainerDatabaseRequest{}
func (s *DatabaseExternalNonContainerDatabaseResourceCrud) Update() error {
	if compartment, ok := s.D.GetOkExists("compartment_id"); ok && s.D.HasChange("compartment_id") {
func (s *DatabaseExternalNonContainerDatabaseResourceCrud) Delete() error {
	request := oci_database.DeleteExternalNonContainerDatabaseRequest{}
func (s *DatabaseExternalNonContainerDatabaseResourceCrud) SetData() error {
	if s.Res.CharacterSet != nil {
func (s *DatabaseExternalNonContainerDatabaseResourceCrud) updateCompartment(compartment interface{}) error {
	changeCompartmentRequest := oci_database.ChangeExternalNonContainerDatabaseCompartmentRequest{}

=== ./internal/service/database/database_external_container_database_data_source.go ===
func DatabaseExternalContainerDatabaseDataSource() *schema.Resource {
	fieldMap := make(map[string]*schema.Schema)
func readSingularDatabaseExternalContainerDatabase(d *schema.ResourceData, m interface{}) error {
	sync := &DatabaseExternalContainerDatabaseDataSourceCrud{}
func (s *DatabaseExternalContainerDatabaseDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *DatabaseExternalContainerDatabaseDataSourceCrud) Get() error {
	request := oci_database.GetExternalContainerDatabaseRequest{}
func (s *DatabaseExternalContainerDatabaseDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/database/database_autonomous_database_instance_wallet_management_resource.go ===
func DatabaseAutonomousDatabaseInstanceWalletManagementResource() *schema.Resource {
	return &schema.Resource{
func createDatabaseAutonomousDatabaseInstanceWalletManagement(d *schema.ResourceData, m interface{}) error {
	sync := &DatabaseAutonomousDatabaseInstanceWalletManagementResourceCrud{}
func readDatabaseAutonomousDatabaseInstanceWalletManagement(d *schema.ResourceData, m interface{}) error {
	sync := &DatabaseAutonomousDatabaseInstanceWalletManagementResourceCrud{}
func updateDatabaseAutonomousDatabaseInstanceWalletManagement(d *schema.ResourceData, m interface{}) error {
	sync := &DatabaseAutonomousDatabaseInstanceWalletManagementResourceCrud{}
func deleteDatabaseAutonomousDatabaseInstanceWalletManagement(d *schema.ResourceData, m interface{}) error {
	return nil
func (s *DatabaseAutonomousDatabaseInstanceWalletManagementResourceCrud) ID() string {
	return s.D.Get("autonomous_database_id").(string)
func (s *DatabaseAutonomousDatabaseInstanceWalletManagementResourceCrud) CreatedPending() []string {
	return []string{
func (s *DatabaseAutonomousDatabaseInstanceWalletManagementResourceCrud) CreatedTarget() []string {
	return []string{
func (s *DatabaseAutonomousDatabaseInstanceWalletManagementResourceCrud) DeletedPending() []string {
	return []string{}
func (s *DatabaseAutonomousDatabaseInstanceWalletManagementResourceCrud) DeletedTarget() []string {
	return []string{}
func (s *DatabaseAutonomousDatabaseInstanceWalletManagementResourceCrud) UpdatedPending() []string {
	return []string{
func (s *DatabaseAutonomousDatabaseInstanceWalletManagementResourceCrud) UpdatedTarget() []string {
	return []string{
func (s *DatabaseAutonomousDatabaseInstanceWalletManagementResourceCrud) Create() error {
	if shouldRotate, ok := s.D.GetOkExists("should_rotate"); ok {
func (s *DatabaseAutonomousDatabaseInstanceWalletManagementResourceCrud) Get() error {
	request := oci_database.GetAutonomousDatabaseWalletRequest{}
func (s *DatabaseAutonomousDatabaseInstanceWalletManagementResourceCrud) Update() error {
	request := oci_database.UpdateAutonomousDatabaseWalletRequest{}
func (s *DatabaseAutonomousDatabaseInstanceWalletManagementResourceCrud) SetData() error {
	s.D.Set("state", s.Res.LifecycleState)

=== ./internal/service/database/database_autonomous_vm_clusters_data_source.go ===
func DatabaseAutonomousVmClustersDataSource() *schema.Resource {
	return &schema.Resource{
func readDatabaseAutonomousVmClusters(d *schema.ResourceData, m interface{}) error {
	sync := &DatabaseAutonomousVmClustersDataSourceCrud{}
func (s *DatabaseAutonomousVmClustersDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *DatabaseAutonomousVmClustersDataSourceCrud) Get() error {
	request := oci_database.ListAutonomousVmClustersRequest{}
func (s *DatabaseAutonomousVmClustersDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/database/database_vm_cluster_update_history_entry_data_source.go ===
func DatabaseVmClusterUpdateHistoryEntryDataSource() *schema.Resource {
	return &schema.Resource{
func readSingularDatabaseVmClusterUpdateHistoryEntry(d *schema.ResourceData, m interface{}) error {
	sync := &DatabaseVmClusterUpdateHistoryEntryDataSourceCrud{}
func (s *DatabaseVmClusterUpdateHistoryEntryDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *DatabaseVmClusterUpdateHistoryEntryDataSourceCrud) Get() error {
	request := oci_database.GetVmClusterUpdateHistoryEntryRequest{}
func (s *DatabaseVmClusterUpdateHistoryEntryDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/database/database_cloud_exadata_infrastructure_data_source.go ===
func DatabaseCloudExadataInfrastructureDataSource() *schema.Resource {
	fieldMap := make(map[string]*schema.Schema)
func readSingularDatabaseCloudExadataInfrastructure(d *schema.ResourceData, m interface{}) error {
	sync := &DatabaseCloudExadataInfrastructureDataSourceCrud{}
func (s *DatabaseCloudExadataInfrastructureDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *DatabaseCloudExadataInfrastructureDataSourceCrud) Get() error {
	request := oci_database.GetCloudExadataInfrastructureRequest{}
func (s *DatabaseCloudExadataInfrastructureDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/database/database_flex_components_data_source.go ===
func DatabaseFlexComponentsDataSource() *schema.Resource {
	return &schema.Resource{
func readDatabaseFlexComponents(d *schema.ResourceData, m interface{}) error {
	sync := &DatabaseFlexComponentsDataSourceCrud{}
func (s *DatabaseFlexComponentsDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *DatabaseFlexComponentsDataSourceCrud) Get() error {
	request := oci_database.ListFlexComponentsRequest{}
func (s *DatabaseFlexComponentsDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/database/database_db_home_patches_data_source.go ===
func DatabaseDbHomePatchesDataSource() *schema.Resource {
	return &schema.Resource{
func readDatabaseDbHomePatches(d *schema.ResourceData, m interface{}) error {
	sync := &DatabaseDbHomePatchesDataSourceCrud{}
func (s *DatabaseDbHomePatchesDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *DatabaseDbHomePatchesDataSourceCrud) Get() error {
	request := oci_database.ListDbHomePatchesRequest{}
func (s *DatabaseDbHomePatchesDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/database/database_autonomous_database_dataguard_association_data_source.go ===
func DatabaseAutonomousDatabaseDataguardAssociationDataSource() *schema.Resource {
	return &schema.Resource{
func readSingularDatabaseAutonomousDatabaseDataguardAssociation(d *schema.ResourceData, m interface{}) error {
	sync := &DatabaseAutonomousDatabaseDataguardAssociationDataSourceCrud{}
func (s *DatabaseAutonomousDatabaseDataguardAssociationDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *DatabaseAutonomousDatabaseDataguardAssociationDataSourceCrud) Get() error {
	request := oci_database.GetAutonomousDatabaseDataguardAssociationRequest{}
func (s *DatabaseAutonomousDatabaseDataguardAssociationDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/database/database_database_data_source.go ===
func DatabaseDatabaseDataSource() *schema.Resource {
	fieldMap := make(map[string]*schema.Schema)
func readSingularDatabaseDatabase(d *schema.ResourceData, m interface{}) error {
	sync := &DatabaseDatabaseDataSourceCrud{}
func (s *DatabaseDatabaseDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *DatabaseDatabaseDataSourceCrud) Get() error {
	request := oci_database.GetDatabaseRequest{}
func (s *DatabaseDatabaseDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/database/database_vm_cluster_resource.go ===
func DatabaseVmClusterResource() *schema.Resource {
	return &schema.Resource{
func createDatabaseVmCluster(d *schema.ResourceData, m interface{}) error {
	sync := &DatabaseVmClusterResourceCrud{}
func readDatabaseVmCluster(d *schema.ResourceData, m interface{}) error {
	sync := &DatabaseVmClusterResourceCrud{}
func updateDatabaseVmCluster(d *schema.ResourceData, m interface{}) error {
	sync := &DatabaseVmClusterResourceCrud{}
func deleteDatabaseVmCluster(d *schema.ResourceData, m interface{}) error {
	sync := &DatabaseVmClusterResourceCrud{}
func (s *DatabaseVmClusterResourceCrud) ID() string {
	return *s.Res.Id
func (s *DatabaseVmClusterResourceCrud) CreatedPending() []string {
	return []string{
func (s *DatabaseVmClusterResourceCrud) CreatedTarget() []string {
	return []string{
func (s *DatabaseVmClusterResourceCrud) DeletedPending() []string {
	return []string{
func (s *DatabaseVmClusterResourceCrud) DeletedTarget() []string {
	return []string{
func (s *DatabaseVmClusterResourceCrud) UpdatedPending() []string {
	return []string{
func (s *DatabaseVmClusterResourceCrud) UpdatedTarget() []string {
	return []string{
func (s *DatabaseVmClusterResourceCrud) Create() error {
	request := oci_database.CreateVmClusterRequest{}
func (s *DatabaseVmClusterResourceCrud) Get() error {
	request := oci_database.GetVmClusterRequest{}
func (s *DatabaseVmClusterResourceCrud) Update() error {
	if compartment, ok := s.D.GetOkExists("compartment_id"); ok && s.D.HasChange("compartment_id") {
func (s *DatabaseVmClusterResourceCrud) Delete() error {
	request := oci_database.DeleteVmClusterRequest{}
func (s *DatabaseVmClusterResourceCrud) SetData() error {
	if s.Res.AvailabilityDomain != nil {
func (s *DatabaseVmClusterResourceCrud) mapToCloudAutomationApplyUpdateTimePreference(fieldKeyFormat string) (oci_database.CloudAutomationApplyUpdateTimePreference, error) {
	result := oci_database.CloudAutomationApplyUpdateTimePreference{}
func (s *DatabaseVmClusterResourceCrud) CloudAutomationApplyUpdateTimePreferenceToMap(obj *oci_database.CloudAutomationApplyUpdateTimePreference) map[string]interface{} {
	result := map[string]interface{}{}
func (s *DatabaseVmClusterResourceCrud) mapToCloudAutomationFreezePeriod(fieldKeyFormat string) (oci_database.CloudAutomationFreezePeriod, error) {
	result := oci_database.CloudAutomationFreezePeriod{}
func (s *DatabaseVmClusterResourceCrud) CloudAutomationFreezePeriodToMap(obj *oci_database.CloudAutomationFreezePeriod) map[string]interface{} {
	result := map[string]interface{}{}
func (s *DatabaseVmClusterResourceCrud) mapToCloudAutomationUpdateDetails(fieldKeyFormat string) (oci_database.CloudAutomationUpdateDetails, error) {
	result := oci_database.CloudAutomationUpdateDetails{}
func (s *DatabaseVmClusterResourceCrud) CloudAutomationUpdateDetailsToMap(obj *oci_database.CloudAutomationUpdateDetails) map[string]interface{} {
	result := map[string]interface{}{}
func (s *DatabaseVmClusterResourceCrud) mapToDataCollectionOptions(fieldKeyFormat string) (oci_database.DataCollectionOptions, error) {
	result := oci_database.DataCollectionOptions{}
func (s *DatabaseVmClusterResourceCrud) mapToFileSystemConfigurationDetail(fieldKeyFormat string) (oci_database.FileSystemConfigurationDetail, error) {
	result := oci_database.FileSystemConfigurationDetail{}
func (s *DatabaseVmClusterResourceCrud) updateCompartment(compartment interface{}) error {
	changeCompartmentRequest := oci_database.ChangeVmClusterCompartmentRequest{}

=== ./internal/service/database/database_autonomous_container_database_resource.go ===
func DatabaseAutonomousContainerDatabaseResource() *schema.Resource {
	return &schema.Resource{
func createDatabaseAutonomousContainerDatabase(d *schema.ResourceData, m interface{}) error {
	sync := &DatabaseAutonomousContainerDatabaseResourceCrud{}
func readDatabaseAutonomousContainerDatabase(d *schema.ResourceData, m interface{}) error {
	sync := &DatabaseAutonomousContainerDatabaseResourceCrud{}
func updateDatabaseAutonomousContainerDatabase(d *schema.ResourceData, m interface{}) error {
	sync := &DatabaseAutonomousContainerDatabaseResourceCrud{}
func deleteDatabaseAutonomousContainerDatabase(d *schema.ResourceData, m interface{}) error {
	sync := &DatabaseAutonomousContainerDatabaseResourceCrud{}
func (s *DatabaseAutonomousContainerDatabaseResourceCrud) ID() string {
	return *s.Res.Id
func (s *DatabaseAutonomousContainerDatabaseResourceCrud) CreatedPending() []string {
	return []string{
func (s *DatabaseAutonomousContainerDatabaseResourceCrud) CreatedTarget() []string {
	return []string{
func (s *DatabaseAutonomousContainerDatabaseResourceCrud) DeletedPending() []string {
	return []string{
func (s *DatabaseAutonomousContainerDatabaseResourceCrud) DeletedTarget() []string {
	return []string{
func (s *DatabaseAutonomousContainerDatabaseResourceCrud) UpdatedPending() []string {
	return []string{
func (s *DatabaseAutonomousContainerDatabaseResourceCrud) UpdatedTarget() []string {
	return []string{
func (s *DatabaseAutonomousContainerDatabaseResourceCrud) Create() error {
	request := oci_database.CreateAutonomousContainerDatabaseRequest{}
func (s *DatabaseAutonomousContainerDatabaseResourceCrud) Get() error {
	request := oci_database.GetAutonomousContainerDatabaseRequest{}
func (s *DatabaseAutonomousContainerDatabaseResourceCrud) Update() error {
	if compartment, ok := s.D.GetOkExists("compartment_id"); ok && s.D.HasChange("compartment_id") {
func (s *DatabaseAutonomousContainerDatabaseResourceCrud) Delete() error {
	request := oci_database.TerminateAutonomousContainerDatabaseRequest{}
func (s *DatabaseAutonomousContainerDatabaseResourceCrud) SetData() error {
	if s.Res.AutonomousExadataInfrastructureId != nil {
func (s *DatabaseAutonomousContainerDatabaseResourceCrud) mapToAutonomousContainerDatabaseBackupConfig(fieldKeyFormat string) (oci_database.AutonomousContainerDatabaseBackupConfig, error) {
	result := oci_database.AutonomousContainerDatabaseBackupConfig{}
func AutonomousContainerDatabaseBackupConfigToMap(obj *oci_database.AutonomousContainerDatabaseBackupConfig, s *DatabaseAutonomousContainerDatabaseResourceCrud, dataSource bool) map[string]interface{} {
	result := map[string]interface{}{}
func (s *DatabaseAutonomousContainerDatabaseResourceCrud) mapToBackupDestinationDetails(fieldKeyFormat string) (oci_database.BackupDestinationDetails, error) {
	result := oci_database.BackupDestinationDetails{}
func AutonomousContainerDatabaseBackupDestinationDetailsToMap(obj oci_database.BackupDestinationDetails, s *DatabaseAutonomousContainerDatabaseResourceCrud, dataSource bool, fieldKeyFormat string) map[string]interface{} {
	result := map[string]interface{}{}
func (s *DatabaseAutonomousContainerDatabaseResourceCrud) mapToDayOfWeek(fieldKeyFormat string) (oci_database.DayOfWeek, error) {
	result := oci_database.DayOfWeek{}
func (s *DatabaseAutonomousContainerDatabaseResourceCrud) mapToMaintenanceWindow(fieldKeyFormat string) (oci_database.MaintenanceWindow, error) {
	result := oci_database.MaintenanceWindow{}
func (s *DatabaseAutonomousContainerDatabaseResourceCrud) mapToMonth(fieldKeyFormat string) (oci_database.Month, error) {
	result := oci_database.Month{}
func (s *DatabaseAutonomousContainerDatabaseResourceCrud) mapToPeerAutonomousContainerDatabaseBackupConfig(fieldKeyFormat string) (oci_database.PeerAutonomousContainerDatabaseBackupConfig, error) {
	result := oci_database.PeerAutonomousContainerDatabaseBackupConfig{}
func (s *DatabaseAutonomousContainerDatabaseResourceCrud) updateCompartment(compartment interface{}) error {
	changeCompartmentRequest := oci_database.ChangeAutonomousContainerDatabaseCompartmentRequest{}
func (s *DatabaseAutonomousContainerDatabaseResourceCrud) RotateContainerDatabaseEncryptionKey() error {
	request := oci_database.RotateAutonomousContainerDatabaseEncryptionKeyRequest{}

=== ./internal/service/database/database_exadata_infrastructure_data_source.go ===
func DatabaseExadataInfrastructureDataSource() *schema.Resource {
	fieldMap := make(map[string]*schema.Schema)
func readSingularDatabaseExadataInfrastructure(d *schema.ResourceData, m interface{}) error {
	sync := &DatabaseExadataInfrastructureDataSourceCrud{}
func (s *DatabaseExadataInfrastructureDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *DatabaseExadataInfrastructureDataSourceCrud) Get() error {
	request := oci_database.GetExadataInfrastructureRequest{}
func (s *DatabaseExadataInfrastructureDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/database/database_databases_data_source.go ===
func DatabaseDatabasesDataSource() *schema.Resource {
	return &schema.Resource{
func readDatabaseDatabases(d *schema.ResourceData, m interface{}) error {
	sync := &DatabaseDatabasesDataSourceCrud{}
func (s *DatabaseDatabasesDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *DatabaseDatabasesDataSourceCrud) Get() error {
	request := oci_database.ListDatabasesRequest{}
func (s *DatabaseDatabasesDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/database/database_external_container_database_management_resource.go ===
func DatabaseExternalContainerDatabaseManagementResource() *schema.Resource {
	return &schema.Resource{
func createDatabaseExternalContainerDatabaseManagement(d *schema.ResourceData, m interface{}) error {
	sync := &DatabaseExternalContainerDatabaseManagementResourceCrud{}
func updateDatabaseExternalContainerDatabaseManagement(d *schema.ResourceData, m interface{}) error {
	sync := &DatabaseExternalContainerDatabaseManagementResourceCrud{}
func readDatabaseExternalContainerDatabaseManagement(d *schema.ResourceData, m interface{}) error {
	return nil
func deleteDatabaseExternalContainerDatabaseManagement(d *schema.ResourceData, m interface{}) error {
	sync := &DatabaseExternalContainerDatabaseManagementResourceCrud{}
func (s *DatabaseExternalContainerDatabaseManagementResourceCrud) ID() string {
	return tfresource.GenerateDataSourceHashID("DatabaseExternalContainerDatabaseManagementResource-", DatabaseExternalContainerDatabaseManagementResource(), s.D)
func (s *DatabaseExternalContainerDatabaseManagementResourceCrud) Create() error {

func (s *DatabaseExternalContainerDatabaseManagementResourceCrud) Update() error {
	var operation bool
func (s *DatabaseExternalContainerDatabaseManagementResourceCrud) Delete() error {
	var operation bool
func (s *DatabaseExternalContainerDatabaseManagementResourceCrud) SetData() error {
	return nil

=== ./internal/service/database/database_external_non_container_database_data_source.go ===
func DatabaseExternalNonContainerDatabaseDataSource() *schema.Resource {
	fieldMap := make(map[string]*schema.Schema)
func readSingularDatabaseExternalNonContainerDatabase(d *schema.ResourceData, m interface{}) error {
	sync := &DatabaseExternalNonContainerDatabaseDataSourceCrud{}
func (s *DatabaseExternalNonContainerDatabaseDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *DatabaseExternalNonContainerDatabaseDataSourceCrud) Get() error {
	request := oci_database.GetExternalNonContainerDatabaseRequest{}
func (s *DatabaseExternalNonContainerDatabaseDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/database/database_db_node_console_connection_data_source.go ===
func DatabaseDbNodeConsoleConnectionDataSource() *schema.Resource {
	fieldMap := make(map[string]*schema.Schema)
func readSingularDatabaseDbNodeConsoleConnection(d *schema.ResourceData, m interface{}) error {
	sync := &DatabaseDbNodeConsoleConnectionDataSourceCrud{}
func (s *DatabaseDbNodeConsoleConnectionDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *DatabaseDbNodeConsoleConnectionDataSourceCrud) Get() error {
	request := oci_database.GetConsoleConnectionRequest{}
func (s *DatabaseDbNodeConsoleConnectionDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/database/database_autonomous_database_backups_data_source.go ===
func DatabaseAutonomousDatabaseBackupsDataSource() *schema.Resource {
	return &schema.Resource{
func readDatabaseAutonomousDatabaseBackups(d *schema.ResourceData, m interface{}) error {
	sync := &DatabaseAutonomousDatabaseBackupsDataSourceCrud{}
func (s *DatabaseAutonomousDatabaseBackupsDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *DatabaseAutonomousDatabaseBackupsDataSourceCrud) Get() error {
	request := oci_database.ListAutonomousDatabaseBackupsRequest{}
func (s *DatabaseAutonomousDatabaseBackupsDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/database/database_database_upgrade_resource.go ===
func DatabaseDatabaseUpgradeResource() *schema.Resource {
	return &schema.Resource{
func createDatabaseDatabaseUpgrade(d *schema.ResourceData, m interface{}) error {
	sync := &DatabaseDatabaseUpgradeResourceCrud{}
func readDatabaseDatabaseUpgrade(d *schema.ResourceData, m interface{}) error {
	sync := &DatabaseDatabaseUpgradeResourceCrud{}
func deleteDatabaseDatabaseUpgrade(d *schema.ResourceData, m interface{}) error {
	return nil
func (s *DatabaseDatabaseUpgradeResourceCrud) ID() string {
	return *s.Res.Id
func (s *DatabaseDatabaseUpgradeResourceCrud) CreatedPending() []string {
	return []string{
func (s *DatabaseDatabaseUpgradeResourceCrud) CreatedTarget() []string {
	return []string{
func (s *DatabaseDatabaseUpgradeResourceCrud) Create() error {
	request := oci_database.UpgradeDatabaseRequest{}
func (s *DatabaseDatabaseUpgradeResourceCrud) getDatabaseUpgradeFromWorkRequest(workId *string, actionTypeEnum oci_work_requests.WorkRequestResourceActionTypeEnum, timeout time.Duration) error {
	databaseUpgradeId, err := tfresource.WaitForWorkRequest(s.WorkRequestClient, workId, "database", actionTypeEnum, timeout, s.DisableNotFoundRetries, true)
func (s *DatabaseDatabaseUpgradeResourceCrud) SetData() error {
	if s.Res.CharacterSet != nil {
func (s *DatabaseDatabaseUpgradeResourceCrud) Get() error {
	request := oci_database.GetDatabaseRequest{}
func (s *DatabaseDatabaseUpgradeResourceCrud) mapToDatabaseUpgradeSourceBase(fieldKeyFormat string) (oci_database.DatabaseUpgradeSourceBase, error) {
	var baseObject oci_database.DatabaseUpgradeSourceBase

=== ./internal/service/database/database_vm_clusters_data_source.go ===
func DatabaseVmClustersDataSource() *schema.Resource {
	return &schema.Resource{
func readDatabaseVmClusters(d *schema.ResourceData, m interface{}) error {
	sync := &DatabaseVmClustersDataSourceCrud{}
func (s *DatabaseVmClustersDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *DatabaseVmClustersDataSourceCrud) Get() error {
	request := oci_database.ListVmClustersRequest{}
func (s *DatabaseVmClustersDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/database/database_autonomous_databases_data_source.go ===
func DatabaseAutonomousDatabasesDataSource() *schema.Resource {
	return &schema.Resource{
func readDatabaseAutonomousDatabases(d *schema.ResourceData, m interface{}) error {
	sync := &DatabaseAutonomousDatabasesDataSourceCrud{}
func (s *DatabaseAutonomousDatabasesDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *DatabaseAutonomousDatabasesDataSourceCrud) Get() error {
	request := oci_database.ListAutonomousDatabasesRequest{}
func (s *DatabaseAutonomousDatabasesDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/database/database_autonomous_database_refreshable_clones_data_source.go ===
func DatabaseAutonomousDatabaseRefreshableClonesDataSource() *schema.Resource {
	return &schema.Resource{
func readDatabaseAutonomousDatabaseRefreshableClones(d *schema.ResourceData, m interface{}) error {
	sync := &DatabaseAutonomousDatabaseRefreshableClonesDataSourceCrud{}
func (s *DatabaseAutonomousDatabaseRefreshableClonesDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *DatabaseAutonomousDatabaseRefreshableClonesDataSourceCrud) Get() error {
	request := oci_database.ListAutonomousDatabaseRefreshableClonesRequest{}
func (s *DatabaseAutonomousDatabaseRefreshableClonesDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/database/database_externalcontainerdatabases_stack_monitoring_resource.go ===
func DatabaseExternalcontainerdatabasesStackMonitoringResource() *schema.Resource {
	return &schema.Resource{
func createDatabaseExternalcontainerdatabasesStackMonitoring(d *schema.ResourceData, m interface{}) error {
	sync := &DatabaseExternalcontainerdatabasesStackMonitoringResourceCrud{}
func updateDatabaseExternalcontainerdatabasesStackMonitoring(d *schema.ResourceData, m interface{}) error {
	return nil
func readDatabaseExternalcontainerdatabasesStackMonitoring(d *schema.ResourceData, m interface{}) error {
	return nil
func deleteDatabaseExternalcontainerdatabasesStackMonitoring(d *schema.ResourceData, m interface{}) error {
	sync := &DatabaseExternalcontainerdatabasesStackMonitoringResourceCrud{}
func (s *DatabaseExternalcontainerdatabasesStackMonitoringResourceCrud) ID() string {
	return tfresource.GenerateDataSourceHashID("DatabaseExternalcontainerdatabasesStackMonitoringResource-", DatabaseExternalcontainerdatabasesStackMonitoringResource(), s.D)
func (s *DatabaseExternalcontainerdatabasesStackMonitoringResourceCrud) Create() error {
	var operation_stack_monitoring bool
func (s *DatabaseExternalcontainerdatabasesStackMonitoringResourceCrud) Delete() error {
	var operation_stack_monitoring bool
func (s *DatabaseExternalcontainerdatabasesStackMonitoringResourceCrud) SetData() error {
	return nil

=== ./internal/service/database/database_db_node_console_connection_resource.go ===
func DatabaseDbNodeConsoleConnectionResource() *schema.Resource {
	return &schema.Resource{
func createDatabaseDbNodeConsoleConnection(d *schema.ResourceData, m interface{}) error {
	sync := &DatabaseDbNodeConsoleConnectionResourceCrud{}
func readDatabaseDbNodeConsoleConnection(d *schema.ResourceData, m interface{}) error {
	sync := &DatabaseDbNodeConsoleConnectionResourceCrud{}
func updateDatabaseDbNodeConsoleConnection(d *schema.ResourceData, m interface{}) error {
	sync := &DatabaseDbNodeConsoleConnectionResourceCrud{}
func deleteDatabaseDbNodeConsoleConnection(d *schema.ResourceData, m interface{}) error {
	sync := &DatabaseDbNodeConsoleConnectionResourceCrud{}
func (s *DatabaseDbNodeConsoleConnectionResourceCrud) ID() string {
	return GetDbNodeConsoleConnectionCompositeId(s.D.Get("db_node_id").(string), *s.Res.Id)
func (s *DatabaseDbNodeConsoleConnectionResourceCrud) CreatedPending() []string {
	return []string{
func (s *DatabaseDbNodeConsoleConnectionResourceCrud) CreatedTarget() []string {
	return []string{
func (s *DatabaseDbNodeConsoleConnectionResourceCrud) DeletedPending() []string {
	return []string{
func (s *DatabaseDbNodeConsoleConnectionResourceCrud) DeletedTarget() []string {
	return []string{
func (s *DatabaseDbNodeConsoleConnectionResourceCrud) Create() error {
	request := oci_database.CreateConsoleConnectionRequest{}
func (s *DatabaseDbNodeConsoleConnectionResourceCrud) Get() error {
	request := oci_database.GetConsoleConnectionRequest{}
func (s *DatabaseDbNodeConsoleConnectionResourceCrud) Update() error {
	request := oci_database.UpdateConsoleConnectionRequest{}
func (s *DatabaseDbNodeConsoleConnectionResourceCrud) Delete() error {
	request := oci_database.DeleteConsoleConnectionRequest{}
func (s *DatabaseDbNodeConsoleConnectionResourceCrud) SetData() error {


=== ./internal/service/database/database_pluggable_database_pluggabledatabasemanagements_management_resource.go ===
func DatabasePluggableDatabasePluggabledatabasemanagementsManagementResource() *schema.Resource {
	return &schema.Resource{
func createDatabasePluggableDatabasePluggabledatabasemanagementsManagement(d *schema.ResourceData, m interface{}) error {
	sync := &DatabasePluggableDatabasePluggabledatabasemanagementsManagementResourceCrud{}
func readDatabasePluggableDatabasePluggabledatabasemanagementsManagement(d *schema.ResourceData, m interface{}) error {
	return nil
func updateDatabasePluggableDatabasePluggabledatabasemanagementsManagement(d *schema.ResourceData, m interface{}) error {
	sync := &DatabasePluggableDatabasePluggabledatabasemanagementsManagementResourceCrud{}
func deleteDatabasePluggableDatabasePluggabledatabasemanagementsManagement(d *schema.ResourceData, m interface{}) error {
	sync := &DatabasePluggableDatabasePluggabledatabasemanagementsManagementResourceCrud{}
func (s *DatabasePluggableDatabasePluggabledatabasemanagementsManagementResourceCrud) ID() string {
	return tfresource.GenerateDataSourceHashID("DatabasePluggableDatabasePluggabledatabasemanagementsManagementResource-", DatabasePluggableDatabasePluggabledatabasemanagementsManagementResource(), s.D)
func (s *DatabasePluggableDatabasePluggabledatabasemanagementsManagementResourceCrud) Create() error {
	var operation bool
func (s *DatabasePluggableDatabasePluggabledatabasemanagementsManagementResourceCrud) Update() error {
	var operation bool
func (s *DatabasePluggableDatabasePluggabledatabasemanagementsManagementResourceCrud) Delete() error {
	var operation bool
func (s *DatabasePluggableDatabasePluggabledatabasemanagementsManagementResourceCrud) SetData() error {
	return nil
func (s *DatabasePluggableDatabasePluggabledatabasemanagementsManagementResourceCrud) mapToDatabaseCredentialDetails(fieldKeyFormat string) (oci_database.DatabaseCredentialDetails, error) {
	result := oci_database.DatabaseCredentialDetails{}

=== ./internal/service/database/database_backups_data_source.go ===
func DatabaseBackupsDataSource() *schema.Resource {
	return &schema.Resource{
func readDatabaseBackups(d *schema.ResourceData, m interface{}) error {
	sync := &DatabaseBackupsDataSourceCrud{}
func (s *DatabaseBackupsDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *DatabaseBackupsDataSourceCrud) Get() error {
	request := oci_database.ListBackupsRequest{}
func (s *DatabaseBackupsDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/database/database_application_vip_data_source.go ===
func DatabaseApplicationVipDataSource() *schema.Resource {
	fieldMap := make(map[string]*schema.Schema)
func readSingularDatabaseApplicationVip(d *schema.ResourceData, m interface{}) error {
	sync := &DatabaseApplicationVipDataSourceCrud{}
func (s *DatabaseApplicationVipDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *DatabaseApplicationVipDataSourceCrud) Get() error {
	request := oci_database.GetApplicationVipRequest{}
func (s *DatabaseApplicationVipDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/database/database_db_homes_data_source.go ===
func DatabaseDbHomesDataSource() *schema.Resource {
	return &schema.Resource{
func readDatabaseDbHomes(d *schema.ResourceData, m interface{}) error {
	sync := &DatabaseDbHomesDataSourceCrud{}
func (s *DatabaseDbHomesDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *DatabaseDbHomesDataSourceCrud) Get() error {
	request := oci_database.ListDbHomesRequest{}
func (s *DatabaseDbHomesDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/database/database_db_system_resource.go ===
func DatabaseDbSystemResource() *schema.Resource {
	return &schema.Resource{
func createDatabaseDbSystem(d *schema.ResourceData, m interface{}) error {
	sync := &DatabaseDbSystemResourceCrud{}
func readDatabaseDbSystem(d *schema.ResourceData, m interface{}) error {
	sync := &DatabaseDbSystemResourceCrud{}
func updateDatabaseDbSystem(d *schema.ResourceData, m interface{}) error {
	sync := &DatabaseDbSystemResourceCrud{}
func deleteDatabaseDbSystem(d *schema.ResourceData, m interface{}) error {
	sync := &DatabaseDbSystemResourceCrud{}
func (s *DatabaseDbSystemResourceCrud) ID() string {
	return *s.Res.Id
func (s *DatabaseDbSystemResourceCrud) CreatedPending() []string {
	return []string{
func (s *DatabaseDbSystemResourceCrud) CreatedTarget() []string {
	if createAsyn, ok := s.D.GetOk("create_async"); ok {
func (s *DatabaseDbSystemResourceCrud) DeletedPending() []string {
	return []string{
func (s *DatabaseDbSystemResourceCrud) DeletedTarget() []string {
	return []string{
func (s *DatabaseDbSystemResourceCrud) UpdatedPending() []string {
	return []string{
func (s *DatabaseDbSystemResourceCrud) UpdatedTarget() []string {
	return []string{
func (s *DatabaseDbSystemResourceCrud) Create() error {
	request := oci_database.LaunchDbSystemRequest{}
func (s *DatabaseDbSystemResourceCrud) Get() error {
	request := oci_database.GetDbSystemRequest{}
func (s *DatabaseDbSystemResourceCrud) Update() error {
	if compartment, ok := s.D.GetOkExists("compartment_id"); ok && s.D.HasChange("compartment_id") {
func (s *DatabaseDbSystemResourceCrud) Delete() error {
	request := oci_database.TerminateDbSystemRequest{}
func (s *DatabaseDbSystemResourceCrud) SetData() error {

func (s *DatabaseDbSystemResourceCrud) mapToBackupDestinationDetails(fieldKeyFormat string) (oci_database.BackupDestinationDetails, error) {
	result := oci_database.BackupDestinationDetails{}
func (s *DatabaseDbSystemResourceCrud) mapToCreateDatabaseDetails(fieldKeyFormat string) (oci_database.CreateDatabaseDetails, error) {
	result := oci_database.CreateDatabaseDetails{}
func (s *DatabaseDbSystemResourceCrud) mapToCreateDatabaseFromAnotherDatabaseDetails(fieldKeyFormat string) (oci_database.CreateDatabaseFromAnotherDatabaseDetails, error) {
	result := oci_database.CreateDatabaseFromAnotherDatabaseDetails{}
func (s *DatabaseDbSystemResourceCrud) mapToCreateDatabaseFromBackupDetails(fieldKeyFormat string) (oci_database.CreateDatabaseFromBackupDetails, error) {
	result := oci_database.CreateDatabaseFromBackupDetails{}
func (s *DatabaseDbSystemResourceCrud) mapToCreateDatabaseFromDbSystemDetails(fieldKeyFormat string) (oci_database.CreateDatabaseFromDbSystemDetails, error) {
	result := oci_database.CreateDatabaseFromDbSystemDetails{}
func (s *DatabaseDbSystemResourceCrud) mapToCreateDbHomeDetails(fieldKeyFormat string) (oci_database.CreateDbHomeDetails, error) {
	result := oci_database.CreateDbHomeDetails{}
func (s *DatabaseDbSystemResourceCrud) mapToCreateDbHomeFromBackupDetails(fieldKeyFormat string) (oci_database.CreateDbHomeFromBackupDetails, error) {
	result := oci_database.CreateDbHomeFromBackupDetails{}
func (s *DatabaseDbSystemResourceCrud) mapToCreateDbHomeFromDbSystemDetails(fieldKeyFormat string) (oci_database.CreateDbHomeFromDbSystemDetails, error) {
	result := oci_database.CreateDbHomeFromDbSystemDetails{}
func (s *DatabaseDbSystemResourceCrud) mapToCreateDbHomeFromDatabaseDetails(fieldKeyFormat string) (oci_database.CreateDbHomeFromDatabaseDetails, error) {
	result := oci_database.CreateDbHomeFromDatabaseDetails{}
func (s *DatabaseDbSystemResourceCrud) mapToDataCollectionOptions(fieldKeyFormat string) (oci_database.DataCollectionOptions, error) {
	result := oci_database.DataCollectionOptions{}
func (s *DatabaseDbSystemResourceCrud) mapToDayOfWeek(fieldKeyFormat string) (oci_database.DayOfWeek, error) {
	result := oci_database.DayOfWeek{}
func (s *DatabaseDbSystemResourceCrud) mapToDbBackupConfig(fieldKeyFormat string) (oci_database.DbBackupConfig, error) {
	result := oci_database.DbBackupConfig{}
func (s *DatabaseDbSystemResourceCrud) mapToDbSystemOptions(fieldKeyFormat string) (oci_database.DbSystemOptions, error) {
	result := oci_database.DbSystemOptions{}
func (s *DatabaseDbSystemResourceCrud) mapToMaintenanceWindow(fieldKeyFormat string) (oci_database.MaintenanceWindow, error) {
	result := oci_database.MaintenanceWindow{}
func (s *DatabaseDbSystemResourceCrud) mapToMonth(fieldKeyFormat string) (oci_database.Month, error) {
	result := oci_database.Month{}
func (s *DatabaseDbSystemResourceCrud) populateTopLevelPolymorphicLaunchDbSystemRequest(request *oci_database.LaunchDbSystemRequest) error {
	//discriminator
func (s *DatabaseDbSystemResourceCrud) updateCompartment(compartment interface{}) error {
	changeCompartmentRequest := oci_database.ChangeDbSystemCompartmentRequest{}
func (s *DatabaseDbSystemResourceCrud) mapToUpdateDbBackupConfig(fieldKeyFormat string) (oci_database.DbBackupConfig, error) {
	result := oci_database.DbBackupConfig{}
func (s *DatabaseDbSystemResourceCrud) getDbHomeInfo() error {
	if s.DbHome == nil {
func (s *DatabaseDbSystemResourceCrud) UpdateDatabaseOperation() error {
	err := s.getDbHomeInfo()
func (s *DatabaseDbSystemResourceCrud) setDbKeyVersion() error {
	setDbKeyVersionRequest := oci_database.SetDbKeyVersionRequest{}
func (s *DatabaseDbSystemResourceCrud) sendUpdateForLicenseModel(dbSystemId string, licenseModel interface{}) error {
	request := oci_database.UpdateDbSystemRequest{}
func (s *DatabaseDbSystemResourceCrud) mapToUpdateDatabaseDetails(fieldKeyFormat string) (oci_database.UpdateDatabaseDetails, error) {
	result := oci_database.UpdateDatabaseDetails{}
func (s *DatabaseDbSystemResourceCrud) DbHomeToMap(obj *oci_database.DbHome) map[string]interface{} {
	result := map[string]interface{}{}
func (s *DatabaseDbSystemResourceCrud) DatabaseToMap(obj *oci_database.Database) map[string]interface{} {
	result := map[string]interface{}{}
func createDBSystemResource(d *schema.ResourceData, sync tfresource.ResourceCreator) error {
	if e := sync.Create(); e != nil {
func disableAutoBackupDbSystemSuppressfunc(k string, old, new string, d *schema.ResourceData) bool {
	// if autoBackupEnabled is false then ignore any field in the state and config backupWindow

=== ./internal/service/database/register_resource.go ===
func RegisterResource() {
	tfresource.RegisterResource("oci_database_application_vip", DatabaseApplicationVipResource())

=== ./internal/service/database/database_exadata_iorm_config_resource.go ===
func DatabaseExadataIormConfigResource() *schema.Resource {
	return &schema.Resource{
func createDatabaseExadataIormConfig(d *schema.ResourceData, m interface{}) error {
	sync := &DatabaseExadataIormConfigResourceCrud{}
func readDatabaseExadataIormConfig(d *schema.ResourceData, m interface{}) error {
	sync := &DatabaseExadataIormConfigResourceCrud{}
func updateDatabaseExadataIormConfig(d *schema.ResourceData, m interface{}) error {
	sync := &DatabaseExadataIormConfigResourceCrud{}
func deleteDatabaseExadataIormConfig(d *schema.ResourceData, m interface{}) error {
	sync := &DatabaseExadataIormConfigResourceCrud{}
func (s *DatabaseExadataIormConfigResourceCrud) ID() string {
	return s.D.Get("db_system_id").(string)
func (s *DatabaseExadataIormConfigResourceCrud) CreatedPending() []string {
	return []string{
func (s *DatabaseExadataIormConfigResourceCrud) CreatedTarget() []string {
	return []string{
func (s *DatabaseExadataIormConfigResourceCrud) DeletedPending() []string {
	return []string{
func (s *DatabaseExadataIormConfigResourceCrud) DeletedTarget() []string {
	return []string{
func (s *DatabaseExadataIormConfigResourceCrud) Create() error {
	request := oci_database.GetExadataIormConfigRequest{}
func (s *DatabaseExadataIormConfigResourceCrud) Get() error {
	request := oci_database.GetExadataIormConfigRequest{}
func (s *DatabaseExadataIormConfigResourceCrud) Update() error {
	request := oci_database.UpdateExadataIormConfigRequest{}
func (s *DatabaseExadataIormConfigResourceCrud) SetData() error {

func (s *DatabaseExadataIormConfigResourceCrud) mapTodbIormConfigUpdateDetail(fieldKeyFormat string) (oci_database.DbIormConfigUpdateDetail, error) {
	result := oci_database.DbIormConfigUpdateDetail{}
func (s *DatabaseExadataIormConfigResourceCrud) Delete() error {
	request := oci_database.UpdateExadataIormConfigRequest{}

=== ./internal/service/database/database_vm_cluster_update_history_entries_data_source.go ===
func DatabaseVmClusterUpdateHistoryEntriesDataSource() *schema.Resource {
	return &schema.Resource{
func readDatabaseVmClusterUpdateHistoryEntries(d *schema.ResourceData, m interface{}) error {
	sync := &DatabaseVmClusterUpdateHistoryEntriesDataSourceCrud{}
func (s *DatabaseVmClusterUpdateHistoryEntriesDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *DatabaseVmClusterUpdateHistoryEntriesDataSourceCrud) Get() error {
	request := oci_database.ListVmClusterUpdateHistoryEntriesRequest{}
func (s *DatabaseVmClusterUpdateHistoryEntriesDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/database/database_autonomous_vm_cluster_ssl_certificate_management_resource.go ===
func DatabaseAutonomousVmClusterSslCertificateManagementResource() *schema.Resource {
	return &schema.Resource{
func createDatabaseAutonomousVmClusterSslCertificateManagement(d *schema.ResourceData, m interface{}) error {
	sync := &DatabaseAutonomousVmClusterSslCertificateManagementResourceCrud{}
func readDatabaseAutonomousVmClusterSslCertificateManagement(d *schema.ResourceData, m interface{}) error {
	return nil
func deleteDatabaseAutonomousVmClusterSslCertificateManagement(d *schema.ResourceData, m interface{}) error {
	return nil
func (s *DatabaseAutonomousVmClusterSslCertificateManagementResourceCrud) ID() string {
	return tfresource.GenerateDataSourceHashID("DatabaseAutonomousVmClusterSslCertificateManagementResource-", DatabaseAutonomousVmClusterSslCertificateManagementResource(), s.D)
func (s *DatabaseAutonomousVmClusterSslCertificateManagementResourceCrud) Create() error {
	request := oci_database.RotateAutonomousVmClusterSslCertsRequest{}
func (s *DatabaseAutonomousVmClusterSslCertificateManagementResourceCrud) SetData() error {
	return nil

=== ./internal/service/database/database_exadata_iorm_config_data_source.go ===
func DatabaseExadataIormConfigDataSource() *schema.Resource {
	fieldMap := make(map[string]*schema.Schema)
func readSingularDatabaseExadataIormConfig(d *schema.ResourceData, m interface{}) error {
	sync := &DatabaseExadataIormConfigDataSourceCrud{}
func (s *DatabaseExadataIormConfigDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *DatabaseExadataIormConfigDataSourceCrud) Get() error {
	request := oci_database.GetExadataIormConfigRequest{}
func (s *DatabaseExadataIormConfigDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/database/database_external_pluggable_database_management_resource.go ===
func DatabaseExternalPluggableDatabaseManagementResource() *schema.Resource {
	return &schema.Resource{
func createDatabaseExternalPluggableDatabaseManagement(d *schema.ResourceData, m interface{}) error {
	sync := &DatabaseExternalPluggableDatabaseManagementResourceCrud{}
func updateDatabaseExternalPluggableDatabaseManagement(d *schema.ResourceData, m interface{}) error {
	sync := &DatabaseExternalPluggableDatabaseManagementResourceCrud{}
func readDatabaseExternalPluggableDatabaseManagement(d *schema.ResourceData, m interface{}) error {
	return nil
func deleteDatabaseExternalPluggableDatabaseManagement(d *schema.ResourceData, m interface{}) error {
	sync := &DatabaseExternalPluggableDatabaseManagementResourceCrud{}
func (s *DatabaseExternalPluggableDatabaseManagementResourceCrud) ID() string {
	return tfresource.GenerateDataSourceHashID("DatabaseExternalPluggableDatabaseManagementResource-", DatabaseExternalPluggableDatabaseManagementResource(), s.D)
func (s *DatabaseExternalPluggableDatabaseManagementResourceCrud) Create() error {

func (s *DatabaseExternalPluggableDatabaseManagementResourceCrud) Update() error {
	var operation bool
func (s *DatabaseExternalPluggableDatabaseManagementResourceCrud) Delete() error {
	var operation bool
func (s *DatabaseExternalPluggableDatabaseManagementResourceCrud) SetData() error {
	return nil

=== ./internal/service/database/database_system_versions_data_source.go ===
func DatabaseSystemVersionsDataSource() *schema.Resource {
	return &schema.Resource{
func readDatabaseSystemVersions(d *schema.ResourceData, m interface{}) error {
	sync := &DatabaseSystemVersionsDataSourceCrud{}
func (s *DatabaseSystemVersionsDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *DatabaseSystemVersionsDataSourceCrud) Get() error {
	request := oci_database.ListSystemVersionsRequest{}
func (s *DatabaseSystemVersionsDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/database/database_external_non_container_databases_data_source.go ===
func DatabaseExternalNonContainerDatabasesDataSource() *schema.Resource {
	return &schema.Resource{
func readDatabaseExternalNonContainerDatabases(d *schema.ResourceData, m interface{}) error {
	sync := &DatabaseExternalNonContainerDatabasesDataSourceCrud{}
func (s *DatabaseExternalNonContainerDatabasesDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *DatabaseExternalNonContainerDatabasesDataSourceCrud) Get() error {
	request := oci_database.ListExternalNonContainerDatabasesRequest{}
func (s *DatabaseExternalNonContainerDatabasesDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/cloud_guard/cloud_guard_targets_data_source.go ===
func CloudGuardTargetsDataSource() *schema.Resource {
	return &schema.Resource{
func readCloudGuardTargets(d *schema.ResourceData, m interface{}) error {
	sync := &CloudGuardTargetsDataSourceCrud{}
func (s *CloudGuardTargetsDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *CloudGuardTargetsDataSourceCrud) Get() error {
	request := oci_cloud_guard.ListTargetsRequest{}
func (s *CloudGuardTargetsDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/cloud_guard/cloud_guard_resources_data_source.go ===
func CloudGuardResourcesDataSource() *schema.Resource {
	return &schema.Resource{
func readCloudGuardResources(d *schema.ResourceData, m interface{}) error {
	sync := &CloudGuardResourcesDataSourceCrud{}
func (s *CloudGuardResourcesDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *CloudGuardResourcesDataSourceCrud) Get() error {
	request := oci_cloud_guard.ListResourcesRequest{}
func (s *CloudGuardResourcesDataSourceCrud) SetData() error {
	if s.Res == nil {
func ResourceAdditionalDetailsToMap(obj *oci_cloud_guard.ResourceAdditionalDetails) map[string]interface{} {
	result := map[string]interface{}{}
func ResourceSummaryToMap(obj oci_cloud_guard.ResourceSummary) map[string]interface{} {
	result := map[string]interface{}{}

=== ./internal/service/cloud_guard/cloud_guard_security_recipes_data_source.go ===
func CloudGuardSecurityRecipesDataSource() *schema.Resource {
	return &schema.Resource{
func readCloudGuardSecurityRecipes(d *schema.ResourceData, m interface{}) error {
	sync := &CloudGuardSecurityRecipesDataSourceCrud{}
func (s *CloudGuardSecurityRecipesDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *CloudGuardSecurityRecipesDataSourceCrud) Get() error {
	request := oci_cloud_guard.ListSecurityRecipesRequest{}
func (s *CloudGuardSecurityRecipesDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/cloud_guard/cloud_guard_problem_entities_data_source.go ===
func CloudGuardProblemEntitiesDataSource() *schema.Resource {
	return &schema.Resource{
func readCloudGuardProblemEntities(d *schema.ResourceData, m interface{}) error {
	sync := &CloudGuardProblemEntitiesDataSourceCrud{}
func (s *CloudGuardProblemEntitiesDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *CloudGuardProblemEntitiesDataSourceCrud) Get() error {
	request := oci_cloud_guard.ListProblemEntitiesRequest{}
func (s *CloudGuardProblemEntitiesDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/cloud_guard/cloud_guard_resource_vulnerability_data_source.go ===
func CloudGuardResourceVulnerabilityDataSource() *schema.Resource {
	return &schema.Resource{
func readSingularCloudGuardResourceVulnerability(d *schema.ResourceData, m interface{}) error {
	sync := &CloudGuardResourceVulnerabilityDataSourceCrud{}
func (s *CloudGuardResourceVulnerabilityDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *CloudGuardResourceVulnerabilityDataSourceCrud) Get() error {
	request := oci_cloud_guard.GetResourceVulnerabilityRequest{}
func (s *CloudGuardResourceVulnerabilityDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/cloud_guard/cloud_guard_data_mask_rule_resource.go ===
func CloudGuardDataMaskRuleResource() *schema.Resource {
	return &schema.Resource{
func createCloudGuardDataMaskRule(d *schema.ResourceData, m interface{}) error {
	sync := &CloudGuardDataMaskRuleResourceCrud{}
func readCloudGuardDataMaskRule(d *schema.ResourceData, m interface{}) error {
	sync := &CloudGuardDataMaskRuleResourceCrud{}
func updateCloudGuardDataMaskRule(d *schema.ResourceData, m interface{}) error {
	sync := &CloudGuardDataMaskRuleResourceCrud{}
func deleteCloudGuardDataMaskRule(d *schema.ResourceData, m interface{}) error {
	sync := &CloudGuardDataMaskRuleResourceCrud{}
func (s *CloudGuardDataMaskRuleResourceCrud) ID() string {
	return *s.Res.Id
func (s *CloudGuardDataMaskRuleResourceCrud) CreatedPending() []string {
	return []string{
func (s *CloudGuardDataMaskRuleResourceCrud) CreatedTarget() []string {
	return []string{
func (s *CloudGuardDataMaskRuleResourceCrud) DeletedPending() []string {
	return []string{
func (s *CloudGuardDataMaskRuleResourceCrud) DeletedTarget() []string {
	return []string{
func (s *CloudGuardDataMaskRuleResourceCrud) Create() error {
	request := oci_cloud_guard.CreateDataMaskRuleRequest{}
func (s *CloudGuardDataMaskRuleResourceCrud) Get() error {
	request := oci_cloud_guard.GetDataMaskRuleRequest{}
func (s *CloudGuardDataMaskRuleResourceCrud) Update() error {
	request := oci_cloud_guard.UpdateDataMaskRuleRequest{}
func (s *CloudGuardDataMaskRuleResourceCrud) Delete() error {
	request := oci_cloud_guard.DeleteDataMaskRuleRequest{}
func (s *CloudGuardDataMaskRuleResourceCrud) SetData() error {
	if s.Res.CompartmentId != nil {
func (s *CloudGuardDataMaskRuleResourceCrud) mapToTargetSelected(fieldKeyFormat string) (oci_cloud_guard.TargetSelected, error) {
	var baseObject oci_cloud_guard.TargetSelected

=== ./internal/service/cloud_guard/cloud_guard_adhoc_query_results_data_source.go ===
func CloudGuardAdhocQueryResultsDataSource() *schema.Resource {
	return &schema.Resource{
func readCloudGuardAdhocQueryResults(d *schema.ResourceData, m interface{}) error {
	sync := &CloudGuardAdhocQueryResultsDataSourceCrud{}
func (s *CloudGuardAdhocQueryResultsDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *CloudGuardAdhocQueryResultsDataSourceCrud) Get() error {
	request := oci_cloud_guard.ListAdhocQueryResultsRequest{}
func (s *CloudGuardAdhocQueryResultsDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/cloud_guard/cloud_guard_detector_recipe_data_source.go ===
func CloudGuardDetectorRecipeDataSource() *schema.Resource {
	fieldMap := make(map[string]*schema.Schema)
func readSingularCloudGuardDetectorRecipe(d *schema.ResourceData, m interface{}) error {
	sync := &CloudGuardDetectorRecipeDataSourceCrud{}
func (s *CloudGuardDetectorRecipeDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *CloudGuardDetectorRecipeDataSourceCrud) Get() error {
	request := oci_cloud_guard.GetDetectorRecipeRequest{}
func (s *CloudGuardDetectorRecipeDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/cloud_guard/cloud_guard_adhoc_query_resource.go ===
func CloudGuardAdhocQueryResource() *schema.Resource {
	return &schema.Resource{
func createCloudGuardAdhocQuery(d *schema.ResourceData, m interface{}) error {
	sync := &CloudGuardAdhocQueryResourceCrud{}
func readCloudGuardAdhocQuery(d *schema.ResourceData, m interface{}) error {
	sync := &CloudGuardAdhocQueryResourceCrud{}
func deleteCloudGuardAdhocQuery(d *schema.ResourceData, m interface{}) error {
	sync := &CloudGuardAdhocQueryResourceCrud{}
func (s *CloudGuardAdhocQueryResourceCrud) ID() string {
	return *s.Res.Id
func (s *CloudGuardAdhocQueryResourceCrud) CreatedPending() []string {
	return []string{
func (s *CloudGuardAdhocQueryResourceCrud) CreatedTarget() []string {
	return []string{
func (s *CloudGuardAdhocQueryResourceCrud) DeletedPending() []string {
	return []string{
func (s *CloudGuardAdhocQueryResourceCrud) DeletedTarget() []string {
	return []string{
func (s *CloudGuardAdhocQueryResourceCrud) Create() error {
	request := oci_cloud_guard.CreateAdhocQueryRequest{}
func (s *CloudGuardAdhocQueryResourceCrud) Get() error {
	request := oci_cloud_guard.GetAdhocQueryRequest{}
func (s *CloudGuardAdhocQueryResourceCrud) Delete() error {
	request := oci_cloud_guard.DeleteAdhocQueryRequest{}
func (s *CloudGuardAdhocQueryResourceCrud) SetData() error {
	if s.Res.AdhocQueryDetails != nil {
func (s *CloudGuardAdhocQueryResourceCrud) mapToAdhocQueryDetails(fieldKeyFormat string) (oci_cloud_guard.AdhocQueryDetails, error) {
	result := oci_cloud_guard.AdhocQueryDetails{}
func (s *CloudGuardAdhocQueryResourceCrud) mapToAdhocQueryResource(fieldKeyFormat string) (oci_cloud_guard.AdhocQueryResource, error) {
	result := oci_cloud_guard.AdhocQueryResource{}
func AdhocQueryResourceToMap(obj oci_cloud_guard.AdhocQueryResource) map[string]interface{} {
	result := map[string]interface{}{}

=== ./internal/service/cloud_guard/cloud_guard_data_source_resource.go ===
func CloudGuardDataSourceResource() *schema.Resource {
	return &schema.Resource{
func createCloudGuardDataSource(d *schema.ResourceData, m interface{}) error {
	sync := &CloudGuardDataSourceResourceCrud{}
func readCloudGuardDataSource(d *schema.ResourceData, m interface{}) error {
	sync := &CloudGuardDataSourceResourceCrud{}
func updateCloudGuardDataSource(d *schema.ResourceData, m interface{}) error {
	sync := &CloudGuardDataSourceResourceCrud{}
func deleteCloudGuardDataSource(d *schema.ResourceData, m interface{}) error {
	sync := &CloudGuardDataSourceResourceCrud{}
func (s *CloudGuardDataSourceResourceCrud) ID() string {
	return *s.Res.Id
func (s *CloudGuardDataSourceResourceCrud) CreatedPending() []string {
	return []string{
func (s *CloudGuardDataSourceResourceCrud) CreatedTarget() []string {
	return []string{
func (s *CloudGuardDataSourceResourceCrud) DeletedPending() []string {
	return []string{
func (s *CloudGuardDataSourceResourceCrud) DeletedTarget() []string {
	return []string{
func (s *CloudGuardDataSourceResourceCrud) Create() error {
	request := oci_cloud_guard.CreateDataSourceRequest{}
func (s *CloudGuardDataSourceResourceCrud) getDataSourceFromWorkRequest(workId *string, retryPolicy *oci_common.RetryPolicy,
	actionTypeEnum oci_cloud_guard.ActionTypeEnum, timeout time.Duration) error {
func getErrorFromCloudGuardDataSourceWorkRequest(client *oci_cloud_guard.CloudGuardClient, workId *string, retryPolicy *oci_common.RetryPolicy, entityType string, action oci_cloud_guard.ActionTypeEnum) error {
	response, err := client.ListWorkRequestErrors(context.Background(),
func (s *CloudGuardDataSourceResourceCrud) Get() error {
	request := oci_cloud_guard.GetDataSourceRequest{}
func (s *CloudGuardDataSourceResourceCrud) Update() error {
	if compartment, ok := s.D.GetOkExists("compartment_id"); ok && s.D.HasChange("compartment_id") {
func (s *CloudGuardDataSourceResourceCrud) Delete() error {
	request := oci_cloud_guard.DeleteDataSourceRequest{}
func (s *CloudGuardDataSourceResourceCrud) SetData() error {
	if s.Res.CompartmentId != nil {
func (s *CloudGuardDataSourceResourceCrud) mapToContinuousQueryStartPolicy(fieldKeyFormat string) (oci_cloud_guard.ContinuousQueryStartPolicy, error) {
	var baseObject oci_cloud_guard.ContinuousQueryStartPolicy
func (s *CloudGuardDataSourceResourceCrud) mapToDataSourceDetails(fieldKeyFormat string) (oci_cloud_guard.DataSourceDetails, error) {
	var baseObject oci_cloud_guard.DataSourceDetails
func DataSourceDetailsToMap(obj *oci_cloud_guard.DataSourceDetails) map[string]interface{} {
	result := map[string]interface{}{}
func (s *CloudGuardDataSourceResourceCrud) mapToDataSourceMappingInfo(fieldKeyFormat string) (oci_cloud_guard.DataSourceMappingInfo, error) {
	result := oci_cloud_guard.DataSourceMappingInfo{}
func DataSourceMappingInfoToMap(obj oci_cloud_guard.DataSourceMappingInfo) map[string]interface{} {
	result := map[string]interface{}{}
func DataSourceSummaryToMap(obj oci_cloud_guard.DataSourceSummary) map[string]interface{} {
	result := map[string]interface{}{}
func DataSourceSummaryDetailsToMap(obj *oci_cloud_guard.DataSourceSummaryDetails) map[string]interface{} {
	result := map[string]interface{}{}
func (s *CloudGuardDataSourceResourceCrud) mapToScheduledQueryScopeDetail(fieldKeyFormat string) (oci_cloud_guard.ScheduledQueryScopeDetail, error) {
	result := oci_cloud_guard.ScheduledQueryScopeDetail{}
func (s *CloudGuardDataSourceResourceCrud) updateCompartment(compartment interface{}) error {
	changeCompartmentRequest := oci_cloud_guard.ChangeDataSourceCompartmentRequest{}
func (s *CloudGuardDataSourceResourceCrud) mapToLoggingQueryDetails(fieldKeyFormat string) (oci_cloud_guard.LoggingQueryDetails, error) {
	var baseObject oci_cloud_guard.LoggingQueryDetails

=== ./internal/service/cloud_guard/cloud_guard_security_policy_data_source.go ===
func CloudGuardSecurityPolicyDataSource() *schema.Resource {
	return &schema.Resource{
func readSingularCloudGuardSecurityPolicy(d *schema.ResourceData, m interface{}) error {
	sync := &CloudGuardSecurityPolicyDataSourceCrud{}
func (s *CloudGuardSecurityPolicyDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *CloudGuardSecurityPolicyDataSourceCrud) Get() error {
	request := oci_cloud_guard.GetSecurityPolicyRequest{}
func (s *CloudGuardSecurityPolicyDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/cloud_guard/cloud_guard_target_resource.go ===
func CloudGuardTargetResource() *schema.Resource {
	return &schema.Resource{
func createCloudGuardTarget(d *schema.ResourceData, m interface{}) error {
	sync := &CloudGuardTargetResourceCrud{}
func readCloudGuardTarget(d *schema.ResourceData, m interface{}) error {
	sync := &CloudGuardTargetResourceCrud{}
func updateCloudGuardTarget(d *schema.ResourceData, m interface{}) error {
	sync := &CloudGuardTargetResourceCrud{}
func deleteCloudGuardTarget(d *schema.ResourceData, m interface{}) error {
	sync := &CloudGuardTargetResourceCrud{}
func (s *CloudGuardTargetResourceCrud) ID() string {
	response := *s.Res
func (s *CloudGuardTargetResourceCrud) CreatedPending() []string {
	return []string{
func (s *CloudGuardTargetResourceCrud) CreatedTarget() []string {
	return []string{
func (s *CloudGuardTargetResourceCrud) DeletedPending() []string {
	return []string{
func (s *CloudGuardTargetResourceCrud) DeletedTarget() []string {
	return []string{
func (s *CloudGuardTargetResourceCrud) Create() error {
	request := oci_cloud_guard.CreateTargetRequest{}
func (s *CloudGuardTargetResourceCrud) Get() error {
	request := oci_cloud_guard.GetTargetRequest{}
func (s *CloudGuardTargetResourceCrud) Update() error {
	request := oci_cloud_guard.UpdateTargetRequest{}
func (s *CloudGuardTargetResourceCrud) Delete() error {
	request := oci_cloud_guard.DeleteTargetRequest{}
func (s *CloudGuardTargetResourceCrud) SetData() error {
	response := *s.Res
func (s *CloudGuardTargetResourceCrud) mapToCreateTargetDetectorRecipeDetails(fieldKeyFormat string) (oci_cloud_guard.CreateTargetDetectorRecipeDetails, error) {
	result := oci_cloud_guard.CreateTargetDetectorRecipeDetails{}
func (s *CloudGuardTargetResourceCrud) mapToCreateTargetResponderRecipeDetails(fieldKeyFormat string) (oci_cloud_guard.CreateTargetResponderRecipeDetails, error) {
	result := oci_cloud_guard.CreateTargetResponderRecipeDetails{}
func (s *CloudGuardTargetResourceCrud) mapToResponderConfiguration(fieldKeyFormat string) (oci_cloud_guard.ResponderConfiguration, error) {
	result := oci_cloud_guard.ResponderConfiguration{}
func (s *CloudGuardTargetResourceCrud) mapToSecurityRecipe(fieldKeyFormat string) (oci_cloud_guard.SecurityRecipe, error) {
	result := oci_cloud_guard.SecurityRecipe{}
func (s *CloudGuardTargetResourceCrud) mapToUpdateTargetDetectorRuleDetails(fieldKeyFormat string) (oci_cloud_guard.UpdateTargetDetectorRuleDetails, error) {
	result := oci_cloud_guard.UpdateTargetDetectorRuleDetails{}
func (s *CloudGuardTargetResourceCrud) mapToUpdateTargetRecipeDetectorRuleDetails(fieldKeyFormat string) (oci_cloud_guard.UpdateTargetRecipeDetectorRuleDetails, error) {
	result := oci_cloud_guard.UpdateTargetRecipeDetectorRuleDetails{}
func (s *CloudGuardTargetResourceCrud) mapToUpdateTargetRecipeResponderRuleDetails(fieldKeyFormat string) (oci_cloud_guard.UpdateTargetRecipeResponderRuleDetails, error) {
	result := oci_cloud_guard.UpdateTargetRecipeResponderRuleDetails{}
func (s *CloudGuardTargetResourceCrud) mapToUpdateTargetResponderRuleDetails(fieldKeyFormat string) (oci_cloud_guard.UpdateTargetResponderRuleDetails, error) {
	result := oci_cloud_guard.UpdateTargetResponderRuleDetails{}
func (s *CloudGuardTargetResourceCrud) mapToUpdateTargetResponderRecipe(fieldKeyFormat string) (oci_cloud_guard.UpdateTargetResponderRecipe, error) {
	result := oci_cloud_guard.UpdateTargetResponderRecipe{}
func (s *CloudGuardTargetResourceCrud) mapToUpdateTargetDetectorRecipe(fieldKeyFormat string) (oci_cloud_guard.UpdateTargetDetectorRecipe, error) {
	result := oci_cloud_guard.UpdateTargetDetectorRecipe{}
func (s *CloudGuardTargetResourceCrud) mapToConditionGroup(fieldKeyFormat string) (oci_cloud_guard.ConditionGroup, error) {
	result := oci_cloud_guard.ConditionGroup{}

=== ./internal/service/cloud_guard/cloud_guard_managed_list_data_source.go ===
func CloudGuardManagedListDataSource() *schema.Resource {
	fieldMap := make(map[string]*schema.Schema)
func readSingularCloudGuardManagedList(d *schema.ResourceData, m interface{}) error {
	sync := &CloudGuardManagedListDataSourceCrud{}
func (s *CloudGuardManagedListDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *CloudGuardManagedListDataSourceCrud) Get() error {
	request := oci_cloud_guard.GetManagedListRequest{}
func (s *CloudGuardManagedListDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/cloud_guard/cloud_guard_resource_vulnerabilities_data_source.go ===
func CloudGuardResourceVulnerabilitiesDataSource() *schema.Resource {
	return &schema.Resource{
func readCloudGuardResourceVulnerabilities(d *schema.ResourceData, m interface{}) error {
	sync := &CloudGuardResourceVulnerabilitiesDataSourceCrud{}
func (s *CloudGuardResourceVulnerabilitiesDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *CloudGuardResourceVulnerabilitiesDataSourceCrud) Get() error {
	request := oci_cloud_guard.ListResourceVulnerabilitiesRequest{}
func (s *CloudGuardResourceVulnerabilitiesDataSourceCrud) SetData() error {
	if s.Res == nil {
func ResourceVulnerabilitySummaryToMap(obj oci_cloud_guard.ResourceVulnerabilitySummary) map[string]interface{} {
	result := map[string]interface{}{}

=== ./internal/service/cloud_guard/cloud_guard_adhoc_queries_data_source.go ===
func CloudGuardAdhocQueriesDataSource() *schema.Resource {
	return &schema.Resource{
func readCloudGuardAdhocQueries(d *schema.ResourceData, m interface{}) error {
	sync := &CloudGuardAdhocQueriesDataSourceCrud{}
func (s *CloudGuardAdhocQueriesDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *CloudGuardAdhocQueriesDataSourceCrud) Get() error {
	request := oci_cloud_guard.ListAdhocQueriesRequest{}
func (s *CloudGuardAdhocQueriesDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/cloud_guard/cloud_guard_resource_data_source.go ===
func CloudGuardResourceDataSource() *schema.Resource {
	return &schema.Resource{
func readSingularCloudGuardResource(d *schema.ResourceData, m interface{}) error {
	sync := &CloudGuardResourceDataSourceCrud{}
func (s *CloudGuardResourceDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *CloudGuardResourceDataSourceCrud) Get() error {
	request := oci_cloud_guard.GetResourceRequest{}
func (s *CloudGuardResourceDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/cloud_guard/cloud_guard_data_mask_rule_data_source.go ===
func CloudGuardDataMaskRuleDataSource() *schema.Resource {
	fieldMap := make(map[string]*schema.Schema)
func readSingularCloudGuardDataMaskRule(d *schema.ResourceData, m interface{}) error {
	sync := &CloudGuardDataMaskRuleDataSourceCrud{}
func (s *CloudGuardDataMaskRuleDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *CloudGuardDataMaskRuleDataSourceCrud) Get() error {
	request := oci_cloud_guard.GetDataMaskRuleRequest{}
func (s *CloudGuardDataMaskRuleDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/cloud_guard/cloud_guard_security_zone_data_source.go ===
func CloudGuardSecurityZoneDataSource() *schema.Resource {
	fieldMap := make(map[string]*schema.Schema)
func readSingularCloudGuardSecurityZone(d *schema.ResourceData, m interface{}) error {
	sync := &CloudGuardSecurityZoneDataSourceCrud{}
func (s *CloudGuardSecurityZoneDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *CloudGuardSecurityZoneDataSourceCrud) Get() error {
	request := oci_cloud_guard.GetSecurityZoneRequest{}
func (s *CloudGuardSecurityZoneDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/cloud_guard/cloud_guard_managed_lists_data_source.go ===
func CloudGuardManagedListsDataSource() *schema.Resource {
	return &schema.Resource{
func readCloudGuardManagedLists(d *schema.ResourceData, m interface{}) error {
	sync := &CloudGuardManagedListsDataSourceCrud{}
func (s *CloudGuardManagedListsDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *CloudGuardManagedListsDataSourceCrud) Get() error {
	request := oci_cloud_guard.ListManagedListsRequest{}
func (s *CloudGuardManagedListsDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/cloud_guard/cloud_guard_data_sources_data_source.go ===
func CloudGuardDataSourcesDataSource() *schema.Resource {
	return &schema.Resource{
func readCloudGuardDataSources(d *schema.ResourceData, m interface{}) error {
	sync := &CloudGuardDataSourcesDataSourceCrud{}
func (s *CloudGuardDataSourcesDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *CloudGuardDataSourcesDataSourceCrud) Get() error {
	request := oci_cloud_guard.ListDataSourcesRequest{}
func (s *CloudGuardDataSourcesDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/cloud_guard/cloud_guard_saved_query_resource.go ===
func CloudGuardSavedQueryResource() *schema.Resource {
	return &schema.Resource{
func createCloudGuardSavedQuery(d *schema.ResourceData, m interface{}) error {
	sync := &CloudGuardSavedQueryResourceCrud{}
func readCloudGuardSavedQuery(d *schema.ResourceData, m interface{}) error {
	sync := &CloudGuardSavedQueryResourceCrud{}
func updateCloudGuardSavedQuery(d *schema.ResourceData, m interface{}) error {
	sync := &CloudGuardSavedQueryResourceCrud{}
func deleteCloudGuardSavedQuery(d *schema.ResourceData, m interface{}) error {
	sync := &CloudGuardSavedQueryResourceCrud{}
func (s *CloudGuardSavedQueryResourceCrud) ID() string {
	return *s.Res.Id
func (s *CloudGuardSavedQueryResourceCrud) CreatedPending() []string {
	return []string{
func (s *CloudGuardSavedQueryResourceCrud) CreatedTarget() []string {
	return []string{
func (s *CloudGuardSavedQueryResourceCrud) DeletedPending() []string {
	return []string{
func (s *CloudGuardSavedQueryResourceCrud) DeletedTarget() []string {
	return []string{
func (s *CloudGuardSavedQueryResourceCrud) Create() error {
	request := oci_cloud_guard.CreateSavedQueryRequest{}
func (s *CloudGuardSavedQueryResourceCrud) Get() error {
	request := oci_cloud_guard.GetSavedQueryRequest{}
func (s *CloudGuardSavedQueryResourceCrud) Update() error {
	if compartment, ok := s.D.GetOkExists("compartment_id"); ok && s.D.HasChange("compartment_id") {
func (s *CloudGuardSavedQueryResourceCrud) Delete() error {
	request := oci_cloud_guard.DeleteSavedQueryRequest{}
func (s *CloudGuardSavedQueryResourceCrud) SetData() error {
	if s.Res.CompartmentId != nil {
func (s *CloudGuardSavedQueryResourceCrud) updateCompartment(compartment interface{}) error {
	changeCompartmentRequest := oci_cloud_guard.ChangeSavedQueryCompartmentRequest{}

=== ./internal/service/cloud_guard/cloud_guard_saved_query_data_source.go ===
func CloudGuardSavedQueryDataSource() *schema.Resource {
	fieldMap := make(map[string]*schema.Schema)
func readSingularCloudGuardSavedQuery(d *schema.ResourceData, m interface{}) error {
	sync := &CloudGuardSavedQueryDataSourceCrud{}
func (s *CloudGuardSavedQueryDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *CloudGuardSavedQueryDataSourceCrud) Get() error {
	request := oci_cloud_guard.GetSavedQueryRequest{}
func (s *CloudGuardSavedQueryDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/cloud_guard/cloud_guard_managed_list_resource.go ===
func CloudGuardManagedListResource() *schema.Resource {
	return &schema.Resource{
func createCloudGuardManagedList(d *schema.ResourceData, m interface{}) error {
	sync := &CloudGuardManagedListResourceCrud{}
func readCloudGuardManagedList(d *schema.ResourceData, m interface{}) error {
	sync := &CloudGuardManagedListResourceCrud{}
func updateCloudGuardManagedList(d *schema.ResourceData, m interface{}) error {
	sync := &CloudGuardManagedListResourceCrud{}
func deleteCloudGuardManagedList(d *schema.ResourceData, m interface{}) error {
	sync := &CloudGuardManagedListResourceCrud{}
func (s *CloudGuardManagedListResourceCrud) ID() string {
	return *s.Res.Id
func (s *CloudGuardManagedListResourceCrud) CreatedPending() []string {
	return []string{
func (s *CloudGuardManagedListResourceCrud) CreatedTarget() []string {
	return []string{
func (s *CloudGuardManagedListResourceCrud) DeletedPending() []string {
	return []string{
func (s *CloudGuardManagedListResourceCrud) DeletedTarget() []string {
	return []string{
func (s *CloudGuardManagedListResourceCrud) Create() error {
	request := oci_cloud_guard.CreateManagedListRequest{}
func (s *CloudGuardManagedListResourceCrud) Get() error {
	request := oci_cloud_guard.GetManagedListRequest{}
func (s *CloudGuardManagedListResourceCrud) Update() error {
	if compartment, ok := s.D.GetOkExists("compartment_id"); ok && s.D.HasChange("compartment_id") {
func (s *CloudGuardManagedListResourceCrud) Delete() error {
	request := oci_cloud_guard.DeleteManagedListRequest{}
func (s *CloudGuardManagedListResourceCrud) SetData() error {
	if s.Res.CompartmentId != nil {
func (s *CloudGuardManagedListResourceCrud) updateCompartment(compartment interface{}) error {
	changeCompartmentRequest := oci_cloud_guard.ChangeManagedListCompartmentRequest{}

=== ./internal/service/cloud_guard/cloud_guard_cloud_guard_configuration_resource.go ===
func CloudGuardCloudGuardConfigurationResource() *schema.Resource {
	return &schema.Resource{
func createCloudGuardCloudGuardConfiguration(d *schema.ResourceData, m interface{}) error {
	sync := &CloudGuardCloudGuardConfigurationResourceCrud{}
func readCloudGuardCloudGuardConfiguration(d *schema.ResourceData, m interface{}) error {
	sync := &CloudGuardCloudGuardConfigurationResourceCrud{}
func updateCloudGuardCloudGuardConfiguration(d *schema.ResourceData, m interface{}) error {
	sync := &CloudGuardCloudGuardConfigurationResourceCrud{}
func deleteCloudGuardCloudGuardConfiguration(d *schema.ResourceData, m interface{}) error {
	return nil
func (s *CloudGuardCloudGuardConfigurationResourceCrud) ID() string {
	return getCloudGuardConfigurationCompositeId()
func (s *CloudGuardCloudGuardConfigurationResourceCrud) Create() error {
	request := oci_cloud_guard.UpdateConfigurationRequest{}
func (s *CloudGuardCloudGuardConfigurationResourceCrud) Get() error {
	request := oci_cloud_guard.GetConfigurationRequest{}
func (s *CloudGuardCloudGuardConfigurationResourceCrud) Update() error {
	request := oci_cloud_guard.UpdateConfigurationRequest{}
func (s *CloudGuardCloudGuardConfigurationResourceCrud) SetData() error {


=== ./internal/service/cloud_guard/cloud_guard_target_data_source.go ===
func CloudGuardTargetDataSource() *schema.Resource {
	fieldMap := make(map[string]*schema.Schema)
func readSingularCloudGuardTarget(d *schema.ResourceData, m interface{}) error {
	sync := &CloudGuardTargetDataSourceCrud{}
func (s *CloudGuardTargetDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *CloudGuardTargetDataSourceCrud) Get() error {
	request := oci_cloud_guard.GetTargetRequest{}
func (s *CloudGuardTargetDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/cloud_guard/cloud_guard_wlp_agent_data_source.go ===
func CloudGuardWlpAgentDataSource() *schema.Resource {
	fieldMap := make(map[string]*schema.Schema)
func readSingularCloudGuardWlpAgent(d *schema.ResourceData, m interface{}) error {
	sync := &CloudGuardWlpAgentDataSourceCrud{}
func (s *CloudGuardWlpAgentDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *CloudGuardWlpAgentDataSourceCrud) Get() error {
	request := oci_cloud_guard.GetWlpAgentRequest{}
func (s *CloudGuardWlpAgentDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/cloud_guard/cloud_guard_wlp_agent_resource.go ===
func CloudGuardWlpAgentResource() *schema.Resource {
	return &schema.Resource{
func createCloudGuardWlpAgent(d *schema.ResourceData, m interface{}) error {
	sync := &CloudGuardWlpAgentResourceCrud{}
func readCloudGuardWlpAgent(d *schema.ResourceData, m interface{}) error {
	sync := &CloudGuardWlpAgentResourceCrud{}
func updateCloudGuardWlpAgent(d *schema.ResourceData, m interface{}) error {
	sync := &CloudGuardWlpAgentResourceCrud{}
func deleteCloudGuardWlpAgent(d *schema.ResourceData, m interface{}) error {
	sync := &CloudGuardWlpAgentResourceCrud{}
func (s *CloudGuardWlpAgentResourceCrud) ID() string {
	return *s.Res.Id
func (s *CloudGuardWlpAgentResourceCrud) Create() error {
	request := oci_cloud_guard.CreateWlpAgentRequest{}
func (s *CloudGuardWlpAgentResourceCrud) Get() error {
	request := oci_cloud_guard.GetWlpAgentRequest{}
func (s *CloudGuardWlpAgentResourceCrud) Update() error {
	request := oci_cloud_guard.UpdateWlpAgentRequest{}
func (s *CloudGuardWlpAgentResourceCrud) Delete() error {
	request := oci_cloud_guard.DeleteWlpAgentRequest{}
func (s *CloudGuardWlpAgentResourceCrud) SetData() error {
	if s.Res.AgentVersion != nil {

=== ./internal/service/cloud_guard/cloud_guard_adhoc_query_result_content_data_source.go ===
func CloudGuardAdhocQueryResultContentDataSource() *schema.Resource {
	return &schema.Resource{
func readSingularCloudGuardAdhocQueryResultContent(d *schema.ResourceData, m interface{}) error {
	sync := &CloudGuardAdhocQueryResultContentDataSourceCrud{}
func (s *CloudGuardAdhocQueryResultContentDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *CloudGuardAdhocQueryResultContentDataSourceCrud) Get() error {
	request := oci_cloud_guard.GetAdhocQueryResultContentRequest{}
func (s *CloudGuardAdhocQueryResultContentDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/cloud_guard/cloud_guard_responder_recipes_data_source.go ===
func CloudGuardResponderRecipesDataSource() *schema.Resource {
	return &schema.Resource{
func readCloudGuardResponderRecipes(d *schema.ResourceData, m interface{}) error {
	sync := &CloudGuardResponderRecipesDataSourceCrud{}
func (s *CloudGuardResponderRecipesDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *CloudGuardResponderRecipesDataSourceCrud) Get() error {
	request := oci_cloud_guard.ListResponderRecipesRequest{}
func (s *CloudGuardResponderRecipesDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/cloud_guard/cloud_guard_resource_ports_data_source.go ===
func CloudGuardResourcePortsDataSource() *schema.Resource {
	return &schema.Resource{
func readCloudGuardResourcePorts(d *schema.ResourceData, m interface{}) error {
	sync := &CloudGuardResourcePortsDataSourceCrud{}
func (s *CloudGuardResourcePortsDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *CloudGuardResourcePortsDataSourceCrud) Get() error {
	request := oci_cloud_guard.ListResourcePortsRequest{}
func (s *CloudGuardResourcePortsDataSourceCrud) SetData() error {
	if s.Res == nil {
func ResourcePortSummaryToMap(obj oci_cloud_guard.ResourcePortSummary) map[string]interface{} {
	result := map[string]interface{}{}

=== ./internal/service/cloud_guard/cloud_guard_saved_queries_data_source.go ===
func CloudGuardSavedQueriesDataSource() *schema.Resource {
	return &schema.Resource{
func readCloudGuardSavedQueries(d *schema.ResourceData, m interface{}) error {
	sync := &CloudGuardSavedQueriesDataSourceCrud{}
func (s *CloudGuardSavedQueriesDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *CloudGuardSavedQueriesDataSourceCrud) Get() error {
	request := oci_cloud_guard.ListSavedQueriesRequest{}
func (s *CloudGuardSavedQueriesDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/cloud_guard/cloud_guard_responder_recipe_data_source.go ===
func CloudGuardResponderRecipeDataSource() *schema.Resource {
	fieldMap := make(map[string]*schema.Schema)
func readSingularCloudGuardResponderRecipe(d *schema.ResourceData, m interface{}) error {
	sync := &CloudGuardResponderRecipeDataSourceCrud{}
func (s *CloudGuardResponderRecipeDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *CloudGuardResponderRecipeDataSourceCrud) Get() error {
	request := oci_cloud_guard.GetResponderRecipeRequest{}
func (s *CloudGuardResponderRecipeDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/cloud_guard/cloud_guard_adhoc_query_data_source.go ===
func CloudGuardAdhocQueryDataSource() *schema.Resource {
	fieldMap := make(map[string]*schema.Schema)
func readSingularCloudGuardAdhocQuery(d *schema.ResourceData, m interface{}) error {
	sync := &CloudGuardAdhocQueryDataSourceCrud{}
func (s *CloudGuardAdhocQueryDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *CloudGuardAdhocQueryDataSourceCrud) Get() error {
	request := oci_cloud_guard.GetAdhocQueryRequest{}
func (s *CloudGuardAdhocQueryDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/cloud_guard/cloud_guard_data_source_data_source.go ===
func CloudGuardDataSourceDataSource() *schema.Resource {
	fieldMap := make(map[string]*schema.Schema)
func readSingularCloudGuardDataSource(d *schema.ResourceData, m interface{}) error {
	sync := &CloudGuardDataSourceDataSourceCrud{}
func (s *CloudGuardDataSourceDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *CloudGuardDataSourceDataSourceCrud) Get() error {
	request := oci_cloud_guard.GetDataSourceRequest{}
func (s *CloudGuardDataSourceDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/cloud_guard/cloud_guard_detector_recipe_resource.go ===
func CloudGuardDetectorRecipeResource() *schema.Resource {
	return &schema.Resource{
func createCloudGuardDetectorRecipe(d *schema.ResourceData, m interface{}) error {
	sync := &CloudGuardDetectorRecipeResourceCrud{}
func readCloudGuardDetectorRecipe(d *schema.ResourceData, m interface{}) error {
	sync := &CloudGuardDetectorRecipeResourceCrud{}
func updateCloudGuardDetectorRecipe(d *schema.ResourceData, m interface{}) error {
	sync := &CloudGuardDetectorRecipeResourceCrud{}
func deleteCloudGuardDetectorRecipe(d *schema.ResourceData, m interface{}) error {
	sync := &CloudGuardDetectorRecipeResourceCrud{}
func (s *CloudGuardDetectorRecipeResourceCrud) ID() string {
	return *s.Res.Id
func (s *CloudGuardDetectorRecipeResourceCrud) CreatedPending() []string {
	return []string{
func (s *CloudGuardDetectorRecipeResourceCrud) CreatedTarget() []string {
	return []string{
func (s *CloudGuardDetectorRecipeResourceCrud) DeletedPending() []string {
	return []string{
func (s *CloudGuardDetectorRecipeResourceCrud) DeletedTarget() []string {
	return []string{
func (s *CloudGuardDetectorRecipeResourceCrud) Create() error {
	request := oci_cloud_guard.CreateDetectorRecipeRequest{}
func (s *CloudGuardDetectorRecipeResourceCrud) Get() error {
	request := oci_cloud_guard.GetDetectorRecipeRequest{}
func (s *CloudGuardDetectorRecipeResourceCrud) Update() error {
	if compartment, ok := s.D.GetOkExists("compartment_id"); ok && s.D.HasChange("compartment_id") {
func (s *CloudGuardDetectorRecipeResourceCrud) Delete() error {
	request := oci_cloud_guard.DeleteDetectorRecipeRequest{}
func (s *CloudGuardDetectorRecipeResourceCrud) SetData() error {
	if s.Res.CompartmentId != nil {
func (s *CloudGuardDetectorRecipeResourceCrud) mapToUpdateDetectorRecipeDetectorRule(fieldKeyFormat string) (oci_cloud_guard.UpdateDetectorRecipeDetectorRule, error) {
	result := oci_cloud_guard.UpdateDetectorRecipeDetectorRule{}
func (s *CloudGuardDetectorRecipeResourceCrud) mapToUpdateDetectorRuleDetails(fieldKeyFormat string) (oci_cloud_guard.UpdateDetectorRuleDetails, error) {
	result := oci_cloud_guard.UpdateDetectorRuleDetails{}
func (s *CloudGuardDetectorRecipeResourceCrud) updateCompartment(compartment interface{}) error {
	changeCompartmentRequest := oci_cloud_guard.ChangeDetectorRecipeCompartmentRequest{}
func (s *CloudGuardDetectorRecipeResourceCrud) mapToDetectorConfiguration(fieldKeyFormat string) (oci_cloud_guard.DetectorConfiguration, error) {
	result := oci_cloud_guard.DetectorConfiguration{}
func (s *CloudGuardDetectorRecipeResourceCrud) mapToConfigValue(fieldKeyFormat string) (oci_cloud_guard.ConfigValue, error) {
	result := oci_cloud_guard.ConfigValue{}
func (s *CloudGuardDetectorRecipeResourceCrud) mapToEntitiesMapping(fieldKeyFormat string) (oci_cloud_guard.EntitiesMapping, error) {
	result := oci_cloud_guard.EntitiesMapping{}

=== ./internal/service/cloud_guard/cloud_guard_security_zone_resource.go ===
func CloudGuardSecurityZoneResource() *schema.Resource {
	return &schema.Resource{
func createCloudGuardSecurityZone(d *schema.ResourceData, m interface{}) error {
	sync := &CloudGuardSecurityZoneResourceCrud{}
func readCloudGuardSecurityZone(d *schema.ResourceData, m interface{}) error {
	sync := &CloudGuardSecurityZoneResourceCrud{}
func updateCloudGuardSecurityZone(d *schema.ResourceData, m interface{}) error {
	sync := &CloudGuardSecurityZoneResourceCrud{}
func deleteCloudGuardSecurityZone(d *schema.ResourceData, m interface{}) error {
	sync := &CloudGuardSecurityZoneResourceCrud{}
func (s *CloudGuardSecurityZoneResourceCrud) ID() string {
	return *s.Res.Id
func (s *CloudGuardSecurityZoneResourceCrud) CreatedPending() []string {
	return []string{
func (s *CloudGuardSecurityZoneResourceCrud) CreatedTarget() []string {
	return []string{
func (s *CloudGuardSecurityZoneResourceCrud) DeletedPending() []string {
	return []string{
func (s *CloudGuardSecurityZoneResourceCrud) DeletedTarget() []string {
	return []string{
func (s *CloudGuardSecurityZoneResourceCrud) Create() error {
	request := oci_cloud_guard.CreateSecurityZoneRequest{}
func (s *CloudGuardSecurityZoneResourceCrud) Get() error {
	request := oci_cloud_guard.GetSecurityZoneRequest{}
func (s *CloudGuardSecurityZoneResourceCrud) Update() error {
	if compartment, ok := s.D.GetOkExists("compartment_id"); ok && s.D.HasChange("compartment_id") {
func (s *CloudGuardSecurityZoneResourceCrud) Delete() error {
	request := oci_cloud_guard.DeleteSecurityZoneRequest{}
func (s *CloudGuardSecurityZoneResourceCrud) SetData() error {
	if s.Res.CompartmentId != nil {
func (s *CloudGuardSecurityZoneResourceCrud) updateCompartment(compartment interface{}) error {
	changeCompartmentRequest := oci_cloud_guard.ChangeSecurityZoneCompartmentRequest{}

=== ./internal/service/cloud_guard/cloud_guard_detector_recipes_data_source.go ===
func CloudGuardDetectorRecipesDataSource() *schema.Resource {
	return &schema.Resource{
func readCloudGuardDetectorRecipes(d *schema.ResourceData, m interface{}) error {
	sync := &CloudGuardDetectorRecipesDataSourceCrud{}
func (s *CloudGuardDetectorRecipesDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *CloudGuardDetectorRecipesDataSourceCrud) Get() error {
	request := oci_cloud_guard.ListDetectorRecipesRequest{}
func (s *CloudGuardDetectorRecipesDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/cloud_guard/cloud_guard_security_policies_data_source.go ===
func CloudGuardSecurityPoliciesDataSource() *schema.Resource {
	return &schema.Resource{
func readCloudGuardSecurityPolicies(d *schema.ResourceData, m interface{}) error {
	sync := &CloudGuardSecurityPoliciesDataSourceCrud{}
func (s *CloudGuardSecurityPoliciesDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *CloudGuardSecurityPoliciesDataSourceCrud) Get() error {
	request := oci_cloud_guard.ListSecurityPoliciesRequest{}
func (s *CloudGuardSecurityPoliciesDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/cloud_guard/cloud_guard_security_zones_data_source.go ===
func CloudGuardSecurityZonesDataSource() *schema.Resource {
	return &schema.Resource{
func readCloudGuardSecurityZones(d *schema.ResourceData, m interface{}) error {
	sync := &CloudGuardSecurityZonesDataSourceCrud{}
func (s *CloudGuardSecurityZonesDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *CloudGuardSecurityZonesDataSourceCrud) Get() error {
	request := oci_cloud_guard.ListSecurityZonesRequest{}
func (s *CloudGuardSecurityZonesDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/cloud_guard/cloud_guard_cloud_guard_configuration_data_source.go ===
func CloudGuardCloudGuardConfigurationDataSource() *schema.Resource {
	fieldMap := make(map[string]*schema.Schema)
func readSingularCloudGuardCloudGuardConfiguration(d *schema.ResourceData, m interface{}) error {
	sync := &CloudGuardCloudGuardConfigurationDataSourceCrud{}
func (s *CloudGuardCloudGuardConfigurationDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *CloudGuardCloudGuardConfigurationDataSourceCrud) Get() error {
	request := oci_cloud_guard.GetConfigurationRequest{}
func (s *CloudGuardCloudGuardConfigurationDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/cloud_guard/cloud_guard_data_mask_rules_data_source.go ===
func CloudGuardDataMaskRulesDataSource() *schema.Resource {
	return &schema.Resource{
func readCloudGuardDataMaskRules(d *schema.ResourceData, m interface{}) error {
	sync := &CloudGuardDataMaskRulesDataSourceCrud{}
func (s *CloudGuardDataMaskRulesDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *CloudGuardDataMaskRulesDataSourceCrud) Get() error {
	request := oci_cloud_guard.ListDataMaskRulesRequest{}
func (s *CloudGuardDataMaskRulesDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/cloud_guard/cloud_guard_security_recipe_resource.go ===
func CloudGuardSecurityRecipeResource() *schema.Resource {
	return &schema.Resource{
func createCloudGuardSecurityRecipe(d *schema.ResourceData, m interface{}) error {
	sync := &CloudGuardSecurityRecipeResourceCrud{}
func readCloudGuardSecurityRecipe(d *schema.ResourceData, m interface{}) error {
	sync := &CloudGuardSecurityRecipeResourceCrud{}
func updateCloudGuardSecurityRecipe(d *schema.ResourceData, m interface{}) error {
	sync := &CloudGuardSecurityRecipeResourceCrud{}
func deleteCloudGuardSecurityRecipe(d *schema.ResourceData, m interface{}) error {
	sync := &CloudGuardSecurityRecipeResourceCrud{}
func (s *CloudGuardSecurityRecipeResourceCrud) ID() string {
	return *s.Res.Id
func (s *CloudGuardSecurityRecipeResourceCrud) CreatedPending() []string {
	return []string{
func (s *CloudGuardSecurityRecipeResourceCrud) CreatedTarget() []string {
	return []string{
func (s *CloudGuardSecurityRecipeResourceCrud) DeletedPending() []string {
	return []string{
func (s *CloudGuardSecurityRecipeResourceCrud) DeletedTarget() []string {
	return []string{
func (s *CloudGuardSecurityRecipeResourceCrud) Create() error {
	request := oci_cloud_guard.CreateSecurityRecipeRequest{}
func (s *CloudGuardSecurityRecipeResourceCrud) Get() error {
	request := oci_cloud_guard.GetSecurityRecipeRequest{}
func (s *CloudGuardSecurityRecipeResourceCrud) Update() error {
	if compartment, ok := s.D.GetOkExists("compartment_id"); ok && s.D.HasChange("compartment_id") {
func (s *CloudGuardSecurityRecipeResourceCrud) Delete() error {
	request := oci_cloud_guard.DeleteSecurityRecipeRequest{}
func (s *CloudGuardSecurityRecipeResourceCrud) SetData() error {
	if s.Res.CompartmentId != nil {
func (s *CloudGuardSecurityRecipeResourceCrud) updateCompartment(compartment interface{}) error {
	changeCompartmentRequest := oci_cloud_guard.ChangeSecurityRecipeCompartmentRequest{}

=== ./internal/service/cloud_guard/cloud_guard_security_recipe_data_source.go ===
func CloudGuardSecurityRecipeDataSource() *schema.Resource {
	fieldMap := make(map[string]*schema.Schema)
func readSingularCloudGuardSecurityRecipe(d *schema.ResourceData, m interface{}) error {
	sync := &CloudGuardSecurityRecipeDataSourceCrud{}
func (s *CloudGuardSecurityRecipeDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *CloudGuardSecurityRecipeDataSourceCrud) Get() error {
	request := oci_cloud_guard.GetSecurityRecipeRequest{}
func (s *CloudGuardSecurityRecipeDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/cloud_guard/cloud_guard_data_source_event_data_source.go ===
func CloudGuardDataSourceEventDataSource() *schema.Resource {
	return &schema.Resource{
func readSingularCloudGuardDataSourceEvent(d *schema.ResourceData, m interface{}) error {
	sync := &CloudGuardDataSourceEventDataSourceCrud{}
func (s *CloudGuardDataSourceEventDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *CloudGuardDataSourceEventDataSourceCrud) Get() error {
	request := oci_cloud_guard.ListDataSourceEventsRequest{}
func (s *CloudGuardDataSourceEventDataSourceCrud) SetData() error {
	if s.Res == nil {
func DataSourceEventInfoToMap(obj *oci_cloud_guard.DataSourceEventInfo) map[string]interface{} {
	result := map[string]interface{}{}
func DataSourceEventSummaryToMap(obj oci_cloud_guard.DataSourceEventSummary) map[string]interface{} {
	result := map[string]interface{}{}

=== ./internal/service/cloud_guard/cloud_guard_problem_entity_data_source.go ===
func CloudGuardProblemEntityDataSource() *schema.Resource {
	return &schema.Resource{
func readSingularCloudGuardProblemEntity(d *schema.ResourceData, m interface{}) error {
	sync := &CloudGuardProblemEntityDataSourceCrud{}
func (s *CloudGuardProblemEntityDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *CloudGuardProblemEntityDataSourceCrud) Get() error {
	request := oci_cloud_guard.ListProblemEntitiesRequest{}
func (s *CloudGuardProblemEntityDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/cloud_guard/register_resource.go ===
func RegisterResource() {
	tfresource.RegisterResource("oci_cloud_guard_adhoc_query", CloudGuardAdhocQueryResource())

=== ./internal/service/cloud_guard/cloud_guard_data_source_events_data_source.go ===
func CloudGuardDataSourceEventsDataSource() *schema.Resource {
	return &schema.Resource{
func readCloudGuardDataSourceEvents(d *schema.ResourceData, m interface{}) error {
	sync := &CloudGuardDataSourceEventsDataSourceCrud{}
func (s *CloudGuardDataSourceEventsDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *CloudGuardDataSourceEventsDataSourceCrud) Get() error {
	request := oci_cloud_guard.ListDataSourceEventsRequest{}
func (s *CloudGuardDataSourceEventsDataSourceCrud) SetData() error {
	if s.Res == nil {
func DataSourceEventSummaryToMap(obj oci_cloud_guard.DataSourceEventSummary) map[string]interface{} {
   result := map[string]interface{}{}

=== ./internal/service/cloud_guard/cloud_guard_responder_recipe_resource.go ===
func CloudGuardResponderRecipeResource() *schema.Resource {
	return &schema.Resource{
func createCloudGuardResponderRecipe(d *schema.ResourceData, m interface{}) error {
	sync := &CloudGuardResponderRecipeResourceCrud{}
func readCloudGuardResponderRecipe(d *schema.ResourceData, m interface{}) error {
	sync := &CloudGuardResponderRecipeResourceCrud{}
func updateCloudGuardResponderRecipe(d *schema.ResourceData, m interface{}) error {
	sync := &CloudGuardResponderRecipeResourceCrud{}
func deleteCloudGuardResponderRecipe(d *schema.ResourceData, m interface{}) error {
	sync := &CloudGuardResponderRecipeResourceCrud{}
func (s *CloudGuardResponderRecipeResourceCrud) ID() string {
	return *s.Res.Id
func (s *CloudGuardResponderRecipeResourceCrud) CreatedPending() []string {
	return []string{
func (s *CloudGuardResponderRecipeResourceCrud) CreatedTarget() []string {
	return []string{
func (s *CloudGuardResponderRecipeResourceCrud) DeletedPending() []string {
	return []string{
func (s *CloudGuardResponderRecipeResourceCrud) DeletedTarget() []string {
	return []string{
func (s *CloudGuardResponderRecipeResourceCrud) Create() error {
	request := oci_cloud_guard.CreateResponderRecipeRequest{}
func (s *CloudGuardResponderRecipeResourceCrud) Get() error {
	request := oci_cloud_guard.GetResponderRecipeRequest{}
func (s *CloudGuardResponderRecipeResourceCrud) Update() error {
	if compartment, ok := s.D.GetOkExists("compartment_id"); ok && s.D.HasChange("compartment_id") {
func (s *CloudGuardResponderRecipeResourceCrud) Delete() error {
	request := oci_cloud_guard.DeleteResponderRecipeRequest{}
func (s *CloudGuardResponderRecipeResourceCrud) SetData() error {
	if s.Res.CompartmentId != nil {
func (s *CloudGuardResponderRecipeResourceCrud) mapToUpdateResponderRecipeResponderRule(fieldKeyFormat string) (oci_cloud_guard.UpdateResponderRecipeResponderRule, error) {
	result := oci_cloud_guard.UpdateResponderRecipeResponderRule{}
func (s *CloudGuardResponderRecipeResourceCrud) mapToUpdateResponderRuleDetails(fieldKeyFormat string) (oci_cloud_guard.UpdateResponderRuleDetails, error) {
	result := oci_cloud_guard.UpdateResponderRuleDetails{}
func (s *CloudGuardResponderRecipeResourceCrud) updateCompartment(compartment interface{}) error {
	changeCompartmentRequest := oci_cloud_guard.ChangeResponderRecipeCompartmentRequest{}

=== ./internal/service/cloud_guard/cloud_guard_wlp_agents_data_source.go ===
func CloudGuardWlpAgentsDataSource() *schema.Resource {
	return &schema.Resource{
func readCloudGuardWlpAgents(d *schema.ResourceData, m interface{}) error {
	sync := &CloudGuardWlpAgentsDataSourceCrud{}
func (s *CloudGuardWlpAgentsDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *CloudGuardWlpAgentsDataSourceCrud) Get() error {
	request := oci_cloud_guard.ListWlpAgentsRequest{}
func (s *CloudGuardWlpAgentsDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/ai_language/ai_language_endpoint_data_source.go ===
func AiLanguageEndpointDataSource() *schema.Resource {
	fieldMap := make(map[string]*schema.Schema)
func readSingularAiLanguageEndpoint(d *schema.ResourceData, m interface{}) error {
	sync := &AiLanguageEndpointDataSourceCrud{}
func (s *AiLanguageEndpointDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *AiLanguageEndpointDataSourceCrud) Get() error {
	request := oci_ai_language.GetEndpointRequest{}
func (s *AiLanguageEndpointDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/ai_language/ai_language_model_evaluation_results_data_source.go ===
func AiLanguageModelEvaluationResultsDataSource() *schema.Resource {
	return &schema.Resource{
func readAiLanguageModelEvaluationResults(d *schema.ResourceData, m interface{}) error {
	sync := &AiLanguageModelEvaluationResultsDataSourceCrud{}
func (s *AiLanguageModelEvaluationResultsDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *AiLanguageModelEvaluationResultsDataSourceCrud) Get() error {
	request := oci_ai_language.ListEvaluationResultsRequest{}
func (s *AiLanguageModelEvaluationResultsDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/ai_language/ai_language_models_data_source.go ===
func AiLanguageModelsDataSource() *schema.Resource {
	return &schema.Resource{
func readAiLanguageModels(d *schema.ResourceData, m interface{}) error {
	sync := &AiLanguageModelsDataSourceCrud{}
func (s *AiLanguageModelsDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *AiLanguageModelsDataSourceCrud) Get() error {
	request := oci_ai_language.ListModelsRequest{}
func (s *AiLanguageModelsDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/ai_language/ai_language_model_resource.go ===
func AiLanguageModelResource() *schema.Resource {
	return &schema.Resource{
func createAiLanguageModel(d *schema.ResourceData, m interface{}) error {
	sync := &AiLanguageModelResourceCrud{}
func readAiLanguageModel(d *schema.ResourceData, m interface{}) error {
	sync := &AiLanguageModelResourceCrud{}
func updateAiLanguageModel(d *schema.ResourceData, m interface{}) error {
	sync := &AiLanguageModelResourceCrud{}
func deleteAiLanguageModel(d *schema.ResourceData, m interface{}) error {
	sync := &AiLanguageModelResourceCrud{}
func (s *AiLanguageModelResourceCrud) ID() string {
	return *s.Res.Id
func (s *AiLanguageModelResourceCrud) CreatedPending() []string {
	return []string{
func (s *AiLanguageModelResourceCrud) CreatedTarget() []string {
	return []string{
func (s *AiLanguageModelResourceCrud) UpdatedPending() []string {
	return []string{
func (s *AiLanguageModelResourceCrud) UpdatedTarget() []string {
	return []string{
func (s *AiLanguageModelResourceCrud) DeletedPending() []string {
	return []string{
func (s *AiLanguageModelResourceCrud) DeletedTarget() []string {
	return []string{
func (s *AiLanguageModelResourceCrud) Create() error {
	request := oci_ai_language.CreateModelRequest{}
func (s *AiLanguageModelResourceCrud) getModelFromWorkRequest(workId *string, retryPolicy *oci_common.RetryPolicy,
	actionTypeEnum oci_ai_language.ActionTypeEnum, timeout time.Duration) error {
func (s *AiLanguageModelResourceCrud) Get() error {
	request := oci_ai_language.GetModelRequest{}
func (s *AiLanguageModelResourceCrud) Update() error {
	if compartment, ok := s.D.GetOkExists("compartment_id"); ok && s.D.HasChange("compartment_id") {
func (s *AiLanguageModelResourceCrud) Delete() error {
	request := oci_ai_language.DeleteModelRequest{}
func (s *AiLanguageModelResourceCrud) SetData() error {
	if s.Res.CompartmentId != nil {
func (s *AiLanguageModelResourceCrud) mapToClassMetrics(fieldKeyFormat string) (oci_ai_language.ClassMetrics, error) {
	result := oci_ai_language.ClassMetrics{}
func (s *AiLanguageModelResourceCrud) mapToClassificationType(fieldKeyFormat string) (oci_ai_language.ClassificationType, error) {
	var baseObject oci_ai_language.ClassificationType
func (s *AiLanguageModelResourceCrud) mapToDatasetDetails(fieldKeyFormat string) (oci_ai_language.DatasetDetails, error) {
	var baseObject oci_ai_language.DatasetDetails
func (s *AiLanguageModelResourceCrud) mapToEntityMetrics(fieldKeyFormat string) (oci_ai_language.EntityMetrics, error) {
	result := oci_ai_language.EntityMetrics{}
func (s *AiLanguageModelResourceCrud) mapToLocationDetails(fieldKeyFormat string) (oci_ai_language.LocationDetails, error) {
	var baseObject oci_ai_language.LocationDetails
func (s *AiLanguageModelResourceCrud) mapToModelDetails(fieldKeyFormat string) (oci_ai_language.ModelDetails, error) {
	var baseObject oci_ai_language.ModelDetails
func (s *AiLanguageModelResourceCrud) mapToNamedEntityRecognitionModelMetrics(fieldKeyFormat string) (oci_ai_language.NamedEntityRecognitionModelMetrics, error) {
	result := oci_ai_language.NamedEntityRecognitionModelMetrics{}
func (s *AiLanguageModelResourceCrud) mapToTestStrategy(fieldKeyFormat string) (oci_ai_language.TestStrategy, error) {
	var baseObject oci_ai_language.TestStrategy
func (s *AiLanguageModelResourceCrud) mapToTextClassificationModelMetrics(fieldKeyFormat string) (oci_ai_language.TextClassificationModelMetrics, error) {
	result := oci_ai_language.TextClassificationModelMetrics{}
func (s *AiLanguageModelResourceCrud) updateCompartment(compartment interface{}) error {
	changeCompartmentRequest := oci_ai_language.ChangeModelCompartmentRequest{}

=== ./internal/service/ai_language/ai_language_project_resource.go ===
func AiLanguageProjectResource() *schema.Resource {
	return &schema.Resource{
func createAiLanguageProject(d *schema.ResourceData, m interface{}) error {
	sync := &AiLanguageProjectResourceCrud{}
func readAiLanguageProject(d *schema.ResourceData, m interface{}) error {
	sync := &AiLanguageProjectResourceCrud{}
func updateAiLanguageProject(d *schema.ResourceData, m interface{}) error {
	sync := &AiLanguageProjectResourceCrud{}
func deleteAiLanguageProject(d *schema.ResourceData, m interface{}) error {
	sync := &AiLanguageProjectResourceCrud{}
func (s *AiLanguageProjectResourceCrud) ID() string {
	return *s.Res.Id
func (s *AiLanguageProjectResourceCrud) CreatedPending() []string {
	return []string{
func (s *AiLanguageProjectResourceCrud) CreatedTarget() []string {
	return []string{
func (s *AiLanguageProjectResourceCrud) UpdatedPending() []string {
	return []string{
func (s *AiLanguageProjectResourceCrud) UpdatedTarget() []string {
	return []string{
func (s *AiLanguageProjectResourceCrud) DeletedPending() []string {
	return []string{
func (s *AiLanguageProjectResourceCrud) DeletedTarget() []string {
	return []string{
func (s *AiLanguageProjectResourceCrud) Create() error {
	request := oci_ai_language.CreateProjectRequest{}
func (s *AiLanguageProjectResourceCrud) getProjectFromWorkRequest(workId *string, retryPolicy *oci_common.RetryPolicy,
	actionTypeEnum oci_ai_language.ActionTypeEnum, timeout time.Duration) error {
func (s *AiLanguageProjectResourceCrud) Get() error {
	request := oci_ai_language.GetProjectRequest{}
func (s *AiLanguageProjectResourceCrud) Update() error {
	if compartment, ok := s.D.GetOkExists("compartment_id"); ok && s.D.HasChange("compartment_id") {
func (s *AiLanguageProjectResourceCrud) Delete() error {
	request := oci_ai_language.DeleteProjectRequest{}
func (s *AiLanguageProjectResourceCrud) SetData() error {
	if s.Res.CompartmentId != nil {
func (s *AiLanguageProjectResourceCrud) updateCompartment(compartment interface{}) error {
	changeCompartmentRequest := oci_ai_language.ChangeProjectCompartmentRequest{}

=== ./internal/service/ai_language/ai_language_projects_data_source.go ===
func AiLanguageProjectsDataSource() *schema.Resource {
	return &schema.Resource{
func readAiLanguageProjects(d *schema.ResourceData, m interface{}) error {
	sync := &AiLanguageProjectsDataSourceCrud{}
func (s *AiLanguageProjectsDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *AiLanguageProjectsDataSourceCrud) Get() error {
	request := oci_ai_language.ListProjectsRequest{}
func (s *AiLanguageProjectsDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/ai_language/ai_language_endpoint_resource.go ===
func AiLanguageEndpointResource() *schema.Resource {
	return &schema.Resource{
func createAiLanguageEndpoint(d *schema.ResourceData, m interface{}) error {
	sync := &AiLanguageEndpointResourceCrud{}
func readAiLanguageEndpoint(d *schema.ResourceData, m interface{}) error {
	sync := &AiLanguageEndpointResourceCrud{}
func updateAiLanguageEndpoint(d *schema.ResourceData, m interface{}) error {
	sync := &AiLanguageEndpointResourceCrud{}
func deleteAiLanguageEndpoint(d *schema.ResourceData, m interface{}) error {
	sync := &AiLanguageEndpointResourceCrud{}
func (s *AiLanguageEndpointResourceCrud) ID() string {
	return *s.Res.Id
func (s *AiLanguageEndpointResourceCrud) CreatedPending() []string {
	return []string{
func (s *AiLanguageEndpointResourceCrud) CreatedTarget() []string {
	return []string{
func (s *AiLanguageEndpointResourceCrud) UpdatedPending() []string {
	return []string{
func (s *AiLanguageEndpointResourceCrud) UpdatedTarget() []string {
	return []string{
func (s *AiLanguageEndpointResourceCrud) DeletedPending() []string {
	return []string{
func (s *AiLanguageEndpointResourceCrud) DeletedTarget() []string {
	return []string{
func (s *AiLanguageEndpointResourceCrud) Create() error {
	request := oci_ai_language.CreateEndpointRequest{}
func (s *AiLanguageEndpointResourceCrud) getEndpointFromWorkRequest(workId *string, retryPolicy *oci_common.RetryPolicy,
	actionTypeEnum oci_ai_language.ActionTypeEnum, timeout time.Duration) error {
func (s *AiLanguageEndpointResourceCrud) Get() error {
	request := oci_ai_language.GetEndpointRequest{}
func (s *AiLanguageEndpointResourceCrud) Update() error {
	if compartment, ok := s.D.GetOkExists("compartment_id"); ok && s.D.HasChange("compartment_id") {
func (s *AiLanguageEndpointResourceCrud) Delete() error {
	request := oci_ai_language.DeleteEndpointRequest{}
func (s *AiLanguageEndpointResourceCrud) SetData() error {
	if s.Res.CompartmentId != nil {
func (s *AiLanguageEndpointResourceCrud) updateCompartment(compartment interface{}) error {
	changeCompartmentRequest := oci_ai_language.ChangeEndpointCompartmentRequest{}

=== ./internal/service/ai_language/ai_language_endpoints_data_source.go ===
func AiLanguageEndpointsDataSource() *schema.Resource {
	return &schema.Resource{
func readAiLanguageEndpoints(d *schema.ResourceData, m interface{}) error {
	sync := &AiLanguageEndpointsDataSourceCrud{}
func (s *AiLanguageEndpointsDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *AiLanguageEndpointsDataSourceCrud) Get() error {
	request := oci_ai_language.ListEndpointsRequest{}
func (s *AiLanguageEndpointsDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/ai_language/ai_language_model_data_source.go ===
func AiLanguageModelDataSource() *schema.Resource {
	fieldMap := make(map[string]*schema.Schema)
func readSingularAiLanguageModel(d *schema.ResourceData, m interface{}) error {
	sync := &AiLanguageModelDataSourceCrud{}
func (s *AiLanguageModelDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *AiLanguageModelDataSourceCrud) Get() error {
	request := oci_ai_language.GetModelRequest{}
func (s *AiLanguageModelDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/ai_language/ai_language_model_type_data_source.go ===
func AiLanguageModelTypeDataSource() *schema.Resource {
	return &schema.Resource{
func readSingularAiLanguageModelType(d *schema.ResourceData, m interface{}) error {
	sync := &AiLanguageModelTypeDataSourceCrud{}
func (s *AiLanguageModelTypeDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *AiLanguageModelTypeDataSourceCrud) Get() error {
	request := oci_ai_language.GetModelTypeRequest{}
func (s *AiLanguageModelTypeDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/ai_language/ai_language_project_data_source.go ===
func AiLanguageProjectDataSource() *schema.Resource {
	fieldMap := make(map[string]*schema.Schema)
func readSingularAiLanguageProject(d *schema.ResourceData, m interface{}) error {
	sync := &AiLanguageProjectDataSourceCrud{}
func (s *AiLanguageProjectDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *AiLanguageProjectDataSourceCrud) Get() error {
	request := oci_ai_language.GetProjectRequest{}
func (s *AiLanguageProjectDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/ai_language/register_resource.go ===
func RegisterResource() {
	tfresource.RegisterResource("oci_ai_language_endpoint", AiLanguageEndpointResource())

=== ./internal/service/waas/waas_certificates_data_source.go ===
func WaasCertificatesDataSource() *schema.Resource {
	return &schema.Resource{
func readWaasCertificates(d *schema.ResourceData, m interface{}) error {
	sync := &WaasCertificatesDataSourceCrud{}
func (s *WaasCertificatesDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *WaasCertificatesDataSourceCrud) Get() error {
	request := oci_waas.ListCertificatesRequest{}
func (s *WaasCertificatesDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/waas/waas_address_list_data_source.go ===
func WaasAddressListDataSource() *schema.Resource {
	fieldMap := make(map[string]*schema.Schema)
func readSingularWaasAddressList(d *schema.ResourceData, m interface{}) error {
	sync := &WaasAddressListDataSourceCrud{}
func (s *WaasAddressListDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *WaasAddressListDataSourceCrud) Get() error {
	request := oci_waas.GetAddressListRequest{}
func (s *WaasAddressListDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/waas/waas_protection_rule_resource.go ===
func WaasProtectionRuleResource() *schema.Resource {
	return &schema.Resource{
func createWaasProtectionRule(d *schema.ResourceData, m interface{}) error {
	sync := &WaasProtectionRuleResourceCrud{}
func readWaasProtectionRule(d *schema.ResourceData, m interface{}) error {
	sync := &WaasProtectionRuleResourceCrud{}
func updateWaasProtectionRule(d *schema.ResourceData, m interface{}) error {
	sync := &WaasProtectionRuleResourceCrud{}
func deleteWaasProtectionRule(d *schema.ResourceData, m interface{}) error {
	return nil
func (s *WaasProtectionRuleResourceCrud) ID() string {
	return getWaasProtectionRuleCompositeId(s.D.Get("waas_policy_id").(string), s.D.Get("key").(string))
func (s *WaasProtectionRuleResourceCrud) Create() error {
	return s.Update()
func (s *WaasProtectionRuleResourceCrud) getProtectionRuleFromWorkRequest(workId *string, retryPolicy *oci_common.RetryPolicy,
	actionTypeEnum oci_waas.WorkRequestResourceActionTypeEnum, timeout time.Duration) error {
func protectionRuleWaitForWorkRequest(wId *string, entityType string, action oci_waas.WorkRequestResourceActionTypeEnum,
	timeout time.Duration, disableFoundRetries bool, client *oci_waas.WaasClient) (*string, error) {
func (s *WaasProtectionRuleResourceCrud) Get() error {

func (s *WaasProtectionRuleResourceCrud) Update() error {
	request := oci_waas.UpdateProtectionRulesRequest{}
func (s *WaasProtectionRuleResourceCrud) SetData() error {
	s.D.Set("action", s.Res.Action)
func (s *WaasProtectionRuleResourceCrud) mapToProtectionRulesExclusion(fieldKeyFormat string) (oci_waas.ProtectionRuleExclusion, error) {
	result := oci_waas.ProtectionRuleExclusion{}

=== ./internal/service/waas/waas_http_redirects_data_source.go ===
func WaasHttpRedirectsDataSource() *schema.Resource {
	return &schema.Resource{
func readWaasHttpRedirects(d *schema.ResourceData, m interface{}) error {
	sync := &WaasHttpRedirectsDataSourceCrud{}
func (s *WaasHttpRedirectsDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *WaasHttpRedirectsDataSourceCrud) Get() error {
	request := oci_waas.ListHttpRedirectsRequest{}
func (s *WaasHttpRedirectsDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/waas/waas_certificate_resource.go ===
func WaasCertificateResource() *schema.Resource {
	return &schema.Resource{
func createWaasCertificate(d *schema.ResourceData, m interface{}) error {
	sync := &WaasCertificateResourceCrud{}
func readWaasCertificate(d *schema.ResourceData, m interface{}) error {
	sync := &WaasCertificateResourceCrud{}
func updateWaasCertificate(d *schema.ResourceData, m interface{}) error {
	sync := &WaasCertificateResourceCrud{}
func deleteWaasCertificate(d *schema.ResourceData, m interface{}) error {
	sync := &WaasCertificateResourceCrud{}
func (s *WaasCertificateResourceCrud) ID() string {
	return *s.Res.Id
func (s *WaasCertificateResourceCrud) CreatedPending() []string {
	return []string{
func (s *WaasCertificateResourceCrud) CreatedTarget() []string {
	return []string{
func (s *WaasCertificateResourceCrud) DeletedPending() []string {
	return []string{
func (s *WaasCertificateResourceCrud) DeletedTarget() []string {
	return []string{
func (s *WaasCertificateResourceCrud) Create() error {
	request := oci_waas.CreateCertificateRequest{}
func (s *WaasCertificateResourceCrud) Get() error {
	request := oci_waas.GetCertificateRequest{}
func (s *WaasCertificateResourceCrud) Update() error {
	if compartment, ok := s.D.GetOkExists("compartment_id"); ok && s.D.HasChange("compartment_id") {
func (s *WaasCertificateResourceCrud) Delete() error {
	request := oci_waas.DeleteCertificateRequest{}
func (s *WaasCertificateResourceCrud) SetData() error {
	if s.Res.CertificateData != nil {
func (s *WaasCertificateResourceCrud) updateCompartment(compartment interface{}) error {
	changeCompartmentRequest := oci_waas.ChangeCertificateCompartmentRequest{}

=== ./internal/service/waas/waas_purge_cache_resource.go ===
func WaasPurgeCacheResource() *schema.Resource {
	return &schema.Resource{
func createWaasPurgeCache(d *schema.ResourceData, m interface{}) error {
	sync := &WaasPurgeCacheResourceCrud{}
func readWaasPurgeCache(d *schema.ResourceData, m interface{}) error {
	return nil
func deleteWaasPurgeCache(d *schema.ResourceData, m interface{}) error {
	return nil
func (s *WaasPurgeCacheResourceCrud) ID() string {
	return tfresource.Timestamp()
func (s *WaasPurgeCacheResourceCrud) Create() error {
	request := oci_waas.PurgeCacheRequest{}
func (s *WaasPurgeCacheResourceCrud) SetData() error {
	s.D.SetId(tfresource.GenerateDataSourceID())

=== ./internal/service/waas/waas_custom_protection_rule_resource.go ===
func WaasCustomProtectionRuleResource() *schema.Resource {
	return &schema.Resource{
func createWaasCustomProtectionRule(d *schema.ResourceData, m interface{}) error {
	sync := &WaasCustomProtectionRuleResourceCrud{}
func readWaasCustomProtectionRule(d *schema.ResourceData, m interface{}) error {
	sync := &WaasCustomProtectionRuleResourceCrud{}
func updateWaasCustomProtectionRule(d *schema.ResourceData, m interface{}) error {
	sync := &WaasCustomProtectionRuleResourceCrud{}
func deleteWaasCustomProtectionRule(d *schema.ResourceData, m interface{}) error {
	sync := &WaasCustomProtectionRuleResourceCrud{}
func (s *WaasCustomProtectionRuleResourceCrud) ID() string {
	return *s.Res.Id
func (s *WaasCustomProtectionRuleResourceCrud) CreatedPending() []string {
	return []string{
func (s *WaasCustomProtectionRuleResourceCrud) CreatedTarget() []string {
	return []string{
func (s *WaasCustomProtectionRuleResourceCrud) DeletedPending() []string {
	return []string{
func (s *WaasCustomProtectionRuleResourceCrud) DeletedTarget() []string {
	return []string{
func (s *WaasCustomProtectionRuleResourceCrud) Create() error {
	request := oci_waas.CreateCustomProtectionRuleRequest{}
func (s *WaasCustomProtectionRuleResourceCrud) Get() error {
	request := oci_waas.GetCustomProtectionRuleRequest{}
func (s *WaasCustomProtectionRuleResourceCrud) Update() error {
	if compartment, ok := s.D.GetOkExists("compartment_id"); ok && s.D.HasChange("compartment_id") {
func (s *WaasCustomProtectionRuleResourceCrud) Delete() error {
	request := oci_waas.DeleteCustomProtectionRuleRequest{}
func (s *WaasCustomProtectionRuleResourceCrud) SetData() error {
	if s.Res.CompartmentId != nil {
func (s *WaasCustomProtectionRuleResourceCrud) updateCompartment(compartment interface{}) error {
	changeCompartmentRequest := oci_waas.ChangeCustomProtectionRuleCompartmentRequest{}

=== ./internal/service/waas/waas_certificate_data_source.go ===
func WaasCertificateDataSource() *schema.Resource {
	fieldMap := make(map[string]*schema.Schema)
func readSingularWaasCertificate(d *schema.ResourceData, m interface{}) error {
	sync := &WaasCertificateDataSourceCrud{}
func (s *WaasCertificateDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *WaasCertificateDataSourceCrud) Get() error {
	request := oci_waas.GetCertificateRequest{}
func (s *WaasCertificateDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/waas/waas_address_lists_data_source.go ===
func WaasAddressListsDataSource() *schema.Resource {
	return &schema.Resource{
func readWaasAddressLists(d *schema.ResourceData, m interface{}) error {
	sync := &WaasAddressListsDataSourceCrud{}
func (s *WaasAddressListsDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *WaasAddressListsDataSourceCrud) Get() error {
	request := oci_waas.ListAddressListsRequest{}
func (s *WaasAddressListsDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/waas/waas_waas_policies_data_source.go ===
func WaasWaasPoliciesDataSource() *schema.Resource {
	return &schema.Resource{
func readWaasWaasPolicies(d *schema.ResourceData, m interface{}) error {
	sync := &WaasWaasPoliciesDataSourceCrud{}
func (s *WaasWaasPoliciesDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *WaasWaasPoliciesDataSourceCrud) Get() error {
	request := oci_waas.ListWaasPoliciesRequest{}
func (s *WaasWaasPoliciesDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/waas/waas_address_list_resource.go ===
func WaasAddressListResource() *schema.Resource {
	return &schema.Resource{
func createWaasAddressList(d *schema.ResourceData, m interface{}) error {
	sync := &WaasAddressListResourceCrud{}
func readWaasAddressList(d *schema.ResourceData, m interface{}) error {
	sync := &WaasAddressListResourceCrud{}
func updateWaasAddressList(d *schema.ResourceData, m interface{}) error {
	sync := &WaasAddressListResourceCrud{}
func deleteWaasAddressList(d *schema.ResourceData, m interface{}) error {
	sync := &WaasAddressListResourceCrud{}
func (s *WaasAddressListResourceCrud) ID() string {
	return *s.Res.Id
func (s *WaasAddressListResourceCrud) CreatedPending() []string {
	return []string{
func (s *WaasAddressListResourceCrud) CreatedTarget() []string {
	return []string{
func (s *WaasAddressListResourceCrud) DeletedPending() []string {
	return []string{
func (s *WaasAddressListResourceCrud) DeletedTarget() []string {
	return []string{
func (s *WaasAddressListResourceCrud) Create() error {
	request := oci_waas.CreateAddressListRequest{}
func (s *WaasAddressListResourceCrud) Get() error {
	request := oci_waas.GetAddressListRequest{}
func (s *WaasAddressListResourceCrud) Update() error {
	if compartment, ok := s.D.GetOkExists("compartment_id"); ok && s.D.HasChange("compartment_id") {
func (s *WaasAddressListResourceCrud) Delete() error {
	request := oci_waas.DeleteAddressListRequest{}
func (s *WaasAddressListResourceCrud) SetData() error {
	if s.Res.AddressCount != nil {
func (s *WaasAddressListResourceCrud) updateCompartment(compartment interface{}) error {
	changeCompartmentRequest := oci_waas.ChangeAddressListCompartmentRequest{}

=== ./internal/service/waas/waas_edge_subnets_data_source.go ===
func WaasEdgeSubnetsDataSource() *schema.Resource {
	return &schema.Resource{
func readWaasEdgeSubnets(d *schema.ResourceData, m interface{}) error {
	sync := &WaasEdgeSubnetsDataSourceCrud{}
func (s *WaasEdgeSubnetsDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *WaasEdgeSubnetsDataSourceCrud) Get() error {
	request := oci_waas.ListEdgeSubnetsRequest{}
func (s *WaasEdgeSubnetsDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/waas/waas_waas_policy_data_source.go ===
func WaasWaasPolicyDataSource() *schema.Resource {
	return &schema.Resource{
func readSingularWaasWaasPolicy(d *schema.ResourceData, m interface{}) error {
	sync := &WaasWaasPolicyDataSourceCrud{}
func (s *WaasWaasPolicyDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *WaasWaasPolicyDataSourceCrud) Get() error {
	request := oci_waas.GetWaasPolicyRequest{}
func (s *WaasWaasPolicyDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/waas/waas_custom_protection_rule_data_source.go ===
func WaasCustomProtectionRuleDataSource() *schema.Resource {
	fieldMap := make(map[string]*schema.Schema)
func readSingularWaasCustomProtectionRule(d *schema.ResourceData, m interface{}) error {
	sync := &WaasCustomProtectionRuleDataSourceCrud{}
func (s *WaasCustomProtectionRuleDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *WaasCustomProtectionRuleDataSourceCrud) Get() error {
	request := oci_waas.GetCustomProtectionRuleRequest{}
func (s *WaasCustomProtectionRuleDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/waas/waas_http_redirect_data_source.go ===
func WaasHttpRedirectDataSource() *schema.Resource {
	fieldMap := make(map[string]*schema.Schema)
func readSingularWaasHttpRedirect(d *schema.ResourceData, m interface{}) error {
	sync := &WaasHttpRedirectDataSourceCrud{}
func (s *WaasHttpRedirectDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *WaasHttpRedirectDataSourceCrud) Get() error {
	request := oci_waas.GetHttpRedirectRequest{}
func (s *WaasHttpRedirectDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/waas/waas_http_redirect_resource.go ===
func WaasHttpRedirectResource() *schema.Resource {
	return &schema.Resource{
func createWaasHttpRedirect(d *schema.ResourceData, m interface{}) error {
	sync := &WaasHttpRedirectResourceCrud{}
func readWaasHttpRedirect(d *schema.ResourceData, m interface{}) error {
	sync := &WaasHttpRedirectResourceCrud{}
func updateWaasHttpRedirect(d *schema.ResourceData, m interface{}) error {
	sync := &WaasHttpRedirectResourceCrud{}
func deleteWaasHttpRedirect(d *schema.ResourceData, m interface{}) error {
	sync := &WaasHttpRedirectResourceCrud{}
func (s *WaasHttpRedirectResourceCrud) ID() string {
	return *s.Res.Id
func (s *WaasHttpRedirectResourceCrud) CreatedPending() []string {
	return []string{
func (s *WaasHttpRedirectResourceCrud) CreatedTarget() []string {
	return []string{
func (s *WaasHttpRedirectResourceCrud) DeletedPending() []string {
	return []string{
func (s *WaasHttpRedirectResourceCrud) DeletedTarget() []string {
	return []string{
func (s *WaasHttpRedirectResourceCrud) Create() error {
	request := oci_waas.CreateHttpRedirectRequest{}
func (s *WaasHttpRedirectResourceCrud) getHttpRedirectFromWorkRequest(workId *string, retryPolicy *oci_common.RetryPolicy,
	actionTypeEnum oci_waas.WorkRequestResourceActionTypeEnum, timeout time.Duration) error {
func httpRedirectWaitForWorkRequest(wId *string, entityType string, action oci_waas.WorkRequestResourceActionTypeEnum,
	timeout time.Duration, disableFoundRetries bool, client *oci_waas.WaasClient) (*string, error) {
func (s *WaasHttpRedirectResourceCrud) Get() error {
	request := oci_waas.GetHttpRedirectRequest{}
func (s *WaasHttpRedirectResourceCrud) Update() error {
	if compartment, ok := s.D.GetOkExists("compartment_id"); ok && s.D.HasChange("compartment_id") {
func (s *WaasHttpRedirectResourceCrud) Delete() error {
	request := oci_waas.DeleteHttpRedirectRequest{}
func (s *WaasHttpRedirectResourceCrud) SetData() error {
	if s.Res.CompartmentId != nil {
func (s *WaasHttpRedirectResourceCrud) mapToHttpRedirectTarget(fieldKeyFormat string) (oci_waas.HttpRedirectTarget, error) {
	result := oci_waas.HttpRedirectTarget{}
func (s *WaasHttpRedirectResourceCrud) updateCompartment(compartment interface{}) error {
	changeCompartmentRequest := oci_waas.ChangeHttpRedirectCompartmentRequest{}

=== ./internal/service/waas/waas_waas_policy_resource.go ===
func WaasWaasPolicyResource() *schema.Resource {
	return &schema.Resource{
func createWaasWaasPolicy(d *schema.ResourceData, m interface{}) error {
	sync := &WaasWaasPolicyResourceCrud{}
func readWaasWaasPolicy(d *schema.ResourceData, m interface{}) error {
	sync := &WaasWaasPolicyResourceCrud{}
func updateWaasWaasPolicy(d *schema.ResourceData, m interface{}) error {
	sync := &WaasWaasPolicyResourceCrud{}
func deleteWaasWaasPolicy(d *schema.ResourceData, m interface{}) error {
	sync := &WaasWaasPolicyResourceCrud{}
func (s *WaasWaasPolicyResourceCrud) ID() string {
	return *s.Res.Id
func (s *WaasWaasPolicyResourceCrud) CreatedPending() []string {
	return []string{
func (s *WaasWaasPolicyResourceCrud) CreatedTarget() []string {
	return []string{
func (s *WaasWaasPolicyResourceCrud) DeletedPending() []string {
	return []string{
func (s *WaasWaasPolicyResourceCrud) DeletedTarget() []string {
	return []string{
func (s *WaasWaasPolicyResourceCrud) Create() error {
	request := oci_waas.CreateWaasPolicyRequest{}
func (s *WaasWaasPolicyResourceCrud) getWaasPolicyFromWorkRequest(workId *string, retryPolicy *oci_common.RetryPolicy,
	actionTypeEnum oci_waas.WorkRequestResourceActionTypeEnum, timeout time.Duration) error {
func waasPolicyWaitForWorkRequest(wId *string, entityType string, action oci_waas.WorkRequestResourceActionTypeEnum,
	timeout time.Duration, disableFoundRetries bool, client *oci_waas.WaasClient) (*string, error) {
func (s *WaasWaasPolicyResourceCrud) mapToOrigin(fieldKeyFormat string) (oci_waas.Origin, error) {
	result := oci_waas.Origin{}
func (s *WaasWaasPolicyResourceCrud) mapToOriginGroup(fieldKeyFormat string) (oci_waas.OriginGroup, error) {
	result := oci_waas.OriginGroup{}
func (s *WaasWaasPolicyResourceCrud) Get() error {
	request := oci_waas.GetWaasPolicyRequest{}
func (s *WaasWaasPolicyResourceCrud) Update() error {
	if compartment, ok := s.D.GetOkExists("compartment_id"); ok && s.D.HasChange("compartment_id") {
func (s *WaasWaasPolicyResourceCrud) objectMapToOriginMap(origins interface{}) (map[string]oci_waas.Origin, error) {

func (s *WaasWaasPolicyResourceCrud) objectMapToOriginGroupMap(originGroups interface{}) (map[string]oci_waas.OriginGroup, error) {

func (s *WaasWaasPolicyResourceCrud) Delete() error {
	request := oci_waas.DeleteWaasPolicyRequest{}
func (s *WaasWaasPolicyResourceCrud) SetData() error {
	s.D.Set("additional_domains", s.Res.AdditionalDomains)
func (s *WaasWaasPolicyResourceCrud) mapToAccessRule(fieldKeyFormat string) (oci_waas.AccessRule, error) {
	result := oci_waas.AccessRule{}
func (s *WaasWaasPolicyResourceCrud) mapToAccessRuleCriteria(fieldKeyFormat string) (oci_waas.AccessRuleCriteria, error) {
	result := oci_waas.AccessRuleCriteria{}
func (s *WaasWaasPolicyResourceCrud) mapToAddressRateLimiting(fieldKeyFormat string) (oci_waas.AddressRateLimiting, error) {
	result := oci_waas.AddressRateLimiting{}
func (s *WaasWaasPolicyResourceCrud) mapToBlockChallengeSettings(fieldKeyFormat string) (oci_waas.BlockChallengeSettings, error) {
	result := oci_waas.BlockChallengeSettings{}
func (s *WaasWaasPolicyResourceCrud) mapToCachingRule(fieldKeyFormat string) (oci_waas.CachingRule, error) {
	result := oci_waas.CachingRule{}
func (s *WaasWaasPolicyResourceCrud) mapToCachingRuleCriteria(fieldKeyFormat string) (oci_waas.CachingRuleCriteria, error) {
	result := oci_waas.CachingRuleCriteria{}
func (s *WaasWaasPolicyResourceCrud) mapToCaptcha(fieldKeyFormat string) (oci_waas.Captcha, error) {
	result := oci_waas.Captcha{}
func (s *WaasWaasPolicyResourceCrud) mapToCustomProtectionRuleSetting(fieldKeyFormat string) (oci_waas.CustomProtectionRuleSetting, error) {
	result := oci_waas.CustomProtectionRuleSetting{}
func (s *WaasWaasPolicyResourceCrud) mapToDeviceFingerprintChallenge(fieldKeyFormat string) (oci_waas.DeviceFingerprintChallenge, error) {
	result := oci_waas.DeviceFingerprintChallenge{}
func (s *WaasWaasPolicyResourceCrud) mapToHeader(fieldKeyFormat string) (oci_waas.Header, error) {
	result := oci_waas.Header{}
func (s *WaasWaasPolicyResourceCrud) mapToOriginGroupOrigins(fieldKeyFormat string) (oci_waas.OriginGroupOrigins, error) {
	result := oci_waas.OriginGroupOrigins{}
func (s *WaasWaasPolicyResourceCrud) mapToHeaderManipulationAction(fieldKeyFormat string) (oci_waas.HeaderManipulationAction, error) {
	var baseObject oci_waas.HeaderManipulationAction
func (s *WaasWaasPolicyResourceCrud) mapToHealthCheck(fieldKeyFormat string) (oci_waas.HealthCheck, error) {
	result := oci_waas.HealthCheck{}
func (s *WaasWaasPolicyResourceCrud) mapToHumanInteractionChallenge(fieldKeyFormat string) (oci_waas.HumanInteractionChallenge, error) {
	result := oci_waas.HumanInteractionChallenge{}
func (s *WaasWaasPolicyResourceCrud) mapToJsChallenge(fieldKeyFormat string) (oci_waas.JsChallenge, error) {
	result := oci_waas.JsChallenge{}
func (s *WaasWaasPolicyResourceCrud) mapToLoadBalancingMethod(fieldKeyFormat string) (oci_waas.LoadBalancingMethod, error) {
	var baseObject oci_waas.LoadBalancingMethod
func (s *WaasWaasPolicyResourceCrud) mapToPolicyConfig(fieldKeyFormat string) (oci_waas.PolicyConfig, error) {
	result := oci_waas.PolicyConfig{}
func (s *WaasWaasPolicyResourceCrud) mapToProtectionRuleExclusion(fieldKeyFormat string) (oci_waas.ProtectionRuleExclusion, error) {
	result := oci_waas.ProtectionRuleExclusion{}
func (s *WaasWaasPolicyResourceCrud) mapToProtectionSettings(fieldKeyFormat string) (oci_waas.ProtectionSettings, error) {
	result := oci_waas.ProtectionSettings{}
func (s *WaasWaasPolicyResourceCrud) mapToWafConfigDetails(fieldKeyFormat string) (oci_waas.WafConfigDetails, error) {
	result := oci_waas.WafConfigDetails{}
func (s *WaasWaasPolicyResourceCrud) mapToWafConfig(fieldKeyFormat string) (oci_waas.WafConfig, error) {
	result := oci_waas.WafConfig{}
func (s *WaasWaasPolicyResourceCrud) mapToWhitelist(fieldKeyFormat string) (oci_waas.Whitelist, error) {
	result := oci_waas.Whitelist{}
func (s *WaasWaasPolicyResourceCrud) updateCompartment(compartment interface{}) error {
	changeCompartmentRequest := oci_waas.ChangeWaasPolicyCompartmentRequest{}

=== ./internal/service/waas/waas_protection_rule_data_source.go ===
func WaasProtectionRuleDataSource() *schema.Resource {
	return &schema.Resource{
func readSingularWaasProtectionRule(d *schema.ResourceData, m interface{}) error {
	sync := &WaasProtectionRuleDataSourceCrud{}
func (s *WaasProtectionRuleDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *WaasProtectionRuleDataSourceCrud) Get() error {
	request := oci_waas.GetProtectionRuleRequest{}
func (s *WaasProtectionRuleDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/waas/waas_custom_protection_rules_data_source.go ===
func WaasCustomProtectionRulesDataSource() *schema.Resource {
	return &schema.Resource{
func readWaasCustomProtectionRules(d *schema.ResourceData, m interface{}) error {
	sync := &WaasCustomProtectionRulesDataSourceCrud{}
func (s *WaasCustomProtectionRulesDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *WaasCustomProtectionRulesDataSourceCrud) Get() error {
	request := oci_waas.ListCustomProtectionRulesRequest{}
func (s *WaasCustomProtectionRulesDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/waas/waas_protection_rules_data_source.go ===
func WaasProtectionRulesDataSource() *schema.Resource {
	return &schema.Resource{
func readWaasProtectionRules(d *schema.ResourceData, m interface{}) error {
	sync := &WaasProtectionRulesDataSourceCrud{}
func (s *WaasProtectionRulesDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *WaasProtectionRulesDataSourceCrud) Get() error {
	request := oci_waas.ListProtectionRulesRequest{}
func (s *WaasProtectionRulesDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/waas/register_resource.go ===
func RegisterResource() {
	tfresource.RegisterResource("oci_waas_address_list", WaasAddressListResource())

=== ./internal/service/blockchain/blockchain_osn_data_source.go ===
func BlockchainOsnDataSource() *schema.Resource {
	fieldMap := make(map[string]*schema.Schema)
func readSingularBlockchainOsn(d *schema.ResourceData, m interface{}) error {
	sync := &BlockchainOsnDataSourceCrud{}
func (s *BlockchainOsnDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *BlockchainOsnDataSourceCrud) Get() error {
	request := oci_blockchain.GetOsnRequest{}
func (s *BlockchainOsnDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/blockchain/blockchain_export.go ===
func getBlockchainPeerId(resource *tf_export.OCIResource) (string, error) {

func getBlockchainOsnId(resource *tf_export.OCIResource) (string, error) {


=== ./internal/service/blockchain/blockchain_osns_data_source.go ===
func BlockchainOsnsDataSource() *schema.Resource {
	return &schema.Resource{
func readBlockchainOsns(d *schema.ResourceData, m interface{}) error {
	sync := &BlockchainOsnsDataSourceCrud{}
func (s *BlockchainOsnsDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *BlockchainOsnsDataSourceCrud) Get() error {
	request := oci_blockchain.ListOsnsRequest{}
func (s *BlockchainOsnsDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/blockchain/blockchain_peer_data_source.go ===
func BlockchainPeerDataSource() *schema.Resource {
	fieldMap := make(map[string]*schema.Schema)
func readSingularBlockchainPeer(d *schema.ResourceData, m interface{}) error {
	sync := &BlockchainPeerDataSourceCrud{}
func (s *BlockchainPeerDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *BlockchainPeerDataSourceCrud) Get() error {
	request := oci_blockchain.GetPeerRequest{}
func (s *BlockchainPeerDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/blockchain/blockchain_blockchain_platform_patches_data_source.go ===
func BlockchainBlockchainPlatformPatchesDataSource() *schema.Resource {
	return &schema.Resource{
func readBlockchainBlockchainPlatformPatches(d *schema.ResourceData, m interface{}) error {
	sync := &BlockchainBlockchainPlatformPatchesDataSourceCrud{}
func (s *BlockchainBlockchainPlatformPatchesDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *BlockchainBlockchainPlatformPatchesDataSourceCrud) Get() error {
	request := oci_blockchain.ListBlockchainPlatformPatchesRequest{}
func (s *BlockchainBlockchainPlatformPatchesDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/blockchain/blockchain_peers_data_source.go ===
func BlockchainPeersDataSource() *schema.Resource {
	return &schema.Resource{
func readBlockchainPeers(d *schema.ResourceData, m interface{}) error {
	sync := &BlockchainPeersDataSourceCrud{}
func (s *BlockchainPeersDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *BlockchainPeersDataSourceCrud) Get() error {
	request := oci_blockchain.ListPeersRequest{}
func (s *BlockchainPeersDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/blockchain/blockchain_blockchain_platform_data_source.go ===
func BlockchainBlockchainPlatformDataSource() *schema.Resource {
	fieldMap := make(map[string]*schema.Schema)
func readSingularBlockchainBlockchainPlatform(d *schema.ResourceData, m interface{}) error {
	sync := &BlockchainBlockchainPlatformDataSourceCrud{}
func (s *BlockchainBlockchainPlatformDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *BlockchainBlockchainPlatformDataSourceCrud) Get() error {
	request := oci_blockchain.GetBlockchainPlatformRequest{}
func (s *BlockchainBlockchainPlatformDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/blockchain/blockchain_blockchain_platforms_data_source.go ===
func BlockchainBlockchainPlatformsDataSource() *schema.Resource {
	return &schema.Resource{
func readBlockchainBlockchainPlatforms(d *schema.ResourceData, m interface{}) error {
	sync := &BlockchainBlockchainPlatformsDataSourceCrud{}
func (s *BlockchainBlockchainPlatformsDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *BlockchainBlockchainPlatformsDataSourceCrud) Get() error {
	request := oci_blockchain.ListBlockchainPlatformsRequest{}
func (s *BlockchainBlockchainPlatformsDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/blockchain/blockchain_osn_resource.go ===
func BlockchainOsnResource() *schema.Resource {
	return &schema.Resource{
func createBlockchainOsn(d *schema.ResourceData, m interface{}) error {
	sync := &BlockchainOsnResourceCrud{}
func readBlockchainOsn(d *schema.ResourceData, m interface{}) error {
	sync := &BlockchainOsnResourceCrud{}
func deleteBlockchainOsn(d *schema.ResourceData, m interface{}) error {
	sync := &BlockchainOsnResourceCrud{}
func (s *BlockchainOsnResourceCrud) ID() string {
	return GetOsnCompositeId(s.D.Get("blockchain_platform_id").(string), *s.Res.OsnKey)
func (s *BlockchainOsnResourceCrud) CreatedTarget() []string {
	return []string{
func (s *BlockchainOsnResourceCrud) Create() error {
	request := oci_blockchain.CreateOsnRequest{}
func (s *BlockchainOsnResourceCrud) setIdFromWorkRequest(workId *string) {
	var subTypeKey *string
func (s *BlockchainOsnResourceCrud) getOsnFromWorkRequest(blockchainPlatformId *string, workId *string, retryPolicy *oci_common.RetryPolicy,
	actionTypeEnum oci_blockchain.WorkRequestResourceActionTypeEnum, timeout time.Duration) error {
func osnWaitForWorkRequest(wId *string, entityType string, action oci_blockchain.WorkRequestResourceActionTypeEnum,
	timeout time.Duration, disableFoundRetries bool, client *oci_blockchain.BlockchainPlatformClient) (*string, error) {
func getErrorFromBlockchainOsnWorkRequest(client *oci_blockchain.BlockchainPlatformClient, workId *string, retryPolicy *oci_common.RetryPolicy, entityType string, action oci_blockchain.WorkRequestResourceActionTypeEnum) error {
	response, err := client.ListWorkRequestErrors(context.Background(),
func (s *BlockchainOsnResourceCrud) Get() error {
	request := oci_blockchain.GetOsnRequest{}
func (s *BlockchainOsnResourceCrud) Delete() error {
	// service not support delete yet
func (s *BlockchainOsnResourceCrud) SetData() error {

func (s *BlockchainOsnResourceCrud) mapToOcpuAllocationNumberParam(fieldKeyFormat string) (oci_blockchain.OcpuAllocationNumberParam, error) {
	result := oci_blockchain.OcpuAllocationNumberParam{}

=== ./internal/service/blockchain/blockchain_platform_helper.go ===
func blockchainPlatformComputeShapeDiffSuppressFunction(key string, old string, new string, d *schema.ResourceData) bool {
	if old == "" || new == "" {
func sendUpdateBlockchainPlatformRequest(s *BlockchainBlockchainPlatformResourceCrud, request oci_blockchain.UpdateBlockchainPlatformRequest) error {
	request.RequestMetadata.RetryPolicy = tfresource.GetRetryPolicy(s.DisableNotFoundRetries, "blockchain")
func blockchainPlatformPeerOcpuAllocationNumberDiffSuppressFunction(key string, old string, new string, d *schema.ResourceData) bool {
	if old == "" || new == "" {

=== ./internal/service/blockchain/blockchain_peer_resource.go ===
func BlockchainPeerResource() *schema.Resource {
	return &schema.Resource{
func createBlockchainPeer(d *schema.ResourceData, m interface{}) error {
	sync := &BlockchainPeerResourceCrud{}
func readBlockchainPeer(d *schema.ResourceData, m interface{}) error {
	sync := &BlockchainPeerResourceCrud{}
func updateBlockchainPeer(d *schema.ResourceData, m interface{}) error {
	sync := &BlockchainPeerResourceCrud{}
func deleteBlockchainPeer(d *schema.ResourceData, m interface{}) error {
	sync := &BlockchainPeerResourceCrud{}
func (s *BlockchainPeerResourceCrud) ID() string {
	return GetPeerCompositeId(s.D.Get("blockchain_platform_id").(string), *s.Res.PeerKey)
func (s *BlockchainPeerResourceCrud) CreatedTarget() []string {
	return []string{
func (s *BlockchainPeerResourceCrud) Create() error {
	request := oci_blockchain.CreatePeerRequest{}
func (s *BlockchainPeerResourceCrud) setIdFromWorkRequest(workId *string) {
	var subTypeKey *string
func (s *BlockchainPeerResourceCrud) getPeerFromWorkRequest(blockchainPlatformId *string, workId *string, retryPolicy *oci_common.RetryPolicy,
	actionTypeEnum oci_blockchain.WorkRequestResourceActionTypeEnum, timeout time.Duration) error {
func peerWaitForWorkRequest(wId *string, entityType string, action oci_blockchain.WorkRequestResourceActionTypeEnum,
	timeout time.Duration, disableFoundRetries bool, client *oci_blockchain.BlockchainPlatformClient) (*string, error) {
func getErrorFromBlockchainPeerWorkRequest(client *oci_blockchain.BlockchainPlatformClient, workId *string, retryPolicy *oci_common.RetryPolicy, entityType string, action oci_blockchain.WorkRequestResourceActionTypeEnum) error {
	response, err := client.ListWorkRequestErrors(context.Background(),
func (s *BlockchainPeerResourceCrud) Get() error {
	request := oci_blockchain.GetPeerRequest{}
func (s *BlockchainPeerResourceCrud) Update() error {
	request := oci_blockchain.UpdatePeerRequest{}
func (s *BlockchainPeerResourceCrud) Delete() error {
	request := oci_blockchain.DeletePeerRequest{}
func (s *BlockchainPeerResourceCrud) SetData() error {

func (s *BlockchainPeerResourceCrud) mapToOcpuAllocationNumberParam(fieldKeyFormat string) (oci_blockchain.OcpuAllocationNumberParam, error) {
	result := oci_blockchain.OcpuAllocationNumberParam{}

=== ./internal/service/blockchain/blockchain_blockchain_platform_resource.go ===
func BlockchainBlockchainPlatformResource() *schema.Resource {
	return &schema.Resource{
func createBlockchainBlockchainPlatform(d *schema.ResourceData, m interface{}) error {
	sync := &BlockchainBlockchainPlatformResourceCrud{}
func readBlockchainBlockchainPlatform(d *schema.ResourceData, m interface{}) error {
	sync := &BlockchainBlockchainPlatformResourceCrud{}
func updateBlockchainBlockchainPlatform(d *schema.ResourceData, m interface{}) error {
	sync := &BlockchainBlockchainPlatformResourceCrud{}
func deleteBlockchainBlockchainPlatform(d *schema.ResourceData, m interface{}) error {
	sync := &BlockchainBlockchainPlatformResourceCrud{}
func (s *BlockchainBlockchainPlatformResourceCrud) ID() string {
	return *s.Res.Id
func (s *BlockchainBlockchainPlatformResourceCrud) CreatedPending() []string {
	return []string{
func (s *BlockchainBlockchainPlatformResourceCrud) CreatedTarget() []string {
	return []string{
func (s *BlockchainBlockchainPlatformResourceCrud) DeletedPending() []string {
	return []string{
func (s *BlockchainBlockchainPlatformResourceCrud) DeletedTarget() []string {
	return []string{
func (s *BlockchainBlockchainPlatformResourceCrud) Create() error {
	request := oci_blockchain.CreateBlockchainPlatformRequest{}
func (s *BlockchainBlockchainPlatformResourceCrud) getBlockchainPlatformFromWorkRequest(workId *string, retryPolicy *oci_common.RetryPolicy,
	actionTypeEnum oci_blockchain.WorkRequestResourceActionTypeEnum, timeout time.Duration) error {
func blockchainPlatformWaitForWorkRequest(wId *string, entityType string, action oci_blockchain.WorkRequestResourceActionTypeEnum,
	timeout time.Duration, disableFoundRetries bool, client *oci_blockchain.BlockchainPlatformClient) (*string, error) {
func getErrorFromBlockchainPlatformWorkRequest(client *oci_blockchain.BlockchainPlatformClient, workId *string, retryPolicy *oci_common.RetryPolicy, entityType string, action oci_blockchain.WorkRequestResourceActionTypeEnum) error {
	response, err := client.ListWorkRequestErrors(context.Background(),
func (s *BlockchainBlockchainPlatformResourceCrud) Get() error {
	request := oci_blockchain.GetBlockchainPlatformRequest{}
func (s *BlockchainBlockchainPlatformResourceCrud) Update() error {
	if compartment, ok := s.D.GetOkExists("compartment_id"); ok && s.D.HasChange("compartment_id") {
func (s *BlockchainBlockchainPlatformResourceCrud) Delete() error {
	request := oci_blockchain.DeleteBlockchainPlatformRequest{}
func (s *BlockchainBlockchainPlatformResourceCrud) SetData() error {
	if s.Res.CompartmentId != nil {
func (s *BlockchainBlockchainPlatformResourceCrud) mapToReplicaDetails(fieldKeyFormat string) (oci_blockchain.ReplicaDetails, error) {
	result := oci_blockchain.ReplicaDetails{}
func (s *BlockchainBlockchainPlatformResourceCrud) updateCompartment(compartment interface{}) error {
	changeCompartmentRequest := oci_blockchain.ChangeBlockchainPlatformCompartmentRequest{}

=== ./internal/service/blockchain/register_resource.go ===
func RegisterResource() {
	tfresource.RegisterResource("oci_blockchain_blockchain_platform", BlockchainBlockchainPlatformResource())

=== ./internal/service/sch/sch_connector_plugin_data_source.go ===
func SchConnectorPluginDataSource() *schema.Resource {
	return &schema.Resource{
func readSingularSchConnectorPlugin(d *schema.ResourceData, m interface{}) error {
	sync := &SchConnectorPluginDataSourceCrud{}
func (s *SchConnectorPluginDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *SchConnectorPluginDataSourceCrud) Get() error {
	request := oci_sch.GetConnectorPluginRequest{}
func (s *SchConnectorPluginDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/sch/sch_service_connectors_data_source.go ===
func SchServiceConnectorsDataSource() *schema.Resource {
	return &schema.Resource{
func readSchServiceConnectors(d *schema.ResourceData, m interface{}) error {
	sync := &SchServiceConnectorsDataSourceCrud{}
func (s *SchServiceConnectorsDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *SchServiceConnectorsDataSourceCrud) Get() error {
	request := oci_sch.ListServiceConnectorsRequest{}
func (s *SchServiceConnectorsDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/sch/sch_service_connector_resource.go ===
func SchServiceConnectorResource() *schema.Resource {
	return &schema.Resource{
func createSchServiceConnector(d *schema.ResourceData, m interface{}) error {
	sync := &SchServiceConnectorResourceCrud{}
func readSchServiceConnector(d *schema.ResourceData, m interface{}) error {
	sync := &SchServiceConnectorResourceCrud{}
func updateSchServiceConnector(d *schema.ResourceData, m interface{}) error {
	sync := &SchServiceConnectorResourceCrud{}
func deleteSchServiceConnector(d *schema.ResourceData, m interface{}) error {
	sync := &SchServiceConnectorResourceCrud{}
func (s *SchServiceConnectorResourceCrud) ID() string {
	return *s.Res.Id
func (s *SchServiceConnectorResourceCrud) CreatedPending() []string {
	return []string{
func (s *SchServiceConnectorResourceCrud) CreatedTarget() []string {
	return []string{
func (s *SchServiceConnectorResourceCrud) DeletedPending() []string {
	return []string{
func (s *SchServiceConnectorResourceCrud) DeletedTarget() []string {
	return []string{
func (s *SchServiceConnectorResourceCrud) Create() error {
	request := oci_sch.CreateServiceConnectorRequest{}
func (s *SchServiceConnectorResourceCrud) getServiceConnectorFromWorkRequest(workId *string, retryPolicy *oci_common.RetryPolicy,
	actionTypeEnum oci_sch.ActionTypeEnum, timeout time.Duration) error {
func (s *SchServiceConnectorResourceCrud) Get() error {
	request := oci_sch.GetServiceConnectorRequest{}
func (s *SchServiceConnectorResourceCrud) Update() error {
	if compartment, ok := s.D.GetOkExists("compartment_id"); ok && s.D.HasChange("compartment_id") {
func (s *SchServiceConnectorResourceCrud) Delete() error {
	request := oci_sch.DeleteServiceConnectorRequest{}
func (s *SchServiceConnectorResourceCrud) SetData() error {
	if s.Res.CompartmentId != nil {
func (s *SchServiceConnectorResourceCrud) mapToDimensionDetails(fieldKeyFormat string) (oci_sch.DimensionDetails, error) {
	result := oci_sch.DimensionDetails{}
func (s *SchServiceConnectorResourceCrud) mapToDimensionValueDetails(fieldKeyFormat string) (oci_sch.DimensionValueDetails, error) {
	var baseObject oci_sch.DimensionValueDetails
func (s *SchServiceConnectorResourceCrud) mapToLogSource(fieldKeyFormat string) (oci_sch.LogSource, error) {
	result := oci_sch.LogSource{}
func (s *SchServiceConnectorResourceCrud) mapToMonitoringSource(fieldKeyFormat string) (oci_sch.MonitoringSource, error) {
	result := oci_sch.MonitoringSource{}
func (s *SchServiceConnectorResourceCrud) mapToMonitoringSourceMetricDetails(fieldKeyFormat string) (oci_sch.MonitoringSourceMetricDetails, error) {
	var baseObject oci_sch.MonitoringSourceMetricDetails
func (s *SchServiceConnectorResourceCrud) mapToMonitoringSourceNamespaceDetails(fieldKeyFormat string) (oci_sch.MonitoringSourceNamespaceDetails, error) {
	var baseObject oci_sch.MonitoringSourceNamespaceDetails
func (s *SchServiceConnectorResourceCrud) mapToMonitoringSourceSelectedNamespace(fieldKeyFormat string) (oci_sch.MonitoringSourceSelectedNamespace, error) {
	result := oci_sch.MonitoringSourceSelectedNamespace{}
func (s *SchServiceConnectorResourceCrud) mapToSourceDetails(fieldKeyFormat string) (oci_sch.SourceDetails, error) {
	var baseObject oci_sch.SourceDetails
func (s *SchServiceConnectorResourceCrud) mapToStreamingCursorDetails(fieldKeyFormat string) (oci_sch.StreamingCursorDetails, error) {
	var baseObject oci_sch.StreamingCursorDetails
func (s *SchServiceConnectorResourceCrud) mapToTargetDetails(fieldKeyFormat string) (oci_sch.TargetDetails, error) {
	var baseObject oci_sch.TargetDetails
func (s *SchServiceConnectorResourceCrud) mapToTaskDetails(fieldKeyFormat string) (oci_sch.TaskDetails, error) {
	var baseObject oci_sch.TaskDetails
func (s *SchServiceConnectorResourceCrud) updateCompartment(compartment interface{}) error {
	changeCompartmentRequest := oci_sch.ChangeServiceConnectorCompartmentRequest{}
func (s *SchServiceConnectorResourceCrud) StartSchResource() error {
	request := oci_sch.ActivateServiceConnectorRequest{}
func (s *SchServiceConnectorResourceCrud) StopSchResource() error {
	request := oci_sch.DeactivateServiceConnectorRequest{}

=== ./internal/service/sch/sch_service_connector_data_source.go ===
func SchServiceConnectorDataSource() *schema.Resource {
	fieldMap := make(map[string]*schema.Schema)
func readSingularSchServiceConnector(d *schema.ResourceData, m interface{}) error {
	sync := &SchServiceConnectorDataSourceCrud{}
func (s *SchServiceConnectorDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *SchServiceConnectorDataSourceCrud) Get() error {
	request := oci_sch.GetServiceConnectorRequest{}
func (s *SchServiceConnectorDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/sch/register_resource.go ===
func RegisterResource() {
	tfresource.RegisterResource("oci_sch_service_connector", SchServiceConnectorResource())

=== ./internal/service/sch/sch_connector_plugins_data_source.go ===
func SchConnectorPluginsDataSource() *schema.Resource {
	return &schema.Resource{
func readSchConnectorPlugins(d *schema.ResourceData, m interface{}) error {
	sync := &SchConnectorPluginsDataSourceCrud{}
func (s *SchConnectorPluginsDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *SchConnectorPluginsDataSourceCrud) Get() error {
	request := oci_sch.ListConnectorPluginsRequest{}
func (s *SchConnectorPluginsDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/metering_computation/metering_computation_scheduled_runs_data_source.go ===
func MeteringComputationScheduledRunsDataSource() *schema.Resource {
	return &schema.Resource{
func readMeteringComputationScheduledRuns(d *schema.ResourceData, m interface{}) error {
	sync := &MeteringComputationScheduledRunsDataSourceCrud{}
func (s *MeteringComputationScheduledRunsDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *MeteringComputationScheduledRunsDataSourceCrud) Get() error {
	request := oci_metering_computation.ListScheduledRunsRequest{}
func (s *MeteringComputationScheduledRunsDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/metering_computation/metering_computation_usage_statement_email_recipients_groups_data_source.go ===
func MeteringComputationUsageStatementEmailRecipientsGroupsDataSource() *schema.Resource {
	return &schema.Resource{
func readMeteringComputationUsageStatementEmailRecipientsGroups(d *schema.ResourceData, m interface{}) error {
	sync := &MeteringComputationUsageStatementEmailRecipientsGroupsDataSourceCrud{}
func (s *MeteringComputationUsageStatementEmailRecipientsGroupsDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *MeteringComputationUsageStatementEmailRecipientsGroupsDataSourceCrud) Get() error {
	request := oci_metering_computation.ListEmailRecipientsGroupsRequest{}
func (s *MeteringComputationUsageStatementEmailRecipientsGroupsDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/metering_computation/metering_computation_query_resource.go ===
func MeteringComputationQueryResource() *schema.Resource {
	return &schema.Resource{
func createMeteringComputationQuery(d *schema.ResourceData, m interface{}) error {
	sync := &MeteringComputationQueryResourceCrud{}
func readMeteringComputationQuery(d *schema.ResourceData, m interface{}) error {
	sync := &MeteringComputationQueryResourceCrud{}
func updateMeteringComputationQuery(d *schema.ResourceData, m interface{}) error {
	sync := &MeteringComputationQueryResourceCrud{}
func deleteMeteringComputationQuery(d *schema.ResourceData, m interface{}) error {
	sync := &MeteringComputationQueryResourceCrud{}
func (s *MeteringComputationQueryResourceCrud) ID() string {
	return *s.Res.Id
func (s *MeteringComputationQueryResourceCrud) Create() error {
	request := oci_metering_computation.CreateQueryRequest{}
func (s *MeteringComputationQueryResourceCrud) Get() error {
	request := oci_metering_computation.GetQueryRequest{}
func (s *MeteringComputationQueryResourceCrud) Update() error {
	request := oci_metering_computation.UpdateQueryRequest{}
func (s *MeteringComputationQueryResourceCrud) Delete() error {
	request := oci_metering_computation.DeleteQueryRequest{}
func (s *MeteringComputationQueryResourceCrud) SetData() error {
	if s.Res.CompartmentId != nil {
func (s *MeteringComputationQueryResourceCrud) mapToCostAnalysisUi(fieldKeyFormat string) (oci_metering_computation.CostAnalysisUi, error) {
	result := oci_metering_computation.CostAnalysisUi{}
func (s *MeteringComputationQueryResourceCrud) mapToForecast(fieldKeyFormat string) (oci_metering_computation.Forecast, error) {
	result := oci_metering_computation.Forecast{}
func (s *MeteringComputationQueryResourceCrud) mapToQueryDefinition(fieldKeyFormat string) (oci_metering_computation.QueryDefinition, error) {
	result := oci_metering_computation.QueryDefinition{}
func (s *MeteringComputationQueryResourceCrud) mapToReportQuery(fieldKeyFormat string) (oci_metering_computation.ReportQuery, error) {
	result := oci_metering_computation.ReportQuery{}
func (s *MeteringComputationQueryResourceCrud) mapToTagInQuery(fieldKeyFormat string) (oci_metering_computation.Tag, error) {
	result := oci_metering_computation.Tag{}

=== ./internal/service/metering_computation/metering_computation_usage_carbon_emissions_query_resource.go ===
func MeteringComputationUsageCarbonEmissionsQueryResource() *schema.Resource {
	return &schema.Resource{
func createMeteringComputationUsageCarbonEmissionsQuery(d *schema.ResourceData, m interface{}) error {
	sync := &MeteringComputationUsageCarbonEmissionsQueryResourceCrud{}
func readMeteringComputationUsageCarbonEmissionsQuery(d *schema.ResourceData, m interface{}) error {
	sync := &MeteringComputationUsageCarbonEmissionsQueryResourceCrud{}
func updateMeteringComputationUsageCarbonEmissionsQuery(d *schema.ResourceData, m interface{}) error {
	sync := &MeteringComputationUsageCarbonEmissionsQueryResourceCrud{}
func deleteMeteringComputationUsageCarbonEmissionsQuery(d *schema.ResourceData, m interface{}) error {
	sync := &MeteringComputationUsageCarbonEmissionsQueryResourceCrud{}
func (s *MeteringComputationUsageCarbonEmissionsQueryResourceCrud) ID() string {
	return *s.Res.Id
func (s *MeteringComputationUsageCarbonEmissionsQueryResourceCrud) Create() error {
	request := oci_metering_computation.CreateUsageCarbonEmissionsQueryRequest{}
func (s *MeteringComputationUsageCarbonEmissionsQueryResourceCrud) Get() error {
	request := oci_metering_computation.GetUsageCarbonEmissionsQueryRequest{}
func (s *MeteringComputationUsageCarbonEmissionsQueryResourceCrud) Update() error {
	request := oci_metering_computation.UpdateUsageCarbonEmissionsQueryRequest{}
func (s *MeteringComputationUsageCarbonEmissionsQueryResourceCrud) Delete() error {
	request := oci_metering_computation.DeleteUsageCarbonEmissionsQueryRequest{}
func (s *MeteringComputationUsageCarbonEmissionsQueryResourceCrud) SetData() error {
	if s.Res.CompartmentId != nil {
func (s *MeteringComputationUsageCarbonEmissionsQueryResourceCrud) mapToCostAnalysisUI(fieldKeyFormat string) (oci_metering_computation.CostAnalysisUi, error) {
	result := oci_metering_computation.CostAnalysisUi{}
func (s *MeteringComputationUsageCarbonEmissionsQueryResourceCrud) mapToTag(fieldKeyFormat string) (oci_metering_computation.Tag, error) {
	result := oci_metering_computation.Tag{}
func (s *MeteringComputationUsageCarbonEmissionsQueryResourceCrud) mapToUsageCarbonEmissionsQueryDefinition(fieldKeyFormat string) (oci_metering_computation.UsageCarbonEmissionsQueryDefinition, error) {
	result := oci_metering_computation.UsageCarbonEmissionsQueryDefinition{}
func (s *MeteringComputationUsageCarbonEmissionsQueryResourceCrud) mapToUsageCarbonEmissionsReportQuery(fieldKeyFormat string) (oci_metering_computation.UsageCarbonEmissionsReportQuery, error) {
	result := oci_metering_computation.UsageCarbonEmissionsReportQuery{}

=== ./internal/service/metering_computation/metering_computation_custom_table_resource.go ===
func MeteringComputationCustomTableResource() *schema.Resource {
	return &schema.Resource{
func createMeteringComputationCustomTable(d *schema.ResourceData, m interface{}) error {
	sync := &MeteringComputationCustomTableResourceCrud{}
func readMeteringComputationCustomTable(d *schema.ResourceData, m interface{}) error {
	sync := &MeteringComputationCustomTableResourceCrud{}
func updateMeteringComputationCustomTable(d *schema.ResourceData, m interface{}) error {
	sync := &MeteringComputationCustomTableResourceCrud{}
func deleteMeteringComputationCustomTable(d *schema.ResourceData, m interface{}) error {
	sync := &MeteringComputationCustomTableResourceCrud{}
func (s *MeteringComputationCustomTableResourceCrud) ID() string {
	return *s.Res.Id
func (s *MeteringComputationCustomTableResourceCrud) Create() error {
	request := oci_metering_computation.CreateCustomTableRequest{}
func (s *MeteringComputationCustomTableResourceCrud) Get() error {
	request := oci_metering_computation.GetCustomTableRequest{}
func (s *MeteringComputationCustomTableResourceCrud) Update() error {
	request := oci_metering_computation.UpdateCustomTableRequest{}
func (s *MeteringComputationCustomTableResourceCrud) Delete() error {
	request := oci_metering_computation.DeleteCustomTableRequest{}
func (s *MeteringComputationCustomTableResourceCrud) SetData() error {
	if s.Res.CompartmentId != nil {
func (s *MeteringComputationCustomTableResourceCrud) mapToSavedCustomTable(fieldKeyFormat string) (oci_metering_computation.SavedCustomTable, error) {
	result := oci_metering_computation.SavedCustomTable{}
func (s *MeteringComputationCustomTableResourceCrud) mapToTag(fieldKeyFormat string) (oci_metering_computation.Tag, error) {
	result := oci_metering_computation.Tag{}

=== ./internal/service/metering_computation/metering_computation_usage_carbon_emission_resource.go ===
func MeteringComputationUsageCarbonEmissionResource() *schema.Resource {
	return &schema.Resource{
func createMeteringComputationUsageCarbonEmission(d *schema.ResourceData, m interface{}) error {
	sync := &MeteringComputationUsageCarbonEmissionResourceCrud{}
func readMeteringComputationUsageCarbonEmission(d *schema.ResourceData, m interface{}) error {
	return nil
func deleteMeteringComputationUsageCarbonEmission(d *schema.ResourceData, m interface{}) error {
	return nil
func (s *MeteringComputationUsageCarbonEmissionResourceCrud) ID() string {
	return tfresource.Timestamp()
func (s *MeteringComputationUsageCarbonEmissionResourceCrud) Create() error {
	request := oci_metering_computation.RequestUsageCarbonEmissionsRequest{}
func (s *MeteringComputationUsageCarbonEmissionResourceCrud) SetData() error {
	s.D.Set("group_by", s.Res.GroupBy)
func (s *MeteringComputationUsageCarbonEmissionResourceCrud) mapToTag(fieldKeyFormat string) (oci_metering_computation.Tag, error) {
	result := oci_metering_computation.Tag{}

=== ./internal/service/metering_computation/metering_computation_queries_data_source.go ===
func MeteringComputationQueriesDataSource() *schema.Resource {
	return &schema.Resource{
func readMeteringComputationQueries(d *schema.ResourceData, m interface{}) error {
	sync := &MeteringComputationQueriesDataSourceCrud{}
func (s *MeteringComputationQueriesDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *MeteringComputationQueriesDataSourceCrud) Get() error {
	request := oci_metering_computation.ListQueriesRequest{}
func (s *MeteringComputationQueriesDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/metering_computation/metering_computation_schedule_data_source.go ===
func MeteringComputationScheduleDataSource() *schema.Resource {
	fieldMap := make(map[string]*schema.Schema)
func readSingularMeteringComputationSchedule(d *schema.ResourceData, m interface{}) error {
	sync := &MeteringComputationScheduleDataSourceCrud{}
func (s *MeteringComputationScheduleDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *MeteringComputationScheduleDataSourceCrud) Get() error {
	request := oci_metering_computation.GetScheduleRequest{}
func (s *MeteringComputationScheduleDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/metering_computation/metering_computation_schedule_resource.go ===
func MeteringComputationScheduleResource() *schema.Resource {
	return &schema.Resource{
func createMeteringComputationSchedule(d *schema.ResourceData, m interface{}) error {
	sync := &MeteringComputationScheduleResourceCrud{}
func readMeteringComputationSchedule(d *schema.ResourceData, m interface{}) error {
	sync := &MeteringComputationScheduleResourceCrud{}
func updateMeteringComputationSchedule(d *schema.ResourceData, m interface{}) error {
	sync := &MeteringComputationScheduleResourceCrud{}
func deleteMeteringComputationSchedule(d *schema.ResourceData, m interface{}) error {
	sync := &MeteringComputationScheduleResourceCrud{}
func (s *MeteringComputationScheduleResourceCrud) ID() string {
	return *s.Res.Id
func (s *MeteringComputationScheduleResourceCrud) CreatedPending() []string {
	return []string{}
func (s *MeteringComputationScheduleResourceCrud) CreatedTarget() []string {
	return []string{
func (s *MeteringComputationScheduleResourceCrud) DeletedPending() []string {
	return []string{}
func (s *MeteringComputationScheduleResourceCrud) DeletedTarget() []string {
	return []string{}
func (s *MeteringComputationScheduleResourceCrud) Create() error {
	request := oci_metering_computation.CreateScheduleRequest{}
func (s *MeteringComputationScheduleResourceCrud) Get() error {
	request := oci_metering_computation.GetScheduleRequest{}
func (s *MeteringComputationScheduleResourceCrud) Update() error {
	request := oci_metering_computation.UpdateScheduleRequest{}
func (s *MeteringComputationScheduleResourceCrud) Delete() error {
	request := oci_metering_computation.DeleteScheduleRequest{}
func (s *MeteringComputationScheduleResourceCrud) SetData() error {
	if s.Res.CompartmentId != nil {
func (s *MeteringComputationScheduleResourceCrud) mapToDateRange(fieldKeyFormat string) (oci_metering_computation.DateRange, error) {
	var baseObject oci_metering_computation.DateRange
func (s *MeteringComputationScheduleResourceCrud) mapToQueryProperties(fieldKeyFormat string) (oci_metering_computation.QueryProperties, error) {
	result := oci_metering_computation.QueryProperties{}
func (s *MeteringComputationScheduleResourceCrud) mapToResultLocation(fieldKeyFormat string) (oci_metering_computation.ResultLocation, error) {
	var baseObject oci_metering_computation.ResultLocation
func (s *MeteringComputationScheduleResourceCrud) mapToTag(fieldKeyFormat string) (oci_metering_computation.Tag, error) {
	result := oci_metering_computation.Tag{}

=== ./internal/service/metering_computation/metering_computation_clean_energy_usage_data_source.go ===
func MeteringComputationCleanEnergyUsageDataSource() *schema.Resource {
	return &schema.Resource{
func readSingularMeteringComputationCleanEnergyUsage(d *schema.ResourceData, m interface{}) error {
	sync := &MeteringComputationCleanEnergyUsageDataSourceCrud{}
func (s *MeteringComputationCleanEnergyUsageDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *MeteringComputationCleanEnergyUsageDataSourceCrud) Get() error {
	request := oci_metering_computation.RequestCleanEnergyUsageRequest{}
func (s *MeteringComputationCleanEnergyUsageDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/metering_computation/metering_computation_custom_table_data_source.go ===
func MeteringComputationCustomTableDataSource() *schema.Resource {
	fieldMap := make(map[string]*schema.Schema)
func readSingularMeteringComputationCustomTable(d *schema.ResourceData, m interface{}) error {
	sync := &MeteringComputationCustomTableDataSourceCrud{}
func (s *MeteringComputationCustomTableDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *MeteringComputationCustomTableDataSourceCrud) Get() error {
	request := oci_metering_computation.GetCustomTableRequest{}
func (s *MeteringComputationCustomTableDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/metering_computation/metering_computation_usage_statement_email_recipients_group_data_source.go ===
func MeteringComputationUsageStatementEmailRecipientsGroupDataSource() *schema.Resource {
	fieldMap := make(map[string]*schema.Schema)
func readSingularMeteringComputationUsageStatementEmailRecipientsGroup(d *schema.ResourceData, m interface{}) error {
	sync := &MeteringComputationUsageStatementEmailRecipientsGroupDataSourceCrud{}
func (s *MeteringComputationUsageStatementEmailRecipientsGroupDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *MeteringComputationUsageStatementEmailRecipientsGroupDataSourceCrud) Get() error {
	request := oci_metering_computation.GetEmailRecipientsGroupRequest{}
func (s *MeteringComputationUsageStatementEmailRecipientsGroupDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/metering_computation/metering_computation_usage_carbon_emissions_queries_data_source.go ===
func MeteringComputationUsageCarbonEmissionsQueriesDataSource() *schema.Resource {
	return &schema.Resource{
func readMeteringComputationUsageCarbonEmissionsQueries(d *schema.ResourceData, m interface{}) error {
	sync := &MeteringComputationUsageCarbonEmissionsQueriesDataSourceCrud{}
func (s *MeteringComputationUsageCarbonEmissionsQueriesDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *MeteringComputationUsageCarbonEmissionsQueriesDataSourceCrud) Get() error {
	request := oci_metering_computation.ListUsageCarbonEmissionsQueriesRequest{}
func (s *MeteringComputationUsageCarbonEmissionsQueriesDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/metering_computation/metering_computation_configuration_data_source.go ===
func MeteringComputationConfigurationDataSource() *schema.Resource {
	return &schema.Resource{
func readSingularMeteringComputationConfiguration(d *schema.ResourceData, m interface{}) error {
	sync := &MeteringComputationConfigurationDataSourceCrud{}
func (s *MeteringComputationConfigurationDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *MeteringComputationConfigurationDataSourceCrud) Get() error {
	request := oci_metering_computation.RequestSummarizedConfigurationsRequest{}
func (s *MeteringComputationConfigurationDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/metering_computation/metering_computation_usage_resource.go ===
func MeteringComputationUsageResource() *schema.Resource {
	return &schema.Resource{
func createMeteringComputationUsage(d *schema.ResourceData, m interface{}) error {
	sync := &MeteringComputationUsageResourceCrud{}
func readMeteringComputationUsage(d *schema.ResourceData, m interface{}) error {
	return nil
func deleteMeteringComputationUsage(d *schema.ResourceData, m interface{}) error {
	return nil
func (s *MeteringComputationUsageResourceCrud) ID() string {
	return tfresource.Timestamp()
func (s *MeteringComputationUsageResourceCrud) Create() error {
	request := oci_metering_computation.RequestSummarizedUsagesRequest{}
func (s *MeteringComputationUsageResourceCrud) SetData() error {
	s.D.Set("group_by", s.Res.GroupBy)
func (s *MeteringComputationUsageResourceCrud) mapToForecast(fieldKeyFormat string) (oci_metering_computation.Forecast, error) {
	result := oci_metering_computation.Forecast{}
func (s *MeteringComputationUsageResourceCrud) mapToTag(fieldKeyFormat string) (oci_metering_computation.Tag, error) {
	result := oci_metering_computation.Tag{}

=== ./internal/service/metering_computation/metering_computation_scheduled_run_data_source.go ===
func MeteringComputationScheduledRunDataSource() *schema.Resource {
	return &schema.Resource{
func readSingularMeteringComputationScheduledRun(d *schema.ResourceData, m interface{}) error {
	sync := &MeteringComputationScheduledRunDataSourceCrud{}
func (s *MeteringComputationScheduledRunDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *MeteringComputationScheduledRunDataSourceCrud) Get() error {
	request := oci_metering_computation.GetScheduledRunRequest{}
func (s *MeteringComputationScheduledRunDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/metering_computation/metering_computation_export.go ===
func getMeteringComputationUsageStatementEmailRecipientsGroupId(resource *tf_export.OCIResource) (string, error) {


=== ./internal/service/metering_computation/metering_computation_schedules_data_source.go ===
func MeteringComputationSchedulesDataSource() *schema.Resource {
	return &schema.Resource{
func readMeteringComputationSchedules(d *schema.ResourceData, m interface{}) error {
	sync := &MeteringComputationSchedulesDataSourceCrud{}
func (s *MeteringComputationSchedulesDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *MeteringComputationSchedulesDataSourceCrud) Get() error {
	request := oci_metering_computation.ListSchedulesRequest{}
func (s *MeteringComputationSchedulesDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/metering_computation/metering_computation_query_data_source.go ===
func MeteringComputationQueryDataSource() *schema.Resource {
	fieldMap := make(map[string]*schema.Schema)
func readSingularMeteringComputationQuery(d *schema.ResourceData, m interface{}) error {
	sync := &MeteringComputationQueryDataSourceCrud{}
func (s *MeteringComputationQueryDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *MeteringComputationQueryDataSourceCrud) Get() error {
	request := oci_metering_computation.GetQueryRequest{}
func (s *MeteringComputationQueryDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/metering_computation/metering_computation_average_carbon_emission_data_source.go ===
func MeteringComputationAverageCarbonEmissionDataSource() *schema.Resource {
	return &schema.Resource{
func readSingularMeteringComputationAverageCarbonEmission(d *schema.ResourceData, m interface{}) error {
	sync := &MeteringComputationAverageCarbonEmissionDataSourceCrud{}
func (s *MeteringComputationAverageCarbonEmissionDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *MeteringComputationAverageCarbonEmissionDataSourceCrud) Get() error {
	request := oci_metering_computation.RequestAverageCarbonEmissionRequest{}
func (s *MeteringComputationAverageCarbonEmissionDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/metering_computation/metering_computation_usage_statement_email_recipients_group_resource.go ===
func MeteringComputationUsageStatementEmailRecipientsGroupResource() *schema.Resource {
	return &schema.Resource{
func createMeteringComputationUsageStatementEmailRecipientsGroup(d *schema.ResourceData, m interface{}) error {
	sync := &MeteringComputationUsageStatementEmailRecipientsGroupResourceCrud{}
func readMeteringComputationUsageStatementEmailRecipientsGroup(d *schema.ResourceData, m interface{}) error {
	sync := &MeteringComputationUsageStatementEmailRecipientsGroupResourceCrud{}
func updateMeteringComputationUsageStatementEmailRecipientsGroup(d *schema.ResourceData, m interface{}) error {
	sync := &MeteringComputationUsageStatementEmailRecipientsGroupResourceCrud{}
func deleteMeteringComputationUsageStatementEmailRecipientsGroup(d *schema.ResourceData, m interface{}) error {
	sync := &MeteringComputationUsageStatementEmailRecipientsGroupResourceCrud{}
func (s *MeteringComputationUsageStatementEmailRecipientsGroupResourceCrud) ID() string {
	return GetUsageStatementEmailRecipientsGroupCompositeId(*s.Res.Id, s.D.Get("subscription_id").(string), s.D.Get("compartment_id").(string))
func (s *MeteringComputationUsageStatementEmailRecipientsGroupResourceCrud) CreatedPending() []string {
	return []string{}
func (s *MeteringComputationUsageStatementEmailRecipientsGroupResourceCrud) CreatedTarget() []string {
	return []string{
func (s *MeteringComputationUsageStatementEmailRecipientsGroupResourceCrud) DeletedPending() []string {
	return []string{}
func (s *MeteringComputationUsageStatementEmailRecipientsGroupResourceCrud) DeletedTarget() []string {
	return []string{}
func (s *MeteringComputationUsageStatementEmailRecipientsGroupResourceCrud) Create() error {
	request := oci_metering_computation.CreateEmailRecipientsGroupRequest{}
func (s *MeteringComputationUsageStatementEmailRecipientsGroupResourceCrud) Get() error {
	request := oci_metering_computation.GetEmailRecipientsGroupRequest{}
func (s *MeteringComputationUsageStatementEmailRecipientsGroupResourceCrud) Update() error {
	request := oci_metering_computation.UpdateEmailRecipientsGroupRequest{}
func (s *MeteringComputationUsageStatementEmailRecipientsGroupResourceCrud) Delete() error {
	request := oci_metering_computation.DeleteEmailRecipientsGroupRequest{}
func (s *MeteringComputationUsageStatementEmailRecipientsGroupResourceCrud) SetData() error {

func (s *MeteringComputationUsageStatementEmailRecipientsGroupResourceCrud) mapToEmailRecipient(fieldKeyFormat string) (oci_metering_computation.EmailRecipient, error) {
	result := oci_metering_computation.EmailRecipient{}

=== ./internal/service/metering_computation/metering_computation_usage_carbon_emissions_config_data_source.go ===
func MeteringComputationUsageCarbonEmissionsConfigDataSource() *schema.Resource {
	return &schema.Resource{
func readSingularMeteringComputationUsageCarbonEmissionsConfig(d *schema.ResourceData, m interface{}) error {
	sync := &MeteringComputationUsageCarbonEmissionsConfigDataSourceCrud{}
func (s *MeteringComputationUsageCarbonEmissionsConfigDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *MeteringComputationUsageCarbonEmissionsConfigDataSourceCrud) Get() error {
	request := oci_metering_computation.RequestUsageCarbonEmissionConfigRequest{}
func (s *MeteringComputationUsageCarbonEmissionsConfigDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/metering_computation/metering_computation_usage_carbon_emissions_query_data_source.go ===
func MeteringComputationUsageCarbonEmissionsQueryDataSource() *schema.Resource {
	fieldMap := make(map[string]*schema.Schema)
func readSingularMeteringComputationUsageCarbonEmissionsQuery(d *schema.ResourceData, m interface{}) error {
	sync := &MeteringComputationUsageCarbonEmissionsQueryDataSourceCrud{}
func (s *MeteringComputationUsageCarbonEmissionsQueryDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *MeteringComputationUsageCarbonEmissionsQueryDataSourceCrud) Get() error {
	request := oci_metering_computation.GetUsageCarbonEmissionsQueryRequest{}
func (s *MeteringComputationUsageCarbonEmissionsQueryDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/metering_computation/metering_computation_custom_tables_data_source.go ===
func MeteringComputationCustomTablesDataSource() *schema.Resource {
	return &schema.Resource{
func readMeteringComputationCustomTables(d *schema.ResourceData, m interface{}) error {
	sync := &MeteringComputationCustomTablesDataSourceCrud{}
func (s *MeteringComputationCustomTablesDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *MeteringComputationCustomTablesDataSourceCrud) Get() error {
	request := oci_metering_computation.ListCustomTablesRequest{}
func (s *MeteringComputationCustomTablesDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/metering_computation/register_resource.go ===
func RegisterResource() {
	tfresource.RegisterResource("oci_metering_computation_custom_table", MeteringComputationCustomTableResource())

=== ./internal/service/file_storage/file_storage_filesystem_snapshot_policies_data_source.go ===
func FileStorageFilesystemSnapshotPoliciesDataSource() *schema.Resource {
	return &schema.Resource{
func readFileStorageFilesystemSnapshotPolicies(d *schema.ResourceData, m interface{}) error {
	sync := &FileStorageFilesystemSnapshotPoliciesDataSourceCrud{}
func (s *FileStorageFilesystemSnapshotPoliciesDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *FileStorageFilesystemSnapshotPoliciesDataSourceCrud) Get() error {
	request := oci_file_storage.ListFilesystemSnapshotPoliciesRequest{}
func (s *FileStorageFilesystemSnapshotPoliciesDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/file_storage/file_storage_file_systems_data_source.go ===
func FileStorageFileSystemsDataSource() *schema.Resource {
	return &schema.Resource{
func readFileStorageFileSystems(d *schema.ResourceData, m interface{}) error {
	sync := &FileStorageFileSystemsDataSourceCrud{}
func (s *FileStorageFileSystemsDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *FileStorageFileSystemsDataSourceCrud) Get() error {
	request := oci_file_storage.ListFileSystemsRequest{}
func (s *FileStorageFileSystemsDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/file_storage/file_storage_exports_data_source.go ===
func FileStorageExportsDataSource() *schema.Resource {
	return &schema.Resource{
func readFileStorageExports(d *schema.ResourceData, m interface{}) error {
	sync := &FileStorageExportsDataSourceCrud{}
func (s *FileStorageExportsDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *FileStorageExportsDataSourceCrud) Get() error {
	request := oci_file_storage.ListExportsRequest{}
func (s *FileStorageExportsDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/file_storage/file_storage_outbound_connectors_data_source.go ===
func FileStorageOutboundConnectorsDataSource() *schema.Resource {
	return &schema.Resource{
func readFileStorageOutboundConnectors(d *schema.ResourceData, m interface{}) error {
	sync := &FileStorageOutboundConnectorsDataSourceCrud{}
func (s *FileStorageOutboundConnectorsDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *FileStorageOutboundConnectorsDataSourceCrud) Get() error {
	request := oci_file_storage.ListOutboundConnectorsRequest{}
func (s *FileStorageOutboundConnectorsDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/file_storage/file_storage_export_set_resource.go ===
func FileStorageExportSetResource() *schema.Resource {
	return &schema.Resource{
func createFileStorageExportSet(d *schema.ResourceData, m interface{}) error {
	sync := &FileStorageExportSetResourceCrud{}
func readFileStorageExportSet(d *schema.ResourceData, m interface{}) error {
	sync := &FileStorageExportSetResourceCrud{}
func updateFileStorageExportSet(d *schema.ResourceData, m interface{}) error {
	sync := &FileStorageExportSetResourceCrud{}
func deleteFileStorageExportSet(d *schema.ResourceData, m interface{}) error {
	// Export set is deleted when a mount target is deleted.
func (s *FileStorageExportSetResourceCrud) ID() string {
	return *s.Res.Id
func (s *FileStorageExportSetResourceCrud) Create() error {
	// We can't really Create an ExportSet. We need to get the exportSetId from the MountTarget it is attached to.
func (s *FileStorageExportSetResourceCrud) Get() error {
	request := oci_file_storage.GetExportSetRequest{}
func (s *FileStorageExportSetResourceCrud) Update() error {
	request := oci_file_storage.UpdateExportSetRequest{}
func (s *FileStorageExportSetResourceCrud) Delete() error {
	// Export set is deleted when a mount target is deleted.
func (s *FileStorageExportSetResourceCrud) SetData() error {
	if s.Res.AvailabilityDomain != nil {

=== ./internal/service/file_storage/file_storage_replication_target_data_source.go ===
func FileStorageReplicationTargetDataSource() *schema.Resource {
	return &schema.Resource{
func readSingularFileStorageReplicationTarget(d *schema.ResourceData, m interface{}) error {
	sync := &FileStorageReplicationTargetDataSourceCrud{}
func (s *FileStorageReplicationTargetDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *FileStorageReplicationTargetDataSourceCrud) Get() error {
	request := oci_file_storage.GetReplicationTargetRequest{}
func (s *FileStorageReplicationTargetDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/file_storage/file_storage_file_system_resource.go ===
func FileStorageFileSystemResource() *schema.Resource {
	return &schema.Resource{
func createFileStorageFileSystem(d *schema.ResourceData, m interface{}) error {
	sync := &FileStorageFileSystemResourceCrud{}
func readFileStorageFileSystem(d *schema.ResourceData, m interface{}) error {
	sync := &FileStorageFileSystemResourceCrud{}
func updateFileStorageFileSystem(d *schema.ResourceData, m interface{}) error {
	sync := &FileStorageFileSystemResourceCrud{}
func deleteFileStorageFileSystem(d *schema.ResourceData, m interface{}) error {
	sync := &FileStorageFileSystemResourceCrud{}
func (s *FileStorageFileSystemResourceCrud) ID() string {
	return *s.Res.Id
func (s *FileStorageFileSystemResourceCrud) CreatedPending() []string {
	return []string{
func (s *FileStorageFileSystemResourceCrud) CreatedTarget() []string {
	return []string{
func (s *FileStorageFileSystemResourceCrud) DeletedPending() []string {
	return []string{
func (s *FileStorageFileSystemResourceCrud) DeletedTarget() []string {
	return []string{
func (s *FileStorageFileSystemResourceCrud) Create() error {
	request := oci_file_storage.CreateFileSystemRequest{}
func (s *FileStorageFileSystemResourceCrud) Get() error {
	request := oci_file_storage.GetFileSystemRequest{}
func (s *FileStorageFileSystemResourceCrud) Update() error {
	if compartment, ok := s.D.GetOkExists("compartment_id"); ok && s.D.HasChange("compartment_id") {
func (s *FileStorageFileSystemResourceCrud) Delete() error {
	request := oci_file_storage.DeleteFileSystemRequest{}
func (s *FileStorageFileSystemResourceCrud) SetData() error {
	if s.Res.AvailabilityDomain != nil {
func (s *FileStorageFileSystemResourceCrud) DetachClone() error {
	request := oci_file_storage.DetachCloneRequest{}
func (s *FileStorageFileSystemResourceCrud) mapToResourceLock(fieldKeyFormat string) (oci_file_storage.ResourceLock, error) {
	result := oci_file_storage.ResourceLock{}
func ResourceLockToMap(obj oci_file_storage.ResourceLock) map[string]interface{} {
	result := map[string]interface{}{}
func (s *FileStorageFileSystemResourceCrud) updateCompartment(compartment interface{}) error {
	changeCompartmentRequest := oci_file_storage.ChangeFileSystemCompartmentRequest{}

=== ./internal/service/file_storage/file_storage_filesystem_snapshot_policy_data_source.go ===
func FileStorageFilesystemSnapshotPolicyDataSource() *schema.Resource {
	fieldMap := make(map[string]*schema.Schema)
func readSingularFileStorageFilesystemSnapshotPolicy(d *schema.ResourceData, m interface{}) error {
	sync := &FileStorageFilesystemSnapshotPolicyDataSourceCrud{}
func (s *FileStorageFilesystemSnapshotPolicyDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *FileStorageFilesystemSnapshotPolicyDataSourceCrud) Get() error {
	request := oci_file_storage.GetFilesystemSnapshotPolicyRequest{}
func (s *FileStorageFilesystemSnapshotPolicyDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/file_storage/file_storage_replication_data_source.go ===
func FileStorageReplicationDataSource() *schema.Resource {
	fieldMap := make(map[string]*schema.Schema)
func readSingularFileStorageReplication(d *schema.ResourceData, m interface{}) error {
	sync := &FileStorageReplicationDataSourceCrud{}
func (s *FileStorageReplicationDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *FileStorageReplicationDataSourceCrud) Get() error {
	request := oci_file_storage.GetReplicationRequest{}
func (s *FileStorageReplicationDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/file_storage/file_storage_snapshot_resource.go ===
func FileStorageSnapshotResource() *schema.Resource {
	return &schema.Resource{
func createFileStorageSnapshot(d *schema.ResourceData, m interface{}) error {
	sync := &FileStorageSnapshotResourceCrud{}
func readFileStorageSnapshot(d *schema.ResourceData, m interface{}) error {
	sync := &FileStorageSnapshotResourceCrud{}
func updateFileStorageSnapshot(d *schema.ResourceData, m interface{}) error {
	sync := &FileStorageSnapshotResourceCrud{}
func deleteFileStorageSnapshot(d *schema.ResourceData, m interface{}) error {
	sync := &FileStorageSnapshotResourceCrud{}
func (s *FileStorageSnapshotResourceCrud) ID() string {
	return *s.Res.Id
func (s *FileStorageSnapshotResourceCrud) CreatedPending() []string {
	return []string{
func (s *FileStorageSnapshotResourceCrud) CreatedTarget() []string {
	return []string{
func (s *FileStorageSnapshotResourceCrud) DeletedPending() []string {
	return []string{
func (s *FileStorageSnapshotResourceCrud) DeletedTarget() []string {
	return []string{
func (s *FileStorageSnapshotResourceCrud) Create() error {
	request := oci_file_storage.CreateSnapshotRequest{}
func (s *FileStorageSnapshotResourceCrud) Get() error {
	request := oci_file_storage.GetSnapshotRequest{}
func (s *FileStorageSnapshotResourceCrud) Update() error {
	request := oci_file_storage.UpdateSnapshotRequest{}
func (s *FileStorageSnapshotResourceCrud) Delete() error {
	request := oci_file_storage.DeleteSnapshotRequest{}
func (s *FileStorageSnapshotResourceCrud) SetData() error {
	if s.Res.DefinedTags != nil {
func (s *FileStorageSnapshotResourceCrud) mapToResourceLock(fieldKeyFormat string) (oci_file_storage.ResourceLock, error) {
	result := oci_file_storage.ResourceLock{}

=== ./internal/service/file_storage/file_storage_filesystem_snapshot_policy_resource.go ===
func FileStorageFilesystemSnapshotPolicyResource() *schema.Resource {
	return &schema.Resource{
func createFileStorageFilesystemSnapshotPolicy(d *schema.ResourceData, m interface{}) error {
	sync := &FileStorageFilesystemSnapshotPolicyResourceCrud{}
func readFileStorageFilesystemSnapshotPolicy(d *schema.ResourceData, m interface{}) error {
	sync := &FileStorageFilesystemSnapshotPolicyResourceCrud{}
func updateFileStorageFilesystemSnapshotPolicy(d *schema.ResourceData, m interface{}) error {
	sync := &FileStorageFilesystemSnapshotPolicyResourceCrud{}
func deleteFileStorageFilesystemSnapshotPolicy(d *schema.ResourceData, m interface{}) error {
	sync := &FileStorageFilesystemSnapshotPolicyResourceCrud{}
func (s *FileStorageFilesystemSnapshotPolicyResourceCrud) ID() string {
	return *s.Res.Id
func (s *FileStorageFilesystemSnapshotPolicyResourceCrud) CreatedPending() []string {
	return []string{
func (s *FileStorageFilesystemSnapshotPolicyResourceCrud) CreatedTarget() []string {
	return []string{
func (s *FileStorageFilesystemSnapshotPolicyResourceCrud) DeletedPending() []string {
	return []string{
func (s *FileStorageFilesystemSnapshotPolicyResourceCrud) DeletedTarget() []string {
	return []string{
func (s *FileStorageFilesystemSnapshotPolicyResourceCrud) Create() error {
	request := oci_file_storage.CreateFilesystemSnapshotPolicyRequest{}
func (s *FileStorageFilesystemSnapshotPolicyResourceCrud) Get() error {
	request := oci_file_storage.GetFilesystemSnapshotPolicyRequest{}
func (s *FileStorageFilesystemSnapshotPolicyResourceCrud) Update() error {
	if compartment, ok := s.D.GetOkExists("compartment_id"); ok && s.D.HasChange("compartment_id") {
func (s *FileStorageFilesystemSnapshotPolicyResourceCrud) Delete() error {
	request := oci_file_storage.DeleteFilesystemSnapshotPolicyRequest{}
func (s *FileStorageFilesystemSnapshotPolicyResourceCrud) SetData() error {
	if s.Res.AvailabilityDomain != nil {
func (s *FileStorageFilesystemSnapshotPolicyResourceCrud) StartFilesystemSnapshotPolicy() error {
	request := oci_file_storage.UnpauseFilesystemSnapshotPolicyRequest{}
func (s *FileStorageFilesystemSnapshotPolicyResourceCrud) StopFilesystemSnapshotPolicy() error {
	request := oci_file_storage.PauseFilesystemSnapshotPolicyRequest{}
func (s *FileStorageFilesystemSnapshotPolicyResourceCrud) mapToResourceLock(fieldKeyFormat string) (oci_file_storage.ResourceLock, error) {
	result := oci_file_storage.ResourceLock{}
func (s *FileStorageFilesystemSnapshotPolicyResourceCrud) mapToSnapshotSchedule(fieldKeyFormat string) (oci_file_storage.SnapshotSchedule, error) {
	result := oci_file_storage.SnapshotSchedule{}
func (s *FileStorageFilesystemSnapshotPolicyResourceCrud) updateCompartment(compartment interface{}) error {
	changeCompartmentRequest := oci_file_storage.ChangeFilesystemSnapshotPolicyCompartmentRequest{}

=== ./internal/service/file_storage/file_storage_mount_targets_data_source.go ===
func FileStorageMountTargetsDataSource() *schema.Resource {
	return &schema.Resource{
func readFileStorageMountTargets(d *schema.ResourceData, m interface{}) error {
	sync := &FileStorageMountTargetsDataSourceCrud{}
func (s *FileStorageMountTargetsDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *FileStorageMountTargetsDataSourceCrud) Get() error {
	request := oci_file_storage.ListMountTargetsRequest{}
func (s *FileStorageMountTargetsDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/file_storage/file_storage_outbound_connector_resource.go ===
func FileStorageOutboundConnectorResource() *schema.Resource {
	return &schema.Resource{
func createFileStorageOutboundConnector(d *schema.ResourceData, m interface{}) error {
	sync := &FileStorageOutboundConnectorResourceCrud{}
func readFileStorageOutboundConnector(d *schema.ResourceData, m interface{}) error {
	sync := &FileStorageOutboundConnectorResourceCrud{}
func updateFileStorageOutboundConnector(d *schema.ResourceData, m interface{}) error {
	sync := &FileStorageOutboundConnectorResourceCrud{}
func deleteFileStorageOutboundConnector(d *schema.ResourceData, m interface{}) error {
	sync := &FileStorageOutboundConnectorResourceCrud{}
func (s *FileStorageOutboundConnectorResourceCrud) ID() string {
	outboundConnector := *s.Res
func (s *FileStorageOutboundConnectorResourceCrud) CreatedPending() []string {
	return []string{
func (s *FileStorageOutboundConnectorResourceCrud) CreatedTarget() []string {
	return []string{
func (s *FileStorageOutboundConnectorResourceCrud) DeletedPending() []string {
	return []string{
func (s *FileStorageOutboundConnectorResourceCrud) DeletedTarget() []string {
	return []string{
func (s *FileStorageOutboundConnectorResourceCrud) Create() error {
	request := oci_file_storage.CreateOutboundConnectorRequest{}
func (s *FileStorageOutboundConnectorResourceCrud) Get() error {
	request := oci_file_storage.GetOutboundConnectorRequest{}
func (s *FileStorageOutboundConnectorResourceCrud) Update() error {
	if compartment, ok := s.D.GetOkExists("compartment_id"); ok && s.D.HasChange("compartment_id") {
func (s *FileStorageOutboundConnectorResourceCrud) Delete() error {
	request := oci_file_storage.DeleteOutboundConnectorRequest{}
func (s *FileStorageOutboundConnectorResourceCrud) SetData() error {
	switch v := (*s.Res).(type) {
func (s *FileStorageOutboundConnectorResourceCrud) mapToEndpoint(fieldKeyFormat string) (oci_file_storage.Endpoint, error) {
	result := oci_file_storage.Endpoint{}
func (s *FileStorageOutboundConnectorResourceCrud) mapToResourceLock(fieldKeyFormat string) (oci_file_storage.ResourceLock, error) {
	result := oci_file_storage.ResourceLock{}
func (s *FileStorageOutboundConnectorResourceCrud) populateTopLevelPolymorphicCreateOutboundConnectorRequest(request *oci_file_storage.CreateOutboundConnectorRequest) error {
	//discriminator
func (s *FileStorageOutboundConnectorResourceCrud) updateCompartment(compartment interface{}) error {
	changeCompartmentRequest := oci_file_storage.ChangeOutboundConnectorCompartmentRequest{}

=== ./internal/service/file_storage/file_storage_export_resource.go ===
func FileStorageExportResource() *schema.Resource {
	return &schema.Resource{
func createFileStorageExport(d *schema.ResourceData, m interface{}) error {
	sync := &FileStorageExportResourceCrud{}
func readFileStorageExport(d *schema.ResourceData, m interface{}) error {
	sync := &FileStorageExportResourceCrud{}
func updateFileStorageExport(d *schema.ResourceData, m interface{}) error {
	sync := &FileStorageExportResourceCrud{}
func deleteFileStorageExport(d *schema.ResourceData, m interface{}) error {
	sync := &FileStorageExportResourceCrud{}
func (s *FileStorageExportResourceCrud) ID() string {
	return *s.Res.Id
func (s *FileStorageExportResourceCrud) CreatedPending() []string {
	return []string{
func (s *FileStorageExportResourceCrud) CreatedTarget() []string {
	return []string{
func (s *FileStorageExportResourceCrud) DeletedPending() []string {
	return []string{
func (s *FileStorageExportResourceCrud) DeletedTarget() []string {
	return []string{
func (s *FileStorageExportResourceCrud) Create() error {
	request := oci_file_storage.CreateExportRequest{}
func (s *FileStorageExportResourceCrud) Get() error {
	request := oci_file_storage.GetExportRequest{}
func (s *FileStorageExportResourceCrud) Update() error {
	request := oci_file_storage.UpdateExportRequest{}
func (s *FileStorageExportResourceCrud) Delete() error {
	request := oci_file_storage.DeleteExportRequest{}
func (s *FileStorageExportResourceCrud) SetData() error {
	exportOptions := []interface{}{}
func (s *FileStorageExportResourceCrud) mapToClientOptions(fieldKeyFormat string) (oci_file_storage.ClientOptions, error) {
	result := oci_file_storage.ClientOptions{}
func (s *FileStorageExportResourceCrud) mapToResourceLock(fieldKeyFormat string) (oci_file_storage.ResourceLock, error) {
	result := oci_file_storage.ResourceLock{}

=== ./internal/service/file_storage/file_storage_snapshot_data_source.go ===
func FileStorageSnapshotDataSource() *schema.Resource {
	fieldMap := make(map[string]*schema.Schema)
func readSingularFileStorageSnapshot(d *schema.ResourceData, m interface{}) error {
	sync := &FileStorageSnapshotDataSourceCrud{}
func (s *FileStorageSnapshotDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *FileStorageSnapshotDataSourceCrud) Get() error {
	request := oci_file_storage.GetSnapshotRequest{}
func (s *FileStorageSnapshotDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/file_storage/file_storage_replication_resource.go ===
func FileStorageReplicationResource() *schema.Resource {
	return &schema.Resource{
func createFileStorageReplication(d *schema.ResourceData, m interface{}) error {
	sync := &FileStorageReplicationResourceCrud{}
func readFileStorageReplication(d *schema.ResourceData, m interface{}) error {
	sync := &FileStorageReplicationResourceCrud{}
func updateFileStorageReplication(d *schema.ResourceData, m interface{}) error {
	sync := &FileStorageReplicationResourceCrud{}
func deleteFileStorageReplication(d *schema.ResourceData, m interface{}) error {
	sync := &FileStorageReplicationResourceCrud{}
func (s *FileStorageReplicationResourceCrud) ID() string {
	return *s.Res.Id
func (s *FileStorageReplicationResourceCrud) CreatedPending() []string {
	return []string{
func (s *FileStorageReplicationResourceCrud) CreatedTarget() []string {
	return []string{
func (s *FileStorageReplicationResourceCrud) DeletedPending() []string {
	return []string{
func (s *FileStorageReplicationResourceCrud) DeletedTarget() []string {
	return []string{
func (s *FileStorageReplicationResourceCrud) Create() error {
	request := oci_file_storage.CreateReplicationRequest{}
func (s *FileStorageReplicationResourceCrud) Get() error {
	request := oci_file_storage.GetReplicationRequest{}
func (s *FileStorageReplicationResourceCrud) Update() error {
	if compartment, ok := s.D.GetOkExists("compartment_id"); ok && s.D.HasChange("compartment_id") {
func (s *FileStorageReplicationResourceCrud) Delete() error {
	request := oci_file_storage.DeleteReplicationRequest{}
func (s *FileStorageReplicationResourceCrud) SetData() error {
	if s.Res.AvailabilityDomain != nil {
func (s *FileStorageReplicationResourceCrud) mapToResourceLock(fieldKeyFormat string) (oci_file_storage.ResourceLock, error) {
	result := oci_file_storage.ResourceLock{}
func (s *FileStorageReplicationResourceCrud) updateCompartment(compartment interface{}) error {
	changeCompartmentRequest := oci_file_storage.ChangeReplicationCompartmentRequest{}

=== ./internal/service/file_storage/file_storage_outbound_connector_data_source.go ===
func FileStorageOutboundConnectorDataSource() *schema.Resource {
	fieldMap := make(map[string]*schema.Schema)
func readSingularFileStorageOutboundConnector(d *schema.ResourceData, m interface{}) error {
	sync := &FileStorageOutboundConnectorDataSourceCrud{}
func (s *FileStorageOutboundConnectorDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *FileStorageOutboundConnectorDataSourceCrud) Get() error {
	request := oci_file_storage.GetOutboundConnectorRequest{}
func (s *FileStorageOutboundConnectorDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/file_storage/file_storage_replications_data_source.go ===
func FileStorageReplicationsDataSource() *schema.Resource {
	return &schema.Resource{
func readFileStorageReplications(d *schema.ResourceData, m interface{}) error {
	sync := &FileStorageReplicationsDataSourceCrud{}
func (s *FileStorageReplicationsDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *FileStorageReplicationsDataSourceCrud) Get() error {
	request := oci_file_storage.ListReplicationsRequest{}
func (s *FileStorageReplicationsDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/file_storage/file_storage_export_sets_data_source.go ===
func FileStorageExportSetsDataSource() *schema.Resource {
	return &schema.Resource{
func readFileStorageExportSets(d *schema.ResourceData, m interface{}) error {
	sync := &FileStorageExportSetsDataSourceCrud{}
func (s *FileStorageExportSetsDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *FileStorageExportSetsDataSourceCrud) Get() error {
	request := oci_file_storage.ListExportSetsRequest{}
func (s *FileStorageExportSetsDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/file_storage/file_storage_mount_target_resource.go ===
func FileStorageMountTargetResource() *schema.Resource {
	return &schema.Resource{
func createFileStorageMountTarget(d *schema.ResourceData, m interface{}) error {
	sync := &FileStorageMountTargetResourceCrud{}
func readFileStorageMountTarget(d *schema.ResourceData, m interface{}) error {
	sync := &FileStorageMountTargetResourceCrud{}
func updateFileStorageMountTarget(d *schema.ResourceData, m interface{}) error {
	sync := &FileStorageMountTargetResourceCrud{}
func deleteFileStorageMountTarget(d *schema.ResourceData, m interface{}) error {
	sync := &FileStorageMountTargetResourceCrud{}
func (s *FileStorageMountTargetResourceCrud) ID() string {
	return *s.Res.Id
func (s *FileStorageMountTargetResourceCrud) CreatedPending() []string {
	return []string{
func (s *FileStorageMountTargetResourceCrud) CreatedTarget() []string {
	return []string{
func (s *FileStorageMountTargetResourceCrud) DeletedPending() []string {
	return []string{
func (s *FileStorageMountTargetResourceCrud) DeletedTarget() []string {
	return []string{
func (s *FileStorageMountTargetResourceCrud) Create() error {
	request := oci_file_storage.CreateMountTargetRequest{}
func (s *FileStorageMountTargetResourceCrud) Get() error {
	request := oci_file_storage.GetMountTargetRequest{}
func (s *FileStorageMountTargetResourceCrud) Update() error {
	if _, ok := s.D.GetOkExists("state"); ok &&
func (s *FileStorageMountTargetResourceCrud) Delete() error {
	request := oci_file_storage.DeleteMountTargetRequest{}
func (s *FileStorageMountTargetResourceCrud) SetData() error {
	if s.Res.AvailabilityDomain != nil {
func (s *FileStorageMountTargetResourceCrud) CancelDowngradeShapeMountTarget() error {
	request := oci_file_storage.CancelDowngradeShapeMountTargetRequest{}
func (s *FileStorageMountTargetResourceCrud) ScheduleDowngradeShapeMountTarget() error {
	request := oci_file_storage.ScheduleDowngradeShapeMountTargetRequest{}
func (s *FileStorageMountTargetResourceCrud) UpgradeShapeMountTarget() error {
	request := oci_file_storage.UpgradeShapeMountTargetRequest{}
func (s *FileStorageMountTargetResourceCrud) mapToCreateKerberosDetails(fieldKeyFormat string) (oci_file_storage.CreateKerberosDetails, error) {
	result := oci_file_storage.CreateKerberosDetails{}
func (s *FileStorageMountTargetResourceCrud) mapToUpdateKerberosDetails(fieldKeyFormat string) (oci_file_storage.UpdateKerberosDetails, error) {
	result := oci_file_storage.UpdateKerberosDetails{}
func (s *FileStorageMountTargetResourceCrud) mapToCreateLdapIdmapDetails(fieldKeyFormat string) (oci_file_storage.CreateLdapIdmapDetails, error) {
	result := oci_file_storage.CreateLdapIdmapDetails{}
func (s *FileStorageMountTargetResourceCrud) mapToUpdateLdapIdmapDetails(fieldKeyFormat string) (oci_file_storage.UpdateLdapIdmapDetails, error) {
	result := oci_file_storage.UpdateLdapIdmapDetails{}
func (s *FileStorageMountTargetResourceCrud) mapToResourceLock(fieldKeyFormat string) (oci_file_storage.ResourceLock, error) {
	result := oci_file_storage.ResourceLock{}
func MountTargetResourceLockToMap(obj oci_file_storage.ResourceLock) map[string]interface{} {
	result := map[string]interface{}{}
func (s *FileStorageMountTargetResourceCrud) updateCompartment(compartment interface{}) error {
	changeCompartmentRequest := oci_file_storage.ChangeMountTargetCompartmentRequest{}
func (s *FileStorageMountTargetResourceCrud) setPrivateIpDetails(privateIpOcid string) error {
	request := oci_core.GetPrivateIpRequest{}

=== ./internal/service/file_storage/register_resource.go ===
func RegisterResource() {
	tfresource.RegisterResource("oci_file_storage_export", FileStorageExportResource())

=== ./internal/service/file_storage/file_storage_replication_targets_data_source.go ===
func FileStorageReplicationTargetsDataSource() *schema.Resource {
	return &schema.Resource{
func readFileStorageReplicationTargets(d *schema.ResourceData, m interface{}) error {
	sync := &FileStorageReplicationTargetsDataSourceCrud{}
func (s *FileStorageReplicationTargetsDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *FileStorageReplicationTargetsDataSourceCrud) Get() error {
	request := oci_file_storage.ListReplicationTargetsRequest{}
func (s *FileStorageReplicationTargetsDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/file_storage/file_storage_snapshots_data_source.go ===
func FileStorageSnapshotsDataSource() *schema.Resource {
	return &schema.Resource{
func readFileStorageSnapshots(d *schema.ResourceData, m interface{}) error {
	sync := &FileStorageSnapshotsDataSourceCrud{}
func (s *FileStorageSnapshotsDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *FileStorageSnapshotsDataSourceCrud) Get() error {
	request := oci_file_storage.ListSnapshotsRequest{}
func (s *FileStorageSnapshotsDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/limits/limits_quotas_data_source.go ===
func LimitsQuotasDataSource() *schema.Resource {
	return &schema.Resource{
func readLimitsQuotas(d *schema.ResourceData, m interface{}) error {
	sync := &LimitsQuotasDataSourceCrud{}
func (s *LimitsQuotasDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *LimitsQuotasDataSourceCrud) Get() error {
	request := oci_limits.ListQuotasRequest{}
func (s *LimitsQuotasDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/limits/limits_limit_values_data_source.go ===
func LimitsLimitValuesDataSource() *schema.Resource {
	return &schema.Resource{
func readLimitsLimitValues(d *schema.ResourceData, m interface{}) error {
	sync := &LimitsLimitValuesDataSourceCrud{}
func (s *LimitsLimitValuesDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *LimitsLimitValuesDataSourceCrud) Get() error {
	request := oci_limits.ListLimitValuesRequest{}
func (s *LimitsLimitValuesDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/limits/limits_services_data_source.go ===
func LimitsServicesDataSource() *schema.Resource {
	return &schema.Resource{
func readLimitsServices(d *schema.ResourceData, m interface{}) error {
	sync := &LimitsServicesDataSourceCrud{}
func (s *LimitsServicesDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *LimitsServicesDataSourceCrud) Get() error {
	request := oci_limits.ListServicesRequest{}
func (s *LimitsServicesDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/limits/limits_quota_resource.go ===
func LimitsQuotaResource() *schema.Resource {
	return &schema.Resource{
func createLimitsQuota(d *schema.ResourceData, m interface{}) error {
	sync := &LimitsQuotaResourceCrud{}
func readLimitsQuota(d *schema.ResourceData, m interface{}) error {
	sync := &LimitsQuotaResourceCrud{}
func updateLimitsQuota(d *schema.ResourceData, m interface{}) error {
	sync := &LimitsQuotaResourceCrud{}
func deleteLimitsQuota(d *schema.ResourceData, m interface{}) error {
	sync := &LimitsQuotaResourceCrud{}
func (s *LimitsQuotaResourceCrud) ID() string {
	return *s.Res.Id
func (s *LimitsQuotaResourceCrud) CreatedPending() []string {
	return []string{}
func (s *LimitsQuotaResourceCrud) CreatedTarget() []string {
	return []string{
func (s *LimitsQuotaResourceCrud) DeletedPending() []string {
	return []string{}
func (s *LimitsQuotaResourceCrud) DeletedTarget() []string {
	return []string{}
func (s *LimitsQuotaResourceCrud) Create() error {
	request := oci_limits.CreateQuotaRequest{}
func (s *LimitsQuotaResourceCrud) Get() error {
	request := oci_limits.GetQuotaRequest{}
func (s *LimitsQuotaResourceCrud) Update() error {
	request := oci_limits.UpdateQuotaRequest{}
func (s *LimitsQuotaResourceCrud) Delete() error {
	request := oci_limits.DeleteQuotaRequest{}
func (s *LimitsQuotaResourceCrud) SetData() error {
	if s.Res.CompartmentId != nil {
func (s *LimitsQuotaResourceCrud) mapToAddLockDetails(fieldKeyFormat string) (oci_limits.AddLockDetails, error) {
	result := oci_limits.AddLockDetails{}
func ResourceLockToMap(obj oci_limits.ResourceLock) map[string]interface{} {
	result := map[string]interface{}{}

=== ./internal/service/limits/limits_quota_data_source.go ===
func LimitsQuotaDataSource() *schema.Resource {
	fieldMap := make(map[string]*schema.Schema)
func readSingularLimitsQuota(d *schema.ResourceData, m interface{}) error {
	sync := &LimitsQuotaDataSourceCrud{}
func (s *LimitsQuotaDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *LimitsQuotaDataSourceCrud) Get() error {
	request := oci_limits.GetQuotaRequest{}
func (s *LimitsQuotaDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/limits/limits_limit_definitions_data_source.go ===
func LimitsLimitDefinitionsDataSource() *schema.Resource {
	return &schema.Resource{
func readLimitsLimitDefinitions(d *schema.ResourceData, m interface{}) error {
	sync := &LimitsLimitDefinitionsDataSourceCrud{}
func (s *LimitsLimitDefinitionsDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *LimitsLimitDefinitionsDataSourceCrud) Get() error {
	request := oci_limits.ListLimitDefinitionsRequest{}
func (s *LimitsLimitDefinitionsDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/limits/limits_resource_availability_data_source.go ===
func LimitsResourceAvailabilityDataSource() *schema.Resource {
	return &schema.Resource{
func readSingularLimitsResourceAvailability(d *schema.ResourceData, m interface{}) error {
	sync := &LimitsResourceAvailabilityDataSourceCrud{}
func (s *LimitsResourceAvailabilityDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *LimitsResourceAvailabilityDataSourceCrud) Get() error {
	request := oci_limits.GetResourceAvailabilityRequest{}
func (s *LimitsResourceAvailabilityDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/limits/register_resource.go ===
func RegisterResource() {
	tfresource.RegisterResource("oci_limits_quota", LimitsQuotaResource())

=== ./internal/service/health_checks/health_checks_http_monitor_data_source.go ===
func HealthChecksHttpMonitorDataSource() *schema.Resource {
	fieldMap := make(map[string]*schema.Schema)
func readSingularHealthChecksHttpMonitor(d *schema.ResourceData, m interface{}) error {
	sync := &HealthChecksHttpMonitorDataSourceCrud{}
func (s *HealthChecksHttpMonitorDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *HealthChecksHttpMonitorDataSourceCrud) Get() error {
	request := oci_health_checks.GetHttpMonitorRequest{}
func (s *HealthChecksHttpMonitorDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/health_checks/health_checks_http_monitors_data_source.go ===
func HealthChecksHttpMonitorsDataSource() *schema.Resource {
	return &schema.Resource{
func readHealthChecksHttpMonitors(d *schema.ResourceData, m interface{}) error {
	sync := &HealthChecksHttpMonitorsDataSourceCrud{}
func (s *HealthChecksHttpMonitorsDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *HealthChecksHttpMonitorsDataSourceCrud) Get() error {
	request := oci_health_checks.ListHttpMonitorsRequest{}
func (s *HealthChecksHttpMonitorsDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/health_checks/health_checks_ping_monitor_resource.go ===
func HealthChecksPingMonitorResource() *schema.Resource {
	return &schema.Resource{
func createHealthChecksPingMonitor(d *schema.ResourceData, m interface{}) error {
	sync := &HealthChecksPingMonitorResourceCrud{}
func readHealthChecksPingMonitor(d *schema.ResourceData, m interface{}) error {
	sync := &HealthChecksPingMonitorResourceCrud{}
func updateHealthChecksPingMonitor(d *schema.ResourceData, m interface{}) error {
	sync := &HealthChecksPingMonitorResourceCrud{}
func deleteHealthChecksPingMonitor(d *schema.ResourceData, m interface{}) error {
	sync := &HealthChecksPingMonitorResourceCrud{}
func (s *HealthChecksPingMonitorResourceCrud) ID() string {
	return *s.Res.Id
func (s *HealthChecksPingMonitorResourceCrud) Create() error {
	request := oci_health_checks.CreatePingMonitorRequest{}
func (s *HealthChecksPingMonitorResourceCrud) Get() error {
	request := oci_health_checks.GetPingMonitorRequest{}
func (s *HealthChecksPingMonitorResourceCrud) Update() error {
	if compartment, ok := s.D.GetOkExists("compartment_id"); ok && s.D.HasChange("compartment_id") {
func (s *HealthChecksPingMonitorResourceCrud) Delete() error {
	request := oci_health_checks.DeletePingMonitorRequest{}
func (s *HealthChecksPingMonitorResourceCrud) SetData() error {
	if s.Res.CompartmentId != nil {
func (s *HealthChecksPingMonitorResourceCrud) updateCompartment(compartment interface{}) error {
	changeCompartmentRequest := oci_health_checks.ChangePingMonitorCompartmentRequest{}

=== ./internal/service/health_checks/health_checks_http_probe_resource.go ===
func HealthChecksHttpProbeResource() *schema.Resource {
	return &schema.Resource{
func createHealthChecksHttpProbe(d *schema.ResourceData, m interface{}) error {
	sync := &HealthChecksHttpProbeResourceCrud{}
func readHealthChecksHttpProbe(d *schema.ResourceData, m interface{}) error {
	return nil
func deleteHealthChecksHttpProbe(d *schema.ResourceData, m interface{}) error {
	return nil
func (s *HealthChecksHttpProbeResourceCrud) ID() string {
	return *s.Res.Id
func (s *HealthChecksHttpProbeResourceCrud) Create() error {
	request := oci_health_checks.CreateOnDemandHttpProbeRequest{}
func (s *HealthChecksHttpProbeResourceCrud) SetData() error {
	if s.Res.CompartmentId != nil {

=== ./internal/service/health_checks/health_checks_ping_probe_results_data_source.go ===
func HealthChecksPingProbeResultsDataSource() *schema.Resource {
	return &schema.Resource{
func readHealthChecksPingProbeResults(d *schema.ResourceData, m interface{}) error {
	sync := &HealthChecksPingProbeResultsDataSourceCrud{}
func (s *HealthChecksPingProbeResultsDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *HealthChecksPingProbeResultsDataSourceCrud) Get() error {
	request := oci_health_checks.ListPingProbeResultsRequest{}
func (s *HealthChecksPingProbeResultsDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/health_checks/health_checks_ping_monitors_data_source.go ===
func HealthChecksPingMonitorsDataSource() *schema.Resource {
	return &schema.Resource{
func readHealthChecksPingMonitors(d *schema.ResourceData, m interface{}) error {
	sync := &HealthChecksPingMonitorsDataSourceCrud{}
func (s *HealthChecksPingMonitorsDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *HealthChecksPingMonitorsDataSourceCrud) Get() error {
	request := oci_health_checks.ListPingMonitorsRequest{}
func (s *HealthChecksPingMonitorsDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/health_checks/health_checks_ping_probe_resource.go ===
func HealthChecksPingProbeResource() *schema.Resource {
	return &schema.Resource{
func createHealthChecksPingProbe(d *schema.ResourceData, m interface{}) error {
	sync := &HealthChecksPingProbeResourceCrud{}
func readHealthChecksPingProbe(d *schema.ResourceData, m interface{}) error {
	return nil
func deleteHealthChecksPingProbe(d *schema.ResourceData, m interface{}) error {
	return nil
func (s *HealthChecksPingProbeResourceCrud) ID() string {
	return *s.Res.Id
func (s *HealthChecksPingProbeResourceCrud) Create() error {
	request := oci_health_checks.CreateOnDemandPingProbeRequest{}
func (s *HealthChecksPingProbeResourceCrud) SetData() error {
	if s.Res.CompartmentId != nil {

=== ./internal/service/health_checks/health_checks_http_probe_results_data_source.go ===
func HealthChecksHttpProbeResultsDataSource() *schema.Resource {
	return &schema.Resource{
func readHealthChecksHttpProbeResults(d *schema.ResourceData, m interface{}) error {
	sync := &HealthChecksHttpProbeResultsDataSourceCrud{}
func (s *HealthChecksHttpProbeResultsDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *HealthChecksHttpProbeResultsDataSourceCrud) Get() error {
	request := oci_health_checks.ListHttpProbeResultsRequest{}
func (s *HealthChecksHttpProbeResultsDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/health_checks/health_checks_ping_monitor_data_source.go ===
func HealthChecksPingMonitorDataSource() *schema.Resource {
	fieldMap := make(map[string]*schema.Schema)
func readSingularHealthChecksPingMonitor(d *schema.ResourceData, m interface{}) error {
	sync := &HealthChecksPingMonitorDataSourceCrud{}
func (s *HealthChecksPingMonitorDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *HealthChecksPingMonitorDataSourceCrud) Get() error {
	request := oci_health_checks.GetPingMonitorRequest{}
func (s *HealthChecksPingMonitorDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/health_checks/health_checks_vantage_points_data_source.go ===
func HealthChecksVantagePointsDataSource() *schema.Resource {
	return &schema.Resource{
func readHealthChecksVantagePoints(d *schema.ResourceData, m interface{}) error {
	sync := &HealthChecksVantagePointsDataSourceCrud{}
func (s *HealthChecksVantagePointsDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *HealthChecksVantagePointsDataSourceCrud) Get() error {
	request := oci_health_checks.ListHealthChecksVantagePointsRequest{}
func (s *HealthChecksVantagePointsDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/health_checks/health_checks_http_monitor_resource.go ===
func HealthChecksHttpMonitorResource() *schema.Resource {
	return &schema.Resource{
func createHealthChecksHttpMonitor(d *schema.ResourceData, m interface{}) error {
	sync := &HealthChecksHttpMonitorResourceCrud{}
func readHealthChecksHttpMonitor(d *schema.ResourceData, m interface{}) error {
	sync := &HealthChecksHttpMonitorResourceCrud{}
func updateHealthChecksHttpMonitor(d *schema.ResourceData, m interface{}) error {
	sync := &HealthChecksHttpMonitorResourceCrud{}
func deleteHealthChecksHttpMonitor(d *schema.ResourceData, m interface{}) error {
	sync := &HealthChecksHttpMonitorResourceCrud{}
func (s *HealthChecksHttpMonitorResourceCrud) ID() string {
	return *s.Res.Id
func (s *HealthChecksHttpMonitorResourceCrud) Create() error {
	request := oci_health_checks.CreateHttpMonitorRequest{}
func (s *HealthChecksHttpMonitorResourceCrud) Get() error {
	request := oci_health_checks.GetHttpMonitorRequest{}
func (s *HealthChecksHttpMonitorResourceCrud) Update() error {
	if compartment, ok := s.D.GetOkExists("compartment_id"); ok && s.D.HasChange("compartment_id") {
func (s *HealthChecksHttpMonitorResourceCrud) Delete() error {
	request := oci_health_checks.DeleteHttpMonitorRequest{}
func (s *HealthChecksHttpMonitorResourceCrud) SetData() error {
	if s.Res.CompartmentId != nil {
func (s *HealthChecksHttpMonitorResourceCrud) updateCompartment(compartment interface{}) error {
	changeCompartmentRequest := oci_health_checks.ChangeHttpMonitorCompartmentRequest{}

=== ./internal/service/health_checks/register_resource.go ===
func RegisterResource() {
	tfresource.RegisterResource("oci_health_checks_http_monitor", HealthChecksHttpMonitorResource())

=== ./internal/service/ai_anomaly_detection/ai_anomaly_detection_detect_anomaly_jobs_data_source.go ===
func AiAnomalyDetectionDetectAnomalyJobsDataSource() *schema.Resource {
	return &schema.Resource{
func readAiAnomalyDetectionDetectAnomalyJobs(d *schema.ResourceData, m interface{}) error {
	sync := &AiAnomalyDetectionDetectAnomalyJobsDataSourceCrud{}
func (s *AiAnomalyDetectionDetectAnomalyJobsDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *AiAnomalyDetectionDetectAnomalyJobsDataSourceCrud) Get() error {
	request := oci_ai_anomaly_detection.ListDetectAnomalyJobsRequest{}
func (s *AiAnomalyDetectionDetectAnomalyJobsDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/ai_anomaly_detection/ai_anomaly_detection_model_data_source.go ===
func AiAnomalyDetectionModelDataSource() *schema.Resource {
	fieldMap := make(map[string]*schema.Schema)
func readSingularAiAnomalyDetectionModel(d *schema.ResourceData, m interface{}) error {
	sync := &AiAnomalyDetectionModelDataSourceCrud{}
func (s *AiAnomalyDetectionModelDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *AiAnomalyDetectionModelDataSourceCrud) Get() error {
	request := oci_ai_anomaly_detection.GetModelRequest{}
func (s *AiAnomalyDetectionModelDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/ai_anomaly_detection/ai_anomaly_detection_ai_private_endpoint_resource.go ===
func AiAnomalyDetectionAiPrivateEndpointResource() *schema.Resource {
	return &schema.Resource{
func createAiAnomalyDetectionAiPrivateEndpoint(d *schema.ResourceData, m interface{}) error {
	sync := &AiAnomalyDetectionAiPrivateEndpointResourceCrud{}
func readAiAnomalyDetectionAiPrivateEndpoint(d *schema.ResourceData, m interface{}) error {
	sync := &AiAnomalyDetectionAiPrivateEndpointResourceCrud{}
func updateAiAnomalyDetectionAiPrivateEndpoint(d *schema.ResourceData, m interface{}) error {
	sync := &AiAnomalyDetectionAiPrivateEndpointResourceCrud{}
func deleteAiAnomalyDetectionAiPrivateEndpoint(d *schema.ResourceData, m interface{}) error {
	sync := &AiAnomalyDetectionAiPrivateEndpointResourceCrud{}
func (s *AiAnomalyDetectionAiPrivateEndpointResourceCrud) ID() string {
	return *s.Res.Id
func (s *AiAnomalyDetectionAiPrivateEndpointResourceCrud) CreatedPending() []string {
	return []string{
func (s *AiAnomalyDetectionAiPrivateEndpointResourceCrud) CreatedTarget() []string {
	return []string{
func (s *AiAnomalyDetectionAiPrivateEndpointResourceCrud) DeletedPending() []string {
	return []string{
func (s *AiAnomalyDetectionAiPrivateEndpointResourceCrud) DeletedTarget() []string {
	return []string{
func (s *AiAnomalyDetectionAiPrivateEndpointResourceCrud) Create() error {
	request := oci_ai_anomaly_detection.CreateAiPrivateEndpointRequest{}
func (s *AiAnomalyDetectionAiPrivateEndpointResourceCrud) getAiPrivateEndpointFromWorkRequest(workId *string, retryPolicy *oci_common.RetryPolicy,
	actionTypeEnum oci_ai_anomaly_detection.ActionTypeEnum, timeout time.Duration) error {
func (s *AiAnomalyDetectionAiPrivateEndpointResourceCrud) Get() error {
	request := oci_ai_anomaly_detection.GetAiPrivateEndpointRequest{}
func (s *AiAnomalyDetectionAiPrivateEndpointResourceCrud) Update() error {
	if compartment, ok := s.D.GetOkExists("compartment_id"); ok && s.D.HasChange("compartment_id") {
func (s *AiAnomalyDetectionAiPrivateEndpointResourceCrud) Delete() error {
	request := oci_ai_anomaly_detection.DeleteAiPrivateEndpointRequest{}
func (s *AiAnomalyDetectionAiPrivateEndpointResourceCrud) SetData() error {
	s.D.Set("attached_data_assets", s.Res.AttachedDataAssets)
func (s *AiAnomalyDetectionAiPrivateEndpointResourceCrud) updateCompartment(compartment interface{}) error {
	changeCompartmentRequest := oci_ai_anomaly_detection.ChangeAiPrivateEndpointCompartmentRequest{}

=== ./internal/service/ai_anomaly_detection/ai_anomaly_detection_project_resource.go ===
func AiAnomalyDetectionProjectResource() *schema.Resource {
	return &schema.Resource{
func createAiAnomalyDetectionProject(d *schema.ResourceData, m interface{}) error {
	sync := &AiAnomalyDetectionProjectResourceCrud{}
func readAiAnomalyDetectionProject(d *schema.ResourceData, m interface{}) error {
	sync := &AiAnomalyDetectionProjectResourceCrud{}
func updateAiAnomalyDetectionProject(d *schema.ResourceData, m interface{}) error {
	sync := &AiAnomalyDetectionProjectResourceCrud{}
func deleteAiAnomalyDetectionProject(d *schema.ResourceData, m interface{}) error {
	sync := &AiAnomalyDetectionProjectResourceCrud{}
func (s *AiAnomalyDetectionProjectResourceCrud) ID() string {
	return *s.Res.Id
func (s *AiAnomalyDetectionProjectResourceCrud) CreatedPending() []string {
	return []string{
func (s *AiAnomalyDetectionProjectResourceCrud) CreatedTarget() []string {
	return []string{
func (s *AiAnomalyDetectionProjectResourceCrud) DeletedPending() []string {
	return []string{
func (s *AiAnomalyDetectionProjectResourceCrud) DeletedTarget() []string {
	return []string{
func (s *AiAnomalyDetectionProjectResourceCrud) Create() error {
	request := oci_ai_anomaly_detection.CreateProjectRequest{}
func (s *AiAnomalyDetectionProjectResourceCrud) getProjectFromWorkRequest(workId *string, retryPolicy *oci_common.RetryPolicy,
	actionTypeEnum oci_ai_anomaly_detection.ActionTypeEnum, timeout time.Duration) error {
func (s *AiAnomalyDetectionProjectResourceCrud) Get() error {
	request := oci_ai_anomaly_detection.GetProjectRequest{}
func (s *AiAnomalyDetectionProjectResourceCrud) Update() error {
	if compartment, ok := s.D.GetOkExists("compartment_id"); ok && s.D.HasChange("compartment_id") {
func (s *AiAnomalyDetectionProjectResourceCrud) Delete() error {
	request := oci_ai_anomaly_detection.DeleteProjectRequest{}
func (s *AiAnomalyDetectionProjectResourceCrud) SetData() error {
	if s.Res.CompartmentId != nil {
func (s *AiAnomalyDetectionProjectResourceCrud) updateCompartment(compartment interface{}) error {
	changeCompartmentRequest := oci_ai_anomaly_detection.ChangeProjectCompartmentRequest{}

=== ./internal/service/ai_anomaly_detection/ai_anomaly_detection_data_assets_data_source.go ===
func AiAnomalyDetectionDataAssetsDataSource() *schema.Resource {
	return &schema.Resource{
func readAiAnomalyDetectionDataAssets(d *schema.ResourceData, m interface{}) error {
	sync := &AiAnomalyDetectionDataAssetsDataSourceCrud{}
func (s *AiAnomalyDetectionDataAssetsDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *AiAnomalyDetectionDataAssetsDataSourceCrud) Get() error {
	request := oci_ai_anomaly_detection.ListDataAssetsRequest{}
func (s *AiAnomalyDetectionDataAssetsDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/ai_anomaly_detection/ai_anomaly_detection_data_asset_resource.go ===
func AiAnomalyDetectionDataAssetResource() *schema.Resource {
	return &schema.Resource{
func createAiAnomalyDetectionDataAsset(d *schema.ResourceData, m interface{}) error {
	sync := &AiAnomalyDetectionDataAssetResourceCrud{}
func readAiAnomalyDetectionDataAsset(d *schema.ResourceData, m interface{}) error {
	sync := &AiAnomalyDetectionDataAssetResourceCrud{}
func updateAiAnomalyDetectionDataAsset(d *schema.ResourceData, m interface{}) error {
	sync := &AiAnomalyDetectionDataAssetResourceCrud{}
func deleteAiAnomalyDetectionDataAsset(d *schema.ResourceData, m interface{}) error {
	sync := &AiAnomalyDetectionDataAssetResourceCrud{}
func (s *AiAnomalyDetectionDataAssetResourceCrud) ID() string {
	return *s.Res.Id
func (s *AiAnomalyDetectionDataAssetResourceCrud) CreatedPending() []string {
	return []string{}
func (s *AiAnomalyDetectionDataAssetResourceCrud) CreatedTarget() []string {
	return []string{
func (s *AiAnomalyDetectionDataAssetResourceCrud) DeletedPending() []string {
	return []string{}
func (s *AiAnomalyDetectionDataAssetResourceCrud) DeletedTarget() []string {
	return []string{
func (s *AiAnomalyDetectionDataAssetResourceCrud) Create() error {
	request := oci_ai_anomaly_detection.CreateDataAssetRequest{}
func (s *AiAnomalyDetectionDataAssetResourceCrud) Get() error {
	request := oci_ai_anomaly_detection.GetDataAssetRequest{}
func (s *AiAnomalyDetectionDataAssetResourceCrud) Update() error {
	if compartment, ok := s.D.GetOkExists("compartment_id"); ok && s.D.HasChange("compartment_id") {
func (s *AiAnomalyDetectionDataAssetResourceCrud) Delete() error {
	request := oci_ai_anomaly_detection.DeleteDataAssetRequest{}
func (s *AiAnomalyDetectionDataAssetResourceCrud) SetData() error {
	if s.Res.CompartmentId != nil {
func (s *AiAnomalyDetectionDataAssetResourceCrud) mapToDataSourceDetails(fieldKeyFormat string) (oci_ai_anomaly_detection.DataSourceDetails, error) {
	var baseObject oci_ai_anomaly_detection.DataSourceDetails
func DataSourceDetailsToMap(obj *oci_ai_anomaly_detection.DataSourceDetails) map[string]interface{} {
	result := map[string]interface{}{}
func (s *AiAnomalyDetectionDataAssetResourceCrud) mapToInfluxDetails(fieldKeyFormat string) (oci_ai_anomaly_detection.InfluxDetails, error) {
	var baseObject oci_ai_anomaly_detection.InfluxDetails
func (s *AiAnomalyDetectionDataAssetResourceCrud) updateCompartment(compartment interface{}) error {
	changeCompartmentRequest := oci_ai_anomaly_detection.ChangeDataAssetCompartmentRequest{}

=== ./internal/service/ai_anomaly_detection/ai_anomaly_detection_detect_anomaly_job_data_source.go ===
func AiAnomalyDetectionDetectAnomalyJobDataSource() *schema.Resource {
	fieldMap := make(map[string]*schema.Schema)
func readSingularAiAnomalyDetectionDetectAnomalyJob(d *schema.ResourceData, m interface{}) error {
	sync := &AiAnomalyDetectionDetectAnomalyJobDataSourceCrud{}
func (s *AiAnomalyDetectionDetectAnomalyJobDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *AiAnomalyDetectionDetectAnomalyJobDataSourceCrud) Get() error {
	request := oci_ai_anomaly_detection.GetDetectAnomalyJobRequest{}
func (s *AiAnomalyDetectionDetectAnomalyJobDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/ai_anomaly_detection/ai_anomaly_detection_ai_private_endpoint_data_source.go ===
func AiAnomalyDetectionAiPrivateEndpointDataSource() *schema.Resource {
	fieldMap := make(map[string]*schema.Schema)
func readSingularAiAnomalyDetectionAiPrivateEndpoint(d *schema.ResourceData, m interface{}) error {
	sync := &AiAnomalyDetectionAiPrivateEndpointDataSourceCrud{}
func (s *AiAnomalyDetectionAiPrivateEndpointDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *AiAnomalyDetectionAiPrivateEndpointDataSourceCrud) Get() error {
	request := oci_ai_anomaly_detection.GetAiPrivateEndpointRequest{}
func (s *AiAnomalyDetectionAiPrivateEndpointDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/ai_anomaly_detection/ai_anomaly_detection_project_data_source.go ===
func AiAnomalyDetectionProjectDataSource() *schema.Resource {
	fieldMap := make(map[string]*schema.Schema)
func readSingularAiAnomalyDetectionProject(d *schema.ResourceData, m interface{}) error {
	sync := &AiAnomalyDetectionProjectDataSourceCrud{}
func (s *AiAnomalyDetectionProjectDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *AiAnomalyDetectionProjectDataSourceCrud) Get() error {
	request := oci_ai_anomaly_detection.GetProjectRequest{}
func (s *AiAnomalyDetectionProjectDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/ai_anomaly_detection/ai_anomaly_detection_detect_anomaly_job_resource.go ===
func AiAnomalyDetectionDetectAnomalyJobResource() *schema.Resource {
	return &schema.Resource{
func createAiAnomalyDetectionDetectAnomalyJob(d *schema.ResourceData, m interface{}) error {
	sync := &AiAnomalyDetectionDetectAnomalyJobResourceCrud{}
func readAiAnomalyDetectionDetectAnomalyJob(d *schema.ResourceData, m interface{}) error {
	sync := &AiAnomalyDetectionDetectAnomalyJobResourceCrud{}
func updateAiAnomalyDetectionDetectAnomalyJob(d *schema.ResourceData, m interface{}) error {
	sync := &AiAnomalyDetectionDetectAnomalyJobResourceCrud{}
func deleteAiAnomalyDetectionDetectAnomalyJob(d *schema.ResourceData, m interface{}) error {
	sync := &AiAnomalyDetectionDetectAnomalyJobResourceCrud{}
func (s *AiAnomalyDetectionDetectAnomalyJobResourceCrud) ID() string {
	return *s.Res.Id
func (s *AiAnomalyDetectionDetectAnomalyJobResourceCrud) CreatedPending() []string {
	return []string{
func (s *AiAnomalyDetectionDetectAnomalyJobResourceCrud) CreatedTarget() []string {
	return []string{
func (s *AiAnomalyDetectionDetectAnomalyJobResourceCrud) DeletedPending() []string {
	return []string{
func (s *AiAnomalyDetectionDetectAnomalyJobResourceCrud) DeletedTarget() []string {
	return []string{
func (s *AiAnomalyDetectionDetectAnomalyJobResourceCrud) Create() error {
	request := oci_ai_anomaly_detection.CreateDetectAnomalyJobRequest{}
func (s *AiAnomalyDetectionDetectAnomalyJobResourceCrud) Get() error {
	request := oci_ai_anomaly_detection.GetDetectAnomalyJobRequest{}
func (s *AiAnomalyDetectionDetectAnomalyJobResourceCrud) Update() error {
	if compartment, ok := s.D.GetOkExists("compartment_id"); ok && s.D.HasChange("compartment_id") {
func (s *AiAnomalyDetectionDetectAnomalyJobResourceCrud) Delete() error {
	request := oci_ai_anomaly_detection.DeleteDetectAnomalyJobRequest{}
func (s *AiAnomalyDetectionDetectAnomalyJobResourceCrud) SetData() error {
	if s.Res.CompartmentId != nil {
func (s *AiAnomalyDetectionDetectAnomalyJobResourceCrud) mapToDataItem(fieldKeyFormat string) (oci_ai_anomaly_detection.DataItem, error) {
	result := oci_ai_anomaly_detection.DataItem{}
func (s *AiAnomalyDetectionDetectAnomalyJobResourceCrud) mapToInputDetails(fieldKeyFormat string) (oci_ai_anomaly_detection.InputDetails, error) {
	var baseObject oci_ai_anomaly_detection.InputDetails
func (s *AiAnomalyDetectionDetectAnomalyJobResourceCrud) mapToObjectLocation(fieldKeyFormat string) (oci_ai_anomaly_detection.ObjectLocation, error) {
	result := oci_ai_anomaly_detection.ObjectLocation{}
func (s *AiAnomalyDetectionDetectAnomalyJobResourceCrud) mapToOutputDetails(fieldKeyFormat string) (oci_ai_anomaly_detection.OutputDetails, error) {
	var baseObject oci_ai_anomaly_detection.OutputDetails
func (s *AiAnomalyDetectionDetectAnomalyJobResourceCrud) updateCompartment(compartment interface{}) error {
	changeCompartmentRequest := oci_ai_anomaly_detection.ChangeDetectAnomalyJobCompartmentRequest{}

=== ./internal/service/ai_anomaly_detection/ai_anomaly_detection_data_asset_data_source.go ===
func AiAnomalyDetectionDataAssetDataSource() *schema.Resource {
	fieldMap := make(map[string]*schema.Schema)
func readSingularAiAnomalyDetectionDataAsset(d *schema.ResourceData, m interface{}) error {
	sync := &AiAnomalyDetectionDataAssetDataSourceCrud{}
func (s *AiAnomalyDetectionDataAssetDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *AiAnomalyDetectionDataAssetDataSourceCrud) Get() error {
	request := oci_ai_anomaly_detection.GetDataAssetRequest{}
func (s *AiAnomalyDetectionDataAssetDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/ai_anomaly_detection/ai_anomaly_detection_models_data_source.go ===
func AiAnomalyDetectionModelsDataSource() *schema.Resource {
	return &schema.Resource{
func readAiAnomalyDetectionModels(d *schema.ResourceData, m interface{}) error {
	sync := &AiAnomalyDetectionModelsDataSourceCrud{}
func (s *AiAnomalyDetectionModelsDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *AiAnomalyDetectionModelsDataSourceCrud) Get() error {
	request := oci_ai_anomaly_detection.ListModelsRequest{}
func (s *AiAnomalyDetectionModelsDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/ai_anomaly_detection/ai_anomaly_detection_ai_private_endpoints_data_source.go ===
func AiAnomalyDetectionAiPrivateEndpointsDataSource() *schema.Resource {
	return &schema.Resource{
func readAiAnomalyDetectionAiPrivateEndpoints(d *schema.ResourceData, m interface{}) error {
	sync := &AiAnomalyDetectionAiPrivateEndpointsDataSourceCrud{}
func (s *AiAnomalyDetectionAiPrivateEndpointsDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *AiAnomalyDetectionAiPrivateEndpointsDataSourceCrud) Get() error {
	request := oci_ai_anomaly_detection.ListAiPrivateEndpointsRequest{}
func (s *AiAnomalyDetectionAiPrivateEndpointsDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/ai_anomaly_detection/ai_anomaly_detection_projects_data_source.go ===
func AiAnomalyDetectionProjectsDataSource() *schema.Resource {
	return &schema.Resource{
func readAiAnomalyDetectionProjects(d *schema.ResourceData, m interface{}) error {
	sync := &AiAnomalyDetectionProjectsDataSourceCrud{}
func (s *AiAnomalyDetectionProjectsDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *AiAnomalyDetectionProjectsDataSourceCrud) Get() error {
	request := oci_ai_anomaly_detection.ListProjectsRequest{}
func (s *AiAnomalyDetectionProjectsDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/ai_anomaly_detection/register_resource.go ===
func RegisterResource() {
	tfresource.RegisterResource("oci_ai_anomaly_detection_ai_private_endpoint", AiAnomalyDetectionAiPrivateEndpointResource())

=== ./internal/service/ai_anomaly_detection/ai_anomaly_detection_model_resource.go ===
func AiAnomalyDetectionModelResource() *schema.Resource {
	return &schema.Resource{
func createAiAnomalyDetectionModel(d *schema.ResourceData, m interface{}) error {
	sync := &AiAnomalyDetectionModelResourceCrud{}
func readAiAnomalyDetectionModel(d *schema.ResourceData, m interface{}) error {
	sync := &AiAnomalyDetectionModelResourceCrud{}
func updateAiAnomalyDetectionModel(d *schema.ResourceData, m interface{}) error {
	sync := &AiAnomalyDetectionModelResourceCrud{}
func deleteAiAnomalyDetectionModel(d *schema.ResourceData, m interface{}) error {
	sync := &AiAnomalyDetectionModelResourceCrud{}
func (s *AiAnomalyDetectionModelResourceCrud) ID() string {
	return *s.Res.Id
func (s *AiAnomalyDetectionModelResourceCrud) CreatedPending() []string {
	return []string{
func (s *AiAnomalyDetectionModelResourceCrud) CreatedTarget() []string {
	return []string{
func (s *AiAnomalyDetectionModelResourceCrud) DeletedPending() []string {
	return []string{
func (s *AiAnomalyDetectionModelResourceCrud) DeletedTarget() []string {
	return []string{
func (s *AiAnomalyDetectionModelResourceCrud) Create() error {
	request := oci_ai_anomaly_detection.CreateModelRequest{}
func (s *AiAnomalyDetectionModelResourceCrud) getModelFromWorkRequest(workId *string, retryPolicy *oci_common.RetryPolicy,
	actionTypeEnum oci_ai_anomaly_detection.ActionTypeEnum, timeout time.Duration) error {
func (s *AiAnomalyDetectionModelResourceCrud) Get() error {
	request := oci_ai_anomaly_detection.GetModelRequest{}
func (s *AiAnomalyDetectionModelResourceCrud) Update() error {
	if compartment, ok := s.D.GetOkExists("compartment_id"); ok && s.D.HasChange("compartment_id") {
func (s *AiAnomalyDetectionModelResourceCrud) Delete() error {
	request := oci_ai_anomaly_detection.DeleteModelRequest{}
func (s *AiAnomalyDetectionModelResourceCrud) SetData() error {
	if s.Res.CompartmentId != nil {
func (s *AiAnomalyDetectionModelResourceCrud) mapToModelTrainingDetails(fieldKeyFormat string) (oci_ai_anomaly_detection.ModelTrainingDetails, error) {
	result := oci_ai_anomaly_detection.ModelTrainingDetails{}
func (s *AiAnomalyDetectionModelResourceCrud) updateCompartment(compartment interface{}) error {
	changeCompartmentRequest := oci_ai_anomaly_detection.ChangeModelCompartmentRequest{}

=== ./internal/service/opa/opa_opa_instance_data_source.go ===
func OpaOpaInstanceDataSource() *schema.Resource {
	fieldMap := make(map[string]*schema.Schema)
func readSingularOpaOpaInstance(d *schema.ResourceData, m interface{}) error {
	sync := &OpaOpaInstanceDataSourceCrud{}
func (s *OpaOpaInstanceDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *OpaOpaInstanceDataSourceCrud) Get() error {
	request := oci_opa.GetOpaInstanceRequest{}
func (s *OpaOpaInstanceDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/opa/opa_opa_instance_resource.go ===
func OpaOpaInstanceResource() *schema.Resource {
	return &schema.Resource{
func createOpaOpaInstance(d *schema.ResourceData, m interface{}) error {
	sync := &OpaOpaInstanceResourceCrud{}
func readOpaOpaInstance(d *schema.ResourceData, m interface{}) error {
	sync := &OpaOpaInstanceResourceCrud{}
func updateOpaOpaInstance(d *schema.ResourceData, m interface{}) error {
	sync := &OpaOpaInstanceResourceCrud{}
func deleteOpaOpaInstance(d *schema.ResourceData, m interface{}) error {
	sync := &OpaOpaInstanceResourceCrud{}
func (s *OpaOpaInstanceResourceCrud) ID() string {
	return *s.Res.Id
func (s *OpaOpaInstanceResourceCrud) CreatedPending() []string {
	return []string{
func (s *OpaOpaInstanceResourceCrud) CreatedTarget() []string {
	return []string{
func (s *OpaOpaInstanceResourceCrud) DeletedPending() []string {
	return []string{
func (s *OpaOpaInstanceResourceCrud) DeletedTarget() []string {
	return []string{
func (s *OpaOpaInstanceResourceCrud) Create() error {
	request := oci_opa.CreateOpaInstanceRequest{}
func (s *OpaOpaInstanceResourceCrud) getOpaInstanceFromWorkRequest(workId *string, retryPolicy *oci_common.RetryPolicy,
	actionTypeEnum oci_opa.ActionTypeEnum, timeout time.Duration) error {
func (s *OpaOpaInstanceResourceCrud) Get() error {
	request := oci_opa.GetOpaInstanceRequest{}
func (s *OpaOpaInstanceResourceCrud) Update() error {
	if compartment, ok := s.D.GetOkExists("compartment_id"); ok && s.D.HasChange("compartment_id") {
func (s *OpaOpaInstanceResourceCrud) Delete() error {
	request := oci_opa.DeleteOpaInstanceRequest{}
func (s *OpaOpaInstanceResourceCrud) SetData() error {
	attachments := []interface{}{}
func (s *OpaOpaInstanceResourceCrud) StartOpaInstance() error {
	request := oci_opa.StartOpaInstanceRequest{}
func (s *OpaOpaInstanceResourceCrud) StopOpaInstance() error {
	request := oci_opa.StopOpaInstanceRequest{}
func (s *OpaOpaInstanceResourceCrud) updateCompartment(compartment interface{}) error {
	changeCompartmentRequest := oci_opa.ChangeOpaInstanceCompartmentRequest{}

=== ./internal/service/opa/opa_opa_instances_data_source.go ===
func OpaOpaInstancesDataSource() *schema.Resource {
	return &schema.Resource{
func readOpaOpaInstances(d *schema.ResourceData, m interface{}) error {
	sync := &OpaOpaInstancesDataSourceCrud{}
func (s *OpaOpaInstancesDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *OpaOpaInstancesDataSourceCrud) Get() error {
	request := oci_opa.ListOpaInstancesRequest{}
func (s *OpaOpaInstancesDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/opa/register_resource.go ===
func RegisterResource() {
	tfresource.RegisterResource("oci_opa_opa_instance", OpaOpaInstanceResource())

=== ./internal/service/resource_scheduler/resource_scheduler_schedules_data_source.go ===
func ResourceSchedulerSchedulesDataSource() *schema.Resource {
	return &schema.Resource{
func readResourceSchedulerSchedules(d *schema.ResourceData, m interface{}) error {
	sync := &ResourceSchedulerSchedulesDataSourceCrud{}
func (s *ResourceSchedulerSchedulesDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *ResourceSchedulerSchedulesDataSourceCrud) Get() error {
	request := oci_resource_scheduler.ListSchedulesRequest{}
func (s *ResourceSchedulerSchedulesDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/resource_scheduler/resource_scheduler_schedule_data_source.go ===
func ResourceSchedulerScheduleDataSource() *schema.Resource {
	fieldMap := make(map[string]*schema.Schema)
func readSingularResourceSchedulerSchedule(d *schema.ResourceData, m interface{}) error {
	sync := &ResourceSchedulerScheduleDataSourceCrud{}
func (s *ResourceSchedulerScheduleDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *ResourceSchedulerScheduleDataSourceCrud) Get() error {
	request := oci_resource_scheduler.GetScheduleRequest{}
func (s *ResourceSchedulerScheduleDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/resource_scheduler/resource_scheduler_schedule_resource.go ===
func ResourceSchedulerScheduleResource() *schema.Resource {
	return &schema.Resource{
func createResourceSchedulerSchedule(d *schema.ResourceData, m interface{}) error {
	sync := &ResourceSchedulerScheduleResourceCrud{}
func readResourceSchedulerSchedule(d *schema.ResourceData, m interface{}) error {
	sync := &ResourceSchedulerScheduleResourceCrud{}
func updateResourceSchedulerSchedule(d *schema.ResourceData, m interface{}) error {
	sync := &ResourceSchedulerScheduleResourceCrud{}
func deleteResourceSchedulerSchedule(d *schema.ResourceData, m interface{}) error {
	sync := &ResourceSchedulerScheduleResourceCrud{}
func (s *ResourceSchedulerScheduleResourceCrud) ID() string {
	return *s.Res.Id
func (s *ResourceSchedulerScheduleResourceCrud) CreatedPending() []string {
	return []string{
func (s *ResourceSchedulerScheduleResourceCrud) CreatedTarget() []string {
	return []string{
func (s *ResourceSchedulerScheduleResourceCrud) DeletedPending() []string {
	return []string{
func (s *ResourceSchedulerScheduleResourceCrud) DeletedTarget() []string {
	return []string{
func (s *ResourceSchedulerScheduleResourceCrud) Create() error {
	request := oci_resource_scheduler.CreateScheduleRequest{}
func (s *ResourceSchedulerScheduleResourceCrud) getScheduleFromWorkRequest(workId *string, retryPolicy *oci_common.RetryPolicy,
	actionTypeEnum oci_resource_scheduler.ActionTypeEnum, timeout time.Duration) error {
func getErrorFromResourceSchedulerScheduleWorkRequest(client *oci_resource_scheduler.ScheduleClient, workId *string, retryPolicy *oci_common.RetryPolicy, entityType string, action oci_resource_scheduler.ActionTypeEnum) error {
	response, err := client.ListWorkRequestErrors(context.Background(),
func (s *ResourceSchedulerScheduleResourceCrud) Get() error {
	request := oci_resource_scheduler.GetScheduleRequest{}
func (s *ResourceSchedulerScheduleResourceCrud) Update() error {
	request := oci_resource_scheduler.UpdateScheduleRequest{}
func (s *ResourceSchedulerScheduleResourceCrud) Delete() error {
	request := oci_resource_scheduler.DeleteScheduleRequest{}
func (s *ResourceSchedulerScheduleResourceCrud) SetData() error {
	s.D.Set("action", s.Res.Action)
func (s *ResourceSchedulerScheduleResourceCrud) StartSchedule() error {
	request := oci_resource_scheduler.ActivateScheduleRequest{}
func (s *ResourceSchedulerScheduleResourceCrud) StopSchedule() error {
	request := oci_resource_scheduler.DeactivateScheduleRequest{}
func (s *ResourceSchedulerScheduleResourceCrud) mapToDefinedTagFilterValue(fieldKeyFormat string) (oci_resource_scheduler.DefinedTagFilterValue, error) {
	result := oci_resource_scheduler.DefinedTagFilterValue{}
func (s *ResourceSchedulerScheduleResourceCrud) mapToResource(fieldKeyFormat string) (oci_resource_scheduler.Resource, error) {
	result := oci_resource_scheduler.Resource{}
func ResourceToMap(obj oci_resource_scheduler.Resource) map[string]interface{} {
	result := map[string]interface{}{}
func (s *ResourceSchedulerScheduleResourceCrud) mapToResourceFilter(fieldKeyFormat string) (oci_resource_scheduler.ResourceFilter, error) {
	var baseObject oci_resource_scheduler.ResourceFilter
func mapToStringFilter(s *ResourceSchedulerScheduleResourceCrud, fieldKeyFormat string) *string {
	if value, ok := s.D.GetOkExists(fmt.Sprintf(fieldKeyFormat, "value")); ok {
func mapToStringArrayFilter(s *ResourceSchedulerScheduleResourceCrud, fieldKeyFormat string) []string {
	if value, ok := s.D.GetOkExists(fmt.Sprintf(fieldKeyFormat, "value")); ok {
func ResourceFilterToMap(obj oci_resource_scheduler.ResourceFilter) map[string]interface{} {


=== ./internal/service/resource_scheduler/register_resource.go ===
func RegisterResource() {
	tfresource.RegisterResource("oci_resource_scheduler_schedule", ResourceSchedulerScheduleResource())

=== ./internal/service/service_manager_proxy/service_manager_proxy_service_environment_data_source.go ===
func ServiceManagerProxyServiceEnvironmentDataSource() *schema.Resource {
	return &schema.Resource{
func readSingularServiceManagerProxyServiceEnvironment(d *schema.ResourceData, m interface{}) error {
	sync := &ServiceManagerProxyServiceEnvironmentDataSourceCrud{}
func (s *ServiceManagerProxyServiceEnvironmentDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *ServiceManagerProxyServiceEnvironmentDataSourceCrud) Get() error {
	request := oci_service_manager_proxy.GetServiceEnvironmentRequest{}
func (s *ServiceManagerProxyServiceEnvironmentDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/service_manager_proxy/service_manager_proxy_service_environments_data_source.go ===
func ServiceManagerProxyServiceEnvironmentsDataSource() *schema.Resource {
	return &schema.Resource{
func readServiceManagerProxyServiceEnvironments(d *schema.ResourceData, m interface{}) error {
	sync := &ServiceManagerProxyServiceEnvironmentsDataSourceCrud{}
func (s *ServiceManagerProxyServiceEnvironmentsDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *ServiceManagerProxyServiceEnvironmentsDataSourceCrud) Get() error {
	request := oci_service_manager_proxy.ListServiceEnvironmentsRequest{}
func (s *ServiceManagerProxyServiceEnvironmentsDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/service_manager_proxy/register_resource.go ===
func RegisterResource() {
}

=== ./internal/service/disaster_recovery/disaster_recovery_dr_protection_group_resource.go ===
func DisasterRecoveryDrProtectionGroupResource() *schema.Resource {
	return &schema.Resource{
func createDisasterRecoveryDrProtectionGroup(d *schema.ResourceData, m interface{}) error {
	sync := &DisasterRecoveryDrProtectionGroupResourceCrud{}
func readDisasterRecoveryDrProtectionGroup(d *schema.ResourceData, m interface{}) error {
	sync := &DisasterRecoveryDrProtectionGroupResourceCrud{}
func updateDisasterRecoveryDrProtectionGroup(d *schema.ResourceData, m interface{}) error {
	sync := &DisasterRecoveryDrProtectionGroupResourceCrud{}
func deleteDisasterRecoveryDrProtectionGroup(d *schema.ResourceData, m interface{}) error {
	sync := &DisasterRecoveryDrProtectionGroupResourceCrud{}
func (s *DisasterRecoveryDrProtectionGroupResourceCrud) ID() string {
	return *s.Res.Id
func (s *DisasterRecoveryDrProtectionGroupResourceCrud) CreatedPending() []string {
	return []string{
func (s *DisasterRecoveryDrProtectionGroupResourceCrud) CreatedTarget() []string {
	return []string{
func (s *DisasterRecoveryDrProtectionGroupResourceCrud) DeletedPending() []string {
	return []string{
func (s *DisasterRecoveryDrProtectionGroupResourceCrud) DeletedTarget() []string {
	return []string{
func (s *DisasterRecoveryDrProtectionGroupResourceCrud) Create() error {
	request := oci_disaster_recovery.CreateDrProtectionGroupRequest{}
func (s *DisasterRecoveryDrProtectionGroupResourceCrud) getDrProtectionGroupFromWorkRequest(workId *string, retryPolicy *oci_common.RetryPolicy,
	actionTypeEnum oci_disaster_recovery.ActionTypeEnum, timeout time.Duration) error {
func (s *DisasterRecoveryDrProtectionGroupResourceCrud) Get() error {
	request := oci_disaster_recovery.GetDrProtectionGroupRequest{}
func (s *DisasterRecoveryDrProtectionGroupResourceCrud) Update() error {
	if compartment, ok := s.D.GetOkExists("compartment_id"); ok && s.D.HasChange("compartment_id") {
func (s *DisasterRecoveryDrProtectionGroupResourceCrud) Delete() error {
	request := oci_disaster_recovery.DeleteDrProtectionGroupRequest{}
func (s *DisasterRecoveryDrProtectionGroupResourceCrud) SetData() error {
	if s.Res.CompartmentId != nil {
func (s *DisasterRecoveryDrProtectionGroupResourceCrud) DisassociateDrProtectionGroup() error {
	request := oci_disaster_recovery.DisassociateDrProtectionGroupRequest{}
func (s *DisasterRecoveryDrProtectionGroupResourceCrud) mapToAssociateDrProtectionGroupDetails(fieldKeyFormat string) (oci_disaster_recovery.AssociateDrProtectionGroupDetails, error) {
	result := oci_disaster_recovery.AssociateDrProtectionGroupDetails{}
func (s *DisasterRecoveryDrProtectionGroupResourceCrud) mapToComputeInstanceMovableVnicMappingDetails(fieldKeyFormat string) (oci_disaster_recovery.ComputeInstanceMovableVnicMappingDetails, error) {
	result := oci_disaster_recovery.ComputeInstanceMovableVnicMappingDetails{}
func (s *DisasterRecoveryDrProtectionGroupResourceCrud) mapToComputeInstanceVnicMappingDetails(fieldKeyFormat string) (oci_disaster_recovery.ComputeInstanceVnicMappingDetails, error) {
	result := oci_disaster_recovery.ComputeInstanceVnicMappingDetails{}
func (s *DisasterRecoveryDrProtectionGroupResourceCrud) mapToCreateBlockVolumeAttachmentDetails(fieldKeyFormat string) (oci_disaster_recovery.CreateBlockVolumeAttachmentDetails, error) {
	result := oci_disaster_recovery.CreateBlockVolumeAttachmentDetails{}
func (s *DisasterRecoveryDrProtectionGroupResourceCrud) mapToUpdateBlockVolumeAttachmentDetails(fieldKeyFormat string) (oci_disaster_recovery.UpdateBlockVolumeAttachmentDetails, error) {
	result := oci_disaster_recovery.UpdateBlockVolumeAttachmentDetails{}
func (s *DisasterRecoveryDrProtectionGroupResourceCrud) mapToCreateBlockVolumeMountDetails(fieldKeyFormat string) (oci_disaster_recovery.CreateBlockVolumeMountDetails, error) {
	result := oci_disaster_recovery.CreateBlockVolumeMountDetails{}
func (s *DisasterRecoveryDrProtectionGroupResourceCrud) mapToUpdateBlockVolumeMountDetails(fieldKeyFormat string) (oci_disaster_recovery.UpdateBlockVolumeMountDetails, error) {
	result := oci_disaster_recovery.UpdateBlockVolumeMountDetails{}
func (s *DisasterRecoveryDrProtectionGroupResourceCrud) mapToCreateComputeInstanceMovableFileSystemOperationDetails(fieldKeyFormat string) (oci_disaster_recovery.CreateComputeInstanceMovableFileSystemOperationDetails, error) {
	result := oci_disaster_recovery.CreateComputeInstanceMovableFileSystemOperationDetails{}
func (s *DisasterRecoveryDrProtectionGroupResourceCrud) mapToUpdateComputeInstanceMovableFileSystemOperationDetails(fieldKeyFormat string) (oci_disaster_recovery.UpdateComputeInstanceMovableFileSystemOperationDetails, error) {
	result := oci_disaster_recovery.UpdateComputeInstanceMovableFileSystemOperationDetails{}
func (s *DisasterRecoveryDrProtectionGroupResourceCrud) mapToCreateComputeInstanceNonMovableBlockVolumeOperationDetails(fieldKeyFormat string) (oci_disaster_recovery.CreateComputeInstanceNonMovableBlockVolumeOperationDetails, error) {
	result := oci_disaster_recovery.CreateComputeInstanceNonMovableBlockVolumeOperationDetails{}
func (s *DisasterRecoveryDrProtectionGroupResourceCrud) mapToUpdateComputeInstanceNonMovableBlockVolumeOperationDetails(fieldKeyFormat string) (oci_disaster_recovery.UpdateComputeInstanceNonMovableBlockVolumeOperationDetails, error) {
	result := oci_disaster_recovery.UpdateComputeInstanceNonMovableBlockVolumeOperationDetails{}
func (s *DisasterRecoveryDrProtectionGroupResourceCrud) mapToCreateDrProtectionGroupMemberDetails(fieldKeyFormat string) (oci_disaster_recovery.CreateDrProtectionGroupMemberDetails, error) {
	var baseObject oci_disaster_recovery.CreateDrProtectionGroupMemberDetails
func (s *DisasterRecoveryDrProtectionGroupResourceCrud) mapToUpdateDrProtectionGroupMemberDetails(fieldKeyFormat string) (oci_disaster_recovery.UpdateDrProtectionGroupMemberDetails, error) {
	var baseObject oci_disaster_recovery.UpdateDrProtectionGroupMemberDetails
func (s *DisasterRecoveryDrProtectionGroupResourceCrud) mapToCreateFileSystemMountDetails(fieldKeyFormat string) (oci_disaster_recovery.CreateFileSystemMountDetails, error) {
	result := oci_disaster_recovery.CreateFileSystemMountDetails{}
func (s *DisasterRecoveryDrProtectionGroupResourceCrud) mapToUpdateFileSystemMountDetails(fieldKeyFormat string) (oci_disaster_recovery.UpdateFileSystemMountDetails, error) {
	result := oci_disaster_recovery.UpdateFileSystemMountDetails{}
func (s *DisasterRecoveryDrProtectionGroupResourceCrud) mapToCreateFileSystemUnmountDetails(fieldKeyFormat string) (oci_disaster_recovery.CreateFileSystemUnmountDetails, error) {
	result := oci_disaster_recovery.CreateFileSystemUnmountDetails{}
func (s *DisasterRecoveryDrProtectionGroupResourceCrud) mapToUpdateFileSystemUnmountDetails(fieldKeyFormat string) (oci_disaster_recovery.UpdateFileSystemUnmountDetails, error) {
	result := oci_disaster_recovery.UpdateFileSystemUnmountDetails{}
func (s *DisasterRecoveryDrProtectionGroupResourceCrud) mapToCreateObjectStorageLogLocationDetails(fieldKeyFormat string) (oci_disaster_recovery.CreateObjectStorageLogLocationDetails, error) {
	result := oci_disaster_recovery.CreateObjectStorageLogLocationDetails{}
func (s *DisasterRecoveryDrProtectionGroupResourceCrud) mapToUpdateObjectStorageLogLocationDetails(fieldKeyFormat string) (oci_disaster_recovery.UpdateObjectStorageLogLocationDetails, error) {
	result := oci_disaster_recovery.UpdateObjectStorageLogLocationDetails{}
func (s *DisasterRecoveryDrProtectionGroupResourceCrud) mapToFileSystemExportMappingDetails(fieldKeyFormat string) (oci_disaster_recovery.FileSystemExportMappingDetails, error) {
	result := oci_disaster_recovery.FileSystemExportMappingDetails{}
func (s *DisasterRecoveryDrProtectionGroupResourceCrud) mapToLoadBalancerBackendSetMappingDetails(fieldKeyFormat string) (oci_disaster_recovery.LoadBalancerBackendSetMappingDetails, error) {
	result := oci_disaster_recovery.LoadBalancerBackendSetMappingDetails{}
func (s *DisasterRecoveryDrProtectionGroupResourceCrud) mapToNetworkLoadBalancerBackendSetMappingDetails(fieldKeyFormat string) (oci_disaster_recovery.NetworkLoadBalancerBackendSetMappingDetails, error) {
	result := oci_disaster_recovery.NetworkLoadBalancerBackendSetMappingDetails{}
func (s *DisasterRecoveryDrProtectionGroupResourceCrud) mapToCreateComputeInstanceNonMovableFileSystemOperationDetails(fieldKeyFormat string) (oci_disaster_recovery.CreateComputeInstanceNonMovableFileSystemOperationDetails, error) {
	result := oci_disaster_recovery.CreateComputeInstanceNonMovableFileSystemOperationDetails{}
func (s *DisasterRecoveryDrProtectionGroupResourceCrud) mapToUpdateComputeInstanceNonMovableFileSystemOperationDetails(fieldKeyFormat string) (oci_disaster_recovery.UpdateComputeInstanceNonMovableFileSystemOperationDetails, error) {
	result := oci_disaster_recovery.UpdateComputeInstanceNonMovableFileSystemOperationDetails{}
func (s *DisasterRecoveryDrProtectionGroupResourceCrud) updateCompartment(compartment interface{}) error {
	changeCompartmentRequest := oci_disaster_recovery.ChangeDrProtectionGroupCompartmentRequest{}

=== ./internal/service/disaster_recovery/disaster_recovery_dr_plan_execution_data_source.go ===
func DisasterRecoveryDrPlanExecutionDataSource() *schema.Resource {
	fieldMap := make(map[string]*schema.Schema)
func readSingularDisasterRecoveryDrPlanExecution(d *schema.ResourceData, m interface{}) error {
	sync := &DisasterRecoveryDrPlanExecutionDataSourceCrud{}
func (s *DisasterRecoveryDrPlanExecutionDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *DisasterRecoveryDrPlanExecutionDataSourceCrud) Get() error {
	request := oci_disaster_recovery.GetDrPlanExecutionRequest{}
func (s *DisasterRecoveryDrPlanExecutionDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/disaster_recovery/disaster_recovery_dr_protection_group_data_source.go ===
func DisasterRecoveryDrProtectionGroupDataSource() *schema.Resource {
	fieldMap := make(map[string]*schema.Schema)
func readSingularDisasterRecoveryDrProtectionGroup(d *schema.ResourceData, m interface{}) error {
	sync := &DisasterRecoveryDrProtectionGroupDataSourceCrud{}
func (s *DisasterRecoveryDrProtectionGroupDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *DisasterRecoveryDrProtectionGroupDataSourceCrud) Get() error {
	request := oci_disaster_recovery.GetDrProtectionGroupRequest{}
func (s *DisasterRecoveryDrProtectionGroupDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/disaster_recovery/disaster_recovery_dr_protection_groups_data_source.go ===
func DisasterRecoveryDrProtectionGroupsDataSource() *schema.Resource {
	return &schema.Resource{
func readDisasterRecoveryDrProtectionGroups(d *schema.ResourceData, m interface{}) error {
	sync := &DisasterRecoveryDrProtectionGroupsDataSourceCrud{}
func (s *DisasterRecoveryDrProtectionGroupsDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *DisasterRecoveryDrProtectionGroupsDataSourceCrud) Get() error {
	request := oci_disaster_recovery.ListDrProtectionGroupsRequest{}
func (s *DisasterRecoveryDrProtectionGroupsDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/disaster_recovery/disaster_recovery_dr_plan_resource.go ===
func DisasterRecoveryDrPlanResource() *schema.Resource {
	return &schema.Resource{
func createDisasterRecoveryDrPlan(d *schema.ResourceData, m interface{}) error {
	sync := &DisasterRecoveryDrPlanResourceCrud{}
func readDisasterRecoveryDrPlan(d *schema.ResourceData, m interface{}) error {
	sync := &DisasterRecoveryDrPlanResourceCrud{}
func updateDisasterRecoveryDrPlan(d *schema.ResourceData, m interface{}) error {
	sync := &DisasterRecoveryDrPlanResourceCrud{}
func deleteDisasterRecoveryDrPlan(d *schema.ResourceData, m interface{}) error {
	sync := &DisasterRecoveryDrPlanResourceCrud{}
func (s *DisasterRecoveryDrPlanResourceCrud) ID() string {
	return *s.Res.Id
func (s *DisasterRecoveryDrPlanResourceCrud) CreatedPending() []string {
	return []string{
func (s *DisasterRecoveryDrPlanResourceCrud) CreatedTarget() []string {
	return []string{
func (s *DisasterRecoveryDrPlanResourceCrud) DeletedPending() []string {
	return []string{
func (s *DisasterRecoveryDrPlanResourceCrud) DeletedTarget() []string {
	return []string{
func (s *DisasterRecoveryDrPlanResourceCrud) Create() error {
	request := oci_disaster_recovery.CreateDrPlanRequest{}
func (s *DisasterRecoveryDrPlanResourceCrud) getDrPlanFromWorkRequest(workId *string, retryPolicy *oci_common.RetryPolicy,
	actionTypeEnum oci_disaster_recovery.ActionTypeEnum, timeout time.Duration) error {
func (s *DisasterRecoveryDrPlanResourceCrud) Get() error {
	request := oci_disaster_recovery.GetDrPlanRequest{}
func (s *DisasterRecoveryDrPlanResourceCrud) Update() error {
	request := oci_disaster_recovery.UpdateDrPlanRequest{}
func (s *DisasterRecoveryDrPlanResourceCrud) Delete() error {
	request := oci_disaster_recovery.DeleteDrPlanRequest{}
func (s *DisasterRecoveryDrPlanResourceCrud) SetData() error {
	if s.Res.CompartmentId != nil {
func (s *DisasterRecoveryDrPlanResourceCrud) mapToDrPlanGroup(fieldKeyFormat string) (oci_disaster_recovery.DrPlanGroup, error) {
	result := oci_disaster_recovery.DrPlanGroup{}
func (s *DisasterRecoveryDrPlanResourceCrud) mapToUpdateDrPlanGroupDetails(fieldKeyFormat string) (oci_disaster_recovery.UpdateDrPlanGroupDetails, error) {
	result := oci_disaster_recovery.UpdateDrPlanGroupDetails{}
func (s *DisasterRecoveryDrPlanResourceCrud) mapToUpdateDrPlanStepDetails(fieldKeyFormat string) (oci_disaster_recovery.UpdateDrPlanStepDetails, error) {
	result := oci_disaster_recovery.UpdateDrPlanStepDetails{}
func (s *DisasterRecoveryDrPlanResourceCrud) mapToDrPlanStep(fieldKeyFormat string) (oci_disaster_recovery.DrPlanStep, error) {
	result := oci_disaster_recovery.DrPlanStep{}
func (s *DisasterRecoveryDrPlanResourceCrud) mapToDrPlanUserDefinedStep(fieldKeyFormat string) (oci_disaster_recovery.DrPlanUserDefinedStep, error) {
	var baseObject oci_disaster_recovery.DrPlanUserDefinedStep
func (s *DisasterRecoveryDrPlanResourceCrud) mapToUpdateDrPlanUserDefinedStepDetails(fieldKeyFormat string) (oci_disaster_recovery.UpdateDrPlanUserDefinedStepDetails, error) {
	var baseObject oci_disaster_recovery.UpdateDrPlanUserDefinedStepDetails
func (s *DisasterRecoveryDrPlanResourceCrud) mapToObjectStorageScriptLocation(fieldKeyFormat string) (oci_disaster_recovery.ObjectStorageScriptLocation, error) {
	result := oci_disaster_recovery.ObjectStorageScriptLocation{}
func (s *DisasterRecoveryDrPlanResourceCrud) mapToUpdateObjectStorageScriptLocationDetails(fieldKeyFormat string) (oci_disaster_recovery.UpdateObjectStorageScriptLocationDetails, error) {
	result := oci_disaster_recovery.UpdateObjectStorageScriptLocationDetails{}

=== ./internal/service/disaster_recovery/disaster_recovery_dr_plans_data_source.go ===
func DisasterRecoveryDrPlansDataSource() *schema.Resource {
	return &schema.Resource{
func readDisasterRecoveryDrPlans(d *schema.ResourceData, m interface{}) error {
	sync := &DisasterRecoveryDrPlansDataSourceCrud{}
func (s *DisasterRecoveryDrPlansDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *DisasterRecoveryDrPlansDataSourceCrud) Get() error {
	request := oci_disaster_recovery.ListDrPlansRequest{}
func (s *DisasterRecoveryDrPlansDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/disaster_recovery/disaster_recovery_dr_plan_data_source.go ===
func DisasterRecoveryDrPlanDataSource() *schema.Resource {
	fieldMap := make(map[string]*schema.Schema)
func readSingularDisasterRecoveryDrPlan(d *schema.ResourceData, m interface{}) error {
	sync := &DisasterRecoveryDrPlanDataSourceCrud{}
func (s *DisasterRecoveryDrPlanDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *DisasterRecoveryDrPlanDataSourceCrud) Get() error {
	request := oci_disaster_recovery.GetDrPlanRequest{}
func (s *DisasterRecoveryDrPlanDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/disaster_recovery/disaster_recovery_dr_plan_executions_data_source.go ===
func DisasterRecoveryDrPlanExecutionsDataSource() *schema.Resource {
	return &schema.Resource{
func readDisasterRecoveryDrPlanExecutions(d *schema.ResourceData, m interface{}) error {
	sync := &DisasterRecoveryDrPlanExecutionsDataSourceCrud{}
func (s *DisasterRecoveryDrPlanExecutionsDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *DisasterRecoveryDrPlanExecutionsDataSourceCrud) Get() error {
	request := oci_disaster_recovery.ListDrPlanExecutionsRequest{}
func (s *DisasterRecoveryDrPlanExecutionsDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/disaster_recovery/disaster_recovery_dr_plan_execution_resource.go ===
func DisasterRecoveryDrPlanExecutionResource() *schema.Resource {
	return &schema.Resource{
func createDisasterRecoveryDrPlanExecution(d *schema.ResourceData, m interface{}) error {
	sync := &DisasterRecoveryDrPlanExecutionResourceCrud{}
func readDisasterRecoveryDrPlanExecution(d *schema.ResourceData, m interface{}) error {
	sync := &DisasterRecoveryDrPlanExecutionResourceCrud{}
func updateDisasterRecoveryDrPlanExecution(d *schema.ResourceData, m interface{}) error {
	sync := &DisasterRecoveryDrPlanExecutionResourceCrud{}
func deleteDisasterRecoveryDrPlanExecution(d *schema.ResourceData, m interface{}) error {
	sync := &DisasterRecoveryDrPlanExecutionResourceCrud{}
func (s *DisasterRecoveryDrPlanExecutionResourceCrud) ID() string {
	return *s.Res.Id
func (s *DisasterRecoveryDrPlanExecutionResourceCrud) CreatedPending() []string {
	return []string{
func (s *DisasterRecoveryDrPlanExecutionResourceCrud) CreatedTarget() []string {
	return []string{
func (s *DisasterRecoveryDrPlanExecutionResourceCrud) DeletedPending() []string {
	return []string{
func (s *DisasterRecoveryDrPlanExecutionResourceCrud) DeletedTarget() []string {
	return []string{
func (s *DisasterRecoveryDrPlanExecutionResourceCrud) Create() error {
	request := oci_disaster_recovery.CreateDrPlanExecutionRequest{}
func (s *DisasterRecoveryDrPlanExecutionResourceCrud) getDrPlanExecutionFromWorkRequest(workId *string, retryPolicy *oci_common.RetryPolicy,
	actionTypeEnum oci_disaster_recovery.ActionTypeEnum, timeout time.Duration) error {
func (s *DisasterRecoveryDrPlanExecutionResourceCrud) Get() error {
	request := oci_disaster_recovery.GetDrPlanExecutionRequest{}
func (s *DisasterRecoveryDrPlanExecutionResourceCrud) Update() error {
	request := oci_disaster_recovery.UpdateDrPlanExecutionRequest{}
func (s *DisasterRecoveryDrPlanExecutionResourceCrud) Delete() error {
	request := oci_disaster_recovery.DeleteDrPlanExecutionRequest{}
func (s *DisasterRecoveryDrPlanExecutionResourceCrud) SetData() error {
	if s.Res.CompartmentId != nil {
func (s *DisasterRecoveryDrPlanExecutionResourceCrud) mapToDrPlanExecutionOptionDetails(fieldKeyFormat string) (oci_disaster_recovery.DrPlanExecutionOptionDetails, error) {
	var baseObject oci_disaster_recovery.DrPlanExecutionOptionDetails

=== ./internal/service/disaster_recovery/register_resource.go ===
func RegisterResource() {
	tfresource.RegisterResource("oci_disaster_recovery_dr_plan", DisasterRecoveryDrPlanResource())

=== ./internal/service/media_services/media_services_system_media_workflow_data_source.go ===
func MediaServicesSystemMediaWorkflowDataSource() *schema.Resource {
	return &schema.Resource{
func readSingularMediaServicesSystemMediaWorkflow(d *schema.ResourceData, m interface{}) error {
	sync := &MediaServicesSystemMediaWorkflowDataSourceCrud{}
func (s *MediaServicesSystemMediaWorkflowDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *MediaServicesSystemMediaWorkflowDataSourceCrud) Get() error {
	request := oci_media_services.ListSystemMediaWorkflowsRequest{}
func (s *MediaServicesSystemMediaWorkflowDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/media_services/media_services_stream_cdn_config_resource.go ===
func MediaServicesStreamCdnConfigResource() *schema.Resource {
	return &schema.Resource{
func createMediaServicesStreamCdnConfig(d *schema.ResourceData, m interface{}) error {
	sync := &MediaServicesStreamCdnConfigResourceCrud{}
func readMediaServicesStreamCdnConfig(d *schema.ResourceData, m interface{}) error {
	sync := &MediaServicesStreamCdnConfigResourceCrud{}
func updateMediaServicesStreamCdnConfig(d *schema.ResourceData, m interface{}) error {
	sync := &MediaServicesStreamCdnConfigResourceCrud{}
func deleteMediaServicesStreamCdnConfig(d *schema.ResourceData, m interface{}) error {
	sync := &MediaServicesStreamCdnConfigResourceCrud{}
func (s *MediaServicesStreamCdnConfigResourceCrud) ID() string {
	return *s.Res.Id
func (s *MediaServicesStreamCdnConfigResourceCrud) CreatedPending() []string {
	return []string{}
func (s *MediaServicesStreamCdnConfigResourceCrud) CreatedTarget() []string {
	return []string{
func (s *MediaServicesStreamCdnConfigResourceCrud) DeletedPending() []string {
	return []string{}
func (s *MediaServicesStreamCdnConfigResourceCrud) DeletedTarget() []string {
	return []string{
func (s *MediaServicesStreamCdnConfigResourceCrud) Create() error {
	request := oci_media_services.CreateStreamCdnConfigRequest{}
func (s *MediaServicesStreamCdnConfigResourceCrud) Get() error {
	request := oci_media_services.GetStreamCdnConfigRequest{}
func (s *MediaServicesStreamCdnConfigResourceCrud) Update() error {
	request := oci_media_services.UpdateStreamCdnConfigRequest{}
func (s *MediaServicesStreamCdnConfigResourceCrud) Delete() error {
	request := oci_media_services.DeleteStreamCdnConfigRequest{}
func (s *MediaServicesStreamCdnConfigResourceCrud) SetData() error {
	if s.Res.CompartmentId != nil {
func (s *MediaServicesStreamCdnConfigResourceCrud) mapToResourceLock(fieldKeyFormat string) (oci_media_services.ResourceLock, error) {
	result := oci_media_services.ResourceLock{}
func (s *MediaServicesStreamCdnConfigResourceCrud) mapToStreamCdnConfigSection(fieldKeyFormat string) (oci_media_services.StreamCdnConfigSection, error) {
	var baseObject oci_media_services.StreamCdnConfigSection

=== ./internal/service/media_services/media_services_media_asset_data_source.go ===
func MediaServicesMediaAssetDataSource() *schema.Resource {
	fieldMap := make(map[string]*schema.Schema)
func readSingularMediaServicesMediaAsset(d *schema.ResourceData, m interface{}) error {
	sync := &MediaServicesMediaAssetDataSourceCrud{}
func (s *MediaServicesMediaAssetDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *MediaServicesMediaAssetDataSourceCrud) Get() error {
	request := oci_media_services.GetMediaAssetRequest{}
func (s *MediaServicesMediaAssetDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/media_services/media_services_media_workflow_job_data_source.go ===
func MediaServicesMediaWorkflowJobDataSource() *schema.Resource {
	fieldMap := make(map[string]*schema.Schema)
func readSingularMediaServicesMediaWorkflowJob(d *schema.ResourceData, m interface{}) error {
	sync := &MediaServicesMediaWorkflowJobDataSourceCrud{}
func (s *MediaServicesMediaWorkflowJobDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *MediaServicesMediaWorkflowJobDataSourceCrud) Get() error {
	request := oci_media_services.GetMediaWorkflowJobRequest{}
func (s *MediaServicesMediaWorkflowJobDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/media_services/media_services_media_workflow_job_resource.go ===
func MediaServicesMediaWorkflowJobResource() *schema.Resource {
	return &schema.Resource{
func createMediaServicesMediaWorkflowJob(d *schema.ResourceData, m interface{}) error {
	sync := &MediaServicesMediaWorkflowJobResourceCrud{}
func readMediaServicesMediaWorkflowJob(d *schema.ResourceData, m interface{}) error {
	sync := &MediaServicesMediaWorkflowJobResourceCrud{}
func updateMediaServicesMediaWorkflowJob(d *schema.ResourceData, m interface{}) error {
	sync := &MediaServicesMediaWorkflowJobResourceCrud{}
func deleteMediaServicesMediaWorkflowJob(d *schema.ResourceData, m interface{}) error {
	sync := &MediaServicesMediaWorkflowJobResourceCrud{}
func (s *MediaServicesMediaWorkflowJobResourceCrud) ID() string {
	return *s.Res.Id
func (s *MediaServicesMediaWorkflowJobResourceCrud) CreatedPending() []string {
	return []string{
func (s *MediaServicesMediaWorkflowJobResourceCrud) CreatedTarget() []string {
	return []string{
func (s *MediaServicesMediaWorkflowJobResourceCrud) DeletedPending() []string {
	return []string{
func (s *MediaServicesMediaWorkflowJobResourceCrud) DeletedTarget() []string {
	return []string{
func (s *MediaServicesMediaWorkflowJobResourceCrud) Create() error {
	request := oci_media_services.CreateMediaWorkflowJobRequest{}
func (s *MediaServicesMediaWorkflowJobResourceCrud) Get() error {
	request := oci_media_services.GetMediaWorkflowJobRequest{}
func (s *MediaServicesMediaWorkflowJobResourceCrud) Update() error {
	if compartment, ok := s.D.GetOkExists("compartment_id"); ok && s.D.HasChange("compartment_id") {
func (s *MediaServicesMediaWorkflowJobResourceCrud) Delete() error {
	request := oci_media_services.DeleteMediaWorkflowJobRequest{}
func (s *MediaServicesMediaWorkflowJobResourceCrud) SetData() error {
	if s.Res.CompartmentId != nil {
func (s *MediaServicesMediaWorkflowJobResourceCrud) mapToResourceLock(fieldKeyFormat string) (oci_media_services.ResourceLock, error) {
	result := oci_media_services.ResourceLock{}
func (s *MediaServicesMediaWorkflowJobResourceCrud) populateTopLevelPolymorphicCreateMediaWorkflowJobRequest(request *oci_media_services.CreateMediaWorkflowJobRequest) error {
	//discriminator
func (s *MediaServicesMediaWorkflowJobResourceCrud) updateCompartment(compartment interface{}) error {
	changeCompartmentRequest := oci_media_services.ChangeMediaWorkflowJobCompartmentRequest{}

=== ./internal/service/media_services/media_services_media_workflow_job_facts_data_source.go ===
func MediaServicesMediaWorkflowJobFactsDataSource() *schema.Resource {
	return &schema.Resource{
func readMediaServicesMediaWorkflowJobFacts(d *schema.ResourceData, m interface{}) error {
	sync := &MediaServicesMediaWorkflowJobFactsDataSourceCrud{}
func (s *MediaServicesMediaWorkflowJobFactsDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *MediaServicesMediaWorkflowJobFactsDataSourceCrud) Get() error {
	//request := oci_media_services.ListMediaWorkflowJobFactsRequest{}
func (s *MediaServicesMediaWorkflowJobFactsDataSourceCrud) SetData() error {
	//if s.Res == nil {

=== ./internal/service/media_services/media_services_media_workflow_task_declaration_data_source.go ===
func MediaServicesMediaWorkflowTaskDeclarationDataSource() *schema.Resource {
	return &schema.Resource{
func readSingularMediaServicesMediaWorkflowTaskDeclaration(d *schema.ResourceData, m interface{}) error {
	sync := &MediaServicesMediaWorkflowTaskDeclarationDataSourceCrud{}
func (s *MediaServicesMediaWorkflowTaskDeclarationDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *MediaServicesMediaWorkflowTaskDeclarationDataSourceCrud) Get() error {
	request := oci_media_services.ListMediaWorkflowTaskDeclarationsRequest{}
func (s *MediaServicesMediaWorkflowTaskDeclarationDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/media_services/media_services_stream_cdn_config_data_source.go ===
func MediaServicesStreamCdnConfigDataSource() *schema.Resource {
	fieldMap := make(map[string]*schema.Schema)
func readSingularMediaServicesStreamCdnConfig(d *schema.ResourceData, m interface{}) error {
	sync := &MediaServicesStreamCdnConfigDataSourceCrud{}
func (s *MediaServicesStreamCdnConfigDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *MediaServicesStreamCdnConfigDataSourceCrud) Get() error {
	request := oci_media_services.GetStreamCdnConfigRequest{}
func (s *MediaServicesStreamCdnConfigDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/media_services/media_services_media_workflow_data_source.go ===
func MediaServicesMediaWorkflowDataSource() *schema.Resource {
	fieldMap := make(map[string]*schema.Schema)
func readSingularMediaServicesMediaWorkflow(d *schema.ResourceData, m interface{}) error {
	sync := &MediaServicesMediaWorkflowDataSourceCrud{}
func (s *MediaServicesMediaWorkflowDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *MediaServicesMediaWorkflowDataSourceCrud) Get() error {
	request := oci_media_services.GetMediaWorkflowRequest{}
func (s *MediaServicesMediaWorkflowDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/media_services/media_services_stream_distribution_channels_data_source.go ===
func MediaServicesStreamDistributionChannelsDataSource() *schema.Resource {
	return &schema.Resource{
func readMediaServicesStreamDistributionChannels(d *schema.ResourceData, m interface{}) error {
	sync := &MediaServicesStreamDistributionChannelsDataSourceCrud{}
func (s *MediaServicesStreamDistributionChannelsDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *MediaServicesStreamDistributionChannelsDataSourceCrud) Get() error {
	request := oci_media_services.ListStreamDistributionChannelsRequest{}
func (s *MediaServicesStreamDistributionChannelsDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/media_services/media_services_media_asset_distribution_channel_attachment_data_source.go ===
func MediaServicesMediaAssetDistributionChannelAttachmentDataSource() *schema.Resource {
	return &schema.Resource{
func readSingularMediaServicesMediaAssetDistributionChannelAttachment(d *schema.ResourceData, m interface{}) error {
	sync := &MediaServicesMediaAssetDistributionChannelAttachmentDataSourceCrud{}
func (s *MediaServicesMediaAssetDistributionChannelAttachmentDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *MediaServicesMediaAssetDistributionChannelAttachmentDataSourceCrud) Get() error {
	request := oci_media_services.GetMediaAssetDistributionChannelAttachmentRequest{}
func (s *MediaServicesMediaAssetDistributionChannelAttachmentDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/media_services/media_services_media_assets_data_source.go ===
func MediaServicesMediaAssetsDataSource() *schema.Resource {
	return &schema.Resource{
func readMediaServicesMediaAssets(d *schema.ResourceData, m interface{}) error {
	sync := &MediaServicesMediaAssetsDataSourceCrud{}
func (s *MediaServicesMediaAssetsDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *MediaServicesMediaAssetsDataSourceCrud) Get() error {
	request := oci_media_services.ListMediaAssetsRequest{}
func (s *MediaServicesMediaAssetsDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/media_services/media_services_stream_distribution_channel_data_source.go ===
func MediaServicesStreamDistributionChannelDataSource() *schema.Resource {
	fieldMap := make(map[string]*schema.Schema)
func readSingularMediaServicesStreamDistributionChannel(d *schema.ResourceData, m interface{}) error {
	sync := &MediaServicesStreamDistributionChannelDataSourceCrud{}
func (s *MediaServicesStreamDistributionChannelDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *MediaServicesStreamDistributionChannelDataSourceCrud) Get() error {
	request := oci_media_services.GetStreamDistributionChannelRequest{}
func (s *MediaServicesStreamDistributionChannelDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/media_services/media_services_stream_distribution_channel_resource.go ===
func MediaServicesStreamDistributionChannelResource() *schema.Resource {
	return &schema.Resource{
func createMediaServicesStreamDistributionChannel(d *schema.ResourceData, m interface{}) error {
	sync := &MediaServicesStreamDistributionChannelResourceCrud{}
func readMediaServicesStreamDistributionChannel(d *schema.ResourceData, m interface{}) error {
	sync := &MediaServicesStreamDistributionChannelResourceCrud{}
func updateMediaServicesStreamDistributionChannel(d *schema.ResourceData, m interface{}) error {
	sync := &MediaServicesStreamDistributionChannelResourceCrud{}
func deleteMediaServicesStreamDistributionChannel(d *schema.ResourceData, m interface{}) error {
	sync := &MediaServicesStreamDistributionChannelResourceCrud{}
func (s *MediaServicesStreamDistributionChannelResourceCrud) ID() string {
	return *s.Res.Id
func (s *MediaServicesStreamDistributionChannelResourceCrud) CreatedPending() []string {
	return []string{}
func (s *MediaServicesStreamDistributionChannelResourceCrud) CreatedTarget() []string {
	return []string{
func (s *MediaServicesStreamDistributionChannelResourceCrud) DeletedPending() []string {
	return []string{}
func (s *MediaServicesStreamDistributionChannelResourceCrud) DeletedTarget() []string {
	return []string{
func (s *MediaServicesStreamDistributionChannelResourceCrud) Create() error {
	request := oci_media_services.CreateStreamDistributionChannelRequest{}
func (s *MediaServicesStreamDistributionChannelResourceCrud) Get() error {
	request := oci_media_services.GetStreamDistributionChannelRequest{}
func (s *MediaServicesStreamDistributionChannelResourceCrud) Update() error {
	if compartment, ok := s.D.GetOkExists("compartment_id"); ok && s.D.HasChange("compartment_id") {
func (s *MediaServicesStreamDistributionChannelResourceCrud) Delete() error {
	request := oci_media_services.DeleteStreamDistributionChannelRequest{}
func (s *MediaServicesStreamDistributionChannelResourceCrud) SetData() error {
	if s.Res.CompartmentId != nil {
func (s *MediaServicesStreamDistributionChannelResourceCrud) mapToResourceLock(fieldKeyFormat string) (oci_media_services.ResourceLock, error) {
	result := oci_media_services.ResourceLock{}
func (s *MediaServicesStreamDistributionChannelResourceCrud) updateCompartment(compartment interface{}) error {
	changeCompartmentRequest := oci_media_services.ChangeStreamDistributionChannelCompartmentRequest{}

=== ./internal/service/media_services/media_services_media_workflow_jobs_data_source.go ===
func MediaServicesMediaWorkflowJobsDataSource() *schema.Resource {
	return &schema.Resource{
func readMediaServicesMediaWorkflowJobs(d *schema.ResourceData, m interface{}) error {
	sync := &MediaServicesMediaWorkflowJobsDataSourceCrud{}
func (s *MediaServicesMediaWorkflowJobsDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *MediaServicesMediaWorkflowJobsDataSourceCrud) Get() error {
	request := oci_media_services.ListMediaWorkflowJobsRequest{}
func (s *MediaServicesMediaWorkflowJobsDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/media_services/media_services_stream_cdn_configs_data_source.go ===
func MediaServicesStreamCdnConfigsDataSource() *schema.Resource {
	return &schema.Resource{
func readMediaServicesStreamCdnConfigs(d *schema.ResourceData, m interface{}) error {
	sync := &MediaServicesStreamCdnConfigsDataSourceCrud{}
func (s *MediaServicesStreamCdnConfigsDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *MediaServicesStreamCdnConfigsDataSourceCrud) Get() error {
	request := oci_media_services.ListStreamCdnConfigsRequest{}
func (s *MediaServicesStreamCdnConfigsDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/media_services/media_services_stream_packaging_config_resource.go ===
func MediaServicesStreamPackagingConfigResource() *schema.Resource {
	return &schema.Resource{
func createMediaServicesStreamPackagingConfig(d *schema.ResourceData, m interface{}) error {
	sync := &MediaServicesStreamPackagingConfigResourceCrud{}
func readMediaServicesStreamPackagingConfig(d *schema.ResourceData, m interface{}) error {
	sync := &MediaServicesStreamPackagingConfigResourceCrud{}
func updateMediaServicesStreamPackagingConfig(d *schema.ResourceData, m interface{}) error {
	sync := &MediaServicesStreamPackagingConfigResourceCrud{}
func deleteMediaServicesStreamPackagingConfig(d *schema.ResourceData, m interface{}) error {
	sync := &MediaServicesStreamPackagingConfigResourceCrud{}
func (s *MediaServicesStreamPackagingConfigResourceCrud) ID() string {
	streamPackagingConfig := *s.Res
func (s *MediaServicesStreamPackagingConfigResourceCrud) CreatedPending() []string {
	return []string{}
func (s *MediaServicesStreamPackagingConfigResourceCrud) CreatedTarget() []string {
	return []string{
func (s *MediaServicesStreamPackagingConfigResourceCrud) DeletedPending() []string {
	return []string{}
func (s *MediaServicesStreamPackagingConfigResourceCrud) DeletedTarget() []string {
	return []string{
func (s *MediaServicesStreamPackagingConfigResourceCrud) Create() error {
	request := oci_media_services.CreateStreamPackagingConfigRequest{}
func (s *MediaServicesStreamPackagingConfigResourceCrud) Get() error {
	request := oci_media_services.GetStreamPackagingConfigRequest{}
func (s *MediaServicesStreamPackagingConfigResourceCrud) Update() error {
	request := oci_media_services.UpdateStreamPackagingConfigRequest{}
func (s *MediaServicesStreamPackagingConfigResourceCrud) Delete() error {
	request := oci_media_services.DeleteStreamPackagingConfigRequest{}
func (s *MediaServicesStreamPackagingConfigResourceCrud) SetData() error {
	switch v := (*s.Res).(type) {
func (s *MediaServicesStreamPackagingConfigResourceCrud) mapToResourceLock(fieldKeyFormat string) (oci_media_services.ResourceLock, error) {
	result := oci_media_services.ResourceLock{}
func (s *MediaServicesStreamPackagingConfigResourceCrud) mapToStreamPackagingConfigEncryption(fieldKeyFormat string) (oci_media_services.StreamPackagingConfigEncryption, error) {
	var baseObject oci_media_services.StreamPackagingConfigEncryption

=== ./internal/service/media_services/media_services_media_asset_resource.go ===
func MediaServicesMediaAssetResource() *schema.Resource {
	return &schema.Resource{
func createMediaServicesMediaAsset(d *schema.ResourceData, m interface{}) error {
	sync := &MediaServicesMediaAssetResourceCrud{}
func readMediaServicesMediaAsset(d *schema.ResourceData, m interface{}) error {
	sync := &MediaServicesMediaAssetResourceCrud{}
func updateMediaServicesMediaAsset(d *schema.ResourceData, m interface{}) error {
	sync := &MediaServicesMediaAssetResourceCrud{}
func deleteMediaServicesMediaAsset(d *schema.ResourceData, m interface{}) error {
	sync := &MediaServicesMediaAssetResourceCrud{}
func (s *MediaServicesMediaAssetResourceCrud) ID() string {
	return *s.Res.Id
func (s *MediaServicesMediaAssetResourceCrud) CreatedPending() []string {
	return []string{
func (s *MediaServicesMediaAssetResourceCrud) CreatedTarget() []string {
	return []string{
func (s *MediaServicesMediaAssetResourceCrud) DeletedPending() []string {
	return []string{
func (s *MediaServicesMediaAssetResourceCrud) DeletedTarget() []string {
	return []string{
func (s *MediaServicesMediaAssetResourceCrud) Create() error {
	request := oci_media_services.CreateMediaAssetRequest{}
func (s *MediaServicesMediaAssetResourceCrud) Get() error {
	request := oci_media_services.GetMediaAssetRequest{}
func (s *MediaServicesMediaAssetResourceCrud) Update() error {
	if compartment, ok := s.D.GetOkExists("compartment_id"); ok && s.D.HasChange("compartment_id") {
func (s *MediaServicesMediaAssetResourceCrud) Delete() error {
	request := oci_media_services.DeleteMediaAssetRequest{}
func (s *MediaServicesMediaAssetResourceCrud) SetData() error {
	if s.Res.BucketName != nil {
func (s *MediaServicesMediaAssetResourceCrud) mapToMediaAssetTag(fieldKeyFormat string) (oci_media_services.MediaAssetTag, error) {
	result := oci_media_services.MediaAssetTag{}
func (s *MediaServicesMediaAssetResourceCrud) mapToMetadata(fieldKeyFormat string) (oci_media_services.Metadata, error) {
	result := oci_media_services.Metadata{}
func (s *MediaServicesMediaAssetResourceCrud) mapToResourceLock(fieldKeyFormat string) (oci_media_services.ResourceLock, error) {
	result := oci_media_services.ResourceLock{}
func ResourceLockToMap(obj oci_media_services.ResourceLock) map[string]interface{} {
	result := map[string]interface{}{}
func (s *MediaServicesMediaAssetResourceCrud) updateCompartment(compartment interface{}) error {
	changeCompartmentRequest := oci_media_services.ChangeMediaAssetCompartmentRequest{}

=== ./internal/service/media_services/media_services_media_workflow_configurations_data_source.go ===
func MediaServicesMediaWorkflowConfigurationsDataSource() *schema.Resource {
	return &schema.Resource{
func readMediaServicesMediaWorkflowConfigurations(d *schema.ResourceData, m interface{}) error {
	sync := &MediaServicesMediaWorkflowConfigurationsDataSourceCrud{}
func (s *MediaServicesMediaWorkflowConfigurationsDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *MediaServicesMediaWorkflowConfigurationsDataSourceCrud) Get() error {
	request := oci_media_services.ListMediaWorkflowConfigurationsRequest{}
func (s *MediaServicesMediaWorkflowConfigurationsDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/media_services/media_services_stream_packaging_config_data_source.go ===
func MediaServicesStreamPackagingConfigDataSource() *schema.Resource {
	fieldMap := make(map[string]*schema.Schema)
func readSingularMediaServicesStreamPackagingConfig(d *schema.ResourceData, m interface{}) error {
	sync := &MediaServicesStreamPackagingConfigDataSourceCrud{}
func (s *MediaServicesStreamPackagingConfigDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *MediaServicesStreamPackagingConfigDataSourceCrud) Get() error {
	request := oci_media_services.GetStreamPackagingConfigRequest{}
func (s *MediaServicesStreamPackagingConfigDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/media_services/media_services_media_workflow_resource.go ===
func MediaServicesMediaWorkflowResource() *schema.Resource {
	return &schema.Resource{
func createMediaServicesMediaWorkflow(d *schema.ResourceData, m interface{}) error {
	sync := &MediaServicesMediaWorkflowResourceCrud{}
func readMediaServicesMediaWorkflow(d *schema.ResourceData, m interface{}) error {
	sync := &MediaServicesMediaWorkflowResourceCrud{}
func updateMediaServicesMediaWorkflow(d *schema.ResourceData, m interface{}) error {
	sync := &MediaServicesMediaWorkflowResourceCrud{}
func deleteMediaServicesMediaWorkflow(d *schema.ResourceData, m interface{}) error {
	sync := &MediaServicesMediaWorkflowResourceCrud{}
func (s *MediaServicesMediaWorkflowResourceCrud) ID() string {
	return *s.Res.Id
func (s *MediaServicesMediaWorkflowResourceCrud) CreatedPending() []string {
	return []string{}
func (s *MediaServicesMediaWorkflowResourceCrud) CreatedTarget() []string {
	return []string{
func (s *MediaServicesMediaWorkflowResourceCrud) DeletedPending() []string {
	return []string{}
func (s *MediaServicesMediaWorkflowResourceCrud) DeletedTarget() []string {
	return []string{
func (s *MediaServicesMediaWorkflowResourceCrud) Create() error {
	request := oci_media_services.CreateMediaWorkflowRequest{}
func (s *MediaServicesMediaWorkflowResourceCrud) Get() error {
	request := oci_media_services.GetMediaWorkflowRequest{}
func (s *MediaServicesMediaWorkflowResourceCrud) Update() error {
	if compartment, ok := s.D.GetOkExists("compartment_id"); ok && s.D.HasChange("compartment_id") {
func (s *MediaServicesMediaWorkflowResourceCrud) Delete() error {
	request := oci_media_services.DeleteMediaWorkflowRequest{}
func (s *MediaServicesMediaWorkflowResourceCrud) SetData() error {
	if s.Res.CompartmentId != nil {
func (s *MediaServicesMediaWorkflowResourceCrud) mapToMediaWorkflowTask(fieldKeyFormat string) (oci_media_services.MediaWorkflowTask, error) {
	result := oci_media_services.MediaWorkflowTask{}
func (s *MediaServicesMediaWorkflowResourceCrud) mapToResourceLock(fieldKeyFormat string) (oci_media_services.ResourceLock, error) {
	result := oci_media_services.ResourceLock{}
func (s *MediaServicesMediaWorkflowResourceCrud) updateCompartment(compartment interface{}) error {
	changeCompartmentRequest := oci_media_services.ChangeMediaWorkflowCompartmentRequest{}

=== ./internal/service/media_services/media_services_media_workflow_configuration_data_source.go ===
func MediaServicesMediaWorkflowConfigurationDataSource() *schema.Resource {
	fieldMap := make(map[string]*schema.Schema)
func readSingularMediaServicesMediaWorkflowConfiguration(d *schema.ResourceData, m interface{}) error {
	sync := &MediaServicesMediaWorkflowConfigurationDataSourceCrud{}
func (s *MediaServicesMediaWorkflowConfigurationDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *MediaServicesMediaWorkflowConfigurationDataSourceCrud) Get() error {
	request := oci_media_services.GetMediaWorkflowConfigurationRequest{}
func (s *MediaServicesMediaWorkflowConfigurationDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/media_services/media_services_media_workflow_job_fact_data_source.go ===
func MediaServicesMediaWorkflowJobFactDataSource() *schema.Resource {
	return &schema.Resource{
func readSingularMediaServicesMediaWorkflowJobFact(d *schema.ResourceData, m interface{}) error {
	sync := &MediaServicesMediaWorkflowJobFactDataSourceCrud{}
func (s *MediaServicesMediaWorkflowJobFactDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *MediaServicesMediaWorkflowJobFactDataSourceCrud) Get() error {
	//request := oci_media_services.GetMediaWorkflowJobFactRequest{}
func (s *MediaServicesMediaWorkflowJobFactDataSourceCrud) SetData() error {
	//if s.Res == nil {

=== ./internal/service/media_services/media_services_stream_packaging_configs_data_source.go ===
func MediaServicesStreamPackagingConfigsDataSource() *schema.Resource {
	return &schema.Resource{
func readMediaServicesStreamPackagingConfigs(d *schema.ResourceData, m interface{}) error {
	sync := &MediaServicesStreamPackagingConfigsDataSourceCrud{}
func (s *MediaServicesStreamPackagingConfigsDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *MediaServicesStreamPackagingConfigsDataSourceCrud) Get() error {
	request := oci_media_services.ListStreamPackagingConfigsRequest{}
func (s *MediaServicesStreamPackagingConfigsDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/media_services/media_services_media_workflows_data_source.go ===
func MediaServicesMediaWorkflowsDataSource() *schema.Resource {
	return &schema.Resource{
func readMediaServicesMediaWorkflows(d *schema.ResourceData, m interface{}) error {
	sync := &MediaServicesMediaWorkflowsDataSourceCrud{}
func (s *MediaServicesMediaWorkflowsDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *MediaServicesMediaWorkflowsDataSourceCrud) Get() error {
	request := oci_media_services.ListMediaWorkflowsRequest{}
func (s *MediaServicesMediaWorkflowsDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/media_services/register_resource.go ===
func RegisterResource() {
	tfresource.RegisterResource("oci_media_services_media_asset", MediaServicesMediaAssetResource())

=== ./internal/service/media_services/media_services_media_workflow_configuration_resource.go ===
func MediaServicesMediaWorkflowConfigurationResource() *schema.Resource {
	return &schema.Resource{
func createMediaServicesMediaWorkflowConfiguration(d *schema.ResourceData, m interface{}) error {
	sync := &MediaServicesMediaWorkflowConfigurationResourceCrud{}
func readMediaServicesMediaWorkflowConfiguration(d *schema.ResourceData, m interface{}) error {
	sync := &MediaServicesMediaWorkflowConfigurationResourceCrud{}
func updateMediaServicesMediaWorkflowConfiguration(d *schema.ResourceData, m interface{}) error {
	sync := &MediaServicesMediaWorkflowConfigurationResourceCrud{}
func deleteMediaServicesMediaWorkflowConfiguration(d *schema.ResourceData, m interface{}) error {
	sync := &MediaServicesMediaWorkflowConfigurationResourceCrud{}
func (s *MediaServicesMediaWorkflowConfigurationResourceCrud) ID() string {
	return *s.Res.Id
func (s *MediaServicesMediaWorkflowConfigurationResourceCrud) CreatedPending() []string {
	return []string{}
func (s *MediaServicesMediaWorkflowConfigurationResourceCrud) CreatedTarget() []string {
	return []string{
func (s *MediaServicesMediaWorkflowConfigurationResourceCrud) DeletedPending() []string {
	return []string{}
func (s *MediaServicesMediaWorkflowConfigurationResourceCrud) DeletedTarget() []string {
	return []string{
func (s *MediaServicesMediaWorkflowConfigurationResourceCrud) Create() error {
	request := oci_media_services.CreateMediaWorkflowConfigurationRequest{}
func (s *MediaServicesMediaWorkflowConfigurationResourceCrud) Get() error {
	request := oci_media_services.GetMediaWorkflowConfigurationRequest{}
func (s *MediaServicesMediaWorkflowConfigurationResourceCrud) Update() error {
	if compartment, ok := s.D.GetOkExists("compartment_id"); ok && s.D.HasChange("compartment_id") {
func (s *MediaServicesMediaWorkflowConfigurationResourceCrud) Delete() error {
	request := oci_media_services.DeleteMediaWorkflowConfigurationRequest{}
func (s *MediaServicesMediaWorkflowConfigurationResourceCrud) SetData() error {
	if s.Res.CompartmentId != nil {
func (s *MediaServicesMediaWorkflowConfigurationResourceCrud) mapToResourceLock(fieldKeyFormat string) (oci_media_services.ResourceLock, error) {
	result := oci_media_services.ResourceLock{}
func (s *MediaServicesMediaWorkflowConfigurationResourceCrud) updateCompartment(compartment interface{}) error {
	changeCompartmentRequest := oci_media_services.ChangeMediaWorkflowConfigurationCompartmentRequest{}

=== ./internal/service/announcements_service/announcements_service_announcement_subscriptions_actions_change_compartment_resource.go ===
func AnnouncementsServiceAnnouncementSubscriptionsActionsChangeCompartmentResource() *schema.Resource {
	return &schema.Resource{
func createAnnouncementsServiceAnnouncementSubscriptionsActionsChangeCompartment(d *schema.ResourceData, m interface{}) error {
	sync := &AnnouncementsServiceAnnouncementSubscriptionsActionsChangeCompartmentResourceCrud{}
func readAnnouncementsServiceAnnouncementSubscriptionsActionsChangeCompartment(d *schema.ResourceData, m interface{}) error {
	return nil
func deleteAnnouncementsServiceAnnouncementSubscriptionsActionsChangeCompartment(d *schema.ResourceData, m interface{}) error {
	return nil
func (s *AnnouncementsServiceAnnouncementSubscriptionsActionsChangeCompartmentResourceCrud) ID() string {
	return s.D.Get("announcement_subscription_id").(string)
func (s *AnnouncementsServiceAnnouncementSubscriptionsActionsChangeCompartmentResourceCrud) Create() error {
	request := oci_announcements_service.ChangeAnnouncementSubscriptionCompartmentRequest{}
func (s *AnnouncementsServiceAnnouncementSubscriptionsActionsChangeCompartmentResourceCrud) SetData() error {
	return nil

=== ./internal/service/announcements_service/announcements_service_announcement_subscriptions_data_source.go ===
func AnnouncementsServiceAnnouncementSubscriptionsDataSource() *schema.Resource {
	return &schema.Resource{
func readAnnouncementsServiceAnnouncementSubscriptions(d *schema.ResourceData, m interface{}) error {
	sync := &AnnouncementsServiceAnnouncementSubscriptionsDataSourceCrud{}
func (s *AnnouncementsServiceAnnouncementSubscriptionsDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *AnnouncementsServiceAnnouncementSubscriptionsDataSourceCrud) Get() error {
	request := oci_announcements_service.ListAnnouncementSubscriptionsRequest{}
func (s *AnnouncementsServiceAnnouncementSubscriptionsDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/announcements_service/announcements_service_announcement_subscription_data_source.go ===
func AnnouncementsServiceAnnouncementSubscriptionDataSource() *schema.Resource {
	fieldMap := make(map[string]*schema.Schema)
func readSingularAnnouncementsServiceAnnouncementSubscription(d *schema.ResourceData, m interface{}) error {
	sync := &AnnouncementsServiceAnnouncementSubscriptionDataSourceCrud{}
func (s *AnnouncementsServiceAnnouncementSubscriptionDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *AnnouncementsServiceAnnouncementSubscriptionDataSourceCrud) Get() error {
	request := oci_announcements_service.GetAnnouncementSubscriptionRequest{}
func (s *AnnouncementsServiceAnnouncementSubscriptionDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/announcements_service/announcements_service_announcement_subscription_resource.go ===
func AnnouncementsServiceAnnouncementSubscriptionResource() *schema.Resource {
	return &schema.Resource{
func createAnnouncementsServiceAnnouncementSubscription(d *schema.ResourceData, m interface{}) error {
	sync := &AnnouncementsServiceAnnouncementSubscriptionResourceCrud{}
func readAnnouncementsServiceAnnouncementSubscription(d *schema.ResourceData, m interface{}) error {
	sync := &AnnouncementsServiceAnnouncementSubscriptionResourceCrud{}
func updateAnnouncementsServiceAnnouncementSubscription(d *schema.ResourceData, m interface{}) error {
	sync := &AnnouncementsServiceAnnouncementSubscriptionResourceCrud{}
func deleteAnnouncementsServiceAnnouncementSubscription(d *schema.ResourceData, m interface{}) error {
	sync := &AnnouncementsServiceAnnouncementSubscriptionResourceCrud{}
func (s *AnnouncementsServiceAnnouncementSubscriptionResourceCrud) ID() string {
	return *s.Res.Id
func (s *AnnouncementsServiceAnnouncementSubscriptionResourceCrud) CreatedPending() []string {
	return []string{}
func (s *AnnouncementsServiceAnnouncementSubscriptionResourceCrud) CreatedTarget() []string {
	return []string{
func (s *AnnouncementsServiceAnnouncementSubscriptionResourceCrud) DeletedPending() []string {
	return []string{}
func (s *AnnouncementsServiceAnnouncementSubscriptionResourceCrud) DeletedTarget() []string {
	return []string{
func (s *AnnouncementsServiceAnnouncementSubscriptionResourceCrud) Create() error {
	request := oci_announcements_service.CreateAnnouncementSubscriptionRequest{}
func (s *AnnouncementsServiceAnnouncementSubscriptionResourceCrud) Get() error {
	request := oci_announcements_service.GetAnnouncementSubscriptionRequest{}
func (s *AnnouncementsServiceAnnouncementSubscriptionResourceCrud) Update() error {
	if compartment, ok := s.D.GetOkExists("compartment_id"); ok && s.D.HasChange("compartment_id") {
func (s *AnnouncementsServiceAnnouncementSubscriptionResourceCrud) Delete() error {
	request := oci_announcements_service.DeleteAnnouncementSubscriptionRequest{}
func (s *AnnouncementsServiceAnnouncementSubscriptionResourceCrud) SetData() error {
	if s.Res.CompartmentId != nil {
func (s *AnnouncementsServiceAnnouncementSubscriptionResourceCrud) mapToFilter(fieldKeyFormat string) (oci_announcements_service.Filter, error) {
	result := oci_announcements_service.Filter{}
func (s *AnnouncementsServiceAnnouncementSubscriptionResourceCrud) mapToFilterGroupDetails(fieldKeyFormat string) (oci_announcements_service.FilterGroupDetails, error) {
	result := oci_announcements_service.FilterGroupDetails{}
func (s *AnnouncementsServiceAnnouncementSubscriptionResourceCrud) updateCompartment(compartment interface{}) error {
	changeCompartmentRequest := oci_announcements_service.ChangeAnnouncementSubscriptionCompartmentRequest{}

=== ./internal/service/announcements_service/announcements_service_services_data_source.go ===
func AnnouncementsServiceServicesDataSource() *schema.Resource {
	return &schema.Resource{
func readAnnouncementsServiceServices(d *schema.ResourceData, m interface{}) error {
	sync := &AnnouncementsServiceServicesDataSourceCrud{}
func (s *AnnouncementsServiceServicesDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *AnnouncementsServiceServicesDataSourceCrud) Get() error {
	request := oci_announcements_service.ListServicesRequest{}
func (s *AnnouncementsServiceServicesDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/announcements_service/announcements_service_announcement_subscriptions_filter_group_resource.go ===
func AnnouncementsServiceAnnouncementSubscriptionsFilterGroupResource() *schema.Resource {
	return &schema.Resource{
func createAnnouncementsServiceAnnouncementSubscriptionsFilterGroup(d *schema.ResourceData, m interface{}) error {
	sync := &AnnouncementsServiceAnnouncementSubscriptionsFilterGroupResourceCrud{}
func readAnnouncementsServiceAnnouncementSubscriptionsFilterGroup(d *schema.ResourceData, m interface{}) error {
	return nil
func updateAnnouncementsServiceAnnouncementSubscriptionsFilterGroup(d *schema.ResourceData, m interface{}) error {
	sync := &AnnouncementsServiceAnnouncementSubscriptionsFilterGroupResourceCrud{}
func deleteAnnouncementsServiceAnnouncementSubscriptionsFilterGroup(d *schema.ResourceData, m interface{}) error {
	sync := &AnnouncementsServiceAnnouncementSubscriptionsFilterGroupResourceCrud{}
func (s *AnnouncementsServiceAnnouncementSubscriptionsFilterGroupResourceCrud) ID() string {
	return s.D.Get("announcement_subscription_id").(string)
func (s *AnnouncementsServiceAnnouncementSubscriptionsFilterGroupResourceCrud) Create() error {
	request := oci_announcements_service.CreateFilterGroupRequest{}
func (s *AnnouncementsServiceAnnouncementSubscriptionsFilterGroupResourceCrud) Update() error {
	request := oci_announcements_service.UpdateFilterGroupRequest{}
func (s *AnnouncementsServiceAnnouncementSubscriptionsFilterGroupResourceCrud) Delete() error {
	request := oci_announcements_service.DeleteFilterGroupRequest{}
func (s *AnnouncementsServiceAnnouncementSubscriptionsFilterGroupResourceCrud) SetData() error {
	filters := []interface{}{}
func (s *AnnouncementsServiceAnnouncementSubscriptionsFilterGroupResourceCrud) mapToFilter(fieldKeyFormat string) (oci_announcements_service.Filter, error) {
	result := oci_announcements_service.Filter{}

=== ./internal/service/announcements_service/register_resource.go ===
func RegisterResource() {
	tfresource.RegisterResource("oci_announcements_service_announcement_subscription", AnnouncementsServiceAnnouncementSubscriptionResource())

=== ./internal/service/optimizer/optimizer_resource_actions_data_source.go ===
func OptimizerResourceActionsDataSource() *schema.Resource {
	return &schema.Resource{
func readOptimizerResourceActions(d *schema.ResourceData, m interface{}) error {
	sync := &OptimizerResourceActionsDataSourceCrud{}
func (s *OptimizerResourceActionsDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *OptimizerResourceActionsDataSourceCrud) Get() error {
	request := oci_optimizer.ListResourceActionsRequest{}
func (s *OptimizerResourceActionsDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/optimizer/optimizer_resource_action_resource.go ===
func OptimizerResourceActionResource() *schema.Resource {
	return &schema.Resource{
func createOptimizerResourceAction(d *schema.ResourceData, m interface{}) error {
	sync := &OptimizerResourceActionResourceCrud{}
func readOptimizerResourceAction(d *schema.ResourceData, m interface{}) error {
	sync := &OptimizerResourceActionResourceCrud{}
func updateOptimizerResourceAction(d *schema.ResourceData, m interface{}) error {
	sync := &OptimizerResourceActionResourceCrud{}
func deleteOptimizerResourceAction(d *schema.ResourceData, m interface{}) error {
	return nil
func (s *OptimizerResourceActionResourceCrud) ID() string {
	return *s.Res.Id
func (s *OptimizerResourceActionResourceCrud) CreatedPending() []string {
	return []string{
func (s *OptimizerResourceActionResourceCrud) CreatedTarget() []string {
	return []string{
func (s *OptimizerResourceActionResourceCrud) DeletedPending() []string {
	return []string{
func (s *OptimizerResourceActionResourceCrud) DeletedTarget() []string {
	return []string{
func (s *OptimizerResourceActionResourceCrud) Create() error {
	request := oci_optimizer.UpdateResourceActionRequest{}
func (s *OptimizerResourceActionResourceCrud) Get() error {
	request := oci_optimizer.GetResourceActionRequest{}
func (s *OptimizerResourceActionResourceCrud) Update() error {
	request := oci_optimizer.UpdateResourceActionRequest{}
func (s *OptimizerResourceActionResourceCrud) SetData() error {
	if s.Res.Id != nil {
func ResourceActionSummaryToMap(obj oci_optimizer.ResourceActionSummary) map[string]interface{} {
	result := map[string]interface{}{}

=== ./internal/service/optimizer/optimizer_histories_data_source.go ===
func OptimizerHistoriesDataSource() *schema.Resource {
	return &schema.Resource{
func readOptimizerHistories(d *schema.ResourceData, m interface{}) error {
	sync := &OptimizerHistoriesDataSourceCrud{}
func (s *OptimizerHistoriesDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *OptimizerHistoriesDataSourceCrud) Get() error {
	request := oci_optimizer.ListHistoriesRequest{}
func (s *OptimizerHistoriesDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/optimizer/optimizer_categories_data_source.go ===
func OptimizerCategoriesDataSource() *schema.Resource {
	return &schema.Resource{
func readOptimizerCategories(d *schema.ResourceData, m interface{}) error {
	sync := &OptimizerCategoriesDataSourceCrud{}
func (s *OptimizerCategoriesDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *OptimizerCategoriesDataSourceCrud) Get() error {
	request := oci_optimizer.ListCategoriesRequest{}
func (s *OptimizerCategoriesDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/optimizer/optimizer_profile_level_data_source.go ===
func OptimizerProfileLevelDataSource() *schema.Resource {
	return &schema.Resource{
func readSingularOptimizerProfileLevel(d *schema.ResourceData, m interface{}) error {
	sync := &OptimizerProfileLevelDataSourceCrud{}
func (s *OptimizerProfileLevelDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *OptimizerProfileLevelDataSourceCrud) Get() error {
	request := oci_optimizer.ListProfileLevelsRequest{}
func (s *OptimizerProfileLevelDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/optimizer/optimizer_recommendation_strategy_data_source.go ===
func OptimizerRecommendationStrategyDataSource() *schema.Resource {
	return &schema.Resource{
func readSingularOptimizerRecommendationStrategy(d *schema.ResourceData, m interface{}) error {
	sync := &OptimizerRecommendationStrategyDataSourceCrud{}
func (s *OptimizerRecommendationStrategyDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *OptimizerRecommendationStrategyDataSourceCrud) Get() error {
	request := oci_optimizer.ListRecommendationStrategiesRequest{}
func (s *OptimizerRecommendationStrategyDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/optimizer/optimizer_profile_data_source.go ===
func OptimizerProfileDataSource() *schema.Resource {
	fieldMap := make(map[string]*schema.Schema)
func readSingularOptimizerProfile(d *schema.ResourceData, m interface{}) error {
	sync := &OptimizerProfileDataSourceCrud{}
func (s *OptimizerProfileDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *OptimizerProfileDataSourceCrud) Get() error {
	request := oci_optimizer.GetProfileRequest{}
func (s *OptimizerProfileDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/optimizer/optimizer_profiles_data_source.go ===
func OptimizerProfilesDataSource() *schema.Resource {
	return &schema.Resource{
func readOptimizerProfiles(d *schema.ResourceData, m interface{}) error {
	sync := &OptimizerProfilesDataSourceCrud{}
func (s *OptimizerProfilesDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *OptimizerProfilesDataSourceCrud) Get() error {
	request := oci_optimizer.ListProfilesRequest{}
func (s *OptimizerProfilesDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/optimizer/optimizer_profile_levels_data_source.go ===
func OptimizerProfileLevelsDataSource() *schema.Resource {
	return &schema.Resource{
func readOptimizerProfileLevels(d *schema.ResourceData, m interface{}) error {
	sync := &OptimizerProfileLevelsDataSourceCrud{}
func (s *OptimizerProfileLevelsDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *OptimizerProfileLevelsDataSourceCrud) Get() error {
	request := oci_optimizer.ListProfileLevelsRequest{}
func (s *OptimizerProfileLevelsDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/optimizer/optimizer_resource_action_data_source.go ===
func OptimizerResourceActionDataSource() *schema.Resource {
	fieldMap := make(map[string]*schema.Schema)
func readSingularOptimizerResourceAction(d *schema.ResourceData, m interface{}) error {
	sync := &OptimizerResourceActionDataSourceCrud{}
func (s *OptimizerResourceActionDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *OptimizerResourceActionDataSourceCrud) Get() error {
	request := oci_optimizer.GetResourceActionRequest{}
func (s *OptimizerResourceActionDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/optimizer/optimizer_profile_resource.go ===
func OptimizerProfileResource() *schema.Resource {
	return &schema.Resource{
func createOptimizerProfile(d *schema.ResourceData, m interface{}) error {
	sync := &OptimizerProfileResourceCrud{}
func readOptimizerProfile(d *schema.ResourceData, m interface{}) error {
	sync := &OptimizerProfileResourceCrud{}
func updateOptimizerProfile(d *schema.ResourceData, m interface{}) error {
	sync := &OptimizerProfileResourceCrud{}
func deleteOptimizerProfile(d *schema.ResourceData, m interface{}) error {
	sync := &OptimizerProfileResourceCrud{}
func (s *OptimizerProfileResourceCrud) ID() string {
	return *s.Res.Id
func (s *OptimizerProfileResourceCrud) CreatedPending() []string {
	return []string{
func (s *OptimizerProfileResourceCrud) CreatedTarget() []string {
	return []string{
func (s *OptimizerProfileResourceCrud) DeletedPending() []string {
	return []string{
func (s *OptimizerProfileResourceCrud) DeletedTarget() []string {
	return []string{
func (s *OptimizerProfileResourceCrud) Create() error {
	request := oci_optimizer.CreateProfileRequest{}
func (s *OptimizerProfileResourceCrud) Get() error {
	request := oci_optimizer.GetProfileRequest{}
func (s *OptimizerProfileResourceCrud) Update() error {
	request := oci_optimizer.UpdateProfileRequest{}
func (s *OptimizerProfileResourceCrud) Delete() error {
	request := oci_optimizer.DeleteProfileRequest{}
func (s *OptimizerProfileResourceCrud) SetData() error {
	if s.Res.AggregationIntervalInDays != nil {
func (s *OptimizerProfileResourceCrud) mapToLevelConfiguration(fieldKeyFormat string) (oci_optimizer.LevelConfiguration, error) {
	result := oci_optimizer.LevelConfiguration{}
func (s *OptimizerProfileResourceCrud) mapToLevelsConfiguration(fieldKeyFormat string) (oci_optimizer.LevelsConfiguration, error) {
	result := oci_optimizer.LevelsConfiguration{}
func (s *OptimizerProfileResourceCrud) mapToTargetCompartments(fieldKeyFormat string) (oci_optimizer.TargetCompartments, error) {
	result := oci_optimizer.TargetCompartments{}
func (s *OptimizerProfileResourceCrud) mapToTargetTag(fieldKeyFormat string) (oci_optimizer.TargetTag, error) {
	result := oci_optimizer.TargetTag{}
func (s *OptimizerProfileResourceCrud) mapToTargetTags(fieldKeyFormat string) (oci_optimizer.TargetTags, error) {
	result := oci_optimizer.TargetTags{}

=== ./internal/service/optimizer/optimizer_recommendation_data_source.go ===
func OptimizerRecommendationDataSource() *schema.Resource {
	fieldMap := make(map[string]*schema.Schema)
func readSingularOptimizerRecommendation(d *schema.ResourceData, m interface{}) error {
	sync := &OptimizerRecommendationDataSourceCrud{}
func (s *OptimizerRecommendationDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *OptimizerRecommendationDataSourceCrud) Get() error {
	request := oci_optimizer.GetRecommendationRequest{}
func (s *OptimizerRecommendationDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/optimizer/optimizer_enrollment_status_data_source.go ===
func OptimizerEnrollmentStatusDataSource() *schema.Resource {
	fieldMap := make(map[string]*schema.Schema)
func readSingularOptimizerEnrollmentStatus(d *schema.ResourceData, m interface{}) error {
	sync := &OptimizerEnrollmentStatusDataSourceCrud{}
func (s *OptimizerEnrollmentStatusDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *OptimizerEnrollmentStatusDataSourceCrud) Get() error {
	request := oci_optimizer.GetEnrollmentStatusRequest{}
func (s *OptimizerEnrollmentStatusDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/optimizer/optimizer_recommendation_strategies_data_source.go ===
func OptimizerRecommendationStrategiesDataSource() *schema.Resource {
	return &schema.Resource{
func readOptimizerRecommendationStrategies(d *schema.ResourceData, m interface{}) error {
	sync := &OptimizerRecommendationStrategiesDataSourceCrud{}
func (s *OptimizerRecommendationStrategiesDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *OptimizerRecommendationStrategiesDataSourceCrud) Get() error {
	request := oci_optimizer.ListRecommendationStrategiesRequest{}
func (s *OptimizerRecommendationStrategiesDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/optimizer/optimizer_recommendations_data_source.go ===
func OptimizerRecommendationsDataSource() *schema.Resource {
	return &schema.Resource{
func readOptimizerRecommendations(d *schema.ResourceData, m interface{}) error {
	sync := &OptimizerRecommendationsDataSourceCrud{}
func (s *OptimizerRecommendationsDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *OptimizerRecommendationsDataSourceCrud) Get() error {
	request := oci_optimizer.ListRecommendationsRequest{}
func (s *OptimizerRecommendationsDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/optimizer/optimizer_enrollment_statuses_data_source.go ===
func OptimizerEnrollmentStatusesDataSource() *schema.Resource {
	return &schema.Resource{
func readOptimizerEnrollmentStatuses(d *schema.ResourceData, m interface{}) error {
	sync := &OptimizerEnrollmentStatusesDataSourceCrud{}
func (s *OptimizerEnrollmentStatusesDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *OptimizerEnrollmentStatusesDataSourceCrud) Get() error {
	request := oci_optimizer.ListEnrollmentStatusesRequest{}
func (s *OptimizerEnrollmentStatusesDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/optimizer/optimizer_enrollment_status_resource.go ===
func OptimizerEnrollmentStatusResource() *schema.Resource {
	return &schema.Resource{
func createOptimizerEnrollmentStatus(d *schema.ResourceData, m interface{}) error {
	sync := &OptimizerEnrollmentStatusResourceCrud{}
func readOptimizerEnrollmentStatus(d *schema.ResourceData, m interface{}) error {
	sync := &OptimizerEnrollmentStatusResourceCrud{}
func updateOptimizerEnrollmentStatus(d *schema.ResourceData, m interface{}) error {
	sync := &OptimizerEnrollmentStatusResourceCrud{}
func deleteOptimizerEnrollmentStatus(d *schema.ResourceData, m interface{}) error {
	return nil
func (s *OptimizerEnrollmentStatusResourceCrud) ID() string {
	return *s.Res.Id
func (s *OptimizerEnrollmentStatusResourceCrud) CreatedPending() []string {
	return []string{
func (s *OptimizerEnrollmentStatusResourceCrud) CreatedTarget() []string {
	return []string{
func (s *OptimizerEnrollmentStatusResourceCrud) DeletedPending() []string {
	return []string{
func (s *OptimizerEnrollmentStatusResourceCrud) DeletedTarget() []string {
	return []string{
func (s *OptimizerEnrollmentStatusResourceCrud) Create() error {
	request := oci_optimizer.UpdateEnrollmentStatusRequest{}
func (s *OptimizerEnrollmentStatusResourceCrud) Get() error {
	request := oci_optimizer.GetEnrollmentStatusRequest{}
func (s *OptimizerEnrollmentStatusResourceCrud) Update() error {
	request := oci_optimizer.UpdateEnrollmentStatusRequest{}
func (s *OptimizerEnrollmentStatusResourceCrud) SetData() error {
	if s.Res.CompartmentId != nil {

=== ./internal/service/optimizer/register_resource.go ===
func RegisterResource() {
	tfresource.RegisterResource("oci_optimizer_enrollment_status", OptimizerEnrollmentStatusResource())

=== ./internal/service/optimizer/optimizer_recommendation_resource.go ===
func OptimizerRecommendationResource() *schema.Resource {
	return &schema.Resource{
func createOptimizerRecommendation(d *schema.ResourceData, m interface{}) error {
	sync := &OptimizerRecommendationResourceCrud{}
func readOptimizerRecommendation(d *schema.ResourceData, m interface{}) error {
	sync := &OptimizerRecommendationResourceCrud{}
func updateOptimizerRecommendation(d *schema.ResourceData, m interface{}) error {
	sync := &OptimizerRecommendationResourceCrud{}
func deleteOptimizerRecommendation(d *schema.ResourceData, m interface{}) error {
	return nil
func (s *OptimizerRecommendationResourceCrud) ID() string {
	return *s.Res.Id
func (s *OptimizerRecommendationResourceCrud) CreatedPending() []string {
	return []string{
func (s *OptimizerRecommendationResourceCrud) CreatedTarget() []string {
	return []string{
func (s *OptimizerRecommendationResourceCrud) DeletedPending() []string {
	return []string{
func (s *OptimizerRecommendationResourceCrud) DeletedTarget() []string {
	return []string{
func (s *OptimizerRecommendationResourceCrud) Create() error {
	request := oci_optimizer.UpdateRecommendationRequest{}
func (s *OptimizerRecommendationResourceCrud) Get() error {
	request := oci_optimizer.GetRecommendationRequest{}
func (s *OptimizerRecommendationResourceCrud) Update() error {
	request := oci_optimizer.UpdateRecommendationRequest{}
func (s *OptimizerRecommendationResourceCrud) SetData() error {
	if s.Res.Id != nil {

=== ./internal/service/optimizer/optimizer_category_data_source.go ===
func OptimizerCategoryDataSource() *schema.Resource {
	return &schema.Resource{
func readSingularOptimizerCategory(d *schema.ResourceData, m interface{}) error {
	sync := &OptimizerCategoryDataSourceCrud{}
func (s *OptimizerCategoryDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *OptimizerCategoryDataSourceCrud) Get() error {
	request := oci_optimizer.GetCategoryRequest{}
func (s *OptimizerCategoryDataSourceCrud) SetData() error {
	if s.Res == nil {
func ResourceCountToMap(obj oci_optimizer.ResourceCount) map[string]interface{} {
	result := map[string]interface{}{}

=== ./internal/service/ocvp/ocvp_esxi_host_resource.go ===
func OcvpEsxiHostResource() *schema.Resource {
	return &schema.Resource{
func suppressEsxiHostDeprecatedFieldRemoval(k, old string, new string, d *schema.ResourceData) bool {
	// suppress diff when resource is using new fields and old fields are removed
func createOcvpEsxiHost(d *schema.ResourceData, m interface{}) error {
	sync := &OcvpEsxiHostResourceCrud{}
func readOcvpEsxiHost(d *schema.ResourceData, m interface{}) error {
	sync := &OcvpEsxiHostResourceCrud{}
func updateOcvpEsxiHost(d *schema.ResourceData, m interface{}) error {
	sync := &OcvpEsxiHostResourceCrud{}
func deleteOcvpEsxiHost(d *schema.ResourceData, m interface{}) error {
	sync := &OcvpEsxiHostResourceCrud{}
func (s *OcvpEsxiHostResourceCrud) ID() string {
	return *s.Res.Id
func (s *OcvpEsxiHostResourceCrud) CreatedPending() []string {
	return []string{
func (s *OcvpEsxiHostResourceCrud) CreatedTarget() []string {
	return []string{
func (s *OcvpEsxiHostResourceCrud) DeletedPending() []string {
	return []string{
func (s *OcvpEsxiHostResourceCrud) DeletedTarget() []string {
	return []string{
func (s *OcvpEsxiHostResourceCrud) Create() error {
	request := oci_ocvp.CreateEsxiHostRequest{}
func (s *OcvpEsxiHostResourceCrud) setEsxiHostIdFromWorkRequest(workId *string) {
	workRequestResponse := oci_ocvp.GetWorkRequestResponse{}
func (s *OcvpEsxiHostResourceCrud) getEsxiHostFromWorkRequest(workId *string, retryPolicy *oci_common.RetryPolicy,
	actionTypeEnum oci_ocvp.ActionTypesEnum, timeout time.Duration) error {
func (s *OcvpEsxiHostResourceCrud) Get() error {
	request := oci_ocvp.GetEsxiHostRequest{}
func (s *OcvpEsxiHostResourceCrud) Update() error {
	request := oci_ocvp.UpdateEsxiHostRequest{}
func (s *OcvpEsxiHostResourceCrud) Delete() error {
	request := oci_ocvp.DeleteEsxiHostRequest{}
func (s *OcvpEsxiHostResourceCrud) SetData() error {
	_, clusterIdExists := s.D.GetOkExists("cluster_id")
func (s *OcvpEsxiHostResourceCrud) InplaceUpgrade(nonUpgradeEsxiHostId string) error {
	getNonUpgradeEsxiHostRequest := oci_ocvp.GetEsxiHostRequest{}
func (s *OcvpEsxiHostResourceCrud) ReplaceHost(failedEsxiHostId string) error {
	getFailedEsxiHostRequest := oci_ocvp.GetEsxiHostRequest{}
func validateReplacementHostDetails(oldHost oci_ocvp.EsxiHost, s *OcvpEsxiHostResourceCrud, isUpgrade bool) error {
	var oldHostName string

=== ./internal/service/ocvp/ocvp_esxi_hosts_data_source.go ===
func OcvpEsxiHostsDataSource() *schema.Resource {
	return &schema.Resource{
func readOcvpEsxiHosts(d *schema.ResourceData, m interface{}) error {
	sync := &OcvpEsxiHostsDataSourceCrud{}
func (s *OcvpEsxiHostsDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *OcvpEsxiHostsDataSourceCrud) Get() error {
	request := oci_ocvp.ListEsxiHostsRequest{}
func (s *OcvpEsxiHostsDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/ocvp/ocvp_clusters_data_source.go ===
func OcvpClustersDataSource() *schema.Resource {
	return &schema.Resource{
func readOcvpClusters(d *schema.ResourceData, m interface{}) error {
	sync := &OcvpClustersDataSourceCrud{}
func (s *OcvpClustersDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *OcvpClustersDataSourceCrud) Get() error {
	request := oci_ocvp.ListClustersRequest{}
func (s *OcvpClustersDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/ocvp/ocvp_retrieve_password_data_source.go ===
func OcvpRetrievePasswordDataSource() *schema.Resource {
	return &schema.Resource{
func readOcvpRetrievePassword(d *schema.ResourceData, m interface{}) error {
	sync := &OcvpRetrievePasswordDataSourceCrud{}
func (s *OcvpRetrievePasswordDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *OcvpRetrievePasswordDataSourceCrud) Get() error {
	request := oci_ocvp.RetrievePasswordRequest{}
func (s *OcvpRetrievePasswordDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/ocvp/ocvp_sddcs_data_source.go ===
func OcvpSddcsDataSource() *schema.Resource {
	return &schema.Resource{
func readOcvpSddcs(d *schema.ResourceData, m interface{}) error {
	sync := &OcvpSddcsDataSourceCrud{}
func (s *OcvpSddcsDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *OcvpSddcsDataSourceCrud) Get() error {
	request := oci_ocvp.ListSddcsRequest{}
func (s *OcvpSddcsDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/ocvp/ocvp_cluster_data_source.go ===
func OcvpClusterDataSource() *schema.Resource {
	fieldMap := make(map[string]*schema.Schema)
func readSingularOcvpCluster(d *schema.ResourceData, m interface{}) error {
	sync := &OcvpClusterDataSourceCrud{}
func (s *OcvpClusterDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *OcvpClusterDataSourceCrud) Get() error {
	request := oci_ocvp.GetClusterRequest{}
func (s *OcvpClusterDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/ocvp/ocvp_supported_commitments_data_source.go ===
func OcvpSupportedCommitmentsDataSource() *schema.Resource {
	return &schema.Resource{
func readOcvpSupportedCommitments(d *schema.ResourceData, m interface{}) error {
	sync := &OcvpSupportedCommitmentsDataSourceCrud{}
func (s *OcvpSupportedCommitmentsDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *OcvpSupportedCommitmentsDataSourceCrud) Get() error {
	request := oci_ocvp.ListSupportedCommitmentsRequest{}
func (s *OcvpSupportedCommitmentsDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/ocvp/ocvp_supported_vmware_software_versions_data_source.go ===
func OcvpSupportedVmwareSoftwareVersionsDataSource() *schema.Resource {
	return &schema.Resource{
func readOcvpSupportedVmwareSoftwareVersions(d *schema.ResourceData, m interface{}) error {
	sync := &OcvpSupportedVmwareSoftwareVersionsDataSourceCrud{}
func (s *OcvpSupportedVmwareSoftwareVersionsDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *OcvpSupportedVmwareSoftwareVersionsDataSourceCrud) Get() error {
	request := oci_ocvp.ListSupportedVmwareSoftwareVersionsRequest{}
func (s *OcvpSupportedVmwareSoftwareVersionsDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/ocvp/ocvp_supported_host_shapes_data_source.go ===
func OcvpSupportedHostShapesDataSource() *schema.Resource {
	return &schema.Resource{
func readOcvpSupportedHostShapes(d *schema.ResourceData, m interface{}) error {
	sync := &OcvpSupportedHostShapesDataSourceCrud{}
func (s *OcvpSupportedHostShapesDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *OcvpSupportedHostShapesDataSourceCrud) Get() error {
	request := oci_ocvp.ListSupportedHostShapesRequest{}
func (s *OcvpSupportedHostShapesDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/ocvp/ocvp_cluster_resource.go ===
func OcvpClusterResource() *schema.Resource {
	return &schema.Resource{
func createOcvpCluster(d *schema.ResourceData, m interface{}) error {
	sync := &OcvpClusterResourceCrud{}
func readOcvpCluster(d *schema.ResourceData, m interface{}) error {
	sync := &OcvpClusterResourceCrud{}
func updateOcvpCluster(d *schema.ResourceData, m interface{}) error {
	sync := &OcvpClusterResourceCrud{}
func deleteOcvpCluster(d *schema.ResourceData, m interface{}) error {
	sync := &OcvpClusterResourceCrud{}
func (s *OcvpClusterResourceCrud) ID() string {
	return *s.Res.Id
func (s *OcvpClusterResourceCrud) CreatedPending() []string {
	return []string{
func (s *OcvpClusterResourceCrud) CreatedTarget() []string {
	return []string{
func (s *OcvpClusterResourceCrud) DeletedPending() []string {
	return []string{
func (s *OcvpClusterResourceCrud) DeletedTarget() []string {
	return []string{
func (s *OcvpClusterResourceCrud) Create() error {
	request := oci_ocvp.CreateClusterRequest{}
func (s *OcvpClusterResourceCrud) getClusterFromWorkRequest(workId *string, retryPolicy *oci_common.RetryPolicy,
	actionTypeEnum oci_ocvp.ActionTypesEnum, timeout time.Duration) error {
func (s *OcvpClusterResourceCrud) Get() error {
	request := oci_ocvp.GetClusterRequest{}
func (s *OcvpClusterResourceCrud) Update() error {
	request := oci_ocvp.UpdateClusterRequest{}
func (s *OcvpClusterResourceCrud) Delete() error {
	request := oci_ocvp.DeleteClusterRequest{}
func (s *OcvpClusterResourceCrud) SetData() error {
	if s.Res.CapacityReservationId != nil {
func (s *OcvpClusterResourceCrud) mapToDatastoreInfo(fieldKeyFormat string) (oci_ocvp.DatastoreInfo, error) {
	result := oci_ocvp.DatastoreInfo{}
func (s *OcvpClusterResourceCrud) mapToNetworkConfiguration(fieldKeyFormat string) (oci_ocvp.NetworkConfiguration, error) {
	result := oci_ocvp.NetworkConfiguration{}

=== ./internal/service/ocvp/ocvp_sddc_resource.go ===
func OcvpSddcResource() *schema.Resource {
	return &schema.Resource{
func createOcvpSddc(d *schema.ResourceData, m interface{}) error {
	sync := &OcvpSddcResourceCrud{}
func readOcvpSddc(d *schema.ResourceData, m interface{}) error {
	sync := &OcvpSddcResourceCrud{}
func updateOcvpSddc(d *schema.ResourceData, m interface{}) error {
	sync := &OcvpSddcResourceCrud{}
func deleteOcvpSddc(d *schema.ResourceData, m interface{}) error {
	sync := &OcvpSddcResourceCrud{}
func (s *OcvpSddcResourceCrud) ID() string {
	return *s.Res.Id
func (s *OcvpSddcResourceCrud) CreatedPending() []string {
	return []string{
func (s *OcvpSddcResourceCrud) CreatedTarget() []string {
	return []string{
func (s *OcvpSddcResourceCrud) DeletedPending() []string {
	return []string{
func (s *OcvpSddcResourceCrud) DeletedTarget() []string {
	return []string{
func (s *OcvpSddcResourceCrud) getOkExistsClusterConfigurationProperty(property string) (interface{}, bool) {
	if initialConfiguration, ok := s.D.GetOkExists("initial_configuration"); ok {
func (s *OcvpSddcResourceCrud) getOkExistsNetworkConfigurationProperty(property string) (interface{}, bool) {
	if _, ok := s.getOkExistsClusterConfigurationProperty("network_configuration"); ok {
func (s *OcvpSddcResourceCrud) Create() error {
	request := oci_ocvp.CreateSddcRequest{}
func (s *OcvpSddcResourceCrud) getSddcFromWorkRequest(workId *string, retryPolicy *oci_common.RetryPolicy,
	actionTypeEnum oci_ocvp.ActionTypesEnum, timeout time.Duration) error {
func (s *OcvpSddcResourceCrud) Get() error {
	request := oci_ocvp.GetSddcRequest{}
func (s *OcvpSddcResourceCrud) Update() error {
	if compartment, ok := s.D.GetOkExists("compartment_id"); ok && s.D.HasChange("compartment_id") {
func (s *OcvpSddcResourceCrud) refreshHcxLicenseStatus(sddcId *string, refresh interface{}) error {
	hcxRequest := oci_ocvp.RefreshHcxLicenseStatusRequest{}
func (s *OcvpSddcResourceCrud) Delete() error {
	request := oci_ocvp.DeleteSddcRequest{}
func (s *OcvpSddcResourceCrud) SetData() error {

func (s *OcvpSddcResourceCrud) SetDataClusterValues(sddcId *string, compartmentId *string, clusterClient *oci_ocvp.ClusterClient) error {
	clusterSummary, err := GetManagementClusterSummary(sddcId, compartmentId, clusterClient)
func (s *OcvpSddcResourceCrud) mapToDatastoreInfo(fieldKeyFormat string) (oci_ocvp.DatastoreInfo, error) {
	result := oci_ocvp.DatastoreInfo{}
func (s *OcvpSddcResourceCrud) updateCompartment(compartment interface{}) error {
	changeCompartmentRequest := oci_ocvp.ChangeSddcCompartmentRequest{}

=== ./internal/service/ocvp/ocvp_esxi_host_data_source.go ===
func OcvpEsxiHostDataSource() *schema.Resource {
	fieldMap := make(map[string]*schema.Schema)
func readSingularOcvpEsxiHost(d *schema.ResourceData, m interface{}) error {
	sync := &OcvpEsxiHostDataSourceCrud{}
func (s *OcvpEsxiHostDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *OcvpEsxiHostDataSourceCrud) Get() error {
	request := oci_ocvp.GetEsxiHostRequest{}
func (s *OcvpEsxiHostDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/ocvp/ocvp_sddc_data_source.go ===
func OcvpSddcDataSource() *schema.Resource {
	fieldMap := make(map[string]*schema.Schema)
func readSingularOcvpSddc(d *schema.ResourceData, m interface{}) error {
	sync := &OcvpSddcDataSourceCrud{}
func (s *OcvpSddcDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *OcvpSddcDataSourceCrud) Get() error {
	request := oci_ocvp.GetSddcRequest{}
func (s *OcvpSddcDataSourceCrud) SetData() error {
	if s.Res == nil {
func (s *OcvpSddcDataSourceCrud) SetDataClusterValues(sddcId *string, compartmentId *string, clusterClient *oci_ocvp.ClusterClient) error {
	clusterSummary, err := GetManagementClusterSummary(sddcId, compartmentId, clusterClient)

=== ./internal/service/ocvp/ocvp_supported_skus_data_source.go ===
func OcvpSupportedSkusDataSource() *schema.Resource {
	return &schema.Resource{
func readOcvpSupportedSkus(d *schema.ResourceData, m interface{}) error {
	sync := &OcvpSupportedSkusDataSourceCrud{}
func (s *OcvpSupportedSkusDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *OcvpSupportedSkusDataSourceCrud) Get() error {
	request := oci_ocvp.ListSupportedCommitmentsRequest{}
func (s *OcvpSupportedSkusDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/ocvp/register_resource.go ===
func RegisterResource() {
	tfresource.RegisterResource("oci_ocvp_cluster", OcvpClusterResource())

=== ./internal/service/ai_document/ai_document_project_data_source.go ===
func AiDocumentProjectDataSource() *schema.Resource {
	fieldMap := make(map[string]*schema.Schema)
func readSingularAiDocumentProject(d *schema.ResourceData, m interface{}) error {
	sync := &AiDocumentProjectDataSourceCrud{}
func (s *AiDocumentProjectDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *AiDocumentProjectDataSourceCrud) Get() error {
	request := oci_ai_document.GetProjectRequest{}
func (s *AiDocumentProjectDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/ai_document/ai_document_projects_data_source.go ===
func AiDocumentProjectsDataSource() *schema.Resource {
	return &schema.Resource{
func readAiDocumentProjects(d *schema.ResourceData, m interface{}) error {
	sync := &AiDocumentProjectsDataSourceCrud{}
func (s *AiDocumentProjectsDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *AiDocumentProjectsDataSourceCrud) Get() error {
	request := oci_ai_document.ListProjectsRequest{}
func (s *AiDocumentProjectsDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/ai_document/ai_document_models_data_source.go ===
func AiDocumentModelsDataSource() *schema.Resource {
	return &schema.Resource{
func readAiDocumentModels(d *schema.ResourceData, m interface{}) error {
	sync := &AiDocumentModelsDataSourceCrud{}
func (s *AiDocumentModelsDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *AiDocumentModelsDataSourceCrud) Get() error {
	request := oci_ai_document.ListModelsRequest{}
func (s *AiDocumentModelsDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/ai_document/ai_document_model_resource.go ===
func AiDocumentModelResource() *schema.Resource {
	var (
func createAiDocumentModel(d *schema.ResourceData, m interface{}) error {
	sync := &AiDocumentModelResourceCrud{}
func readAiDocumentModel(d *schema.ResourceData, m interface{}) error {
	sync := &AiDocumentModelResourceCrud{}
func updateAiDocumentModel(d *schema.ResourceData, m interface{}) error {
	sync := &AiDocumentModelResourceCrud{}
func deleteAiDocumentModel(d *schema.ResourceData, m interface{}) error {
	sync := &AiDocumentModelResourceCrud{}
func (s *AiDocumentModelResourceCrud) ID() string {
	return *s.Res.Id
func (s *AiDocumentModelResourceCrud) CreatedPending() []string {
	return []string{
func (s *AiDocumentModelResourceCrud) CreatedTarget() []string {
	return []string{
func (s *AiDocumentModelResourceCrud) DeletedPending() []string {
	return []string{
func (s *AiDocumentModelResourceCrud) DeletedTarget() []string {
	return []string{
func (s *AiDocumentModelResourceCrud) Create() error {
	request := oci_ai_document.CreateModelRequest{}
func (s *AiDocumentModelResourceCrud) getModelFromWorkRequest(workId *string, retryPolicy *oci_common.RetryPolicy,
	actionTypeEnum oci_ai_document.ActionTypeEnum, timeout time.Duration) error {
func (s *AiDocumentModelResourceCrud) Get() error {
	request := oci_ai_document.GetModelRequest{}
func (s *AiDocumentModelResourceCrud) Update() error {
	if compartment, ok := s.D.GetOkExists("compartment_id"); ok && s.D.HasChange("compartment_id") {
func (s *AiDocumentModelResourceCrud) Delete() error {
	request := oci_ai_document.DeleteModelRequest{}
func (s *AiDocumentModelResourceCrud) SetData() error {

func (s *AiDocumentModelResourceCrud) mapToComponentModel(fieldKeyFormat string) (oci_ai_document.ComponentModel, error) {
	var componentModel oci_ai_document.ComponentModel
func (s *AiDocumentModelResourceCrud) mapToDataset(fieldKeyFormat string) (oci_ai_document.Dataset, error) {
	var baseObject oci_ai_document.Dataset
func (s *AiDocumentModelResourceCrud) mapToDocumentClassificationConfidenceEntry(fieldKeyFormat string) (oci_ai_document.DocumentClassificationConfidenceEntry, error) {
	result := oci_ai_document.DocumentClassificationConfidenceEntry{}
func (s *AiDocumentModelResourceCrud) mapToDocumentClassificationLabelMetricsReport(fieldKeyFormat string) (oci_ai_document.DocumentClassificationLabelMetricsReport, error) {
	result := oci_ai_document.DocumentClassificationLabelMetricsReport{}
func (s *AiDocumentModelResourceCrud) mapToDocumentClassificationOverallMetricsReport(fieldKeyFormat string) (oci_ai_document.DocumentClassificationOverallMetricsReport, error) {
	result := oci_ai_document.DocumentClassificationOverallMetricsReport{}
func (s *AiDocumentModelResourceCrud) mapToKeyValueDetectionConfidenceEntry(fieldKeyFormat string) (oci_ai_document.KeyValueDetectionConfidenceEntry, error) {
	result := oci_ai_document.KeyValueDetectionConfidenceEntry{}
func (s *AiDocumentModelResourceCrud) mapToKeyValueDetectionLabelMetricsReport(fieldKeyFormat string) (oci_ai_document.KeyValueDetectionLabelMetricsReport, error) {
	result := oci_ai_document.KeyValueDetectionLabelMetricsReport{}
func (s *AiDocumentModelResourceCrud) mapToKeyValueDetectionOverallMetricsReport(fieldKeyFormat string) (oci_ai_document.KeyValueDetectionOverallMetricsReport, error) {
	result := oci_ai_document.KeyValueDetectionOverallMetricsReport{}
func (s *AiDocumentModelResourceCrud) updateCompartment(compartment interface{}) error {
	changeCompartmentRequest := oci_ai_document.ChangeModelCompartmentRequest{}

=== ./internal/service/ai_document/ai_document_model_data_source.go ===
func AiDocumentModelDataSource() *schema.Resource {
	fieldMap := make(map[string]*schema.Schema)
func readSingularAiDocumentModel(d *schema.ResourceData, m interface{}) error {
	sync := &AiDocumentModelDataSourceCrud{}
func (s *AiDocumentModelDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *AiDocumentModelDataSourceCrud) Get() error {
	request := oci_ai_document.GetModelRequest{}
func (s *AiDocumentModelDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/ai_document/ai_document_processor_job_resource.go ===
func AiDocumentProcessorJobResource() *schema.Resource {
	return &schema.Resource{
func createAiDocumentProcessorJob(d *schema.ResourceData, m interface{}) error {
	sync := &AiDocumentProcessorJobResourceCrud{}
func readAiDocumentProcessorJob(d *schema.ResourceData, m interface{}) error {
	sync := &AiDocumentProcessorJobResourceCrud{}
func deleteAiDocumentProcessorJob(d *schema.ResourceData, m interface{}) error {
	return nil
func (s *AiDocumentProcessorJobResourceCrud) ID() string {
	return *s.Res.Id
func (s *AiDocumentProcessorJobResourceCrud) CreatedPending() []string {
	return []string{
func (s *AiDocumentProcessorJobResourceCrud) CreatedTarget() []string {
	return []string{
func (s *AiDocumentProcessorJobResourceCrud) DeletedPending() []string {
	return []string{}
func (s *AiDocumentProcessorJobResourceCrud) DeletedTarget() []string {
	return []string{}
func (s *AiDocumentProcessorJobResourceCrud) Create() error {
	request := oci_ai_document.CreateProcessorJobRequest{}
func (s *AiDocumentProcessorJobResourceCrud) Get() error {
	request := oci_ai_document.GetProcessorJobRequest{}
func (s *AiDocumentProcessorJobResourceCrud) SetData() error {
	if s.Res.CompartmentId != nil {
func (s *AiDocumentProcessorJobResourceCrud) mapToDocumentFeature(fieldKeyFormat string) (oci_ai_document.DocumentFeature, error) {
	var baseObject oci_ai_document.DocumentFeature
func (s *AiDocumentProcessorJobResourceCrud) mapToInputLocation(fieldKeyFormat string) (oci_ai_document.InputLocation, error) {
	var baseObject oci_ai_document.InputLocation
func (s *AiDocumentProcessorJobResourceCrud) mapToObjectLocation(fieldKeyFormat string) (oci_ai_document.ObjectLocation, error) {
	result := oci_ai_document.ObjectLocation{}
func (s *AiDocumentProcessorJobResourceCrud) mapToOutputLocation(fieldKeyFormat string) (oci_ai_document.OutputLocation, error) {
	result := oci_ai_document.OutputLocation{}
func (s *AiDocumentProcessorJobResourceCrud) mapToProcessorConfig(fieldKeyFormat string) (oci_ai_document.ProcessorConfig, error) {
	var baseObject oci_ai_document.ProcessorConfig

=== ./internal/service/ai_document/ai_document_project_resource.go ===
func AiDocumentProjectResource() *schema.Resource {
	return &schema.Resource{
func createAiDocumentProject(d *schema.ResourceData, m interface{}) error {
	sync := &AiDocumentProjectResourceCrud{}
func readAiDocumentProject(d *schema.ResourceData, m interface{}) error {
	sync := &AiDocumentProjectResourceCrud{}
func updateAiDocumentProject(d *schema.ResourceData, m interface{}) error {
	sync := &AiDocumentProjectResourceCrud{}
func deleteAiDocumentProject(d *schema.ResourceData, m interface{}) error {
	sync := &AiDocumentProjectResourceCrud{}
func (s *AiDocumentProjectResourceCrud) ID() string {
	return *s.Res.Id
func (s *AiDocumentProjectResourceCrud) CreatedPending() []string {
	return []string{
func (s *AiDocumentProjectResourceCrud) CreatedTarget() []string {
	return []string{
func (s *AiDocumentProjectResourceCrud) DeletedPending() []string {
	return []string{
func (s *AiDocumentProjectResourceCrud) DeletedTarget() []string {
	return []string{
func (s *AiDocumentProjectResourceCrud) Create() error {
	request := oci_ai_document.CreateProjectRequest{}
func (s *AiDocumentProjectResourceCrud) getProjectFromWorkRequest(workId *string, retryPolicy *oci_common.RetryPolicy,
	actionTypeEnum oci_ai_document.ActionTypeEnum, timeout time.Duration) error {
func (s *AiDocumentProjectResourceCrud) Get() error {
	request := oci_ai_document.GetProjectRequest{}
func (s *AiDocumentProjectResourceCrud) Update() error {
	if compartment, ok := s.D.GetOkExists("compartment_id"); ok && s.D.HasChange("compartment_id") {
func (s *AiDocumentProjectResourceCrud) Delete() error {
	request := oci_ai_document.DeleteProjectRequest{}
func (s *AiDocumentProjectResourceCrud) SetData() error {
	if s.Res.CompartmentId != nil {
func (s *AiDocumentProjectResourceCrud) updateCompartment(compartment interface{}) error {
	changeCompartmentRequest := oci_ai_document.ChangeProjectCompartmentRequest{}

=== ./internal/service/ai_document/ai_document_processor_job_data_source.go ===
func AiDocumentProcessorJobDataSource() *schema.Resource {
	fieldMap := make(map[string]*schema.Schema)
func readSingularAiDocumentProcessorJob(d *schema.ResourceData, m interface{}) error {
	sync := &AiDocumentProcessorJobDataSourceCrud{}
func (s *AiDocumentProcessorJobDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *AiDocumentProcessorJobDataSourceCrud) Get() error {
	request := oci_ai_document.GetProcessorJobRequest{}
func (s *AiDocumentProcessorJobDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/ai_document/register_resource.go ===
func RegisterResource() {
	tfresource.RegisterResource("oci_ai_document_model", AiDocumentModelResource())

=== ./internal/service/redis/redis_redis_cluster_resource.go ===
func RedisRedisClusterResource() *schema.Resource {
	return &schema.Resource{
func createRedisRedisCluster(d *schema.ResourceData, m interface{}) error {
	sync := &RedisRedisClusterResourceCrud{}
func readRedisRedisCluster(d *schema.ResourceData, m interface{}) error {
	sync := &RedisRedisClusterResourceCrud{}
func updateRedisRedisCluster(d *schema.ResourceData, m interface{}) error {
	sync := &RedisRedisClusterResourceCrud{}
func deleteRedisRedisCluster(d *schema.ResourceData, m interface{}) error {
	sync := &RedisRedisClusterResourceCrud{}
func (s *RedisRedisClusterResourceCrud) ID() string {
	return *s.Res.Id
func (s *RedisRedisClusterResourceCrud) CreatedPending() []string {
	return []string{
func (s *RedisRedisClusterResourceCrud) CreatedTarget() []string {
	return []string{
func (s *RedisRedisClusterResourceCrud) DeletedPending() []string {
	return []string{
func (s *RedisRedisClusterResourceCrud) DeletedTarget() []string {
	return []string{
func (s *RedisRedisClusterResourceCrud) Create() error {
	request := oci_redis.CreateRedisClusterRequest{}
func (s *RedisRedisClusterResourceCrud) getRedisClusterFromWorkRequest(workId *string, retryPolicy *oci_common.RetryPolicy,
	actionTypeEnum oci_redis.ActionTypeEnum, timeout time.Duration) error {
func (s *RedisRedisClusterResourceCrud) Get() error {
	request := oci_redis.GetRedisClusterRequest{}
func (s *RedisRedisClusterResourceCrud) Update() error {
	if compartment, ok := s.D.GetOkExists("compartment_id"); ok && s.D.HasChange("compartment_id") {
func (s *RedisRedisClusterResourceCrud) Delete() error {
	request := oci_redis.DeleteRedisClusterRequest{}
func (s *RedisRedisClusterResourceCrud) SetData() error {
	s.D.Set("cluster_mode", s.Res.ClusterMode)
func (s *RedisRedisClusterResourceCrud) updateCompartment(compartment interface{}) error {
	changeCompartmentRequest := oci_redis.ChangeRedisClusterCompartmentRequest{}
func (s *RedisRedisClusterResourceCrud) updateRedisCluster(request oci_redis.UpdateRedisClusterRequest) error {
	tmp := s.D.Id()

=== ./internal/service/redis/redis_redis_cluster_data_source.go ===
func RedisRedisClusterDataSource() *schema.Resource {
	fieldMap := make(map[string]*schema.Schema)
func readSingularRedisRedisCluster(d *schema.ResourceData, m interface{}) error {
	sync := &RedisRedisClusterDataSourceCrud{}
func (s *RedisRedisClusterDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *RedisRedisClusterDataSourceCrud) Get() error {
	request := oci_redis.GetRedisClusterRequest{}
func (s *RedisRedisClusterDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/redis/redis_redis_clusters_data_source.go ===
func RedisRedisClustersDataSource() *schema.Resource {
	return &schema.Resource{
func readRedisRedisClusters(d *schema.ResourceData, m interface{}) error {
	sync := &RedisRedisClustersDataSourceCrud{}
func (s *RedisRedisClustersDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *RedisRedisClustersDataSourceCrud) Get() error {
	request := oci_redis.ListRedisClustersRequest{}
func (s *RedisRedisClustersDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/redis/redis_redis_cluster_nodes_data_source.go ===
func RedisRedisClusterNodesDataSource() *schema.Resource {
	return &schema.Resource{
func readRedisRedisClusterNodes(d *schema.ResourceData, m interface{}) error {
	sync := &RedisRedisClusterNodesDataSourceCrud{}
func (s *RedisRedisClusterNodesDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *RedisRedisClusterNodesDataSourceCrud) Get() error {
	request := oci_redis.ListRedisClusterNodesRequest{}
func (s *RedisRedisClusterNodesDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/redis/register_resource.go ===
func RegisterResource() {
	tfresource.RegisterResource("oci_redis_redis_cluster", RedisRedisClusterResource())

=== ./internal/service/log_analytics/log_analytics_log_analytics_category_data_source.go ===
func LogAnalyticsLogAnalyticsCategoryDataSource() *schema.Resource {
	return &schema.Resource{
func readSingularLogAnalyticsLogAnalyticsCategory(d *schema.ResourceData, m interface{}) error {
	sync := &LogAnalyticsLogAnalyticsCategoryDataSourceCrud{}
func (s *LogAnalyticsLogAnalyticsCategoryDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *LogAnalyticsLogAnalyticsCategoryDataSourceCrud) Get() error {
	request := oci_log_analytics.GetCategoryRequest{}
func (s *LogAnalyticsLogAnalyticsCategoryDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/log_analytics/log_analytics_log_analytics_object_collection_rule_data_source.go ===
func LogAnalyticsLogAnalyticsObjectCollectionRuleDataSource() *schema.Resource {
	fieldMap := make(map[string]*schema.Schema)
func readSingularLogAnalyticsLogAnalyticsObjectCollectionRule(d *schema.ResourceData, m interface{}) error {
	sync := &LogAnalyticsLogAnalyticsObjectCollectionRuleDataSourceCrud{}
func (s *LogAnalyticsLogAnalyticsObjectCollectionRuleDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *LogAnalyticsLogAnalyticsObjectCollectionRuleDataSourceCrud) Get() error {
	request := oci_log_analytics.GetLogAnalyticsObjectCollectionRuleRequest{}
func (s *LogAnalyticsLogAnalyticsObjectCollectionRuleDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/log_analytics/log_analytics_log_analytics_entity_topology_data_source.go ===
func LogAnalyticsLogAnalyticsEntityTopologyDataSource() *schema.Resource {
	return &schema.Resource{
func readSingularLogAnalyticsLogAnalyticsEntityTopology(d *schema.ResourceData, m interface{}) error {
	sync := &LogAnalyticsLogAnalyticsEntityTopologyDataSourceCrud{}
func (s *LogAnalyticsLogAnalyticsEntityTopologyDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *LogAnalyticsLogAnalyticsEntityTopologyDataSourceCrud) Get() error {
	request := oci_log_analytics.ListLogAnalyticsEntityTopologyRequest{}
func (s *LogAnalyticsLogAnalyticsEntityTopologyDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/log_analytics/log_analytics_namespace_storage_encryption_key_info_data_source.go ===
func LogAnalyticsNamespaceStorageEncryptionKeyInfoDataSource() *schema.Resource {
	return &schema.Resource{
func readSingularLogAnalyticsNamespaceStorageEncryptionKeyInfo(d *schema.ResourceData, m interface{}) error {
	sync := &LogAnalyticsNamespaceStorageEncryptionKeyInfoDataSourceCrud{}
func (s *LogAnalyticsNamespaceStorageEncryptionKeyInfoDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *LogAnalyticsNamespaceStorageEncryptionKeyInfoDataSourceCrud) Get() error {
	request := oci_log_analytics.ListEncryptionKeyInfoRequest{}
func (s *LogAnalyticsNamespaceStorageEncryptionKeyInfoDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/log_analytics/log_analytics_namespace_scheduled_tasks_data_source.go ===
func LogAnalyticsNamespaceScheduledTasksDataSource() *schema.Resource {
	return &schema.Resource{
func readLogAnalyticsNamespaceScheduledTasks(d *schema.ResourceData, m interface{}) error {
	sync := &LogAnalyticsNamespaceScheduledTasksDataSourceCrud{}
func (s *LogAnalyticsNamespaceScheduledTasksDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *LogAnalyticsNamespaceScheduledTasksDataSourceCrud) Get() error {
	request := oci_log_analytics.ListScheduledTasksRequest{}
func (s *LogAnalyticsNamespaceScheduledTasksDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/log_analytics/log_analytics_namespace_ingest_time_rule_data_source.go ===
func LogAnalyticsNamespaceIngestTimeRuleDataSource() *schema.Resource {
	fieldMap := make(map[string]*schema.Schema)
func readSingularLogAnalyticsNamespaceIngestTimeRule(d *schema.ResourceData, m interface{}) error {
	sync := &LogAnalyticsNamespaceIngestTimeRuleDataSourceCrud{}
func (s *LogAnalyticsNamespaceIngestTimeRuleDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *LogAnalyticsNamespaceIngestTimeRuleDataSourceCrud) Get() error {
	request := oci_log_analytics.GetIngestTimeRuleRequest{}
func (s *LogAnalyticsNamespaceIngestTimeRuleDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/log_analytics/log_analytics_log_analytics_object_collection_rules_data_source.go ===
func LogAnalyticsLogAnalyticsObjectCollectionRulesDataSource() *schema.Resource {
	return &schema.Resource{
func readLogAnalyticsLogAnalyticsObjectCollectionRules(d *schema.ResourceData, m interface{}) error {
	sync := &LogAnalyticsLogAnalyticsObjectCollectionRulesDataSourceCrud{}
func (s *LogAnalyticsLogAnalyticsObjectCollectionRulesDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *LogAnalyticsLogAnalyticsObjectCollectionRulesDataSourceCrud) Get() error {
	request := oci_log_analytics.ListLogAnalyticsObjectCollectionRulesRequest{}
func (s *LogAnalyticsLogAnalyticsObjectCollectionRulesDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/log_analytics/log_analytics_log_analytics_resource_categories_management_resource.go ===
func LogAnalyticsLogAnalyticsResourceCategoriesManagementResource() *schema.Resource {
	return &schema.Resource{
func createLogAnalyticsLogAnalyticsResourceCategoriesManagement(d *schema.ResourceData, m interface{}) error {
	sync := &LogAnalyticsLogAnalyticsResourceCategoriesManagementResourceCrud{}
func updateLogAnalyticsLogAnalyticsResourceCategoriesManagement(d *schema.ResourceData, m interface{}) error {
	sync := &LogAnalyticsLogAnalyticsResourceCategoriesManagementResourceCrud{}
func readLogAnalyticsLogAnalyticsResourceCategoriesManagement(d *schema.ResourceData, m interface{}) error {
	return nil
func deleteLogAnalyticsLogAnalyticsResourceCategoriesManagement(d *schema.ResourceData, m interface{}) error {
	sync := &LogAnalyticsLogAnalyticsResourceCategoriesManagementResourceCrud{}
func (s *LogAnalyticsLogAnalyticsResourceCategoriesManagementResourceCrud) ID() string {
	return getLogAnalyticsResourceCategoriesManagementId(
func (s *LogAnalyticsLogAnalyticsResourceCategoriesManagementResourceCrud) Create() error {
	if resourceCategories, ok := s.D.GetOkExists("resource_categories"); ok {
func (s *LogAnalyticsLogAnalyticsResourceCategoriesManagementResourceCrud) Update() error {
	if _, ok := s.D.GetOkExists("resource_categories"); ok && s.D.HasChange("resource_categories") {
func (s *LogAnalyticsLogAnalyticsResourceCategoriesManagementResourceCrud) Delete() error {
	if resourceCategories, ok := s.D.GetOkExists("resource_categories"); ok {
func (s *LogAnalyticsLogAnalyticsResourceCategoriesManagementResourceCrud) updateResourceCategories(namespace string, items []oci_log_analytics.LogAnalyticsResourceCategory) error {
	request := oci_log_analytics.UpdateResourceCategoriesRequest{}
func (s *LogAnalyticsLogAnalyticsResourceCategoriesManagementResourceCrud) removeResourceCategories(namespace string, items []oci_log_analytics.LogAnalyticsResourceCategory) error {
	request := oci_log_analytics.RemoveResourceCategoriesRequest{}
func getLogAnalyticsResourceCategoriesManagementId(namespace string, resourceId string, resourceType string) string {
	namespace = url.PathEscape(namespace)
func (s *LogAnalyticsLogAnalyticsResourceCategoriesManagementResourceCrud) SetData() error {
	if resourceCategories, ok := s.D.GetOkExists("resource_categories"); ok {
func toLogAnalyticsResourceCategory(resourceId string, resourceType string, categoryName string) oci_log_analytics.LogAnalyticsResourceCategory {
	result := oci_log_analytics.LogAnalyticsResourceCategory{}

=== ./internal/service/log_analytics/log_analytics_log_analytics_entity_resource.go ===
func LogAnalyticsLogAnalyticsEntityResource() *schema.Resource {
	return &schema.Resource{
func createLogAnalyticsLogAnalyticsEntity(d *schema.ResourceData, m interface{}) error {
	sync := &LogAnalyticsLogAnalyticsEntityResourceCrud{}
func readLogAnalyticsLogAnalyticsEntity(d *schema.ResourceData, m interface{}) error {
	sync := &LogAnalyticsLogAnalyticsEntityResourceCrud{}
func updateLogAnalyticsLogAnalyticsEntity(d *schema.ResourceData, m interface{}) error {
	sync := &LogAnalyticsLogAnalyticsEntityResourceCrud{}
func deleteLogAnalyticsLogAnalyticsEntity(d *schema.ResourceData, m interface{}) error {
	sync := &LogAnalyticsLogAnalyticsEntityResourceCrud{}
func (s *LogAnalyticsLogAnalyticsEntityResourceCrud) ID() string {
	return getLogAnalyticsEntityCompositeId(*s.Res.Id, s.D.Get("namespace").(string))
func (s *LogAnalyticsLogAnalyticsEntityResourceCrud) CreatedPending() []string {
	return []string{}
func (s *LogAnalyticsLogAnalyticsEntityResourceCrud) CreatedTarget() []string {
	return []string{
func (s *LogAnalyticsLogAnalyticsEntityResourceCrud) DeletedPending() []string {
	return []string{}
func (s *LogAnalyticsLogAnalyticsEntityResourceCrud) DeletedTarget() []string {
	return []string{
func (s *LogAnalyticsLogAnalyticsEntityResourceCrud) Create() error {
	request := oci_log_analytics.CreateLogAnalyticsEntityRequest{}
func (s *LogAnalyticsLogAnalyticsEntityResourceCrud) Get() error {
	request := oci_log_analytics.GetLogAnalyticsEntityRequest{}
func (s *LogAnalyticsLogAnalyticsEntityResourceCrud) Update() error {
	if compartment, ok := s.D.GetOkExists("compartment_id"); ok && s.D.HasChange("compartment_id") {
func (s *LogAnalyticsLogAnalyticsEntityResourceCrud) Delete() error {
	request := oci_log_analytics.DeleteLogAnalyticsEntityRequest{}
func (s *LogAnalyticsLogAnalyticsEntityResourceCrud) SetData() error {

func (s *LogAnalyticsLogAnalyticsEntityResourceCrud) mapToLogAnalyticsMetadata(fieldKeyFormat string) (oci_log_analytics.LogAnalyticsMetadata, error) {
	result := oci_log_analytics.LogAnalyticsMetadata{}
func (s *LogAnalyticsLogAnalyticsEntityResourceCrud) mapToLogAnalyticsMetadataDetails(fieldKeyFormat string) (oci_log_analytics.LogAnalyticsMetadataDetails, error) {
	result := oci_log_analytics.LogAnalyticsMetadataDetails{}
func (s *LogAnalyticsLogAnalyticsEntityResourceCrud) updateCompartment(compartment interface{}) error {
	changeCompartmentRequest := oci_log_analytics.ChangeLogAnalyticsEntityCompartmentRequest{}

=== ./internal/service/log_analytics/log_analytics_log_analytics_unprocessed_data_bucket_management_resource.go ===
func LogAnalyticsLogAnalyticsUnprocessedDataBucketManagementResource() *schema.Resource {
	return &schema.Resource{
func createLogAnalyticsLogAnalyticsUnprocessedDataBucketManagement(d *schema.ResourceData, m interface{}) error {
	sync := &LogAnalyticsLogAnalyticsUnprocessedDataBucketManagementResourceCrud{}
func updateLogAnalyticsLogAnalyticsUnprocessedDataBucketManagement(d *schema.ResourceData, m interface{}) error {
	sync := &LogAnalyticsLogAnalyticsUnprocessedDataBucketManagementResourceCrud{}
func readLogAnalyticsLogAnalyticsUnprocessedDataBucketManagement(d *schema.ResourceData, m interface{}) error {
	return nil
func deleteLogAnalyticsLogAnalyticsUnprocessedDataBucketManagement(d *schema.ResourceData, m interface{}) error {
	sync := &LogAnalyticsLogAnalyticsUnprocessedDataBucketManagementResourceCrud{}
func (s *LogAnalyticsLogAnalyticsUnprocessedDataBucketManagementResourceCrud) ID() string {
	return s.D.Get("namespace").(string)
func (s *LogAnalyticsLogAnalyticsUnprocessedDataBucketManagementResourceCrud) Create() error {
	request := oci_log_analytics.SetUnprocessedDataBucketRequest{}
func (s *LogAnalyticsLogAnalyticsUnprocessedDataBucketManagementResourceCrud) Update() error {
	request := oci_log_analytics.SetUnprocessedDataBucketRequest{}
func (s *LogAnalyticsLogAnalyticsUnprocessedDataBucketManagementResourceCrud) Delete() error {
	request := oci_log_analytics.SetUnprocessedDataBucketRequest{}
func (s *LogAnalyticsLogAnalyticsUnprocessedDataBucketManagementResourceCrud) SetData() error {
	if s.Res.BucketName != nil {

=== ./internal/service/log_analytics/log_analytics_namespaces_data_source.go ===
func LogAnalyticsNamespacesDataSource() *schema.Resource {
	return &schema.Resource{
func readLogAnalyticsNamespaces(d *schema.ResourceData, m interface{}) error {
	sync := &LogAnalyticsNamespacesDataSourceCrud{}
func (s *LogAnalyticsNamespacesDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *LogAnalyticsNamespacesDataSourceCrud) Get() error {
	request := oci_log_analytics.ListNamespacesRequest{}
func (s *LogAnalyticsNamespacesDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/log_analytics/log_analytics_log_analytics_entity_data_source.go ===
func LogAnalyticsLogAnalyticsEntityDataSource() *schema.Resource {
	fieldMap := make(map[string]*schema.Schema)
func readSingularLogAnalyticsLogAnalyticsEntity(d *schema.ResourceData, m interface{}) error {
	sync := &LogAnalyticsLogAnalyticsEntityDataSourceCrud{}
func (s *LogAnalyticsLogAnalyticsEntityDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *LogAnalyticsLogAnalyticsEntityDataSourceCrud) Get() error {
	request := oci_log_analytics.GetLogAnalyticsEntityRequest{}
func (s *LogAnalyticsLogAnalyticsEntityDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/log_analytics/log_analytics_namespace_properties_metadata_data_source.go ===
func LogAnalyticsNamespacePropertiesMetadataDataSource() *schema.Resource {
	return &schema.Resource{
func readLogAnalyticsNamespacePropertiesMetadata(d *schema.ResourceData, m interface{}) error {
	sync := &LogAnalyticsNamespacePropertiesMetadataDataSourceCrud{}
func (s *LogAnalyticsNamespacePropertiesMetadataDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *LogAnalyticsNamespacePropertiesMetadataDataSourceCrud) Get() error {
	request := oci_log_analytics.ListPropertiesMetadataRequest{}
func (s *LogAnalyticsNamespacePropertiesMetadataDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/log_analytics/log_analytics_namespace_ingest_time_rules_management_resource.go ===
func LogAnalyticsNamespaceIngestTimeRulesManagementResource() *schema.Resource {
	return &schema.Resource{
func createLogAnalyticsNamespaceIngestTimeRulesManagement(d *schema.ResourceData, m interface{}) error {
	sync := &LogAnalyticsNamespaceIngestTimeRulesManagementResourceCrud{}
func readLogAnalyticsNamespaceIngestTimeRulesManagement(d *schema.ResourceData, m interface{}) error {
	return nil
func updateLogAnalyticsNamespaceIngestTimeRulesManagement(d *schema.ResourceData, m interface{}) error {
	sync := &LogAnalyticsNamespaceIngestTimeRulesManagementResourceCrud{}
func deleteLogAnalyticsNamespaceIngestTimeRulesManagement(d *schema.ResourceData, m interface{}) error {
	sync := &LogAnalyticsNamespaceIngestTimeRulesManagementResourceCrud{}
func (s *LogAnalyticsNamespaceIngestTimeRulesManagementResourceCrud) ID() string {
	return tfresource.GenerateDataSourceHashID("LogAnalyticsNamespaceIngestTimeRulesManagementResource-", LogAnalyticsNamespaceIngestTimeRulesManagementResource(), s.D)
func (s *LogAnalyticsNamespaceIngestTimeRulesManagementResourceCrud) Create() error {
	var operation bool
func (s *LogAnalyticsNamespaceIngestTimeRulesManagementResourceCrud) getNamespaceIngestTimeRulesManagementFromWorkRequest(namespaceName *string, workId *string, retryPolicy *oci_common.RetryPolicy,
	actionTypeEnum oci_log_analytics.LogAnalyticsConfigWorkRequestOperationTypeEnum, timeout time.Duration) error {
func (s *LogAnalyticsNamespaceIngestTimeRulesManagementResourceCrud) Update() error {
	var operation bool
func (s *LogAnalyticsNamespaceIngestTimeRulesManagementResourceCrud) Delete() error {
	var operation bool
func (s *LogAnalyticsNamespaceIngestTimeRulesManagementResourceCrud) SetData() error {
	return nil

=== ./internal/service/log_analytics/log_analytics_namespace_storage_recall_count_data_source.go ===
func LogAnalyticsNamespaceStorageRecallCountDataSource() *schema.Resource {
	return &schema.Resource{
func readSingularLogAnalyticsNamespaceStorageRecallCount(d *schema.ResourceData, m interface{}) error {
	sync := &LogAnalyticsNamespaceStorageRecallCountDataSourceCrud{}
func (s *LogAnalyticsNamespaceStorageRecallCountDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *LogAnalyticsNamespaceStorageRecallCountDataSourceCrud) Get() error {
	request := oci_log_analytics.GetRecallCountRequest{}
func (s *LogAnalyticsNamespaceStorageRecallCountDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/log_analytics/log_analytics_namespace_ingest_time_rules_data_source.go ===
func LogAnalyticsNamespaceIngestTimeRulesDataSource() *schema.Resource {
	return &schema.Resource{
func readLogAnalyticsNamespaceIngestTimeRules(d *schema.ResourceData, m interface{}) error {
	sync := &LogAnalyticsNamespaceIngestTimeRulesDataSourceCrud{}
func (s *LogAnalyticsNamespaceIngestTimeRulesDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *LogAnalyticsNamespaceIngestTimeRulesDataSourceCrud) Get() error {
	request := oci_log_analytics.ListIngestTimeRulesRequest{}
func (s *LogAnalyticsNamespaceIngestTimeRulesDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/log_analytics/log_analytics_log_analytics_unprocessed_data_bucket_data_source.go ===
func LogAnalyticsLogAnalyticsUnprocessedDataBucketDataSource() *schema.Resource {
	return &schema.Resource{
func readSingularLogAnalyticsLogAnalyticsUnprocessedDataBucket(d *schema.ResourceData, m interface{}) error {
	sync := &LogAnalyticsLogAnalyticsUnprocessedDataBucketDataSourceCrud{}
func (s *LogAnalyticsLogAnalyticsUnprocessedDataBucketDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *LogAnalyticsLogAnalyticsUnprocessedDataBucketDataSourceCrud) Get() error {
	request := oci_log_analytics.GetUnprocessedDataBucketRequest{}
func (s *LogAnalyticsLogAnalyticsUnprocessedDataBucketDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/log_analytics/log_analytics_log_analytics_entities_data_source.go ===
func LogAnalyticsLogAnalyticsEntitiesDataSource() *schema.Resource {
	return &schema.Resource{
func readLogAnalyticsLogAnalyticsEntities(d *schema.ResourceData, m interface{}) error {
	sync := &LogAnalyticsLogAnalyticsEntitiesDataSourceCrud{}
func (s *LogAnalyticsLogAnalyticsEntitiesDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *LogAnalyticsLogAnalyticsEntitiesDataSourceCrud) Get() error {
	request := oci_log_analytics.ListLogAnalyticsEntitiesRequest{}
func (s *LogAnalyticsLogAnalyticsEntitiesDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/log_analytics/log_analytics_log_analytics_log_groups_summary_data_source.go ===
func LogAnalyticsLogAnalyticsLogGroupsSummaryDataSource() *schema.Resource {
	return &schema.Resource{
func readSingularLogAnalyticsLogAnalyticsLogGroupsSummary(d *schema.ResourceData, m interface{}) error {
	sync := &LogAnalyticsLogAnalyticsLogGroupsSummaryDataSourceCrud{}
func (s *LogAnalyticsLogAnalyticsLogGroupsSummaryDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *LogAnalyticsLogAnalyticsLogGroupsSummaryDataSourceCrud) Get() error {
	request := oci_log_analytics.GetLogAnalyticsLogGroupsSummaryRequest{}
func (s *LogAnalyticsLogAnalyticsLogGroupsSummaryDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/log_analytics/log_analytics_namespace_ingest_time_rule_resource.go ===
func LogAnalyticsNamespaceIngestTimeRuleResource() *schema.Resource {
	return &schema.Resource{
func createLogAnalyticsNamespaceIngestTimeRule(d *schema.ResourceData, m interface{}) error {
	sync := &LogAnalyticsNamespaceIngestTimeRuleResourceCrud{}
func readLogAnalyticsNamespaceIngestTimeRule(d *schema.ResourceData, m interface{}) error {
	sync := &LogAnalyticsNamespaceIngestTimeRuleResourceCrud{}
func updateLogAnalyticsNamespaceIngestTimeRule(d *schema.ResourceData, m interface{}) error {
	sync := &LogAnalyticsNamespaceIngestTimeRuleResourceCrud{}
func deleteLogAnalyticsNamespaceIngestTimeRule(d *schema.ResourceData, m interface{}) error {
	sync := &LogAnalyticsNamespaceIngestTimeRuleResourceCrud{}
func (s *LogAnalyticsNamespaceIngestTimeRuleResourceCrud) ID() string {
	return GetNamespaceIngestTimeRuleCompositeId(*s.Res.Id, s.D.Get("namespace").(string))
func (s *LogAnalyticsNamespaceIngestTimeRuleResourceCrud) CreatedPending() []string {
	return []string{}
func (s *LogAnalyticsNamespaceIngestTimeRuleResourceCrud) CreatedTarget() []string {
	return []string{
func (s *LogAnalyticsNamespaceIngestTimeRuleResourceCrud) DeletedPending() []string {
	return []string{}
func (s *LogAnalyticsNamespaceIngestTimeRuleResourceCrud) DeletedTarget() []string {
	return []string{
func (s *LogAnalyticsNamespaceIngestTimeRuleResourceCrud) Create() error {
	request := oci_log_analytics.CreateIngestTimeRuleRequest{}
func (s *LogAnalyticsNamespaceIngestTimeRuleResourceCrud) Get() error {
	request := oci_log_analytics.GetIngestTimeRuleRequest{}
func (s *LogAnalyticsNamespaceIngestTimeRuleResourceCrud) Update() error {
	if compartment, ok := s.D.GetOkExists("compartment_id"); ok && s.D.HasChange("compartment_id") {
func (s *LogAnalyticsNamespaceIngestTimeRuleResourceCrud) Delete() error {
	request := oci_log_analytics.DeleteIngestTimeRuleRequest{}
func (s *LogAnalyticsNamespaceIngestTimeRuleResourceCrud) SetData() error {

func (s *LogAnalyticsNamespaceIngestTimeRuleResourceCrud) mapToIngestTimeRuleAction(fieldKeyFormat string) (oci_log_analytics.IngestTimeRuleAction, error) {
	var baseObject oci_log_analytics.IngestTimeRuleAction
func (s *LogAnalyticsNamespaceIngestTimeRuleResourceCrud) mapToIngestTimeRuleAdditionalFieldCondition(fieldKeyFormat string) (oci_log_analytics.IngestTimeRuleAdditionalFieldCondition, error) {
	result := oci_log_analytics.IngestTimeRuleAdditionalFieldCondition{}
func (s *LogAnalyticsNamespaceIngestTimeRuleResourceCrud) mapToIngestTimeRuleCondition(fieldKeyFormat string) (oci_log_analytics.IngestTimeRuleCondition, error) {
	var baseObject oci_log_analytics.IngestTimeRuleCondition
func (s *LogAnalyticsNamespaceIngestTimeRuleResourceCrud) updateCompartment(compartment interface{}) error {
	changeCompartmentRequest := oci_log_analytics.ChangeIngestTimeRuleCompartmentRequest{}

=== ./internal/service/log_analytics/log_analytics_export.go ===
func processLogAnalyticsObjectCollectionRules(ctx *tf_export.ResourceDiscoveryContext, resources []*tf_export.OCIResource) ([]*tf_export.OCIResource, error) {
	for _, resource := range resources {
func findLogAnalyticsObjectCollectionRules(ctx *tf_export.ResourceDiscoveryContext, tfMeta *tf_export.TerraformResourceAssociation, parent *tf_export.OCIResource, resourceGraph *tf_export.TerraformResourceGraph) ([]*tf_export.OCIResource, error) {
	// List on LogAnalyticsObjectCollectionRules requires namespaceName path parameter.
func getLogAnalyticsLogAnalyticsObjectCollectionRuleId(resource *tf_export.OCIResource) (string, error) {

func getLogAnalyticsNamespaceScheduledTaskId(resource *tf_export.OCIResource) (string, error) {

func getLogAnalyticsNamespaceIngestTimeRuleId(resource *tf_export.OCIResource) (string, error) {


=== ./internal/service/log_analytics/log_analytics_namespace_effective_properties_data_source.go ===
func LogAnalyticsNamespaceEffectivePropertiesDataSource() *schema.Resource {
	return &schema.Resource{
func readLogAnalyticsNamespaceEffectiveProperties(d *schema.ResourceData, m interface{}) error {
	sync := &LogAnalyticsNamespaceEffectivePropertiesDataSourceCrud{}
func (s *LogAnalyticsNamespaceEffectivePropertiesDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *LogAnalyticsNamespaceEffectivePropertiesDataSourceCrud) Get() error {
	request := oci_log_analytics.ListEffectivePropertiesRequest{}
func (s *LogAnalyticsNamespaceEffectivePropertiesDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/log_analytics/log_analytics_log_analytics_categories_list_data_source.go ===
func LogAnalyticsLogAnalyticsCategoriesListDataSource() *schema.Resource {
	return &schema.Resource{
func readSingularLogAnalyticsLogAnalyticsCategoriesList(d *schema.ResourceData, m interface{}) error {
	sync := &LogAnalyticsLogAnalyticsCategoriesListDataSourceCrud{}
func (s *LogAnalyticsLogAnalyticsCategoriesListDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *LogAnalyticsLogAnalyticsCategoriesListDataSourceCrud) Get() error {
	request := oci_log_analytics.ListCategoriesRequest{}
func (s *LogAnalyticsLogAnalyticsCategoriesListDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/log_analytics/log_analytics_namespace_scheduled_task_data_source.go ===
func LogAnalyticsNamespaceScheduledTaskDataSource() *schema.Resource {
	fieldMap := make(map[string]*schema.Schema)
func readSingularLogAnalyticsNamespaceScheduledTask(d *schema.ResourceData, m interface{}) error {
	sync := &LogAnalyticsNamespaceScheduledTaskDataSourceCrud{}
func (s *LogAnalyticsNamespaceScheduledTaskDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *LogAnalyticsNamespaceScheduledTaskDataSourceCrud) Get() error {
	request := oci_log_analytics.GetScheduledTaskRequest{}
func (s *LogAnalyticsNamespaceScheduledTaskDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/log_analytics/log_analytics_namespace_resource.go ===
func LogAnalyticsNamespaceResource() *schema.Resource {
	return &schema.Resource{
func createLogAnalyticsNamespace(d *schema.ResourceData, m interface{}) error {
	sync := &LogAnalyticsNamespaceResourceCrud{}
func readLogAnalyticsNamespace(d *schema.ResourceData, m interface{}) error {
	sync := &LogAnalyticsNamespaceResourceCrud{}
func updateLogAnalyticsNamespace(d *schema.ResourceData, m interface{}) error {
	sync := &LogAnalyticsNamespaceResourceCrud{}
func deleteLogAnalyticsNamespace(d *schema.ResourceData, m interface{}) error {
	return nil
func (s *LogAnalyticsNamespaceResourceCrud) ID() string {
	return GetNamespaceCompositeId(s.D.Get("compartment_id").(string), s.D.Get("namespace").(string))
func (s *LogAnalyticsNamespaceResourceCrud) Create() error {
	// This resource can't actually be created. So treat it as an Update instead.
func (s *LogAnalyticsNamespaceResourceCrud) Update() error {
	var desiredState bool
func (s *LogAnalyticsNamespaceResourceCrud) OnboardNamespace() error {
	request := oci_log_analytics.OnboardNamespaceRequest{}
func (s *LogAnalyticsNamespaceResourceCrud) OffboardNamespace() error {
	request := oci_log_analytics.OffboardNamespaceRequest{}
func (s *LogAnalyticsNamespaceResourceCrud) getNamespaceFromWorkRequest(workId *string, ns *string, retryPolicy *oci_common.RetryPolicy, actionTypeEnum oci_log_analytics.ActionTypesEnum, timeout time.Duration) error {

func (s *LogAnalyticsNamespaceResourceCrud) Get() error {
	request := oci_log_analytics.ListNamespacesRequest{}
func (s *LogAnalyticsNamespaceResourceCrud) SetData() error {
	if s.Res.NamespaceName != nil {

=== ./internal/service/log_analytics/log_analytics_log_analytics_log_group_resource.go ===
func LogAnalyticsLogAnalyticsLogGroupResource() *schema.Resource {
	return &schema.Resource{
func createLogAnalyticsLogAnalyticsLogGroup(d *schema.ResourceData, m interface{}) error {
	sync := &LogAnalyticsLogAnalyticsLogGroupResourceCrud{}
func readLogAnalyticsLogAnalyticsLogGroup(d *schema.ResourceData, m interface{}) error {
	sync := &LogAnalyticsLogAnalyticsLogGroupResourceCrud{}
func updateLogAnalyticsLogAnalyticsLogGroup(d *schema.ResourceData, m interface{}) error {
	sync := &LogAnalyticsLogAnalyticsLogGroupResourceCrud{}
func deleteLogAnalyticsLogAnalyticsLogGroup(d *schema.ResourceData, m interface{}) error {
	sync := &LogAnalyticsLogAnalyticsLogGroupResourceCrud{}
func (s *LogAnalyticsLogAnalyticsLogGroupResourceCrud) ID() string {
	return getLogAnalyticsLogGroupCompositeId(*s.Res.Id, s.D.Get("namespace").(string))
func (s *LogAnalyticsLogAnalyticsLogGroupResourceCrud) Create() error {
	request := oci_log_analytics.CreateLogAnalyticsLogGroupRequest{}
func (s *LogAnalyticsLogAnalyticsLogGroupResourceCrud) Get() error {
	request := oci_log_analytics.GetLogAnalyticsLogGroupRequest{}
func (s *LogAnalyticsLogAnalyticsLogGroupResourceCrud) Update() error {
	if compartment, ok := s.D.GetOkExists("compartment_id"); ok && s.D.HasChange("compartment_id") {
func (s *LogAnalyticsLogAnalyticsLogGroupResourceCrud) Delete() error {
	request := oci_log_analytics.DeleteLogAnalyticsLogGroupRequest{}
func (s *LogAnalyticsLogAnalyticsLogGroupResourceCrud) SetData() error {

func (s *LogAnalyticsLogAnalyticsLogGroupResourceCrud) updateCompartment(compartment interface{}) error {
	changeCompartmentRequest := oci_log_analytics.ChangeLogAnalyticsLogGroupCompartmentRequest{}

=== ./internal/service/log_analytics/log_analytics_namespace_rules_summary_data_source.go ===
func LogAnalyticsNamespaceRulesSummaryDataSource() *schema.Resource {
	return &schema.Resource{
func readSingularLogAnalyticsNamespaceRulesSummary(d *schema.ResourceData, m interface{}) error {
	sync := &LogAnalyticsNamespaceRulesSummaryDataSourceCrud{}
func (s *LogAnalyticsNamespaceRulesSummaryDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *LogAnalyticsNamespaceRulesSummaryDataSourceCrud) Get() error {
	request := oci_log_analytics.GetRulesSummaryRequest{}
func (s *LogAnalyticsNamespaceRulesSummaryDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/log_analytics/log_analytics_namespace_scheduled_task_resource.go ===
func LogAnalyticsNamespaceScheduledTaskResource() *schema.Resource {
	return &schema.Resource{
func createLogAnalyticsNamespaceScheduledTask(d *schema.ResourceData, m interface{}) error {
	sync := &LogAnalyticsNamespaceScheduledTaskResourceCrud{}
func readLogAnalyticsNamespaceScheduledTask(d *schema.ResourceData, m interface{}) error {
	sync := &LogAnalyticsNamespaceScheduledTaskResourceCrud{}
func updateLogAnalyticsNamespaceScheduledTask(d *schema.ResourceData, m interface{}) error {
	sync := &LogAnalyticsNamespaceScheduledTaskResourceCrud{}
func deleteLogAnalyticsNamespaceScheduledTask(d *schema.ResourceData, m interface{}) error {
	sync := &LogAnalyticsNamespaceScheduledTaskResourceCrud{}
func (s *LogAnalyticsNamespaceScheduledTaskResourceCrud) ID() string {
	var namespace, scheduledTaskId string
func (s *LogAnalyticsNamespaceScheduledTaskResourceCrud) CreatedPending() []string {
	return []string{}
func (s *LogAnalyticsNamespaceScheduledTaskResourceCrud) CreatedTarget() []string {
	return []string{
func (s *LogAnalyticsNamespaceScheduledTaskResourceCrud) DeletedPending() []string {
	return []string{}
func (s *LogAnalyticsNamespaceScheduledTaskResourceCrud) DeletedTarget() []string {
	return []string{
func (s *LogAnalyticsNamespaceScheduledTaskResourceCrud) Create() error {
	request := oci_log_analytics.CreateScheduledTaskRequest{}
func (s *LogAnalyticsNamespaceScheduledTaskResourceCrud) Get() error {
	request := oci_log_analytics.GetScheduledTaskRequest{}
func (s *LogAnalyticsNamespaceScheduledTaskResourceCrud) Update() error {
	if compartment, ok := s.D.GetOkExists("compartment_id"); ok && s.D.HasChange("compartment_id") {
func (s *LogAnalyticsNamespaceScheduledTaskResourceCrud) Delete() error {
	request := oci_log_analytics.DeleteScheduledTaskRequest{}
func (s *LogAnalyticsNamespaceScheduledTaskResourceCrud) SetData() error {
	if s.Res == nil || *(s.Res) == nil {
func (s *LogAnalyticsNamespaceScheduledTaskResourceCrud) mapToAction(fieldKeyFormat string) (oci_log_analytics.Action, error) {
	var baseObject oci_log_analytics.Action
func (s *LogAnalyticsNamespaceScheduledTaskResourceCrud) mapToSchedules(fieldKeyFormat string) ([]oci_log_analytics.Schedule, error) {
	var result []oci_log_analytics.Schedule
func (s *LogAnalyticsNamespaceScheduledTaskResourceCrud) mapToMetricExtraction(fieldKeyFormat string) (oci_log_analytics.MetricExtraction, error) {
	result := oci_log_analytics.MetricExtraction{}
func (s *LogAnalyticsNamespaceScheduledTaskResourceCrud) mapToSchedule(fieldKeyFormat string) (oci_log_analytics.Schedule, error) {
	var baseObject oci_log_analytics.Schedule
func (s *LogAnalyticsNamespaceScheduledTaskResourceCrud) populateTopLevelPolymorphicCreateScheduledTaskRequest(request *oci_log_analytics.CreateScheduledTaskRequest) error {
	//discriminator
func (s *LogAnalyticsNamespaceScheduledTaskResourceCrud) updateCompartment(compartment interface{}) error {
	changeCompartmentRequest := oci_log_analytics.ChangeScheduledTaskCompartmentRequest{}

=== ./internal/service/log_analytics/log_analytics_log_analytics_entities_summary_data_source.go ===
func LogAnalyticsLogAnalyticsEntitiesSummaryDataSource() *schema.Resource {
	return &schema.Resource{
func readSingularLogAnalyticsLogAnalyticsEntitiesSummary(d *schema.ResourceData, m interface{}) error {
	sync := &LogAnalyticsLogAnalyticsEntitiesSummaryDataSourceCrud{}
func (s *LogAnalyticsLogAnalyticsEntitiesSummaryDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *LogAnalyticsLogAnalyticsEntitiesSummaryDataSourceCrud) Get() error {
	request := oci_log_analytics.GetLogAnalyticsEntitiesSummaryRequest{}
func (s *LogAnalyticsLogAnalyticsEntitiesSummaryDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/log_analytics/log_analytics_log_analytics_preferences_management_resource.go ===
func LogAnalyticsLogAnalyticsPreferencesManagementResource() *schema.Resource {
	return &schema.Resource{
func createLogAnalyticsLogAnalyticsPreferencesManagement(d *schema.ResourceData, m interface{}) error {
	sync := &LogAnalyticsLogAnalyticsPreferencesManagementResourceCrud{}
func updateLogAnalyticsLogAnalyticsPreferencesManagement(d *schema.ResourceData, m interface{}) error {
	sync := &LogAnalyticsLogAnalyticsPreferencesManagementResourceCrud{}
func readLogAnalyticsLogAnalyticsPreferencesManagement(d *schema.ResourceData, m interface{}) error {
	return nil
func deleteLogAnalyticsLogAnalyticsPreferencesManagement(d *schema.ResourceData, m interface{}) error {
	sync := &LogAnalyticsLogAnalyticsPreferencesManagementResourceCrud{}
func (s *LogAnalyticsLogAnalyticsPreferencesManagementResourceCrud) ID() string {
	return getLogAnalyticsPreferencesManagementId(s.D.Get("namespace").(string))
func (s *LogAnalyticsLogAnalyticsPreferencesManagementResourceCrud) Create() error {
	if items, ok := s.D.GetOkExists("items"); ok {
func (s *LogAnalyticsLogAnalyticsPreferencesManagementResourceCrud) Update() error {
	if _, ok := s.D.GetOkExists("items"); ok && s.D.HasChange("items") {
func (s *LogAnalyticsLogAnalyticsPreferencesManagementResourceCrud) Delete() error {
	if items, ok := s.D.GetOkExists("items"); ok {
func (s *LogAnalyticsLogAnalyticsPreferencesManagementResourceCrud) updatePreferences(namespace string, items []oci_log_analytics.LogAnalyticsPreference) error {
	request := oci_log_analytics.UpdatePreferencesRequest{}
func (s *LogAnalyticsLogAnalyticsPreferencesManagementResourceCrud) removePreferences(namespace string, items []oci_log_analytics.LogAnalyticsPreference) error {
	request := oci_log_analytics.RemovePreferencesRequest{}
func (s *LogAnalyticsLogAnalyticsPreferencesManagementResourceCrud) SetData() error {
	if items, ok := s.D.GetOkExists("items"); ok {
func (s *LogAnalyticsLogAnalyticsPreferencesManagementResourceCrud) mapToLogAnalyticsPreference(fieldKeyFormat string) (oci_log_analytics.LogAnalyticsPreference, error) {
	result := oci_log_analytics.LogAnalyticsPreference{}

=== ./internal/service/log_analytics/log_analytics_log_analytics_resource_categories_list_data_source.go ===
func LogAnalyticsLogAnalyticsResourceCategoriesListDataSource() *schema.Resource {
	return &schema.Resource{
func readSingularLogAnalyticsLogAnalyticsResourceCategoriesList(d *schema.ResourceData, m interface{}) error {
	sync := &LogAnalyticsLogAnalyticsResourceCategoriesListDataSourceCrud{}
func (s *LogAnalyticsLogAnalyticsResourceCategoriesListDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *LogAnalyticsLogAnalyticsResourceCategoriesListDataSourceCrud) Get() error {
	request := oci_log_analytics.ListResourceCategoriesRequest{}
func (s *LogAnalyticsLogAnalyticsResourceCategoriesListDataSourceCrud) SetData() error {
	if s.Res == nil {
func LogAnalyticsResourceCategoryToMap(obj oci_log_analytics.LogAnalyticsResourceCategory) map[string]interface{} {
	result := map[string]interface{}{}

=== ./internal/service/log_analytics/log_analytics_log_analytics_preference_data_source.go ===
func LogAnalyticsLogAnalyticsPreferenceDataSource() *schema.Resource {
	return &schema.Resource{
func readSingularLogAnalyticsLogAnalyticsPreference(d *schema.ResourceData, m interface{}) error {
	sync := &LogAnalyticsLogAnalyticsPreferenceDataSourceCrud{}
func (s *LogAnalyticsLogAnalyticsPreferenceDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *LogAnalyticsLogAnalyticsPreferenceDataSourceCrud) Get() error {
	request := oci_log_analytics.GetPreferencesRequest{}
func (s *LogAnalyticsLogAnalyticsPreferenceDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/log_analytics/log_analytics_log_sets_count_data_source.go ===
func LogAnalyticsLogSetsCountDataSource() *schema.Resource {
	return &schema.Resource{
func readSingularLogAnalyticsLogSetsCount(d *schema.ResourceData, m interface{}) error {
	sync := &LogAnalyticsLogSetsCountDataSourceCrud{}
func (s *LogAnalyticsLogSetsCountDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *LogAnalyticsLogSetsCountDataSourceCrud) Get() error {
	request := oci_log_analytics.GetLogSetsCountRequest{}
func (s *LogAnalyticsLogSetsCountDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/log_analytics/log_analytics_log_analytics_log_group_data_source.go ===
func LogAnalyticsLogAnalyticsLogGroupDataSource() *schema.Resource {
	fieldMap := make(map[string]*schema.Schema)
func readSingularLogAnalyticsLogAnalyticsLogGroup(d *schema.ResourceData, m interface{}) error {
	sync := &LogAnalyticsLogAnalyticsLogGroupDataSourceCrud{}
func (s *LogAnalyticsLogAnalyticsLogGroupDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *LogAnalyticsLogAnalyticsLogGroupDataSourceCrud) Get() error {
	request := oci_log_analytics.GetLogAnalyticsLogGroupRequest{}
func (s *LogAnalyticsLogAnalyticsLogGroupDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/log_analytics/log_analytics_log_analytics_object_collection_rule_resource.go ===
func LogAnalyticsLogAnalyticsObjectCollectionRuleResource() *schema.Resource {
	return &schema.Resource{
func createLogAnalyticsLogAnalyticsObjectCollectionRule(d *schema.ResourceData, m interface{}) error {
	sync := &LogAnalyticsLogAnalyticsObjectCollectionRuleResourceCrud{}
func readLogAnalyticsLogAnalyticsObjectCollectionRule(d *schema.ResourceData, m interface{}) error {
	sync := &LogAnalyticsLogAnalyticsObjectCollectionRuleResourceCrud{}
func updateLogAnalyticsLogAnalyticsObjectCollectionRule(d *schema.ResourceData, m interface{}) error {
	sync := &LogAnalyticsLogAnalyticsObjectCollectionRuleResourceCrud{}
func deleteLogAnalyticsLogAnalyticsObjectCollectionRule(d *schema.ResourceData, m interface{}) error {
	sync := &LogAnalyticsLogAnalyticsObjectCollectionRuleResourceCrud{}
func (s *LogAnalyticsLogAnalyticsObjectCollectionRuleResourceCrud) ID() string {
	return GetLogAnalyticsObjectCollectionRuleCompositeId(*s.Res.Id, s.D.Get("namespace").(string))
func (s *LogAnalyticsLogAnalyticsObjectCollectionRuleResourceCrud) CreatedPending() []string {
	return []string{}
func (s *LogAnalyticsLogAnalyticsObjectCollectionRuleResourceCrud) CreatedTarget() []string {
	return []string{
func (s *LogAnalyticsLogAnalyticsObjectCollectionRuleResourceCrud) DeletedPending() []string {
	return []string{}
func (s *LogAnalyticsLogAnalyticsObjectCollectionRuleResourceCrud) DeletedTarget() []string {
	return []string{
func (s *LogAnalyticsLogAnalyticsObjectCollectionRuleResourceCrud) Create() error {
	request := oci_log_analytics.CreateLogAnalyticsObjectCollectionRuleRequest{}
func (s *LogAnalyticsLogAnalyticsObjectCollectionRuleResourceCrud) Get() error {
	request := oci_log_analytics.GetLogAnalyticsObjectCollectionRuleRequest{}
func (s *LogAnalyticsLogAnalyticsObjectCollectionRuleResourceCrud) Update() error {
	if compartment, ok := s.D.GetOkExists("compartment_id"); ok && s.D.HasChange("compartment_id") {
func (s *LogAnalyticsLogAnalyticsObjectCollectionRuleResourceCrud) Delete() error {
	request := oci_log_analytics.DeleteLogAnalyticsObjectCollectionRuleRequest{}
func (s *LogAnalyticsLogAnalyticsObjectCollectionRuleResourceCrud) SetData() error {

func (s *LogAnalyticsLogAnalyticsObjectCollectionRuleResourceCrud) updateCompartment(compartment interface{}) error {
	changeCompartmentRequest := oci_log_analytics.ChangeLogAnalyticsObjectCollectionRuleCompartmentRequest{}
func (s *LogAnalyticsLogAnalyticsObjectCollectionRuleResourceCrud) mapToPropertyOverrides(fieldKeyFormat string) (oci_log_analytics.PropertyOverride, error) {
	result := oci_log_analytics.PropertyOverride{}

=== ./internal/service/log_analytics/log_analytics_namespace_storage_overlapping_recalls_data_source.go ===
func LogAnalyticsNamespaceStorageOverlappingRecallsDataSource() *schema.Resource {
	return &schema.Resource{
func readLogAnalyticsNamespaceStorageOverlappingRecalls(d *schema.ResourceData, m interface{}) error {
	sync := &LogAnalyticsNamespaceStorageOverlappingRecallsDataSourceCrud{}
func (s *LogAnalyticsNamespaceStorageOverlappingRecallsDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *LogAnalyticsNamespaceStorageOverlappingRecallsDataSourceCrud) Get() error {
	request := oci_log_analytics.ListOverlappingRecallsRequest{}
func (s *LogAnalyticsNamespaceStorageOverlappingRecallsDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/log_analytics/log_analytics_log_analytics_log_groups_data_source.go ===
func LogAnalyticsLogAnalyticsLogGroupsDataSource() *schema.Resource {
	return &schema.Resource{
func readLogAnalyticsLogAnalyticsLogGroups(d *schema.ResourceData, m interface{}) error {
	sync := &LogAnalyticsLogAnalyticsLogGroupsDataSourceCrud{}
func (s *LogAnalyticsLogAnalyticsLogGroupsDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *LogAnalyticsLogAnalyticsLogGroupsDataSourceCrud) Get() error {
	request := oci_log_analytics.ListLogAnalyticsLogGroupsRequest{}
func (s *LogAnalyticsLogAnalyticsLogGroupsDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/log_analytics/log_analytics_log_analytics_import_custom_content_resource.go ===
func LogAnalyticsLogAnalyticsImportCustomContentResource() *schema.Resource {
	return &schema.Resource{
func createLogAnalyticsLogAnalyticsImportCustomContent(d *schema.ResourceData, m interface{}) error {
	sync := &LogAnalyticsLogAnalyticsImportCustomContentResourceCrud{}
func readLogAnalyticsLogAnalyticsImportCustomContent(d *schema.ResourceData, m interface{}) error {
	return nil
func deleteLogAnalyticsLogAnalyticsImportCustomContent(d *schema.ResourceData, m interface{}) error {
	return nil
func (s *LogAnalyticsLogAnalyticsImportCustomContentResourceCrud) ID() string {
	return tfresource.GenerateDataSourceHashID("LogAnalyticsLogAnalyticsImportCustomContentResource-", LogAnalyticsLogAnalyticsImportCustomContentResource(), s.D)
func (s *LogAnalyticsLogAnalyticsImportCustomContentResourceCrud) Create() error {
	request := oci_log_analytics.ImportCustomContentRequest{}
func (s *LogAnalyticsLogAnalyticsImportCustomContentResourceCrud) SetData() error {
	if s.Res.ChangeList != nil {

=== ./internal/service/log_analytics/register_resource.go ===
func RegisterResource() {
	tfresource.RegisterResource("oci_log_analytics_log_analytics_entity", LogAnalyticsLogAnalyticsEntityResource())

=== ./internal/service/log_analytics/log_analytics_namespace_storage_recalled_data_size_data_source.go ===
func LogAnalyticsNamespaceStorageRecalledDataSizeDataSource() *schema.Resource {
	return &schema.Resource{
func readSingularLogAnalyticsNamespaceStorageRecalledDataSize(d *schema.ResourceData, m interface{}) error {
	sync := &LogAnalyticsNamespaceStorageRecalledDataSizeDataSourceCrud{}
func (s *LogAnalyticsNamespaceStorageRecalledDataSizeDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *LogAnalyticsNamespaceStorageRecalledDataSizeDataSourceCrud) Get() error {
	request := oci_log_analytics.GetRecalledDataSizeRequest{}
func (s *LogAnalyticsNamespaceStorageRecalledDataSizeDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/log_analytics/log_analytics_namespace_data_source.go ===
func LogAnalyticsNamespaceDataSource() *schema.Resource {
	return &schema.Resource{
func readSingularLogAnalyticsNamespace(d *schema.ResourceData, m interface{}) error {
	sync := &LogAnalyticsNamespaceDataSourceCrud{}
func (s *LogAnalyticsNamespaceDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *LogAnalyticsNamespaceDataSourceCrud) Get() error {
	request := oci_log_analytics.GetNamespaceRequest{}
func (s *LogAnalyticsNamespaceDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/log_analytics/log_analytics_namespace_rules_data_source.go ===
func LogAnalyticsNamespaceRulesDataSource() *schema.Resource {
	return &schema.Resource{
func readLogAnalyticsNamespaceRules(d *schema.ResourceData, m interface{}) error {
	sync := &LogAnalyticsNamespaceRulesDataSourceCrud{}
func (s *LogAnalyticsNamespaceRulesDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *LogAnalyticsNamespaceRulesDataSourceCrud) Get() error {
	request := oci_log_analytics.ListRulesRequest{}
func (s *LogAnalyticsNamespaceRulesDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/cluster_placement_groups/cluster_placement_groups_cluster_placement_group_resource.go ===
func ClusterPlacementGroupsClusterPlacementGroupResource() *schema.Resource {
	return &schema.Resource{
func createClusterPlacementGroupsClusterPlacementGroup(d *schema.ResourceData, m interface{}) error {
	sync := &ClusterPlacementGroupsClusterPlacementGroupResourceCrud{}
func readClusterPlacementGroupsClusterPlacementGroup(d *schema.ResourceData, m interface{}) error {
	sync := &ClusterPlacementGroupsClusterPlacementGroupResourceCrud{}
func updateClusterPlacementGroupsClusterPlacementGroup(d *schema.ResourceData, m interface{}) error {
	sync := &ClusterPlacementGroupsClusterPlacementGroupResourceCrud{}
func deleteClusterPlacementGroupsClusterPlacementGroup(d *schema.ResourceData, m interface{}) error {
	sync := &ClusterPlacementGroupsClusterPlacementGroupResourceCrud{}
func (s *ClusterPlacementGroupsClusterPlacementGroupResourceCrud) ID() string {
	return *s.Res.Id
func (s *ClusterPlacementGroupsClusterPlacementGroupResourceCrud) CreatedPending() []string {
	return []string{
func (s *ClusterPlacementGroupsClusterPlacementGroupResourceCrud) CreatedTarget() []string {
	return []string{
func (s *ClusterPlacementGroupsClusterPlacementGroupResourceCrud) DeletedPending() []string {
	return []string{
func (s *ClusterPlacementGroupsClusterPlacementGroupResourceCrud) DeletedTarget() []string {
	return []string{
func (s *ClusterPlacementGroupsClusterPlacementGroupResourceCrud) Create() error {
	request := oci_cluster_placement_groups.CreateClusterPlacementGroupRequest{}
func (s *ClusterPlacementGroupsClusterPlacementGroupResourceCrud) getClusterPlacementGroupFromWorkRequest(workId *string, retryPolicy *oci_common.RetryPolicy,
	actionTypeEnum oci_cluster_placement_groups.ActionTypeEnum, timeout time.Duration) error {
func (s *ClusterPlacementGroupsClusterPlacementGroupResourceCrud) Get() error {
	request := oci_cluster_placement_groups.GetClusterPlacementGroupRequest{}
func (s *ClusterPlacementGroupsClusterPlacementGroupResourceCrud) Update() error {
	if compartment, ok := s.D.GetOkExists("compartment_id"); ok && s.D.HasChange("compartment_id") {
func (s *ClusterPlacementGroupsClusterPlacementGroupResourceCrud) Delete() error {
	request := oci_cluster_placement_groups.DeleteClusterPlacementGroupRequest{}
func (s *ClusterPlacementGroupsClusterPlacementGroupResourceCrud) SetData() error {
	if s.Res.AvailabilityDomain != nil {
func (s *ClusterPlacementGroupsClusterPlacementGroupResourceCrud) StartClusterPlacementGroup() error {
	request := oci_cluster_placement_groups.ActivateClusterPlacementGroupRequest{}
func (s *ClusterPlacementGroupsClusterPlacementGroupResourceCrud) StopClusterPlacementGroup() error {
	request := oci_cluster_placement_groups.DeactivateClusterPlacementGroupRequest{}
func (s *ClusterPlacementGroupsClusterPlacementGroupResourceCrud) mapToCapabilitiesCollection(fieldKeyFormat string) (oci_cluster_placement_groups.CapabilitiesCollection, error) {
	result := oci_cluster_placement_groups.CapabilitiesCollection{}
func (s *ClusterPlacementGroupsClusterPlacementGroupResourceCrud) mapToCapabilityDetails(fieldKeyFormat string) (oci_cluster_placement_groups.CapabilityDetails, error) {
	result := oci_cluster_placement_groups.CapabilityDetails{}
func (s *ClusterPlacementGroupsClusterPlacementGroupResourceCrud) mapToPlacementInstructionDetails(fieldKeyFormat string) (oci_cluster_placement_groups.PlacementInstructionDetails, error) {
	result := oci_cluster_placement_groups.PlacementInstructionDetails{}
func (s *ClusterPlacementGroupsClusterPlacementGroupResourceCrud) updateCompartment(compartment interface{}) error {
	changeCompartmentRequest := oci_cluster_placement_groups.ChangeClusterPlacementGroupCompartmentRequest{}

=== ./internal/service/cluster_placement_groups/cluster_placement_groups_cluster_placement_group_data_source.go ===
func ClusterPlacementGroupsClusterPlacementGroupDataSource() *schema.Resource {
	fieldMap := make(map[string]*schema.Schema)
func readSingularClusterPlacementGroupsClusterPlacementGroup(d *schema.ResourceData, m interface{}) error {
	sync := &ClusterPlacementGroupsClusterPlacementGroupDataSourceCrud{}
func (s *ClusterPlacementGroupsClusterPlacementGroupDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *ClusterPlacementGroupsClusterPlacementGroupDataSourceCrud) Get() error {
	request := oci_cluster_placement_groups.GetClusterPlacementGroupRequest{}
func (s *ClusterPlacementGroupsClusterPlacementGroupDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/cluster_placement_groups/cluster_placement_groups_cluster_placement_groups_data_source.go ===
func ClusterPlacementGroupsClusterPlacementGroupsDataSource() *schema.Resource {
	return &schema.Resource{
func readClusterPlacementGroupsClusterPlacementGroups(d *schema.ResourceData, m interface{}) error {
	sync := &ClusterPlacementGroupsClusterPlacementGroupsDataSourceCrud{}
func (s *ClusterPlacementGroupsClusterPlacementGroupsDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *ClusterPlacementGroupsClusterPlacementGroupsDataSourceCrud) Get() error {
	request := oci_cluster_placement_groups.ListClusterPlacementGroupsRequest{}
func (s *ClusterPlacementGroupsClusterPlacementGroupsDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/cluster_placement_groups/register_resource.go ===
func RegisterResource() {
	tfresource.RegisterResource("oci_cluster_placement_groups_cluster_placement_group", ClusterPlacementGroupsClusterPlacementGroupResource())

=== ./internal/service/zpr/zpr_configuration_resource.go ===
func ZprConfigurationResource() *schema.Resource {
	return &schema.Resource{
func parseResourceID(id string) (string, string, error) {
	parts := strings.SplitN(id, "/", 2)
func createZprConfiguration(d *schema.ResourceData, m interface{}) error {
	sync := &ZprConfigurationResourceCrud{}
func readZprConfiguration(d *schema.ResourceData, m interface{}) error {
	sync := &ZprConfigurationResourceCrud{}
func deleteZprConfiguration(d *schema.ResourceData, m interface{}) error {
	return nil
func (s *ZprConfigurationResourceCrud) ID() string {
	return *s.Res.Id
func (s *ZprConfigurationResourceCrud) CreatedPending() []string {
	return []string{
func (s *ZprConfigurationResourceCrud) CreatedTarget() []string {
	return []string{
func (s *ZprConfigurationResourceCrud) DeletedPending() []string {
	return []string{
func (s *ZprConfigurationResourceCrud) DeletedTarget() []string {
	return []string{
func (s *ZprConfigurationResourceCrud) Create() error {
	request := oci_zpr.CreateConfigurationRequest{}
func (s *ZprConfigurationResourceCrud) getConfigurationFromWorkRequest(workId *string, retryPolicy *oci_common.RetryPolicy,
	actionTypeEnum oci_zpr.ActionTypeEnum, timeout time.Duration) error {
func (s *ZprConfigurationResourceCrud) Get() error {
	request := oci_zpr.GetConfigurationRequest{}
func (s *ZprConfigurationResourceCrud) SetData() error {
	if s.Res.CompartmentId != nil {

=== ./internal/service/zpr/zpr_zpr_policy_resource.go ===
func ZprZprPolicyResource() *schema.Resource {
	return &schema.Resource{
func createZprZprPolicy(d *schema.ResourceData, m interface{}) error {
	sync := &ZprZprPolicyResourceCrud{}
func readZprZprPolicy(d *schema.ResourceData, m interface{}) error {
	sync := &ZprZprPolicyResourceCrud{}
func updateZprZprPolicy(d *schema.ResourceData, m interface{}) error {
	sync := &ZprZprPolicyResourceCrud{}
func deleteZprZprPolicy(d *schema.ResourceData, m interface{}) error {
	sync := &ZprZprPolicyResourceCrud{}
func (s *ZprZprPolicyResourceCrud) ID() string {
	return *s.Res.Id
func (s *ZprZprPolicyResourceCrud) CreatedPending() []string {
	return []string{
func (s *ZprZprPolicyResourceCrud) CreatedTarget() []string {
	return []string{
func (s *ZprZprPolicyResourceCrud) DeletedPending() []string {
	return []string{
func (s *ZprZprPolicyResourceCrud) DeletedTarget() []string {
	return []string{
func (s *ZprZprPolicyResourceCrud) Create() error {
	request := oci_zpr.CreateZprPolicyRequest{}
func (s *ZprZprPolicyResourceCrud) getZprPolicyFromWorkRequest(workId *string, retryPolicy *oci_common.RetryPolicy,
	actionTypeEnum oci_zpr.ActionTypeEnum, timeout time.Duration) error {
func (s *ZprZprPolicyResourceCrud) Get() error {
	request := oci_zpr.GetZprPolicyRequest{}
func (s *ZprZprPolicyResourceCrud) Update() error {
	request := oci_zpr.UpdateZprPolicyRequest{}
func (s *ZprZprPolicyResourceCrud) Delete() error {
	request := oci_zpr.DeleteZprPolicyRequest{}
func (s *ZprZprPolicyResourceCrud) SetData() error {
	if s.Res.CompartmentId != nil {

=== ./internal/service/zpr/zpr_configuration_data_source.go ===
func ZprConfigurationDataSource() *schema.Resource {
	fieldMap := make(map[string]*schema.Schema)
func readSingularZprConfiguration(d *schema.ResourceData, m interface{}) error {
	sync := &ZprConfigurationDataSourceCrud{}
func (s *ZprConfigurationDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *ZprConfigurationDataSourceCrud) Get() error {
	request := oci_zpr.GetConfigurationRequest{}
func (s *ZprConfigurationDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/zpr/zpr_zpr_policy_data_source.go ===
func ZprZprPolicyDataSource() *schema.Resource {
	fieldMap := make(map[string]*schema.Schema)
func readSingularZprZprPolicy(d *schema.ResourceData, m interface{}) error {
	sync := &ZprZprPolicyDataSourceCrud{}
func (s *ZprZprPolicyDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *ZprZprPolicyDataSourceCrud) Get() error {
	request := oci_zpr.GetZprPolicyRequest{}
func (s *ZprZprPolicyDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/zpr/register_resource.go ===
func RegisterResource() {
	tfresource.RegisterResource("oci_zpr_configuration", ZprConfigurationResource())

=== ./internal/service/zpr/zpr_zpr_policies_data_source.go ===
func ZprZprPoliciesDataSource() *schema.Resource {
	return &schema.Resource{
func readZprZprPolicies(d *schema.ResourceData, m interface{}) error {
	sync := &ZprZprPoliciesDataSourceCrud{}
func (s *ZprZprPoliciesDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *ZprZprPoliciesDataSourceCrud) Get() error {
	request := oci_zpr.ListZprPoliciesRequest{}
func (s *ZprZprPoliciesDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/vbs_inst/vbs_inst_vbs_instance_resource.go ===
func VbsInstVbsInstanceResource() *schema.Resource {
	return &schema.Resource{
func createVbsInstVbsInstance(d *schema.ResourceData, m interface{}) error {
	sync := &VbsInstVbsInstanceResourceCrud{}
func readVbsInstVbsInstance(d *schema.ResourceData, m interface{}) error {
	sync := &VbsInstVbsInstanceResourceCrud{}
func updateVbsInstVbsInstance(d *schema.ResourceData, m interface{}) error {
	sync := &VbsInstVbsInstanceResourceCrud{}
func deleteVbsInstVbsInstance(d *schema.ResourceData, m interface{}) error {
	sync := &VbsInstVbsInstanceResourceCrud{}
func (s *VbsInstVbsInstanceResourceCrud) ID() string {
	return *s.Res.Id
func (s *VbsInstVbsInstanceResourceCrud) CreatedPending() []string {
	return []string{
func (s *VbsInstVbsInstanceResourceCrud) CreatedTarget() []string {
	return []string{
func (s *VbsInstVbsInstanceResourceCrud) DeletedPending() []string {
	return []string{
func (s *VbsInstVbsInstanceResourceCrud) DeletedTarget() []string {
	return []string{
func (s *VbsInstVbsInstanceResourceCrud) Create() error {
	request := oci_vbs_inst.CreateVbsInstanceRequest{}
func (s *VbsInstVbsInstanceResourceCrud) getVbsInstanceFromWorkRequest(workId *string, retryPolicy *oci_common.RetryPolicy,
	actionTypeEnum oci_vbs_inst.ActionTypeEnum, timeout time.Duration) error {
func (s *VbsInstVbsInstanceResourceCrud) Get() error {
	request := oci_vbs_inst.GetVbsInstanceRequest{}
func (s *VbsInstVbsInstanceResourceCrud) Update() error {
	if compartment, ok := s.D.GetOkExists("compartment_id"); ok && s.D.HasChange("compartment_id") {
func (s *VbsInstVbsInstanceResourceCrud) Delete() error {
	request := oci_vbs_inst.DeleteVbsInstanceRequest{}
func (s *VbsInstVbsInstanceResourceCrud) SetData() error {
	if s.Res.CompartmentId != nil {
func (s *VbsInstVbsInstanceResourceCrud) updateCompartment(compartment interface{}) error {
	changeCompartmentRequest := oci_vbs_inst.ChangeVbsInstanceCompartmentRequest{}

=== ./internal/service/vbs_inst/vbs_inst_vbs_instance_data_source.go ===
func VbsInstVbsInstanceDataSource() *schema.Resource {
	fieldMap := make(map[string]*schema.Schema)
func readSingularVbsInstVbsInstance(d *schema.ResourceData, m interface{}) error {
	sync := &VbsInstVbsInstanceDataSourceCrud{}
func (s *VbsInstVbsInstanceDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *VbsInstVbsInstanceDataSourceCrud) Get() error {
	request := oci_vbs_inst.GetVbsInstanceRequest{}
func (s *VbsInstVbsInstanceDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/vbs_inst/vbs_inst_vbs_instances_data_source.go ===
func VbsInstVbsInstancesDataSource() *schema.Resource {
	return &schema.Resource{
func readVbsInstVbsInstances(d *schema.ResourceData, m interface{}) error {
	sync := &VbsInstVbsInstancesDataSourceCrud{}
func (s *VbsInstVbsInstancesDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *VbsInstVbsInstancesDataSourceCrud) Get() error {
	request := oci_vbs_inst.ListVbsInstancesRequest{}
func (s *VbsInstVbsInstancesDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/vbs_inst/register_resource.go ===
func RegisterResource() {
	tfresource.RegisterResource("oci_vbs_inst_vbs_instance", VbsInstVbsInstanceResource())

=== ./internal/service/computeinstanceagent/computeinstanceagent_instance_agent_plugin_data_source.go ===
func ComputeinstanceagentInstanceAgentPluginDataSource() *schema.Resource {
	return &schema.Resource{
func readSingularComputeinstanceagentInstanceAgentPlugin(d *schema.ResourceData, m interface{}) error {
	sync := &ComputeinstanceagentInstanceAgentPluginDataSourceCrud{}
func (s *ComputeinstanceagentInstanceAgentPluginDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *ComputeinstanceagentInstanceAgentPluginDataSourceCrud) Get() error {
	request := oci_computeinstanceagent.GetInstanceAgentPluginRequest{}
func (s *ComputeinstanceagentInstanceAgentPluginDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/computeinstanceagent/computeinstanceagent_instance_available_plugins_data_source.go ===
func ComputeinstanceagentInstanceAvailablePluginsDataSource() *schema.Resource {
	return &schema.Resource{
func readComputeinstanceagentInstanceAvailablePlugins(d *schema.ResourceData, m interface{}) error {
	sync := &ComputeinstanceagentInstanceAvailablePluginsDataSourceCrud{}
func (s *ComputeinstanceagentInstanceAvailablePluginsDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *ComputeinstanceagentInstanceAvailablePluginsDataSourceCrud) Get() error {
	request := oci_computeinstanceagent.ListInstanceagentAvailablePluginsRequest{}
func (s *ComputeinstanceagentInstanceAvailablePluginsDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/computeinstanceagent/computeinstanceagent_instance_agent_plugins_data_source.go ===
func ComputeinstanceagentInstanceAgentPluginsDataSource() *schema.Resource {
	return &schema.Resource{
func readComputeinstanceagentInstanceAgentPlugins(d *schema.ResourceData, m interface{}) error {
	sync := &ComputeinstanceagentInstanceAgentPluginsDataSourceCrud{}
func (s *ComputeinstanceagentInstanceAgentPluginsDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *ComputeinstanceagentInstanceAgentPluginsDataSourceCrud) Get() error {
	request := oci_computeinstanceagent.ListInstanceAgentPluginsRequest{}
func (s *ComputeinstanceagentInstanceAgentPluginsDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/computeinstanceagent/register_resource.go ===
func RegisterResource() {
}

=== ./internal/service/bastion/bastion_bastion_data_source.go ===
func BastionBastionDataSource() *schema.Resource {
	fieldMap := make(map[string]*schema.Schema)
func readSingularBastionBastion(d *schema.ResourceData, m interface{}) error {
	sync := &BastionBastionDataSourceCrud{}
func (s *BastionBastionDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *BastionBastionDataSourceCrud) Get() error {
	request := oci_bastion.GetBastionRequest{}
func (s *BastionBastionDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/bastion/bastion_session_resource.go ===
func BastionSessionResource() *schema.Resource {
	return &schema.Resource{
func createBastionSession(d *schema.ResourceData, m interface{}) error {
	sync := &BastionSessionResourceCrud{}
func readBastionSession(d *schema.ResourceData, m interface{}) error {
	sync := &BastionSessionResourceCrud{}
func updateBastionSession(d *schema.ResourceData, m interface{}) error {
	sync := &BastionSessionResourceCrud{}
func deleteBastionSession(d *schema.ResourceData, m interface{}) error {
	sync := &BastionSessionResourceCrud{}
func (s *BastionSessionResourceCrud) ID() string {
	return *s.Res.Id
func (s *BastionSessionResourceCrud) CreatedPending() []string {
	return []string{
func (s *BastionSessionResourceCrud) CreatedTarget() []string {
	return []string{
func (s *BastionSessionResourceCrud) DeletedPending() []string {
	return []string{
func (s *BastionSessionResourceCrud) DeletedTarget() []string {
	return []string{
func (s *BastionSessionResourceCrud) Create() error {
	request := oci_bastion.CreateSessionRequest{}
func (s *BastionSessionResourceCrud) getSessionFromWorkRequest(workId *string, retryPolicy *oci_common.RetryPolicy,
	actionTypeEnum oci_bastion.ActionTypeEnum, timeout time.Duration) error {
func (s *BastionSessionResourceCrud) Get() error {
	request := oci_bastion.GetSessionRequest{}
func (s *BastionSessionResourceCrud) Update() error {
	request := oci_bastion.UpdateSessionRequest{}
func (s *BastionSessionResourceCrud) Delete() error {
	request := oci_bastion.DeleteSessionRequest{}
func (s *BastionSessionResourceCrud) SetData() error {
	if s.Res.BastionId != nil {
func (s *BastionSessionResourceCrud) mapToCreateSessionTargetResourceDetails(fieldKeyFormat string) (oci_bastion.CreateSessionTargetResourceDetails, error) {
	var baseObject oci_bastion.CreateSessionTargetResourceDetails
func TargetResourceDetailsToMap(obj *oci_bastion.TargetResourceDetails) map[string]interface{} {
	result := map[string]interface{}{}
func (s *BastionSessionResourceCrud) mapToPublicKeyDetails(fieldKeyFormat string) (oci_bastion.PublicKeyDetails, error) {
	result := oci_bastion.PublicKeyDetails{}

=== ./internal/service/bastion/bastion_bastions_data_source.go ===
func BastionBastionsDataSource() *schema.Resource {
	return &schema.Resource{
func readBastionBastions(d *schema.ResourceData, m interface{}) error {
	sync := &BastionBastionsDataSourceCrud{}
func (s *BastionBastionsDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *BastionBastionsDataSourceCrud) Get() error {
	request := oci_bastion.ListBastionsRequest{}
func (s *BastionBastionsDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/bastion/bastion_session_data_source.go ===
func BastionSessionDataSource() *schema.Resource {
	fieldMap := make(map[string]*schema.Schema)
func readSingularBastionSession(d *schema.ResourceData, m interface{}) error {
	sync := &BastionSessionDataSourceCrud{}
func (s *BastionSessionDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *BastionSessionDataSourceCrud) Get() error {
	request := oci_bastion.GetSessionRequest{}
func (s *BastionSessionDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/bastion/bastion_sessions_data_source.go ===
func BastionSessionsDataSource() *schema.Resource {
	return &schema.Resource{
func readBastionSessions(d *schema.ResourceData, m interface{}) error {
	sync := &BastionSessionsDataSourceCrud{}
func (s *BastionSessionsDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *BastionSessionsDataSourceCrud) Get() error {
	request := oci_bastion.ListSessionsRequest{}
func (s *BastionSessionsDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/bastion/bastion_bastion_resource.go ===
func BastionBastionResource() *schema.Resource {
	return &schema.Resource{
func createBastionBastion(d *schema.ResourceData, m interface{}) error {
	sync := &BastionBastionResourceCrud{}
func readBastionBastion(d *schema.ResourceData, m interface{}) error {
	sync := &BastionBastionResourceCrud{}
func updateBastionBastion(d *schema.ResourceData, m interface{}) error {
	sync := &BastionBastionResourceCrud{}
func deleteBastionBastion(d *schema.ResourceData, m interface{}) error {
	sync := &BastionBastionResourceCrud{}
func (s *BastionBastionResourceCrud) ID() string {
	return *s.Res.Id
func (s *BastionBastionResourceCrud) CreatedPending() []string {
	return []string{
func (s *BastionBastionResourceCrud) CreatedTarget() []string {
	return []string{
func (s *BastionBastionResourceCrud) DeletedPending() []string {
	return []string{
func (s *BastionBastionResourceCrud) DeletedTarget() []string {
	return []string{
func (s *BastionBastionResourceCrud) Create() error {
	request := oci_bastion.CreateBastionRequest{}
func (s *BastionBastionResourceCrud) getBastionFromWorkRequest(workId *string, retryPolicy *oci_common.RetryPolicy,
	actionTypeEnum oci_bastion.ActionTypeEnum, timeout time.Duration) error {
func (s *BastionBastionResourceCrud) Get() error {
	request := oci_bastion.GetBastionRequest{}
func (s *BastionBastionResourceCrud) Update() error {
	if compartment, ok := s.D.GetOkExists("compartment_id"); ok && s.D.HasChange("compartment_id") {
func (s *BastionBastionResourceCrud) Delete() error {
	request := oci_bastion.DeleteBastionRequest{}
func (s *BastionBastionResourceCrud) SetData() error {
	if s.Res.BastionType != nil {
func (s *BastionBastionResourceCrud) updateCompartment(compartment interface{}) error {
	changeCompartmentRequest := oci_bastion.ChangeBastionCompartmentRequest{}

=== ./internal/service/bastion/register_resource.go ===
func RegisterResource() {
	tfresource.RegisterResource("oci_bastion_bastion", BastionBastionResource())

=== ./internal/service/desktops/desktops_desktop_pools_data_source.go ===
func DesktopsDesktopPoolsDataSource() *schema.Resource {
	return &schema.Resource{
func readDesktopsDesktopPools(d *schema.ResourceData, m interface{}) error {
	sync := &DesktopsDesktopPoolsDataSourceCrud{}
func (s *DesktopsDesktopPoolsDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *DesktopsDesktopPoolsDataSourceCrud) Get() error {
	request := oci_desktops.ListDesktopPoolsRequest{}
func (s *DesktopsDesktopPoolsDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/desktops/desktops_desktop_pool_desktops_data_source.go ===
func DesktopsDesktopPoolDesktopsDataSource() *schema.Resource {
	return &schema.Resource{
func readDesktopsDesktopPoolDesktops(d *schema.ResourceData, m interface{}) error {
	sync := &DesktopsDesktopPoolDesktopsDataSourceCrud{}
func (s *DesktopsDesktopPoolDesktopsDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *DesktopsDesktopPoolDesktopsDataSourceCrud) Get() error {
	request := oci_desktops.ListDesktopPoolDesktopsRequest{}
func (s *DesktopsDesktopPoolDesktopsDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/desktops/desktops_desktop_pool_volumes_data_source.go ===
func DesktopsDesktopPoolVolumesDataSource() *schema.Resource {
	return &schema.Resource{
func readDesktopsDesktopPoolVolumes(d *schema.ResourceData, m interface{}) error {
	sync := &DesktopsDesktopPoolVolumesDataSourceCrud{}
func (s *DesktopsDesktopPoolVolumesDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *DesktopsDesktopPoolVolumesDataSourceCrud) Get() error {
	request := oci_desktops.ListDesktopPoolVolumesRequest{}
func (s *DesktopsDesktopPoolVolumesDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/desktops/desktops_desktops_data_source.go ===
func DesktopsDesktopsDataSource() *schema.Resource {
	return &schema.Resource{
func readDesktopsDesktops(d *schema.ResourceData, m interface{}) error {
	sync := &DesktopsDesktopsDataSourceCrud{}
func (s *DesktopsDesktopsDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *DesktopsDesktopsDataSourceCrud) Get() error {
	request := oci_desktops.ListDesktopsRequest{}
func (s *DesktopsDesktopsDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/desktops/desktops_desktop_pool_resource.go ===
func DesktopsDesktopPoolResource() *schema.Resource {
	return &schema.Resource{
func createDesktopsDesktopPool(d *schema.ResourceData, m interface{}) error {
	sync := &DesktopsDesktopPoolResourceCrud{}
func readDesktopsDesktopPool(d *schema.ResourceData, m interface{}) error {
	sync := &DesktopsDesktopPoolResourceCrud{}
func updateDesktopsDesktopPool(d *schema.ResourceData, m interface{}) error {
	sync := &DesktopsDesktopPoolResourceCrud{}
func deleteDesktopsDesktopPool(d *schema.ResourceData, m interface{}) error {
	sync := &DesktopsDesktopPoolResourceCrud{}
func (s *DesktopsDesktopPoolResourceCrud) ID() string {
	return *s.Res.Id
func (s *DesktopsDesktopPoolResourceCrud) CreatedPending() []string {
	return []string{
func (s *DesktopsDesktopPoolResourceCrud) CreatedTarget() []string {
	return []string{
func (s *DesktopsDesktopPoolResourceCrud) DeletedPending() []string {
	return []string{
func (s *DesktopsDesktopPoolResourceCrud) DeletedTarget() []string {
	return []string{
func (s *DesktopsDesktopPoolResourceCrud) Create() error {
	request := oci_desktops.CreateDesktopPoolRequest{}
func (s *DesktopsDesktopPoolResourceCrud) getDesktopPoolFromWorkRequest(workId *string, retryPolicy *oci_common.RetryPolicy,
	actionTypeEnum oci_desktops.ActionTypeEnum, timeout time.Duration) error {
func (s *DesktopsDesktopPoolResourceCrud) Get() error {
	request := oci_desktops.GetDesktopPoolRequest{}
func (s *DesktopsDesktopPoolResourceCrud) Update() error {
	if compartment, ok := s.D.GetOkExists("compartment_id"); ok && s.D.HasChange("compartment_id") {
func (s *DesktopsDesktopPoolResourceCrud) Delete() error {
	request := oci_desktops.DeleteDesktopPoolRequest{}
func (s *DesktopsDesktopPoolResourceCrud) SetData() error {

func (s *DesktopsDesktopPoolResourceCrud) mapToCreateDesktopPoolShapeConfigDetails(fieldKeyFormat string) (oci_desktops.CreateDesktopPoolShapeConfigDetails, error) {
	result := oci_desktops.CreateDesktopPoolShapeConfigDetails{}
func (s *DesktopsDesktopPoolResourceCrud) mapToCreateDesktopPoolPrivateAccessDetails(fieldKeyFormat string) (oci_desktops.CreateDesktopPoolPrivateAccessDetails, error) {
	result := oci_desktops.CreateDesktopPoolPrivateAccessDetails{}
func (s *DesktopsDesktopPoolResourceCrud) mapToCreateDesktopPoolDesktopSessionLifecycleActions(fieldKeyFormat string) (oci_desktops.CreateDesktopPoolDesktopSessionLifecycleActions, error) {
	result := oci_desktops.CreateDesktopPoolDesktopSessionLifecycleActions{}
func (s *DesktopsDesktopPoolResourceCrud) mapToDesktopAvailabilityPolicy(fieldKeyFormat string) (oci_desktops.DesktopAvailabilityPolicy, error) {
	result := oci_desktops.DesktopAvailabilityPolicy{}
func (s *DesktopsDesktopPoolResourceCrud) mapToDesktopDevicePolicy(fieldKeyFormat string) (oci_desktops.DesktopDevicePolicy, error) {
	result := oci_desktops.DesktopDevicePolicy{}
func (s *DesktopsDesktopPoolResourceCrud) mapToDesktopImage(fieldKeyFormat string) (oci_desktops.DesktopImage, error) {
	result := oci_desktops.DesktopImage{}
func (s *DesktopsDesktopPoolResourceCrud) mapToDesktopNetworkConfiguration(fieldKeyFormat string) (oci_desktops.DesktopNetworkConfiguration, error) {
	result := oci_desktops.DesktopNetworkConfiguration{}
func (s *DesktopsDesktopPoolResourceCrud) mapToDesktopSchedule(fieldKeyFormat string) (oci_desktops.DesktopSchedule, error) {
	result := oci_desktops.DesktopSchedule{}
func (s *DesktopsDesktopPoolResourceCrud) mapToDisconnectConfig(fieldKeyFormat string) (oci_desktops.DisconnectConfig, error) {
	result := oci_desktops.DisconnectConfig{}
func (s *DesktopsDesktopPoolResourceCrud) mapToInactivityConfig(fieldKeyFormat string) (oci_desktops.InactivityConfig, error) {
	result := oci_desktops.InactivityConfig{}
func (s *DesktopsDesktopPoolResourceCrud) updateCompartment(compartment interface{}) error {
	changeCompartmentRequest := oci_desktops.ChangeDesktopPoolCompartmentRequest{}

=== ./internal/service/desktops/desktops_desktop_data_source.go ===
func DesktopsDesktopDataSource() *schema.Resource {
	return &schema.Resource{
func readSingularDesktopsDesktop(d *schema.ResourceData, m interface{}) error {
	sync := &DesktopsDesktopDataSourceCrud{}
func (s *DesktopsDesktopDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *DesktopsDesktopDataSourceCrud) Get() error {
	request := oci_desktops.GetDesktopRequest{}
func (s *DesktopsDesktopDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/desktops/desktops_desktop_pool_data_source.go ===
func DesktopsDesktopPoolDataSource() *schema.Resource {
	fieldMap := make(map[string]*schema.Schema)
func readSingularDesktopsDesktopPool(d *schema.ResourceData, m interface{}) error {
	sync := &DesktopsDesktopPoolDataSourceCrud{}
func (s *DesktopsDesktopPoolDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *DesktopsDesktopPoolDataSourceCrud) Get() error {
	request := oci_desktops.GetDesktopPoolRequest{}
func (s *DesktopsDesktopPoolDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/desktops/register_resource.go ===
func RegisterResource() {
	tfresource.RegisterResource("oci_desktops_desktop_pool", DesktopsDesktopPoolResource())

=== ./internal/service/ons/ons_notification_topics_data_source.go ===
func OnsNotificationTopicsDataSource() *schema.Resource {
	return &schema.Resource{
func readOnsNotificationTopics(d *schema.ResourceData, m interface{}) error {
	sync := &OnsNotificationTopicsDataSourceCrud{}
func (s *OnsNotificationTopicsDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *OnsNotificationTopicsDataSourceCrud) Get() error {
	request := oci_ons.ListTopicsRequest{}
func (s *OnsNotificationTopicsDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/ons/ons_notification_topic_resource.go ===
func OnsNotificationTopicResource() *schema.Resource {
	return &schema.Resource{
func createOnsNotificationTopic(d *schema.ResourceData, m interface{}) error {
	sync := &OnsNotificationTopicResourceCrud{}
func readOnsNotificationTopic(d *schema.ResourceData, m interface{}) error {
	sync := &OnsNotificationTopicResourceCrud{}
func updateOnsNotificationTopic(d *schema.ResourceData, m interface{}) error {
	sync := &OnsNotificationTopicResourceCrud{}
func deleteOnsNotificationTopic(d *schema.ResourceData, m interface{}) error {
	sync := &OnsNotificationTopicResourceCrud{}
func (s *OnsNotificationTopicResourceCrud) ID() string {
	return *s.Res.TopicId
func (s *OnsNotificationTopicResourceCrud) CreatedPending() []string {
	return []string{
func (s *OnsNotificationTopicResourceCrud) CreatedTarget() []string {
	return []string{
func (s *OnsNotificationTopicResourceCrud) DeletedPending() []string {
	return []string{
func (s *OnsNotificationTopicResourceCrud) DeletedTarget() []string {
	avoidWaitingForDeleteTarget, _ := strconv.ParseBool(utils.GetEnvSettingWithDefault("avoid_waiting_for_delete_target", "false"))
func (s *OnsNotificationTopicResourceCrud) Create() error {
	request := oci_ons.CreateTopicRequest{}
func (s *OnsNotificationTopicResourceCrud) Get() error {
	request := oci_ons.GetTopicRequest{}
func (s *OnsNotificationTopicResourceCrud) Update() error {
	if compartment, ok := s.D.GetOkExists("compartment_id"); ok && s.D.HasChange("compartment_id") {
func (s *OnsNotificationTopicResourceCrud) Delete() error {
	request := oci_ons.DeleteTopicRequest{}
func (s *OnsNotificationTopicResourceCrud) SetData() error {

func (s *OnsNotificationTopicResourceCrud) updateCompartment(compartment interface{}) error {
	changeCompartmentRequest := oci_ons.ChangeTopicCompartmentRequest{}

=== ./internal/service/ons/ons_subscription_data_source.go ===
func OnsSubscriptionDataSource() *schema.Resource {
	fieldMap := make(map[string]*schema.Schema)
func readSingularOnsSubscription(d *schema.ResourceData, m interface{}) error {
	sync := &OnsSubscriptionDataSourceCrud{}
func (s *OnsSubscriptionDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *OnsSubscriptionDataSourceCrud) Get() error {
	request := oci_ons.GetSubscriptionRequest{}
func (s *OnsSubscriptionDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/ons/ons_export.go ===
func getOnsNotificationTopicId(resource *tf_export.OCIResource) (string, error) {
	id, ok := resource.SourceAttributes["topic_id"].(string)

=== ./internal/service/ons/ons_subscription_resource.go ===
func OnsSubscriptionResource() *schema.Resource {
	return &schema.Resource{
func createOnsSubscription(d *schema.ResourceData, m interface{}) error {
	sync := &OnsSubscriptionResourceCrud{}
func readOnsSubscription(d *schema.ResourceData, m interface{}) error {
	sync := &OnsSubscriptionResourceCrud{}
func updateOnsSubscription(d *schema.ResourceData, m interface{}) error {
	sync := &OnsSubscriptionResourceCrud{}
func deleteOnsSubscription(d *schema.ResourceData, m interface{}) error {
	sync := &OnsSubscriptionResourceCrud{}
func (s *OnsSubscriptionResourceCrud) ID() string {
	return *s.Res.Id
func (s *OnsSubscriptionResourceCrud) CreatedPending() []string {
	return []string{}
func (s *OnsSubscriptionResourceCrud) CreatedTarget() []string {
	return []string{
func (s *OnsSubscriptionResourceCrud) DeletedPending() []string {
	return []string{}
func (s *OnsSubscriptionResourceCrud) DeletedTarget() []string {
	return []string{
func (s *OnsSubscriptionResourceCrud) Create() error {
	request := oci_ons.CreateSubscriptionRequest{}
func (s *OnsSubscriptionResourceCrud) Get() error {
	request := oci_ons.GetSubscriptionRequest{}
func (s *OnsSubscriptionResourceCrud) Update() error {
	if compartment, ok := s.D.GetOkExists("compartment_id"); ok && s.D.HasChange("compartment_id") {
func (s *OnsSubscriptionResourceCrud) Delete() error {
	request := oci_ons.DeleteSubscriptionRequest{}
func (s *OnsSubscriptionResourceCrud) SetData() error {
	if s.Res.CompartmentId != nil {
func jsonStringDiffSuppresionFunction(key string, old string, new string, d *schema.ResourceData) bool {
	if old == "" && new == "" {
func (s *OnsSubscriptionResourceCrud) updateCompartment(compartment interface{}) error {
	changeCompartmentRequest := oci_ons.ChangeSubscriptionCompartmentRequest{}

=== ./internal/service/ons/ons_notification_topic_data_source.go ===
func OnsNotificationTopicDataSource() *schema.Resource {
	fieldMap := make(map[string]*schema.Schema)
func readSingularOnsNotificationTopic(d *schema.ResourceData, m interface{}) error {
	sync := &OnsNotificationTopicDataSourceCrud{}
func (s *OnsNotificationTopicDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *OnsNotificationTopicDataSourceCrud) Get() error {
	request := oci_ons.GetTopicRequest{}
func (s *OnsNotificationTopicDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/ons/ons_subscriptions_data_source.go ===
func OnsSubscriptionsDataSource() *schema.Resource {
	return &schema.Resource{
func readOnsSubscriptions(d *schema.ResourceData, m interface{}) error {
	sync := &OnsSubscriptionsDataSourceCrud{}
func (s *OnsSubscriptionsDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *OnsSubscriptionsDataSourceCrud) Get() error {
	request := oci_ons.ListSubscriptionsRequest{}
func (s *OnsSubscriptionsDataSourceCrud) SetData() error {
	if s.Res == nil {
func modifySubscriptionSchema(resourceSchema *schema.Resource) *schema.Resource {
	resourceSchema.Schema["delivery_policy"] = &schema.Schema{

=== ./internal/service/ons/register_resource.go ===
func RegisterResource() {
	tfresource.RegisterResource("oci_ons_notification_topic", OnsNotificationTopicResource())

=== ./internal/service/database_tools/database_tools_database_tools_private_endpoint_resource.go ===
func DatabaseToolsDatabaseToolsPrivateEndpointResource() *schema.Resource {
	return &schema.Resource{
func createDatabaseToolsDatabaseToolsPrivateEndpoint(d *schema.ResourceData, m interface{}) error {
	sync := &DatabaseToolsDatabaseToolsPrivateEndpointResourceCrud{}
func readDatabaseToolsDatabaseToolsPrivateEndpoint(d *schema.ResourceData, m interface{}) error {
	sync := &DatabaseToolsDatabaseToolsPrivateEndpointResourceCrud{}
func updateDatabaseToolsDatabaseToolsPrivateEndpoint(d *schema.ResourceData, m interface{}) error {
	sync := &DatabaseToolsDatabaseToolsPrivateEndpointResourceCrud{}
func deleteDatabaseToolsDatabaseToolsPrivateEndpoint(d *schema.ResourceData, m interface{}) error {
	sync := &DatabaseToolsDatabaseToolsPrivateEndpointResourceCrud{}
func (s *DatabaseToolsDatabaseToolsPrivateEndpointResourceCrud) ID() string {
	return *s.Res.Id
func (s *DatabaseToolsDatabaseToolsPrivateEndpointResourceCrud) CreatedPending() []string {
	return []string{
func (s *DatabaseToolsDatabaseToolsPrivateEndpointResourceCrud) CreatedTarget() []string {
	return []string{
func (s *DatabaseToolsDatabaseToolsPrivateEndpointResourceCrud) DeletedPending() []string {
	return []string{
func (s *DatabaseToolsDatabaseToolsPrivateEndpointResourceCrud) DeletedTarget() []string {
	return []string{
func (s *DatabaseToolsDatabaseToolsPrivateEndpointResourceCrud) Create() error {
	request := oci_database_tools.CreateDatabaseToolsPrivateEndpointRequest{}
func (s *DatabaseToolsDatabaseToolsPrivateEndpointResourceCrud) getDatabaseToolsPrivateEndpointFromWorkRequest(workId *string, retryPolicy *oci_common.RetryPolicy,
	actionTypeEnum oci_database_tools.ActionTypeEnum, timeout time.Duration) error {
func (s *DatabaseToolsDatabaseToolsPrivateEndpointResourceCrud) Get() error {
	request := oci_database_tools.GetDatabaseToolsPrivateEndpointRequest{}
func (s *DatabaseToolsDatabaseToolsPrivateEndpointResourceCrud) Update() error {
	if compartment, ok := s.D.GetOkExists("compartment_id"); ok && s.D.HasChange("compartment_id") {
func (s *DatabaseToolsDatabaseToolsPrivateEndpointResourceCrud) Delete() error {
	request := oci_database_tools.DeleteDatabaseToolsPrivateEndpointRequest{}
func (s *DatabaseToolsDatabaseToolsPrivateEndpointResourceCrud) SetData() error {
	s.D.Set("additional_fqdns", s.Res.AdditionalFqdns)
func (s *DatabaseToolsDatabaseToolsPrivateEndpointResourceCrud) mapToResourceLock(fieldKeyFormat string) (oci_database_tools.ResourceLock, error) {
	result := oci_database_tools.ResourceLock{}
func PrivateEndpointResourceLockToMap(obj oci_database_tools.ResourceLock) map[string]interface{} {
	result := map[string]interface{}{}
func (s *DatabaseToolsDatabaseToolsPrivateEndpointResourceCrud) updateCompartment(compartment interface{}) error {
	changeCompartmentRequest := oci_database_tools.ChangeDatabaseToolsPrivateEndpointCompartmentRequest{}

=== ./internal/service/database_tools/database_tools_database_tools_endpoint_service_data_source.go ===
func DatabaseToolsDatabaseToolsEndpointServiceDataSource() *schema.Resource {
	return &schema.Resource{
func readSingularDatabaseToolsDatabaseToolsEndpointService(d *schema.ResourceData, m interface{}) error {
	sync := &DatabaseToolsDatabaseToolsEndpointServiceDataSourceCrud{}
func (s *DatabaseToolsDatabaseToolsEndpointServiceDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *DatabaseToolsDatabaseToolsEndpointServiceDataSourceCrud) Get() error {
	request := oci_database_tools.GetDatabaseToolsEndpointServiceRequest{}
func (s *DatabaseToolsDatabaseToolsEndpointServiceDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/database_tools/database_tools_database_tools_connection_resource.go ===
func DatabaseToolsDatabaseToolsConnectionResource() *schema.Resource {
	return &schema.Resource{
func createDatabaseToolsDatabaseToolsConnection(d *schema.ResourceData, m interface{}) error {
	sync := &DatabaseToolsDatabaseToolsConnectionResourceCrud{}
func readDatabaseToolsDatabaseToolsConnection(d *schema.ResourceData, m interface{}) error {
	sync := &DatabaseToolsDatabaseToolsConnectionResourceCrud{}
func updateDatabaseToolsDatabaseToolsConnection(d *schema.ResourceData, m interface{}) error {
	sync := &DatabaseToolsDatabaseToolsConnectionResourceCrud{}
func deleteDatabaseToolsDatabaseToolsConnection(d *schema.ResourceData, m interface{}) error {
	sync := &DatabaseToolsDatabaseToolsConnectionResourceCrud{}
func (s *DatabaseToolsDatabaseToolsConnectionResourceCrud) ID() string {
	databaseToolsConnection := *s.Res
func (s *DatabaseToolsDatabaseToolsConnectionResourceCrud) CreatedPending() []string {
	return []string{
func (s *DatabaseToolsDatabaseToolsConnectionResourceCrud) CreatedTarget() []string {
	return []string{
func (s *DatabaseToolsDatabaseToolsConnectionResourceCrud) DeletedPending() []string {
	return []string{
func (s *DatabaseToolsDatabaseToolsConnectionResourceCrud) DeletedTarget() []string {
	return []string{
func (s *DatabaseToolsDatabaseToolsConnectionResourceCrud) Create() error {
	request := oci_database_tools.CreateDatabaseToolsConnectionRequest{}
func (s *DatabaseToolsDatabaseToolsConnectionResourceCrud) getDatabaseToolsConnectionFromWorkRequest(workId *string, retryPolicy *oci_common.RetryPolicy,
	actionTypeEnum oci_database_tools.ActionTypeEnum, timeout time.Duration) error {
func (s *DatabaseToolsDatabaseToolsConnectionResourceCrud) Get() error {
	request := oci_database_tools.GetDatabaseToolsConnectionRequest{}
func (s *DatabaseToolsDatabaseToolsConnectionResourceCrud) Update() error {
	if compartment, ok := s.D.GetOkExists("compartment_id"); ok && s.D.HasChange("compartment_id") {
func (s *DatabaseToolsDatabaseToolsConnectionResourceCrud) Delete() error {
	request := oci_database_tools.DeleteDatabaseToolsConnectionRequest{}
func (s *DatabaseToolsDatabaseToolsConnectionResourceCrud) SetData() error {
	switch v := (*s.Res).(type) {
func (s *DatabaseToolsDatabaseToolsConnectionResourceCrud) mapToCreateDatabaseToolsRelatedResourceDetails(fieldKeyFormat string) (oci_database_tools.CreateDatabaseToolsRelatedResourceDetails, error) {
	result := oci_database_tools.CreateDatabaseToolsRelatedResourceDetails{}
func CreateDatabaseToolsRelatedResourceDetailsToMap(obj *oci_database_tools.CreateDatabaseToolsRelatedResourceDetails) map[string]interface{} {
	result := map[string]interface{}{}
func (s *DatabaseToolsDatabaseToolsConnectionResourceCrud) mapToCreateDatabaseToolsRelatedResourceMySqlDetails(fieldKeyFormat string) (oci_database_tools.CreateDatabaseToolsRelatedResourceMySqlDetails, error) {
	result := oci_database_tools.CreateDatabaseToolsRelatedResourceMySqlDetails{}
func CreateDatabaseToolsRelatedResourceMySqlDetailsToMap(obj *oci_database_tools.CreateDatabaseToolsRelatedResourceMySqlDetails) map[string]interface{} {
	result := map[string]interface{}{}
func (s *DatabaseToolsDatabaseToolsConnectionResourceCrud) mapToCreateDatabaseToolsRelatedResourcePostgresqlDetails(fieldKeyFormat string) (oci_database_tools.CreateDatabaseToolsRelatedResourcePostgresqlDetails, error) {
	result := oci_database_tools.CreateDatabaseToolsRelatedResourcePostgresqlDetails{}
func CreateDatabaseToolsRelatedResourcePostgresqlDetailsToMap(obj *oci_database_tools.CreateDatabaseToolsRelatedResourcePostgresqlDetails) map[string]interface{} {
	result := map[string]interface{}{}
func (s *DatabaseToolsDatabaseToolsConnectionResourceCrud) mapToDatabaseToolsConnectionOracleDatabaseProxyClient(fieldKeyFormat string) (oci_database_tools.DatabaseToolsConnectionOracleDatabaseProxyClient, error) {
	var baseObject oci_database_tools.DatabaseToolsConnectionOracleDatabaseProxyClient
func (s *DatabaseToolsDatabaseToolsConnectionResourceCrud) mapToDatabaseToolsConnectionOracleDatabaseProxyClientDetails(fieldKeyFormat string) (oci_database_tools.DatabaseToolsConnectionOracleDatabaseProxyClientDetails, error) {
	var baseObject oci_database_tools.DatabaseToolsConnectionOracleDatabaseProxyClientDetails
func (s *DatabaseToolsDatabaseToolsConnectionResourceCrud) mapToDatabaseToolsConnectionOracleDatabaseProxyClientSummary(fieldKeyFormat string) (oci_database_tools.DatabaseToolsConnectionOracleDatabaseProxyClientSummary, error) {
	var baseObject oci_database_tools.DatabaseToolsConnectionOracleDatabaseProxyClientSummary
func (s *DatabaseToolsDatabaseToolsConnectionResourceCrud) mapToDatabaseToolsKeyStoreContent(fieldKeyFormat string) (oci_database_tools.DatabaseToolsKeyStoreContent, error) {
	var baseObject oci_database_tools.DatabaseToolsKeyStoreContent
func (s *DatabaseToolsDatabaseToolsConnectionResourceCrud) mapToDatabaseToolsKeyStoreContentDetails(fieldKeyFormat string) (oci_database_tools.DatabaseToolsKeyStoreContentDetails, error) {
	var baseObject oci_database_tools.DatabaseToolsKeyStoreContentDetails
func (s *DatabaseToolsDatabaseToolsConnectionResourceCrud) mapToDatabaseToolsKeyStoreContentGenericJdbc(fieldKeyFormat string) (oci_database_tools.DatabaseToolsKeyStoreContentGenericJdbc, error) {
	var baseObject oci_database_tools.DatabaseToolsKeyStoreContentGenericJdbc
func (s *DatabaseToolsDatabaseToolsConnectionResourceCrud) mapToDatabaseToolsKeyStoreContentGenericJdbcDetails(fieldKeyFormat string) (oci_database_tools.DatabaseToolsKeyStoreContentGenericJdbcDetails, error) {
	var baseObject oci_database_tools.DatabaseToolsKeyStoreContentGenericJdbcDetails
func (s *DatabaseToolsDatabaseToolsConnectionResourceCrud) mapToDatabaseToolsKeyStoreContentGenericJdbcSummary(fieldKeyFormat string) (oci_database_tools.DatabaseToolsKeyStoreContentGenericJdbcSummary, error) {
	var baseObject oci_database_tools.DatabaseToolsKeyStoreContentGenericJdbcSummary
func (s *DatabaseToolsDatabaseToolsConnectionResourceCrud) mapToDatabaseToolsKeyStoreContentMySql(fieldKeyFormat string) (oci_database_tools.DatabaseToolsKeyStoreContentMySql, error) {
	var baseObject oci_database_tools.DatabaseToolsKeyStoreContentMySql
func (s *DatabaseToolsDatabaseToolsConnectionResourceCrud) mapToDatabaseToolsKeyStore(fieldKeyFormat string) (oci_database_tools.DatabaseToolsKeyStore, error) {
	result := oci_database_tools.DatabaseToolsKeyStore{}
func (s *DatabaseToolsDatabaseToolsConnectionResourceCrud) mapToDatabaseToolsKeyStoreContentMySqlDetails(fieldKeyFormat string) (oci_database_tools.DatabaseToolsKeyStoreContentMySqlDetails, error) {
	var baseObject oci_database_tools.DatabaseToolsKeyStoreContentMySqlDetails
func (s *DatabaseToolsDatabaseToolsConnectionResourceCrud) mapToDatabaseToolsKeyStoreContentMySqlSummary(fieldKeyFormat string) (oci_database_tools.DatabaseToolsKeyStoreContentMySqlSummary, error) {
	var baseObject oci_database_tools.DatabaseToolsKeyStoreContentMySqlSummary
func (s *DatabaseToolsDatabaseToolsConnectionResourceCrud) mapToDatabaseToolsKeyStoreContentPostgresql(fieldKeyFormat string) (oci_database_tools.DatabaseToolsKeyStoreContentPostgresql, error) {
	var baseObject oci_database_tools.DatabaseToolsKeyStoreContentPostgresql
func (s *DatabaseToolsDatabaseToolsConnectionResourceCrud) mapToDatabaseToolsKeyStoreContentPostgresqlDetails(fieldKeyFormat string) (oci_database_tools.DatabaseToolsKeyStoreContentPostgresqlDetails, error) {
	var baseObject oci_database_tools.DatabaseToolsKeyStoreContentPostgresqlDetails
func (s *DatabaseToolsDatabaseToolsConnectionResourceCrud) mapToDatabaseToolsKeyStoreContentPostgresqlSummary(fieldKeyFormat string) (oci_database_tools.DatabaseToolsKeyStoreContentPostgresqlSummary, error) {
	var baseObject oci_database_tools.DatabaseToolsKeyStoreContentPostgresqlSummary
func (s *DatabaseToolsDatabaseToolsConnectionResourceCrud) mapToDatabaseToolsKeyStoreContentSummary(fieldKeyFormat string) (oci_database_tools.DatabaseToolsKeyStoreContentSummary, error) {
	var baseObject oci_database_tools.DatabaseToolsKeyStoreContentSummary
func (s *DatabaseToolsDatabaseToolsConnectionResourceCrud) mapToDatabaseToolsKeyStoreDetails(fieldKeyFormat string) (oci_database_tools.DatabaseToolsKeyStoreDetails, error) {
	result := oci_database_tools.DatabaseToolsKeyStoreDetails{}
func (s *DatabaseToolsDatabaseToolsConnectionResourceCrud) mapToDatabaseToolsKeyStoreGenericJdbc(fieldKeyFormat string) (oci_database_tools.DatabaseToolsKeyStoreGenericJdbc, error) {
	result := oci_database_tools.DatabaseToolsKeyStoreGenericJdbc{}
func (s *DatabaseToolsDatabaseToolsConnectionResourceCrud) mapToDatabaseToolsKeyStoreGenericJdbcDetails(fieldKeyFormat string) (oci_database_tools.DatabaseToolsKeyStoreGenericJdbcDetails, error) {
	result := oci_database_tools.DatabaseToolsKeyStoreGenericJdbcDetails{}
func (s *DatabaseToolsDatabaseToolsConnectionResourceCrud) mapToDatabaseToolsKeyStoreGenericJdbcSummary(fieldKeyFormat string) (oci_database_tools.DatabaseToolsKeyStoreGenericJdbcSummary, error) {
	result := oci_database_tools.DatabaseToolsKeyStoreGenericJdbcSummary{}
func (s *DatabaseToolsDatabaseToolsConnectionResourceCrud) mapToDatabaseToolsKeyStoreMySql(fieldKeyFormat string) (oci_database_tools.DatabaseToolsKeyStoreMySql, error) {
	result := oci_database_tools.DatabaseToolsKeyStoreMySql{}
func (s *DatabaseToolsDatabaseToolsConnectionResourceCrud) mapToDatabaseToolsKeyStoreMySqlDetails(fieldKeyFormat string) (oci_database_tools.DatabaseToolsKeyStoreMySqlDetails, error) {
	result := oci_database_tools.DatabaseToolsKeyStoreMySqlDetails{}
func (s *DatabaseToolsDatabaseToolsConnectionResourceCrud) mapToDatabaseToolsKeyStoreMySqlSummary(fieldKeyFormat string) (oci_database_tools.DatabaseToolsKeyStoreMySqlSummary, error) {
	result := oci_database_tools.DatabaseToolsKeyStoreMySqlSummary{}
func (s *DatabaseToolsDatabaseToolsConnectionResourceCrud) mapToDatabaseToolsKeyStorePassword(fieldKeyFormat string) (oci_database_tools.DatabaseToolsKeyStorePassword, error) {
	var baseObject oci_database_tools.DatabaseToolsKeyStorePassword
func (s *DatabaseToolsDatabaseToolsConnectionResourceCrud) mapToDatabaseToolsKeyStorePasswordDetails(fieldKeyFormat string) (oci_database_tools.DatabaseToolsKeyStorePasswordDetails, error) {
	var baseObject oci_database_tools.DatabaseToolsKeyStorePasswordDetails
func (s *DatabaseToolsDatabaseToolsConnectionResourceCrud) mapToDatabaseToolsKeyStorePasswordGenericJdbc(fieldKeyFormat string) (oci_database_tools.DatabaseToolsKeyStorePasswordGenericJdbc, error) {
	var baseObject oci_database_tools.DatabaseToolsKeyStorePasswordGenericJdbc
func (s *DatabaseToolsDatabaseToolsConnectionResourceCrud) mapToDatabaseToolsKeyStorePasswordGenericJdbcDetails(fieldKeyFormat string) (oci_database_tools.DatabaseToolsKeyStorePasswordGenericJdbcDetails, error) {
	var baseObject oci_database_tools.DatabaseToolsKeyStorePasswordGenericJdbcDetails
func (s *DatabaseToolsDatabaseToolsConnectionResourceCrud) mapToDatabaseToolsKeyStorePasswordGenericJdbcSummary(fieldKeyFormat string) (oci_database_tools.DatabaseToolsKeyStorePasswordGenericJdbcSummary, error) {
	var baseObject oci_database_tools.DatabaseToolsKeyStorePasswordGenericJdbcSummary
func (s *DatabaseToolsDatabaseToolsConnectionResourceCrud) mapToDatabaseToolsKeyStorePasswordMySql(fieldKeyFormat string) (oci_database_tools.DatabaseToolsKeyStorePasswordMySql, error) {
	var baseObject oci_database_tools.DatabaseToolsKeyStorePasswordMySql
func (s *DatabaseToolsDatabaseToolsConnectionResourceCrud) mapToDatabaseToolsKeyStorePasswordMySqlDetails(fieldKeyFormat string) (oci_database_tools.DatabaseToolsKeyStorePasswordMySqlDetails, error) {
	var baseObject oci_database_tools.DatabaseToolsKeyStorePasswordMySqlDetails
func (s *DatabaseToolsDatabaseToolsConnectionResourceCrud) mapToDatabaseToolsKeyStorePasswordMySqlSummary(fieldKeyFormat string) (oci_database_tools.DatabaseToolsKeyStorePasswordMySqlSummary, error) {
	var baseObject oci_database_tools.DatabaseToolsKeyStorePasswordMySqlSummary
func (s *DatabaseToolsDatabaseToolsConnectionResourceCrud) mapToDatabaseToolsKeyStorePasswordPostgresql(fieldKeyFormat string) (oci_database_tools.DatabaseToolsKeyStorePasswordPostgresql, error) {
	var baseObject oci_database_tools.DatabaseToolsKeyStorePasswordPostgresql
func (s *DatabaseToolsDatabaseToolsConnectionResourceCrud) mapToDatabaseToolsKeyStorePasswordPostgresqlDetails(fieldKeyFormat string) (oci_database_tools.DatabaseToolsKeyStorePasswordPostgresqlDetails, error) {
	var baseObject oci_database_tools.DatabaseToolsKeyStorePasswordPostgresqlDetails
func (s *DatabaseToolsDatabaseToolsConnectionResourceCrud) mapToDatabaseToolsKeyStorePasswordPostgresqlSummary(fieldKeyFormat string) (oci_database_tools.DatabaseToolsKeyStorePasswordPostgresqlSummary, error) {
	var baseObject oci_database_tools.DatabaseToolsKeyStorePasswordPostgresqlSummary
func (s *DatabaseToolsDatabaseToolsConnectionResourceCrud) mapToDatabaseToolsKeyStorePasswordSummary(fieldKeyFormat string) (oci_database_tools.DatabaseToolsKeyStorePasswordSummary, error) {
	var baseObject oci_database_tools.DatabaseToolsKeyStorePasswordSummary
func (s *DatabaseToolsDatabaseToolsConnectionResourceCrud) mapToDatabaseToolsKeyStorePostgresql(fieldKeyFormat string) (oci_database_tools.DatabaseToolsKeyStorePostgresql, error) {
	result := oci_database_tools.DatabaseToolsKeyStorePostgresql{}
func (s *DatabaseToolsDatabaseToolsConnectionResourceCrud) mapToDatabaseToolsKeyStorePostgresqlDetails(fieldKeyFormat string) (oci_database_tools.DatabaseToolsKeyStorePostgresqlDetails, error) {
	result := oci_database_tools.DatabaseToolsKeyStorePostgresqlDetails{}
func (s *DatabaseToolsDatabaseToolsConnectionResourceCrud) mapToDatabaseToolsKeyStorePostgresqlSummary(fieldKeyFormat string) (oci_database_tools.DatabaseToolsKeyStorePostgresqlSummary, error) {
	result := oci_database_tools.DatabaseToolsKeyStorePostgresqlSummary{}
func (s *DatabaseToolsDatabaseToolsConnectionResourceCrud) mapToDatabaseToolsKeyStoreSummary(fieldKeyFormat string) (oci_database_tools.DatabaseToolsKeyStoreSummary, error) {
	result := oci_database_tools.DatabaseToolsKeyStoreSummary{}
func (s *DatabaseToolsDatabaseToolsConnectionResourceCrud) mapToDatabaseToolsRelatedResource(fieldKeyFormat string) (oci_database_tools.DatabaseToolsRelatedResource, error) {
	result := oci_database_tools.DatabaseToolsRelatedResource{}
func DatabaseToolsRelatedResourceToMap(obj *oci_database_tools.DatabaseToolsRelatedResource) map[string]interface{} {
	result := map[string]interface{}{}
func (s *DatabaseToolsDatabaseToolsConnectionResourceCrud) mapToDatabaseToolsRelatedResourceMySql(fieldKeyFormat string) (oci_database_tools.DatabaseToolsRelatedResourceMySql, error) {
	result := oci_database_tools.DatabaseToolsRelatedResourceMySql{}
func DatabaseToolsRelatedResourceMySqlToMap(obj *oci_database_tools.DatabaseToolsRelatedResourceMySql) map[string]interface{} {
	result := map[string]interface{}{}
func (s *DatabaseToolsDatabaseToolsConnectionResourceCrud) mapToDatabaseToolsRelatedResourcePostgresql(fieldKeyFormat string) (oci_database_tools.DatabaseToolsRelatedResourcePostgresql, error) {
	result := oci_database_tools.DatabaseToolsRelatedResourcePostgresql{}
func DatabaseToolsRelatedResourcePostgresqlToMap(obj *oci_database_tools.DatabaseToolsRelatedResourcePostgresql) map[string]interface{} {
	result := map[string]interface{}{}
func (s *DatabaseToolsDatabaseToolsConnectionResourceCrud) mapToDatabaseToolsUserPassword(fieldKeyFormat string) (oci_database_tools.DatabaseToolsUserPassword, error) {
	var baseObject oci_database_tools.DatabaseToolsUserPassword
func (s *DatabaseToolsDatabaseToolsConnectionResourceCrud) mapToDatabaseToolsUserPasswordDetails(fieldKeyFormat string) (oci_database_tools.DatabaseToolsUserPasswordDetails, error) {
	var baseObject oci_database_tools.DatabaseToolsUserPasswordDetails
func (s *DatabaseToolsDatabaseToolsConnectionResourceCrud) mapToDatabaseToolsUserPasswordSummary(fieldKeyFormat string) (oci_database_tools.DatabaseToolsUserPasswordSummary, error) {
	var baseObject oci_database_tools.DatabaseToolsUserPasswordSummary
func (s *DatabaseToolsDatabaseToolsConnectionResourceCrud) mapToResourceLock(fieldKeyFormat string) (oci_database_tools.ResourceLock, error) {
	result := oci_database_tools.ResourceLock{}
func ConnectionResourceLockToMap(obj oci_database_tools.ResourceLock) map[string]interface{} {
	result := map[string]interface{}{}
func (s *DatabaseToolsDatabaseToolsConnectionResourceCrud) mapToUpdateDatabaseToolsRelatedResourceDetails(fieldKeyFormat string) (oci_database_tools.UpdateDatabaseToolsRelatedResourceDetails, error) {
	result := oci_database_tools.UpdateDatabaseToolsRelatedResourceDetails{}
func UpdateDatabaseToolsRelatedResourceDetailsToMap(obj *oci_database_tools.UpdateDatabaseToolsRelatedResourceDetails) map[string]interface{} {
	result := map[string]interface{}{}
func (s *DatabaseToolsDatabaseToolsConnectionResourceCrud) mapToUpdateDatabaseToolsRelatedResourceMySqlDetails(fieldKeyFormat string) (oci_database_tools.UpdateDatabaseToolsRelatedResourceMySqlDetails, error) {
	result := oci_database_tools.UpdateDatabaseToolsRelatedResourceMySqlDetails{}
func UpdateDatabaseToolsRelatedResourceMySqlDetailsToMap(obj *oci_database_tools.UpdateDatabaseToolsRelatedResourceMySqlDetails) map[string]interface{} {
	result := map[string]interface{}{}
func (s *DatabaseToolsDatabaseToolsConnectionResourceCrud) mapToUpdateDatabaseToolsRelatedResourcePostgresqlDetails(fieldKeyFormat string) (oci_database_tools.UpdateDatabaseToolsRelatedResourcePostgresqlDetails, error) {
	result := oci_database_tools.UpdateDatabaseToolsRelatedResourcePostgresqlDetails{}
func UpdateDatabaseToolsRelatedResourcePostgresqlDetailsToMap(obj *oci_database_tools.UpdateDatabaseToolsRelatedResourcePostgresqlDetails) map[string]interface{} {
	result := map[string]interface{}{}
func (s *DatabaseToolsDatabaseToolsConnectionResourceCrud) populateTopLevelPolymorphicCreateDatabaseToolsConnectionRequest(request *oci_database_tools.CreateDatabaseToolsConnectionRequest) error {
	//discriminator
func (s *DatabaseToolsDatabaseToolsConnectionResourceCrud) populateTopLevelPolymorphicUpdateDatabaseToolsConnectionRequest(request *oci_database_tools.UpdateDatabaseToolsConnectionRequest) error {
	//discriminator
func (s *DatabaseToolsDatabaseToolsConnectionResourceCrud) updateCompartment(compartment interface{}) error {
	changeCompartmentRequest := oci_database_tools.ChangeDatabaseToolsConnectionCompartmentRequest{}

=== ./internal/service/database_tools/database_tools_database_tools_connection_data_source.go ===
func DatabaseToolsDatabaseToolsConnectionDataSource() *schema.Resource {
	fieldMap := make(map[string]*schema.Schema)
func readSingularDatabaseToolsDatabaseToolsConnection(d *schema.ResourceData, m interface{}) error {
	sync := &DatabaseToolsDatabaseToolsConnectionDataSourceCrud{}
func (s *DatabaseToolsDatabaseToolsConnectionDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *DatabaseToolsDatabaseToolsConnectionDataSourceCrud) Get() error {
	request := oci_database_tools.GetDatabaseToolsConnectionRequest{}
func (s *DatabaseToolsDatabaseToolsConnectionDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/database_tools/database_tools_database_tools_private_endpoints_data_source.go ===
func DatabaseToolsDatabaseToolsPrivateEndpointsDataSource() *schema.Resource {
	return &schema.Resource{
func readDatabaseToolsDatabaseToolsPrivateEndpoints(d *schema.ResourceData, m interface{}) error {
	sync := &DatabaseToolsDatabaseToolsPrivateEndpointsDataSourceCrud{}
func (s *DatabaseToolsDatabaseToolsPrivateEndpointsDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *DatabaseToolsDatabaseToolsPrivateEndpointsDataSourceCrud) Get() error {
	request := oci_database_tools.ListDatabaseToolsPrivateEndpointsRequest{}
func (s *DatabaseToolsDatabaseToolsPrivateEndpointsDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/database_tools/database_tools_database_tools_private_endpoint_data_source.go ===
func DatabaseToolsDatabaseToolsPrivateEndpointDataSource() *schema.Resource {
	fieldMap := make(map[string]*schema.Schema)
func readSingularDatabaseToolsDatabaseToolsPrivateEndpoint(d *schema.ResourceData, m interface{}) error {
	sync := &DatabaseToolsDatabaseToolsPrivateEndpointDataSourceCrud{}
func (s *DatabaseToolsDatabaseToolsPrivateEndpointDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *DatabaseToolsDatabaseToolsPrivateEndpointDataSourceCrud) Get() error {
	request := oci_database_tools.GetDatabaseToolsPrivateEndpointRequest{}
func (s *DatabaseToolsDatabaseToolsPrivateEndpointDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/database_tools/database_tools_database_tools_endpoint_services_data_source.go ===
func DatabaseToolsDatabaseToolsEndpointServicesDataSource() *schema.Resource {
	return &schema.Resource{
func readDatabaseToolsDatabaseToolsEndpointServices(d *schema.ResourceData, m interface{}) error {
	sync := &DatabaseToolsDatabaseToolsEndpointServicesDataSourceCrud{}
func (s *DatabaseToolsDatabaseToolsEndpointServicesDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *DatabaseToolsDatabaseToolsEndpointServicesDataSourceCrud) Get() error {
	request := oci_database_tools.ListDatabaseToolsEndpointServicesRequest{}
func (s *DatabaseToolsDatabaseToolsEndpointServicesDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/database_tools/database_tools_database_tools_connections_data_source.go ===
func DatabaseToolsDatabaseToolsConnectionsDataSource() *schema.Resource {
	return &schema.Resource{
func readDatabaseToolsDatabaseToolsConnections(d *schema.ResourceData, m interface{}) error {
	sync := &DatabaseToolsDatabaseToolsConnectionsDataSourceCrud{}
func (s *DatabaseToolsDatabaseToolsConnectionsDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *DatabaseToolsDatabaseToolsConnectionsDataSourceCrud) Get() error {
	request := oci_database_tools.ListDatabaseToolsConnectionsRequest{}
func (s *DatabaseToolsDatabaseToolsConnectionsDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/database_tools/register_resource.go ===
func RegisterResource() {
	tfresource.RegisterResource("oci_database_tools_database_tools_connection", DatabaseToolsDatabaseToolsConnectionResource())

=== ./internal/service/resourcemanager/resourcemanager_private_endpoint_reachable_ip_data_source.go ===
func ResourcemanagerPrivateEndpointReachableIpDataSource() *schema.Resource {
	return &schema.Resource{
func readSingularResourcemanagerPrivateEndpointReachableIp(d *schema.ResourceData, m interface{}) error {
	sync := &ResourcemanagerPrivateEndpointReachableIpDataSourceCrud{}
func (s *ResourcemanagerPrivateEndpointReachableIpDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *ResourcemanagerPrivateEndpointReachableIpDataSourceCrud) Get() error {
	request := oci_resourcemanager.GetReachableIpRequest{}
func (s *ResourcemanagerPrivateEndpointReachableIpDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/resourcemanager/resourcemanager_private_endpoint_data_source.go ===
func ResourcemanagerPrivateEndpointDataSource() *schema.Resource {
	fieldMap := make(map[string]*schema.Schema)
func readSingularResourcemanagerPrivateEndpoint(d *schema.ResourceData, m interface{}) error {
	sync := &ResourcemanagerPrivateEndpointDataSourceCrud{}
func (s *ResourcemanagerPrivateEndpointDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *ResourcemanagerPrivateEndpointDataSourceCrud) Get() error {
	request := oci_resourcemanager.GetPrivateEndpointRequest{}
func (s *ResourcemanagerPrivateEndpointDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/resourcemanager/resourcemanager_private_endpoint_resource.go ===
func ResourcemanagerPrivateEndpointResource() *schema.Resource {
	return &schema.Resource{
func createResourcemanagerPrivateEndpoint(d *schema.ResourceData, m interface{}) error {
	sync := &ResourcemanagerPrivateEndpointResourceCrud{}
func readResourcemanagerPrivateEndpoint(d *schema.ResourceData, m interface{}) error {
	sync := &ResourcemanagerPrivateEndpointResourceCrud{}
func updateResourcemanagerPrivateEndpoint(d *schema.ResourceData, m interface{}) error {
	sync := &ResourcemanagerPrivateEndpointResourceCrud{}
func deleteResourcemanagerPrivateEndpoint(d *schema.ResourceData, m interface{}) error {
	sync := &ResourcemanagerPrivateEndpointResourceCrud{}
func (s *ResourcemanagerPrivateEndpointResourceCrud) ID() string {
	return *s.Res.Id
func (s *ResourcemanagerPrivateEndpointResourceCrud) CreatedPending() []string {
	return []string{
func (s *ResourcemanagerPrivateEndpointResourceCrud) CreatedTarget() []string {
	return []string{
func (s *ResourcemanagerPrivateEndpointResourceCrud) DeletedPending() []string {
	return []string{
func (s *ResourcemanagerPrivateEndpointResourceCrud) DeletedTarget() []string {
	return []string{
func (s *ResourcemanagerPrivateEndpointResourceCrud) Create() error {
	request := oci_resourcemanager.CreatePrivateEndpointRequest{}
func (s *ResourcemanagerPrivateEndpointResourceCrud) Get() error {
	request := oci_resourcemanager.GetPrivateEndpointRequest{}
func (s *ResourcemanagerPrivateEndpointResourceCrud) Update() error {
	if compartment, ok := s.D.GetOkExists("compartment_id"); ok && s.D.HasChange("compartment_id") {
func (s *ResourcemanagerPrivateEndpointResourceCrud) Delete() error {
	request := oci_resourcemanager.DeletePrivateEndpointRequest{}
func (s *ResourcemanagerPrivateEndpointResourceCrud) SetData() error {
	if s.Res.CompartmentId != nil {
func (s *ResourcemanagerPrivateEndpointResourceCrud) updateCompartment(compartment interface{}) error {
	changeCompartmentRequest := oci_resourcemanager.ChangePrivateEndpointCompartmentRequest{}

=== ./internal/service/resourcemanager/resourcemanager_stack_tf_state_data_source.go ===
func ResourcemanagerStackTfStateDataSource() *schema.Resource {
	return &schema.Resource{
func readSingularResourcemanagerStackTfState(d *schema.ResourceData, m interface{}) error {
	sync := &ResourcemanagerStackTfStateDataSourceCrud{}
func (s *ResourcemanagerStackTfStateDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *ResourcemanagerStackTfStateDataSourceCrud) Get() error {
	request := oci_resourcemanager.GetStackTfStateRequest{}
func (s *ResourcemanagerStackTfStateDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/resourcemanager/resourcemanager_stacks_data_source.go ===
func ResourcemanagerStacksDataSource() *schema.Resource {
	return &schema.Resource{
func readResourcemanagerStacks(d *schema.ResourceData, m interface{}) error {
	sync := &ResourcemanagerStacksDataSourceCrud{}
func (s *ResourcemanagerStacksDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *ResourcemanagerStacksDataSourceCrud) Get() error {
	request := oci_resourcemanager.ListStacksRequest{}
func (s *ResourcemanagerStacksDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/resourcemanager/resourcemanager_stack_helper.go ===
func CreateResourceManagerStack(resourceManagerClient resourcemanager.ResourceManagerClient, stackDisplayName string, compartment string) (string, error) {

func DestroyResourceManagerStack(resourceManagerClient resourcemanager.ResourceManagerClient, resourceManagerStackId string) error {


=== ./internal/service/resourcemanager/resourcemanager_stack_data_source.go ===
func ResourcemanagerStackDataSource() *schema.Resource {
	return &schema.Resource{
func readSingularResourcemanagerStack(d *schema.ResourceData, m interface{}) error {
	sync := &ResourcemanagerStackDataSourceCrud{}
func (s *ResourcemanagerStackDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *ResourcemanagerStackDataSourceCrud) Get() error {
	request := oci_resourcemanager.GetStackRequest{}
func (s *ResourcemanagerStackDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/resourcemanager/register_resource.go ===
func RegisterResource() {
	tfresource.RegisterResource("oci_resourcemanager_private_endpoint", ResourcemanagerPrivateEndpointResource())

=== ./internal/service/resourcemanager/resourcemanager_private_endpoints_data_source.go ===
func ResourcemanagerPrivateEndpointsDataSource() *schema.Resource {
	return &schema.Resource{
func readResourcemanagerPrivateEndpoints(d *schema.ResourceData, m interface{}) error {
	sync := &ResourcemanagerPrivateEndpointsDataSourceCrud{}
func (s *ResourcemanagerPrivateEndpointsDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *ResourcemanagerPrivateEndpointsDataSourceCrud) Get() error {
	request := oci_resourcemanager.ListPrivateEndpointsRequest{}
func (s *ResourcemanagerPrivateEndpointsDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/devops/devops_repository_mirror_resource.go ===
func DevopsRepositoryMirrorResource() *schema.Resource {
	return &schema.Resource{
func createDevopsRepositoryMirror(d *schema.ResourceData, m interface{}) error {
	sync := &DevopsRepositoryMirrorResourceCrud{}
func readDevopsRepositoryMirror(d *schema.ResourceData, m interface{}) error {
	return nil
func deleteDevopsRepositoryMirror(d *schema.ResourceData, m interface{}) error {
	return nil
func (s *DevopsRepositoryMirrorResourceCrud) ID() string {
	return *s.Res.Id
func (s *DevopsRepositoryMirrorResourceCrud) Get() error {
	request := oci_devops.GetRepositoryRequest{}
func (s *DevopsRepositoryMirrorResourceCrud) Create() error {
	request := oci_devops.MirrorRepositoryRequest{}
func (s *DevopsRepositoryMirrorResourceCrud) getRepositoryMirrorFromWorkRequest(workId *string, retryPolicy *oci_common.RetryPolicy,
	actionTypeEnum oci_devops.ActionTypeEnum, timeout time.Duration) error {
func (s *DevopsRepositoryMirrorResourceCrud) SetData() error {
	return nil

=== ./internal/service/devops/devops_deploy_stages_data_source.go ===
func DevopsDeployStagesDataSource() *schema.Resource {
	return &schema.Resource{
func readDevopsDeployStages(d *schema.ResourceData, m interface{}) error {
	sync := &DevopsDeployStagesDataSourceCrud{}
func (s *DevopsDeployStagesDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *DevopsDeployStagesDataSourceCrud) Get() error {
	request := oci_devops.ListDeployStagesRequest{}
func (s *DevopsDeployStagesDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/devops/devops_build_pipelines_data_source.go ===
func DevopsBuildPipelinesDataSource() *schema.Resource {
	return &schema.Resource{
func readDevopsBuildPipelines(d *schema.ResourceData, m interface{}) error {
	sync := &DevopsBuildPipelinesDataSourceCrud{}
func (s *DevopsBuildPipelinesDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *DevopsBuildPipelinesDataSourceCrud) Get() error {
	request := oci_devops.ListBuildPipelinesRequest{}
func (s *DevopsBuildPipelinesDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/devops/devops_build_run_data_source.go ===
func DevopsBuildRunDataSource() *schema.Resource {
	fieldMap := make(map[string]*schema.Schema)
func readSingularDevopsBuildRun(d *schema.ResourceData, m interface{}) error {
	sync := &DevopsBuildRunDataSourceCrud{}
func (s *DevopsBuildRunDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *DevopsBuildRunDataSourceCrud) Get() error {
	request := oci_devops.GetBuildRunRequest{}
func (s *DevopsBuildRunDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/devops/devops_repository_file_line_data_source.go ===
func DevopsRepositoryFileLineDataSource() *schema.Resource {
	return &schema.Resource{
func readSingularDevopsRepositoryFileLine(d *schema.ResourceData, m interface{}) error {
	sync := &DevopsRepositoryFileLineDataSourceCrud{}
func (s *DevopsRepositoryFileLineDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *DevopsRepositoryFileLineDataSourceCrud) Get() error {
	request := oci_devops.GetRepositoryFileLinesRequest{}
func (s *DevopsRepositoryFileLineDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/devops/devops_build_runs_data_source.go ===
func DevopsBuildRunsDataSource() *schema.Resource {
	return &schema.Resource{
func readDevopsBuildRuns(d *schema.ResourceData, m interface{}) error {
	sync := &DevopsBuildRunsDataSourceCrud{}
func (s *DevopsBuildRunsDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *DevopsBuildRunsDataSourceCrud) Get() error {
	request := oci_devops.ListBuildRunsRequest{}
func (s *DevopsBuildRunsDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/devops/devops_deploy_pipeline_data_source.go ===
func DevopsDeployPipelineDataSource() *schema.Resource {
	fieldMap := make(map[string]*schema.Schema)
func readSingularDevopsDeployPipeline(d *schema.ResourceData, m interface{}) error {
	sync := &DevopsDeployPipelineDataSourceCrud{}
func (s *DevopsDeployPipelineDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *DevopsDeployPipelineDataSourceCrud) Get() error {
	request := oci_devops.GetDeployPipelineRequest{}
func (s *DevopsDeployPipelineDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/devops/devops_repository_commit_data_source.go ===
func DevopsRepositoryCommitDataSource() *schema.Resource {
	return &schema.Resource{
func readSingularDevopsRepositoryCommit(d *schema.ResourceData, m interface{}) error {
	sync := &DevopsRepositoryCommitDataSourceCrud{}
func (s *DevopsRepositoryCommitDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *DevopsRepositoryCommitDataSourceCrud) Get() error {
	request := oci_devops.GetCommitRequest{}
func (s *DevopsRepositoryCommitDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/devops/devops_deployment_data_source.go ===
func DevopsDeploymentDataSource() *schema.Resource {
	fieldMap := make(map[string]*schema.Schema)
func readSingularDevopsDeployment(d *schema.ResourceData, m interface{}) error {
	sync := &DevopsDeploymentDataSourceCrud{}
func (s *DevopsDeploymentDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *DevopsDeploymentDataSourceCrud) Get() error {
	request := oci_devops.GetDeploymentRequest{}
func (s *DevopsDeploymentDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/devops/devops_repository_diff_data_source.go ===
func DevopsRepositoryDiffDataSource() *schema.Resource {
	return &schema.Resource{
func readSingularDevopsRepositoryDiff(d *schema.ResourceData, m interface{}) error {
	sync := &DevopsRepositoryDiffDataSourceCrud{}
func (s *DevopsRepositoryDiffDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *DevopsRepositoryDiffDataSourceCrud) Get() error {
	request := oci_devops.GetFileDiffRequest{}
func (s *DevopsRepositoryDiffDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/devops/devops_deploy_pipelines_data_source.go ===
func DevopsDeployPipelinesDataSource() *schema.Resource {
	return &schema.Resource{
func readDevopsDeployPipelines(d *schema.ResourceData, m interface{}) error {
	sync := &DevopsDeployPipelinesDataSourceCrud{}
func (s *DevopsDeployPipelinesDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *DevopsDeployPipelinesDataSourceCrud) Get() error {
	request := oci_devops.ListDeployPipelinesRequest{}
func (s *DevopsDeployPipelinesDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/devops/devops_repository_object_data_source.go ===
func DevopsRepositoryObjectDataSource() *schema.Resource {
	return &schema.Resource{
func readSingularDevopsRepositoryObject(d *schema.ResourceData, m interface{}) error {
	sync := &DevopsRepositoryObjectDataSourceCrud{}
func (s *DevopsRepositoryObjectDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *DevopsRepositoryObjectDataSourceCrud) Get() error {
	request := oci_devops.GetObjectRequest{}
func (s *DevopsRepositoryObjectDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/devops/devops_repository_protected_branch_management_resource.go ===
func DevopsRepositoryProtectedBranchManagementResource() *schema.Resource {
	return &schema.Resource{
func createDevopsRepositoryProtectedBranchManagement(d *schema.ResourceData, m interface{}) error {
	sync := &DevopsRepositoryProtectedBranchManagementResourceCrud{}
func readDevopsRepositoryProtectedBranchManagement(d *schema.ResourceData, m interface{}) error {
	return nil
func deleteDevopsRepositoryProtectedBranchManagement(d *schema.ResourceData, m interface{}) error {
	sync := &DevopsRepositoryProtectedBranchManagementResourceCrud{}
func (s *DevopsRepositoryProtectedBranchManagementResourceCrud) ID() string {
	return tfresource.GenerateDataSourceHashID("DevopsRepositoryProtectedBranchManagementResource-", DevopsRepositoryProtectedBranchManagementResource(), s.D)
func (s *DevopsRepositoryProtectedBranchManagementResourceCrud) Create() error {
	request := oci_devops.CreateOrUpdateProtectedBranchRequest{}
func (s *DevopsRepositoryProtectedBranchManagementResourceCrud) SetData() error {
	if s.Res.BranchName != nil {
func (s *DevopsRepositoryProtectedBranchManagementResourceCrud) Delete() error {
	request := oci_devops.DeleteProtectedBranchRequest{}

=== ./internal/service/devops/devops_repository_refs_data_source.go ===
func DevopsRepositoryRefsDataSource() *schema.Resource {
	return &schema.Resource{
func readDevopsRepositoryRefs(d *schema.ResourceData, m interface{}) error {
	sync := &DevopsRepositoryRefsDataSourceCrud{}
func (s *DevopsRepositoryRefsDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *DevopsRepositoryRefsDataSourceCrud) Get() error {
	request := oci_devops.ListRefsRequest{}
func (s *DevopsRepositoryRefsDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/devops/devops_project_resource.go ===
func DevopsProjectResource() *schema.Resource {
	return &schema.Resource{
func createDevopsProject(d *schema.ResourceData, m interface{}) error {
	sync := &DevopsProjectResourceCrud{}
func readDevopsProject(d *schema.ResourceData, m interface{}) error {
	sync := &DevopsProjectResourceCrud{}
func updateDevopsProject(d *schema.ResourceData, m interface{}) error {
	sync := &DevopsProjectResourceCrud{}
func deleteDevopsProject(d *schema.ResourceData, m interface{}) error {
	sync := &DevopsProjectResourceCrud{}
func (s *DevopsProjectResourceCrud) ID() string {
	return *s.Res.Id
func (s *DevopsProjectResourceCrud) CreatedPending() []string {
	return []string{
func (s *DevopsProjectResourceCrud) CreatedTarget() []string {
	return []string{
func (s *DevopsProjectResourceCrud) DeletedPending() []string {
	return []string{
func (s *DevopsProjectResourceCrud) DeletedTarget() []string {
	return []string{
func (s *DevopsProjectResourceCrud) Create() error {
	request := oci_devops.CreateProjectRequest{}
func (s *DevopsProjectResourceCrud) getProjectFromWorkRequest(workId *string, retryPolicy *oci_common.RetryPolicy,
	actionTypeEnum oci_devops.ActionTypeEnum, timeout time.Duration) error {
func (s *DevopsProjectResourceCrud) Get() error {
	request := oci_devops.GetProjectRequest{}
func (s *DevopsProjectResourceCrud) Update() error {
	if compartment, ok := s.D.GetOkExists("compartment_id"); ok && s.D.HasChange("compartment_id") {
func (s *DevopsProjectResourceCrud) Delete() error {
	request := oci_devops.DeleteProjectRequest{}
func (s *DevopsProjectResourceCrud) SetData() error {
	if s.Res.CompartmentId != nil {
func (s *DevopsProjectResourceCrud) mapToNotificationConfig(fieldKeyFormat string) (oci_devops.NotificationConfig, error) {
	result := oci_devops.NotificationConfig{}
func (s *DevopsProjectResourceCrud) updateCompartment(compartment interface{}) error {
	changeCompartmentRequest := oci_devops.ChangeProjectCompartmentRequest{}

=== ./internal/service/devops/devops_repository_data_source.go ===
func DevopsRepositoryDataSource() *schema.Resource {
	fieldMap := make(map[string]*schema.Schema)
func readSingularDevopsRepository(d *schema.ResourceData, m interface{}) error {
	sync := &DevopsRepositoryDataSourceCrud{}
func (s *DevopsRepositoryDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *DevopsRepositoryDataSourceCrud) Get() error {
	request := oci_devops.GetRepositoryRequest{}
func (s *DevopsRepositoryDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/devops/devops_project_repository_setting_resource.go ===
func DevopsProjectRepositorySettingResource() *schema.Resource {
	return &schema.Resource{
func createDevopsProjectRepositorySetting(d *schema.ResourceData, m interface{}) error {
	sync := &DevopsProjectRepositorySettingResourceCrud{}
func readDevopsProjectRepositorySetting(d *schema.ResourceData, m interface{}) error {
	sync := &DevopsProjectRepositorySettingResourceCrud{}
func updateDevopsProjectRepositorySetting(d *schema.ResourceData, m interface{}) error {
	sync := &DevopsProjectRepositorySettingResourceCrud{}
func deleteDevopsProjectRepositorySetting(d *schema.ResourceData, m interface{}) error {
	sync := &DevopsProjectRepositorySettingResourceCrud{}
func (s *DevopsProjectRepositorySettingResourceCrud) ID() string {
	return GetProjectRepositorySettingCompositeId(s.D.Get("project_id").(string))
func (s *DevopsProjectRepositorySettingResourceCrud) Create() error {
	request := oci_devops.UpdateProjectRepositorySettingsRequest{}
func (s *DevopsProjectRepositorySettingResourceCrud) Get() error {
	request := oci_devops.GetProjectRepositorySettingsRequest{}
func (s *DevopsProjectRepositorySettingResourceCrud) Update() error {
	request := oci_devops.UpdateProjectRepositorySettingsRequest{}
func (s *DevopsProjectRepositorySettingResourceCrud) Delete() error {
	request := oci_devops.DeleteProjectRepositorySettingsRequest{}
func (s *DevopsProjectRepositorySettingResourceCrud) SetData() error {

func (s *DevopsProjectRepositorySettingResourceCrud) mapToMergeSettings(fieldKeyFormat string) (oci_devops.MergeSettings, error) {
	result := oci_devops.MergeSettings{}
func (s *DevopsProjectRepositorySettingResourceCrud) mapToUpdateApprovalRuleDetails(fieldKeyFormat string) (oci_devops.UpdateApprovalRuleDetails, error) {
	result := oci_devops.UpdateApprovalRuleDetails{}
func (s *DevopsProjectRepositorySettingResourceCrud) mapToUpdateApprovalRuleDetailsCollection(fieldKeyFormat string) (oci_devops.UpdateApprovalRuleDetailsCollection, error) {
	result := oci_devops.UpdateApprovalRuleDetailsCollection{}
func (s *DevopsProjectRepositorySettingResourceCrud) mapToUpdateReviewerDetails(fieldKeyFormat string) (oci_devops.UpdateReviewerDetails, error) {
	result := oci_devops.UpdateReviewerDetails{}

=== ./internal/service/devops/devops_connection_data_source.go ===
func DevopsConnectionDataSource() *schema.Resource {
	fieldMap := make(map[string]*schema.Schema)
func readSingularDevopsConnection(d *schema.ResourceData, m interface{}) error {
	sync := &DevopsConnectionDataSourceCrud{}
func (s *DevopsConnectionDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *DevopsConnectionDataSourceCrud) Get() error {
	request := oci_devops.GetConnectionRequest{}
func (s *DevopsConnectionDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/devops/devops_trigger_resource.go ===
func DevopsTriggerResource() *schema.Resource {
	return &schema.Resource{
func createDevopsTrigger(d *schema.ResourceData, m interface{}) error {
	sync := &DevopsTriggerResourceCrud{}
func readDevopsTrigger(d *schema.ResourceData, m interface{}) error {
	sync := &DevopsTriggerResourceCrud{}
func updateDevopsTrigger(d *schema.ResourceData, m interface{}) error {
	sync := &DevopsTriggerResourceCrud{}
func deleteDevopsTrigger(d *schema.ResourceData, m interface{}) error {
	sync := &DevopsTriggerResourceCrud{}
func (s *DevopsTriggerResourceCrud) ID() string {
	trigger := *s.Res
func (s *DevopsTriggerResourceCrud) CreatedPending() []string {
	return []string{}
func (s *DevopsTriggerResourceCrud) CreatedTarget() []string {
	return []string{
func (s *DevopsTriggerResourceCrud) DeletedPending() []string {
	return []string{}
func (s *DevopsTriggerResourceCrud) DeletedTarget() []string {
	return []string{}
func (s *DevopsTriggerResourceCrud) Create() error {
	request := oci_devops.CreateTriggerRequest{}
func (s *DevopsTriggerResourceCrud) getTriggerFromWorkRequest(workId *string, retryPolicy *oci_common.RetryPolicy,
	actionTypeEnum oci_devops.ActionTypeEnum, timeout time.Duration) error {
func (s *DevopsTriggerResourceCrud) Get() error {
	request := oci_devops.GetTriggerRequest{}
func (s *DevopsTriggerResourceCrud) Update() error {
	request := oci_devops.UpdateTriggerRequest{}
func (s *DevopsTriggerResourceCrud) Delete() error {
	request := oci_devops.DeleteTriggerRequest{}
func (s *DevopsTriggerResourceCrud) SetData() error {
	switch v := (*s.Res).(type) {
func (s *DevopsTriggerResourceCrud) mapToBitbucketCloudFilterAttributes(fieldKeyFormat string) (oci_devops.BitbucketCloudFilterAttributes, error) {
	result := oci_devops.BitbucketCloudFilterAttributes{}
func (s *DevopsTriggerResourceCrud) mapToBitbucketCloudFilterExclusionAttributes(fieldKeyFormat string) (oci_devops.BitbucketCloudFilterExclusionAttributes, error) {
	result := oci_devops.BitbucketCloudFilterExclusionAttributes{}
func (s *DevopsTriggerResourceCrud) mapToBitbucketServerFilterAttributes(fieldKeyFormat string) (oci_devops.BitbucketServerFilterAttributes, error) {
	result := oci_devops.BitbucketServerFilterAttributes{}
func (s *DevopsTriggerResourceCrud) mapToDevopsCodeRepositoryFilterAttributes(fieldKeyFormat string) (oci_devops.DevopsCodeRepositoryFilterAttributes, error) {
	result := oci_devops.DevopsCodeRepositoryFilterAttributes{}
func (s *DevopsTriggerResourceCrud) mapToDevopsCodeRepositoryFilterExclusionAttributes(fieldKeyFormat string) (oci_devops.DevopsCodeRepositoryFilterExclusionAttributes, error) {
	result := oci_devops.DevopsCodeRepositoryFilterExclusionAttributes{}
func (s *DevopsTriggerResourceCrud) mapToFileFilter(fieldKeyFormat string) (oci_devops.FileFilter, error) {
	result := oci_devops.FileFilter{}
func (s *DevopsTriggerResourceCrud) mapToFilter(fieldKeyFormat string) (oci_devops.Filter, error) {
	var baseObject oci_devops.Filter
func (s *DevopsTriggerResourceCrud) mapToGithubFilterAttributes(fieldKeyFormat string) (oci_devops.GithubFilterAttributes, error) {
	result := oci_devops.GithubFilterAttributes{}
func (s *DevopsTriggerResourceCrud) mapToGithubFilterExclusionAttributes(fieldKeyFormat string) (oci_devops.GithubFilterExclusionAttributes, error) {
	result := oci_devops.GithubFilterExclusionAttributes{}
func (s *DevopsTriggerResourceCrud) mapToGitlabFilterAttributes(fieldKeyFormat string) (oci_devops.GitlabFilterAttributes, error) {
	result := oci_devops.GitlabFilterAttributes{}
func (s *DevopsTriggerResourceCrud) mapToGitlabFilterExclusionAttributes(fieldKeyFormat string) (oci_devops.GitlabFilterExclusionAttributes, error) {
	result := oci_devops.GitlabFilterExclusionAttributes{}
func (s *DevopsTriggerResourceCrud) mapToGitlabServerFilterAttributes(fieldKeyFormat string) (oci_devops.GitlabServerFilterAttributes, error) {
	result := oci_devops.GitlabServerFilterAttributes{}
func (s *DevopsTriggerResourceCrud) mapToTriggerAction(fieldKeyFormat string) (oci_devops.TriggerAction, error) {
	var baseObject oci_devops.TriggerAction
func (s *DevopsTriggerResourceCrud) mapToVbsFilterAttributes(fieldKeyFormat string) (oci_devops.VbsFilterAttributes, error) {
	result := oci_devops.VbsFilterAttributes{}
func (s *DevopsTriggerResourceCrud) mapToVbsFilterExclusionAttributes(fieldKeyFormat string) (oci_devops.VbsFilterExclusionAttributes, error) {
	result := oci_devops.VbsFilterExclusionAttributes{}
func (s *DevopsTriggerResourceCrud) populateTopLevelPolymorphicCreateTriggerRequest(request *oci_devops.CreateTriggerRequest) error {
	//discriminator
func (s *DevopsTriggerResourceCrud) populateTopLevelPolymorphicUpdateTriggerRequest(request *oci_devops.UpdateTriggerRequest) error {
	//discriminator

=== ./internal/service/devops/devops_repository_paths_data_source.go ===
func DevopsRepositoryPathsDataSource() *schema.Resource {
	return &schema.Resource{
func readDevopsRepositoryPaths(d *schema.ResourceData, m interface{}) error {
	sync := &DevopsRepositoryPathsDataSourceCrud{}
func (s *DevopsRepositoryPathsDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *DevopsRepositoryPathsDataSourceCrud) Get() error {
	request := oci_devops.ListPathsRequest{}
func (s *DevopsRepositoryPathsDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/devops/devops_projects_data_source.go ===
func DevopsProjectsDataSource() *schema.Resource {
	return &schema.Resource{
func readDevopsProjects(d *schema.ResourceData, m interface{}) error {
	sync := &DevopsProjectsDataSourceCrud{}
func (s *DevopsProjectsDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *DevopsProjectsDataSourceCrud) Get() error {
	request := oci_devops.ListProjectsRequest{}
func (s *DevopsProjectsDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/devops/devops_repo_file_line_data_source.go ===
func DevopsRepoFileLineDataSource() *schema.Resource {
	return &schema.Resource{
func readSingularDevopsRepoFileLine(d *schema.ResourceData, m interface{}) error {
	sync := &DevopsRepoFileLineDataSourceCrud{}
func (s *DevopsRepoFileLineDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *DevopsRepoFileLineDataSourceCrud) Get() error {
	request := oci_devops.GetRepoFileLinesRequest{}
func (s *DevopsRepoFileLineDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/devops/devops_deployments_data_source.go ===
func DevopsDeploymentsDataSource() *schema.Resource {
	return &schema.Resource{
func readDevopsDeployments(d *schema.ResourceData, m interface{}) error {
	sync := &DevopsDeploymentsDataSourceCrud{}
func (s *DevopsDeploymentsDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *DevopsDeploymentsDataSourceCrud) Get() error {
	request := oci_devops.ListDeploymentsRequest{}
func (s *DevopsDeploymentsDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/devops/devops_deployment_resource.go ===
func DevopsDeploymentResource() *schema.Resource {
	return &schema.Resource{
func createDevopsDeployment(d *schema.ResourceData, m interface{}) error {
	sync := &DevopsDeploymentResourceCrud{}
func readDevopsDeployment(d *schema.ResourceData, m interface{}) error {
	sync := &DevopsDeploymentResourceCrud{}
func updateDevopsDeployment(d *schema.ResourceData, m interface{}) error {
	sync := &DevopsDeploymentResourceCrud{}
func deleteDevopsDeployment(d *schema.ResourceData, m interface{}) error {
	return nil
func (s *DevopsDeploymentResourceCrud) ID() string {
	deployment := *s.Res
func (s *DevopsDeploymentResourceCrud) CreatedPending() []string {
	return []string{
func (s *DevopsDeploymentResourceCrud) CreatedTarget() []string {
	return []string{
func (s *DevopsDeploymentResourceCrud) DeletedPending() []string {
	return []string{}
func (s *DevopsDeploymentResourceCrud) DeletedTarget() []string {
	return []string{}
func (s *DevopsDeploymentResourceCrud) Create() error {
	request := oci_devops.CreateDeploymentRequest{}
func (s *DevopsDeploymentResourceCrud) Get() error {
	request := oci_devops.GetDeploymentRequest{}
func (s *DevopsDeploymentResourceCrud) Update() error {
	request := oci_devops.UpdateDeploymentRequest{}
func (s *DevopsDeploymentResourceCrud) SetData() error {
	switch v := (*s.Res).(type) {
func (s *DevopsDeploymentResourceCrud) mapToApprovalAction(fieldKeyFormat string) (oci_devops.ApprovalAction, error) {
	result := oci_devops.ApprovalAction{}
func (s *DevopsDeploymentResourceCrud) mapToDeployArtifactOverrideArgument(fieldKeyFormat string) (oci_devops.DeployArtifactOverrideArgument, error) {
	result := oci_devops.DeployArtifactOverrideArgument{}
func (s *DevopsDeploymentResourceCrud) mapToDeployArtifactOverrideArgumentCollection(fieldKeyFormat string) (oci_devops.DeployArtifactOverrideArgumentCollection, error) {
	result := oci_devops.DeployArtifactOverrideArgumentCollection{}
func (s *DevopsDeploymentResourceCrud) mapToDeployStageOverrideArgument(fieldKeyFormat string) (oci_devops.DeployStageOverrideArgument, error) {
	result := oci_devops.DeployStageOverrideArgument{}
func (s *DevopsDeploymentResourceCrud) mapToDeployStageOverrideArgumentCollection(fieldKeyFormat string) (oci_devops.DeployStageOverrideArgumentCollection, error) {
	result := oci_devops.DeployStageOverrideArgumentCollection{}
func (s *DevopsDeploymentResourceCrud) mapToDeploymentArgument(fieldKeyFormat string) (oci_devops.DeploymentArgument, error) {
	result := oci_devops.DeploymentArgument{}
func (s *DevopsDeploymentResourceCrud) mapToDeploymentArgumentCollection(fieldKeyFormat string) (oci_devops.DeploymentArgumentCollection, error) {
	result := oci_devops.DeploymentArgumentCollection{}
func (s *DevopsDeploymentResourceCrud) populateTopLevelPolymorphicCreateDeploymentRequest(request *oci_devops.CreateDeploymentRequest) error {
	//discriminator
func (s *DevopsDeploymentResourceCrud) populateTopLevelPolymorphicUpdateDeploymentRequest(request *oci_devops.UpdateDeploymentRequest) error {
	//discriminator

=== ./internal/service/devops/devops_build_pipeline_stage_data_source.go ===
func DevopsBuildPipelineStageDataSource() *schema.Resource {
	fieldMap := make(map[string]*schema.Schema)
func readSingularDevopsBuildPipelineStage(d *schema.ResourceData, m interface{}) error {
	sync := &DevopsBuildPipelineStageDataSourceCrud{}
func (s *DevopsBuildPipelineStageDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *DevopsBuildPipelineStageDataSourceCrud) Get() error {
	request := oci_devops.GetBuildPipelineStageRequest{}
func (s *DevopsBuildPipelineStageDataSourceCrud) SetData() error {


=== ./internal/service/devops/devops_repository_ref_resource.go ===
func DevopsRepositoryRefResource() *schema.Resource {
	return &schema.Resource{
func createDevopsRepositoryRef(d *schema.ResourceData, m interface{}) error {
	sync := &DevopsRepositoryRefResourceCrud{}
func readDevopsRepositoryRef(d *schema.ResourceData, m interface{}) error {
	sync := &DevopsRepositoryRefResourceCrud{}
func updateDevopsRepositoryRef(d *schema.ResourceData, m interface{}) error {
	sync := &DevopsRepositoryRefResourceCrud{}
func deleteDevopsRepositoryRef(d *schema.ResourceData, m interface{}) error {
	sync := &DevopsRepositoryRefResourceCrud{}
func (s *DevopsRepositoryRefResourceCrud) ID() string {
	repositoryRef := *s.Res
func (s *DevopsRepositoryRefResourceCrud) Create() error {
	request := oci_devops.PutRepositoryRefRequest{}
func (s *DevopsRepositoryRefResourceCrud) Get() error {
	request := oci_devops.GetRefRequest{}
func (s *DevopsRepositoryRefResourceCrud) Update() error {
	request := oci_devops.PutRepositoryRefRequest{}
func (s *DevopsRepositoryRefResourceCrud) Delete() error {
	request := oci_devops.DeleteRefRequest{}
func (s *DevopsRepositoryRefResourceCrud) SetData() error {

func (s *DevopsRepositoryRefResourceCrud) populateTopLevelPolymorphicPutRepositoryRefRequest(request *oci_devops.PutRepositoryRefRequest) error {
	//discriminator

=== ./internal/service/devops/devops_repository_commits_data_source.go ===
func DevopsRepositoryCommitsDataSource() *schema.Resource {
	return &schema.Resource{
func readDevopsRepositoryCommits(d *schema.ResourceData, m interface{}) error {
	sync := &DevopsRepositoryCommitsDataSourceCrud{}
func (s *DevopsRepositoryCommitsDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *DevopsRepositoryCommitsDataSourceCrud) Get() error {
	request := oci_devops.ListCommitsRequest{}
func (s *DevopsRepositoryCommitsDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/devops/devops_repository_setting_data_source.go ===
func DevopsRepositorySettingDataSource() *schema.Resource {
	fieldMap := make(map[string]*schema.Schema)
func readSingularDevopsRepositorySetting(d *schema.ResourceData, m interface{}) error {
	sync := &DevopsRepositorySettingDataSourceCrud{}
func (s *DevopsRepositorySettingDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *DevopsRepositorySettingDataSourceCrud) Get() error {
	request := oci_devops.GetRepositorySettingsRequest{}
func (s *DevopsRepositorySettingDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/devops/devops_repository_resource.go ===
func DevopsRepositoryResource() *schema.Resource {
	return &schema.Resource{
func createDevopsRepository(d *schema.ResourceData, m interface{}) error {
	sync := &DevopsRepositoryResourceCrud{}
func readDevopsRepository(d *schema.ResourceData, m interface{}) error {
	sync := &DevopsRepositoryResourceCrud{}
func updateDevopsRepository(d *schema.ResourceData, m interface{}) error {
	sync := &DevopsRepositoryResourceCrud{}
func deleteDevopsRepository(d *schema.ResourceData, m interface{}) error {
	sync := &DevopsRepositoryResourceCrud{}
func (s *DevopsRepositoryResourceCrud) ID() string {
	return *s.Res.Id
func (s *DevopsRepositoryResourceCrud) CreatedPending() []string {
	return []string{
func (s *DevopsRepositoryResourceCrud) CreatedTarget() []string {
	return []string{
func (s *DevopsRepositoryResourceCrud) DeletedPending() []string {
	return []string{}
func (s *DevopsRepositoryResourceCrud) DeletedTarget() []string {
	return []string{
func (s *DevopsRepositoryResourceCrud) Create() error {
	request := oci_devops.CreateRepositoryRequest{}
func (s *DevopsRepositoryResourceCrud) getRepositoryFromWorkRequest(workId *string, retryPolicy *oci_common.RetryPolicy,
	actionTypeEnum oci_devops.ActionTypeEnum, timeout time.Duration) error {
func (s *DevopsRepositoryResourceCrud) Get() error {
	request := oci_devops.GetRepositoryRequest{}
func (s *DevopsRepositoryResourceCrud) Update() error {
	request := oci_devops.UpdateRepositoryRequest{}
func (s *DevopsRepositoryResourceCrud) Delete() error {
	request := oci_devops.DeleteRepositoryRequest{}
func (s *DevopsRepositoryResourceCrud) SetData() error {
	if s.Res.BranchCount != nil {
func (s *DevopsRepositoryResourceCrud) mapToMirrorRepositoryConfig(fieldKeyFormat string) (oci_devops.MirrorRepositoryConfig, error) {
	result := oci_devops.MirrorRepositoryConfig{}
func (s *DevopsRepositoryResourceCrud) mapToTriggerSchedule(fieldKeyFormat string) (oci_devops.TriggerSchedule, error) {
	result := oci_devops.TriggerSchedule{}

=== ./internal/service/devops/devops_repository_path_data_source.go ===
func DevopsRepositoryPathDataSource() *schema.Resource {
	return &schema.Resource{
func readSingularDevopsRepositoryPath(d *schema.ResourceData, m interface{}) error {
	sync := &DevopsRepositoryPathDataSourceCrud{}
func (s *DevopsRepositoryPathDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *DevopsRepositoryPathDataSourceCrud) Get() error {
	request := oci_devops.ListPathsRequest{}
func (s *DevopsRepositoryPathDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/devops/devops_repository_mirrorrecord_data_source.go ===
func DevopsRepositoryMirrorrecordDataSource() *schema.Resource {
	return &schema.Resource{
func readSingularDevopsRepositoryMirrorrecord(d *schema.ResourceData, m interface{}) error {
	sync := &DevopsRepositoryMirrorrecordDataSourceCrud{}
func (s *DevopsRepositoryMirrorrecordDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *DevopsRepositoryMirrorrecordDataSourceCrud) Get() error {
	request := oci_devops.GetMirrorRecordRequest{}
func (s *DevopsRepositoryMirrorrecordDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/devops/devops_repository_diffs_data_source.go ===
func DevopsRepositoryDiffsDataSource() *schema.Resource {
	return &schema.Resource{
func readDevopsRepositoryDiffs(d *schema.ResourceData, m interface{}) error {
	sync := &DevopsRepositoryDiffsDataSourceCrud{}
func (s *DevopsRepositoryDiffsDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *DevopsRepositoryDiffsDataSourceCrud) Get() error {
	request := oci_devops.ListCommitDiffsRequest{}
func (s *DevopsRepositoryDiffsDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/devops/devops_build_run_resource.go ===
func DevopsBuildRunResource() *schema.Resource {
	return &schema.Resource{
func createDevopsBuildRun(d *schema.ResourceData, m interface{}) error {
	sync := &DevopsBuildRunResourceCrud{}
func readDevopsBuildRun(d *schema.ResourceData, m interface{}) error {
	sync := &DevopsBuildRunResourceCrud{}
func updateDevopsBuildRun(d *schema.ResourceData, m interface{}) error {
	sync := &DevopsBuildRunResourceCrud{}
func deleteDevopsBuildRun(d *schema.ResourceData, m interface{}) error {
	return nil
func (s *DevopsBuildRunResourceCrud) ID() string {
	return *s.Res.Id
func (s *DevopsBuildRunResourceCrud) CreatedPending() []string {
	return []string{
func (s *DevopsBuildRunResourceCrud) CreatedTarget() []string {
	return []string{
func (s *DevopsBuildRunResourceCrud) DeletedPending() []string {
	return []string{}
func (s *DevopsBuildRunResourceCrud) DeletedTarget() []string {
	return []string{}
func (s *DevopsBuildRunResourceCrud) Create() error {
	request := oci_devops.CreateBuildRunRequest{}
func (s *DevopsBuildRunResourceCrud) Get() error {
	request := oci_devops.GetBuildRunRequest{}
func (s *DevopsBuildRunResourceCrud) Update() error {
	request := oci_devops.UpdateBuildRunRequest{}
func (s *DevopsBuildRunResourceCrud) SetData() error {
	if s.Res.BuildOutputs != nil {
func (s *DevopsBuildRunResourceCrud) mapToActualBuildRunnerShapeConfig(fieldKeyFormat string) (oci_devops.ActualBuildRunnerShapeConfig, error) {
	result := oci_devops.ActualBuildRunnerShapeConfig{}
func (s *DevopsBuildRunResourceCrud) mapToBitbucketCloudFilterAttributes(fieldKeyFormat string) (oci_devops.BitbucketCloudFilterAttributes, error) {
	result := oci_devops.BitbucketCloudFilterAttributes{}
func (s *DevopsBuildRunResourceCrud) mapToBitbucketServerFilterAttributes(fieldKeyFormat string) (oci_devops.BitbucketServerFilterAttributes, error) {
	result := oci_devops.BitbucketServerFilterAttributes{}
func (s *DevopsBuildRunResourceCrud) mapToBitbucketCloudFilterExclusionAttributes(fieldKeyFormat string) (oci_devops.BitbucketCloudFilterExclusionAttributes, error) {
	result := oci_devops.BitbucketCloudFilterExclusionAttributes{}
func (s *DevopsBuildRunResourceCrud) mapToBuildSource(fieldKeyFormat string) (oci_devops.BuildSource, error) {
	var baseObject oci_devops.BuildSource
func (s *DevopsBuildRunResourceCrud) mapToBuildSourceCollection(fieldKeyFormat string) (oci_devops.BuildSourceCollection, error) {
	result := oci_devops.BuildSourceCollection{}
func (s *DevopsBuildRunResourceCrud) mapToBuildStageRunStep(fieldKeyFormat string) (oci_devops.BuildStageRunStep, error) {
	result := oci_devops.BuildStageRunStep{}
func (s *DevopsBuildRunResourceCrud) mapToDeliveredArtifact(fieldKeyFormat string) (oci_devops.DeliveredArtifact, error) {
	var baseObject oci_devops.DeliveredArtifact
func (s *DevopsBuildRunResourceCrud) mapToDeliveredArtifactCollection(fieldKeyFormat string) (oci_devops.DeliveredArtifactCollection, error) {
	result := oci_devops.DeliveredArtifactCollection{}
func (s *DevopsBuildRunResourceCrud) mapToDeployArtifactOverrideArgument(fieldKeyFormat string) (oci_devops.DeployArtifactOverrideArgument, error) {
	result := oci_devops.DeployArtifactOverrideArgument{}
func (s *DevopsBuildRunResourceCrud) mapToDeployArtifactOverrideArgumentCollection(fieldKeyFormat string) (oci_devops.DeployArtifactOverrideArgumentCollection, error) {
	result := oci_devops.DeployArtifactOverrideArgumentCollection{}
func (s *DevopsBuildRunResourceCrud) mapToDevopsCodeRepositoryFilterAttributes(fieldKeyFormat string) (oci_devops.DevopsCodeRepositoryFilterAttributes, error) {
	result := oci_devops.DevopsCodeRepositoryFilterAttributes{}
func (s *DevopsBuildRunResourceCrud) mapToDevopsCodeRepositoryFilterExclusionAttributes(fieldKeyFormat string) (oci_devops.DevopsCodeRepositoryFilterExclusionAttributes, error) {
	result := oci_devops.DevopsCodeRepositoryFilterExclusionAttributes{}
func (s *DevopsBuildRunResourceCrud) mapToExportedVariable(fieldKeyFormat string) (oci_devops.ExportedVariable, error) {
	result := oci_devops.ExportedVariable{}
func (s *DevopsBuildRunResourceCrud) mapToExportedVariableCollection(fieldKeyFormat string) (oci_devops.ExportedVariableCollection, error) {
	result := oci_devops.ExportedVariableCollection{}
func (s *DevopsBuildRunResourceCrud) mapToFileFilter(fieldKeyFormat string) (oci_devops.FileFilter, error) {
	result := oci_devops.FileFilter{}
func (s *DevopsBuildRunResourceCrud) mapToFilter(fieldKeyFormat string) (oci_devops.Filter, error) {
	var baseObject oci_devops.Filter
func (s *DevopsBuildRunResourceCrud) mapToGithubFilterAttributes(fieldKeyFormat string) (oci_devops.GithubFilterAttributes, error) {
	result := oci_devops.GithubFilterAttributes{}
func (s *DevopsBuildRunResourceCrud) mapToGithubFilterExclusionAttributes(fieldKeyFormat string) (oci_devops.GithubFilterExclusionAttributes, error) {
	result := oci_devops.GithubFilterExclusionAttributes{}
func (s *DevopsBuildRunResourceCrud) mapToGitlabFilterAttributes(fieldKeyFormat string) (oci_devops.GitlabFilterAttributes, error) {
	result := oci_devops.GitlabFilterAttributes{}
func (s *DevopsBuildRunResourceCrud) mapToGitlabFilterExclusionAttributes(fieldKeyFormat string) (oci_devops.GitlabFilterExclusionAttributes, error) {
	result := oci_devops.GitlabFilterExclusionAttributes{}
func (s *DevopsBuildRunResourceCrud) mapToGitlabServerFilterAttributes(fieldKeyFormat string) (oci_devops.GitlabServerFilterAttributes, error) {
	result := oci_devops.GitlabServerFilterAttributes{}
func (s *DevopsBuildRunResourceCrud) mapToNetworkChannel(fieldKeyFormat string) (oci_devops.NetworkChannel, error) {
	var baseObject oci_devops.NetworkChannel
func (s *DevopsBuildRunResourceCrud) mapToTriggerAction(fieldKeyFormat string) (oci_devops.TriggerAction, error) {
	var baseObject oci_devops.TriggerAction
func (s *DevopsBuildRunResourceCrud) mapToTriggerInfo(fieldKeyFormat string) (oci_devops.TriggerInfo, error) {
	result := oci_devops.TriggerInfo{}
func (s *DevopsBuildRunResourceCrud) mapToVbsFilterAttributes(fieldKeyFormat string) (oci_devops.VbsFilterAttributes, error) {
	result := oci_devops.VbsFilterAttributes{}
func (s *DevopsBuildRunResourceCrud) mapToVbsFilterExclusionAttributes(fieldKeyFormat string) (oci_devops.VbsFilterExclusionAttributes, error) {
	result := oci_devops.VbsFilterExclusionAttributes{}
func (s *DevopsBuildRunResourceCrud) mapToBuildRunArgumentCollection(fieldKeyFormat string) (oci_devops.BuildRunArgumentCollection, error) {
	result := oci_devops.BuildRunArgumentCollection{}
func (s *DevopsBuildRunResourceCrud) mapToBuildRunArgument(fieldKeyFormat string) (oci_devops.BuildRunArgument, error) {
	result := oci_devops.BuildRunArgument{}
func (s *DevopsBuildRunResourceCrud) mapToCommitInfo(fieldKeyFormat string) (oci_devops.CommitInfo, error) {
	result := oci_devops.CommitInfo{}

=== ./internal/service/devops/devops_repository_protected_branches_data_source.go ===
func DevopsRepositoryProtectedBranchesDataSource() *schema.Resource {
	return &schema.Resource{
func readDevopsRepositoryProtectedBranches(d *schema.ResourceData, m interface{}) error {
	sync := &DevopsRepositoryProtectedBranchesDataSourceCrud{}
func (s *DevopsRepositoryProtectedBranchesDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *DevopsRepositoryProtectedBranchesDataSourceCrud) Get() error {
	request := oci_devops.ListProtectedBranchesRequest{}
func (s *DevopsRepositoryProtectedBranchesDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/devops/devops_deploy_artifact_data_source.go ===
func DevopsDeployArtifactDataSource() *schema.Resource {
	fieldMap := make(map[string]*schema.Schema)
func readSingularDevopsDeployArtifact(d *schema.ResourceData, m interface{}) error {
	sync := &DevopsDeployArtifactDataSourceCrud{}
func (s *DevopsDeployArtifactDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *DevopsDeployArtifactDataSourceCrud) Get() error {
	request := oci_devops.GetDeployArtifactRequest{}
func (s *DevopsDeployArtifactDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/devops/devops_build_pipeline_stages_data_source.go ===
func DevopsBuildPipelineStagesDataSource() *schema.Resource {
	return &schema.Resource{
func readDevopsBuildPipelineStages(d *schema.ResourceData, m interface{}) error {
	sync := &DevopsBuildPipelineStagesDataSourceCrud{}
func (s *DevopsBuildPipelineStagesDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *DevopsBuildPipelineStagesDataSourceCrud) Get() error {
	request := oci_devops.ListBuildPipelineStagesRequest{}
func (s *DevopsBuildPipelineStagesDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/devops/devops_triggers_data_source.go ===
func DevopsTriggersDataSource() *schema.Resource {
	return &schema.Resource{
func readDevopsTriggers(d *schema.ResourceData, m interface{}) error {
	sync := &DevopsTriggersDataSourceCrud{}
func (s *DevopsTriggersDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *DevopsTriggersDataSourceCrud) Get() error {
	request := oci_devops.ListTriggersRequest{}
func (s *DevopsTriggersDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/devops/devops_connections_data_source.go ===
func DevopsConnectionsDataSource() *schema.Resource {
	return &schema.Resource{
func readDevopsConnections(d *schema.ResourceData, m interface{}) error {
	sync := &DevopsConnectionsDataSourceCrud{}
func (s *DevopsConnectionsDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *DevopsConnectionsDataSourceCrud) Get() error {
	request := oci_devops.ListConnectionsRequest{}
func (s *DevopsConnectionsDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/devops/devops_deploy_environments_data_source.go ===
func DevopsDeployEnvironmentsDataSource() *schema.Resource {
	return &schema.Resource{
func readDevopsDeployEnvironments(d *schema.ResourceData, m interface{}) error {
	sync := &DevopsDeployEnvironmentsDataSourceCrud{}
func (s *DevopsDeployEnvironmentsDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *DevopsDeployEnvironmentsDataSourceCrud) Get() error {
	request := oci_devops.ListDeployEnvironmentsRequest{}
func (s *DevopsDeployEnvironmentsDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/devops/devops_deploy_artifacts_data_source.go ===
func DevopsDeployArtifactsDataSource() *schema.Resource {
	return &schema.Resource{
func readDevopsDeployArtifacts(d *schema.ResourceData, m interface{}) error {
	sync := &DevopsDeployArtifactsDataSourceCrud{}
func (s *DevopsDeployArtifactsDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *DevopsDeployArtifactsDataSourceCrud) Get() error {
	request := oci_devops.ListDeployArtifactsRequest{}
func (s *DevopsDeployArtifactsDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/devops/devops_deployment_resource_extended.go ===
func resourceOkeClusterHelmReleaseDiff(c context.Context, d *schema.ResourceDiff, m interface{}) error {
	deployParams := extractDeploymentParameters(d)
func setHelmExecutionProgress(d *schema.ResourceDiff, resultProgress oci_devops.DeploymentExecutionProgress) {
	// Post-process the Helm Diff Deployment result to retrieve progress for only Helm Stages
func extractDeploymentParameters(d *schema.ResourceDiff) *DeploymentParams {
	deployPipelineId := d.Get("deploy_pipeline_id").(string)
func checkForHydrationWorkRequest(d *schema.ResourceData, m interface{}) {
	common.Debugf("checkForHydrationWorkRequest: enter, ResourceData= %v\n", d)

=== ./internal/service/devops/devops_project_data_source.go ===
func DevopsProjectDataSource() *schema.Resource {
	fieldMap := make(map[string]*schema.Schema)
func readSingularDevopsProject(d *schema.ResourceData, m interface{}) error {
	sync := &DevopsProjectDataSourceCrud{}
func (s *DevopsProjectDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *DevopsProjectDataSourceCrud) Get() error {
	request := oci_devops.GetProjectRequest{}
func (s *DevopsProjectDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/devops/devops_repository_mirror_records_data_source.go ===
func DevopsRepositoryMirrorRecordsDataSource() *schema.Resource {
	return &schema.Resource{
func readDevopsRepositoryMirrorRecords(d *schema.ResourceData, m interface{}) error {
	sync := &DevopsRepositoryMirrorRecordsDataSourceCrud{}
func (s *DevopsRepositoryMirrorRecordsDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *DevopsRepositoryMirrorRecordsDataSourceCrud) Get() error {
	request := oci_devops.ListMirrorRecordsRequest{}
func (s *DevopsRepositoryMirrorRecordsDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/devops/devops_deploy_artifact_resource.go ===
func DevopsDeployArtifactResource() *schema.Resource {
	return &schema.Resource{
func createDevopsDeployArtifact(d *schema.ResourceData, m interface{}) error {
	sync := &DevopsDeployArtifactResourceCrud{}
func readDevopsDeployArtifact(d *schema.ResourceData, m interface{}) error {
	sync := &DevopsDeployArtifactResourceCrud{}
func updateDevopsDeployArtifact(d *schema.ResourceData, m interface{}) error {
	sync := &DevopsDeployArtifactResourceCrud{}
func deleteDevopsDeployArtifact(d *schema.ResourceData, m interface{}) error {
	sync := &DevopsDeployArtifactResourceCrud{}
func (s *DevopsDeployArtifactResourceCrud) ID() string {
	return *s.Res.Id
func (s *DevopsDeployArtifactResourceCrud) CreatedPending() []string {
	return []string{
func (s *DevopsDeployArtifactResourceCrud) CreatedTarget() []string {
	return []string{
func (s *DevopsDeployArtifactResourceCrud) DeletedPending() []string {
	return []string{
func (s *DevopsDeployArtifactResourceCrud) DeletedTarget() []string {
	return []string{
func (s *DevopsDeployArtifactResourceCrud) Create() error {
	request := oci_devops.CreateDeployArtifactRequest{}
func (s *DevopsDeployArtifactResourceCrud) getDeployArtifactFromWorkRequest(workId *string, retryPolicy *oci_common.RetryPolicy,
	actionTypeEnum oci_devops.ActionTypeEnum, timeout time.Duration) error {
func (s *DevopsDeployArtifactResourceCrud) Get() error {
	request := oci_devops.GetDeployArtifactRequest{}
func (s *DevopsDeployArtifactResourceCrud) Update() error {
	request := oci_devops.UpdateDeployArtifactRequest{}
func (s *DevopsDeployArtifactResourceCrud) Delete() error {
	request := oci_devops.DeleteDeployArtifactRequest{}
func (s *DevopsDeployArtifactResourceCrud) SetData() error {
	s.D.Set("argument_substitution_mode", s.Res.ArgumentSubstitutionMode)
func (s *DevopsDeployArtifactResourceCrud) mapToDeployArtifactSource(fieldKeyFormat string) (oci_devops.DeployArtifactSource, error) {

func (s *DevopsDeployArtifactResourceCrud) mapToVerificationKeySource(fieldKeyFormat string) (oci_devops.VerificationKeySource, error) {
	var baseObject oci_devops.VerificationKeySource

=== ./internal/service/devops/devops_trigger_data_source.go ===
func DevopsTriggerDataSource() *schema.Resource {
	fieldMap := make(map[string]*schema.Schema)
func readSingularDevopsTrigger(d *schema.ResourceData, m interface{}) error {
	sync := &DevopsTriggerDataSourceCrud{}
func (s *DevopsTriggerDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *DevopsTriggerDataSourceCrud) Get() error {
	request := oci_devops.GetTriggerRequest{}
func (s *DevopsTriggerDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/devops/devops_repository_archive_content_data_source.go ===
func DevopsRepositoryArchiveContentDataSource() *schema.Resource {
	return &schema.Resource{
func readSingularDevopsRepositoryArchiveContent(d *schema.ResourceData, m interface{}) error {
	sync := &DevopsRepositoryArchiveContentDataSourceCrud{}
func (s *DevopsRepositoryArchiveContentDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *DevopsRepositoryArchiveContentDataSourceCrud) Get() error {
	request := oci_devops.GetRepositoryArchiveContentRequest{}
func (s *DevopsRepositoryArchiveContentDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/devops/devops_deploy_environment_data_source.go ===
func DevopsDeployEnvironmentDataSource() *schema.Resource {
	fieldMap := make(map[string]*schema.Schema)
func readSingularDevopsDeployEnvironment(d *schema.ResourceData, m interface{}) error {
	sync := &DevopsDeployEnvironmentDataSourceCrud{}
func (s *DevopsDeployEnvironmentDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *DevopsDeployEnvironmentDataSourceCrud) Get() error {
	request := oci_devops.GetDeployEnvironmentRequest{}
func (s *DevopsDeployEnvironmentDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/devops/devops_export.go ===
func getDevopsRepositoryRefId(resource *tf_export.OCIResource) (string, error) {

func getDevopsRepositorySettingId(resource *tf_export.OCIResource) (string, error) {

func getDevopsProjectRepositorySettingId(resource *tf_export.OCIResource) (string, error) {


=== ./internal/service/devops/devops_deploy_stage_resource.go ===
func DevopsDeployStageResource() *schema.Resource {
	return &schema.Resource{
func createDevopsDeployStage(d *schema.ResourceData, m interface{}) error {
	sync := &DevopsDeployStageResourceCrud{}
func readDevopsDeployStage(d *schema.ResourceData, m interface{}) error {
	sync := &DevopsDeployStageResourceCrud{}
func updateDevopsDeployStage(d *schema.ResourceData, m interface{}) error {
	sync := &DevopsDeployStageResourceCrud{}
func deleteDevopsDeployStage(d *schema.ResourceData, m interface{}) error {
	sync := &DevopsDeployStageResourceCrud{}
func (s *DevopsDeployStageResourceCrud) ID() string {
	deployStage := *s.Res
func (s *DevopsDeployStageResourceCrud) CreatedPending() []string {
	return []string{
func (s *DevopsDeployStageResourceCrud) CreatedTarget() []string {
	return []string{
func (s *DevopsDeployStageResourceCrud) DeletedPending() []string {
	return []string{
func (s *DevopsDeployStageResourceCrud) DeletedTarget() []string {
	return []string{
func (s *DevopsDeployStageResourceCrud) Create() error {
	request := oci_devops.CreateDeployStageRequest{}
func (s *DevopsDeployStageResourceCrud) getDeployStageFromWorkRequest(workId *string, retryPolicy *oci_common.RetryPolicy,
	actionTypeEnum oci_devops.ActionTypeEnum, timeout time.Duration) error {
func (s *DevopsDeployStageResourceCrud) Get() error {
	request := oci_devops.GetDeployStageRequest{}
func (s *DevopsDeployStageResourceCrud) Update() error {
	request := oci_devops.UpdateDeployStageRequest{}
func (s *DevopsDeployStageResourceCrud) Delete() error {
	request := oci_devops.DeleteDeployStageRequest{}
func (s *DevopsDeployStageResourceCrud) SetData() error {
	switch v := (*s.Res).(type) {
func (s *DevopsDeployStageResourceCrud) mapToApprovalPolicy(fieldKeyFormat string) (oci_devops.ApprovalPolicy, error) {
	var baseObject oci_devops.ApprovalPolicy
func (s *DevopsDeployStageResourceCrud) mapToBackendSetIpCollection(fieldKeyFormat string) (oci_devops.BackendSetIpCollection, error) {
	result := oci_devops.BackendSetIpCollection{}
func (s *DevopsDeployStageResourceCrud) mapToComputeInstanceGroupFailurePolicy(fieldKeyFormat string) (oci_devops.ComputeInstanceGroupFailurePolicy, error) {
	var baseObject oci_devops.ComputeInstanceGroupFailurePolicy
func (s *DevopsDeployStageResourceCrud) mapToComputeInstanceGroupRolloutPolicy(fieldKeyFormat string) (oci_devops.ComputeInstanceGroupRolloutPolicy, error) {
	var baseObject oci_devops.ComputeInstanceGroupRolloutPolicy
func (s *DevopsDeployStageResourceCrud) mapToContainerConfig(fieldKeyFormat string) (oci_devops.ContainerConfig, error) {
	var baseObject oci_devops.ContainerConfig
func (s *DevopsDeployStageResourceCrud) mapToDeployStagePredecessorCollection(fieldKeyFormat string) (oci_devops.DeployStagePredecessorCollection, error) {
	result := oci_devops.DeployStagePredecessorCollection{}
func (s *DevopsDeployStageResourceCrud) mapToDeployStagePredecessor(fieldKeyFormat string) (oci_devops.DeployStagePredecessor, error) {
	result := oci_devops.DeployStagePredecessor{}
func (s *DevopsDeployStageResourceCrud) mapToDeployStageRollbackPolicy(fieldKeyFormat string) (oci_devops.DeployStageRollbackPolicy, error) {
	var baseObject oci_devops.DeployStageRollbackPolicy
func (s *DevopsDeployStageResourceCrud) mapToHelmSetValue(fieldKeyFormat string) (oci_devops.HelmSetValue, error) {
	result := oci_devops.HelmSetValue{}
func (s *DevopsDeployStageResourceCrud) mapToHelmSetValueCollection(fieldKeyFormat string) (oci_devops.HelmSetValueCollection, error) {
	result := oci_devops.HelmSetValueCollection{}
func (s *DevopsDeployStageResourceCrud) mapToLoadBalancerConfig(fieldKeyFormat string) (oci_devops.LoadBalancerConfig, error) {
	result := oci_devops.LoadBalancerConfig{}
func (s *DevopsDeployStageResourceCrud) mapToLoadBalancerTrafficShiftRolloutPolicy(fieldKeyFormat string) (oci_devops.LoadBalancerTrafficShiftRolloutPolicy, error) {
	result := oci_devops.LoadBalancerTrafficShiftRolloutPolicy{}
func (s *DevopsDeployStageResourceCrud) mapToNetworkChannel(fieldKeyFormat string) (oci_devops.NetworkChannel, error) {
	var baseObject oci_devops.NetworkChannel
func (s *DevopsDeployStageResourceCrud) mapToOkeBlueGreenStrategy(fieldKeyFormat string) (oci_devops.OkeBlueGreenStrategy, error) {
	var baseObject oci_devops.OkeBlueGreenStrategy
func (s *DevopsDeployStageResourceCrud) mapToOkeCanaryStrategy(fieldKeyFormat string) (oci_devops.OkeCanaryStrategy, error) {
	var baseObject oci_devops.OkeCanaryStrategy
func (s *DevopsDeployStageResourceCrud) mapToShapeConfig(fieldKeyFormat string) (oci_devops.ShapeConfig, error) {
	result := oci_devops.ShapeConfig{}
func (s *DevopsDeployStageResourceCrud) mapToWaitCriteria(fieldKeyFormat string) (oci_devops.WaitCriteria, error) {
	var baseObject oci_devops.WaitCriteria
func (s *DevopsDeployStageResourceCrud) mapToWaitCriteriaSummary(fieldKeyFormat string) (oci_devops.WaitCriteriaSummary, error) {
	var baseObject oci_devops.WaitCriteriaSummary
func (s *DevopsDeployStageResourceCrud) populateTopLevelPolymorphicCreateDeployStageRequest(request *oci_devops.CreateDeployStageRequest) error {
	//discriminator
func (s *DevopsDeployStageResourceCrud) populateTopLevelPolymorphicUpdateDeployStageRequest(request *oci_devops.UpdateDeployStageRequest) error {
	//discriminator

=== ./internal/service/devops/devops_repositories_data_source.go ===
func DevopsRepositoriesDataSource() *schema.Resource {
	return &schema.Resource{
func readDevopsRepositories(d *schema.ResourceData, m interface{}) error {
	sync := &DevopsRepositoriesDataSourceCrud{}
func (s *DevopsRepositoriesDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *DevopsRepositoriesDataSourceCrud) Get() error {
	request := oci_devops.ListRepositoriesRequest{}
func (s *DevopsRepositoriesDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/devops/devops_repository_authors_data_source.go ===
func DevopsRepositoryAuthorsDataSource() *schema.Resource {
	return &schema.Resource{
func readDevopsRepositoryAuthors(d *schema.ResourceData, m interface{}) error {
	sync := &DevopsRepositoryAuthorsDataSourceCrud{}
func (s *DevopsRepositoryAuthorsDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *DevopsRepositoryAuthorsDataSourceCrud) Get() error {
	request := oci_devops.ListAuthorsRequest{}
func (s *DevopsRepositoryAuthorsDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/devops/devops_repository_file_diff_data_source.go ===
func DevopsRepositoryFileDiffDataSource() *schema.Resource {
	return &schema.Resource{
func readSingularDevopsRepositoryFileDiff(d *schema.ResourceData, m interface{}) error {
	sync := &DevopsRepositoryFileDiffDataSourceCrud{}
func (s *DevopsRepositoryFileDiffDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *DevopsRepositoryFileDiffDataSourceCrud) Get() error {
	request := oci_devops.GetRepoFileDiffRequest{}
func (s *DevopsRepositoryFileDiffDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/devops/devops_project_repository_setting_data_source.go ===
func DevopsProjectRepositorySettingDataSource() *schema.Resource {
	fieldMap := make(map[string]*schema.Schema)
func readSingularDevopsProjectRepositorySetting(d *schema.ResourceData, m interface{}) error {
	sync := &DevopsProjectRepositorySettingDataSourceCrud{}
func (s *DevopsProjectRepositorySettingDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *DevopsProjectRepositorySettingDataSourceCrud) Get() error {
	request := oci_devops.GetProjectRepositorySettingsRequest{}
func (s *DevopsProjectRepositorySettingDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/devops/devops_repository_setting_resource.go ===
func DevopsRepositorySettingResource() *schema.Resource {
	return &schema.Resource{
func createDevopsRepositorySetting(d *schema.ResourceData, m interface{}) error {
	sync := &DevopsRepositorySettingResourceCrud{}
func readDevopsRepositorySetting(d *schema.ResourceData, m interface{}) error {
	sync := &DevopsRepositorySettingResourceCrud{}
func updateDevopsRepositorySetting(d *schema.ResourceData, m interface{}) error {
	sync := &DevopsRepositorySettingResourceCrud{}
func deleteDevopsRepositorySetting(d *schema.ResourceData, m interface{}) error {
	sync := &DevopsRepositorySettingResourceCrud{}
func (s *DevopsRepositorySettingResourceCrud) ID() string {
	return GetRepositorySettingCompositeId(s.D.Get("repository_id").(string))
func (s *DevopsRepositorySettingResourceCrud) Create() error {
	request := oci_devops.UpdateRepositorySettingsRequest{}
func (s *DevopsRepositorySettingResourceCrud) Get() error {
	request := oci_devops.GetRepositorySettingsRequest{}
func (s *DevopsRepositorySettingResourceCrud) Update() error {
	request := oci_devops.UpdateRepositorySettingsRequest{}
func (s *DevopsRepositorySettingResourceCrud) Delete() error {
	request := oci_devops.DeleteRepositorySettingsRequest{}
func (s *DevopsRepositorySettingResourceCrud) SetData() error {

func (s *DevopsRepositorySettingResourceCrud) mapToMergeChecks(fieldKeyFormat string) (oci_devops.MergeChecks, error) {
	result := oci_devops.MergeChecks{}
func (s *DevopsRepositorySettingResourceCrud) mapToMergeSettings(fieldKeyFormat string) (oci_devops.MergeSettings, error) {
	result := oci_devops.MergeSettings{}
func (s *DevopsRepositorySettingResourceCrud) mapToUpdateApprovalRuleDetails(fieldKeyFormat string) (oci_devops.UpdateApprovalRuleDetails, error) {
	result := oci_devops.UpdateApprovalRuleDetails{}
func (s *DevopsRepositorySettingResourceCrud) mapToUpdateApprovalRuleDetailsCollection(fieldKeyFormat string) (oci_devops.UpdateApprovalRuleDetailsCollection, error) {
	result := oci_devops.UpdateApprovalRuleDetailsCollection{}
func (s *DevopsRepositorySettingResourceCrud) mapToUpdateReviewerDetails(fieldKeyFormat string) (oci_devops.UpdateReviewerDetails, error) {
	result := oci_devops.UpdateReviewerDetails{}

=== ./internal/service/devops/devops_connection_resource.go ===
func DevopsConnectionResource() *schema.Resource {
	return &schema.Resource{
func createDevopsConnection(d *schema.ResourceData, m interface{}) error {
	sync := &DevopsConnectionResourceCrud{}
func readDevopsConnection(d *schema.ResourceData, m interface{}) error {
	sync := &DevopsConnectionResourceCrud{}
func updateDevopsConnection(d *schema.ResourceData, m interface{}) error {
	sync := &DevopsConnectionResourceCrud{}
func deleteDevopsConnection(d *schema.ResourceData, m interface{}) error {
	sync := &DevopsConnectionResourceCrud{}
func (s *DevopsConnectionResourceCrud) ID() string {
	connection := *s.Res
func (s *DevopsConnectionResourceCrud) CreatedPending() []string {
	return []string{}
func (s *DevopsConnectionResourceCrud) CreatedTarget() []string {
	return []string{
func (s *DevopsConnectionResourceCrud) DeletedPending() []string {
	return []string{}
func (s *DevopsConnectionResourceCrud) DeletedTarget() []string {
	return []string{}
func (s *DevopsConnectionResourceCrud) Create() error {
	request := oci_devops.CreateConnectionRequest{}
func (s *DevopsConnectionResourceCrud) getConnectionFromWorkRequest(workId *string, retryPolicy *oci_common.RetryPolicy,
	actionTypeEnum oci_devops.ActionTypeEnum, timeout time.Duration) error {
func (s *DevopsConnectionResourceCrud) Get() error {
	request := oci_devops.GetConnectionRequest{}
func (s *DevopsConnectionResourceCrud) Update() error {
	request := oci_devops.UpdateConnectionRequest{}
func (s *DevopsConnectionResourceCrud) Delete() error {
	request := oci_devops.DeleteConnectionRequest{}
func (s *DevopsConnectionResourceCrud) SetData() error {
	switch v := (*s.Res).(type) {
func (s *DevopsConnectionResourceCrud) mapToTlsVerifyConfig(fieldKeyFormat string) (oci_devops.TlsVerifyConfig, error) {
	var baseObject oci_devops.TlsVerifyConfig
func (s *DevopsConnectionResourceCrud) populateTopLevelPolymorphicCreateConnectionRequest(request *oci_devops.CreateConnectionRequest) error {
	//discriminator
func (s *DevopsConnectionResourceCrud) populateTopLevelPolymorphicUpdateConnectionRequest(request *oci_devops.UpdateConnectionRequest) error {
	//discriminator

=== ./internal/service/devops/devops_repository_ref_data_source.go ===
func DevopsRepositoryRefDataSource() *schema.Resource {
	fieldMap := make(map[string]*schema.Schema)
func readSingularDevopsRepositoryRef(d *schema.ResourceData, m interface{}) error {
	sync := &DevopsRepositoryRefDataSourceCrud{}
func (s *DevopsRepositoryRefDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *DevopsRepositoryRefDataSourceCrud) Get() error {
	request := oci_devops.GetRefRequest{}
func (s *DevopsRepositoryRefDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/devops/devops_build_pipeline_data_source.go ===
func DevopsBuildPipelineDataSource() *schema.Resource {
	fieldMap := make(map[string]*schema.Schema)
func readSingularDevopsBuildPipeline(d *schema.ResourceData, m interface{}) error {
	sync := &DevopsBuildPipelineDataSourceCrud{}
func (s *DevopsBuildPipelineDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *DevopsBuildPipelineDataSourceCrud) Get() error {
	request := oci_devops.GetBuildPipelineRequest{}
func (s *DevopsBuildPipelineDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/devops/devops_repository_object_content_data_source.go ===
func DevopsRepositoryObjectContentDataSource() *schema.Resource {
	return &schema.Resource{
func readSingularDevopsRepositoryObjectContent(d *schema.ResourceData, m interface{}) error {
	sync := &DevopsRepositoryObjectContentDataSourceCrud{}
func (s *DevopsRepositoryObjectContentDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *DevopsRepositoryObjectContentDataSourceCrud) Get() error {
	request := oci_devops.GetObjectContentRequest{}
func (s *DevopsRepositoryObjectContentDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/devops/devops_deploy_pipeline_resource.go ===
func DevopsDeployPipelineResource() *schema.Resource {
	return &schema.Resource{
func createDevopsDeployPipeline(d *schema.ResourceData, m interface{}) error {
	sync := &DevopsDeployPipelineResourceCrud{}
func readDevopsDeployPipeline(d *schema.ResourceData, m interface{}) error {
	sync := &DevopsDeployPipelineResourceCrud{}
func updateDevopsDeployPipeline(d *schema.ResourceData, m interface{}) error {
	sync := &DevopsDeployPipelineResourceCrud{}
func deleteDevopsDeployPipeline(d *schema.ResourceData, m interface{}) error {
	sync := &DevopsDeployPipelineResourceCrud{}
func (s *DevopsDeployPipelineResourceCrud) ID() string {
	return *s.Res.Id
func (s *DevopsDeployPipelineResourceCrud) CreatedPending() []string {
	return []string{
func (s *DevopsDeployPipelineResourceCrud) CreatedTarget() []string {
	return []string{
func (s *DevopsDeployPipelineResourceCrud) DeletedPending() []string {
	return []string{
func (s *DevopsDeployPipelineResourceCrud) DeletedTarget() []string {
	return []string{
func (s *DevopsDeployPipelineResourceCrud) Create() error {
	request := oci_devops.CreateDeployPipelineRequest{}
func (s *DevopsDeployPipelineResourceCrud) getDeployPipelineFromWorkRequest(workId *string, retryPolicy *oci_common.RetryPolicy,
	actionTypeEnum oci_devops.ActionTypeEnum, timeout time.Duration) error {
func (s *DevopsDeployPipelineResourceCrud) Get() error {
	request := oci_devops.GetDeployPipelineRequest{}
func (s *DevopsDeployPipelineResourceCrud) Update() error {
	request := oci_devops.UpdateDeployPipelineRequest{}
func (s *DevopsDeployPipelineResourceCrud) Delete() error {
	request := oci_devops.DeleteDeployPipelineRequest{}
func (s *DevopsDeployPipelineResourceCrud) SetData() error {
	if s.Res.CompartmentId != nil {
func (s *DevopsDeployPipelineResourceCrud) mapToDeployPipelineParameterCollection(fieldKeyFormat string) (oci_devops.DeployPipelineParameterCollection, error) {
	result := oci_devops.DeployPipelineParameterCollection{}
func (s *DevopsDeployPipelineResourceCrud) mapToDeployPipelineParameter(fieldKeyFormat string) (oci_devops.DeployPipelineParameter, error) {
	result := oci_devops.DeployPipelineParameter{}

=== ./internal/service/devops/devops_build_pipeline_stage_resource.go ===
func DevopsBuildPipelineStageResource() *schema.Resource {
	return &schema.Resource{
func createDevopsBuildPipelineStage(d *schema.ResourceData, m interface{}) error {
	sync := &DevopsBuildPipelineStageResourceCrud{}
func readDevopsBuildPipelineStage(d *schema.ResourceData, m interface{}) error {
	sync := &DevopsBuildPipelineStageResourceCrud{}
func updateDevopsBuildPipelineStage(d *schema.ResourceData, m interface{}) error {
	sync := &DevopsBuildPipelineStageResourceCrud{}
func deleteDevopsBuildPipelineStage(d *schema.ResourceData, m interface{}) error {
	sync := &DevopsBuildPipelineStageResourceCrud{}
func (s *DevopsBuildPipelineStageResourceCrud) ID() string {
	buildPipelineStage := *s.Res
func (s *DevopsBuildPipelineStageResourceCrud) CreatedPending() []string {
	return []string{
func (s *DevopsBuildPipelineStageResourceCrud) CreatedTarget() []string {
	return []string{
func (s *DevopsBuildPipelineStageResourceCrud) DeletedPending() []string {
	return []string{
func (s *DevopsBuildPipelineStageResourceCrud) DeletedTarget() []string {
	return []string{
func (s *DevopsBuildPipelineStageResourceCrud) Create() error {
	request := oci_devops.CreateBuildPipelineStageRequest{}
func (s *DevopsBuildPipelineStageResourceCrud) getBuildPipelineStageFromWorkRequest(workId *string, retryPolicy *oci_common.RetryPolicy,
	actionTypeEnum oci_devops.ActionTypeEnum, timeout time.Duration) error {
func (s *DevopsBuildPipelineStageResourceCrud) Get() error {
	request := oci_devops.GetBuildPipelineStageRequest{}
func (s *DevopsBuildPipelineStageResourceCrud) Update() error {
	request := oci_devops.UpdateBuildPipelineStageRequest{}
func (s *DevopsBuildPipelineStageResourceCrud) Delete() error {
	request := oci_devops.DeleteBuildPipelineStageRequest{}
func (s *DevopsBuildPipelineStageResourceCrud) SetData() error {
	switch v := (*s.Res).(type) {
func (s *DevopsBuildPipelineStageResourceCrud) mapToBuildRunnerShapeConfig(fieldKeyFormat string) (oci_devops.BuildRunnerShapeConfig, error) {
	var baseObject oci_devops.BuildRunnerShapeConfig
func (s *DevopsBuildPipelineStageResourceCrud) mapToBuildSource(fieldKeyFormat string) (oci_devops.BuildSource, error) {
	var baseObject oci_devops.BuildSource
func (s *DevopsBuildPipelineStageResourceCrud) mapToBuildSourceCollection(fieldKeyFormat string) (oci_devops.BuildSourceCollection, error) {
	result := oci_devops.BuildSourceCollection{}
func (s *DevopsBuildPipelineStageResourceCrud) mapToCreateWaitCriteriaDetails(fieldKeyFormat string) (oci_devops.CreateWaitCriteriaDetails, error) {
	var baseObject oci_devops.CreateWaitCriteriaDetails
func (s *DevopsBuildPipelineStageResourceCrud) mapToDeliverArtifact(fieldKeyFormat string) (oci_devops.DeliverArtifact, error) {
	result := oci_devops.DeliverArtifact{}
func (s *DevopsBuildPipelineStageResourceCrud) mapToDeliverArtifactCollection(fieldKeyFormat string) (oci_devops.DeliverArtifactCollection, error) {
	result := oci_devops.DeliverArtifactCollection{}
func (s *DevopsBuildPipelineStageResourceCrud) mapToNetworkChannel(fieldKeyFormat string) (oci_devops.NetworkChannel, error) {
	var baseObject oci_devops.NetworkChannel
func (s *DevopsBuildPipelineStageResourceCrud) mapToUpdateWaitCriteriaDetails(fieldKeyFormat string) (oci_devops.UpdateWaitCriteriaDetails, error) {
	var baseObject oci_devops.UpdateWaitCriteriaDetails
func (s *DevopsBuildPipelineStageResourceCrud) mapToWaitCriteria(fieldKeyFormat string) (oci_devops.WaitCriteria, error) {
	var baseObject oci_devops.WaitCriteria
func (s *DevopsBuildPipelineStageResourceCrud) populateTopLevelPolymorphicCreateBuildPipelineStageRequest(request *oci_devops.CreateBuildPipelineStageRequest) error {
	//discriminator
func (s *DevopsBuildPipelineStageResourceCrud) populateTopLevelPolymorphicUpdateBuildPipelineStageRequest(request *oci_devops.UpdateBuildPipelineStageRequest) error {
	//discriminator
func (s *DevopsBuildPipelineStageResourceCrud) mapToBuildPipelineStagePredecessorCollection(fieldKeyFormat string) (oci_devops.BuildPipelineStagePredecessorCollection, error) {
	result := oci_devops.BuildPipelineStagePredecessorCollection{}
func (s *DevopsBuildPipelineStageResourceCrud) mapToBuildPipelineStagePredecessor(fieldKeyFormat string) (oci_devops.BuildPipelineStagePredecessor, error) {
	result := oci_devops.BuildPipelineStagePredecessor{}

=== ./internal/service/devops/devops_deploy_environment_resource.go ===
func DevopsDeployEnvironmentResource() *schema.Resource {
	return &schema.Resource{
func createDevopsDeployEnvironment(d *schema.ResourceData, m interface{}) error {
	sync := &DevopsDeployEnvironmentResourceCrud{}
func readDevopsDeployEnvironment(d *schema.ResourceData, m interface{}) error {
	sync := &DevopsDeployEnvironmentResourceCrud{}
func updateDevopsDeployEnvironment(d *schema.ResourceData, m interface{}) error {
	sync := &DevopsDeployEnvironmentResourceCrud{}
func deleteDevopsDeployEnvironment(d *schema.ResourceData, m interface{}) error {
	sync := &DevopsDeployEnvironmentResourceCrud{}
func (s *DevopsDeployEnvironmentResourceCrud) ID() string {
	deployEnvironment := *s.Res
func (s *DevopsDeployEnvironmentResourceCrud) CreatedPending() []string {
	return []string{
func (s *DevopsDeployEnvironmentResourceCrud) CreatedTarget() []string {
	return []string{
func (s *DevopsDeployEnvironmentResourceCrud) DeletedPending() []string {
	return []string{
func (s *DevopsDeployEnvironmentResourceCrud) DeletedTarget() []string {
	return []string{
func (s *DevopsDeployEnvironmentResourceCrud) Create() error {
	request := oci_devops.CreateDeployEnvironmentRequest{}
func (s *DevopsDeployEnvironmentResourceCrud) getDeployEnvironmentFromWorkRequest(workId *string, retryPolicy *oci_common.RetryPolicy,
	actionTypeEnum oci_devops.ActionTypeEnum, timeout time.Duration) error {
func (s *DevopsDeployEnvironmentResourceCrud) Get() error {
	request := oci_devops.GetDeployEnvironmentRequest{}
func (s *DevopsDeployEnvironmentResourceCrud) Update() error {
	request := oci_devops.UpdateDeployEnvironmentRequest{}
func (s *DevopsDeployEnvironmentResourceCrud) Delete() error {
	request := oci_devops.DeleteDeployEnvironmentRequest{}
func (s *DevopsDeployEnvironmentResourceCrud) SetData() error {
	switch v := (*s.Res).(type) {
func (s *DevopsDeployEnvironmentResourceCrud) mapToComputeInstanceGroupSelector(fieldKeyFormat string) (oci_devops.ComputeInstanceGroupSelector, error) {
	var baseObject oci_devops.ComputeInstanceGroupSelector
func (s *DevopsDeployEnvironmentResourceCrud) mapToComputeInstanceGroupSelectorCollection(fieldKeyFormat string) (oci_devops.ComputeInstanceGroupSelectorCollection, error) {
	result := oci_devops.ComputeInstanceGroupSelectorCollection{}
func (s *DevopsDeployEnvironmentResourceCrud) mapToNetworkChannel(fieldKeyFormat string) (oci_devops.NetworkChannel, error) {
	var baseObject oci_devops.NetworkChannel
func (s *DevopsDeployEnvironmentResourceCrud) populateTopLevelPolymorphicCreateDeployEnvironmentRequest(request *oci_devops.CreateDeployEnvironmentRequest) error {
	//discriminator
func (s *DevopsDeployEnvironmentResourceCrud) populateTopLevelPolymorphicUpdateDeployEnvironmentRequest(request *oci_devops.UpdateDeployEnvironmentRequest) error {
	//discriminator

=== ./internal/service/devops/devops_build_pipeline_resource.go ===
func DevopsBuildPipelineResource() *schema.Resource {
	return &schema.Resource{
func createDevopsBuildPipeline(d *schema.ResourceData, m interface{}) error {
	sync := &DevopsBuildPipelineResourceCrud{}
func readDevopsBuildPipeline(d *schema.ResourceData, m interface{}) error {
	sync := &DevopsBuildPipelineResourceCrud{}
func updateDevopsBuildPipeline(d *schema.ResourceData, m interface{}) error {
	sync := &DevopsBuildPipelineResourceCrud{}
func deleteDevopsBuildPipeline(d *schema.ResourceData, m interface{}) error {
	sync := &DevopsBuildPipelineResourceCrud{}
func (s *DevopsBuildPipelineResourceCrud) ID() string {
	return *s.Res.Id
func (s *DevopsBuildPipelineResourceCrud) CreatedPending() []string {
	return []string{
func (s *DevopsBuildPipelineResourceCrud) CreatedTarget() []string {
	return []string{
func (s *DevopsBuildPipelineResourceCrud) DeletedPending() []string {
	return []string{
func (s *DevopsBuildPipelineResourceCrud) DeletedTarget() []string {
	return []string{
func (s *DevopsBuildPipelineResourceCrud) Create() error {
	request := oci_devops.CreateBuildPipelineRequest{}
func (s *DevopsBuildPipelineResourceCrud) getBuildPipelineFromWorkRequest(workId *string, retryPolicy *oci_common.RetryPolicy,
	actionTypeEnum oci_devops.ActionTypeEnum, timeout time.Duration) error {
func (s *DevopsBuildPipelineResourceCrud) Get() error {
	request := oci_devops.GetBuildPipelineRequest{}
func (s *DevopsBuildPipelineResourceCrud) Update() error {
	request := oci_devops.UpdateBuildPipelineRequest{}
func (s *DevopsBuildPipelineResourceCrud) Delete() error {
	request := oci_devops.DeleteBuildPipelineRequest{}
func (s *DevopsBuildPipelineResourceCrud) SetData() error {
	if s.Res.BuildPipelineParameters != nil {
func (s *DevopsBuildPipelineResourceCrud) mapToBuildPipelineParameterCollection(fieldKeyFormat string) (oci_devops.BuildPipelineParameterCollection, error) {
	result := oci_devops.BuildPipelineParameterCollection{}
func (s *DevopsBuildPipelineResourceCrud) mapToBuildPipelineParameter(fieldKeyFormat string) (oci_devops.BuildPipelineParameter, error) {
	result := oci_devops.BuildPipelineParameter{}

=== ./internal/service/devops/devops_deploy_stage_data_source.go ===
func DevopsDeployStageDataSource() *schema.Resource {
	fieldMap := make(map[string]*schema.Schema)
func readSingularDevopsDeployStage(d *schema.ResourceData, m interface{}) error {
	sync := &DevopsDeployStageDataSourceCrud{}
func (s *DevopsDeployStageDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *DevopsDeployStageDataSourceCrud) Get() error {
	request := oci_devops.GetDeployStageRequest{}
func (s *DevopsDeployStageDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/devops/devops_repository_author_data_source.go ===
func DevopsRepositoryAuthorDataSource() *schema.Resource {
	return &schema.Resource{
func readSingularDevopsRepositoryAuthor(d *schema.ResourceData, m interface{}) error {
	sync := &DevopsRepositoryAuthorDataSourceCrud{}
func (s *DevopsRepositoryAuthorDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *DevopsRepositoryAuthorDataSourceCrud) Get() error {
	request := oci_devops.ListAuthorsRequest{}
func (s *DevopsRepositoryAuthorDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/devops/devops_repository_mirror_record_data_source.go ===
func DevopsRepositoryMirrorRecordDataSource() *schema.Resource {
	return &schema.Resource{
func readSingularDevopsRepositoryMirrorRecord(d *schema.ResourceData, m interface{}) error {
	sync := &DevopsRepositoryMirrorRecordDataSourceCrud{}
func (s *DevopsRepositoryMirrorRecordDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *DevopsRepositoryMirrorRecordDataSourceCrud) Get() error {
	request := oci_devops.GetMirrorRecordRequest{}
func (s *DevopsRepositoryMirrorRecordDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/devops/register_resource.go ===
func RegisterResource() {
	tfresource.RegisterResource("oci_devops_build_pipeline", DevopsBuildPipelineResource())

=== ./internal/service/golden_gate/golden_gate_deployment_certificate_data_source.go ===
func GoldenGateDeploymentCertificateDataSource() *schema.Resource {
	fieldMap := make(map[string]*schema.Schema)
func readSingularGoldenGateDeploymentCertificate(d *schema.ResourceData, m interface{}) error {
	sync := &GoldenGateDeploymentCertificateDataSourceCrud{}
func (s *GoldenGateDeploymentCertificateDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *GoldenGateDeploymentCertificateDataSourceCrud) Get() error {
	request := oci_golden_gate.GetCertificateRequest{}
func (s *GoldenGateDeploymentCertificateDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/golden_gate/golden_gate_message_data_source.go ===
func GoldenGateMessageDataSource() *schema.Resource {
	return &schema.Resource{
func readSingularGoldenGateMessage(d *schema.ResourceData, m interface{}) error {
	sync := &GoldenGateMessageDataSourceCrud{}
func (s *GoldenGateMessageDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *GoldenGateMessageDataSourceCrud) Get() error {
	request := oci_golden_gate.ListMessagesRequest{}
func (s *GoldenGateMessageDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/golden_gate/golden_gate_deployment_types_data_source.go ===
func GoldenGateDeploymentTypesDataSource() *schema.Resource {
	return &schema.Resource{
func readGoldenGateDeploymentTypes(d *schema.ResourceData, m interface{}) error {
	sync := &GoldenGateDeploymentTypesDataSourceCrud{}
func (s *GoldenGateDeploymentTypesDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *GoldenGateDeploymentTypesDataSourceCrud) Get() error {
	request := oci_golden_gate.ListDeploymentTypesRequest{}
func (s *GoldenGateDeploymentTypesDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/golden_gate/golden_gate_deployment_backups_data_source.go ===
func GoldenGateDeploymentBackupsDataSource() *schema.Resource {
	return &schema.Resource{
func readGoldenGateDeploymentBackups(d *schema.ResourceData, m interface{}) error {
	sync := &GoldenGateDeploymentBackupsDataSourceCrud{}
func (s *GoldenGateDeploymentBackupsDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *GoldenGateDeploymentBackupsDataSourceCrud) Get() error {
	request := oci_golden_gate.ListDeploymentBackupsRequest{}
func (s *GoldenGateDeploymentBackupsDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/golden_gate/golden_gate_deployment_type_data_source.go ===
func GoldenGateDeploymentTypeDataSource() *schema.Resource {
	return &schema.Resource{
func readSingularGoldenGateDeploymentType(d *schema.ResourceData, m interface{}) error {
	sync := &GoldenGateDeploymentTypeDataSourceCrud{}
func (s *GoldenGateDeploymentTypeDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *GoldenGateDeploymentTypeDataSourceCrud) Get() error {
	request := oci_golden_gate.ListDeploymentTypesRequest{}
func (s *GoldenGateDeploymentTypeDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/golden_gate/golden_gate_trail_sequences_data_source.go ===
func GoldenGateTrailSequencesDataSource() *schema.Resource {
	return &schema.Resource{
func readGoldenGateTrailSequences(d *schema.ResourceData, m interface{}) error {
	sync := &GoldenGateTrailSequencesDataSourceCrud{}
func (s *GoldenGateTrailSequencesDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *GoldenGateTrailSequencesDataSourceCrud) Get() error {
	request := oci_golden_gate.ListTrailSequencesRequest{}
func (s *GoldenGateTrailSequencesDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/golden_gate/golden_gate_connection_assignments_data_source.go ===
func GoldenGateConnectionAssignmentsDataSource() *schema.Resource {
	return &schema.Resource{
func readGoldenGateConnectionAssignments(d *schema.ResourceData, m interface{}) error {
	sync := &GoldenGateConnectionAssignmentsDataSourceCrud{}
func (s *GoldenGateConnectionAssignmentsDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *GoldenGateConnectionAssignmentsDataSourceCrud) Get() error {
	request := oci_golden_gate.ListConnectionAssignmentsRequest{}
func (s *GoldenGateConnectionAssignmentsDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/golden_gate/golden_gate_messages_data_source.go ===
func GoldenGateMessagesDataSource() *schema.Resource {
	return &schema.Resource{
func readGoldenGateMessages(d *schema.ResourceData, m interface{}) error {
	sync := &GoldenGateMessagesDataSourceCrud{}
func (s *GoldenGateMessagesDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *GoldenGateMessagesDataSourceCrud) Get() error {
	request := oci_golden_gate.ListMessagesRequest{}
func (s *GoldenGateMessagesDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/golden_gate/golden_gate_deployment_upgrades_data_source.go ===
func GoldenGateDeploymentUpgradesDataSource() *schema.Resource {
	return &schema.Resource{
func readGoldenGateDeploymentUpgrades(d *schema.ResourceData, m interface{}) error {
	sync := &GoldenGateDeploymentUpgradesDataSourceCrud{}
func (s *GoldenGateDeploymentUpgradesDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *GoldenGateDeploymentUpgradesDataSourceCrud) Get() error {
	request := oci_golden_gate.ListDeploymentUpgradesRequest{}
func (s *GoldenGateDeploymentUpgradesDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/golden_gate/golden_gate_connections_data_source.go ===
func GoldenGateConnectionsDataSource() *schema.Resource {
	return &schema.Resource{
func readGoldenGateConnections(d *schema.ResourceData, m interface{}) error {
	sync := &GoldenGateConnectionsDataSourceCrud{}
func (s *GoldenGateConnectionsDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *GoldenGateConnectionsDataSourceCrud) Get() error {
	request := oci_golden_gate.ListConnectionsRequest{}
func (s *GoldenGateConnectionsDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/golden_gate/golden_gate_deployment_certificates_data_source.go ===
func GoldenGateDeploymentCertificatesDataSource() *schema.Resource {
	return &schema.Resource{
func readGoldenGateDeploymentCertificates(d *schema.ResourceData, m interface{}) error {
	sync := &GoldenGateDeploymentCertificatesDataSourceCrud{}
func (s *GoldenGateDeploymentCertificatesDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *GoldenGateDeploymentCertificatesDataSourceCrud) Get() error {
	request := oci_golden_gate.ListCertificatesRequest{}
func (s *GoldenGateDeploymentCertificatesDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/golden_gate/golden_gate_connection_resource.go ===
func GoldenGateConnectionResource() *schema.Resource {
	return &schema.Resource{
func createGoldenGateConnection(d *schema.ResourceData, m interface{}) error {
	sync := &GoldenGateConnectionResourceCrud{}
func readGoldenGateConnection(d *schema.ResourceData, m interface{}) error {
	sync := &GoldenGateConnectionResourceCrud{}
func updateGoldenGateConnection(d *schema.ResourceData, m interface{}) error {
	sync := &GoldenGateConnectionResourceCrud{}
func (s *GoldenGateConnectionResourceCrud) refreshConnection() error {
	refreshConnectionRequest := oci_golden_gate.RefreshConnectionRequest{}
func deleteGoldenGateConnection(d *schema.ResourceData, m interface{}) error {
	sync := &GoldenGateConnectionResourceCrud{}
func (s *GoldenGateConnectionResourceCrud) ID() string {
	connection := *s.Res
func (s *GoldenGateConnectionResourceCrud) CreatedPending() []string {
	return []string{
func (s *GoldenGateConnectionResourceCrud) CreatedTarget() []string {
	return []string{
func (s *GoldenGateConnectionResourceCrud) DeletedPending() []string {
	return []string{
func (s *GoldenGateConnectionResourceCrud) DeletedTarget() []string {
	return []string{
func (s *GoldenGateConnectionResourceCrud) Create() error {
	request := oci_golden_gate.CreateConnectionRequest{}
func (s *GoldenGateConnectionResourceCrud) getConnectionFromWorkRequest(workId *string, retryPolicy *oci_common.RetryPolicy,
	actionTypeEnum oci_golden_gate.ActionTypeEnum, timeout time.Duration) error {
func (s *GoldenGateConnectionResourceCrud) Get() error {
	request := oci_golden_gate.GetConnectionRequest{}
func (s *GoldenGateConnectionResourceCrud) Update() error {
	if compartment, ok := s.D.GetOkExists("compartment_id"); ok && s.D.HasChange("compartment_id") {
func (s *GoldenGateConnectionResourceCrud) Delete() error {
	request := oci_golden_gate.DeleteConnectionRequest{}
func (s *GoldenGateConnectionResourceCrud) SetData() error {
	switch v := (*s.Res).(type) {
func (s *GoldenGateConnectionResourceCrud) mapToAddResourceLockDetails(fieldKeyFormat string) (oci_golden_gate.AddResourceLockDetails, error) {
	result := oci_golden_gate.AddResourceLockDetails{}
func (s *GoldenGateConnectionResourceCrud) mapToKafkaBootstrapServer(fieldKeyFormat string) (oci_golden_gate.KafkaBootstrapServer, error) {
	result := oci_golden_gate.KafkaBootstrapServer{}
func (s *GoldenGateConnectionResourceCrud) mapToNameValuePair(fieldKeyFormat string) (oci_golden_gate.NameValuePair, error) {
	result := oci_golden_gate.NameValuePair{}
func (s *GoldenGateConnectionResourceCrud) populateTopLevelPolymorphicCreateConnectionRequest(request *oci_golden_gate.CreateConnectionRequest) error {
	//discriminator
func (s *GoldenGateConnectionResourceCrud) populateTopLevelPolymorphicUpdateConnectionRequest(request *oci_golden_gate.UpdateConnectionRequest) error {
	//discriminator
func (s *GoldenGateConnectionResourceCrud) updateCompartment(compartment interface{}) error {
	changeCompartmentRequest := oci_golden_gate.ChangeConnectionCompartmentRequest{}

=== ./internal/service/golden_gate/golden_gate_deployments_data_source.go ===
func GoldenGateDeploymentsDataSource() *schema.Resource {
	return &schema.Resource{
func readGoldenGateDeployments(d *schema.ResourceData, m interface{}) error {
	sync := &GoldenGateDeploymentsDataSourceCrud{}
func (s *GoldenGateDeploymentsDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *GoldenGateDeploymentsDataSourceCrud) Get() error {
	request := oci_golden_gate.ListDeploymentsRequest{}
func (s *GoldenGateDeploymentsDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/golden_gate/golden_gate_deployment_versions_data_source.go ===
func GoldenGateDeploymentVersionsDataSource() *schema.Resource {
	return &schema.Resource{
func readGoldenGateDeploymentVersions(d *schema.ResourceData, m interface{}) error {
	sync := &GoldenGateDeploymentVersionsDataSourceCrud{}
func (s *GoldenGateDeploymentVersionsDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *GoldenGateDeploymentVersionsDataSourceCrud) Get() error {
	request := oci_golden_gate.ListDeploymentVersionsRequest{}
func (s *GoldenGateDeploymentVersionsDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/golden_gate/golden_gate_deployment_backup_resource.go ===
func GoldenGateDeploymentBackupResource() *schema.Resource {
	return &schema.Resource{
func createGoldenGateDeploymentBackup(d *schema.ResourceData, m interface{}) error {
	sync := &GoldenGateDeploymentBackupResourceCrud{}
func readGoldenGateDeploymentBackup(d *schema.ResourceData, m interface{}) error {
	sync := &GoldenGateDeploymentBackupResourceCrud{}
func updateGoldenGateDeploymentBackup(d *schema.ResourceData, m interface{}) error {
	sync := &GoldenGateDeploymentBackupResourceCrud{}
func deleteGoldenGateDeploymentBackup(d *schema.ResourceData, m interface{}) error {
	sync := &GoldenGateDeploymentBackupResourceCrud{}
func (s *GoldenGateDeploymentBackupResourceCrud) ID() string {
	return *s.Res.Id
func (s *GoldenGateDeploymentBackupResourceCrud) CreatedPending() []string {
	return []string{
func (s *GoldenGateDeploymentBackupResourceCrud) CreatedTarget() []string {
	return []string{
func (s *GoldenGateDeploymentBackupResourceCrud) DeletedPending() []string {
	return []string{
func (s *GoldenGateDeploymentBackupResourceCrud) DeletedTarget() []string {
	return []string{
func (s *GoldenGateDeploymentBackupResourceCrud) Create() error {
	request := oci_golden_gate.CreateDeploymentBackupRequest{}
func (s *GoldenGateDeploymentBackupResourceCrud) getDeploymentBackupFromWorkRequest(workId *string, retryPolicy *oci_common.RetryPolicy,
	actionTypeEnum oci_golden_gate.ActionTypeEnum, timeout time.Duration) error {
func (s *GoldenGateDeploymentBackupResourceCrud) Get() error {
	request := oci_golden_gate.GetDeploymentBackupRequest{}
func (s *GoldenGateDeploymentBackupResourceCrud) Update() error {
	if compartment, ok := s.D.GetOkExists("compartment_id"); ok && s.D.HasChange("compartment_id") {
func (s *GoldenGateDeploymentBackupResourceCrud) Delete() error {
	request := oci_golden_gate.DeleteDeploymentBackupRequest{}
func (s *GoldenGateDeploymentBackupResourceCrud) SetData() error {
	s.D.Set("backup_type", s.Res.BackupType)
func (s *GoldenGateDeploymentBackupResourceCrud) mapToAddResourceLockDetails(fieldKeyFormat string) (oci_golden_gate.AddResourceLockDetails, error) {
	result := oci_golden_gate.AddResourceLockDetails{}
func (s *GoldenGateDeploymentBackupResourceCrud) updateCompartment(compartment interface{}) error {
	changeCompartmentRequest := oci_golden_gate.ChangeDeploymentBackupCompartmentRequest{}

=== ./internal/service/golden_gate/golden_gate_connection_assignment_data_source.go ===
func GoldenGateConnectionAssignmentDataSource() *schema.Resource {
	fieldMap := make(map[string]*schema.Schema)
func readSingularGoldenGateConnectionAssignment(d *schema.ResourceData, m interface{}) error {
	sync := &GoldenGateConnectionAssignmentDataSourceCrud{}
func (s *GoldenGateConnectionAssignmentDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *GoldenGateConnectionAssignmentDataSourceCrud) Get() error {
	request := oci_golden_gate.GetConnectionAssignmentRequest{}
func (s *GoldenGateConnectionAssignmentDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/golden_gate/golden_gate_database_registrations_data_source.go ===
func GoldenGateDatabaseRegistrationsDataSource() *schema.Resource {
	return &schema.Resource{
func readGoldenGateDatabaseRegistrations(d *schema.ResourceData, m interface{}) error {
	sync := &GoldenGateDatabaseRegistrationsDataSourceCrud{}
func (s *GoldenGateDatabaseRegistrationsDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *GoldenGateDatabaseRegistrationsDataSourceCrud) Get() error {
	request := oci_golden_gate.ListDatabaseRegistrationsRequest{}
func (s *GoldenGateDatabaseRegistrationsDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/golden_gate/golden_gate_deployment_upgrade_data_source.go ===
func GoldenGateDeploymentUpgradeDataSource() *schema.Resource {
	return &schema.Resource{
func readSingularGoldenGateDeploymentUpgrade(d *schema.ResourceData, m interface{}) error {
	sync := &GoldenGateDeploymentUpgradeDataSourceCrud{}
func (s *GoldenGateDeploymentUpgradeDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *GoldenGateDeploymentUpgradeDataSourceCrud) Get() error {
	request := oci_golden_gate.GetDeploymentUpgradeRequest{}
func (s *GoldenGateDeploymentUpgradeDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/golden_gate/golden_gate_deployment_certificate_resource.go ===
func GoldenGateDeploymentCertificateResource() *schema.Resource {
	return &schema.Resource{
func createGoldenGateDeploymentCertificate(d *schema.ResourceData, m interface{}) error {
	sync := &GoldenGateDeploymentCertificateResourceCrud{}
func readGoldenGateDeploymentCertificate(d *schema.ResourceData, m interface{}) error {
	sync := &GoldenGateDeploymentCertificateResourceCrud{}
func deleteGoldenGateDeploymentCertificate(d *schema.ResourceData, m interface{}) error {
	sync := &GoldenGateDeploymentCertificateResourceCrud{}
func (s *GoldenGateDeploymentCertificateResourceCrud) ID() string {
	return GetDeploymentCertificateCompositeId(s.D.Get("key").(string), s.D.Get("deployment_id").(string))
func (s *GoldenGateDeploymentCertificateResourceCrud) CreatedPending() []string {
	return []string{
func (s *GoldenGateDeploymentCertificateResourceCrud) CreatedTarget() []string {
	return []string{
func (s *GoldenGateDeploymentCertificateResourceCrud) DeletedPending() []string {
	return []string{
func (s *GoldenGateDeploymentCertificateResourceCrud) DeletedTarget() []string {
	return []string{
func (s *GoldenGateDeploymentCertificateResourceCrud) Create() error {
	request := oci_golden_gate.CreateCertificateRequest{}
func (s *GoldenGateDeploymentCertificateResourceCrud) getDeploymentCertificateFromWorkRequest(workId *string, retryPolicy *oci_common.RetryPolicy,
	actionTypeEnum oci_golden_gate.ActionTypeEnum, timeout time.Duration) error {
func (s *GoldenGateDeploymentCertificateResourceCrud) Get() error {
	request := oci_golden_gate.GetCertificateRequest{}
func (s *GoldenGateDeploymentCertificateResourceCrud) Delete() error {
	request := oci_golden_gate.DeleteCertificateRequest{}
func (s *GoldenGateDeploymentCertificateResourceCrud) SetData() error {


=== ./internal/service/golden_gate/golden_gate_database_registration_resource.go ===
func GoldenGateDatabaseRegistrationResource() *schema.Resource {
	return &schema.Resource{
func createGoldenGateDatabaseRegistration(d *schema.ResourceData, m interface{}) error {
	sync := &GoldenGateDatabaseRegistrationResourceCrud{}
func readGoldenGateDatabaseRegistration(d *schema.ResourceData, m interface{}) error {
	sync := &GoldenGateDatabaseRegistrationResourceCrud{}
func updateGoldenGateDatabaseRegistration(d *schema.ResourceData, m interface{}) error {
	sync := &GoldenGateDatabaseRegistrationResourceCrud{}
func deleteGoldenGateDatabaseRegistration(d *schema.ResourceData, m interface{}) error {
	sync := &GoldenGateDatabaseRegistrationResourceCrud{}
func (s *GoldenGateDatabaseRegistrationResourceCrud) ID() string {
	return *s.Res.Id
func (s *GoldenGateDatabaseRegistrationResourceCrud) CreatedPending() []string {
	return []string{
func (s *GoldenGateDatabaseRegistrationResourceCrud) CreatedTarget() []string {
	return []string{
func (s *GoldenGateDatabaseRegistrationResourceCrud) DeletedPending() []string {
	return []string{
func (s *GoldenGateDatabaseRegistrationResourceCrud) DeletedTarget() []string {
	return []string{
func (s *GoldenGateDatabaseRegistrationResourceCrud) Create() error {
	request := oci_golden_gate.CreateDatabaseRegistrationRequest{}
func (s *GoldenGateDatabaseRegistrationResourceCrud) getDatabaseRegistrationFromWorkRequest(workId *string, retryPolicy *oci_common.RetryPolicy,
	actionTypeEnum oci_golden_gate.ActionTypeEnum, timeout time.Duration) error {
func (s *GoldenGateDatabaseRegistrationResourceCrud) Get() error {
	request := oci_golden_gate.GetDatabaseRegistrationRequest{}
func (s *GoldenGateDatabaseRegistrationResourceCrud) Update() error {
	if compartment, ok := s.D.GetOkExists("compartment_id"); ok && s.D.HasChange("compartment_id") {
func (s *GoldenGateDatabaseRegistrationResourceCrud) Delete() error {
	request := oci_golden_gate.DeleteDatabaseRegistrationRequest{}
func (s *GoldenGateDatabaseRegistrationResourceCrud) SetData() error {
	if s.Res.AliasName != nil {
func (s *GoldenGateDatabaseRegistrationResourceCrud) updateCompartment(compartment interface{}) error {
	changeCompartmentRequest := oci_golden_gate.ChangeDatabaseRegistrationCompartmentRequest{}

=== ./internal/service/golden_gate/golden_gate_export.go ===
func getGoldenGateDeploymentCertificateId(resource *tf_export.OCIResource) (string, error) {


=== ./internal/service/golden_gate/golden_gate_trail_files_data_source.go ===
func GoldenGateTrailFilesDataSource() *schema.Resource {
	return &schema.Resource{
func readGoldenGateTrailFiles(d *schema.ResourceData, m interface{}) error {
	sync := &GoldenGateTrailFilesDataSourceCrud{}
func (s *GoldenGateTrailFilesDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *GoldenGateTrailFilesDataSourceCrud) Get() error {
	request := oci_golden_gate.ListTrailFilesRequest{}
func (s *GoldenGateTrailFilesDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/golden_gate/golden_gate_connection_data_source.go ===
func GoldenGateConnectionDataSource() *schema.Resource {
	fieldMap := make(map[string]*schema.Schema)
func readSingularGoldenGateConnection(d *schema.ResourceData, m interface{}) error {
	sync := &GoldenGateConnectionDataSourceCrud{}
func (s *GoldenGateConnectionDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *GoldenGateConnectionDataSourceCrud) Get() error {
	request := oci_golden_gate.GetConnectionRequest{}
func (s *GoldenGateConnectionDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/golden_gate/golden_gate_deployment_data_source.go ===
func GoldenGateDeploymentDataSource() *schema.Resource {
	fieldMap := make(map[string]*schema.Schema)
func readSingularGoldenGateDeployment(d *schema.ResourceData, m interface{}) error {
	sync := &GoldenGateDeploymentDataSourceCrud{}
func (s *GoldenGateDeploymentDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *GoldenGateDeploymentDataSourceCrud) Get() error {
	request := oci_golden_gate.GetDeploymentRequest{}
func (s *GoldenGateDeploymentDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/golden_gate/golden_gate_deployment_environments_data_source.go ===
func GoldenGateDeploymentEnvironmentsDataSource() *schema.Resource {
	return &schema.Resource{
func readGoldenGateDeploymentEnvironments(d *schema.ResourceData, m interface{}) error {
	sync := &GoldenGateDeploymentEnvironmentsDataSourceCrud{}
func (s *GoldenGateDeploymentEnvironmentsDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *GoldenGateDeploymentEnvironmentsDataSourceCrud) Get() error {
	request := oci_golden_gate.ListDeploymentEnvironmentsRequest{}
func (s *GoldenGateDeploymentEnvironmentsDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/golden_gate/golden_gate_connection_assignment_resource.go ===
func GoldenGateConnectionAssignmentResource() *schema.Resource {
	return &schema.Resource{
func createGoldenGateConnectionAssignment(d *schema.ResourceData, m interface{}) error {
	sync := &GoldenGateConnectionAssignmentResourceCrud{}
func readGoldenGateConnectionAssignment(d *schema.ResourceData, m interface{}) error {
	sync := &GoldenGateConnectionAssignmentResourceCrud{}
func deleteGoldenGateConnectionAssignment(d *schema.ResourceData, m interface{}) error {
	sync := &GoldenGateConnectionAssignmentResourceCrud{}
func (s *GoldenGateConnectionAssignmentResourceCrud) ID() string {
	return *s.Res.Id
func (s *GoldenGateConnectionAssignmentResourceCrud) DeletedPending() []string {
	return []string{
func (s *GoldenGateConnectionAssignmentResourceCrud) DeletedTarget() []string {
	return []string{}
func (s *GoldenGateConnectionAssignmentResourceCrud) Create() error {
	request := oci_golden_gate.CreateConnectionAssignmentRequest{}
func (s *GoldenGateConnectionAssignmentResourceCrud) Get() error {
	request := oci_golden_gate.GetConnectionAssignmentRequest{}
func (s *GoldenGateConnectionAssignmentResourceCrud) Delete() error {
	request := oci_golden_gate.DeleteConnectionAssignmentRequest{}
func (s *GoldenGateConnectionAssignmentResourceCrud) SetData() error {
	if s.Res.Id != nil {

=== ./internal/service/golden_gate/golden_gate_deployment_backup_data_source.go ===
func GoldenGateDeploymentBackupDataSource() *schema.Resource {
	fieldMap := make(map[string]*schema.Schema)
func readSingularGoldenGateDeploymentBackup(d *schema.ResourceData, m interface{}) error {
	sync := &GoldenGateDeploymentBackupDataSourceCrud{}
func (s *GoldenGateDeploymentBackupDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *GoldenGateDeploymentBackupDataSourceCrud) Get() error {
	request := oci_golden_gate.GetDeploymentBackupRequest{}
func (s *GoldenGateDeploymentBackupDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/golden_gate/golden_gate_database_registration_data_source.go ===
func GoldenGateDatabaseRegistrationDataSource() *schema.Resource {
	fieldMap := make(map[string]*schema.Schema)
func readSingularGoldenGateDatabaseRegistration(d *schema.ResourceData, m interface{}) error {
	sync := &GoldenGateDatabaseRegistrationDataSourceCrud{}
func (s *GoldenGateDatabaseRegistrationDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *GoldenGateDatabaseRegistrationDataSourceCrud) Get() error {
	request := oci_golden_gate.GetDatabaseRegistrationRequest{}
func (s *GoldenGateDatabaseRegistrationDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/golden_gate/golden_gate_trail_file_data_source.go ===
func GoldenGateTrailFileDataSource() *schema.Resource {
	return &schema.Resource{
func readSingularGoldenGateTrailFile(d *schema.ResourceData, m interface{}) error {
	sync := &GoldenGateTrailFileDataSourceCrud{}
func (s *GoldenGateTrailFileDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *GoldenGateTrailFileDataSourceCrud) Get() error {
	request := oci_golden_gate.ListTrailFilesRequest{}
func (s *GoldenGateTrailFileDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/golden_gate/register_resource.go ===
func RegisterResource() {
	tfresource.RegisterResource("oci_golden_gate_connection", GoldenGateConnectionResource())

=== ./internal/service/golden_gate/golden_gate_trail_sequence_data_source.go ===
func GoldenGateTrailSequenceDataSource() *schema.Resource {
	return &schema.Resource{
func readSingularGoldenGateTrailSequence(d *schema.ResourceData, m interface{}) error {
	sync := &GoldenGateTrailSequenceDataSourceCrud{}
func (s *GoldenGateTrailSequenceDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *GoldenGateTrailSequenceDataSourceCrud) Get() error {
	request := oci_golden_gate.ListTrailSequencesRequest{}
func (s *GoldenGateTrailSequenceDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/golden_gate/golden_gate_deployment_resource.go ===
func GoldenGateDeploymentResource() *schema.Resource {
	return &schema.Resource{
func createGoldenGateDeployment(d *schema.ResourceData, m interface{}) error {
	sync := &GoldenGateDeploymentResourceCrud{}
func readGoldenGateDeployment(d *schema.ResourceData, m interface{}) error {
	sync := &GoldenGateDeploymentResourceCrud{}
func updateGoldenGateDeployment(d *schema.ResourceData, m interface{}) error {
	sync := &GoldenGateDeploymentResourceCrud{}
func upgradeGoldenGateDeploymentIfNeeded(d *schema.ResourceData, m interface{}) error {
	sync := &GoldenGateDeploymentResourceCrud{}
func deleteGoldenGateDeployment(d *schema.ResourceData, m interface{}) error {
	sync := &GoldenGateDeploymentResourceCrud{}
func (s *GoldenGateDeploymentResourceCrud) ID() string {
	return *s.Res.Id
func (s *GoldenGateDeploymentResourceCrud) CreatedPending() []string {
	return []string{
func (s *GoldenGateDeploymentResourceCrud) CreatedTarget() []string {
	return []string{
func (s *GoldenGateDeploymentResourceCrud) DeletedPending() []string {
	return []string{
func (s *GoldenGateDeploymentResourceCrud) DeletedTarget() []string {
	return []string{
func (s *GoldenGateDeploymentResourceCrud) Create() error {
	request := oci_golden_gate.CreateDeploymentRequest{}
func (s *GoldenGateDeploymentResourceCrud) getDeploymentFromWorkRequest(workId *string, retryPolicy *oci_common.RetryPolicy,
	actionTypeEnum oci_golden_gate.ActionTypeEnum, timeout time.Duration) error {
func (s *GoldenGateDeploymentResourceCrud) Get() error {
	request := oci_golden_gate.GetDeploymentRequest{}
func (s *GoldenGateDeploymentResourceCrud) Update() error {
	if compartment, ok := s.D.GetOkExists("compartment_id"); ok && s.D.HasChange("compartment_id") {
func (s *GoldenGateDeploymentResourceCrud) Delete() error {
	request := oci_golden_gate.DeleteDeploymentRequest{}
func (s *GoldenGateDeploymentResourceCrud) SetData() error {
	s.D.Set("category", s.Res.Category)
func (s *GoldenGateDeploymentResourceCrud) mapToAddResourceLockDetails(fieldKeyFormat string) (oci_golden_gate.AddResourceLockDetails, error) {
	result := oci_golden_gate.AddResourceLockDetails{}
func ResourceLockToMap(obj oci_golden_gate.ResourceLock) map[string]interface{} {
	result := map[string]interface{}{}
func (s *GoldenGateDeploymentResourceCrud) mapToCreateMaintenanceConfigurationDetails(fieldKeyFormat string) (oci_golden_gate.CreateMaintenanceConfigurationDetails, error) {
	result := oci_golden_gate.CreateMaintenanceConfigurationDetails{}
func (s *GoldenGateDeploymentResourceCrud) mapToUpdateMaintenanceConfigurationDetails(fieldKeyFormat string) (oci_golden_gate.UpdateMaintenanceConfigurationDetails, error) {
	result := oci_golden_gate.UpdateMaintenanceConfigurationDetails{}
func (s *GoldenGateDeploymentResourceCrud) mapToCreateMaintenanceWindowDetails(fieldKeyFormat string) (oci_golden_gate.CreateMaintenanceWindowDetails, error) {
	result := oci_golden_gate.CreateMaintenanceWindowDetails{}
func (s *GoldenGateDeploymentResourceCrud) mapToUpdateMaintenanceWindowDetails(fieldKeyFormat string) (oci_golden_gate.UpdateMaintenanceWindowDetails, error) {
	result := oci_golden_gate.UpdateMaintenanceWindowDetails{}
func (s *GoldenGateDeploymentResourceCrud) mapToCreateOggDeploymentDetails(fieldKeyFormat string) (oci_golden_gate.CreateOggDeploymentDetails, error) {
	result := oci_golden_gate.CreateOggDeploymentDetails{}
func (s *GoldenGateDeploymentResourceCrud) mapToUpdateOggDeploymentDetails(fieldKeyFormat string) (oci_golden_gate.UpdateOggDeploymentDetails, error) {
	result := oci_golden_gate.UpdateOggDeploymentDetails{}
func OggDeploymentToMap(obj *oci_golden_gate.OggDeployment, resourceData *schema.ResourceData) map[string]interface{} { // custom code, do not change
	result := map[string]interface{}{}
func (s *GoldenGateDeploymentResourceCrud) mapToGroupToRolesMappingDetails(fieldKeyFormat string) (oci_golden_gate.GroupToRolesMappingDetails, error) {
	result := oci_golden_gate.GroupToRolesMappingDetails{}
func (s *GoldenGateDeploymentResourceCrud) mapToUpdateGroupToRolesMappingDetails(fieldKeyFormat string) (oci_golden_gate.UpdateGroupToRolesMappingDetails, error) {
	result := oci_golden_gate.UpdateGroupToRolesMappingDetails{}
func (s *GoldenGateDeploymentResourceCrud) updateCompartment(compartment interface{}) error {
	changeCompartmentRequest := oci_golden_gate.ChangeDeploymentCompartmentRequest{}
func (s *GoldenGateDeploymentResourceCrud) upgradeToSpecificVersion(oggVersion interface{}) error {
	upgradeDeploymentRequest := oci_golden_gate.UpgradeDeploymentRequest{}
func (s *GoldenGateDeploymentResourceCrud) startDeployment() error {
	startDeploymentRequest := oci_golden_gate.StartDeploymentRequest{}
func (s *GoldenGateDeploymentResourceCrud) stopDeployment() error {
	stopDeploymentRequest := oci_golden_gate.StopDeploymentRequest{}
func (s *GoldenGateDeploymentResourceCrud) getAndSaveStateChanges() error {
	if e := s.Get(); e != nil {

=== ./internal/service/em_warehouse/register_resource.go ===
func RegisterResource() {


=== ./internal/service/database_migration/database_migration_job_output_data_source.go ===
func DatabaseMigrationJobOutputDataSource() *schema.Resource {
	return &schema.Resource{
func readSingularDatabaseMigrationJobOutput(d *schema.ResourceData, m interface{}) error {
	sync := &DatabaseMigrationJobOutputDataSourceCrud{}
func (s *DatabaseMigrationJobOutputDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *DatabaseMigrationJobOutputDataSourceCrud) Get() error {
	request := oci_database_migration.ListJobOutputsRequest{}
func (s *DatabaseMigrationJobOutputDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/database_migration/database_migration_jobs_data_source.go ===
func DatabaseMigrationJobsDataSource() *schema.Resource {
	return &schema.Resource{
func readDatabaseMigrationJobs(d *schema.ResourceData, m interface{}) error {
	sync := &DatabaseMigrationJobsDataSourceCrud{}
func (s *DatabaseMigrationJobsDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *DatabaseMigrationJobsDataSourceCrud) Get() error {
	request := oci_database_migration.ListJobsRequest{}
func (s *DatabaseMigrationJobsDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/database_migration/database_migration_job_advisor_report_data_source.go ===
func DatabaseMigrationJobAdvisorReportDataSource() *schema.Resource {
	return &schema.Resource{
func readSingularDatabaseMigrationJobAdvisorReport(d *schema.ResourceData, m interface{}) error {
	sync := &DatabaseMigrationJobAdvisorReportDataSourceCrud{}
func (s *DatabaseMigrationJobAdvisorReportDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *DatabaseMigrationJobAdvisorReportDataSourceCrud) Get() error {
	request := oci_database_migration.GetAdvisorReportRequest{}
func (s *DatabaseMigrationJobAdvisorReportDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/database_migration/database_migration_migration_object_types_data_source.go ===
func DatabaseMigrationMigrationObjectTypesDataSource() *schema.Resource {
	return &schema.Resource{
func readDatabaseMigrationMigrationObjectTypes(d *schema.ResourceData, m interface{}) error {
	sync := &DatabaseMigrationMigrationObjectTypesDataSourceCrud{}
func (s *DatabaseMigrationMigrationObjectTypesDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *DatabaseMigrationMigrationObjectTypesDataSourceCrud) Get() error {
	request := oci_database_migration.ListMigrationObjectTypesRequest{}
func (s *DatabaseMigrationMigrationObjectTypesDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/database_migration/database_migration_connections_data_source.go ===
func DatabaseMigrationConnectionsDataSource() *schema.Resource {
	return &schema.Resource{
func readDatabaseMigrationConnections(d *schema.ResourceData, m interface{}) error {
	sync := &DatabaseMigrationConnectionsDataSourceCrud{}
func (s *DatabaseMigrationConnectionsDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *DatabaseMigrationConnectionsDataSourceCrud) Get() error {
	request := oci_database_migration.ListConnectionsRequest{}
func (s *DatabaseMigrationConnectionsDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/database_migration/database_migration_migration_resource.go ===
func DatabaseMigrationMigrationResource() *schema.Resource {
	return &schema.Resource{
func createDatabaseMigrationMigration(d *schema.ResourceData, m interface{}) error {
	sync := &DatabaseMigrationMigrationResourceCrud{}
func readDatabaseMigrationMigration(d *schema.ResourceData, m interface{}) error {
	sync := &DatabaseMigrationMigrationResourceCrud{}
func updateDatabaseMigrationMigration(d *schema.ResourceData, m interface{}) error {
	sync := &DatabaseMigrationMigrationResourceCrud{}
func deleteDatabaseMigrationMigration(d *schema.ResourceData, m interface{}) error {
	sync := &DatabaseMigrationMigrationResourceCrud{}
func (s *DatabaseMigrationMigrationResourceCrud) ID() string {
	migration := *s.Res
func (s *DatabaseMigrationMigrationResourceCrud) CreatedPending() []string {
	return []string{
func (s *DatabaseMigrationMigrationResourceCrud) CreatedTarget() []string {
	return []string{
func (s *DatabaseMigrationMigrationResourceCrud) DeletedPending() []string {
	return []string{
func (s *DatabaseMigrationMigrationResourceCrud) DeletedTarget() []string {
	return []string{
func (s *DatabaseMigrationMigrationResourceCrud) Create() error {
	request := oci_database_migration.CreateMigrationRequest{}
func (s *DatabaseMigrationMigrationResourceCrud) getMigrationFromWorkRequest(workId *string, retryPolicy *oci_common.RetryPolicy,
	actionTypeEnum oci_database_migration.WorkRequestResourceActionTypeEnum, timeout time.Duration) error {
func migrationWaitForWorkRequest(wId *string, entityType string, action oci_database_migration.WorkRequestResourceActionTypeEnum,
	timeout time.Duration, disableFoundRetries bool, client *oci_database_migration.DatabaseMigrationClient) (*string, error) {
func getErrorFromDatabaseMigrationMigrationWorkRequest(client *oci_database_migration.DatabaseMigrationClient, workId *string, retryPolicy *oci_common.RetryPolicy, entityType string, action oci_database_migration.WorkRequestResourceActionTypeEnum) error {
	response, err := client.ListWorkRequestErrors(context.Background(),
func (s *DatabaseMigrationMigrationResourceCrud) Get() error {
	request := oci_database_migration.GetMigrationRequest{}
func (s *DatabaseMigrationMigrationResourceCrud) Update() error {
	if compartment, ok := s.D.GetOkExists("compartment_id"); ok && s.D.HasChange("compartment_id") {
func (s *DatabaseMigrationMigrationResourceCrud) Delete() error {
	request := oci_database_migration.DeleteMigrationRequest{}
func (s *DatabaseMigrationMigrationResourceCrud) SetData() error {
	switch v := (*s.Res).(type) {
func (s *DatabaseMigrationMigrationResourceCrud) mapToAdminCredentials(fieldKeyFormat string) (oci_database_migration.AdminCredentials, error) {
	result := oci_database_migration.AdminCredentials{}
func (s *DatabaseMigrationMigrationResourceCrud) mapToCreateAdminCredentials(fieldKeyFormat string) (oci_database_migration.CreateAdminCredentials, error) {
	result := oci_database_migration.CreateAdminCredentials{}
func (s *DatabaseMigrationMigrationResourceCrud) mapToCreateDataPumpParameters(fieldKeyFormat string) (oci_database_migration.CreateDataPumpParameters, error) {
	result := oci_database_migration.CreateDataPumpParameters{}
func (s *DatabaseMigrationMigrationResourceCrud) mapToCreateDirectoryObject(fieldKeyFormat string) (oci_database_migration.CreateDirectoryObject, error) {
	result := oci_database_migration.CreateDirectoryObject{}
func (s *DatabaseMigrationMigrationResourceCrud) mapToCreateExtract(fieldKeyFormat string) (oci_database_migration.CreateExtract, error) {
	result := oci_database_migration.CreateExtract{}
func (s *DatabaseMigrationMigrationResourceCrud) mapToCreateGoldenGateHubDetails(fieldKeyFormat string) (oci_database_migration.CreateGoldenGateHubDetails, error) {
	result := oci_database_migration.CreateGoldenGateHubDetails{}
func (s *DatabaseMigrationMigrationResourceCrud) mapToCreateMySqlAdvisorSettings(fieldKeyFormat string) (oci_database_migration.CreateMySqlAdvisorSettings, error) {
	result := oci_database_migration.CreateMySqlAdvisorSettings{}
func (s *DatabaseMigrationMigrationResourceCrud) mapToCreateMySqlDataTransferMediumDetails(fieldKeyFormat string) (oci_database_migration.CreateMySqlDataTransferMediumDetails, error) {
	var baseObject oci_database_migration.CreateMySqlDataTransferMediumDetails
func (s *DatabaseMigrationMigrationResourceCrud) mapToCreateMySqlGgsDeploymentDetails(fieldKeyFormat string) (oci_database_migration.CreateMySqlGgsDeploymentDetails, error) {
	result := oci_database_migration.CreateMySqlGgsDeploymentDetails{}
func (s *DatabaseMigrationMigrationResourceCrud) mapToCreateMySqlInitialLoadSettings(fieldKeyFormat string) (oci_database_migration.CreateMySqlInitialLoadSettings, error) {
	result := oci_database_migration.CreateMySqlInitialLoadSettings{}
func (s *DatabaseMigrationMigrationResourceCrud) mapToCreateObjectStoreBucket(fieldKeyFormat string) (oci_database_migration.CreateObjectStoreBucket, error) {
	result := oci_database_migration.CreateObjectStoreBucket{}
func (s *DatabaseMigrationMigrationResourceCrud) mapToCreateOracleAdvisorSettings(fieldKeyFormat string) (oci_database_migration.CreateOracleAdvisorSettings, error) {
	result := oci_database_migration.CreateOracleAdvisorSettings{}
func (s *DatabaseMigrationMigrationResourceCrud) mapToCreateOracleDataTransferMediumDetails(fieldKeyFormat string) (oci_database_migration.CreateOracleDataTransferMediumDetails, error) {
	var baseObject oci_database_migration.CreateOracleDataTransferMediumDetails
func (s *DatabaseMigrationMigrationResourceCrud) mapToCreateOracleGgsDeploymentDetails(fieldKeyFormat string) (oci_database_migration.CreateOracleGgsDeploymentDetails, error) {
	result := oci_database_migration.CreateOracleGgsDeploymentDetails{}
func (s *DatabaseMigrationMigrationResourceCrud) mapToCreateOracleInitialLoadSettings(fieldKeyFormat string) (oci_database_migration.CreateOracleInitialLoadSettings, error) {
	result := oci_database_migration.CreateOracleInitialLoadSettings{}
func (s *DatabaseMigrationMigrationResourceCrud) mapToCreateReplicat(fieldKeyFormat string) (oci_database_migration.CreateReplicat, error) {
	result := oci_database_migration.CreateReplicat{}
func (s *DatabaseMigrationMigrationResourceCrud) mapToCreateTargetTypeTablespaceDetails(fieldKeyFormat string) (oci_database_migration.CreateTargetTypeTablespaceDetails, error) {
	var baseObject oci_database_migration.CreateTargetTypeTablespaceDetails
func (s *DatabaseMigrationMigrationResourceCrud) mapToDataPumpParameters(fieldKeyFormat string) (oci_database_migration.DataPumpParameters, error) {
	result := oci_database_migration.DataPumpParameters{}
func (s *DatabaseMigrationMigrationResourceCrud) mapToDirectoryObject(fieldKeyFormat string) (oci_database_migration.DirectoryObject, error) {
	result := oci_database_migration.DirectoryObject{}
func (s *DatabaseMigrationMigrationResourceCrud) mapToExtract(fieldKeyFormat string) (oci_database_migration.Extract, error) {
	result := oci_database_migration.Extract{}
func (s *DatabaseMigrationMigrationResourceCrud) mapToGgsDeployment(fieldKeyFormat string) (oci_database_migration.GgsDeployment, error) {
	result := oci_database_migration.GgsDeployment{}
func (s *DatabaseMigrationMigrationResourceCrud) mapToGoldenGateHubDetails(fieldKeyFormat string) (oci_database_migration.GoldenGateHubDetails, error) {
	result := oci_database_migration.GoldenGateHubDetails{}
func (s *DatabaseMigrationMigrationResourceCrud) mapToHostDumpTransferDetails(fieldKeyFormat string) (oci_database_migration.HostDumpTransferDetails, error) {
	var baseObject oci_database_migration.HostDumpTransferDetails
func (s *DatabaseMigrationMigrationResourceCrud) mapToMetadataRemap(fieldKeyFormat string) (oci_database_migration.MetadataRemap, error) {
	result := oci_database_migration.MetadataRemap{}
func (s *DatabaseMigrationMigrationResourceCrud) mapToMigrationParameterDetails(fieldKeyFormat string) (oci_database_migration.MigrationParameterDetails, error) {
	result := oci_database_migration.MigrationParameterDetails{}
func (s *DatabaseMigrationMigrationResourceCrud) mapToMySqlAdvisorSettings(fieldKeyFormat string) (oci_database_migration.MySqlAdvisorSettings, error) {
	result := oci_database_migration.MySqlAdvisorSettings{}
func (s *DatabaseMigrationMigrationResourceCrud) mapToMySqlDataTransferMediumDetails(fieldKeyFormat string) (oci_database_migration.MySqlDataTransferMediumDetails, error) {
	var baseObject oci_database_migration.MySqlDataTransferMediumDetails
func (s *DatabaseMigrationMigrationResourceCrud) mapToMySqlDatabaseObject(fieldKeyFormat string) (oci_database_migration.MySqlDatabaseObject, error) {
	result := oci_database_migration.MySqlDatabaseObject{}
func (s *DatabaseMigrationMigrationResourceCrud) mapToMySqlGgsDeploymentDetails(fieldKeyFormat string) (oci_database_migration.MySqlGgsDeploymentDetails, error) {
	result := oci_database_migration.MySqlGgsDeploymentDetails{}
func (s *DatabaseMigrationMigrationResourceCrud) mapToMySqlInitialLoadSettings(fieldKeyFormat string) (oci_database_migration.MySqlInitialLoadSettings, error) {
	result := oci_database_migration.MySqlInitialLoadSettings{}
func (s *DatabaseMigrationMigrationResourceCrud) mapToObjectStoreBucket(fieldKeyFormat string) (oci_database_migration.ObjectStoreBucket, error) {
	result := oci_database_migration.ObjectStoreBucket{}
func (s *DatabaseMigrationMigrationResourceCrud) mapToOracleAdvisorSettings(fieldKeyFormat string) (oci_database_migration.OracleAdvisorSettings, error) {
	result := oci_database_migration.OracleAdvisorSettings{}
func (s *DatabaseMigrationMigrationResourceCrud) mapToOracleDataTransferMediumDetails(fieldKeyFormat string) (oci_database_migration.OracleDataTransferMediumDetails, error) {
	var baseObject oci_database_migration.OracleDataTransferMediumDetails
func (s *DatabaseMigrationMigrationResourceCrud) mapToOracleDatabaseObject(fieldKeyFormat string) (oci_database_migration.OracleDatabaseObject, error) {
	result := oci_database_migration.OracleDatabaseObject{}
func (s *DatabaseMigrationMigrationResourceCrud) mapToOracleGgsDeploymentDetails(fieldKeyFormat string) (oci_database_migration.OracleGgsDeploymentDetails, error) {
	result := oci_database_migration.OracleGgsDeploymentDetails{}
func (s *DatabaseMigrationMigrationResourceCrud) mapToOracleInitialLoadSettings(fieldKeyFormat string) (oci_database_migration.OracleInitialLoadSettings, error) {
	result := oci_database_migration.OracleInitialLoadSettings{}
func (s *DatabaseMigrationMigrationResourceCrud) mapToReplicat(fieldKeyFormat string) (oci_database_migration.Replicat, error) {
	result := oci_database_migration.Replicat{}
func (s *DatabaseMigrationMigrationResourceCrud) mapToTargetTypeTablespaceDetails(fieldKeyFormat string) (oci_database_migration.TargetTypeTablespaceDetails, error) {
	var baseObject oci_database_migration.TargetTypeTablespaceDetails
func (s *DatabaseMigrationMigrationResourceCrud) mapToUpdateAdminCredentials(fieldKeyFormat string) (oci_database_migration.UpdateAdminCredentials, error) {
	result := oci_database_migration.UpdateAdminCredentials{}
func (s *DatabaseMigrationMigrationResourceCrud) mapToUpdateDataPumpParameters(fieldKeyFormat string) (oci_database_migration.UpdateDataPumpParameters, error) {
	result := oci_database_migration.UpdateDataPumpParameters{}
func (s *DatabaseMigrationMigrationResourceCrud) mapToUpdateDirectoryObject(fieldKeyFormat string) (oci_database_migration.UpdateDirectoryObject, error) {
	result := oci_database_migration.UpdateDirectoryObject{}
func (s *DatabaseMigrationMigrationResourceCrud) mapToUpdateExtract(fieldKeyFormat string) (oci_database_migration.UpdateExtract, error) {
	result := oci_database_migration.UpdateExtract{}
func (s *DatabaseMigrationMigrationResourceCrud) mapToUpdateGoldenGateHubDetails(fieldKeyFormat string) (oci_database_migration.UpdateGoldenGateHubDetails, error) {
	result := oci_database_migration.UpdateGoldenGateHubDetails{}
func (s *DatabaseMigrationMigrationResourceCrud) mapToUpdateMySqlAdvisorSettings(fieldKeyFormat string) (oci_database_migration.UpdateMySqlAdvisorSettings, error) {
	result := oci_database_migration.UpdateMySqlAdvisorSettings{}
func (s *DatabaseMigrationMigrationResourceCrud) mapToUpdateMySqlDataTransferMediumDetails(fieldKeyFormat string) (oci_database_migration.UpdateMySqlDataTransferMediumDetails, error) {
	var baseObject oci_database_migration.UpdateMySqlDataTransferMediumDetails
func (s *DatabaseMigrationMigrationResourceCrud) mapToUpdateMySqlGgsDeploymentDetails(fieldKeyFormat string) (oci_database_migration.UpdateMySqlGgsDeploymentDetails, error) {
	result := oci_database_migration.UpdateMySqlGgsDeploymentDetails{}
func (s *DatabaseMigrationMigrationResourceCrud) mapToUpdateMySqlInitialLoadSettings(fieldKeyFormat string) (oci_database_migration.UpdateMySqlInitialLoadSettings, error) {
	result := oci_database_migration.UpdateMySqlInitialLoadSettings{}
func (s *DatabaseMigrationMigrationResourceCrud) mapToUpdateObjectStoreBucket(fieldKeyFormat string) (oci_database_migration.UpdateObjectStoreBucket, error) {
	result := oci_database_migration.UpdateObjectStoreBucket{}
func (s *DatabaseMigrationMigrationResourceCrud) mapToUpdateOracleAdvisorSettings(fieldKeyFormat string) (oci_database_migration.UpdateOracleAdvisorSettings, error) {
	result := oci_database_migration.UpdateOracleAdvisorSettings{}
func (s *DatabaseMigrationMigrationResourceCrud) mapToUpdateOracleDataTransferMediumDetails(fieldKeyFormat string) (oci_database_migration.UpdateOracleDataTransferMediumDetails, error) {
	var baseObject oci_database_migration.UpdateOracleDataTransferMediumDetails
func (s *DatabaseMigrationMigrationResourceCrud) mapToUpdateOracleGgsDeploymentDetails(fieldKeyFormat string) (oci_database_migration.UpdateOracleGgsDeploymentDetails, error) {
	result := oci_database_migration.UpdateOracleGgsDeploymentDetails{}
func (s *DatabaseMigrationMigrationResourceCrud) mapToUpdateOracleInitialLoadSettings(fieldKeyFormat string) (oci_database_migration.UpdateOracleInitialLoadSettings, error) {
	result := oci_database_migration.UpdateOracleInitialLoadSettings{}
func (s *DatabaseMigrationMigrationResourceCrud) mapToUpdateReplicat(fieldKeyFormat string) (oci_database_migration.UpdateReplicat, error) {
	result := oci_database_migration.UpdateReplicat{}
func (s *DatabaseMigrationMigrationResourceCrud) mapToUpdateTargetTypeTablespaceDetails(fieldKeyFormat string) (oci_database_migration.UpdateTargetTypeTablespaceDetails, error) {
	var baseObject oci_database_migration.UpdateTargetTypeTablespaceDetails
func (s *DatabaseMigrationMigrationResourceCrud) populateTopLevelPolymorphicCreateMigrationRequest(request *oci_database_migration.CreateMigrationRequest) error {
	//discriminator
func (s *DatabaseMigrationMigrationResourceCrud) populateTopLevelPolymorphicUpdateMigrationRequest(request *oci_database_migration.UpdateMigrationRequest) error {
	//discriminator
func (s *DatabaseMigrationMigrationResourceCrud) updateCompartment(compartment interface{}) error {
	changeCompartmentRequest := oci_database_migration.ChangeMigrationCompartmentRequest{}

=== ./internal/service/database_migration/database_migration_migration_data_source.go ===
func DatabaseMigrationMigrationDataSource() *schema.Resource {
	fieldMap := make(map[string]*schema.Schema)
func readSingularDatabaseMigrationMigration(d *schema.ResourceData, m interface{}) error {
	sync := &DatabaseMigrationMigrationDataSourceCrud{}
func (s *DatabaseMigrationMigrationDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *DatabaseMigrationMigrationDataSourceCrud) Get() error {
	request := oci_database_migration.GetMigrationRequest{}
func (s *DatabaseMigrationMigrationDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/database_migration/database_migration_job_resource.go ===
func DatabaseMigrationJobResource() *schema.Resource {
	return &schema.Resource{
func createDatabaseMigrationJob(d *schema.ResourceData, m interface{}) error {
	sync := &DatabaseMigrationJobResourceCrud{}
func readDatabaseMigrationJob(d *schema.ResourceData, m interface{}) error {
	sync := &DatabaseMigrationJobResourceCrud{}
func updateDatabaseMigrationJob(d *schema.ResourceData, m interface{}) error {
	sync := &DatabaseMigrationJobResourceCrud{}
func deleteDatabaseMigrationJob(d *schema.ResourceData, m interface{}) error {
	sync := &DatabaseMigrationJobResourceCrud{}
func (s *DatabaseMigrationJobResourceCrud) ID() string {
	return *s.Res.Id
func (s *DatabaseMigrationJobResourceCrud) CreatedPending() []string {
	return []string{
func (s *DatabaseMigrationJobResourceCrud) CreatedTarget() []string {
	return []string{
func (s *DatabaseMigrationJobResourceCrud) DeletedPending() []string {
	return []string{}
func (s *DatabaseMigrationJobResourceCrud) DeletedTarget() []string {
	return []string{
func (s *DatabaseMigrationJobResourceCrud) Create() error {
	request := oci_database_migration.UpdateJobRequest{}
func (s *DatabaseMigrationJobResourceCrud) Get() error {
	request := oci_database_migration.GetJobRequest{}
func (s *DatabaseMigrationJobResourceCrud) Update() error {
	request := oci_database_migration.UpdateJobRequest{}
func (s *DatabaseMigrationJobResourceCrud) Delete() error {
	request := oci_database_migration.DeleteJobRequest{}
func (s *DatabaseMigrationJobResourceCrud) SetData() error {
	if s.Res.DefinedTags != nil {
func (s *DatabaseMigrationJobResourceCrud) SuspendJob() error {
	request := oci_database_migration.SuspendJobRequest{}
func MigrationJobProgressResourceToMap(obj *oci_database_migration.MigrationJobProgressResource) map[string]interface{} {
	result := map[string]interface{}{}

=== ./internal/service/database_migration/database_migration_job_data_source.go ===
func DatabaseMigrationJobDataSource() *schema.Resource {
	fieldMap := make(map[string]*schema.Schema)
func readSingularDatabaseMigrationJob(d *schema.ResourceData, m interface{}) error {
	sync := &DatabaseMigrationJobDataSourceCrud{}
func (s *DatabaseMigrationJobDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *DatabaseMigrationJobDataSourceCrud) Get() error {
	request := oci_database_migration.GetJobRequest{}
func (s *DatabaseMigrationJobDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/database_migration/database_migration_connection_data_source.go ===
func DatabaseMigrationConnectionDataSource() *schema.Resource {
	fieldMap := make(map[string]*schema.Schema)
func readSingularDatabaseMigrationConnection(d *schema.ResourceData, m interface{}) error {
	sync := &DatabaseMigrationConnectionDataSourceCrud{}
func (s *DatabaseMigrationConnectionDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *DatabaseMigrationConnectionDataSourceCrud) Get() error {
	request := oci_database_migration.GetConnectionRequest{}
func (s *DatabaseMigrationConnectionDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/database_migration/database_migration_connection_resource.go ===
func DatabaseMigrationConnectionResource() *schema.Resource {
	return &schema.Resource{
func createDatabaseMigrationConnection(d *schema.ResourceData, m interface{}) error {
	sync := &DatabaseMigrationConnectionResourceCrud{}
func readDatabaseMigrationConnection(d *schema.ResourceData, m interface{}) error {
	sync := &DatabaseMigrationConnectionResourceCrud{}
func updateDatabaseMigrationConnection(d *schema.ResourceData, m interface{}) error {
	sync := &DatabaseMigrationConnectionResourceCrud{}
func deleteDatabaseMigrationConnection(d *schema.ResourceData, m interface{}) error {
	sync := &DatabaseMigrationConnectionResourceCrud{}
func (s *DatabaseMigrationConnectionResourceCrud) ID() string {
	connection := *s.Res
func (s *DatabaseMigrationConnectionResourceCrud) CreatedPending() []string {
	return []string{
func (s *DatabaseMigrationConnectionResourceCrud) CreatedTarget() []string {
	return []string{
func (s *DatabaseMigrationConnectionResourceCrud) DeletedPending() []string {
	return []string{
func (s *DatabaseMigrationConnectionResourceCrud) DeletedTarget() []string {
	return []string{
func (s *DatabaseMigrationConnectionResourceCrud) Create() error {
	request := oci_database_migration.CreateConnectionRequest{}
func (s *DatabaseMigrationConnectionResourceCrud) getConnectionFromWorkRequest(workId *string, retryPolicy *oci_common.RetryPolicy,
	actionTypeEnum oci_database_migration.WorkRequestResourceActionTypeEnum, timeout time.Duration) error {
func connectionWaitForWorkRequest(wId *string, entityType string, action oci_database_migration.WorkRequestResourceActionTypeEnum,
	timeout time.Duration, disableFoundRetries bool, client *oci_database_migration.DatabaseMigrationClient) (*string, error) {
func getErrorFromDatabaseMigrationConnectionWorkRequest(client *oci_database_migration.DatabaseMigrationClient, workId *string, retryPolicy *oci_common.RetryPolicy, entityType string, action oci_database_migration.WorkRequestResourceActionTypeEnum) error {
	response, err := client.ListWorkRequestErrors(context.Background(),
func (s *DatabaseMigrationConnectionResourceCrud) Get() error {
	request := oci_database_migration.GetConnectionRequest{}
func (s *DatabaseMigrationConnectionResourceCrud) Update() error {
	if compartment, ok := s.D.GetOkExists("compartment_id"); ok && s.D.HasChange("compartment_id") {
func (s *DatabaseMigrationConnectionResourceCrud) Delete() error {
	request := oci_database_migration.DeleteConnectionRequest{}
func (s *DatabaseMigrationConnectionResourceCrud) SetData() error {
	switch v := (*s.Res).(type) {
func (s *DatabaseMigrationConnectionResourceCrud) mapToNameValuePair(fieldKeyFormat string) (oci_database_migration.NameValuePair, error) {
	result := oci_database_migration.NameValuePair{}
func (s *DatabaseMigrationConnectionResourceCrud) populateTopLevelPolymorphicCreateConnectionRequest(request *oci_database_migration.CreateConnectionRequest) error {
	//discriminator
func (s *DatabaseMigrationConnectionResourceCrud) populateTopLevelPolymorphicUpdateConnectionRequest(request *oci_database_migration.UpdateConnectionRequest) error {
	//discriminator
func (s *DatabaseMigrationConnectionResourceCrud) updateCompartment(compartment interface{}) error {
	changeCompartmentRequest := oci_database_migration.ChangeConnectionCompartmentRequest{}

=== ./internal/service/database_migration/register_resource.go ===
func RegisterResource() {


=== ./internal/service/osub_usage/osub_usage_computed_usage_data_source.go ===
func OsubUsageComputedUsageDataSource() *schema.Resource {
	return &schema.Resource{
func readSingularOsubUsageComputedUsage(d *schema.ResourceData, m interface{}) error {
	sync := &OsubUsageComputedUsageDataSourceCrud{}
func (s *OsubUsageComputedUsageDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *OsubUsageComputedUsageDataSourceCrud) Get() error {
	request := oci_osub_usage.GetComputedUsageRequest{}
func (s *OsubUsageComputedUsageDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/osub_usage/osub_usage_computed_usages_data_source.go ===
func OsubUsageComputedUsagesDataSource() *schema.Resource {
	return &schema.Resource{
func readOsubUsageComputedUsages(d *schema.ResourceData, m interface{}) error {
	sync := &OsubUsageComputedUsagesDataSourceCrud{}
func (s *OsubUsageComputedUsagesDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *OsubUsageComputedUsagesDataSourceCrud) Get() error {
	request := oci_osub_usage.ListComputedUsagesRequest{}
func (s *OsubUsageComputedUsagesDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/osub_usage/osub_usage_computed_usage_aggregateds_data_source.go ===
func OsubUsageComputedUsageAggregatedsDataSource() *schema.Resource {
	return &schema.Resource{
func readOsubUsageComputedUsageAggregateds(d *schema.ResourceData, m interface{}) error {
	sync := &OsubUsageComputedUsageAggregatedsDataSourceCrud{}
func (s *OsubUsageComputedUsageAggregatedsDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *OsubUsageComputedUsageAggregatedsDataSourceCrud) Get() error {
	request := oci_osub_usage.ListComputedUsageAggregatedsRequest{}
func (s *OsubUsageComputedUsageAggregatedsDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/osub_usage/register_resource.go ===
func RegisterResource() {
}

=== ./internal/service/appmgmt_control/appmgmt_control_monitored_instances_data_source.go ===
func AppmgmtControlMonitoredInstancesDataSource() *schema.Resource {
	return &schema.Resource{
func readAppmgmtControlMonitoredInstances(d *schema.ResourceData, m interface{}) error {
	sync := &AppmgmtControlMonitoredInstancesDataSourceCrud{}
func (s *AppmgmtControlMonitoredInstancesDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *AppmgmtControlMonitoredInstancesDataSourceCrud) Get() error {
	request := oci_appmgmt_control.ListMonitoredInstancesRequest{}
func (s *AppmgmtControlMonitoredInstancesDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/appmgmt_control/appmgmt_control_monitored_instance_data_source.go ===
func AppmgmtControlMonitoredInstanceDataSource() *schema.Resource {
	return &schema.Resource{
func readSingularAppmgmtControlMonitoredInstance(d *schema.ResourceData, m interface{}) error {
	sync := &AppmgmtControlMonitoredInstanceDataSourceCrud{}
func (s *AppmgmtControlMonitoredInstanceDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *AppmgmtControlMonitoredInstanceDataSourceCrud) Get() error {
	request := oci_appmgmt_control.GetMonitoredInstanceRequest{}
func (s *AppmgmtControlMonitoredInstanceDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/appmgmt_control/appmgmt_control_monitor_plugin_management_resource.go ===
func AppmgmtControlMonitorPluginManagementResource() *schema.Resource {
	return &schema.Resource{
func createAppmgmtControlMonitorPluginManagement(d *schema.ResourceData, m interface{}) error {
	sync := &AppmgmtControlMonitorPluginManagementResourceCrud{}
func readAppmgmtControlMonitorPluginManagement(d *schema.ResourceData, m interface{}) error {
	sync := &AppmgmtControlMonitorPluginManagementResourceCrud{}
func deleteAppmgmtControlMonitorPluginManagement(d *schema.ResourceData, m interface{}) error {
	//N/A - once deactivate endpoint will be implemented/public, use it here
func (s *AppmgmtControlMonitorPluginManagementResourceCrud) ID() string {
	return *s.Res.InstanceId
func (s *AppmgmtControlMonitorPluginManagementResourceCrud) Create() error {
	request := oci_appmgmt_control.ActivateMonitoringPluginRequest{}
func (s *AppmgmtControlMonitorPluginManagementResourceCrud) getMonitorPluginManagementFromWorkRequest(workId *string, retryPolicy *oci_common.RetryPolicy,
	actionTypeEnum oci_appmgmt_control.ActionTypeEnum, timeout time.Duration) error {
func (s *AppmgmtControlMonitorPluginManagementResourceCrud) Get() error {
	request := oci_appmgmt_control.GetMonitoredInstanceRequest{}
func (s *AppmgmtControlMonitorPluginManagementResourceCrud) SetData() error {
	if s.Res.InstanceId != nil {

=== ./internal/service/appmgmt_control/register_resource.go ===
func RegisterResource() {
	tfresource.RegisterResource("oci_appmgmt_control_monitor_plugin_management", AppmgmtControlMonitorPluginManagementResource())

=== ./internal/service/mysql/mysql_mysql_backup_data_source.go ===
func MysqlMysqlBackupDataSource() *schema.Resource {
	fieldMap := make(map[string]*schema.Schema)
func readSingularMysqlMysqlBackup(d *schema.ResourceData, m interface{}) error {
	sync := &MysqlMysqlBackupDataSourceCrud{}
func (s *MysqlMysqlBackupDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *MysqlMysqlBackupDataSourceCrud) Get() error {
	request := oci_mysql.GetBackupRequest{}
func (s *MysqlMysqlBackupDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/mysql/mysql_mysql_configuration_data_source.go ===
func MysqlMysqlConfigurationDataSource() *schema.Resource {
	fieldMap := make(map[string]*schema.Schema)
func readSingularMysqlMysqlConfiguration(d *schema.ResourceData, m interface{}) error {
	sync := &MysqlMysqlConfigurationDataSourceCrud{}
func (s *MysqlMysqlConfigurationDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *MysqlMysqlConfigurationDataSourceCrud) Get() error {
	request := oci_mysql.GetConfigurationRequest{}
func (s *MysqlMysqlConfigurationDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/mysql/mysql_mysql_db_systems_data_source.go ===
func MysqlMysqlDbSystemsDataSource() *schema.Resource {
	return &schema.Resource{
func readMysqlMysqlDbSystems(d *schema.ResourceData, m interface{}) error {
	sync := &MysqlMysqlDbSystemsDataSourceCrud{}
func (s *MysqlMysqlDbSystemsDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *MysqlMysqlDbSystemsDataSourceCrud) Get() error {
	request := oci_mysql.ListDbSystemsRequest{}
func (s *MysqlMysqlDbSystemsDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/mysql/mysql_mysql_versions_data_source.go ===
func MysqlMysqlVersionsDataSource() *schema.Resource {
	return &schema.Resource{
func readMysqlMysqlVersions(d *schema.ResourceData, m interface{}) error {
	sync := &MysqlMysqlVersionsDataSourceCrud{}
func (s *MysqlMysqlVersionsDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *MysqlMysqlVersionsDataSourceCrud) Get() error {
	request := oci_mysql.ListVersionsRequest{}
func (s *MysqlMysqlVersionsDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/mysql/mysql_replica_resource.go ===
func MysqlReplicaResource() *schema.Resource {
	return &schema.Resource{
func createMysqlReplica(d *schema.ResourceData, m interface{}) error {
	sync := &MysqlReplicaResourceCrud{}
func readMysqlReplica(d *schema.ResourceData, m interface{}) error {
	sync := &MysqlReplicaResourceCrud{}
func updateMysqlReplica(d *schema.ResourceData, m interface{}) error {
	sync := &MysqlReplicaResourceCrud{}
func deleteMysqlReplica(d *schema.ResourceData, m interface{}) error {
	sync := &MysqlReplicaResourceCrud{}
func (s *MysqlReplicaResourceCrud) ID() string {
	return *s.Res.Id
func (s *MysqlReplicaResourceCrud) CreatedPending() []string {
	return []string{
func (s *MysqlReplicaResourceCrud) CreatedTarget() []string {
	return []string{
func (s *MysqlReplicaResourceCrud) DeletedPending() []string {
	return []string{
func (s *MysqlReplicaResourceCrud) DeletedTarget() []string {
	return []string{
func (s *MysqlReplicaResourceCrud) UpdatedPending() []string {
	return []string{
func (s *MysqlReplicaResourceCrud) UpdatedTarget() []string {
	return []string{
func (s *MysqlReplicaResourceCrud) Create() error {
	request := oci_mysql.CreateReplicaRequest{}
func (s *MysqlReplicaResourceCrud) Get() error {
	request := oci_mysql.GetReplicaRequest{}
func (s *MysqlReplicaResourceCrud) Update() error {
	request := oci_mysql.UpdateReplicaRequest{}
func (s *MysqlReplicaResourceCrud) Delete() error {
	request := oci_mysql.DeleteReplicaRequest{}
func (s *MysqlReplicaResourceCrud) SetData() error {
	if s.Res.AvailabilityDomain != nil {
func (s *MysqlReplicaResourceCrud) mapToReplicaOverrides(fieldKeyFormat string) (oci_mysql.ReplicaOverrides, error) {
	result := oci_mysql.ReplicaOverrides{}

=== ./internal/service/mysql/mysql_mysql_backups_data_source.go ===
func MysqlMysqlBackupsDataSource() *schema.Resource {
	return &schema.Resource{
func readMysqlMysqlBackups(d *schema.ResourceData, m interface{}) error {
	sync := &MysqlMysqlBackupsDataSourceCrud{}
func (s *MysqlMysqlBackupsDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *MysqlMysqlBackupsDataSourceCrud) Get() error {
	request := oci_mysql.ListBackupsRequest{}
func (s *MysqlMysqlBackupsDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/mysql/mysql_mysql_db_system_data_source.go ===
func MysqlMysqlDbSystemDataSource() *schema.Resource {
	fieldMap := make(map[string]*schema.Schema)
func readSingularMysqlMysqlDbSystem(d *schema.ResourceData, m interface{}) error {
	sync := &MysqlMysqlDbSystemDataSourceCrud{}
func (s *MysqlMysqlDbSystemDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *MysqlMysqlDbSystemDataSourceCrud) Get() error {
	request := oci_mysql.GetDbSystemRequest{}
func (s *MysqlMysqlDbSystemDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/mysql/mysql_mysql_configuration_resource.go ===
func MysqlMysqlConfigurationResource() *schema.Resource {
	return &schema.Resource{
func createMysqlMysqlConfiguration(d *schema.ResourceData, m interface{}) error {
	sync := &MysqlMysqlConfigurationResourceCrud{}
func readMysqlMysqlConfiguration(d *schema.ResourceData, m interface{}) error {
	sync := &MysqlMysqlConfigurationResourceCrud{}
func updateMysqlMysqlConfiguration(d *schema.ResourceData, m interface{}) error {
	sync := &MysqlMysqlConfigurationResourceCrud{}
func deleteMysqlMysqlConfiguration(d *schema.ResourceData, m interface{}) error {
	sync := &MysqlMysqlConfigurationResourceCrud{}
func (s *MysqlMysqlConfigurationResourceCrud) ID() string {
	return *s.Res.Id
func (s *MysqlMysqlConfigurationResourceCrud) CreatedPending() []string {
	return []string{}
func (s *MysqlMysqlConfigurationResourceCrud) CreatedTarget() []string {
	return []string{
func (s *MysqlMysqlConfigurationResourceCrud) DeletedPending() []string {
	return []string{}
func (s *MysqlMysqlConfigurationResourceCrud) DeletedTarget() []string {
	return []string{
func (s *MysqlMysqlConfigurationResourceCrud) UpdatedPending() []string {
	return []string{}
func (s *MysqlMysqlConfigurationResourceCrud) UpdatedTarget() []string {
	return []string{
func (s *MysqlMysqlConfigurationResourceCrud) Create() error {
	request := oci_mysql.CreateConfigurationRequest{}
func (s *MysqlMysqlConfigurationResourceCrud) Get() error {
	request := oci_mysql.GetConfigurationRequest{}
func (s *MysqlMysqlConfigurationResourceCrud) Update() error {
	request := oci_mysql.UpdateConfigurationRequest{}
func (s *MysqlMysqlConfigurationResourceCrud) Delete() error {
	request := oci_mysql.DeleteConfigurationRequest{}
func (s *MysqlMysqlConfigurationResourceCrud) SetData() error {

func (s *MysqlMysqlConfigurationResourceCrud) mapToConfigurationVariables(fieldKeyFormat string) (oci_mysql.ConfigurationVariables, error) {
	result := oci_mysql.ConfigurationVariables{}
func (s *MysqlMysqlConfigurationResourceCrud) mapToInitializationVariables(fieldKeyFormat string) (oci_mysql.InitializationVariables, error) {
	result := oci_mysql.InitializationVariables{}

=== ./internal/service/mysql/mysql_heat_wave_cluster_resource.go ===
func MysqlHeatWaveClusterResource() *schema.Resource {
	return &schema.Resource{
func createMysqlHeatWaveCluster(d *schema.ResourceData, m interface{}) error {
	sync := &MysqlHeatWaveClusterResourceCrud{}
func readMysqlHeatWaveCluster(d *schema.ResourceData, m interface{}) error {
	sync := &MysqlHeatWaveClusterResourceCrud{}
func updateMysqlHeatWaveCluster(d *schema.ResourceData, m interface{}) error {
	sync := &MysqlHeatWaveClusterResourceCrud{}
func deleteMysqlHeatWaveCluster(d *schema.ResourceData, m interface{}) error {
	sync := &MysqlHeatWaveClusterResourceCrud{}
func (s *MysqlHeatWaveClusterResourceCrud) ID() string {
	return getHeatWaveClusterCompositeId(s.D.Get("db_system_id").(string))
func (s *MysqlHeatWaveClusterResourceCrud) CreatedPending() []string {
	return []string{
func (s *MysqlHeatWaveClusterResourceCrud) CreatedTarget() []string {
	return []string{
func (s *MysqlHeatWaveClusterResourceCrud) DeletedPending() []string {
	return []string{
func (s *MysqlHeatWaveClusterResourceCrud) DeletedTarget() []string {
	return []string{
func (s *MysqlHeatWaveClusterResourceCrud) UpdatedPending() []string {
	return []string{
func (s *MysqlHeatWaveClusterResourceCrud) UpdatedTarget() []string {
	return []string{
func (s *MysqlHeatWaveClusterResourceCrud) Create() error {
	request := oci_mysql.AddHeatWaveClusterRequest{}
func (s *MysqlHeatWaveClusterResourceCrud) Get() error {
	request := oci_mysql.GetHeatWaveClusterRequest{}
func (s *MysqlHeatWaveClusterResourceCrud) Update() error {
	request := oci_mysql.UpdateHeatWaveClusterRequest{}
func (s *MysqlHeatWaveClusterResourceCrud) Delete() error {
	request := oci_mysql.DeleteHeatWaveClusterRequest{}
func (s *MysqlHeatWaveClusterResourceCrud) SetData() error {

func (s *MysqlHeatWaveClusterResourceCrud) Stop() error {
	request := oci_mysql.StopHeatWaveClusterRequest{}
func (s *MysqlHeatWaveClusterResourceCrud) Start() error {
	request := oci_mysql.StartHeatWaveClusterRequest{}

=== ./internal/service/mysql/mysql_heat_wave_cluster_data_source.go ===
func MysqlHeatWaveClusterDataSource() *schema.Resource {
	fieldMap := make(map[string]*schema.Schema)
func readSingularMysqlHeatWaveCluster(d *schema.ResourceData, m interface{}) error {
	sync := &MysqlHeatWaveClusterDataSourceCrud{}
func (s *MysqlHeatWaveClusterDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *MysqlHeatWaveClusterDataSourceCrud) Get() error {
	request := oci_mysql.GetHeatWaveClusterRequest{}
func (s *MysqlHeatWaveClusterDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/mysql/mysql_replicas_data_source.go ===
func MysqlReplicasDataSource() *schema.Resource {
	return &schema.Resource{
func readMysqlReplicas(d *schema.ResourceData, m interface{}) error {
	sync := &MysqlReplicasDataSourceCrud{}
func (s *MysqlReplicasDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *MysqlReplicasDataSourceCrud) Get() error {
	request := oci_mysql.ListReplicasRequest{}
func (s *MysqlReplicasDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/mysql/mysql_channel_data_source.go ===
func MysqlChannelDataSource() *schema.Resource {
	fieldMap := make(map[string]*schema.Schema)
func readSingularMysqlChannel(d *schema.ResourceData, m interface{}) error {
	sync := &MysqlChannelDataSourceCrud{}
func (s *MysqlChannelDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *MysqlChannelDataSourceCrud) Get() error {
	request := oci_mysql.GetChannelRequest{}
func (s *MysqlChannelDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/mysql/helpers_mysql.go ===
func (s *MysqlMysqlBackupResourceCrud) createDbBackupClientInRegion(region string) error {
	if s.DestRegionClient == nil {

=== ./internal/service/mysql/mysql_replica_data_source.go ===
func MysqlReplicaDataSource() *schema.Resource {
	fieldMap := make(map[string]*schema.Schema)
func readSingularMysqlReplica(d *schema.ResourceData, m interface{}) error {
	sync := &MysqlReplicaDataSourceCrud{}
func (s *MysqlReplicaDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *MysqlReplicaDataSourceCrud) Get() error {
	request := oci_mysql.GetReplicaRequest{}
func (s *MysqlReplicaDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/mysql/mysql_shapes_data_source.go ===
func MysqlShapesDataSource() *schema.Resource {
	return &schema.Resource{
func readMysqlShapes(d *schema.ResourceData, m interface{}) error {
	sync := &MysqlShapesDataSourceCrud{}
func (s *MysqlShapesDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *MysqlShapesDataSourceCrud) Get() error {
	request := oci_mysql.ListShapesRequest{}
func (s *MysqlShapesDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/mysql/mysql_mysql_backup_resource.go ===
func MysqlMysqlBackupResource() *schema.Resource {
	return &schema.Resource{
func createMysqlMysqlBackup(d *schema.ResourceData, m interface{}) error {
	sync := &MysqlMysqlBackupResourceCrud{}
func readMysqlMysqlBackup(d *schema.ResourceData, m interface{}) error {
	sync := &MysqlMysqlBackupResourceCrud{}
func updateMysqlMysqlBackup(d *schema.ResourceData, m interface{}) error {
	sync := &MysqlMysqlBackupResourceCrud{}
func deleteMysqlMysqlBackup(d *schema.ResourceData, m interface{}) error {
	sync := &MysqlMysqlBackupResourceCrud{}
func (s *MysqlMysqlBackupResourceCrud) ID() string {
	return *s.Res.Id
func (s *MysqlMysqlBackupResourceCrud) CreatedPending() []string {
	return []string{
func (s *MysqlMysqlBackupResourceCrud) CreatedTarget() []string {
	return []string{
func (s *MysqlMysqlBackupResourceCrud) DeletedPending() []string {
	return []string{
func (s *MysqlMysqlBackupResourceCrud) DeletedTarget() []string {
	return []string{
func (s *MysqlMysqlBackupResourceCrud) UpdatedPending() []string {
	return []string{
func (s *MysqlMysqlBackupResourceCrud) UpdatedTarget() []string {
	return []string{
func (s *MysqlMysqlBackupResourceCrud) Create() error {
	if s.isCopyCreate() {
func (s *MysqlMysqlBackupResourceCrud) isCopyCreate() bool {
	if sourceDetails, ok := s.D.GetOkExists("source_details"); ok {
func (s *MysqlMysqlBackupResourceCrud) createMysqlBackup() error {
	request := oci_mysql.CreateBackupRequest{}
func (s *MysqlMysqlBackupResourceCrud) createMysqlBackupCopy() error {
	copyMysqlBackupRequest := oci_mysql.CopyBackupRequest{}
func (s *MysqlMysqlBackupResourceCrud) Get() error {
	request := oci_mysql.GetBackupRequest{}
func (s *MysqlMysqlBackupResourceCrud) Update() error {
	if compartment, ok := s.D.GetOkExists("compartment_id"); ok && s.D.HasChange("compartment_id") {
func (s *MysqlMysqlBackupResourceCrud) Delete() error {
	request := oci_mysql.DeleteBackupRequest{}
func (s *MysqlMysqlBackupResourceCrud) isBackupCopy() bool {
	if _, ok := s.D.GetOk("immediate_source_backup_id"); ok {
func (s *MysqlMysqlBackupResourceCrud) SetData() error {
	if s.Res.BackupSizeInGBs != nil {
func (s *MysqlMysqlBackupResourceCrud) updateCompartment(compartment interface{}) error {
	changeCompartmentRequest := oci_mysql.ChangeBackupCompartmentRequest{}

=== ./internal/service/mysql/mysql_mysql_configurations_data_source.go ===
func MysqlMysqlConfigurationsDataSource() *schema.Resource {
	return &schema.Resource{
func readMysqlMysqlConfigurations(d *schema.ResourceData, m interface{}) error {
	sync := &MysqlMysqlConfigurationsDataSourceCrud{}
func (s *MysqlMysqlConfigurationsDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *MysqlMysqlConfigurationsDataSourceCrud) Get() error {
	request := oci_mysql.ListConfigurationsRequest{}
func (s *MysqlMysqlConfigurationsDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/mysql/mysql_export.go ===
func filterMysqlBackups(ctx *tf_export.ResourceDiscoveryContext, resources []*tf_export.OCIResource) ([]*tf_export.OCIResource, error) {
	results := []*tf_export.OCIResource{}
func processMysqlDbSystem(ctx *tf_export.ResourceDiscoveryContext, resources []*tf_export.OCIResource) ([]*tf_export.OCIResource, error) {
	for _, dbSystem := range resources {
func filterMysqlConfigurations(ctx *tf_export.ResourceDiscoveryContext, resources []*tf_export.OCIResource) ([]*tf_export.OCIResource, error) {
	results := []*tf_export.OCIResource{}

=== ./internal/service/mysql/mysql_channel_resource.go ===
func MysqlChannelResource() *schema.Resource {
	return &schema.Resource{
func createMysqlChannel(d *schema.ResourceData, m interface{}) error {
	sync := &MysqlChannelResourceCrud{}
func readMysqlChannel(d *schema.ResourceData, m interface{}) error {
	sync := &MysqlChannelResourceCrud{}
func updateMysqlChannel(d *schema.ResourceData, m interface{}) error {
	sync := &MysqlChannelResourceCrud{}
func deleteMysqlChannel(d *schema.ResourceData, m interface{}) error {
	sync := &MysqlChannelResourceCrud{}
func (s *MysqlChannelResourceCrud) ID() string {
	return *s.Res.Id
func (s *MysqlChannelResourceCrud) CreatedPending() []string {
	return []string{
func (s *MysqlChannelResourceCrud) CreatedTarget() []string {
	return []string{
func (s *MysqlChannelResourceCrud) DeletedPending() []string {
	return []string{
func (s *MysqlChannelResourceCrud) DeletedTarget() []string {
	return []string{
func (s *MysqlChannelResourceCrud) UpdatedPending() []string {
	return []string{
func (s *MysqlChannelResourceCrud) UpdatedTarget() []string {
	return []string{
func (s *MysqlChannelResourceCrud) Create() error {
	request := oci_mysql.CreateChannelRequest{}
func (s *MysqlChannelResourceCrud) Get() error {
	request := oci_mysql.GetChannelRequest{}
func (s *MysqlChannelResourceCrud) Update() error {
	request := oci_mysql.UpdateChannelRequest{}
func (s *MysqlChannelResourceCrud) Delete() error {
	request := oci_mysql.DeleteChannelRequest{}
func (s *MysqlChannelResourceCrud) SetData() error {
	if s.Res.Id != nil {
func (s *MysqlChannelResourceCrud) mapToAnonymousTransactionsHandling(fieldKeyFormat string) (oci_mysql.AnonymousTransactionsHandling, error) {
	var baseObject oci_mysql.AnonymousTransactionsHandling
func (s *MysqlChannelResourceCrud) mapToCaCertificate(fieldKeyFormat string) (oci_mysql.CaCertificate, error) {
	var baseObject oci_mysql.CaCertificate
func (s *MysqlChannelResourceCrud) CaCertificateToMap(obj *oci_mysql.CaCertificate) map[string]interface{} {
	result := map[string]interface{}{}
func (s *MysqlChannelResourceCrud) mapToChannelFilter(fieldKeyFormat string) (oci_mysql.ChannelFilter, error) {
	result := oci_mysql.ChannelFilter{}
func (s *MysqlChannelResourceCrud) mapToCreateChannelSourceDetails(fieldKeyFormat string) (oci_mysql.CreateChannelSourceDetails, error) {
	var baseObject oci_mysql.CreateChannelSourceDetails
func (s *MysqlChannelResourceCrud) mapToUpdateChannelSourceDetails(fieldKeyFormat string) (oci_mysql.UpdateChannelSourceDetails, error) {
	var baseObject oci_mysql.UpdateChannelSourceDetails
func (s *MysqlChannelResourceCrud) ChannelSourceToMap(obj *oci_mysql.ChannelSource) map[string]interface{} {
	result := map[string]interface{}{}
func (s *MysqlChannelResourceCrud) mapToCreateChannelTargetDetails(fieldKeyFormat string) (oci_mysql.CreateChannelTargetDetails, error) {
	var baseObject oci_mysql.CreateChannelTargetDetails
func (s *MysqlChannelResourceCrud) mapToUpdateChannelTargetDetails(fieldKeyFormat string) (oci_mysql.UpdateChannelTargetDetails, error) {
	var baseObject oci_mysql.UpdateChannelTargetDetails

=== ./internal/service/mysql/register_resource.go ===
func RegisterResource() {
	tfresource.RegisterResource("oci_mysql_channel", MysqlChannelResource())

=== ./internal/service/mysql/mysql_channels_data_source.go ===
func MysqlChannelsDataSource() *schema.Resource {
	return &schema.Resource{
func readMysqlChannels(d *schema.ResourceData, m interface{}) error {
	sync := &MysqlChannelsDataSourceCrud{}
func (s *MysqlChannelsDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *MysqlChannelsDataSourceCrud) Get() error {
	request := oci_mysql.ListChannelsRequest{}
func (s *MysqlChannelsDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/mysql/mysql_mysql_db_system_resource.go ===
func MysqlMysqlDbSystemResource() *schema.Resource {
	return &schema.Resource{
func createMysqlMysqlDbSystem(d *schema.ResourceData, m interface{}) error {
	sync := &MysqlMysqlDbSystemResourceCrud{}
func readMysqlMysqlDbSystem(d *schema.ResourceData, m interface{}) error {
	sync := &MysqlMysqlDbSystemResourceCrud{}
func updateMysqlMysqlDbSystem(d *schema.ResourceData, m interface{}) error {
	sync := &MysqlMysqlDbSystemResourceCrud{}
func deleteMysqlMysqlDbSystem(d *schema.ResourceData, m interface{}) error {
	sync := &MysqlMysqlDbSystemResourceCrud{}
func (s *MysqlMysqlDbSystemResourceCrud) ID() string {
	return *s.Res.Id
func (s *MysqlMysqlDbSystemResourceCrud) CreatedPending() []string {
	return []string{
func (s *MysqlMysqlDbSystemResourceCrud) CreatedTarget() []string {
	return []string{
func (s *MysqlMysqlDbSystemResourceCrud) DeletedPending() []string {
	return []string{
func (s *MysqlMysqlDbSystemResourceCrud) DeletedTarget() []string {
	return []string{
func (s *MysqlMysqlDbSystemResourceCrud) UpdatedPending() []string {
	return []string{
func (s *MysqlMysqlDbSystemResourceCrud) UpdatedTarget() []string {
	return []string{
func (s *MysqlMysqlDbSystemResourceCrud) Create() error {
	request := oci_mysql.CreateDbSystemRequest{}
func (s *MysqlMysqlDbSystemResourceCrud) Get() error {
	request := oci_mysql.GetDbSystemRequest{}
func (s *MysqlMysqlDbSystemResourceCrud) Update() error {
	request := oci_mysql.UpdateDbSystemRequest{}
func (s *MysqlMysqlDbSystemResourceCrud) Delete() error {
	request := oci_mysql.DeleteDbSystemRequest{}
func (s *MysqlMysqlDbSystemResourceCrud) SetData() error {
	if s.Res.AvailabilityDomain != nil {
func (s *MysqlMysqlDbSystemResourceCrud) mapToAnonymousTransactionsHandling(fieldKeyFormat string) (oci_mysql.AnonymousTransactionsHandling, error) {
	var baseObject oci_mysql.AnonymousTransactionsHandling
func (s *MysqlMysqlDbSystemResourceCrud) mapToCaCertificate(fieldKeyFormat string) (oci_mysql.CaCertificate, error) {
	var baseObject oci_mysql.CaCertificate
func (s *MysqlMysqlDbSystemResourceCrud) mapToChannelFilter(fieldKeyFormat string) (oci_mysql.ChannelFilter, error) {
	result := oci_mysql.ChannelFilter{}
func (s *MysqlMysqlDbSystemResourceCrud) mapToCreateBackupPolicyDetails(fieldKeyFormat string) (oci_mysql.CreateBackupPolicyDetails, error) {
	result := oci_mysql.CreateBackupPolicyDetails{}
func (s *MysqlMysqlDbSystemResourceCrud) mapToCreateDbSystemSourceDetails(fieldKeyFormat string) (oci_mysql.CreateDbSystemSourceDetails, error) {
	var baseObject oci_mysql.CreateDbSystemSourceDetails
func (s *MysqlMysqlDbSystemResourceCrud) mapToCreateDeletionPolicyDetails(fieldKeyFormat string) (oci_mysql.CreateDeletionPolicyDetails, error) {
	result := oci_mysql.CreateDeletionPolicyDetails{}
func (s *MysqlMysqlDbSystemResourceCrud) mapToUpdateDeletionPolicyDetails(fieldKeyFormat string) (oci_mysql.UpdateDeletionPolicyDetails, error) {
	result := oci_mysql.UpdateDeletionPolicyDetails{}
func (s *MysqlMysqlDbSystemResourceCrud) mapToCreateMaintenanceDetails(fieldKeyFormat string) (oci_mysql.CreateMaintenanceDetails, error) {
	result := oci_mysql.CreateMaintenanceDetails{}
func (s *MysqlMysqlDbSystemResourceCrud) mapToDataStorageDetails(fieldKeyFormat string) (oci_mysql.DataStorageDetails, error) {
	result := oci_mysql.DataStorageDetails{}
func (s *MysqlMysqlDbSystemResourceCrud) mapToCustomerContact(fieldKeyFormat string) (oci_mysql.CustomerContact, error) {
	result := oci_mysql.CustomerContact{}
func (s *MysqlMysqlDbSystemResourceCrud) mapToPitrPolicy(fieldKeyFormat string) (oci_mysql.PitrPolicy, error) {
	result := oci_mysql.PitrPolicy{}
func (s *MysqlMysqlDbSystemResourceCrud) mapToSecureConnectionDetails(fieldKeyFormat string) (oci_mysql.SecureConnectionDetails, error) {
	result := oci_mysql.SecureConnectionDetails{}
func (s *MysqlMysqlDbSystemResourceCrud) mapToUpdateBackupPolicyDetails(fieldKeyFormat string) (oci_mysql.UpdateBackupPolicyDetails, error) {
	result := oci_mysql.UpdateBackupPolicyDetails{}
func (s *MysqlMysqlDbSystemResourceCrud) mapToUpdateMaintenanceDetails(fieldKeyFormat string) (oci_mysql.UpdateMaintenanceDetails, error) {
	result := oci_mysql.UpdateMaintenanceDetails{}
func (s *MysqlMysqlDbSystemResourceCrud) StartMysqlDbInstance() error {
	request := oci_mysql.StartDbSystemRequest{}
func (s *MysqlMysqlDbSystemResourceCrud) StopMysqlDbInstance() error {
	request := oci_mysql.StopDbSystemRequest{}

=== ./internal/service/autoscaling/autoscaling_auto_scaling_configuration_resource.go ===
func AutoScalingAutoScalingConfigurationResource() *schema.Resource {
	return &schema.Resource{
func createAutoScalingAutoScalingConfiguration(d *schema.ResourceData, m interface{}) error {
	sync := &AutoScalingAutoScalingConfigurationResourceCrud{}
func readAutoScalingAutoScalingConfiguration(d *schema.ResourceData, m interface{}) error {
	sync := &AutoScalingAutoScalingConfigurationResourceCrud{}
func updateAutoScalingAutoScalingConfiguration(d *schema.ResourceData, m interface{}) error {
	sync := &AutoScalingAutoScalingConfigurationResourceCrud{}
func deleteAutoScalingAutoScalingConfiguration(d *schema.ResourceData, m interface{}) error {
	sync := &AutoScalingAutoScalingConfigurationResourceCrud{}
func (s *AutoScalingAutoScalingConfigurationResourceCrud) ID() string {
	return *s.Res.Id
func (s *AutoScalingAutoScalingConfigurationResourceCrud) Create() error {
	request := oci_auto_scaling.CreateAutoScalingConfigurationRequest{}
func (s *AutoScalingAutoScalingConfigurationResourceCrud) Get() error {
	request := oci_auto_scaling.GetAutoScalingConfigurationRequest{}
func (s *AutoScalingAutoScalingConfigurationResourceCrud) Update() error {
	if compartment, ok := s.D.GetOkExists("compartment_id"); ok && s.D.HasChange("compartment_id") {
func (s *AutoScalingAutoScalingConfigurationResourceCrud) Delete() error {
	request := oci_auto_scaling.DeleteAutoScalingConfigurationRequest{}
func (s *AutoScalingAutoScalingConfigurationResourceCrud) SetData() error {
	if s.Res.Resource != nil {
func (s *AutoScalingAutoScalingConfigurationResourceCrud) mapToAction(fieldKeyFormat string) (oci_auto_scaling.Action, error) {
	result := oci_auto_scaling.Action{}
func (s *AutoScalingAutoScalingConfigurationResourceCrud) mapToCapacity(fieldKeyFormat string) (oci_auto_scaling.Capacity, error) {
	result := oci_auto_scaling.Capacity{}
func (s *AutoScalingAutoScalingConfigurationResourceCrud) mapToCreateAutoScalingPolicyDetails(fieldKeyFormat string) (oci_auto_scaling.CreateAutoScalingPolicyDetails, error) {
	var baseObject oci_auto_scaling.CreateAutoScalingPolicyDetails
func (s *AutoScalingAutoScalingConfigurationResourceCrud) mapToCreateConditionDetails(fieldKeyFormat string) (oci_auto_scaling.CreateConditionDetails, error) {
	result := oci_auto_scaling.CreateConditionDetails{}
func (s *AutoScalingAutoScalingConfigurationResourceCrud) mapToExecutionSchedule(fieldKeyFormat string) (oci_auto_scaling.ExecutionSchedule, error) {
	var baseObject oci_auto_scaling.ExecutionSchedule
func (s *AutoScalingAutoScalingConfigurationResourceCrud) mapToMetric(fieldKeyFormat string) (oci_auto_scaling.Metric, error) {
	result := oci_auto_scaling.Metric{}
func (s *AutoScalingAutoScalingConfigurationResourceCrud) mapToResource(fieldKeyFormat string) (oci_auto_scaling.Resource, error) {
	var baseObject oci_auto_scaling.Resource
func ResourceToMap(obj *oci_auto_scaling.Resource) map[string]interface{} {
	result := map[string]interface{}{}
func (s *AutoScalingAutoScalingConfigurationResourceCrud) mapToResourceAction(fieldKeyFormat string) (oci_auto_scaling.ResourceAction, error) {
	var baseObject oci_auto_scaling.ResourceAction
func ResourceActionToMap(obj *oci_auto_scaling.ResourceAction) map[string]interface{} {
	result := map[string]interface{}{}
func (s *AutoScalingAutoScalingConfigurationResourceCrud) mapToThreshold(fieldKeyFormat string) (oci_auto_scaling.Threshold, error) {
	result := oci_auto_scaling.Threshold{}
func (s *AutoScalingAutoScalingConfigurationResourceCrud) updateCompartment(compartment interface{}) error {
	changeCompartmentRequest := oci_auto_scaling.ChangeAutoScalingConfigurationCompartmentRequest{}

=== ./internal/service/autoscaling/autoscaling_auto_scaling_configuration_data_source.go ===
func AutoScalingAutoScalingConfigurationDataSource() *schema.Resource {
	fieldMap := make(map[string]*schema.Schema)
func readSingularAutoScalingAutoScalingConfiguration(d *schema.ResourceData, m interface{}) error {
	sync := &AutoScalingAutoScalingConfigurationDataSourceCrud{}
func (s *AutoScalingAutoScalingConfigurationDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *AutoScalingAutoScalingConfigurationDataSourceCrud) Get() error {
	request := oci_auto_scaling.GetAutoScalingConfigurationRequest{}
func (s *AutoScalingAutoScalingConfigurationDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/autoscaling/register_resource.go ===
func RegisterResource() {
	tfresource.RegisterResource("oci_autoscaling_auto_scaling_configuration", AutoScalingAutoScalingConfigurationResource())

=== ./internal/service/autoscaling/autoscaling_auto_scaling_configurations_data_source.go ===
func AutoScalingAutoScalingConfigurationsDataSource() *schema.Resource {
	return &schema.Resource{
func readAutoScalingAutoScalingConfigurations(d *schema.ResourceData, m interface{}) error {
	sync := &AutoScalingAutoScalingConfigurationsDataSourceCrud{}
func (s *AutoScalingAutoScalingConfigurationsDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *AutoScalingAutoScalingConfigurationsDataSourceCrud) Get() error {
	request := oci_auto_scaling.ListAutoScalingConfigurationsRequest{}
func (s *AutoScalingAutoScalingConfigurationsDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/queue/queue_queue_resource.go ===
func QueueQueueResource() *schema.Resource {
	return &schema.Resource{
func createQueueQueue(d *schema.ResourceData, m interface{}) error {
	sync := &QueueQueueResourceCrud{}
func readQueueQueue(d *schema.ResourceData, m interface{}) error {
	sync := &QueueQueueResourceCrud{}
func updateQueueQueue(d *schema.ResourceData, m interface{}) error {
	sync := &QueueQueueResourceCrud{}
func deleteQueueQueue(d *schema.ResourceData, m interface{}) error {
	sync := &QueueQueueResourceCrud{}
func (s *QueueQueueResourceCrud) ID() string {
	return *s.Res.Id
func (s *QueueQueueResourceCrud) CreatedPending() []string {
	return []string{
func (s *QueueQueueResourceCrud) CreatedTarget() []string {
	return []string{
func (s *QueueQueueResourceCrud) DeletedPending() []string {
	return []string{
func (s *QueueQueueResourceCrud) DeletedTarget() []string {
	return []string{
func (s *QueueQueueResourceCrud) Create() error {
	request := oci_queue.CreateQueueRequest{}
func (s *QueueQueueResourceCrud) getQueueFromWorkRequest(workId *string, retryPolicy *oci_common.RetryPolicy,
	actionTypeEnum oci_queue.ActionTypeEnum, timeout time.Duration) error {
func (s *QueueQueueResourceCrud) Get() error {
	request := oci_queue.GetQueueRequest{}
func (s *QueueQueueResourceCrud) Update() error {
	if compartment, ok := s.D.GetOkExists("compartment_id"); ok && s.D.HasChange("compartment_id") {
func (s *QueueQueueResourceCrud) Delete() error {
	request := oci_queue.DeleteQueueRequest{}
func (s *QueueQueueResourceCrud) SetData() error {
	if s.Res.ChannelConsumptionLimit != nil {
func (s *QueueQueueResourceCrud) PurgeQueue() error {
	request := oci_queue.PurgeQueueRequest{}
func (s *QueueQueueResourceCrud) updateCompartment(compartment interface{}) error {
	changeCompartmentRequest := oci_queue.ChangeQueueCompartmentRequest{}

=== ./internal/service/queue/queue_queue_data_source.go ===
func QueueQueueDataSource() *schema.Resource {
	fieldMap := make(map[string]*schema.Schema)
func readSingularQueueQueue(d *schema.ResourceData, m interface{}) error {
	sync := &QueueQueueDataSourceCrud{}
func (s *QueueQueueDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *QueueQueueDataSourceCrud) Get() error {
	request := oci_queue.GetQueueRequest{}
func (s *QueueQueueDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/queue/queue_queues_data_source.go ===
func QueueQueuesDataSource() *schema.Resource {
	return &schema.Resource{
func readQueueQueues(d *schema.ResourceData, m interface{}) error {
	sync := &QueueQueuesDataSourceCrud{}
func (s *QueueQueuesDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *QueueQueuesDataSourceCrud) Get() error {
	request := oci_queue.ListQueuesRequest{}
func (s *QueueQueuesDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/queue/register_resource.go ===
func RegisterResource() {
	tfresource.RegisterResource("oci_queue_queue", QueueQueueResource())

=== ./internal/service/os_management_hub/os_management_hub_software_source_package_groups_data_source.go ===
func OsManagementHubSoftwareSourcePackageGroupsDataSource() *schema.Resource {
	return &schema.Resource{
func readOsManagementHubSoftwareSourcePackageGroups(d *schema.ResourceData, m interface{}) error {
	sync := &OsManagementHubSoftwareSourcePackageGroupsDataSourceCrud{}
func (s *OsManagementHubSoftwareSourcePackageGroupsDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *OsManagementHubSoftwareSourcePackageGroupsDataSourceCrud) Get() error {
	request := oci_os_management_hub.ListPackageGroupsRequest{}
func (s *OsManagementHubSoftwareSourcePackageGroupsDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/os_management_hub/os_management_hub_managed_instance_groups_data_source.go ===
func OsManagementHubManagedInstanceGroupsDataSource() *schema.Resource {
	return &schema.Resource{
func readOsManagementHubManagedInstanceGroups(d *schema.ResourceData, m interface{}) error {
	sync := &OsManagementHubManagedInstanceGroupsDataSourceCrud{}
func (s *OsManagementHubManagedInstanceGroupsDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *OsManagementHubManagedInstanceGroupsDataSourceCrud) Get() error {
	request := oci_os_management_hub.ListManagedInstanceGroupsRequest{}
func (s *OsManagementHubManagedInstanceGroupsDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/os_management_hub/os_management_hub_software_source_resource.go ===
func OsManagementHubSoftwareSourceResource() *schema.Resource {
	return &schema.Resource{
func createOsManagementHubSoftwareSource(d *schema.ResourceData, m interface{}) error {
	sync := &OsManagementHubSoftwareSourceResourceCrud{}
func readOsManagementHubSoftwareSource(d *schema.ResourceData, m interface{}) error {
	sync := &OsManagementHubSoftwareSourceResourceCrud{}
func updateOsManagementHubSoftwareSource(d *schema.ResourceData, m interface{}) error {
	sync := &OsManagementHubSoftwareSourceResourceCrud{}
func deleteOsManagementHubSoftwareSource(d *schema.ResourceData, m interface{}) error {
	sync := &OsManagementHubSoftwareSourceResourceCrud{}
func (s *OsManagementHubSoftwareSourceResourceCrud) ID() string {
	softwareSource := *s.Res
func (s *OsManagementHubSoftwareSourceResourceCrud) CreatedPending() []string {
	return []string{
func (s *OsManagementHubSoftwareSourceResourceCrud) CreatedTarget() []string {
	return []string{
func (s *OsManagementHubSoftwareSourceResourceCrud) DeletedPending() []string {
	return []string{
func (s *OsManagementHubSoftwareSourceResourceCrud) DeletedTarget() []string {
	return []string{
func (s *OsManagementHubSoftwareSourceResourceCrud) Create() error {
	request := oci_os_management_hub.CreateSoftwareSourceRequest{}
func (s *OsManagementHubSoftwareSourceResourceCrud) getSoftwareSourceFromWorkRequest(workId *string, retryPolicy *oci_common.RetryPolicy,
	actionTypeEnum oci_os_management_hub.ActionTypeEnum, timeout time.Duration) error {
func (s *OsManagementHubSoftwareSourceResourceCrud) Get() error {
	request := oci_os_management_hub.GetSoftwareSourceRequest{}
func (s *OsManagementHubSoftwareSourceResourceCrud) Update() error {

func (s *OsManagementHubSoftwareSourceResourceCrud) Delete() error {
	request := oci_os_management_hub.DeleteSoftwareSourceRequest{}
func (s *OsManagementHubSoftwareSourceResourceCrud) SetData() error {
	switch v := (*s.Res).(type) {
func (s *OsManagementHubSoftwareSourceResourceCrud) ChangeSoftwareSourceCompartment() error {
	request := oci_os_management_hub.ChangeSoftwareSourceCompartmentRequest{}
func (s *OsManagementHubSoftwareSourceResourceCrud) mapToCustomSoftwareSourceFilter(fieldKeyFormat string) (oci_os_management_hub.CustomSoftwareSourceFilter, error) {
	result := oci_os_management_hub.CustomSoftwareSourceFilter{}
func (s *OsManagementHubSoftwareSourceResourceCrud) mapToId(fieldKeyFormat string) (oci_os_management_hub.Id, error) {
	result := oci_os_management_hub.Id{}
func (s *OsManagementHubSoftwareSourceResourceCrud) mapToModuleStreamProfileFilter(fieldKeyFormat string) (oci_os_management_hub.ModuleStreamProfileFilter, error) {
	result := oci_os_management_hub.ModuleStreamProfileFilter{}
func (s *OsManagementHubSoftwareSourceResourceCrud) mapToPackageFilter(fieldKeyFormat string) (oci_os_management_hub.PackageFilter, error) {
	result := oci_os_management_hub.PackageFilter{}
func (s *OsManagementHubSoftwareSourceResourceCrud) mapToPackageGroupFilter(fieldKeyFormat string) (oci_os_management_hub.PackageGroupFilter, error) {
	result := oci_os_management_hub.PackageGroupFilter{}
func (s *OsManagementHubSoftwareSourceResourceCrud) populateTopLevelPolymorphicCreateSoftwareSourceRequest(request *oci_os_management_hub.CreateSoftwareSourceRequest) error {
	//discriminator
func (s *OsManagementHubSoftwareSourceResourceCrud) populateTopLevelPolymorphicUpdateSoftwareSourceRequest(request *oci_os_management_hub.UpdateSoftwareSourceRequest) error {
	//discriminator
func (s *OsManagementHubSoftwareSourceResourceCrud) updateCompartment(compartment interface{}) error {
	changeCompartmentRequest := oci_os_management_hub.ChangeSoftwareSourceCompartmentRequest{}

=== ./internal/service/os_management_hub/os_management_hub_software_sources_data_source.go ===
func OsManagementHubSoftwareSourcesDataSource() *schema.Resource {
	return &schema.Resource{
func readOsManagementHubSoftwareSources(d *schema.ResourceData, m interface{}) error {
	sync := &OsManagementHubSoftwareSourcesDataSourceCrud{}
func (s *OsManagementHubSoftwareSourcesDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *OsManagementHubSoftwareSourcesDataSourceCrud) Get() error {
	request := oci_os_management_hub.ListSoftwareSourcesRequest{}
func (s *OsManagementHubSoftwareSourcesDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/os_management_hub/os_management_hub_managed_instance_group_install_windows_updates_management_resource.go ===
func OsManagementHubManagedInstanceGroupInstallWindowsUpdatesManagementResource() *schema.Resource {
	return &schema.Resource{
func createOsManagementHubManagedInstanceGroupInstallWindowsUpdatesManagement(d *schema.ResourceData, m interface{}) error {
	sync := &OsManagementHubManagedInstanceGroupInstallWindowsUpdatesManagementResourceCrud{}
func readOsManagementHubManagedInstanceGroupInstallWindowsUpdatesManagement(d *schema.ResourceData, m interface{}) error {
	return nil
func deleteOsManagementHubManagedInstanceGroupInstallWindowsUpdatesManagement(d *schema.ResourceData, m interface{}) error {
	return nil
func (s *OsManagementHubManagedInstanceGroupInstallWindowsUpdatesManagementResourceCrud) ID() string {
	return *s.Res.Id
func (s *OsManagementHubManagedInstanceGroupInstallWindowsUpdatesManagementResourceCrud) Get() error {
	request := oci_os_management_hub.GetManagedInstanceGroupRequest{}
func (s *OsManagementHubManagedInstanceGroupInstallWindowsUpdatesManagementResourceCrud) Create() error {
	request := oci_os_management_hub.InstallWindowsUpdatesOnManagedInstanceGroupRequest{}
func (s *OsManagementHubManagedInstanceGroupInstallWindowsUpdatesManagementResourceCrud) getManagedInstanceGroupInstallWindowsUpdatesManagementFromWorkRequest(workId *string, retryPolicy *oci_common.RetryPolicy,
	actionTypeEnum oci_os_management_hub.ActionTypeEnum, timeout time.Duration) error {
func (s *OsManagementHubManagedInstanceGroupInstallWindowsUpdatesManagementResourceCrud) SetData() error {
	return nil
func (s *OsManagementHubManagedInstanceGroupInstallWindowsUpdatesManagementResourceCrud) mapToWorkRequestDetails(fieldKeyFormat string) (oci_os_management_hub.WorkRequestDetails, error) {
	result := oci_os_management_hub.WorkRequestDetails{}

=== ./internal/service/os_management_hub/os_management_hub_software_packages_data_source.go ===
func OsManagementHubSoftwarePackagesDataSource() *schema.Resource {
	return &schema.Resource{
func readOsManagementHubSoftwarePackages(d *schema.ResourceData, m interface{}) error {
	sync := &OsManagementHubSoftwarePackagesDataSourceCrud{}
func (s *OsManagementHubSoftwarePackagesDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *OsManagementHubSoftwarePackagesDataSourceCrud) Get() error {
	request := oci_os_management_hub.ListAllSoftwarePackagesRequest{}
func (s *OsManagementHubSoftwarePackagesDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/os_management_hub/os_management_hub_managed_instance_group_modules_data_source.go ===
func OsManagementHubManagedInstanceGroupModulesDataSource() *schema.Resource {
	return &schema.Resource{
func readOsManagementHubManagedInstanceGroupModules(d *schema.ResourceData, m interface{}) error {
	sync := &OsManagementHubManagedInstanceGroupModulesDataSourceCrud{}
func (s *OsManagementHubManagedInstanceGroupModulesDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *OsManagementHubManagedInstanceGroupModulesDataSourceCrud) Get() error {
	request := oci_os_management_hub.ListManagedInstanceGroupModulesRequest{}
func (s *OsManagementHubManagedInstanceGroupModulesDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/os_management_hub/os_management_hub_event_resource.go ===
func OsManagementHubEventResource() *schema.Resource {
	return &schema.Resource{
func createOsManagementHubEvent(d *schema.ResourceData, m interface{}) error {
	sync := &OsManagementHubEventResourceCrud{}
func readOsManagementHubEvent(d *schema.ResourceData, m interface{}) error {
	sync := &OsManagementHubEventResourceCrud{}
func updateOsManagementHubEvent(d *schema.ResourceData, m interface{}) error {
	sync := &OsManagementHubEventResourceCrud{}
func deleteOsManagementHubEvent(d *schema.ResourceData, m interface{}) error {
	sync := &OsManagementHubEventResourceCrud{}
func (s *OsManagementHubEventResourceCrud) ID() string {
	event := *s.Res
func (s *OsManagementHubEventResourceCrud) CreatedPending() []string {
	return []string{
func (s *OsManagementHubEventResourceCrud) CreatedTarget() []string {
	return []string{
func (s *OsManagementHubEventResourceCrud) DeletedPending() []string {
	return []string{
func (s *OsManagementHubEventResourceCrud) DeletedTarget() []string {
	return []string{
func (s *OsManagementHubEventResourceCrud) Create() error {
	request := oci_os_management_hub.UpdateEventRequest{}
func (s *OsManagementHubEventResourceCrud) getEventFromWorkRequest(workId *string, retryPolicy *oci_common.RetryPolicy,
	actionTypeEnum oci_os_management_hub.ActionTypeEnum, timeout time.Duration) error {
func (s *OsManagementHubEventResourceCrud) Get() error {
	request := oci_os_management_hub.GetEventRequest{}
func (s *OsManagementHubEventResourceCrud) Update() error {

func (s *OsManagementHubEventResourceCrud) Delete() error {
	request := oci_os_management_hub.DeleteEventRequest{}
func (s *OsManagementHubEventResourceCrud) SetData() error {
	switch v := (*s.Res).(type) {
func (s *OsManagementHubEventResourceCrud) ChangeEventCompartment() error {
	request := oci_os_management_hub.ChangeEventCompartmentRequest{}
func (s *OsManagementHubEventResourceCrud) mapToAgentEventData(fieldKeyFormat string) (oci_os_management_hub.AgentEventData, error) {
	result := oci_os_management_hub.AgentEventData{}
func (s *OsManagementHubEventResourceCrud) mapToExploitAttemptAdditionalDetails(fieldKeyFormat string) (oci_os_management_hub.ExploitAttemptAdditionalDetails, error) {
	result := oci_os_management_hub.ExploitAttemptAdditionalDetails{}
func (s *OsManagementHubEventResourceCrud) mapToExploitAttemptEventContent(fieldKeyFormat string) (oci_os_management_hub.ExploitAttemptEventContent, error) {
	result := oci_os_management_hub.ExploitAttemptEventContent{}
func (s *OsManagementHubEventResourceCrud) mapToExploitAttemptEventData(fieldKeyFormat string) (oci_os_management_hub.ExploitAttemptEventData, error) {
	result := oci_os_management_hub.ExploitAttemptEventData{}
func (s *OsManagementHubEventResourceCrud) mapToKernelEventAdditionalDetails(fieldKeyFormat string) (oci_os_management_hub.KernelEventAdditionalDetails, error) {
	result := oci_os_management_hub.KernelEventAdditionalDetails{}
func (s *OsManagementHubEventResourceCrud) mapToKernelEventContent(fieldKeyFormat string) (oci_os_management_hub.KernelEventContent, error) {
	result := oci_os_management_hub.KernelEventContent{}
func (s *OsManagementHubEventResourceCrud) mapToKernelEventData(fieldKeyFormat string) (oci_os_management_hub.KernelEventData, error) {
	result := oci_os_management_hub.KernelEventData{}
func (s *OsManagementHubEventResourceCrud) mapToKspliceUpdateEventData(fieldKeyFormat string) (oci_os_management_hub.KspliceUpdateEventData, error) {
	result := oci_os_management_hub.KspliceUpdateEventData{}
func (s *OsManagementHubEventResourceCrud) mapToManagementStationEventData(fieldKeyFormat string) (oci_os_management_hub.ManagementStationEventData, error) {
	result := oci_os_management_hub.ManagementStationEventData{}
func (s *OsManagementHubEventResourceCrud) mapToSoftwareSourceEventData(fieldKeyFormat string) (oci_os_management_hub.SoftwareSourceEventData, error) {
	result := oci_os_management_hub.SoftwareSourceEventData{}
func (s *OsManagementHubEventResourceCrud) mapToSoftwareUpdateEventData(fieldKeyFormat string) (oci_os_management_hub.SoftwareUpdateEventData, error) {
	result := oci_os_management_hub.SoftwareUpdateEventData{}
func (s *OsManagementHubEventResourceCrud) mapToVmcoreDetails(fieldKeyFormat string) (oci_os_management_hub.VmcoreDetails, error) {
	result := oci_os_management_hub.VmcoreDetails{}
func (s *OsManagementHubEventResourceCrud) mapToWorkRequestEventDataAdditionalDetails(fieldKeyFormat string) (oci_os_management_hub.WorkRequestEventDataAdditionalDetails, error) {
	result := oci_os_management_hub.WorkRequestEventDataAdditionalDetails{}
func (s *OsManagementHubEventResourceCrud) updateCompartment(compartment interface{}) error {
	changeCompartmentRequest := oci_os_management_hub.ChangeEventCompartmentRequest{}

=== ./internal/service/os_management_hub/os_management_hub_software_source_module_stream_profile_data_source.go ===
func OsManagementHubSoftwareSourceModuleStreamProfileDataSource() *schema.Resource {
	return &schema.Resource{
func readSingularOsManagementHubSoftwareSourceModuleStreamProfile(d *schema.ResourceData, m interface{}) error {
	sync := &OsManagementHubSoftwareSourceModuleStreamProfileDataSourceCrud{}
func (s *OsManagementHubSoftwareSourceModuleStreamProfileDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *OsManagementHubSoftwareSourceModuleStreamProfileDataSourceCrud) Get() error {
	request := oci_os_management_hub.GetModuleStreamProfileRequest{}
func (s *OsManagementHubSoftwareSourceModuleStreamProfileDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/os_management_hub/os_management_hub_software_source_data_source.go ===
func OsManagementHubSoftwareSourceDataSource() *schema.Resource {
	fieldMap := make(map[string]*schema.Schema)
func readSingularOsManagementHubSoftwareSource(d *schema.ResourceData, m interface{}) error {
	sync := &OsManagementHubSoftwareSourceDataSourceCrud{}
func (s *OsManagementHubSoftwareSourceDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *OsManagementHubSoftwareSourceDataSourceCrud) Get() error {
	request := oci_os_management_hub.GetSoftwareSourceRequest{}
func (s *OsManagementHubSoftwareSourceDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/os_management_hub/os_management_hub_entitlements_data_source.go ===
func OsManagementHubEntitlementsDataSource() *schema.Resource {
	return &schema.Resource{
func readOsManagementHubEntitlements(d *schema.ResourceData, m interface{}) error {
	sync := &OsManagementHubEntitlementsDataSourceCrud{}
func (s *OsManagementHubEntitlementsDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *OsManagementHubEntitlementsDataSourceCrud) Get() error {
	request := oci_os_management_hub.ListEntitlementsRequest{}
func (s *OsManagementHubEntitlementsDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/os_management_hub/os_management_hub_managed_instance_available_windows_updates_data_source.go ===
func OsManagementHubManagedInstanceAvailableWindowsUpdatesDataSource() *schema.Resource {
	return &schema.Resource{
func readOsManagementHubManagedInstanceAvailableWindowsUpdates(d *schema.ResourceData, m interface{}) error {
	sync := &OsManagementHubManagedInstanceAvailableWindowsUpdatesDataSourceCrud{}
func (s *OsManagementHubManagedInstanceAvailableWindowsUpdatesDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *OsManagementHubManagedInstanceAvailableWindowsUpdatesDataSourceCrud) Get() error {
	request := oci_os_management_hub.ListManagedInstanceAvailableWindowsUpdatesRequest{}
func (s *OsManagementHubManagedInstanceAvailableWindowsUpdatesDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/os_management_hub/os_management_hub_scheduled_job_resource.go ===
func OsManagementHubScheduledJobResource() *schema.Resource {
	return &schema.Resource{
func createOsManagementHubScheduledJob(d *schema.ResourceData, m interface{}) error {
	sync := &OsManagementHubScheduledJobResourceCrud{}
func readOsManagementHubScheduledJob(d *schema.ResourceData, m interface{}) error {
	sync := &OsManagementHubScheduledJobResourceCrud{}
func updateOsManagementHubScheduledJob(d *schema.ResourceData, m interface{}) error {
	sync := &OsManagementHubScheduledJobResourceCrud{}
func deleteOsManagementHubScheduledJob(d *schema.ResourceData, m interface{}) error {
	sync := &OsManagementHubScheduledJobResourceCrud{}
func (s *OsManagementHubScheduledJobResourceCrud) ID() string {
	return *s.Res.Id
func (s *OsManagementHubScheduledJobResourceCrud) CreatedPending() []string {
	return []string{
func (s *OsManagementHubScheduledJobResourceCrud) CreatedTarget() []string {
	return []string{
func (s *OsManagementHubScheduledJobResourceCrud) DeletedPending() []string {
	return []string{
func (s *OsManagementHubScheduledJobResourceCrud) DeletedTarget() []string {
	return []string{
func (s *OsManagementHubScheduledJobResourceCrud) Create() error {
	request := oci_os_management_hub.CreateScheduledJobRequest{}
func (s *OsManagementHubScheduledJobResourceCrud) Get() error {
	request := oci_os_management_hub.GetScheduledJobRequest{}
func (s *OsManagementHubScheduledJobResourceCrud) Update() error {

func (s *OsManagementHubScheduledJobResourceCrud) Delete() error {
	request := oci_os_management_hub.DeleteScheduledJobRequest{}
func (s *OsManagementHubScheduledJobResourceCrud) SetData() error {
	if s.Res.CompartmentId != nil {
func (s *OsManagementHubScheduledJobResourceCrud) ChangeScheduledJobCompartment() error {
	request := oci_os_management_hub.ChangeScheduledJobCompartmentRequest{}
func (s *OsManagementHubScheduledJobResourceCrud) mapToManageModuleStreamsInScheduledJobDetails(fieldKeyFormat string) (oci_os_management_hub.ManageModuleStreamsInScheduledJobDetails, error) {
	result := oci_os_management_hub.ManageModuleStreamsInScheduledJobDetails{}
func (s *OsManagementHubScheduledJobResourceCrud) mapToModuleStreamDetails(fieldKeyFormat string) (oci_os_management_hub.ModuleStreamDetails, error) {
	result := oci_os_management_hub.ModuleStreamDetails{}
func (s *OsManagementHubScheduledJobResourceCrud) mapToModuleStreamProfileDetails(fieldKeyFormat string) (oci_os_management_hub.ModuleStreamProfileDetails, error) {
	result := oci_os_management_hub.ModuleStreamProfileDetails{}
func (s *OsManagementHubScheduledJobResourceCrud) mapToScheduledJobOperation(fieldKeyFormat string) (oci_os_management_hub.ScheduledJobOperation, error) {
	result := oci_os_management_hub.ScheduledJobOperation{}
func (s *OsManagementHubScheduledJobResourceCrud) updateCompartment(compartment interface{}) error {
	changeCompartmentRequest := oci_os_management_hub.ChangeScheduledJobCompartmentRequest{}

=== ./internal/service/os_management_hub/os_management_hub_managed_instance_group_detach_managed_instances_management_resource.go ===
func OsManagementHubManagedInstanceGroupDetachManagedInstancesManagementResource() *schema.Resource {
	return &schema.Resource{
func createOsManagementHubManagedInstanceGroupDetachManagedInstancesManagement(d *schema.ResourceData, m interface{}) error {
	sync := &OsManagementHubManagedInstanceGroupDetachManagedInstancesManagementResourceCrud{}
func readOsManagementHubManagedInstanceGroupDetachManagedInstancesManagement(d *schema.ResourceData, m interface{}) error {
	return nil
func deleteOsManagementHubManagedInstanceGroupDetachManagedInstancesManagement(d *schema.ResourceData, m interface{}) error {
	return nil
func (s *OsManagementHubManagedInstanceGroupDetachManagedInstancesManagementResourceCrud) ID() string {
	return *s.Res.Id
func (s *OsManagementHubManagedInstanceGroupDetachManagedInstancesManagementResourceCrud) Get() error {
	request := oci_os_management_hub.GetManagedInstanceGroupRequest{}
func (s *OsManagementHubManagedInstanceGroupDetachManagedInstancesManagementResourceCrud) Create() error {
	request := oci_os_management_hub.DetachManagedInstancesFromManagedInstanceGroupRequest{}
func (s *OsManagementHubManagedInstanceGroupDetachManagedInstancesManagementResourceCrud) SetData() error {
	return nil

=== ./internal/service/os_management_hub/os_management_hub_lifecycle_stage_detach_managed_instances_management_resource.go ===
func OsManagementHubLifecycleStageDetachManagedInstancesManagementResource() *schema.Resource {
	return &schema.Resource{
func createOsManagementHubLifecycleStageDetachManagedInstancesManagement(d *schema.ResourceData, m interface{}) error {
	sync := &OsManagementHubLifecycleStageDetachManagedInstancesManagementResourceCrud{}
func readOsManagementHubLifecycleStageDetachManagedInstancesManagement(d *schema.ResourceData, m interface{}) error {
	return nil
func deleteOsManagementHubLifecycleStageDetachManagedInstancesManagement(d *schema.ResourceData, m interface{}) error {
	return nil
func (s *OsManagementHubLifecycleStageDetachManagedInstancesManagementResourceCrud) ID() string {
	return *s.Res.Id
func (s *OsManagementHubLifecycleStageDetachManagedInstancesManagementResourceCrud) Get() error {
	request := oci_os_management_hub.GetLifecycleStageRequest{}
func (s *OsManagementHubLifecycleStageDetachManagedInstancesManagementResourceCrud) Create() error {
	request := oci_os_management_hub.DetachManagedInstancesFromLifecycleStageRequest{}
func (s *OsManagementHubLifecycleStageDetachManagedInstancesManagementResourceCrud) getLifecycleStageDetachManagedInstancesManagementFromWorkRequest(workId *string, retryPolicy *oci_common.RetryPolicy,
	actionTypeEnum oci_os_management_hub.ActionTypeEnum, timeout time.Duration) error {
func (s *OsManagementHubLifecycleStageDetachManagedInstancesManagementResourceCrud) SetData() error {
	return nil
func (s *OsManagementHubLifecycleStageDetachManagedInstancesManagementResourceCrud) mapToManagedInstancesDetails(fieldKeyFormat string) (oci_os_management_hub.ManagedInstancesDetails, error) {
	result := oci_os_management_hub.ManagedInstancesDetails{}
func (s *OsManagementHubLifecycleStageDetachManagedInstancesManagementResourceCrud) mapToWorkRequestDetails(fieldKeyFormat string) (oci_os_management_hub.WorkRequestDetails, error) {
	result := oci_os_management_hub.WorkRequestDetails{}

=== ./internal/service/os_management_hub/os_management_hub_management_station_resource.go ===
func OsManagementHubManagementStationResource() *schema.Resource {
	return &schema.Resource{
func createOsManagementHubManagementStation(d *schema.ResourceData, m interface{}) error {
	sync := &OsManagementHubManagementStationResourceCrud{}
func readOsManagementHubManagementStation(d *schema.ResourceData, m interface{}) error {
	sync := &OsManagementHubManagementStationResourceCrud{}
func updateOsManagementHubManagementStation(d *schema.ResourceData, m interface{}) error {
	sync := &OsManagementHubManagementStationResourceCrud{}
func deleteOsManagementHubManagementStation(d *schema.ResourceData, m interface{}) error {
	sync := &OsManagementHubManagementStationResourceCrud{}
func (s *OsManagementHubManagementStationResourceCrud) ID() string {
	return *s.Res.Id
func (s *OsManagementHubManagementStationResourceCrud) CreatedPending() []string {
	return []string{
func (s *OsManagementHubManagementStationResourceCrud) CreatedTarget() []string {
	return []string{
func (s *OsManagementHubManagementStationResourceCrud) DeletedPending() []string {
	return []string{
func (s *OsManagementHubManagementStationResourceCrud) DeletedTarget() []string {
	return []string{
func (s *OsManagementHubManagementStationResourceCrud) Create() error {
	request := oci_os_management_hub.CreateManagementStationRequest{}
func (s *OsManagementHubManagementStationResourceCrud) Get() error {
	request := oci_os_management_hub.GetManagementStationRequest{}
func (s *OsManagementHubManagementStationResourceCrud) Update() error {

func (s *OsManagementHubManagementStationResourceCrud) Delete() error {
	request := oci_os_management_hub.DeleteManagementStationRequest{}
func (s *OsManagementHubManagementStationResourceCrud) SetData() error {
	if s.Res.CompartmentId != nil {
func (s *OsManagementHubManagementStationResourceCrud) RefreshManagementStationConfig() error {
	request := oci_os_management_hub.RefreshManagementStationConfigRequest{}
func (s *OsManagementHubManagementStationResourceCrud) ChangeManagementStationCompartment() error {
	request := oci_os_management_hub.ChangeManagementStationCompartmentRequest{}
func (s *OsManagementHubManagementStationResourceCrud) mapToCreateMirrorConfigurationDetails(fieldKeyFormat string) (oci_os_management_hub.CreateMirrorConfigurationDetails, error) {
	result := oci_os_management_hub.CreateMirrorConfigurationDetails{}
func (s *OsManagementHubManagementStationResourceCrud) mapToUpdateMirrorConfigurationDetails(fieldKeyFormat string) (oci_os_management_hub.UpdateMirrorConfigurationDetails, error) {
	result := oci_os_management_hub.UpdateMirrorConfigurationDetails{}
func (s *OsManagementHubManagementStationResourceCrud) mapToCreateProxyConfigurationDetails(fieldKeyFormat string) (oci_os_management_hub.CreateProxyConfigurationDetails, error) {
	result := oci_os_management_hub.CreateProxyConfigurationDetails{}
func (s *OsManagementHubManagementStationResourceCrud) mapToUpdateProxyConfigurationDetails(fieldKeyFormat string) (oci_os_management_hub.UpdateProxyConfigurationDetails, error) {
	result := oci_os_management_hub.UpdateProxyConfigurationDetails{}
func (s *OsManagementHubManagementStationResourceCrud) updateCompartment(compartment interface{}) error {
	changeCompartmentRequest := oci_os_management_hub.ChangeManagementStationCompartmentRequest{}

=== ./internal/service/os_management_hub/os_management_hub_managed_instance_modules_data_source.go ===
func OsManagementHubManagedInstanceModulesDataSource() *schema.Resource {
	return &schema.Resource{
func readOsManagementHubManagedInstanceModules(d *schema.ResourceData, m interface{}) error {
	sync := &OsManagementHubManagedInstanceModulesDataSourceCrud{}
func (s *OsManagementHubManagedInstanceModulesDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *OsManagementHubManagedInstanceModulesDataSourceCrud) Get() error {
	request := oci_os_management_hub.ListManagedInstanceModulesRequest{}
func (s *OsManagementHubManagedInstanceModulesDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/os_management_hub/os_management_hub_profile_resource.go ===
func OsManagementHubProfileResource() *schema.Resource {
	return &schema.Resource{
func createOsManagementHubProfile(d *schema.ResourceData, m interface{}) error {
	sync := &OsManagementHubProfileResourceCrud{}
func readOsManagementHubProfile(d *schema.ResourceData, m interface{}) error {
	sync := &OsManagementHubProfileResourceCrud{}
func updateOsManagementHubProfile(d *schema.ResourceData, m interface{}) error {
	sync := &OsManagementHubProfileResourceCrud{}
func deleteOsManagementHubProfile(d *schema.ResourceData, m interface{}) error {
	sync := &OsManagementHubProfileResourceCrud{}
func (s *OsManagementHubProfileResourceCrud) ID() string {
	profile := *s.Res
func (s *OsManagementHubProfileResourceCrud) CreatedPending() []string {
	return []string{
func (s *OsManagementHubProfileResourceCrud) CreatedTarget() []string {
	return []string{
func (s *OsManagementHubProfileResourceCrud) DeletedPending() []string {
	return []string{
func (s *OsManagementHubProfileResourceCrud) DeletedTarget() []string {
	return []string{
func (s *OsManagementHubProfileResourceCrud) Create() error {
	request := oci_os_management_hub.CreateProfileRequest{}
func (s *OsManagementHubProfileResourceCrud) Get() error {
	request := oci_os_management_hub.GetProfileRequest{}
func (s *OsManagementHubProfileResourceCrud) Update() error {

func (s *OsManagementHubProfileResourceCrud) Delete() error {
	request := oci_os_management_hub.DeleteProfileRequest{}
func (s *OsManagementHubProfileResourceCrud) SetData() error {
	switch v := (*s.Res).(type) {
func (s *OsManagementHubProfileResourceCrud) ChangeProfileCompartment() error {
	request := oci_os_management_hub.ChangeProfileCompartmentRequest{}
func (s *OsManagementHubProfileResourceCrud) mapToLifecycleEnvironmentDetails(fieldKeyFormat string) (oci_os_management_hub.LifecycleEnvironmentDetails, error) {
	result := oci_os_management_hub.LifecycleEnvironmentDetails{}
func (s *OsManagementHubProfileResourceCrud) mapToLifecycleStageDetails(fieldKeyFormat string) (oci_os_management_hub.LifecycleStageDetails, error) {
	result := oci_os_management_hub.LifecycleStageDetails{}
func (s *OsManagementHubProfileResourceCrud) mapToManagedInstanceGroupDetails(fieldKeyFormat string) (oci_os_management_hub.ManagedInstanceGroupDetails, error) {
	result := oci_os_management_hub.ManagedInstanceGroupDetails{}
func (s *OsManagementHubProfileResourceCrud) mapToSoftwareSourceDetails(fieldKeyFormat string) (oci_os_management_hub.SoftwareSourceDetails, error) {
	result := oci_os_management_hub.SoftwareSourceDetails{}
func (s *OsManagementHubProfileResourceCrud) populateTopLevelPolymorphicCreateProfileRequest(request *oci_os_management_hub.CreateProfileRequest) error {
	//discriminator
func (s *OsManagementHubProfileResourceCrud) updateCompartment(compartment interface{}) error {
	changeCompartmentRequest := oci_os_management_hub.ChangeProfileCompartmentRequest{}

=== ./internal/service/os_management_hub/os_management_hub_errata_data_source.go ===
func OsManagementHubErrataDataSource() *schema.Resource {
	return &schema.Resource{
func readOsManagementHubErrata(d *schema.ResourceData, m interface{}) error {
	sync := &OsManagementHubErrataDataSourceCrud{}
func (s *OsManagementHubErrataDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *OsManagementHubErrataDataSourceCrud) Get() error {
	request := oci_os_management_hub.ListErrataRequest{}
func (s *OsManagementHubErrataDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/os_management_hub/os_management_hub_managed_instances_data_source.go ===
func OsManagementHubManagedInstancesDataSource() *schema.Resource {
	return &schema.Resource{
func readOsManagementHubManagedInstances(d *schema.ResourceData, m interface{}) error {
	sync := &OsManagementHubManagedInstancesDataSourceCrud{}
func (s *OsManagementHubManagedInstancesDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *OsManagementHubManagedInstancesDataSourceCrud) Get() error {
	request := oci_os_management_hub.ListManagedInstancesRequest{}
func (s *OsManagementHubManagedInstancesDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/os_management_hub/os_management_hub_software_source_vendors_data_source.go ===
func OsManagementHubSoftwareSourceVendorsDataSource() *schema.Resource {
	return &schema.Resource{
func readOsManagementHubSoftwareSourceVendors(d *schema.ResourceData, m interface{}) error {
	sync := &OsManagementHubSoftwareSourceVendorsDataSourceCrud{}
func (s *OsManagementHubSoftwareSourceVendorsDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *OsManagementHubSoftwareSourceVendorsDataSourceCrud) Get() error {
	request := oci_os_management_hub.ListSoftwareSourceVendorsRequest{}
func (s *OsManagementHubSoftwareSourceVendorsDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/os_management_hub/os_management_hub_profile_data_source.go ===
func OsManagementHubProfileDataSource() *schema.Resource {
	fieldMap := make(map[string]*schema.Schema)
func readSingularOsManagementHubProfile(d *schema.ResourceData, m interface{}) error {
	sync := &OsManagementHubProfileDataSourceCrud{}
func (s *OsManagementHubProfileDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *OsManagementHubProfileDataSourceCrud) Get() error {
	request := oci_os_management_hub.GetProfileRequest{}
func (s *OsManagementHubProfileDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/os_management_hub/os_management_hub_managed_instance_update_packages_management_resource.go ===
func OsManagementHubManagedInstanceUpdatePackagesManagementResource() *schema.Resource {
	return &schema.Resource{
func createOsManagementHubManagedInstanceUpdatePackagesManagement(d *schema.ResourceData, m interface{}) error {
	sync := &OsManagementHubManagedInstanceUpdatePackagesManagementResourceCrud{}
func readOsManagementHubManagedInstanceUpdatePackagesManagement(d *schema.ResourceData, m interface{}) error {
	return nil
func deleteOsManagementHubManagedInstanceUpdatePackagesManagement(d *schema.ResourceData, m interface{}) error {
	return nil
func (s *OsManagementHubManagedInstanceUpdatePackagesManagementResourceCrud) ID() string {
	return *s.Res.Id
func (s *OsManagementHubManagedInstanceUpdatePackagesManagementResourceCrud) Get() error {
	request := oci_os_management_hub.GetManagedInstanceRequest{}
func (s *OsManagementHubManagedInstanceUpdatePackagesManagementResourceCrud) Create() error {
	request := oci_os_management_hub.UpdatePackagesOnManagedInstanceRequest{}
func (s *OsManagementHubManagedInstanceUpdatePackagesManagementResourceCrud) getManagedInstanceUpdatePackagesManagementFromWorkRequest(workId *string, retryPolicy *oci_common.RetryPolicy,
	actionTypeEnum oci_os_management_hub.ActionTypeEnum, timeout time.Duration) error {
func (s *OsManagementHubManagedInstanceUpdatePackagesManagementResourceCrud) SetData() error {
	return nil
func (s *OsManagementHubManagedInstanceUpdatePackagesManagementResourceCrud) mapToWorkRequestDetails(fieldKeyFormat string) (oci_os_management_hub.WorkRequestDetails, error) {
	result := oci_os_management_hub.WorkRequestDetails{}

=== ./internal/service/os_management_hub/os_management_hub_managed_instance_updatable_packages_data_source.go ===
func OsManagementHubManagedInstanceUpdatablePackagesDataSource() *schema.Resource {
	return &schema.Resource{
func readOsManagementHubManagedInstanceUpdatablePackages(d *schema.ResourceData, m interface{}) error {
	sync := &OsManagementHubManagedInstanceUpdatablePackagesDataSourceCrud{}
func (s *OsManagementHubManagedInstanceUpdatablePackagesDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *OsManagementHubManagedInstanceUpdatablePackagesDataSourceCrud) Get() error {
	request := oci_os_management_hub.ListManagedInstanceUpdatablePackagesRequest{}
func (s *OsManagementHubManagedInstanceUpdatablePackagesDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/os_management_hub/os_management_hub_software_source_software_package_data_source.go ===
func OsManagementHubSoftwareSourceSoftwarePackageDataSource() *schema.Resource {
	return &schema.Resource{
func readSingularOsManagementHubSoftwareSourceSoftwarePackage(d *schema.ResourceData, m interface{}) error {
	sync := &OsManagementHubSoftwareSourceSoftwarePackageDataSourceCrud{}
func (s *OsManagementHubSoftwareSourceSoftwarePackageDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *OsManagementHubSoftwareSourceSoftwarePackageDataSourceCrud) Get() error {
	request := oci_os_management_hub.GetSoftwarePackageRequest{}
func (s *OsManagementHubSoftwareSourceSoftwarePackageDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/os_management_hub/os_management_hub_managed_instance_group_resource.go ===
func OsManagementHubManagedInstanceGroupResource() *schema.Resource {
	return &schema.Resource{
func createOsManagementHubManagedInstanceGroup(d *schema.ResourceData, m interface{}) error {
	sync := &OsManagementHubManagedInstanceGroupResourceCrud{}
func readOsManagementHubManagedInstanceGroup(d *schema.ResourceData, m interface{}) error {
	sync := &OsManagementHubManagedInstanceGroupResourceCrud{}
func updateOsManagementHubManagedInstanceGroup(d *schema.ResourceData, m interface{}) error {
	sync := &OsManagementHubManagedInstanceGroupResourceCrud{}
func deleteOsManagementHubManagedInstanceGroup(d *schema.ResourceData, m interface{}) error {
	sync := &OsManagementHubManagedInstanceGroupResourceCrud{}
func (s *OsManagementHubManagedInstanceGroupResourceCrud) ID() string {
	return *s.Res.Id
func (s *OsManagementHubManagedInstanceGroupResourceCrud) CreatedPending() []string {
	return []string{
func (s *OsManagementHubManagedInstanceGroupResourceCrud) CreatedTarget() []string {
	return []string{
func (s *OsManagementHubManagedInstanceGroupResourceCrud) DeletedPending() []string {
	return []string{
func (s *OsManagementHubManagedInstanceGroupResourceCrud) DeletedTarget() []string {
	return []string{
func (s *OsManagementHubManagedInstanceGroupResourceCrud) Create() error {
	request := oci_os_management_hub.CreateManagedInstanceGroupRequest{}
func (s *OsManagementHubManagedInstanceGroupResourceCrud) Get() error {
	request := oci_os_management_hub.GetManagedInstanceGroupRequest{}
func (s *OsManagementHubManagedInstanceGroupResourceCrud) Update() error {

func (s *OsManagementHubManagedInstanceGroupResourceCrud) Delete() error {
	request := oci_os_management_hub.DeleteManagedInstanceGroupRequest{}
func (s *OsManagementHubManagedInstanceGroupResourceCrud) SetData() error {
	s.D.Set("arch_type", s.Res.ArchType)
func (s *OsManagementHubManagedInstanceGroupResourceCrud) ChangeManagedInstanceGroupCompartment() error {
	request := oci_os_management_hub.ChangeManagedInstanceGroupCompartmentRequest{}
func (s *OsManagementHubManagedInstanceGroupResourceCrud) mapToUpdatableAutonomousSettings(fieldKeyFormat string) (oci_os_management_hub.UpdatableAutonomousSettings, error) {
	result := oci_os_management_hub.UpdatableAutonomousSettings{}
func (s *OsManagementHubManagedInstanceGroupResourceCrud) updateCompartment(compartment interface{}) error {
	changeCompartmentRequest := oci_os_management_hub.ChangeManagedInstanceGroupCompartmentRequest{}

=== ./internal/service/os_management_hub/os_management_hub_profiles_data_source.go ===
func OsManagementHubProfilesDataSource() *schema.Resource {
	return &schema.Resource{
func readOsManagementHubProfiles(d *schema.ResourceData, m interface{}) error {
	sync := &OsManagementHubProfilesDataSourceCrud{}
func (s *OsManagementHubProfilesDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *OsManagementHubProfilesDataSourceCrud) Get() error {
	request := oci_os_management_hub.ListProfilesRequest{}
func (s *OsManagementHubProfilesDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/os_management_hub/os_management_hub_managed_instance_group_update_all_packages_management_resource.go ===
func OsManagementHubManagedInstanceGroupUpdateAllPackagesManagementResource() *schema.Resource {
	return &schema.Resource{
func createOsManagementHubManagedInstanceGroupUpdateAllPackagesManagement(d *schema.ResourceData, m interface{}) error {
	sync := &OsManagementHubManagedInstanceGroupUpdateAllPackagesManagementResourceCrud{}
func readOsManagementHubManagedInstanceGroupUpdateAllPackagesManagement(d *schema.ResourceData, m interface{}) error {
	return nil
func deleteOsManagementHubManagedInstanceGroupUpdateAllPackagesManagement(d *schema.ResourceData, m interface{}) error {
	return nil
func (s *OsManagementHubManagedInstanceGroupUpdateAllPackagesManagementResourceCrud) ID() string {
	return *s.Res.Id
func (s *OsManagementHubManagedInstanceGroupUpdateAllPackagesManagementResourceCrud) Get() error {
	request := oci_os_management_hub.GetManagedInstanceGroupRequest{}
func (s *OsManagementHubManagedInstanceGroupUpdateAllPackagesManagementResourceCrud) Create() error {
	request := oci_os_management_hub.UpdateAllPackagesOnManagedInstanceGroupRequest{}
func (s *OsManagementHubManagedInstanceGroupUpdateAllPackagesManagementResourceCrud) getManagedInstanceGroupUpdateAllPackagesManagementFromWorkRequest(workId *string, retryPolicy *oci_common.RetryPolicy,
	actionTypeEnum oci_os_management_hub.ActionTypeEnum, timeout time.Duration) error {
func (s *OsManagementHubManagedInstanceGroupUpdateAllPackagesManagementResourceCrud) SetData() error {
	return nil
func (s *OsManagementHubManagedInstanceGroupUpdateAllPackagesManagementResourceCrud) mapToWorkRequestDetails(fieldKeyFormat string) (oci_os_management_hub.WorkRequestDetails, error) {
	result := oci_os_management_hub.WorkRequestDetails{}

=== ./internal/service/os_management_hub/os_management_hub_windows_updates_data_source.go ===
func OsManagementHubWindowsUpdatesDataSource() *schema.Resource {
	return &schema.Resource{
func readOsManagementHubWindowsUpdates(d *schema.ResourceData, m interface{}) error {
	sync := &OsManagementHubWindowsUpdatesDataSourceCrud{}
func (s *OsManagementHubWindowsUpdatesDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *OsManagementHubWindowsUpdatesDataSourceCrud) Get() error {
	request := oci_os_management_hub.ListWindowsUpdatesRequest{}
func (s *OsManagementHubWindowsUpdatesDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/os_management_hub/os_management_hub_managed_instance_group_available_modules_data_source.go ===
func OsManagementHubManagedInstanceGroupAvailableModulesDataSource() *schema.Resource {
	return &schema.Resource{
func readOsManagementHubManagedInstanceGroupAvailableModules(d *schema.ResourceData, m interface{}) error {
	sync := &OsManagementHubManagedInstanceGroupAvailableModulesDataSourceCrud{}
func (s *OsManagementHubManagedInstanceGroupAvailableModulesDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *OsManagementHubManagedInstanceGroupAvailableModulesDataSourceCrud) Get() error {
	request := oci_os_management_hub.ListManagedInstanceGroupAvailableModulesRequest{}
func (s *OsManagementHubManagedInstanceGroupAvailableModulesDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/os_management_hub/os_management_hub_managed_instance_errata_data_source.go ===
func OsManagementHubManagedInstanceErrataDataSource() *schema.Resource {
	return &schema.Resource{
func readOsManagementHubManagedInstanceErrata(d *schema.ResourceData, m interface{}) error {
	sync := &OsManagementHubManagedInstanceErrataDataSourceCrud{}
func (s *OsManagementHubManagedInstanceErrataDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *OsManagementHubManagedInstanceErrataDataSourceCrud) Get() error {
	request := oci_os_management_hub.ListManagedInstanceErrataRequest{}
func (s *OsManagementHubManagedInstanceErrataDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/os_management_hub/os_management_hub_management_station_mirrors_data_source.go ===
func OsManagementHubManagementStationMirrorsDataSource() *schema.Resource {
	return &schema.Resource{
func readOsManagementHubManagementStationMirrors(d *schema.ResourceData, m interface{}) error {
	sync := &OsManagementHubManagementStationMirrorsDataSourceCrud{}
func (s *OsManagementHubManagementStationMirrorsDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *OsManagementHubManagementStationMirrorsDataSourceCrud) Get() error {
	request := oci_os_management_hub.ListMirrorsRequest{}
func (s *OsManagementHubManagementStationMirrorsDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/os_management_hub/os_management_hub_lifecycle_environment_resource.go ===
func OsManagementHubLifecycleEnvironmentResource() *schema.Resource {
	return &schema.Resource{
func createOsManagementHubLifecycleEnvironment(d *schema.ResourceData, m interface{}) error {
	sync := &OsManagementHubLifecycleEnvironmentResourceCrud{}
func readOsManagementHubLifecycleEnvironment(d *schema.ResourceData, m interface{}) error {
	sync := &OsManagementHubLifecycleEnvironmentResourceCrud{}
func updateOsManagementHubLifecycleEnvironment(d *schema.ResourceData, m interface{}) error {
	sync := &OsManagementHubLifecycleEnvironmentResourceCrud{}
func deleteOsManagementHubLifecycleEnvironment(d *schema.ResourceData, m interface{}) error {
	sync := &OsManagementHubLifecycleEnvironmentResourceCrud{}
func (s *OsManagementHubLifecycleEnvironmentResourceCrud) ID() string {
	return *s.Res.Id
func (s *OsManagementHubLifecycleEnvironmentResourceCrud) CreatedPending() []string {
	return []string{
func (s *OsManagementHubLifecycleEnvironmentResourceCrud) CreatedTarget() []string {
	return []string{
func (s *OsManagementHubLifecycleEnvironmentResourceCrud) DeletedPending() []string {
	return []string{
func (s *OsManagementHubLifecycleEnvironmentResourceCrud) DeletedTarget() []string {
	return []string{
func (s *OsManagementHubLifecycleEnvironmentResourceCrud) Create() error {
	request := oci_os_management_hub.CreateLifecycleEnvironmentRequest{}
func (s *OsManagementHubLifecycleEnvironmentResourceCrud) Get() error {
	request := oci_os_management_hub.GetLifecycleEnvironmentRequest{}
func (s *OsManagementHubLifecycleEnvironmentResourceCrud) Update() error {

func (s *OsManagementHubLifecycleEnvironmentResourceCrud) Delete() error {
	request := oci_os_management_hub.DeleteLifecycleEnvironmentRequest{}
func (s *OsManagementHubLifecycleEnvironmentResourceCrud) SetData() error {
	s.D.Set("arch_type", s.Res.ArchType)
func (s *OsManagementHubLifecycleEnvironmentResourceCrud) ChangeLifecycleEnvironmentCompartment() error {
	request := oci_os_management_hub.ChangeLifecycleEnvironmentCompartmentRequest{}
func (s *OsManagementHubLifecycleEnvironmentResourceCrud) mapToCreateLifecycleStageDetails(fieldKeyFormat string) (oci_os_management_hub.CreateLifecycleStageDetails, error) {
	result := oci_os_management_hub.CreateLifecycleStageDetails{}
func (s *OsManagementHubLifecycleEnvironmentResourceCrud) mapToUpdateLifecycleStageDetails(fieldKeyFormat string) (oci_os_management_hub.UpdateLifecycleStageDetails, error) {
	result := oci_os_management_hub.UpdateLifecycleStageDetails{}
func (s *OsManagementHubLifecycleEnvironmentResourceCrud) updateCompartment(compartment interface{}) error {
	changeCompartmentRequest := oci_os_management_hub.ChangeLifecycleEnvironmentCompartmentRequest{}

=== ./internal/service/os_management_hub/os_management_hub_windows_update_data_source.go ===
func OsManagementHubWindowsUpdateDataSource() *schema.Resource {
	return &schema.Resource{
func readSingularOsManagementHubWindowsUpdate(d *schema.ResourceData, m interface{}) error {
	sync := &OsManagementHubWindowsUpdateDataSourceCrud{}
func (s *OsManagementHubWindowsUpdateDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *OsManagementHubWindowsUpdateDataSourceCrud) Get() error {
	request := oci_os_management_hub.GetWindowsUpdateRequest{}
func (s *OsManagementHubWindowsUpdateDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/os_management_hub/os_management_hub_managed_instance_group_available_software_sources_data_source.go ===
func OsManagementHubManagedInstanceGroupAvailableSoftwareSourcesDataSource() *schema.Resource {
	return &schema.Resource{
func readOsManagementHubManagedInstanceGroupAvailableSoftwareSources(d *schema.ResourceData, m interface{}) error {
	sync := &OsManagementHubManagedInstanceGroupAvailableSoftwareSourcesDataSourceCrud{}
func (s *OsManagementHubManagedInstanceGroupAvailableSoftwareSourcesDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *OsManagementHubManagedInstanceGroupAvailableSoftwareSourcesDataSourceCrud) Get() error {
	request := oci_os_management_hub.ListManagedInstanceGroupAvailableSoftwareSourcesRequest{}
func (s *OsManagementHubManagedInstanceGroupAvailableSoftwareSourcesDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/os_management_hub/os_management_hub_scheduled_job_data_source.go ===
func OsManagementHubScheduledJobDataSource() *schema.Resource {
	fieldMap := make(map[string]*schema.Schema)
func readSingularOsManagementHubScheduledJob(d *schema.ResourceData, m interface{}) error {
	sync := &OsManagementHubScheduledJobDataSourceCrud{}
func (s *OsManagementHubScheduledJobDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *OsManagementHubScheduledJobDataSourceCrud) Get() error {
	request := oci_os_management_hub.GetScheduledJobRequest{}
func (s *OsManagementHubScheduledJobDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/os_management_hub/os_management_hub_software_package_data_source.go ===
func OsManagementHubSoftwarePackageDataSource() *schema.Resource {
	return &schema.Resource{
func readSingularOsManagementHubSoftwarePackage(d *schema.ResourceData, m interface{}) error {
	sync := &OsManagementHubSoftwarePackageDataSourceCrud{}
func (s *OsManagementHubSoftwarePackageDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *OsManagementHubSoftwarePackageDataSourceCrud) Get() error {
	request := oci_os_management_hub.GetSoftwarePackageByNameRequest{}
func (s *OsManagementHubSoftwarePackageDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/os_management_hub/os_management_hub_managed_instance_install_windows_updates_management_resource.go ===
func OsManagementHubManagedInstanceInstallWindowsUpdatesManagementResource() *schema.Resource {
	return &schema.Resource{
func createOsManagementHubManagedInstanceInstallWindowsUpdatesManagement(d *schema.ResourceData, m interface{}) error {
	sync := &OsManagementHubManagedInstanceInstallWindowsUpdatesManagementResourceCrud{}
func readOsManagementHubManagedInstanceInstallWindowsUpdatesManagement(d *schema.ResourceData, m interface{}) error {
	return nil
func deleteOsManagementHubManagedInstanceInstallWindowsUpdatesManagement(d *schema.ResourceData, m interface{}) error {
	return nil
func (s *OsManagementHubManagedInstanceInstallWindowsUpdatesManagementResourceCrud) ID() string {
	return *s.Res.Id
func (s *OsManagementHubManagedInstanceInstallWindowsUpdatesManagementResourceCrud) Get() error {
	request := oci_os_management_hub.GetManagedInstanceRequest{}
func (s *OsManagementHubManagedInstanceInstallWindowsUpdatesManagementResourceCrud) Create() error {
	request := oci_os_management_hub.InstallWindowsUpdatesOnManagedInstanceRequest{}
func (s *OsManagementHubManagedInstanceInstallWindowsUpdatesManagementResourceCrud) getManagedInstanceInstallWindowsUpdatesManagementFromWorkRequest(workId *string, retryPolicy *oci_common.RetryPolicy,
	actionTypeEnum oci_os_management_hub.ActionTypeEnum, timeout time.Duration) error {
func (s *OsManagementHubManagedInstanceInstallWindowsUpdatesManagementResourceCrud) SetData() error {
	return nil
func (s *OsManagementHubManagedInstanceInstallWindowsUpdatesManagementResourceCrud) mapToWorkRequestDetails(fieldKeyFormat string) (oci_os_management_hub.WorkRequestDetails, error) {
	result := oci_os_management_hub.WorkRequestDetails{}

=== ./internal/service/os_management_hub/os_management_hub_managed_instance_installed_packages_data_source.go ===
func OsManagementHubManagedInstanceInstalledPackagesDataSource() *schema.Resource {
	return &schema.Resource{
func readOsManagementHubManagedInstanceInstalledPackages(d *schema.ResourceData, m interface{}) error {
	sync := &OsManagementHubManagedInstanceInstalledPackagesDataSourceCrud{}
func (s *OsManagementHubManagedInstanceInstalledPackagesDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *OsManagementHubManagedInstanceInstalledPackagesDataSourceCrud) Get() error {
	request := oci_os_management_hub.ListManagedInstanceInstalledPackagesRequest{}
func (s *OsManagementHubManagedInstanceInstalledPackagesDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/os_management_hub/os_management_hub_managed_instance_group_data_source.go ===
func OsManagementHubManagedInstanceGroupDataSource() *schema.Resource {
	fieldMap := make(map[string]*schema.Schema)
func readSingularOsManagementHubManagedInstanceGroup(d *schema.ResourceData, m interface{}) error {
	sync := &OsManagementHubManagedInstanceGroupDataSourceCrud{}
func (s *OsManagementHubManagedInstanceGroupDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *OsManagementHubManagedInstanceGroupDataSourceCrud) Get() error {
	request := oci_os_management_hub.GetManagedInstanceGroupRequest{}
func (s *OsManagementHubManagedInstanceGroupDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/os_management_hub/os_management_hub_managed_instance_installed_windows_updates_data_source.go ===
func OsManagementHubManagedInstanceInstalledWindowsUpdatesDataSource() *schema.Resource {
	return &schema.Resource{
func readOsManagementHubManagedInstanceInstalledWindowsUpdates(d *schema.ResourceData, m interface{}) error {
	sync := &OsManagementHubManagedInstanceInstalledWindowsUpdatesDataSourceCrud{}
func (s *OsManagementHubManagedInstanceInstalledWindowsUpdatesDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *OsManagementHubManagedInstanceInstalledWindowsUpdatesDataSourceCrud) Get() error {
	request := oci_os_management_hub.ListManagedInstanceInstalledWindowsUpdatesRequest{}
func (s *OsManagementHubManagedInstanceInstalledWindowsUpdatesDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/os_management_hub/os_management_hub_management_station_mirror_synchronize_management_resource.go ===
func OsManagementHubManagementStationMirrorSynchronizeManagementResource() *schema.Resource {
	return &schema.Resource{
func createOsManagementHubManagementStationMirrorSynchronizeManagement(d *schema.ResourceData, m interface{}) error {
	sync := &OsManagementHubManagementStationMirrorSynchronizeManagementResourceCrud{}
func readOsManagementHubManagementStationMirrorSynchronizeManagement(d *schema.ResourceData, m interface{}) error {
	return nil
func deleteOsManagementHubManagementStationMirrorSynchronizeManagement(d *schema.ResourceData, m interface{}) error {
	return nil
func (s *OsManagementHubManagementStationMirrorSynchronizeManagementResourceCrud) ID() string {
	return *s.Res.Id
func (s *OsManagementHubManagementStationMirrorSynchronizeManagementResourceCrud) Get() error {
	request := oci_os_management_hub.GetManagementStationRequest{}
func (s *OsManagementHubManagementStationMirrorSynchronizeManagementResourceCrud) Create() error {
	request := oci_os_management_hub.SynchronizeSingleMirrorsRequest{}
func (s *OsManagementHubManagementStationMirrorSynchronizeManagementResourceCrud) getManagementStationMirrorSynchronizeManagementFromWorkRequest(workId *string, retryPolicy *oci_common.RetryPolicy,
	actionTypeEnum oci_os_management_hub.ActionTypeEnum, timeout time.Duration) error {
func (s *OsManagementHubManagementStationMirrorSynchronizeManagementResourceCrud) SetData() error {
	return nil

=== ./internal/service/os_management_hub/os_management_hub_managed_instance_group_install_packages_management_resource.go ===
func OsManagementHubManagedInstanceGroupInstallPackagesManagementResource() *schema.Resource {
	return &schema.Resource{
func createOsManagementHubManagedInstanceGroupInstallPackagesManagement(d *schema.ResourceData, m interface{}) error {
	sync := &OsManagementHubManagedInstanceGroupInstallPackagesManagementResourceCrud{}
func readOsManagementHubManagedInstanceGroupInstallPackagesManagement(d *schema.ResourceData, m interface{}) error {
	return nil
func deleteOsManagementHubManagedInstanceGroupInstallPackagesManagement(d *schema.ResourceData, m interface{}) error {
	return nil
func (s *OsManagementHubManagedInstanceGroupInstallPackagesManagementResourceCrud) ID() string {
	return *s.Res.Id
func (s *OsManagementHubManagedInstanceGroupInstallPackagesManagementResourceCrud) Get() error {
	request := oci_os_management_hub.GetManagedInstanceGroupRequest{}
func (s *OsManagementHubManagedInstanceGroupInstallPackagesManagementResourceCrud) Create() error {
	request := oci_os_management_hub.InstallPackagesOnManagedInstanceGroupRequest{}
func (s *OsManagementHubManagedInstanceGroupInstallPackagesManagementResourceCrud) getManagedInstanceGroupInstallPackagesManagementFromWorkRequest(workId *string, retryPolicy *oci_common.RetryPolicy,
	actionTypeEnum oci_os_management_hub.ActionTypeEnum, timeout time.Duration) error {
func (s *OsManagementHubManagedInstanceGroupInstallPackagesManagementResourceCrud) SetData() error {
	return nil
func (s *OsManagementHubManagedInstanceGroupInstallPackagesManagementResourceCrud) mapToWorkRequestDetails(fieldKeyFormat string) (oci_os_management_hub.WorkRequestDetails, error) {
	result := oci_os_management_hub.WorkRequestDetails{}

=== ./internal/service/os_management_hub/os_management_hub_erratum_data_source.go ===
func OsManagementHubErratumDataSource() *schema.Resource {
	return &schema.Resource{
func readSingularOsManagementHubErratum(d *schema.ResourceData, m interface{}) error {
	sync := &OsManagementHubErratumDataSourceCrud{}
func (s *OsManagementHubErratumDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *OsManagementHubErratumDataSourceCrud) Get() error {
	request := oci_os_management_hub.GetErratumRequest{}
func (s *OsManagementHubErratumDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/os_management_hub/os_management_hub_managed_instance_detach_profile_management_resource.go ===
func OsManagementHubManagedInstanceDetachProfileManagementResource() *schema.Resource {
	return &schema.Resource{
func createOsManagementHubManagedInstanceDetachProfileManagement(d *schema.ResourceData, m interface{}) error {
	sync := &OsManagementHubManagedInstanceDetachProfileManagementResourceCrud{}
func readOsManagementHubManagedInstanceDetachProfileManagement(d *schema.ResourceData, m interface{}) error {
	return nil
func deleteOsManagementHubManagedInstanceDetachProfileManagement(d *schema.ResourceData, m interface{}) error {
	return nil
func (s *OsManagementHubManagedInstanceDetachProfileManagementResourceCrud) ID() string {
	return *s.Res.Id
func (s *OsManagementHubManagedInstanceDetachProfileManagementResourceCrud) Get() error {
	request := oci_os_management_hub.GetManagedInstanceRequest{}
func (s *OsManagementHubManagedInstanceDetachProfileManagementResourceCrud) Create() error {
	request := oci_os_management_hub.DetachProfileFromManagedInstanceRequest{}
func (s *OsManagementHubManagedInstanceDetachProfileManagementResourceCrud) SetData() error {
	return nil

=== ./internal/service/os_management_hub/os_management_hub_managed_instance_group_available_packages_data_source.go ===
func OsManagementHubManagedInstanceGroupAvailablePackagesDataSource() *schema.Resource {
	return &schema.Resource{
func readOsManagementHubManagedInstanceGroupAvailablePackages(d *schema.ResourceData, m interface{}) error {
	sync := &OsManagementHubManagedInstanceGroupAvailablePackagesDataSourceCrud{}
func (s *OsManagementHubManagedInstanceGroupAvailablePackagesDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *OsManagementHubManagedInstanceGroupAvailablePackagesDataSourceCrud) Get() error {
	request := oci_os_management_hub.ListManagedInstanceGroupAvailablePackagesRequest{}
func (s *OsManagementHubManagedInstanceGroupAvailablePackagesDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/os_management_hub/os_management_hub_management_station_data_source.go ===
func OsManagementHubManagementStationDataSource() *schema.Resource {
	fieldMap := make(map[string]*schema.Schema)
func readSingularOsManagementHubManagementStation(d *schema.ResourceData, m interface{}) error {
	sync := &OsManagementHubManagementStationDataSourceCrud{}
func (s *OsManagementHubManagementStationDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *OsManagementHubManagementStationDataSourceCrud) Get() error {
	request := oci_os_management_hub.GetManagementStationRequest{}
func (s *OsManagementHubManagementStationDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/os_management_hub/os_management_hub_managed_instance_resource.go ===
func OsManagementHubManagedInstanceResource() *schema.Resource {
	return &schema.Resource{
func createOsManagementHubManagedInstance(d *schema.ResourceData, m interface{}) error {
	sync := &OsManagementHubManagedInstanceResourceCrud{}
func readOsManagementHubManagedInstance(d *schema.ResourceData, m interface{}) error {
	sync := &OsManagementHubManagedInstanceResourceCrud{}
func updateOsManagementHubManagedInstance(d *schema.ResourceData, m interface{}) error {
	sync := &OsManagementHubManagedInstanceResourceCrud{}
func deleteOsManagementHubManagedInstance(d *schema.ResourceData, m interface{}) error {
	//sync := &OsManagementHubManagedInstanceResourceCrud{}
func (s *OsManagementHubManagedInstanceResourceCrud) ID() string {
	return *s.Res.Id
func (s *OsManagementHubManagedInstanceResourceCrud) Create() error {
	request := oci_os_management_hub.UpdateManagedInstanceRequest{}
func (s *OsManagementHubManagedInstanceResourceCrud) getManagedInstanceFromWorkRequest(workId *string, retryPolicy *oci_common.RetryPolicy,
	actionTypeEnum oci_os_management_hub.ActionTypeEnum, timeout time.Duration) error {
func (s *OsManagementHubManagedInstanceResourceCrud) Get() error {
	request := oci_os_management_hub.GetManagedInstanceRequest{}
func (s *OsManagementHubManagedInstanceResourceCrud) Update() error {
	request := oci_os_management_hub.UpdateManagedInstanceRequest{}
func (s *OsManagementHubManagedInstanceResourceCrud) Delete() error {
	//request := oci_os_management_hub.DeleteManagedInstanceRequest{}
func (s *OsManagementHubManagedInstanceResourceCrud) SetData() error {
	s.D.Set("architecture", s.Res.Architecture)
func (s *OsManagementHubManagedInstanceResourceCrud) mapToUpdatableAutonomousSettings(fieldKeyFormat string) (oci_os_management_hub.UpdatableAutonomousSettings, error) {
	result := oci_os_management_hub.UpdatableAutonomousSettings{}

=== ./internal/service/os_management_hub/os_management_hub_software_source_package_group_data_source.go ===
func OsManagementHubSoftwareSourcePackageGroupDataSource() *schema.Resource {
	return &schema.Resource{
func readSingularOsManagementHubSoftwareSourcePackageGroup(d *schema.ResourceData, m interface{}) error {
	sync := &OsManagementHubSoftwareSourcePackageGroupDataSourceCrud{}
func (s *OsManagementHubSoftwareSourcePackageGroupDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *OsManagementHubSoftwareSourcePackageGroupDataSourceCrud) Get() error {
	request := oci_os_management_hub.GetPackageGroupRequest{}
func (s *OsManagementHubSoftwareSourcePackageGroupDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/os_management_hub/os_management_hub_managed_instance_group_manage_module_streams_management_resource.go ===
func OsManagementHubManagedInstanceGroupManageModuleStreamsManagementResource() *schema.Resource {
	return &schema.Resource{
func createOsManagementHubManagedInstanceGroupManageModuleStreamsManagement(d *schema.ResourceData, m interface{}) error {
	sync := &OsManagementHubManagedInstanceGroupManageModuleStreamsManagementResourceCrud{}
func readOsManagementHubManagedInstanceGroupManageModuleStreamsManagement(d *schema.ResourceData, m interface{}) error {
	return nil
func deleteOsManagementHubManagedInstanceGroupManageModuleStreamsManagement(d *schema.ResourceData, m interface{}) error {
	return nil
func (s *OsManagementHubManagedInstanceGroupManageModuleStreamsManagementResourceCrud) ID() string {
	return *s.Res.Id
func (s *OsManagementHubManagedInstanceGroupManageModuleStreamsManagementResourceCrud) Get() error {
	request := oci_os_management_hub.GetManagedInstanceGroupRequest{}
func (s *OsManagementHubManagedInstanceGroupManageModuleStreamsManagementResourceCrud) Create() error {
	request := oci_os_management_hub.ManageModuleStreamsOnManagedInstanceGroupRequest{}
func (s *OsManagementHubManagedInstanceGroupManageModuleStreamsManagementResourceCrud) getManagedInstanceGroupManageModuleStreamsManagementFromWorkRequest(workId *string, retryPolicy *oci_common.RetryPolicy,
	actionTypeEnum oci_os_management_hub.ActionTypeEnum, timeout time.Duration) error {
func (s *OsManagementHubManagedInstanceGroupManageModuleStreamsManagementResourceCrud) SetData() error {
	return nil
func (s *OsManagementHubManagedInstanceGroupManageModuleStreamsManagementResourceCrud) mapToModuleStreamDetails(fieldKeyFormat string) (oci_os_management_hub.ModuleStreamDetails, error) {
	result := oci_os_management_hub.ModuleStreamDetails{}
func (s *OsManagementHubManagedInstanceGroupManageModuleStreamsManagementResourceCrud) mapToModuleStreamProfileDetails(fieldKeyFormat string) (oci_os_management_hub.ModuleStreamProfileDetails, error) {
	result := oci_os_management_hub.ModuleStreamProfileDetails{}
func (s *OsManagementHubManagedInstanceGroupManageModuleStreamsManagementResourceCrud) mapToWorkRequestDetails(fieldKeyFormat string) (oci_os_management_hub.WorkRequestDetails, error) {
	result := oci_os_management_hub.WorkRequestDetails{}

=== ./internal/service/os_management_hub/os_management_hub_lifecycle_stage_promote_software_source_management_resource.go ===
func OsManagementHubLifecycleStagePromoteSoftwareSourceManagementResource() *schema.Resource {
	return &schema.Resource{
func createOsManagementHubLifecycleStagePromoteSoftwareSourceManagement(d *schema.ResourceData, m interface{}) error {
	sync := &OsManagementHubLifecycleStagePromoteSoftwareSourceManagementResourceCrud{}
func readOsManagementHubLifecycleStagePromoteSoftwareSourceManagement(d *schema.ResourceData, m interface{}) error {
	return nil
func deleteOsManagementHubLifecycleStagePromoteSoftwareSourceManagement(d *schema.ResourceData, m interface{}) error {
	return nil
func (s *OsManagementHubLifecycleStagePromoteSoftwareSourceManagementResourceCrud) ID() string {
	return *s.Res.Id
func (s *OsManagementHubLifecycleStagePromoteSoftwareSourceManagementResourceCrud) Get() error {
	request := oci_os_management_hub.GetLifecycleStageRequest{}
func (s *OsManagementHubLifecycleStagePromoteSoftwareSourceManagementResourceCrud) Create() error {
	request := oci_os_management_hub.PromoteSoftwareSourceToLifecycleStageRequest{}
func (s *OsManagementHubLifecycleStagePromoteSoftwareSourceManagementResourceCrud) getLifecycleStagePromoteSoftwareSourceManagementFromWorkRequest(workId *string, retryPolicy *oci_common.RetryPolicy,
	actionTypeEnum oci_os_management_hub.ActionTypeEnum, timeout time.Duration) error {
func (s *OsManagementHubLifecycleStagePromoteSoftwareSourceManagementResourceCrud) SetData() error {
	return nil
func (s *OsManagementHubLifecycleStagePromoteSoftwareSourceManagementResourceCrud) mapToWorkRequestDetails(fieldKeyFormat string) (oci_os_management_hub.WorkRequestDetails, error) {
	result := oci_os_management_hub.WorkRequestDetails{}

=== ./internal/service/os_management_hub/os_management_hub_managed_instance_group_installed_packages_data_source.go ===
func OsManagementHubManagedInstanceGroupInstalledPackagesDataSource() *schema.Resource {
	return &schema.Resource{
func readOsManagementHubManagedInstanceGroupInstalledPackages(d *schema.ResourceData, m interface{}) error {
	sync := &OsManagementHubManagedInstanceGroupInstalledPackagesDataSourceCrud{}
func (s *OsManagementHubManagedInstanceGroupInstalledPackagesDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *OsManagementHubManagedInstanceGroupInstalledPackagesDataSourceCrud) Get() error {
	request := oci_os_management_hub.ListManagedInstanceGroupInstalledPackagesRequest{}
func (s *OsManagementHubManagedInstanceGroupInstalledPackagesDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/os_management_hub/os_management_hub_lifecycle_stages_data_source.go ===
func OsManagementHubLifecycleStagesDataSource() *schema.Resource {
	return &schema.Resource{
func readOsManagementHubLifecycleStages(d *schema.ResourceData, m interface{}) error {
	sync := &OsManagementHubLifecycleStagesDataSourceCrud{}
func (s *OsManagementHubLifecycleStagesDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *OsManagementHubLifecycleStagesDataSourceCrud) Get() error {
	request := oci_os_management_hub.ListLifecycleStagesRequest{}
func (s *OsManagementHubLifecycleStagesDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/os_management_hub/os_management_hub_managed_instance_group_detach_software_sources_management_resource.go ===
func OsManagementHubManagedInstanceGroupDetachSoftwareSourcesManagementResource() *schema.Resource {
	return &schema.Resource{
func createOsManagementHubManagedInstanceGroupDetachSoftwareSourcesManagement(d *schema.ResourceData, m interface{}) error {
	sync := &OsManagementHubManagedInstanceGroupDetachSoftwareSourcesManagementResourceCrud{}
func readOsManagementHubManagedInstanceGroupDetachSoftwareSourcesManagement(d *schema.ResourceData, m interface{}) error {
	return nil
func deleteOsManagementHubManagedInstanceGroupDetachSoftwareSourcesManagement(d *schema.ResourceData, m interface{}) error {
	return nil
func (s *OsManagementHubManagedInstanceGroupDetachSoftwareSourcesManagementResourceCrud) ID() string {
	return *s.Res.Id
func (s *OsManagementHubManagedInstanceGroupDetachSoftwareSourcesManagementResourceCrud) Get() error {
	request := oci_os_management_hub.GetManagedInstanceGroupRequest{}
func (s *OsManagementHubManagedInstanceGroupDetachSoftwareSourcesManagementResourceCrud) Create() error {
	request := oci_os_management_hub.DetachSoftwareSourcesFromManagedInstanceGroupRequest{}
func (s *OsManagementHubManagedInstanceGroupDetachSoftwareSourcesManagementResourceCrud) SetData() error {
	return nil
func (s *OsManagementHubManagedInstanceGroupDetachSoftwareSourcesManagementResourceCrud) mapToWorkRequestDetails(fieldKeyFormat string) (oci_os_management_hub.WorkRequestDetails, error) {
	result := oci_os_management_hub.WorkRequestDetails{}

=== ./internal/service/os_management_hub/os_management_hub_software_source_software_packages_data_source.go ===
func OsManagementHubSoftwareSourceSoftwarePackagesDataSource() *schema.Resource {
	return &schema.Resource{
func readOsManagementHubSoftwareSourceSoftwarePackages(d *schema.ResourceData, m interface{}) error {
	sync := &OsManagementHubSoftwareSourceSoftwarePackagesDataSourceCrud{}
func (s *OsManagementHubSoftwareSourceSoftwarePackagesDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *OsManagementHubSoftwareSourceSoftwarePackagesDataSourceCrud) Get() error {
	request := oci_os_management_hub.ListSoftwarePackagesRequest{}
func (s *OsManagementHubSoftwareSourceSoftwarePackagesDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/os_management_hub/os_management_hub_management_station_refresh_management_resource.go ===
func OsManagementHubManagementStationRefreshManagementResource() *schema.Resource {
	return &schema.Resource{
func createOsManagementHubManagementStationRefreshManagement(d *schema.ResourceData, m interface{}) error {
	sync := &OsManagementHubManagementStationRefreshManagementResourceCrud{}
func readOsManagementHubManagementStationRefreshManagement(d *schema.ResourceData, m interface{}) error {
	return nil
func deleteOsManagementHubManagementStationRefreshManagement(d *schema.ResourceData, m interface{}) error {
	return nil
func (s *OsManagementHubManagementStationRefreshManagementResourceCrud) ID() string {
	return *s.Res.Id
func (s *OsManagementHubManagementStationRefreshManagementResourceCrud) Get() error {
	request := oci_os_management_hub.GetManagementStationRequest{}
func (s *OsManagementHubManagementStationRefreshManagementResourceCrud) Create() error {
	request := oci_os_management_hub.RefreshManagementStationConfigRequest{}
func (s *OsManagementHubManagementStationRefreshManagementResourceCrud) getManagementStationRefreshManagementFromWorkRequest(workId *string, retryPolicy *oci_common.RetryPolicy,
	actionTypeEnum oci_os_management_hub.ActionTypeEnum, timeout time.Duration) error {
func (s *OsManagementHubManagementStationRefreshManagementResourceCrud) SetData() error {
	return nil

=== ./internal/service/os_management_hub/os_management_hub_software_package_software_source_data_source.go ===
func OsManagementHubSoftwarePackageSoftwareSourceDataSource() *schema.Resource {
	return &schema.Resource{
func readOsManagementHubSoftwarePackageSoftwareSource(d *schema.ResourceData, m interface{}) error {
	sync := &OsManagementHubSoftwarePackageSoftwareSourceDataSourceCrud{}
func (s *OsManagementHubSoftwarePackageSoftwareSourceDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *OsManagementHubSoftwarePackageSoftwareSourceDataSourceCrud) Get() error {
	request := oci_os_management_hub.ListSoftwarePackageSoftwareSourcesRequest{}
func (s *OsManagementHubSoftwarePackageSoftwareSourceDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/os_management_hub/os_management_hub_lifecycle_stage_data_source.go ===
func OsManagementHubLifecycleStageDataSource() *schema.Resource {
	return &schema.Resource{
func readSingularOsManagementHubLifecycleStage(d *schema.ResourceData, m interface{}) error {
	sync := &OsManagementHubLifecycleStageDataSourceCrud{}
func (s *OsManagementHubLifecycleStageDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *OsManagementHubLifecycleStageDataSourceCrud) Get() error {
	request := oci_os_management_hub.GetLifecycleStageRequest{}
func (s *OsManagementHubLifecycleStageDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/os_management_hub/os_management_hub_software_source_module_streams_data_source.go ===
func OsManagementHubSoftwareSourceModuleStreamsDataSource() *schema.Resource {
	return &schema.Resource{
func readOsManagementHubSoftwareSourceModuleStreams(d *schema.ResourceData, m interface{}) error {
	sync := &OsManagementHubSoftwareSourceModuleStreamsDataSourceCrud{}
func (s *OsManagementHubSoftwareSourceModuleStreamsDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *OsManagementHubSoftwareSourceModuleStreamsDataSourceCrud) Get() error {
	request := oci_os_management_hub.ListModuleStreamsRequest{}
func (s *OsManagementHubSoftwareSourceModuleStreamsDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/os_management_hub/os_management_hub_software_source_module_stream_profiles_data_source.go ===
func OsManagementHubSoftwareSourceModuleStreamProfilesDataSource() *schema.Resource {
	return &schema.Resource{
func readOsManagementHubSoftwareSourceModuleStreamProfiles(d *schema.ResourceData, m interface{}) error {
	sync := &OsManagementHubSoftwareSourceModuleStreamProfilesDataSourceCrud{}
func (s *OsManagementHubSoftwareSourceModuleStreamProfilesDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *OsManagementHubSoftwareSourceModuleStreamProfilesDataSourceCrud) Get() error {
	request := oci_os_management_hub.ListModuleStreamProfilesRequest{}
func (s *OsManagementHubSoftwareSourceModuleStreamProfilesDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/os_management_hub/os_management_hub_managed_instance_available_packages_data_source.go ===
func OsManagementHubManagedInstanceAvailablePackagesDataSource() *schema.Resource {
	return &schema.Resource{
func readOsManagementHubManagedInstanceAvailablePackages(d *schema.ResourceData, m interface{}) error {
	sync := &OsManagementHubManagedInstanceAvailablePackagesDataSourceCrud{}
func (s *OsManagementHubManagedInstanceAvailablePackagesDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *OsManagementHubManagedInstanceAvailablePackagesDataSourceCrud) Get() error {
	request := oci_os_management_hub.ListManagedInstanceAvailablePackagesRequest{}
func (s *OsManagementHubManagedInstanceAvailablePackagesDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/os_management_hub/os_management_hub_events_data_source.go ===
func OsManagementHubEventsDataSource() *schema.Resource {
	return &schema.Resource{
func readOsManagementHubEvents(d *schema.ResourceData, m interface{}) error {
	sync := &OsManagementHubEventsDataSourceCrud{}
func (s *OsManagementHubEventsDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *OsManagementHubEventsDataSourceCrud) Get() error {
	request := oci_os_management_hub.ListEventsRequest{}
func (s *OsManagementHubEventsDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/os_management_hub/os_management_hub_scheduled_jobs_data_source.go ===
func OsManagementHubScheduledJobsDataSource() *schema.Resource {
	return &schema.Resource{
func readOsManagementHubScheduledJobs(d *schema.ResourceData, m interface{}) error {
	sync := &OsManagementHubScheduledJobsDataSourceCrud{}
func (s *OsManagementHubScheduledJobsDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *OsManagementHubScheduledJobsDataSourceCrud) Get() error {
	request := oci_os_management_hub.ListScheduledJobsRequest{}
func (s *OsManagementHubScheduledJobsDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/os_management_hub/os_management_hub_managed_instance_group_attach_software_sources_management_resource.go ===
func OsManagementHubManagedInstanceGroupAttachSoftwareSourcesManagementResource() *schema.Resource {
	return &schema.Resource{
func createOsManagementHubManagedInstanceGroupAttachSoftwareSourcesManagement(d *schema.ResourceData, m interface{}) error {
	sync := &OsManagementHubManagedInstanceGroupAttachSoftwareSourcesManagementResourceCrud{}
func readOsManagementHubManagedInstanceGroupAttachSoftwareSourcesManagement(d *schema.ResourceData, m interface{}) error {
	return nil
func deleteOsManagementHubManagedInstanceGroupAttachSoftwareSourcesManagement(d *schema.ResourceData, m interface{}) error {
	return nil
func (s *OsManagementHubManagedInstanceGroupAttachSoftwareSourcesManagementResourceCrud) ID() string {
	return *s.Res.Id
func (s *OsManagementHubManagedInstanceGroupAttachSoftwareSourcesManagementResourceCrud) Get() error {
	request := oci_os_management_hub.GetManagedInstanceGroupRequest{}
func (s *OsManagementHubManagedInstanceGroupAttachSoftwareSourcesManagementResourceCrud) Create() error {
	request := oci_os_management_hub.AttachSoftwareSourcesToManagedInstanceGroupRequest{}
func (s *OsManagementHubManagedInstanceGroupAttachSoftwareSourcesManagementResourceCrud) getManagedInstanceGroupAttachSoftwareSourcesManagementFromWorkRequest(workId *string, retryPolicy *oci_common.RetryPolicy,
	actionTypeEnum oci_os_management_hub.ActionTypeEnum, timeout time.Duration) error {
func (s *OsManagementHubManagedInstanceGroupAttachSoftwareSourcesManagementResourceCrud) SetData() error {
	return nil
func (s *OsManagementHubManagedInstanceGroupAttachSoftwareSourcesManagementResourceCrud) mapToWorkRequestDetails(fieldKeyFormat string) (oci_os_management_hub.WorkRequestDetails, error) {
	result := oci_os_management_hub.WorkRequestDetails{}

=== ./internal/service/os_management_hub/os_management_hub_lifecycle_stage_attach_managed_instances_management_resource.go ===
func OsManagementHubLifecycleStageAttachManagedInstancesManagementResource() *schema.Resource {
	return &schema.Resource{
func createOsManagementHubLifecycleStageAttachManagedInstancesManagement(d *schema.ResourceData, m interface{}) error {
	sync := &OsManagementHubLifecycleStageAttachManagedInstancesManagementResourceCrud{}
func readOsManagementHubLifecycleStageAttachManagedInstancesManagement(d *schema.ResourceData, m interface{}) error {
	return nil
func deleteOsManagementHubLifecycleStageAttachManagedInstancesManagement(d *schema.ResourceData, m interface{}) error {
	return nil
func (s *OsManagementHubLifecycleStageAttachManagedInstancesManagementResourceCrud) ID() string {
	return *s.Res.Id
func (s *OsManagementHubLifecycleStageAttachManagedInstancesManagementResourceCrud) Get() error {
	request := oci_os_management_hub.GetLifecycleStageRequest{}
func (s *OsManagementHubLifecycleStageAttachManagedInstancesManagementResourceCrud) Create() error {
	request := oci_os_management_hub.AttachManagedInstancesToLifecycleStageRequest{}
func (s *OsManagementHubLifecycleStageAttachManagedInstancesManagementResourceCrud) getLifecycleStageAttachManagedInstancesManagementFromWorkRequest(workId *string, retryPolicy *oci_common.RetryPolicy,
	actionTypeEnum oci_os_management_hub.ActionTypeEnum, timeout time.Duration) error {
func (s *OsManagementHubLifecycleStageAttachManagedInstancesManagementResourceCrud) SetData() error {
	return nil
func (s *OsManagementHubLifecycleStageAttachManagedInstancesManagementResourceCrud) mapToManagedInstancesDetails(fieldKeyFormat string) (oci_os_management_hub.ManagedInstancesDetails, error) {
	result := oci_os_management_hub.ManagedInstancesDetails{}
func (s *OsManagementHubLifecycleStageAttachManagedInstancesManagementResourceCrud) mapToWorkRequestDetails(fieldKeyFormat string) (oci_os_management_hub.WorkRequestDetails, error) {
	result := oci_os_management_hub.WorkRequestDetails{}

=== ./internal/service/os_management_hub/os_management_hub_software_source_change_availability_management_resource.go ===
func OsManagementHubSoftwareSourceChangeAvailabilityManagementResource() *schema.Resource {
	return &schema.Resource{
func createOsManagementHubSoftwareSourceChangeAvailabilityManagement(d *schema.ResourceData, m interface{}) error {
	sync := &OsManagementHubSoftwareSourceChangeAvailabilityManagementResourceCrud{}
func readOsManagementHubSoftwareSourceChangeAvailabilityManagement(d *schema.ResourceData, m interface{}) error {
	return nil
func deleteOsManagementHubSoftwareSourceChangeAvailabilityManagement(d *schema.ResourceData, m interface{}) error {
	return nil
func (s *OsManagementHubSoftwareSourceChangeAvailabilityManagementResourceCrud) ID() string {
	return tfresource.GenerateDataSourceHashID("OsManagementHubSoftwareSourceChangeAvailabilityManagementResource-", OsManagementHubSoftwareSourceChangeAvailabilityManagementResource(), s.D)
func (s *OsManagementHubSoftwareSourceChangeAvailabilityManagementResourceCrud) Create() error {
	request := oci_os_management_hub.ChangeAvailabilityOfSoftwareSourcesRequest{}
func (s *OsManagementHubSoftwareSourceChangeAvailabilityManagementResourceCrud) SetData() error {
	return nil
func (s *OsManagementHubSoftwareSourceChangeAvailabilityManagementResourceCrud) mapToSoftwareSourceAvailability(fieldKeyFormat string) (oci_os_management_hub.SoftwareSourceAvailability, error) {
	result := oci_os_management_hub.SoftwareSourceAvailability{}

=== ./internal/service/os_management_hub/os_management_hub_lifecycle_environments_data_source.go ===
func OsManagementHubLifecycleEnvironmentsDataSource() *schema.Resource {
	return &schema.Resource{
func readOsManagementHubLifecycleEnvironments(d *schema.ResourceData, m interface{}) error {
	sync := &OsManagementHubLifecycleEnvironmentsDataSourceCrud{}
func (s *OsManagementHubLifecycleEnvironmentsDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *OsManagementHubLifecycleEnvironmentsDataSourceCrud) Get() error {
	request := oci_os_management_hub.ListLifecycleEnvironmentsRequest{}
func (s *OsManagementHubLifecycleEnvironmentsDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/os_management_hub/os_management_hub_managed_instance_available_software_sources_data_source.go ===
func OsManagementHubManagedInstanceAvailableSoftwareSourcesDataSource() *schema.Resource {
	return &schema.Resource{
func readOsManagementHubManagedInstanceAvailableSoftwareSources(d *schema.ResourceData, m interface{}) error {
	sync := &OsManagementHubManagedInstanceAvailableSoftwareSourcesDataSourceCrud{}
func (s *OsManagementHubManagedInstanceAvailableSoftwareSourcesDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *OsManagementHubManagedInstanceAvailableSoftwareSourcesDataSourceCrud) Get() error {
	request := oci_os_management_hub.ListManagedInstanceAvailableSoftwareSourcesRequest{}
func (s *OsManagementHubManagedInstanceAvailableSoftwareSourcesDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/os_management_hub/os_management_hub_managed_instance_group_attach_managed_instances_management_resource.go ===
func OsManagementHubManagedInstanceGroupAttachManagedInstancesManagementResource() *schema.Resource {
	return &schema.Resource{
func createOsManagementHubManagedInstanceGroupAttachManagedInstancesManagement(d *schema.ResourceData, m interface{}) error {
	sync := &OsManagementHubManagedInstanceGroupAttachManagedInstancesManagementResourceCrud{}
func readOsManagementHubManagedInstanceGroupAttachManagedInstancesManagement(d *schema.ResourceData, m interface{}) error {
	return nil
func deleteOsManagementHubManagedInstanceGroupAttachManagedInstancesManagement(d *schema.ResourceData, m interface{}) error {
	return nil
func (s *OsManagementHubManagedInstanceGroupAttachManagedInstancesManagementResourceCrud) ID() string {
	return *s.Res.Id
func (s *OsManagementHubManagedInstanceGroupAttachManagedInstancesManagementResourceCrud) Get() error {
	request := oci_os_management_hub.GetManagedInstanceGroupRequest{}
func (s *OsManagementHubManagedInstanceGroupAttachManagedInstancesManagementResourceCrud) Create() error {
	request := oci_os_management_hub.AttachManagedInstancesToManagedInstanceGroupRequest{}
func (s *OsManagementHubManagedInstanceGroupAttachManagedInstancesManagementResourceCrud) getManagedInstanceGroupAttachManagedInstancesManagementFromWorkRequest(workId *string, retryPolicy *oci_common.RetryPolicy,
	actionTypeEnum oci_os_management_hub.ActionTypeEnum, timeout time.Duration) error {
func (s *OsManagementHubManagedInstanceGroupAttachManagedInstancesManagementResourceCrud) SetData() error {
	return nil
func (s *OsManagementHubManagedInstanceGroupAttachManagedInstancesManagementResourceCrud) mapToWorkRequestDetails(fieldKeyFormat string) (oci_os_management_hub.WorkRequestDetails, error) {
	result := oci_os_management_hub.WorkRequestDetails{}

=== ./internal/service/os_management_hub/os_management_hub_managed_instance_group_remove_packages_management_resource.go ===
func OsManagementHubManagedInstanceGroupRemovePackagesManagementResource() *schema.Resource {
	return &schema.Resource{
func createOsManagementHubManagedInstanceGroupRemovePackagesManagement(d *schema.ResourceData, m interface{}) error {
	sync := &OsManagementHubManagedInstanceGroupRemovePackagesManagementResourceCrud{}
func readOsManagementHubManagedInstanceGroupRemovePackagesManagement(d *schema.ResourceData, m interface{}) error {
	return nil
func deleteOsManagementHubManagedInstanceGroupRemovePackagesManagement(d *schema.ResourceData, m interface{}) error {
	return nil
func (s *OsManagementHubManagedInstanceGroupRemovePackagesManagementResourceCrud) ID() string {
	return *s.Res.Id
func (s *OsManagementHubManagedInstanceGroupRemovePackagesManagementResourceCrud) Get() error {
	request := oci_os_management_hub.GetManagedInstanceGroupRequest{}
func (s *OsManagementHubManagedInstanceGroupRemovePackagesManagementResourceCrud) Create() error {
	request := oci_os_management_hub.RemovePackagesFromManagedInstanceGroupRequest{}
func (s *OsManagementHubManagedInstanceGroupRemovePackagesManagementResourceCrud) getManagedInstanceGroupRemovePackagesManagementFromWorkRequest(workId *string, retryPolicy *oci_common.RetryPolicy,
	actionTypeEnum oci_os_management_hub.ActionTypeEnum, timeout time.Duration) error {
func (s *OsManagementHubManagedInstanceGroupRemovePackagesManagementResourceCrud) SetData() error {
	return nil
func (s *OsManagementHubManagedInstanceGroupRemovePackagesManagementResourceCrud) mapToWorkRequestDetails(fieldKeyFormat string) (oci_os_management_hub.WorkRequestDetails, error) {
	result := oci_os_management_hub.WorkRequestDetails{}

=== ./internal/service/os_management_hub/os_management_hub_lifecycle_environment_data_source.go ===
func OsManagementHubLifecycleEnvironmentDataSource() *schema.Resource {
	fieldMap := make(map[string]*schema.Schema)
func readSingularOsManagementHubLifecycleEnvironment(d *schema.ResourceData, m interface{}) error {
	sync := &OsManagementHubLifecycleEnvironmentDataSourceCrud{}
func (s *OsManagementHubLifecycleEnvironmentDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *OsManagementHubLifecycleEnvironmentDataSourceCrud) Get() error {
	request := oci_os_management_hub.GetLifecycleEnvironmentRequest{}
func (s *OsManagementHubLifecycleEnvironmentDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/os_management_hub/os_management_hub_managed_instance_data_source.go ===
func OsManagementHubManagedInstanceDataSource() *schema.Resource {
	fieldMap := make(map[string]*schema.Schema)
func readSingularOsManagementHubManagedInstance(d *schema.ResourceData, m interface{}) error {
	sync := &OsManagementHubManagedInstanceDataSourceCrud{}
func (s *OsManagementHubManagedInstanceDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *OsManagementHubManagedInstanceDataSourceCrud) Get() error {
	request := oci_os_management_hub.GetManagedInstanceRequest{}
func (s *OsManagementHubManagedInstanceDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/os_management_hub/os_management_hub_managed_instance_attach_profile_management_resource.go ===
func OsManagementHubManagedInstanceAttachProfileManagementResource() *schema.Resource {
	return &schema.Resource{
func createOsManagementHubManagedInstanceAttachProfileManagement(d *schema.ResourceData, m interface{}) error {
	sync := &OsManagementHubManagedInstanceAttachProfileManagementResourceCrud{}
func readOsManagementHubManagedInstanceAttachProfileManagement(d *schema.ResourceData, m interface{}) error {
	return nil
func deleteOsManagementHubManagedInstanceAttachProfileManagement(d *schema.ResourceData, m interface{}) error {
	return nil
func (s *OsManagementHubManagedInstanceAttachProfileManagementResourceCrud) ID() string {
	return *s.Res.Id
func (s *OsManagementHubManagedInstanceAttachProfileManagementResourceCrud) Get() error {
	request := oci_os_management_hub.GetManagedInstanceRequest{}
func (s *OsManagementHubManagedInstanceAttachProfileManagementResourceCrud) Create() error {
	request := oci_os_management_hub.AttachProfileToManagedInstanceRequest{}
func (s *OsManagementHubManagedInstanceAttachProfileManagementResourceCrud) SetData() error {
	return nil

=== ./internal/service/os_management_hub/os_management_hub_management_station_synchronize_mirrors_management_resource.go ===
func OsManagementHubManagementStationSynchronizeMirrorsManagementResource() *schema.Resource {
	return &schema.Resource{
func createOsManagementHubManagementStationSynchronizeMirrorsManagement(d *schema.ResourceData, m interface{}) error {
	sync := &OsManagementHubManagementStationSynchronizeMirrorsManagementResourceCrud{}
func readOsManagementHubManagementStationSynchronizeMirrorsManagement(d *schema.ResourceData, m interface{}) error {
	return nil
func deleteOsManagementHubManagementStationSynchronizeMirrorsManagement(d *schema.ResourceData, m interface{}) error {
	return nil
func (s *OsManagementHubManagementStationSynchronizeMirrorsManagementResourceCrud) ID() string {
	return *s.Res.Id
func (s *OsManagementHubManagementStationSynchronizeMirrorsManagementResourceCrud) Get() error {
	request := oci_os_management_hub.GetManagementStationRequest{}
func (s *OsManagementHubManagementStationSynchronizeMirrorsManagementResourceCrud) Create() error {
	request := oci_os_management_hub.SynchronizeMirrorsRequest{}
func (s *OsManagementHubManagementStationSynchronizeMirrorsManagementResourceCrud) getManagementStationSynchronizeMirrorsManagementFromWorkRequest(workId *string, retryPolicy *oci_common.RetryPolicy,
	actionTypeEnum oci_os_management_hub.ActionTypeEnum, timeout time.Duration) error {
func (s *OsManagementHubManagementStationSynchronizeMirrorsManagementResourceCrud) SetData() error {
	return nil

=== ./internal/service/os_management_hub/register_resource.go ===
func RegisterResource() {
	tfresource.RegisterResource("oci_os_management_hub_event", OsManagementHubEventResource())

=== ./internal/service/os_management_hub/os_management_hub_management_stations_data_source.go ===
func OsManagementHubManagementStationsDataSource() *schema.Resource {
	return &schema.Resource{
func readOsManagementHubManagementStations(d *schema.ResourceData, m interface{}) error {
	sync := &OsManagementHubManagementStationsDataSourceCrud{}
func (s *OsManagementHubManagementStationsDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *OsManagementHubManagementStationsDataSourceCrud) Get() error {
	request := oci_os_management_hub.ListManagementStationsRequest{}
func (s *OsManagementHubManagementStationsDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/os_management_hub/os_management_hub_software_source_module_stream_data_source.go ===
func OsManagementHubSoftwareSourceModuleStreamDataSource() *schema.Resource {
	return &schema.Resource{
func readSingularOsManagementHubSoftwareSourceModuleStream(d *schema.ResourceData, m interface{}) error {
	sync := &OsManagementHubSoftwareSourceModuleStreamDataSourceCrud{}
func (s *OsManagementHubSoftwareSourceModuleStreamDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *OsManagementHubSoftwareSourceModuleStreamDataSourceCrud) Get() error {
	request := oci_os_management_hub.GetModuleStreamRequest{}
func (s *OsManagementHubSoftwareSourceModuleStreamDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/os_management_hub/os_management_hub_event_data_source.go ===
func OsManagementHubEventDataSource() *schema.Resource {
	fieldMap := make(map[string]*schema.Schema)
func readSingularOsManagementHubEvent(d *schema.ResourceData, m interface{}) error {
	sync := &OsManagementHubEventDataSourceCrud{}
func (s *OsManagementHubEventDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *OsManagementHubEventDataSourceCrud) Get() error {
	request := oci_os_management_hub.GetEventRequest{}
func (s *OsManagementHubEventDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/os_management_hub/os_management_hub_software_source_add_packages_management_resource.go ===
func OsManagementHubSoftwareSourceAddPackagesManagementResource() *schema.Resource {
	return &schema.Resource{
func createOsManagementHubSoftwareSourceAddPackagesManagement(d *schema.ResourceData, m interface{}) error {
	sync := &OsManagementHubSoftwareSourceAddPackagesManagementResourceCrud{}
func readOsManagementHubSoftwareSourceAddPackagesManagement(d *schema.ResourceData, m interface{}) error {
	return nil
func deleteOsManagementHubSoftwareSourceAddPackagesManagement(d *schema.ResourceData, m interface{}) error {
	return nil
func (s *OsManagementHubSoftwareSourceAddPackagesManagementResourceCrud) ID() string {
	return tfresource.GenerateDataSourceHashID("OsManagementHubSoftwareSourceAddPackagesManagementResource-", OsManagementHubSoftwareSourceAddPackagesManagementResource(), s.D)
func (s *OsManagementHubSoftwareSourceAddPackagesManagementResourceCrud) Get() error {
	request := oci_os_management_hub.GetSoftwareSourceRequest{}
func (s *OsManagementHubSoftwareSourceAddPackagesManagementResourceCrud) Create() error {
	request := oci_os_management_hub.AddPackagesToSoftwareSourceRequest{}
func (s *OsManagementHubSoftwareSourceAddPackagesManagementResourceCrud) getSoftwareSourceAddPackagesManagementFromWorkRequest(workId *string, retryPolicy *oci_common.RetryPolicy,
	actionTypeEnum oci_os_management_hub.ActionTypeEnum, timeout time.Duration) error {
func (s *OsManagementHubSoftwareSourceAddPackagesManagementResourceCrud) SetData() error {
	return nil

=== ./internal/service/stack_monitoring/stack_monitoring_maintenance_window_resource.go ===
func StackMonitoringMaintenanceWindowResource() *schema.Resource {
	return &schema.Resource{
func StackMonitoringMaintenanceWindowSummaryResponse() *schema.Resource {
	return &schema.Resource{
func createStackMonitoringMaintenanceWindow(d *schema.ResourceData, m interface{}) error {
	sync := &StackMonitoringMaintenanceWindowResourceCrud{}
func readStackMonitoringMaintenanceWindow(d *schema.ResourceData, m interface{}) error {
	sync := &StackMonitoringMaintenanceWindowResourceCrud{}
func updateStackMonitoringMaintenanceWindow(d *schema.ResourceData, m interface{}) error {
	sync := &StackMonitoringMaintenanceWindowResourceCrud{}
func deleteStackMonitoringMaintenanceWindow(d *schema.ResourceData, m interface{}) error {
	sync := &StackMonitoringMaintenanceWindowResourceCrud{}
func (s *StackMonitoringMaintenanceWindowResourceCrud) ID() string {
	return *s.Res.Id
func (s *StackMonitoringMaintenanceWindowResourceCrud) CreatedPending() []string {
	return []string{
func (s *StackMonitoringMaintenanceWindowResourceCrud) CreatedTarget() []string {
	return []string{
func (s *StackMonitoringMaintenanceWindowResourceCrud) DeletedPending() []string {
	return []string{
func (s *StackMonitoringMaintenanceWindowResourceCrud) DeletedTarget() []string {
	return []string{
func (s *StackMonitoringMaintenanceWindowResourceCrud) Create() error {
	request := oci_stack_monitoring.CreateMaintenanceWindowRequest{}
func (s *StackMonitoringMaintenanceWindowResourceCrud) getMaintenanceWindowFromWorkRequest(workId *string, retryPolicy *oci_common.RetryPolicy,
	actionTypeEnum oci_stack_monitoring.ActionTypeEnum, timeout time.Duration) error {
func (s *StackMonitoringMaintenanceWindowResourceCrud) Get() error {
	request := oci_stack_monitoring.GetMaintenanceWindowRequest{}
func (s *StackMonitoringMaintenanceWindowResourceCrud) Update() error {
	request := oci_stack_monitoring.UpdateMaintenanceWindowRequest{}
func (s *StackMonitoringMaintenanceWindowResourceCrud) Delete() error {
	request := oci_stack_monitoring.DeleteMaintenanceWindowRequest{}
func (s *StackMonitoringMaintenanceWindowResourceCrud) SetData() error {
	if s.Res.CompartmentId != nil {
func (s *StackMonitoringMaintenanceWindowResourceCrud) mapToCreateMaintenanceWindowResourceDetails(fieldKeyFormat string) (oci_stack_monitoring.CreateMaintenanceWindowResourceDetails, error) {
	result := oci_stack_monitoring.CreateMaintenanceWindowResourceDetails{}
func CreateMaintenanceWindowResourceDetailsToMap(obj oci_stack_monitoring.CreateMaintenanceWindowResourceDetails) map[string]interface{} {
	result := map[string]interface{}{}
func (s *StackMonitoringMaintenanceWindowResourceCrud) mapToMaintenanceWindowSchedule(fieldKeyFormat string) (oci_stack_monitoring.MaintenanceWindowSchedule, error) {
	var baseObject oci_stack_monitoring.MaintenanceWindowSchedule
func MonitoredResourceDetailsToMap(obj oci_stack_monitoring.MonitoredResourceDetails) map[string]interface{} {
	result := map[string]interface{}{}

=== ./internal/service/stack_monitoring/stack_monitoring_maintenance_windows_stop_resource.go ===
func StackMonitoringMaintenanceWindowsStopResource() *schema.Resource {
	return &schema.Resource{
func createStackMonitoringMaintenanceWindowsStop(d *schema.ResourceData, m interface{}) error {
	sync := &StackMonitoringMaintenanceWindowsStopResourceCrud{}
func readStackMonitoringMaintenanceWindowsStop(d *schema.ResourceData, m interface{}) error {
	return nil
func deleteStackMonitoringMaintenanceWindowsStop(d *schema.ResourceData, m interface{}) error {
	return nil
func (s *StackMonitoringMaintenanceWindowsStopResourceCrud) ID() string {
	return tfresource.GenerateDataSourceHashID("StackMonitoringMaintenanceWindowsRetryStopResource-", StackMonitoringMaintenanceWindowsStopResource(), s.D)
func (s *StackMonitoringMaintenanceWindowsStopResourceCrud) Create() error {
	request := oci_stack_monitoring.StopMaintenanceWindowRequest{}
func (s *StackMonitoringMaintenanceWindowsStopResourceCrud) getMaintenanceWindowsStopFromWorkRequest(workId *string, retryPolicy *oci_common.RetryPolicy,
	actionTypeEnum oci_stack_monitoring.ActionTypeEnum, timeout time.Duration) error {
func (s *StackMonitoringMaintenanceWindowsStopResourceCrud) SetData() error {
	return nil

=== ./internal/service/stack_monitoring/stack_monitoring_process_sets_data_source.go ===
func StackMonitoringProcessSetsDataSource() *schema.Resource {
	return &schema.Resource{
func readStackMonitoringProcessSets(d *schema.ResourceData, m interface{}) error {
	sync := &StackMonitoringProcessSetsDataSourceCrud{}
func (s *StackMonitoringProcessSetsDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *StackMonitoringProcessSetsDataSourceCrud) Get() error {
	request := oci_stack_monitoring.ListProcessSetsRequest{}
func (s *StackMonitoringProcessSetsDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/stack_monitoring/stack_monitoring_config_resource.go ===
func StackMonitoringConfigResource() *schema.Resource {
	return &schema.Resource{
func createStackMonitoringConfig(d *schema.ResourceData, m interface{}) error {
	sync := &StackMonitoringConfigResourceCrud{}
func readStackMonitoringConfig(d *schema.ResourceData, m interface{}) error {
	sync := &StackMonitoringConfigResourceCrud{}
func updateStackMonitoringConfig(d *schema.ResourceData, m interface{}) error {
	sync := &StackMonitoringConfigResourceCrud{}
func deleteStackMonitoringConfig(d *schema.ResourceData, m interface{}) error {
	sync := &StackMonitoringConfigResourceCrud{}
func (s *StackMonitoringConfigResourceCrud) ID() string {
	config := *s.Res
func (s *StackMonitoringConfigResourceCrud) CreatedPending() []string {
	return []string{
func (s *StackMonitoringConfigResourceCrud) CreatedTarget() []string {
	return []string{
func (s *StackMonitoringConfigResourceCrud) DeletedPending() []string {
	return []string{
func (s *StackMonitoringConfigResourceCrud) DeletedTarget() []string {
	return []string{
func (s *StackMonitoringConfigResourceCrud) Create() error {
	request := oci_stack_monitoring.CreateConfigRequest{}
func (s *StackMonitoringConfigResourceCrud) Get() error {
	request := oci_stack_monitoring.GetConfigRequest{}
func (s *StackMonitoringConfigResourceCrud) Update() error {
	if compartment, ok := s.D.GetOkExists("compartment_id"); ok && s.D.HasChange("compartment_id") {
func (s *StackMonitoringConfigResourceCrud) Delete() error {
	request := oci_stack_monitoring.DeleteConfigRequest{}
func (s *StackMonitoringConfigResourceCrud) SetData() error {
	switch v := (*s.Res).(type) {
func (s *StackMonitoringConfigResourceCrud) populateTopLevelPolymorphicCreateConfigRequest(request *oci_stack_monitoring.CreateConfigRequest) error {
	//discriminator
func (s *StackMonitoringConfigResourceCrud) populateTopLevelPolymorphicUpdateConfigRequest(request *oci_stack_monitoring.UpdateConfigRequest) error {
	//discriminator
func (s *StackMonitoringConfigResourceCrud) updateCompartment(compartment interface{}) error {
	changeCompartmentRequest := oci_stack_monitoring.ChangeConfigCompartmentRequest{}

=== ./internal/service/stack_monitoring/stack_monitoring_monitored_resource_tasks_data_source.go ===
func StackMonitoringMonitoredResourceTasksDataSource() *schema.Resource {
	return &schema.Resource{
func readStackMonitoringMonitoredResourceTasks(d *schema.ResourceData, m interface{}) error {
	sync := &StackMonitoringMonitoredResourceTasksDataSourceCrud{}
func (s *StackMonitoringMonitoredResourceTasksDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *StackMonitoringMonitoredResourceTasksDataSourceCrud) Get() error {
	request := oci_stack_monitoring.ListMonitoredResourceTasksRequest{}
func (s *StackMonitoringMonitoredResourceTasksDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/stack_monitoring/stack_monitoring_process_set_resource.go ===
func StackMonitoringProcessSetResource() *schema.Resource {
	return &schema.Resource{
func createStackMonitoringProcessSet(d *schema.ResourceData, m interface{}) error {
	sync := &StackMonitoringProcessSetResourceCrud{}
func readStackMonitoringProcessSet(d *schema.ResourceData, m interface{}) error {
	sync := &StackMonitoringProcessSetResourceCrud{}
func updateStackMonitoringProcessSet(d *schema.ResourceData, m interface{}) error {
	sync := &StackMonitoringProcessSetResourceCrud{}
func deleteStackMonitoringProcessSet(d *schema.ResourceData, m interface{}) error {
	sync := &StackMonitoringProcessSetResourceCrud{}
func (s *StackMonitoringProcessSetResourceCrud) ID() string {
	return *s.Res.Id
func (s *StackMonitoringProcessSetResourceCrud) CreatedPending() []string {
	return []string{
func (s *StackMonitoringProcessSetResourceCrud) CreatedTarget() []string {
	return []string{
func (s *StackMonitoringProcessSetResourceCrud) DeletedPending() []string {
	return []string{
func (s *StackMonitoringProcessSetResourceCrud) DeletedTarget() []string {
	return []string{
func (s *StackMonitoringProcessSetResourceCrud) Create() error {
	request := oci_stack_monitoring.CreateProcessSetRequest{}
func (s *StackMonitoringProcessSetResourceCrud) Get() error {
	request := oci_stack_monitoring.GetProcessSetRequest{}
func (s *StackMonitoringProcessSetResourceCrud) Update() error {
	if compartment, ok := s.D.GetOkExists("compartment_id"); ok && s.D.HasChange("compartment_id") {
func (s *StackMonitoringProcessSetResourceCrud) Delete() error {
	request := oci_stack_monitoring.DeleteProcessSetRequest{}
func (s *StackMonitoringProcessSetResourceCrud) SetData() error {
	if s.Res.CompartmentId != nil {
func (s *StackMonitoringProcessSetResourceCrud) mapToProcessSetSpecification(fieldKeyFormat string) (oci_stack_monitoring.ProcessSetSpecification, error) {
	result := oci_stack_monitoring.ProcessSetSpecification{}
func (s *StackMonitoringProcessSetResourceCrud) mapToProcessSetSpecificationDetails(fieldKeyFormat string) (oci_stack_monitoring.ProcessSetSpecificationDetails, error) {
	result := oci_stack_monitoring.ProcessSetSpecificationDetails{}
func (s *StackMonitoringProcessSetResourceCrud) updateCompartment(compartment interface{}) error {
	changeCompartmentRequest := oci_stack_monitoring.ChangeProcessSetCompartmentRequest{}

=== ./internal/service/stack_monitoring/stack_monitoring_metric_extension_data_source.go ===
func StackMonitoringMetricExtensionDataSource() *schema.Resource {
	fieldMap := make(map[string]*schema.Schema)
func readSingularStackMonitoringMetricExtension(d *schema.ResourceData, m interface{}) error {
	sync := &StackMonitoringMetricExtensionDataSourceCrud{}
func (s *StackMonitoringMetricExtensionDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *StackMonitoringMetricExtensionDataSourceCrud) Get() error {
	request := oci_stack_monitoring.GetMetricExtensionRequest{}
func (s *StackMonitoringMetricExtensionDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/stack_monitoring/stack_monitoring_discovery_job_logs_data_source.go ===
func StackMonitoringDiscoveryJobLogsDataSource() *schema.Resource {
	return &schema.Resource{
func readStackMonitoringDiscoveryJobLogs(d *schema.ResourceData, m interface{}) error {
	sync := &StackMonitoringDiscoveryJobLogsDataSourceCrud{}
func (s *StackMonitoringDiscoveryJobLogsDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *StackMonitoringDiscoveryJobLogsDataSourceCrud) Get() error {
	request := oci_stack_monitoring.ListDiscoveryJobLogsRequest{}
func (s *StackMonitoringDiscoveryJobLogsDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/stack_monitoring/stack_monitoring_configs_data_source.go ===
func StackMonitoringConfigsDataSource() *schema.Resource {
	return &schema.Resource{
func readStackMonitoringConfigs(d *schema.ResourceData, m interface{}) error {
	sync := &StackMonitoringConfigsDataSourceCrud{}
func (s *StackMonitoringConfigsDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *StackMonitoringConfigsDataSourceCrud) Get() error {
	request := oci_stack_monitoring.ListConfigsRequest{}
func (s *StackMonitoringConfigsDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/stack_monitoring/stack_monitoring_metric_extensions_test_management_resource.go ===
func StackMonitoringMetricExtensionsTestManagementResource() *schema.Resource {
	return &schema.Resource{
func createStackMonitoringMetricExtensionsTestManagement(d *schema.ResourceData, m interface{}) error {
	sync := &StackMonitoringMetricExtensionsTestManagementResourceCrud{}
func readStackMonitoringMetricExtensionsTestManagement(d *schema.ResourceData, m interface{}) error {
	return nil
func deleteStackMonitoringMetricExtensionsTestManagement(d *schema.ResourceData, m interface{}) error {
	return nil
func (s *StackMonitoringMetricExtensionsTestManagementResourceCrud) ID() string {

func (s *StackMonitoringMetricExtensionsTestManagementResourceCrud) Create() error {
	request := oci_stack_monitoring.TestMetricExtensionRequest{}
func (s *StackMonitoringMetricExtensionsTestManagementResourceCrud) getMetricExtensionsTestManagementFromWorkRequest(workId *string, retryPolicy *oci_common.RetryPolicy,
	actionTypeEnum oci_stack_monitoring.ActionTypeEnum, timeout time.Duration) error {
func (s *StackMonitoringMetricExtensionsTestManagementResourceCrud) SetData() error {
	if s.Res.TestRunId != nil {

=== ./internal/service/stack_monitoring/stack_monitoring_maintenance_windows_data_source.go ===
func StackMonitoringMaintenanceWindowsDataSource() *schema.Resource {
	return &schema.Resource{
func readStackMonitoringMaintenanceWindows(d *schema.ResourceData, m interface{}) error {
	sync := &StackMonitoringMaintenanceWindowsDataSourceCrud{}
func (s *StackMonitoringMaintenanceWindowsDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *StackMonitoringMaintenanceWindowsDataSourceCrud) Get() error {
	request := oci_stack_monitoring.ListMaintenanceWindowsRequest{}
func (s *StackMonitoringMaintenanceWindowsDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/stack_monitoring/stack_monitoring_monitored_resources_search_resource.go ===
func StackMonitoringMonitoredResourcesSearchResource() *schema.Resource {
	return &schema.Resource{
func createStackMonitoringMonitoredResourcesSearch(d *schema.ResourceData, m interface{}) error {
	sync := &StackMonitoringMonitoredResourcesSearchResourceCrud{}
func readStackMonitoringMonitoredResourcesSearch(d *schema.ResourceData, m interface{}) error {
	return nil
func deleteStackMonitoringMonitoredResourcesSearch(d *schema.ResourceData, m interface{}) error {
	return nil
func (s *StackMonitoringMonitoredResourcesSearchResourceCrud) ID() string {
	var id = "/monitoredResources/actions/associateMonitoredResources"
func (s *StackMonitoringMonitoredResourcesSearchResourceCrud) Create() error {
	request := oci_stack_monitoring.SearchMonitoredResourcesRequest{}
func (s *StackMonitoringMonitoredResourcesSearchResourceCrud) SetData() error {
	items := []interface{}{}
func MonitoredResourceSummaryToMap(obj oci_stack_monitoring.MonitoredResourceSummary) map[string]interface{} {
	result := map[string]interface{}{}

=== ./internal/service/stack_monitoring/stack_monitoring_discovery_job_data_source.go ===
func StackMonitoringDiscoveryJobDataSource() *schema.Resource {
	fieldMap := make(map[string]*schema.Schema)
func readSingularStackMonitoringDiscoveryJob(d *schema.ResourceData, m interface{}) error {
	sync := &StackMonitoringDiscoveryJobDataSourceCrud{}
func (s *StackMonitoringDiscoveryJobDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *StackMonitoringDiscoveryJobDataSourceCrud) Get() error {
	request := oci_stack_monitoring.GetDiscoveryJobRequest{}
func (s *StackMonitoringDiscoveryJobDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/stack_monitoring/stack_monitoring_baselineable_metrics_evaluate_data_source.go ===
func StackMonitoringBaselineableMetricsEvaluateDataSource() *schema.Resource {
	return &schema.Resource{
func readSingularStackMonitoringBaselineableMetricsEvaluate(d *schema.ResourceData, m interface{}) error {
	sync := &StackMonitoringBaselineableMetricsEvaluateDataSourceCrud{}
func (s *StackMonitoringBaselineableMetricsEvaluateDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *StackMonitoringBaselineableMetricsEvaluateDataSourceCrud) Get() error {
	request := oci_stack_monitoring.EvaluateBaselineableMetricRequest{}
func (s *StackMonitoringBaselineableMetricsEvaluateDataSourceCrud) SetData() error {
	if s.Res == nil {
func (s *StackMonitoringBaselineableMetricsEvaluateDataSourceCrud) mapToDataPoint(fieldKeyFormat string) (oci_stack_monitoring.DataPoint, error) {
	result := oci_stack_monitoring.DataPoint{}
func (s *StackMonitoringBaselineableMetricsEvaluateDataSourceCrud) mapToMetricData(fieldKeyFormat string) (oci_stack_monitoring.MetricData, error) {
	result := oci_stack_monitoring.MetricData{}

=== ./internal/service/stack_monitoring/stack_monitoring_monitored_resources_search_association_resource.go ===
func StackMonitoringMonitoredResourcesSearchAssociationResource() *schema.Resource {
	return &schema.Resource{
func createStackMonitoringMonitoredResourcesSearchAssociation(d *schema.ResourceData, m interface{}) error {
	sync := &StackMonitoringMonitoredResourcesSearchAssociationResourceCrud{}
func readStackMonitoringMonitoredResourcesSearchAssociation(d *schema.ResourceData, m interface{}) error {
	return nil
func deleteStackMonitoringMonitoredResourcesSearchAssociation(d *schema.ResourceData, m interface{}) error {
	return nil
func (s *StackMonitoringMonitoredResourcesSearchAssociationResourceCrud) ID() string {
	var id = "/monitoredResources/actions/associateMonitoredResources"
func (s *StackMonitoringMonitoredResourcesSearchAssociationResourceCrud) Create() error {
	request := oci_stack_monitoring.SearchMonitoredResourceAssociationsRequest{}
func (s *StackMonitoringMonitoredResourcesSearchAssociationResourceCrud) SetData() error {
	items := []interface{}{}
func MonitoredResourceAssociationSummaryToMap(obj oci_stack_monitoring.MonitoredResourceAssociationSummary) map[string]interface{} {
	result := map[string]interface{}{}

=== ./internal/service/stack_monitoring/stack_monitoring_maintenance_window_data_source.go ===
func StackMonitoringMaintenanceWindowDataSource() *schema.Resource {
	fieldMap := make(map[string]*schema.Schema)
func readSingularStackMonitoringMaintenanceWindow(d *schema.ResourceData, m interface{}) error {
	sync := &StackMonitoringMaintenanceWindowDataSourceCrud{}
func (s *StackMonitoringMaintenanceWindowDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *StackMonitoringMaintenanceWindowDataSourceCrud) Get() error {
	request := oci_stack_monitoring.GetMaintenanceWindowRequest{}
func (s *StackMonitoringMaintenanceWindowDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/stack_monitoring/stack_monitoring_discovery_job_resource.go ===
func StackMonitoringDiscoveryJobResource() *schema.Resource {
	return &schema.Resource{
func createStackMonitoringDiscoveryJob(d *schema.ResourceData, m interface{}) error {
	sync := &StackMonitoringDiscoveryJobResourceCrud{}
func readStackMonitoringDiscoveryJob(d *schema.ResourceData, m interface{}) error {
	sync := &StackMonitoringDiscoveryJobResourceCrud{}
func deleteStackMonitoringDiscoveryJob(d *schema.ResourceData, m interface{}) error {
	sync := &StackMonitoringDiscoveryJobResourceCrud{}
func (s *StackMonitoringDiscoveryJobResourceCrud) ID() string {
	return *s.Res.Id
func (s *StackMonitoringDiscoveryJobResourceCrud) CreatedPending() []string {
	return []string{
func (s *StackMonitoringDiscoveryJobResourceCrud) CreatedTarget() []string {
	return []string{
func (s *StackMonitoringDiscoveryJobResourceCrud) DeletedPending() []string {
	return []string{
func (s *StackMonitoringDiscoveryJobResourceCrud) DeletedTarget() []string {
	return []string{
func (s *StackMonitoringDiscoveryJobResourceCrud) Create() error {
	request := oci_stack_monitoring.CreateDiscoveryJobRequest{}
func (s *StackMonitoringDiscoveryJobResourceCrud) Get() error {
	request := oci_stack_monitoring.GetDiscoveryJobRequest{}
func (s *StackMonitoringDiscoveryJobResourceCrud) Delete() error {
	request := oci_stack_monitoring.DeleteDiscoveryJobRequest{}
func (s *StackMonitoringDiscoveryJobResourceCrud) SetData() error {
	if s.Res.CompartmentId != nil {
func (s *StackMonitoringDiscoveryJobResourceCrud) mapToCredentialCollection(fieldKeyFormat string) (oci_stack_monitoring.CredentialCollection, error) {
	result := oci_stack_monitoring.CredentialCollection{}
func (s *StackMonitoringDiscoveryJobResourceCrud) mapToCredentialDetails(fieldKeyFormat string) (oci_stack_monitoring.CredentialDetails, error) {
	result := oci_stack_monitoring.CredentialDetails{}
func (s *StackMonitoringDiscoveryJobResourceCrud) mapToDiscoveryDetails(fieldKeyFormat string) (oci_stack_monitoring.DiscoveryDetails, error) {
	result := oci_stack_monitoring.DiscoveryDetails{}
func (s *StackMonitoringDiscoveryJobResourceCrud) mapToPropertyDetails(fieldKeyFormat string) (oci_stack_monitoring.PropertyDetails, error) {
	result := oci_stack_monitoring.PropertyDetails{}

=== ./internal/service/stack_monitoring/stack_monitoring_metric_extension_resource.go ===
func StackMonitoringMetricExtensionResource() *schema.Resource {
	return &schema.Resource{
func createStackMonitoringMetricExtension(d *schema.ResourceData, m interface{}) error {
	sync := &StackMonitoringMetricExtensionResourceCrud{}
func readStackMonitoringMetricExtension(d *schema.ResourceData, m interface{}) error {
	sync := &StackMonitoringMetricExtensionResourceCrud{}
func updateStackMonitoringMetricExtension(d *schema.ResourceData, m interface{}) error {
	sync := &StackMonitoringMetricExtensionResourceCrud{}
func deleteStackMonitoringMetricExtension(d *schema.ResourceData, m interface{}) error {
	sync := &StackMonitoringMetricExtensionResourceCrud{}
func (s *StackMonitoringMetricExtensionResourceCrud) ID() string {
	return *s.Res.Id
func (s *StackMonitoringMetricExtensionResourceCrud) CreatedPending() []string {
	return []string{}
func (s *StackMonitoringMetricExtensionResourceCrud) CreatedTarget() []string {
	return []string{
func (s *StackMonitoringMetricExtensionResourceCrud) DeletedPending() []string {
	return []string{}
func (s *StackMonitoringMetricExtensionResourceCrud) DeletedTarget() []string {
	return []string{
func (s *StackMonitoringMetricExtensionResourceCrud) Create() error {
	request := oci_stack_monitoring.CreateMetricExtensionRequest{}
func (s *StackMonitoringMetricExtensionResourceCrud) Get() error {
	request := oci_stack_monitoring.GetMetricExtensionRequest{}
func (s *StackMonitoringMetricExtensionResourceCrud) Update() error {
	if compartment, ok := s.D.GetOkExists("compartment_id"); ok && s.D.HasChange("compartment_id") {
func (s *StackMonitoringMetricExtensionResourceCrud) Delete() error {
	request := oci_stack_monitoring.DeleteMetricExtensionRequest{}
func (s *StackMonitoringMetricExtensionResourceCrud) SetData() error {
	if s.Res.CollectionMethod != nil {
func (s *StackMonitoringMetricExtensionResourceCrud) PublishMetricExtension() error {
	request := oci_stack_monitoring.PublishMetricExtensionRequest{}
func EnabledResourceDetailsToMap(obj oci_stack_monitoring.EnabledResourceDetails) map[string]interface{} {
	result := map[string]interface{}{}
func (s *StackMonitoringMetricExtensionResourceCrud) mapToMetric(fieldKeyFormat string) (oci_stack_monitoring.Metric, error) {
	result := oci_stack_monitoring.Metric{}
func (s *StackMonitoringMetricExtensionResourceCrud) mapToMetricExtensionQueryProperties(fieldKeyFormat string) (oci_stack_monitoring.MetricExtensionQueryProperties, error) {
	var baseObject oci_stack_monitoring.MetricExtensionQueryProperties
func (s *StackMonitoringMetricExtensionResourceCrud) mapToMetricExtensionUpdateQueryProperties(fieldKeyFormat string) (oci_stack_monitoring.MetricExtensionUpdateQueryProperties, error) {
	var baseObject oci_stack_monitoring.MetricExtensionUpdateQueryProperties
func (s *StackMonitoringMetricExtensionResourceCrud) mapToScriptFileDetails(fieldKeyFormat string) (oci_stack_monitoring.ScriptFileDetails, error) {
	result := oci_stack_monitoring.ScriptFileDetails{}
func (s *StackMonitoringMetricExtensionResourceCrud) mapToSqlDetails(fieldKeyFormat string) (oci_stack_monitoring.SqlDetails, error) {
	result := oci_stack_monitoring.SqlDetails{}
func (s *StackMonitoringMetricExtensionResourceCrud) mapToSqlInParamDetails(fieldKeyFormat string) (oci_stack_monitoring.SqlInParamDetails, error) {
	result := oci_stack_monitoring.SqlInParamDetails{}
func (s *StackMonitoringMetricExtensionResourceCrud) mapToSqlOutParamDetails(fieldKeyFormat string) (oci_stack_monitoring.SqlOutParamDetails, error) {
	result := oci_stack_monitoring.SqlOutParamDetails{}
func (s *StackMonitoringMetricExtensionResourceCrud) updateCompartment(compartment interface{}) error {
	changeCompartmentRequest := oci_stack_monitoring.ChangeMetricExtensionCompartmentRequest{}

=== ./internal/service/stack_monitoring/stack_monitoring_discovery_jobs_data_source.go ===
func StackMonitoringDiscoveryJobsDataSource() *schema.Resource {
	return &schema.Resource{
func readStackMonitoringDiscoveryJobs(d *schema.ResourceData, m interface{}) error {
	sync := &StackMonitoringDiscoveryJobsDataSourceCrud{}
func (s *StackMonitoringDiscoveryJobsDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *StackMonitoringDiscoveryJobsDataSourceCrud) Get() error {
	request := oci_stack_monitoring.ListDiscoveryJobsRequest{}
func (s *StackMonitoringDiscoveryJobsDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/stack_monitoring/stack_monitoring_monitored_resource_resource.go ===
func StackMonitoringMonitoredResourceResource() *schema.Resource {
	return &schema.Resource{
func createStackMonitoringMonitoredResource(d *schema.ResourceData, m interface{}) error {
	sync := &StackMonitoringMonitoredResourceResourceCrud{}
func readStackMonitoringMonitoredResource(d *schema.ResourceData, m interface{}) error {
	sync := &StackMonitoringMonitoredResourceResourceCrud{}
func updateStackMonitoringMonitoredResource(d *schema.ResourceData, m interface{}) error {
	sync := &StackMonitoringMonitoredResourceResourceCrud{}
func deleteStackMonitoringMonitoredResource(d *schema.ResourceData, m interface{}) error {
	sync := &StackMonitoringMonitoredResourceResourceCrud{}
func (s *StackMonitoringMonitoredResourceResourceCrud) ID() string {
	return *s.Res.Id
func (s *StackMonitoringMonitoredResourceResourceCrud) CreatedPending() []string {
	return []string{
func (s *StackMonitoringMonitoredResourceResourceCrud) CreatedTarget() []string {
	return []string{
func (s *StackMonitoringMonitoredResourceResourceCrud) DeletedPending() []string {
	return []string{
func (s *StackMonitoringMonitoredResourceResourceCrud) DeletedTarget() []string {
	return []string{
func (s *StackMonitoringMonitoredResourceResourceCrud) Create() error {
	request := oci_stack_monitoring.CreateMonitoredResourceRequest{}
func (s *StackMonitoringMonitoredResourceResourceCrud) getMonitoredResourceFromWorkRequest(workId *string, retryPolicy *oci_common.RetryPolicy,
	actionTypeEnum oci_stack_monitoring.ActionTypeEnum, timeout time.Duration) error {
func monitoredResourceWorkRequestShouldRetryFunc(timeout time.Duration) func(response oci_common.OCIOperationResponse) bool {
	startTime := time.Now()
func monitoredResourceWaitForWorkRequest(wId *string, entityType string, action oci_stack_monitoring.ActionTypeEnum,
	timeout time.Duration, disableFoundRetries bool, client *oci_stack_monitoring.StackMonitoringClient) (*string, error) {
func getErrorFromStackMonitoringMonitoredResourceWorkRequest(client *oci_stack_monitoring.StackMonitoringClient, workId *string, retryPolicy *oci_common.RetryPolicy, entityType string, action oci_stack_monitoring.ActionTypeEnum) error {
	response, err := client.ListWorkRequestErrors(context.Background(),
func (s *StackMonitoringMonitoredResourceResourceCrud) Get() error {
	request := oci_stack_monitoring.GetMonitoredResourceRequest{}
func (s *StackMonitoringMonitoredResourceResourceCrud) Update() error {

func (s *StackMonitoringMonitoredResourceResourceCrud) Delete() error {
	request := oci_stack_monitoring.DeleteMonitoredResourceRequest{}
func (s *StackMonitoringMonitoredResourceResourceCrud) SetData() error {
	if s.Res.Aliases != nil {
func (s *StackMonitoringMonitoredResourceResourceCrud) ManageLicense() error {
	request := oci_stack_monitoring.ManageLicenseRequest{}
func (s *StackMonitoringMonitoredResourceResourceCrud) mapToConnectionDetails(fieldKeyFormat string) (oci_stack_monitoring.ConnectionDetails, error) {
	result := oci_stack_monitoring.ConnectionDetails{}
func (s *StackMonitoringMonitoredResourceResourceCrud) mapToCredentialProperty(fieldKeyFormat string) (oci_stack_monitoring.CredentialProperty, error) {
	result := oci_stack_monitoring.CredentialProperty{}
func (s *StackMonitoringMonitoredResourceResourceCrud) mapToMonitoredResourceAliasCredential(fieldKeyFormat string) (oci_stack_monitoring.MonitoredResourceAliasCredential, error) {
	result := oci_stack_monitoring.MonitoredResourceAliasCredential{}
func MonitoredResourceAliasCredentialToMap(obj *oci_stack_monitoring.MonitoredResourceAliasCredential) map[string]interface{} {
	result := map[string]interface{}{}
func (s *StackMonitoringMonitoredResourceResourceCrud) mapToMonitoredResourceAliasSourceCredential(fieldKeyFormat string) (oci_stack_monitoring.MonitoredResourceAliasSourceCredential, error) {
	result := oci_stack_monitoring.MonitoredResourceAliasSourceCredential{}
func MonitoredResourceAliasSourceCredentialToMap(obj *oci_stack_monitoring.MonitoredResourceAliasSourceCredential) map[string]interface{} {
	result := map[string]interface{}{}
func (s *StackMonitoringMonitoredResourceResourceCrud) mapToMonitoredResourceCredential(fieldKeyFormat string) (oci_stack_monitoring.MonitoredResourceCredential, error) {
	var baseObject oci_stack_monitoring.MonitoredResourceCredential
func MonitoredResourceCredentialToMap(obj *oci_stack_monitoring.MonitoredResourceCredential) map[string]interface{} {
	result := map[string]interface{}{}
func (s *StackMonitoringMonitoredResourceResourceCrud) mapToMonitoredResourceProperty(fieldKeyFormat string) (oci_stack_monitoring.MonitoredResourceProperty, error) {
	result := oci_stack_monitoring.MonitoredResourceProperty{}
func MonitoredResourcePropertyToMap(obj oci_stack_monitoring.MonitoredResourceProperty) map[string]interface{} {
	result := map[string]interface{}{}
func (s *StackMonitoringMonitoredResourceResourceCrud) updateCompartment(compartment interface{}) error {
	changeCompartmentRequest := oci_stack_monitoring.ChangeMonitoredResourceCompartmentRequest{}

=== ./internal/service/stack_monitoring/stack_monitoring_monitored_resource_task_data_source.go ===
func StackMonitoringMonitoredResourceTaskDataSource() *schema.Resource {
	fieldMap := make(map[string]*schema.Schema)
func readSingularStackMonitoringMonitoredResourceTask(d *schema.ResourceData, m interface{}) error {
	sync := &StackMonitoringMonitoredResourceTaskDataSourceCrud{}
func (s *StackMonitoringMonitoredResourceTaskDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *StackMonitoringMonitoredResourceTaskDataSourceCrud) Get() error {
	request := oci_stack_monitoring.GetMonitoredResourceTaskRequest{}
func (s *StackMonitoringMonitoredResourceTaskDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/stack_monitoring/stack_monitoring_baselineable_metric_data_source.go ===
func StackMonitoringBaselineableMetricDataSource() *schema.Resource {
	fieldMap := make(map[string]*schema.Schema)
func readSingularStackMonitoringBaselineableMetric(d *schema.ResourceData, m interface{}) error {
	sync := &StackMonitoringBaselineableMetricDataSourceCrud{}
func (s *StackMonitoringBaselineableMetricDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *StackMonitoringBaselineableMetricDataSourceCrud) Get() error {
	request := oci_stack_monitoring.GetBaselineableMetricRequest{}
func (s *StackMonitoringBaselineableMetricDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/stack_monitoring/stack_monitoring_config_data_source.go ===
func StackMonitoringConfigDataSource() *schema.Resource {
	fieldMap := make(map[string]*schema.Schema)
func readSingularStackMonitoringConfig(d *schema.ResourceData, m interface{}) error {
	sync := &StackMonitoringConfigDataSourceCrud{}
func (s *StackMonitoringConfigDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *StackMonitoringConfigDataSourceCrud) Get() error {
	request := oci_stack_monitoring.GetConfigRequest{}
func (s *StackMonitoringConfigDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/stack_monitoring/stack_monitoring_metric_extension_metric_extension_on_given_resources_management_resource.go ===
func StackMonitoringMetricExtensionMetricExtensionOnGivenResourcesManagementResource() *schema.Resource {
	return &schema.Resource{
func createStackMonitoringMetricExtensionMetricExtensionOnGivenResourcesManagement(d *schema.ResourceData, m interface{}) error {
	sync := &StackMonitoringMetricExtensionMetricExtensionOnGivenResourcesManagementResourceCrud{}
func readStackMonitoringMetricExtensionMetricExtensionOnGivenResourcesManagement(d *schema.ResourceData, m interface{}) error {
	return nil
func updateStackMonitoringMetricExtensionMetricExtensionOnGivenResourcesManagement(d *schema.ResourceData, m interface{}) error {
	sync := &StackMonitoringMetricExtensionMetricExtensionOnGivenResourcesManagementResourceCrud{}
func deleteStackMonitoringMetricExtensionMetricExtensionOnGivenResourcesManagement(d *schema.ResourceData, m interface{}) error {
	sync := &StackMonitoringMetricExtensionMetricExtensionOnGivenResourcesManagementResourceCrud{}
func (s *StackMonitoringMetricExtensionMetricExtensionOnGivenResourcesManagementResourceCrud) ID() string {
	return tfresource.GenerateDataSourceHashID("StackMonitoringMetricExtensionMetricExtensionOnGivenResourcesManagementResource-", StackMonitoringMetricExtensionMetricExtensionOnGivenResourcesManagementResource(), s.D)
func (s *StackMonitoringMetricExtensionMetricExtensionOnGivenResourcesManagementResourceCrud) Create() error {
	var operation bool
func (s *StackMonitoringMetricExtensionMetricExtensionOnGivenResourcesManagementResourceCrud) getMetricExtensionMetricExtensionOnGivenResourcesManagementFromWorkRequest(workId *string, retryPolicy *oci_common.RetryPolicy,
	actionTypeEnum oci_stack_monitoring.ActionTypeEnum, timeout time.Duration) error {
func metricExtensionMetricExtensionOnGivenResourcesManagementWorkRequestShouldRetryFunc(timeout time.Duration) func(response oci_common.OCIOperationResponse) bool {
	startTime := time.Now()
func metricExtensionMetricExtensionOnGivenResourcesManagementWaitForWorkRequest(wId *string, entityType string, action oci_stack_monitoring.ActionTypeEnum,
	timeout time.Duration, disableFoundRetries bool, client *oci_stack_monitoring.StackMonitoringClient) (*string, error) {
func getErrorFromStackMonitoringMetricExtensionMetricExtensionOnGivenResourcesManagementWorkRequest(client *oci_stack_monitoring.StackMonitoringClient, workId *string, retryPolicy *oci_common.RetryPolicy, entityType string, action oci_stack_monitoring.ActionTypeEnum) error {
	response, err := client.ListWorkRequestErrors(context.Background(),
func (s *StackMonitoringMetricExtensionMetricExtensionOnGivenResourcesManagementResourceCrud) Update() error {
	var operation bool
func (s *StackMonitoringMetricExtensionMetricExtensionOnGivenResourcesManagementResourceCrud) Delete() error {
	var operation bool
func (s *StackMonitoringMetricExtensionMetricExtensionOnGivenResourcesManagementResourceCrud) SetData() error {
	return nil

=== ./internal/service/stack_monitoring/stack_monitoring_monitored_resource_data_source.go ===
func StackMonitoringMonitoredResourceDataSource() *schema.Resource {
	fieldMap := make(map[string]*schema.Schema)
func readSingularStackMonitoringMonitoredResource(d *schema.ResourceData, m interface{}) error {
	sync := &StackMonitoringMonitoredResourceDataSourceCrud{}
func (s *StackMonitoringMonitoredResourceDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *StackMonitoringMonitoredResourceDataSourceCrud) Get() error {
	request := oci_stack_monitoring.GetMonitoredResourceRequest{}
func (s *StackMonitoringMonitoredResourceDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/stack_monitoring/stack_monitoring_monitored_resources_associate_monitored_resource_resource.go ===
func StackMonitoringMonitoredResourcesAssociateMonitoredResourceResource() *schema.Resource {
	return &schema.Resource{
func createStackMonitoringMonitoredResourcesAssociateMonitoredResource(d *schema.ResourceData, m interface{}) error {
	sync := &StackMonitoringMonitoredResourcesAssociateMonitoredResourceResourceCrud{}
func readStackMonitoringMonitoredResourcesAssociateMonitoredResource(d *schema.ResourceData, m interface{}) error {
	return nil
func deleteStackMonitoringMonitoredResourcesAssociateMonitoredResource(d *schema.ResourceData, m interface{}) error {
	sync := &StackMonitoringMonitoredResourcesAssociateMonitoredResourceResourceCrud{}
func (s *StackMonitoringMonitoredResourcesAssociateMonitoredResourceResourceCrud) ID() string {
	return "compartmentId/" + *s.Res.CompartmentId + "associationType/" + *s.Res.AssociationType + "source/" + *s.Res.SourceResourceId + "destination/" + *s.Res.DestinationResourceId
func (s *StackMonitoringMonitoredResourcesAssociateMonitoredResourceResourceCrud) Create() error {
	request := oci_stack_monitoring.AssociateMonitoredResourcesRequest{}
func (s *StackMonitoringMonitoredResourcesAssociateMonitoredResourceResourceCrud) Delete() error {
	request := oci_stack_monitoring.DisassociateMonitoredResourcesRequest{}
func (s *StackMonitoringMonitoredResourcesAssociateMonitoredResourceResourceCrud) SetData() error {
	if s.Res.AssociationType != nil {
func AssociationResourceDetailsToMap(obj *oci_stack_monitoring.AssociationResourceDetails) map[string]interface{} {
	result := map[string]interface{}{}

=== ./internal/service/stack_monitoring/stack_monitoring_monitored_resource_type_data_source.go ===
func StackMonitoringMonitoredResourceTypeDataSource() *schema.Resource {
	fieldMap := make(map[string]*schema.Schema)
func readSingularStackMonitoringMonitoredResourceType(d *schema.ResourceData, m interface{}) error {
	sync := &StackMonitoringMonitoredResourceTypeDataSourceCrud{}
func (s *StackMonitoringMonitoredResourceTypeDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *StackMonitoringMonitoredResourceTypeDataSourceCrud) Get() error {
	request := oci_stack_monitoring.GetMonitoredResourceTypeRequest{}
func (s *StackMonitoringMonitoredResourceTypeDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/stack_monitoring/stack_monitoring_monitored_resource_task_resource.go ===
func StackMonitoringMonitoredResourceTaskResource() *schema.Resource {
	return &schema.Resource{
func createStackMonitoringMonitoredResourceTask(d *schema.ResourceData, m interface{}) error {
	sync := &StackMonitoringMonitoredResourceTaskResourceCrud{}
func readStackMonitoringMonitoredResourceTask(d *schema.ResourceData, m interface{}) error {
	sync := &StackMonitoringMonitoredResourceTaskResourceCrud{}
func updateStackMonitoringMonitoredResourceTask(d *schema.ResourceData, m interface{}) error {
	sync := &StackMonitoringMonitoredResourceTaskResourceCrud{}
func deleteStackMonitoringMonitoredResourceTask(d *schema.ResourceData, m interface{}) error {
	return nil
func (s *StackMonitoringMonitoredResourceTaskResourceCrud) ID() string {
	return *s.Res.Id
func (s *StackMonitoringMonitoredResourceTaskResourceCrud) CreatedPending() []string {
	return []string{
func (s *StackMonitoringMonitoredResourceTaskResourceCrud) CreatedTarget() []string {
	return []string{
func (s *StackMonitoringMonitoredResourceTaskResourceCrud) DeletedPending() []string {
	return []string{}
func (s *StackMonitoringMonitoredResourceTaskResourceCrud) DeletedTarget() []string {
	return []string{}
func (s *StackMonitoringMonitoredResourceTaskResourceCrud) Create() error {
	request := oci_stack_monitoring.CreateMonitoredResourceTaskRequest{}
func (s *StackMonitoringMonitoredResourceTaskResourceCrud) getMonitoredResourceTaskFromWorkRequest(workId *string, retryPolicy *oci_common.RetryPolicy,
	actionTypeEnum oci_stack_monitoring.ActionTypeEnum, timeout time.Duration) error {
func monitoredResourceTaskWorkRequestShouldRetryFunc(timeout time.Duration) func(response oci_common.OCIOperationResponse) bool {
	startTime := time.Now()
func monitoredResourceTaskWaitForWorkRequest(wId *string, entityType string, action oci_stack_monitoring.ActionTypeEnum,
	timeout time.Duration, disableFoundRetries bool, client *oci_stack_monitoring.StackMonitoringClient) (*string, error) {
func getErrorFromStackMonitoringMonitoredResourceTaskWorkRequest(client *oci_stack_monitoring.StackMonitoringClient, workId *string, retryPolicy *oci_common.RetryPolicy, entityType string, action oci_stack_monitoring.ActionTypeEnum) error {
	response, err := client.ListWorkRequestErrors(context.Background(),
func (s *StackMonitoringMonitoredResourceTaskResourceCrud) Get() error {
	request := oci_stack_monitoring.GetMonitoredResourceTaskRequest{}
func (s *StackMonitoringMonitoredResourceTaskResourceCrud) Update() error {
	if compartment, ok := s.D.GetOkExists("compartment_id"); ok && s.D.HasChange("compartment_id") {
func (s *StackMonitoringMonitoredResourceTaskResourceCrud) SetData() error {
	if s.Res.CompartmentId != nil {
func (s *StackMonitoringMonitoredResourceTaskResourceCrud) mapToMonitoredResourceTaskDetails(fieldKeyFormat string) (oci_stack_monitoring.MonitoredResourceTaskDetails, error) {
	var baseObject oci_stack_monitoring.MonitoredResourceTaskDetails
func MonitoredResourceTaskDetailsToMap(obj *oci_stack_monitoring.MonitoredResourceTaskDetails) map[string]interface{} {
	result := map[string]interface{}{}
func MonitoredResourceTaskSummaryToMap(obj oci_stack_monitoring.MonitoredResourceTaskSummary) map[string]interface{} {
	result := map[string]interface{}{}
func (s *StackMonitoringMonitoredResourceTaskResourceCrud) updateCompartment(compartment interface{}) error {
	changeCompartmentRequest := oci_stack_monitoring.ChangeMonitoredResourceTaskCompartmentRequest{}

=== ./internal/service/stack_monitoring/stack_monitoring_monitored_resources_data_source.go ===
func StackMonitoringMonitoredResourcesDataSource() *schema.Resource {
	return &schema.Resource{
func readStackMonitoringMonitoredResources(d *schema.ResourceData, m interface{}) error {
	sync := &StackMonitoringMonitoredResourcesDataSourceCrud{}
func (s *StackMonitoringMonitoredResourcesDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *StackMonitoringMonitoredResourcesDataSourceCrud) Get() error {
	request := oci_stack_monitoring.ListMonitoredResourcesRequest{}
func (s *StackMonitoringMonitoredResourcesDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/stack_monitoring/stack_monitoring_baselineable_metrics_data_source.go ===
func StackMonitoringBaselineableMetricsDataSource() *schema.Resource {
	return &schema.Resource{
func readStackMonitoringBaselineableMetrics(d *schema.ResourceData, m interface{}) error {
	sync := &StackMonitoringBaselineableMetricsDataSourceCrud{}
func (s *StackMonitoringBaselineableMetricsDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *StackMonitoringBaselineableMetricsDataSourceCrud) Get() error {
	request := oci_stack_monitoring.ListBaselineableMetricsRequest{}
func (s *StackMonitoringBaselineableMetricsDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/stack_monitoring/stack_monitoring_monitored_resources_list_member_resource.go ===
func StackMonitoringMonitoredResourcesListMemberResource() *schema.Resource {
	return &schema.Resource{
func createStackMonitoringMonitoredResourcesListMember(d *schema.ResourceData, m interface{}) error {
	sync := &StackMonitoringMonitoredResourcesListMemberResourceCrud{}
func readStackMonitoringMonitoredResourcesListMember(d *schema.ResourceData, m interface{}) error {
	return nil
func deleteStackMonitoringMonitoredResourcesListMember(d *schema.ResourceData, m interface{}) error {
	return nil
func (s *StackMonitoringMonitoredResourcesListMemberResourceCrud) ID() string {
	var id = "/monitoredResources/"
func (s *StackMonitoringMonitoredResourcesListMemberResourceCrud) Create() error {
	request := oci_stack_monitoring.SearchMonitoredResourceMembersRequest{}
func (s *StackMonitoringMonitoredResourcesListMemberResourceCrud) SetData() error {
	items := []interface{}{}
func MonitoredResourceMemberSummaryToMap(obj oci_stack_monitoring.MonitoredResourceMemberSummary) map[string]interface{} {
	result := map[string]interface{}{}

=== ./internal/service/stack_monitoring/stack_monitoring_baselineable_metric_resource.go ===
func StackMonitoringBaselineableMetricResource() *schema.Resource {
	return &schema.Resource{
func createStackMonitoringBaselineableMetric(d *schema.ResourceData, m interface{}) error {
	sync := &StackMonitoringBaselineableMetricResourceCrud{}
func readStackMonitoringBaselineableMetric(d *schema.ResourceData, m interface{}) error {
	sync := &StackMonitoringBaselineableMetricResourceCrud{}
func updateStackMonitoringBaselineableMetric(d *schema.ResourceData, m interface{}) error {
	sync := &StackMonitoringBaselineableMetricResourceCrud{}
func deleteStackMonitoringBaselineableMetric(d *schema.ResourceData, m interface{}) error {
	sync := &StackMonitoringBaselineableMetricResourceCrud{}
func (s *StackMonitoringBaselineableMetricResourceCrud) ID() string {
	return *s.Res.Id
func (s *StackMonitoringBaselineableMetricResourceCrud) CreatedPending() []string {
	return []string{}
func (s *StackMonitoringBaselineableMetricResourceCrud) CreatedTarget() []string {
	return []string{
func (s *StackMonitoringBaselineableMetricResourceCrud) DeletedPending() []string {
	return []string{}
func (s *StackMonitoringBaselineableMetricResourceCrud) DeletedTarget() []string {
	return []string{
func (s *StackMonitoringBaselineableMetricResourceCrud) Create() error {
	request := oci_stack_monitoring.CreateBaselineableMetricRequest{}
func (s *StackMonitoringBaselineableMetricResourceCrud) Get() error {
	request := oci_stack_monitoring.GetBaselineableMetricRequest{}
func (s *StackMonitoringBaselineableMetricResourceCrud) Update() error {
	request := oci_stack_monitoring.UpdateBaselineableMetricRequest{}
func (s *StackMonitoringBaselineableMetricResourceCrud) Delete() error {
	request := oci_stack_monitoring.DeleteBaselineableMetricRequest{}
func (s *StackMonitoringBaselineableMetricResourceCrud) SetData() error {
	if s.Res.Column != nil {

=== ./internal/service/stack_monitoring/stack_monitoring_process_set_data_source.go ===
func StackMonitoringProcessSetDataSource() *schema.Resource {
	fieldMap := make(map[string]*schema.Schema)
func readSingularStackMonitoringProcessSet(d *schema.ResourceData, m interface{}) error {
	sync := &StackMonitoringProcessSetDataSourceCrud{}
func (s *StackMonitoringProcessSetDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *StackMonitoringProcessSetDataSourceCrud) Get() error {
	request := oci_stack_monitoring.GetProcessSetRequest{}
func (s *StackMonitoringProcessSetDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/stack_monitoring/stack_monitoring_monitored_resource_type_resource.go ===
func StackMonitoringMonitoredResourceTypeResource() *schema.Resource {
	return &schema.Resource{
func createStackMonitoringMonitoredResourceType(d *schema.ResourceData, m interface{}) error {
	sync := &StackMonitoringMonitoredResourceTypeResourceCrud{}
func readStackMonitoringMonitoredResourceType(d *schema.ResourceData, m interface{}) error {
	sync := &StackMonitoringMonitoredResourceTypeResourceCrud{}
func updateStackMonitoringMonitoredResourceType(d *schema.ResourceData, m interface{}) error {
	sync := &StackMonitoringMonitoredResourceTypeResourceCrud{}
func deleteStackMonitoringMonitoredResourceType(d *schema.ResourceData, m interface{}) error {
	sync := &StackMonitoringMonitoredResourceTypeResourceCrud{}
func (s *StackMonitoringMonitoredResourceTypeResourceCrud) ID() string {
	return *s.Res.Id
func (s *StackMonitoringMonitoredResourceTypeResourceCrud) CreatedPending() []string {
	return []string{
func (s *StackMonitoringMonitoredResourceTypeResourceCrud) CreatedTarget() []string {
	return []string{
func (s *StackMonitoringMonitoredResourceTypeResourceCrud) DeletedPending() []string {
	return []string{
func (s *StackMonitoringMonitoredResourceTypeResourceCrud) DeletedTarget() []string {
	return []string{
func (s *StackMonitoringMonitoredResourceTypeResourceCrud) Create() error {
	request := oci_stack_monitoring.CreateMonitoredResourceTypeRequest{}
func (s *StackMonitoringMonitoredResourceTypeResourceCrud) Get() error {
	request := oci_stack_monitoring.GetMonitoredResourceTypeRequest{}
func (s *StackMonitoringMonitoredResourceTypeResourceCrud) Update() error {
	request := oci_stack_monitoring.UpdateMonitoredResourceTypeRequest{}
func (s *StackMonitoringMonitoredResourceTypeResourceCrud) Delete() error {
	request := oci_stack_monitoring.DeleteMonitoredResourceTypeRequest{}
func (s *StackMonitoringMonitoredResourceTypeResourceCrud) SetData() error {
	if s.Res.CompartmentId != nil {
func MonitoredResourceTypeSummaryToMap(obj oci_stack_monitoring.MonitoredResourceTypeSummary) map[string]interface{} {
	result := map[string]interface{}{}
func (s *StackMonitoringMonitoredResourceTypeResourceCrud) mapToResourceTypeMetadataDetails(fieldKeyFormat string) (oci_stack_monitoring.ResourceTypeMetadataDetails, error) {
	var baseObject oci_stack_monitoring.ResourceTypeMetadataDetails
func ResourceTypeMetadataDetailsToMap(obj *oci_stack_monitoring.ResourceTypeMetadataDetails) map[string]interface{} {
	result := map[string]interface{}{}
func (s *StackMonitoringMonitoredResourceTypeResourceCrud) mapToUniquePropertySet(fieldKeyFormat string) (oci_stack_monitoring.UniquePropertySet, error) {
	result := oci_stack_monitoring.UniquePropertySet{}

=== ./internal/service/stack_monitoring/stack_monitoring_maintenance_windows_retry_failed_operation_resource.go ===
func StackMonitoringMaintenanceWindowsRetryFailedOperationResource() *schema.Resource {
	return &schema.Resource{
func createStackMonitoringMaintenanceWindowsRetryFailedOperation(d *schema.ResourceData, m interface{}) error {
	sync := &StackMonitoringMaintenanceWindowsRetryFailedOperationResourceCrud{}
func readStackMonitoringMaintenanceWindowsRetryFailedOperation(d *schema.ResourceData, m interface{}) error {
	return nil
func deleteStackMonitoringMaintenanceWindowsRetryFailedOperation(d *schema.ResourceData, m interface{}) error {
	return nil
func (s *StackMonitoringMaintenanceWindowsRetryFailedOperationResourceCrud) ID() string {
	return tfresource.GenerateDataSourceHashID("StackMonitoringMaintenanceWindowsRetryFailedOperationResource-", StackMonitoringMaintenanceWindowsRetryFailedOperationResource(), s.D)
func (s *StackMonitoringMaintenanceWindowsRetryFailedOperationResourceCrud) Create() error {
	request := oci_stack_monitoring.RetryFailedMaintenanceWindowOperationRequest{}
func (s *StackMonitoringMaintenanceWindowsRetryFailedOperationResourceCrud) getMaintenanceWindowsRetryFailedOperationFromWorkRequest(workId *string, retryPolicy *oci_common.RetryPolicy,
	actionTypeEnum []oci_stack_monitoring.ActionTypeEnum, timeout time.Duration) error {
func (s *StackMonitoringMaintenanceWindowsRetryFailedOperationResourceCrud) SetData() error {
	return nil

=== ./internal/service/stack_monitoring/stack_monitoring_metric_extensions_data_source.go ===
func StackMonitoringMetricExtensionsDataSource() *schema.Resource {
	return &schema.Resource{
func readStackMonitoringMetricExtensions(d *schema.ResourceData, m interface{}) error {
	sync := &StackMonitoringMetricExtensionsDataSourceCrud{}
func (s *StackMonitoringMetricExtensionsDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *StackMonitoringMetricExtensionsDataSourceCrud) Get() error {
	request := oci_stack_monitoring.ListMetricExtensionsRequest{}
func (s *StackMonitoringMetricExtensionsDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/stack_monitoring/register_resource.go ===
func RegisterResource() {
	tfresource.RegisterResource("oci_stack_monitoring_baselineable_metric", StackMonitoringBaselineableMetricResource())

=== ./internal/service/stack_monitoring/stack_monitoring_monitored_resource_types_data_source.go ===
func StackMonitoringMonitoredResourceTypesDataSource() *schema.Resource {
	return &schema.Resource{
func readStackMonitoringMonitoredResourceTypes(d *schema.ResourceData, m interface{}) error {
	sync := &StackMonitoringMonitoredResourceTypesDataSourceCrud{}
func (s *StackMonitoringMonitoredResourceTypesDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *StackMonitoringMonitoredResourceTypesDataSourceCrud) Get() error {
	request := oci_stack_monitoring.ListMonitoredResourceTypesRequest{}
func (s *StackMonitoringMonitoredResourceTypesDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/generative_ai/generative_ai_endpoint_data_source.go ===
func GenerativeAiEndpointDataSource() *schema.Resource {
	fieldMap := make(map[string]*schema.Schema)
func readSingularGenerativeAiEndpoint(d *schema.ResourceData, m interface{}) error {
	sync := &GenerativeAiEndpointDataSourceCrud{}
func (s *GenerativeAiEndpointDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *GenerativeAiEndpointDataSourceCrud) Get() error {
	request := oci_generative_ai.GetEndpointRequest{}
func (s *GenerativeAiEndpointDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/generative_ai/generative_ai_endpoints_data_source.go ===
func GenerativeAiEndpointsDataSource() *schema.Resource {
	return &schema.Resource{
func readGenerativeAiEndpoints(d *schema.ResourceData, m interface{}) error {
	sync := &GenerativeAiEndpointsDataSourceCrud{}
func (s *GenerativeAiEndpointsDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *GenerativeAiEndpointsDataSourceCrud) Get() error {
	request := oci_generative_ai.ListEndpointsRequest{}
func (s *GenerativeAiEndpointsDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/generative_ai/generative_ai_model_resource.go ===
func GenerativeAiModelResource() *schema.Resource {
	return &schema.Resource{
func createGenerativeAiModel(d *schema.ResourceData, m interface{}) error {
	sync := &GenerativeAiModelResourceCrud{}
func readGenerativeAiModel(d *schema.ResourceData, m interface{}) error {
	sync := &GenerativeAiModelResourceCrud{}
func updateGenerativeAiModel(d *schema.ResourceData, m interface{}) error {
	sync := &GenerativeAiModelResourceCrud{}
func deleteGenerativeAiModel(d *schema.ResourceData, m interface{}) error {
	sync := &GenerativeAiModelResourceCrud{}
func (s *GenerativeAiModelResourceCrud) ID() string {
	return *s.Res.Id
func (s *GenerativeAiModelResourceCrud) CreatedPending() []string {
	return []string{
func (s *GenerativeAiModelResourceCrud) CreatedTarget() []string {
	return []string{
func (s *GenerativeAiModelResourceCrud) DeletedPending() []string {
	return []string{
func (s *GenerativeAiModelResourceCrud) DeletedTarget() []string {
	return []string{
func (s *GenerativeAiModelResourceCrud) Create() error {
	request := oci_generative_ai.CreateModelRequest{}
func (s *GenerativeAiModelResourceCrud) getModelFromWorkRequest(workId *string, retryPolicy *oci_common.RetryPolicy,
	actionTypeEnum oci_generative_ai.ActionTypeEnum, timeout time.Duration) error {
func (s *GenerativeAiModelResourceCrud) Get() error {
	request := oci_generative_ai.GetModelRequest{}
func (s *GenerativeAiModelResourceCrud) Update() error {
	if compartment, ok := s.D.GetOkExists("compartment_id"); ok && s.D.HasChange("compartment_id") {
func (s *GenerativeAiModelResourceCrud) Delete() error {
	request := oci_generative_ai.DeleteModelRequest{}
func (s *GenerativeAiModelResourceCrud) SetData() error {
	if s.Res.BaseModelId != nil {
func (s *GenerativeAiModelResourceCrud) mapToDataset(fieldKeyFormat string) (oci_generative_ai.Dataset, error) {
	var baseObject oci_generative_ai.Dataset
func (s *GenerativeAiModelResourceCrud) mapToFineTuneDetails(fieldKeyFormat string) (oci_generative_ai.FineTuneDetails, error) {
	result := oci_generative_ai.FineTuneDetails{}
func (s *GenerativeAiModelResourceCrud) mapToTrainingConfig(fieldKeyFormat string) (oci_generative_ai.TrainingConfig, error) {
	var baseObject oci_generative_ai.TrainingConfig
func (s *GenerativeAiModelResourceCrud) updateCompartment(compartment interface{}) error {
	changeCompartmentRequest := oci_generative_ai.ChangeModelCompartmentRequest{}

=== ./internal/service/generative_ai/generative_ai_dedicated_ai_clusters_data_source.go ===
func GenerativeAiDedicatedAiClustersDataSource() *schema.Resource {
	return &schema.Resource{
func readGenerativeAiDedicatedAiClusters(d *schema.ResourceData, m interface{}) error {
	sync := &GenerativeAiDedicatedAiClustersDataSourceCrud{}
func (s *GenerativeAiDedicatedAiClustersDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *GenerativeAiDedicatedAiClustersDataSourceCrud) Get() error {
	request := oci_generative_ai.ListDedicatedAiClustersRequest{}
func (s *GenerativeAiDedicatedAiClustersDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/generative_ai/generative_ai_dedicated_ai_cluster_resource.go ===
func GenerativeAiDedicatedAiClusterResource() *schema.Resource {
	return &schema.Resource{
func createGenerativeAiDedicatedAiCluster(d *schema.ResourceData, m interface{}) error {
	sync := &GenerativeAiDedicatedAiClusterResourceCrud{}
func readGenerativeAiDedicatedAiCluster(d *schema.ResourceData, m interface{}) error {
	sync := &GenerativeAiDedicatedAiClusterResourceCrud{}
func updateGenerativeAiDedicatedAiCluster(d *schema.ResourceData, m interface{}) error {
	sync := &GenerativeAiDedicatedAiClusterResourceCrud{}
func deleteGenerativeAiDedicatedAiCluster(d *schema.ResourceData, m interface{}) error {
	sync := &GenerativeAiDedicatedAiClusterResourceCrud{}
func (s *GenerativeAiDedicatedAiClusterResourceCrud) ID() string {
	return *s.Res.Id
func (s *GenerativeAiDedicatedAiClusterResourceCrud) CreatedPending() []string {
	return []string{
func (s *GenerativeAiDedicatedAiClusterResourceCrud) CreatedTarget() []string {
	return []string{
func (s *GenerativeAiDedicatedAiClusterResourceCrud) DeletedPending() []string {
	return []string{
func (s *GenerativeAiDedicatedAiClusterResourceCrud) DeletedTarget() []string {
	return []string{
func (s *GenerativeAiDedicatedAiClusterResourceCrud) Create() error {
	request := oci_generative_ai.CreateDedicatedAiClusterRequest{}
func (s *GenerativeAiDedicatedAiClusterResourceCrud) getDedicatedAiClusterFromWorkRequest(workId *string, retryPolicy *oci_common.RetryPolicy,
	actionTypeEnum oci_generative_ai.ActionTypeEnum, timeout time.Duration) error {
func (s *GenerativeAiDedicatedAiClusterResourceCrud) Get() error {
	request := oci_generative_ai.GetDedicatedAiClusterRequest{}
func (s *GenerativeAiDedicatedAiClusterResourceCrud) Update() error {
	if compartment, ok := s.D.GetOkExists("compartment_id"); ok && s.D.HasChange("compartment_id") {
func (s *GenerativeAiDedicatedAiClusterResourceCrud) Delete() error {
	request := oci_generative_ai.DeleteDedicatedAiClusterRequest{}
func (s *GenerativeAiDedicatedAiClusterResourceCrud) SetData() error {
	if s.Res.Capacity != nil {
func (s *GenerativeAiDedicatedAiClusterResourceCrud) updateCompartment(compartment interface{}) error {
	changeCompartmentRequest := oci_generative_ai.ChangeDedicatedAiClusterCompartmentRequest{}

=== ./internal/service/generative_ai/generative_ai_model_data_source.go ===
func GenerativeAiModelDataSource() *schema.Resource {
	fieldMap := make(map[string]*schema.Schema)
func readSingularGenerativeAiModel(d *schema.ResourceData, m interface{}) error {
	sync := &GenerativeAiModelDataSourceCrud{}
func (s *GenerativeAiModelDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *GenerativeAiModelDataSourceCrud) Get() error {
	request := oci_generative_ai.GetModelRequest{}
func (s *GenerativeAiModelDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/generative_ai/generative_ai_dedicated_ai_cluster_data_source.go ===
func GenerativeAiDedicatedAiClusterDataSource() *schema.Resource {
	fieldMap := make(map[string]*schema.Schema)
func readSingularGenerativeAiDedicatedAiCluster(d *schema.ResourceData, m interface{}) error {
	sync := &GenerativeAiDedicatedAiClusterDataSourceCrud{}
func (s *GenerativeAiDedicatedAiClusterDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *GenerativeAiDedicatedAiClusterDataSourceCrud) Get() error {
	request := oci_generative_ai.GetDedicatedAiClusterRequest{}
func (s *GenerativeAiDedicatedAiClusterDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/generative_ai/generative_ai_export.go ===
func processExcludingBaseModels(ctx *tf_export.ResourceDiscoveryContext, resources []*tf_export.OCIResource) ([]*tf_export.OCIResource, error) {
	results := []*tf_export.OCIResource{}

=== ./internal/service/generative_ai/generative_ai_endpoint_resource.go ===
func GenerativeAiEndpointResource() *schema.Resource {
	return &schema.Resource{
func createGenerativeAiEndpoint(d *schema.ResourceData, m interface{}) error {
	sync := &GenerativeAiEndpointResourceCrud{}
func readGenerativeAiEndpoint(d *schema.ResourceData, m interface{}) error {
	sync := &GenerativeAiEndpointResourceCrud{}
func updateGenerativeAiEndpoint(d *schema.ResourceData, m interface{}) error {
	sync := &GenerativeAiEndpointResourceCrud{}
func deleteGenerativeAiEndpoint(d *schema.ResourceData, m interface{}) error {
	sync := &GenerativeAiEndpointResourceCrud{}
func (s *GenerativeAiEndpointResourceCrud) ID() string {
	return *s.Res.Id
func (s *GenerativeAiEndpointResourceCrud) CreatedPending() []string {
	return []string{
func (s *GenerativeAiEndpointResourceCrud) CreatedTarget() []string {
	return []string{
func (s *GenerativeAiEndpointResourceCrud) DeletedPending() []string {
	return []string{
func (s *GenerativeAiEndpointResourceCrud) DeletedTarget() []string {
	return []string{
func (s *GenerativeAiEndpointResourceCrud) Create() error {
	request := oci_generative_ai.CreateEndpointRequest{}
func (s *GenerativeAiEndpointResourceCrud) getEndpointFromWorkRequest(workId *string, retryPolicy *oci_common.RetryPolicy,
	actionTypeEnum oci_generative_ai.ActionTypeEnum, timeout time.Duration) error {
func (s *GenerativeAiEndpointResourceCrud) Get() error {
	request := oci_generative_ai.GetEndpointRequest{}
func (s *GenerativeAiEndpointResourceCrud) Update() error {
	if compartment, ok := s.D.GetOkExists("compartment_id"); ok && s.D.HasChange("compartment_id") {
func (s *GenerativeAiEndpointResourceCrud) Delete() error {
	request := oci_generative_ai.DeleteEndpointRequest{}
func (s *GenerativeAiEndpointResourceCrud) SetData() error {
	if s.Res.CompartmentId != nil {
func (s *GenerativeAiEndpointResourceCrud) mapToContentModerationConfig(fieldKeyFormat string) (oci_generative_ai.ContentModerationConfig, error) {
	result := oci_generative_ai.ContentModerationConfig{}
func (s *GenerativeAiEndpointResourceCrud) updateCompartment(compartment interface{}) error {
	changeCompartmentRequest := oci_generative_ai.ChangeEndpointCompartmentRequest{}

=== ./internal/service/generative_ai/register_resource.go ===
func RegisterResource() {
	tfresource.RegisterResource("oci_generative_ai_dedicated_ai_cluster", GenerativeAiDedicatedAiClusterResource())

=== ./internal/service/generative_ai/generative_ai_models_data_source.go ===
func GenerativeAiModelsDataSource() *schema.Resource {
	return &schema.Resource{
func readGenerativeAiModels(d *schema.ResourceData, m interface{}) error {
	sync := &GenerativeAiModelsDataSourceCrud{}
func (s *GenerativeAiModelsDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *GenerativeAiModelsDataSourceCrud) Get() error {
	request := oci_generative_ai.ListModelsRequest{}
func (s *GenerativeAiModelsDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/opsi/opsi_operations_insights_warehouse_data_source.go ===
func OpsiOperationsInsightsWarehouseDataSource() *schema.Resource {
	fieldMap := make(map[string]*schema.Schema)
func readSingularOpsiOperationsInsightsWarehouse(d *schema.ResourceData, m interface{}) error {
	sync := &OpsiOperationsInsightsWarehouseDataSourceCrud{}
func (s *OpsiOperationsInsightsWarehouseDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *OpsiOperationsInsightsWarehouseDataSourceCrud) Get() error {
	request := oci_opsi.GetOperationsInsightsWarehouseRequest{}
func (s *OpsiOperationsInsightsWarehouseDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/opsi/opsi_opsi_configuration_configuration_item_data_source.go ===
func OpsiOpsiConfigurationConfigurationItemDataSource() *schema.Resource {
	return &schema.Resource{
func readSingularOpsiOpsiConfigurationConfigurationItem(d *schema.ResourceData, m interface{}) error {
	sync := &OpsiOpsiConfigurationConfigurationItemDataSourceCrud{}
func (s *OpsiOpsiConfigurationConfigurationItemDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *OpsiOpsiConfigurationConfigurationItemDataSourceCrud) Get() error {
	request := oci_opsi.SummarizeConfigurationItemsRequest{}
func (s *OpsiOpsiConfigurationConfigurationItemDataSourceCrud) SetData() error {
	if s.Res == nil {
func (s *OpsiOpsiConfigurationConfigurationItemDataSourceCrud) mapToConfigurationItemAllowedValueDetails(fieldKeyFormat string) (oci_opsi.ConfigurationItemAllowedValueDetails, error) {
	var baseObject oci_opsi.ConfigurationItemAllowedValueDetails
func (s *OpsiOpsiConfigurationConfigurationItemDataSourceCrud) mapToConfigurationItemMetadata(fieldKeyFormat string) (oci_opsi.ConfigurationItemMetadata, error) {
	var baseObject oci_opsi.ConfigurationItemMetadata
func (s *OpsiOpsiConfigurationConfigurationItemDataSourceCrud) mapToConfigurationItemUnitDetails(fieldKeyFormat string) (oci_opsi.ConfigurationItemUnitDetails, error) {
	result := oci_opsi.ConfigurationItemUnitDetails{}

=== ./internal/service/opsi/opsi_exadata_insight_resource.go ===
func OpsiExadataInsightResource() *schema.Resource {
	return &schema.Resource{
func createOpsiExadataInsight(d *schema.ResourceData, m interface{}) error {
	sync := &OpsiExadataInsightResourceCrud{}
func readOpsiExadataInsight(d *schema.ResourceData, m interface{}) error {
	sync := &OpsiExadataInsightResourceCrud{}
func updateOpsiExadataInsight(d *schema.ResourceData, m interface{}) error {
	sync := &OpsiExadataInsightResourceCrud{}
func deleteOpsiExadataInsight(d *schema.ResourceData, m interface{}) error {
	sync := &OpsiExadataInsightResourceCrud{}
func (s *OpsiExadataInsightResourceCrud) ID() string {
	exadataInsight := *s.Res
func (s *OpsiExadataInsightResourceCrud) CreatedPending() []string {
	return []string{
func (s *OpsiExadataInsightResourceCrud) CreatedTarget() []string {
	return []string{
func (s *OpsiExadataInsightResourceCrud) DeletedPending() []string {
	return []string{
func (s *OpsiExadataInsightResourceCrud) DeletedTarget() []string {
	return []string{
func (s *OpsiExadataInsightResourceCrud) Create() error {
	request := oci_opsi.CreateExadataInsightRequest{}
func (s *OpsiExadataInsightResourceCrud) getExadataInsightFromWorkRequest(workId *string, retryPolicy *oci_common.RetryPolicy,
	actionTypeEnum oci_opsi.ActionTypeEnum, timeout time.Duration) error {
func (s *OpsiExadataInsightResourceCrud) Get() error {
	request := oci_opsi.GetExadataInsightRequest{}
func (s *OpsiExadataInsightResourceCrud) Update() error {
	if compartment, ok := s.D.GetOkExists("compartment_id"); ok && s.D.HasChange("compartment_id") {
func (s *OpsiExadataInsightResourceCrud) Delete() error {
	status, ok := s.D.GetOkExists("status")
func (s *OpsiExadataInsightResourceCrud) SetData() error {
	switch v := (*s.Res).(type) {
func (s *OpsiExadataInsightResourceCrud) mapToConnectionDetails(fieldKeyFormat string) (oci_opsi.ConnectionDetails, error) {
	result := oci_opsi.ConnectionDetails{}
func (s *OpsiExadataInsightResourceCrud) mapToCreateEmManagedExternalExadataMemberEntityDetails(fieldKeyFormat string) (oci_opsi.CreateEmManagedExternalExadataMemberEntityDetails, error) {
	result := oci_opsi.CreateEmManagedExternalExadataMemberEntityDetails{}
func (s *OpsiExadataInsightResourceCrud) mapToCreateMacsManagedCloudDatabaseInsightDetails(fieldKeyFormat string) (oci_opsi.CreateMacsManagedCloudDatabaseInsightDetails, error) {
	result := oci_opsi.CreateMacsManagedCloudDatabaseInsightDetails{}
func (s *OpsiExadataInsightResourceCrud) mapToCreateMacsManagedCloudExadataVmclusterDetails(fieldKeyFormat string) (oci_opsi.CreateMacsManagedCloudExadataVmclusterDetails, error) {
	result := oci_opsi.CreateMacsManagedCloudExadataVmclusterDetails{}
func (s *OpsiExadataInsightResourceCrud) mapToCreatePeComanagedDatabaseInsightDetails(fieldKeyFormat string) (oci_opsi.CreatePeComanagedDatabaseInsightDetails, error) {
	result := oci_opsi.CreatePeComanagedDatabaseInsightDetails{}
func (s *OpsiExadataInsightResourceCrud) mapToCreatePeComanagedExadataVmclusterDetails(fieldKeyFormat string) (oci_opsi.CreatePeComanagedExadataVmclusterDetails, error) {
	result := oci_opsi.CreatePeComanagedExadataVmclusterDetails{}
func (s *OpsiExadataInsightResourceCrud) mapToCredentialDetails(fieldKeyFormat string) (oci_opsi.CredentialDetails, error) {
	var baseObject oci_opsi.CredentialDetails
func (s *OpsiExadataInsightResourceCrud) mapToPeComanagedDatabaseConnectionDetails(fieldKeyFormat string) (oci_opsi.PeComanagedDatabaseConnectionDetails, error) {
	result := oci_opsi.PeComanagedDatabaseConnectionDetails{}
func (s *OpsiExadataInsightResourceCrud) mapToPeComanagedDatabaseHostDetails(fieldKeyFormat string) (oci_opsi.PeComanagedDatabaseHostDetails, error) {
	result := oci_opsi.PeComanagedDatabaseHostDetails{}
func (s *OpsiExadataInsightResourceCrud) populateTopLevelPolymorphicCreateExadataInsightRequest(request *oci_opsi.CreateExadataInsightRequest) error {
	//discriminator
func (s *OpsiExadataInsightResourceCrud) populateTopLevelPolymorphicUpdateExadataInsightRequest(request *oci_opsi.UpdateExadataInsightRequest) error {
	//discriminator
func (s *OpsiExadataInsightResourceCrud) populateTopLevelPolymorphicEnableExadataInsightRequest(request *oci_opsi.EnableExadataInsightRequest) error {
	//discriminator
func (s *OpsiExadataInsightResourceCrud) updateCompartment(compartment interface{}) error {
	changeCompartmentRequest := oci_opsi.ChangeExadataInsightCompartmentRequest{}

=== ./internal/service/opsi/opsi_database_insight_resource.go ===
func OpsiDatabaseInsightResource() *schema.Resource {
	return &schema.Resource{
func createOpsiDatabaseInsight(d *schema.ResourceData, m interface{}) error {
	sync := &OpsiDatabaseInsightResourceCrud{}
func readOpsiDatabaseInsight(d *schema.ResourceData, m interface{}) error {
	sync := &OpsiDatabaseInsightResourceCrud{}
func updateOpsiDatabaseInsight(d *schema.ResourceData, m interface{}) error {
	sync := &OpsiDatabaseInsightResourceCrud{}
func deleteOpsiDatabaseInsight(d *schema.ResourceData, m interface{}) error {
	sync := &OpsiDatabaseInsightResourceCrud{}
func (s *OpsiDatabaseInsightResourceCrud) ID() string {
	databaseInsight := *s.Res
func (s *OpsiDatabaseInsightResourceCrud) CreatedPending() []string {
	return []string{
func (s *OpsiDatabaseInsightResourceCrud) CreatedTarget() []string {
	return []string{
func (s *OpsiDatabaseInsightResourceCrud) DeletedPending() []string {
	return []string{
func (s *OpsiDatabaseInsightResourceCrud) DeletedTarget() []string {
	return []string{
func (s *OpsiDatabaseInsightResourceCrud) Create() error {
	request := oci_opsi.CreateDatabaseInsightRequest{}
func (s *OpsiDatabaseInsightResourceCrud) getDatabaseInsightFromWorkRequest(workId *string, retryPolicy *oci_common.RetryPolicy,
	actionTypeEnum oci_opsi.ActionTypeEnum, timeout time.Duration) error {
func (s *OpsiDatabaseInsightResourceCrud) Get() error {
	request := oci_opsi.GetDatabaseInsightRequest{}
func (s *OpsiDatabaseInsightResourceCrud) Update() error {
	if compartment, ok := s.D.GetOkExists("compartment_id"); ok && s.D.HasChange("compartment_id") {
func (s *OpsiDatabaseInsightResourceCrud) Delete() error {
	status, ok := s.D.GetOkExists("status")
func (s *OpsiDatabaseInsightResourceCrud) SetData() error {
	switch v := (*s.Res).(type) {
func (s *OpsiDatabaseInsightResourceCrud) mapToConnectionDetails(fieldKeyFormat string) (oci_opsi.ConnectionDetails, error) {
	result := oci_opsi.ConnectionDetails{}
func (s *OpsiDatabaseInsightResourceCrud) mapToCredentialDetails(fieldKeyFormat string) (oci_opsi.CredentialDetails, error) {
	var baseObject oci_opsi.CredentialDetails
func (s *OpsiDatabaseInsightResourceCrud) mapToPeComanagedDatabaseConnectionDetails(fieldKeyFormat string) (oci_opsi.PeComanagedDatabaseConnectionDetails, error) {
	result := oci_opsi.PeComanagedDatabaseConnectionDetails{}
func (s *OpsiDatabaseInsightResourceCrud) mapToPeComanagedDatabaseHostDetails(fieldKeyFormat string) (oci_opsi.PeComanagedDatabaseHostDetails, error) {
	result := oci_opsi.PeComanagedDatabaseHostDetails{}
func (s *OpsiDatabaseInsightResourceCrud) populateChangePeComanagedDatabaseInsightRequest(updateRequest *oci_opsi.ChangePeComanagedDatabaseInsightRequest) bool {
	hasChanged := false
func (s *OpsiDatabaseInsightResourceCrud) populateUpdateAdbFullFeatureRequest(updateRequest *oci_opsi.ChangeAutonomousDatabaseInsightAdvancedFeaturesRequest) bool {
	hasChanged := false
func (s *OpsiDatabaseInsightResourceCrud) populateChangeMacsCloudConnectionDetailsRequest(updateRequest *oci_opsi.ChangeMacsManagedCloudDatabaseInsightConnectionRequest) bool {
	hasChanged := false
func (s *OpsiDatabaseInsightResourceCrud) populateTopLevelPolymorphicCreateDatabaseInsightRequest(request *oci_opsi.CreateDatabaseInsightRequest) error {
	//discriminator
func (s *OpsiDatabaseInsightResourceCrud) populateTopLevelPolymorphicUpdateDatabaseInsightRequest(request *oci_opsi.UpdateDatabaseInsightRequest) error {
	//discriminator
func (s *OpsiDatabaseInsightResourceCrud) populateTopLevelPolymorphicEnableDatabaseInsightRequest(request *oci_opsi.EnableDatabaseInsightRequest) error {
	//discriminator
func (s *OpsiDatabaseInsightResourceCrud) updateCompartment(compartment interface{}) error {
	changeCompartmentRequest := oci_opsi.ChangeDatabaseInsightCompartmentRequest{}
func (s *OpsiDatabaseInsightResourceCrud) updatePecomanagedDetails(updateRequest *oci_opsi.ChangePeComanagedDatabaseInsightRequest) error {
	idTmp := s.D.Id()
func (s *OpsiDatabaseInsightResourceCrud) updateConnectionDetails(changeConnectionRequest *oci_opsi.ChangeMacsManagedCloudDatabaseInsightConnectionRequest) error {
	idTmp := s.D.Id()
func (s *OpsiDatabaseInsightResourceCrud) updateAdbFullFeatures(changeRequest *oci_opsi.ChangeAutonomousDatabaseInsightAdvancedFeaturesRequest) error {
	idTmp := s.D.Id()

=== ./internal/service/opsi/opsi_operations_insights_warehouses_data_source.go ===
func OpsiOperationsInsightsWarehousesDataSource() *schema.Resource {
	return &schema.Resource{
func readOpsiOperationsInsightsWarehouses(d *schema.ResourceData, m interface{}) error {
	sync := &OpsiOperationsInsightsWarehousesDataSourceCrud{}
func (s *OpsiOperationsInsightsWarehousesDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *OpsiOperationsInsightsWarehousesDataSourceCrud) Get() error {
	request := oci_opsi.ListOperationsInsightsWarehousesRequest{}
func (s *OpsiOperationsInsightsWarehousesDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/opsi/opsi_awr_hub_source_resource.go ===
func OpsiAwrHubSourceResource() *schema.Resource {
	return &schema.Resource{
func createOpsiAwrHubSource(d *schema.ResourceData, m interface{}) error {
	sync := &OpsiAwrHubSourceResourceCrud{}
func readOpsiAwrHubSource(d *schema.ResourceData, m interface{}) error {
	sync := &OpsiAwrHubSourceResourceCrud{}
func updateOpsiAwrHubSource(d *schema.ResourceData, m interface{}) error {
	sync := &OpsiAwrHubSourceResourceCrud{}
func deleteOpsiAwrHubSource(d *schema.ResourceData, m interface{}) error {
	sync := &OpsiAwrHubSourceResourceCrud{}
func (s *OpsiAwrHubSourceResourceCrud) ID() string {
	return *s.Res.Id
func (s *OpsiAwrHubSourceResourceCrud) CreatedPending() []string {
	return []string{
func (s *OpsiAwrHubSourceResourceCrud) CreatedTarget() []string {
	return []string{
func (s *OpsiAwrHubSourceResourceCrud) DeletedPending() []string {
	return []string{
func (s *OpsiAwrHubSourceResourceCrud) DeletedTarget() []string {
	return []string{
func (s *OpsiAwrHubSourceResourceCrud) Create() error {
	request := oci_opsi.CreateAwrHubSourceRequest{}
func (s *OpsiAwrHubSourceResourceCrud) getAwrHubSourceFromWorkRequest(workId *string, retryPolicy *oci_common.RetryPolicy,
	actionTypeEnum oci_opsi.ActionTypeEnum, timeout time.Duration) error {
func (s *OpsiAwrHubSourceResourceCrud) Get() error {
	request := oci_opsi.GetAwrHubSourceRequest{}
func (s *OpsiAwrHubSourceResourceCrud) Update() error {
	if compartment, ok := s.D.GetOkExists("compartment_id"); ok && s.D.HasChange("compartment_id") {
func (s *OpsiAwrHubSourceResourceCrud) Delete() error {
	request := oci_opsi.DeleteAwrHubSourceRequest{}
func (s *OpsiAwrHubSourceResourceCrud) SetData() error {
	if s.Res.AssociatedOpsiId != nil {
func (s *OpsiAwrHubSourceResourceCrud) updateCompartment(compartment interface{}) error {
	changeCompartmentRequest := oci_opsi.ChangeAwrHubSourceCompartmentRequest{}

=== ./internal/service/opsi/opsi_operations_insights_warehouse_resource_usage_summary_data_source.go ===
func OpsiOperationsInsightsWarehouseResourceUsageSummaryDataSource() *schema.Resource {
	return &schema.Resource{
func readSingularOpsiOperationsInsightsWarehouseResourceUsageSummary(d *schema.ResourceData, m interface{}) error {
	sync := &OpsiOperationsInsightsWarehouseResourceUsageSummaryDataSourceCrud{}
func (s *OpsiOperationsInsightsWarehouseResourceUsageSummaryDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *OpsiOperationsInsightsWarehouseResourceUsageSummaryDataSourceCrud) Get() error {
	request := oci_opsi.SummarizeOperationsInsightsWarehouseResourceUsageRequest{}
func (s *OpsiOperationsInsightsWarehouseResourceUsageSummaryDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/opsi/opsi_exadata_insights_data_source.go ===
func OpsiExadataInsightsDataSource() *schema.Resource {
	return &schema.Resource{
func readOpsiExadataInsights(d *schema.ResourceData, m interface{}) error {
	sync := &OpsiExadataInsightsDataSourceCrud{}
func (s *OpsiExadataInsightsDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *OpsiExadataInsightsDataSourceCrud) Get() error {
	request := oci_opsi.ListExadataInsightsRequest{}
func (s *OpsiExadataInsightsDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/opsi/opsi_host_insight_data_source.go ===
func OpsiHostInsightDataSource() *schema.Resource {
	fieldMap := make(map[string]*schema.Schema)
func readSingularOpsiHostInsight(d *schema.ResourceData, m interface{}) error {
	sync := &OpsiHostInsightDataSourceCrud{}
func (s *OpsiHostInsightDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *OpsiHostInsightDataSourceCrud) Get() error {
	request := oci_opsi.GetHostInsightRequest{}
func (s *OpsiHostInsightDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/opsi/opsi_awr_hub_source_data_source.go ===
func OpsiAwrHubSourceDataSource() *schema.Resource {
	fieldMap := make(map[string]*schema.Schema)
func readSingularOpsiAwrHubSource(d *schema.ResourceData, m interface{}) error {
	sync := &OpsiAwrHubSourceDataSourceCrud{}
func (s *OpsiAwrHubSourceDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *OpsiAwrHubSourceDataSourceCrud) Get() error {
	request := oci_opsi.GetAwrHubSourceRequest{}
func (s *OpsiAwrHubSourceDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/opsi/opsi_awr_hub_awr_snapshots_data_source.go ===
func OpsiAwrHubAwrSnapshotsDataSource() *schema.Resource {
	return &schema.Resource{
func readOpsiAwrHubAwrSnapshots(d *schema.ResourceData, m interface{}) error {
	sync := &OpsiAwrHubAwrSnapshotsDataSourceCrud{}
func (s *OpsiAwrHubAwrSnapshotsDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *OpsiAwrHubAwrSnapshotsDataSourceCrud) Get() error {
	request := oci_opsi.ListAwrSnapshotsRequest{}
func (s *OpsiAwrHubAwrSnapshotsDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/opsi/opsi_importable_agent_entities_data_source.go ===
func OpsiImportableAgentEntitiesDataSource() *schema.Resource {
	return &schema.Resource{
func readOpsiImportableAgentEntities(d *schema.ResourceData, m interface{}) error {
	sync := &OpsiImportableAgentEntitiesDataSourceCrud{}
func (s *OpsiImportableAgentEntitiesDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *OpsiImportableAgentEntitiesDataSourceCrud) Get() error {
	request := oci_opsi.ListImportableAgentEntitiesRequest{}
func (s *OpsiImportableAgentEntitiesDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/opsi/opsi_awr_hub_resource.go ===
func OpsiAwrHubResource() *schema.Resource {
	return &schema.Resource{
func createOpsiAwrHub(d *schema.ResourceData, m interface{}) error {
	sync := &OpsiAwrHubResourceCrud{}
func readOpsiAwrHub(d *schema.ResourceData, m interface{}) error {
	sync := &OpsiAwrHubResourceCrud{}
func updateOpsiAwrHub(d *schema.ResourceData, m interface{}) error {
	sync := &OpsiAwrHubResourceCrud{}
func deleteOpsiAwrHub(d *schema.ResourceData, m interface{}) error {
	sync := &OpsiAwrHubResourceCrud{}
func (s *OpsiAwrHubResourceCrud) ID() string {
	return *s.Res.Id
func (s *OpsiAwrHubResourceCrud) CreatedPending() []string {
	return []string{
func (s *OpsiAwrHubResourceCrud) CreatedTarget() []string {
	return []string{
func (s *OpsiAwrHubResourceCrud) DeletedPending() []string {
	return []string{
func (s *OpsiAwrHubResourceCrud) DeletedTarget() []string {
	return []string{
func (s *OpsiAwrHubResourceCrud) Create() error {
	request := oci_opsi.CreateAwrHubRequest{}
func (s *OpsiAwrHubResourceCrud) getAwrHubFromWorkRequest(workId *string, retryPolicy *oci_common.RetryPolicy,
	actionTypeEnum oci_opsi.ActionTypeEnum, timeout time.Duration) error {
func (s *OpsiAwrHubResourceCrud) Get() error {
	request := oci_opsi.GetAwrHubRequest{}
func (s *OpsiAwrHubResourceCrud) Update() error {
	request := oci_opsi.UpdateAwrHubRequest{}
func (s *OpsiAwrHubResourceCrud) Delete() error {
	request := oci_opsi.DeleteAwrHubRequest{}
func (s *OpsiAwrHubResourceCrud) SetData() error {
	if s.Res.AwrMailboxUrl != nil {

=== ./internal/service/opsi/opsi_host_insight_resource.go ===
func OpsiHostInsightResource() *schema.Resource {
	return &schema.Resource{
func createOpsiHostInsight(d *schema.ResourceData, m interface{}) error {
	sync := &OpsiHostInsightResourceCrud{}
func readOpsiHostInsight(d *schema.ResourceData, m interface{}) error {
	sync := &OpsiHostInsightResourceCrud{}
func updateOpsiHostInsight(d *schema.ResourceData, m interface{}) error {
	sync := &OpsiHostInsightResourceCrud{}
func deleteOpsiHostInsight(d *schema.ResourceData, m interface{}) error {
	sync := &OpsiHostInsightResourceCrud{}
func (s *OpsiHostInsightResourceCrud) ID() string {
	hostInsight := *s.Res
func (s *OpsiHostInsightResourceCrud) CreatedPending() []string {
	return []string{
func (s *OpsiHostInsightResourceCrud) CreatedTarget() []string {
	return []string{
func (s *OpsiHostInsightResourceCrud) DeletedPending() []string {
	return []string{
func (s *OpsiHostInsightResourceCrud) DeletedTarget() []string {
	return []string{
func (s *OpsiHostInsightResourceCrud) Create() error {
	request := oci_opsi.CreateHostInsightRequest{}
func (s *OpsiHostInsightResourceCrud) getHostInsightFromWorkRequest(workId *string, retryPolicy *oci_common.RetryPolicy,
	actionTypeEnum oci_opsi.ActionTypeEnum, timeout time.Duration) error {
func (s *OpsiHostInsightResourceCrud) Get() error {
	request := oci_opsi.GetHostInsightRequest{}
func (s *OpsiHostInsightResourceCrud) Update() error {
	if compartment, ok := s.D.GetOkExists("compartment_id"); ok && s.D.HasChange("compartment_id") {
func (s *OpsiHostInsightResourceCrud) Delete() error {

func (s *OpsiHostInsightResourceCrud) SetData() error {
	switch v := (*s.Res).(type) {
func (s *OpsiHostInsightResourceCrud) populateTopLevelPolymorphicCreateHostInsightRequest(request *oci_opsi.CreateHostInsightRequest) error {
	//discriminator
func (s *OpsiHostInsightResourceCrud) populateTopLevelPolymorphicUpdateHostInsightRequest(request *oci_opsi.UpdateHostInsightRequest) error {
	//discriminator
func (s *OpsiHostInsightResourceCrud) populateTopLevelPolymorphicEnableHostInsightRequest(request *oci_opsi.EnableHostInsightRequest) error {
	//discriminator
func (s *OpsiHostInsightResourceCrud) updateCompartment(compartment interface{}) error {
	changeCompartmentRequest := oci_opsi.ChangeHostInsightCompartmentRequest{}

=== ./internal/service/opsi/opsi_importable_agent_entity_data_source.go ===
func OpsiImportableAgentEntityDataSource() *schema.Resource {
	return &schema.Resource{
func readSingularOpsiImportableAgentEntity(d *schema.ResourceData, m interface{}) error {
	sync := &OpsiImportableAgentEntityDataSourceCrud{}
func (s *OpsiImportableAgentEntityDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *OpsiImportableAgentEntityDataSourceCrud) Get() error {
	request := oci_opsi.ListImportableAgentEntitiesRequest{}
func (s *OpsiImportableAgentEntityDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/opsi/opsi_news_report_data_source.go ===
func OpsiNewsReportDataSource() *schema.Resource {
	fieldMap := make(map[string]*schema.Schema)
func readSingularOpsiNewsReport(d *schema.ResourceData, m interface{}) error {
	sync := &OpsiNewsReportDataSourceCrud{}
func (s *OpsiNewsReportDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *OpsiNewsReportDataSourceCrud) Get() error {
	request := oci_opsi.GetNewsReportRequest{}
func (s *OpsiNewsReportDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/opsi/opsi_database_insights_data_source.go ===
func OpsiDatabaseInsightsDataSource() *schema.Resource {
	return &schema.Resource{
func readOpsiDatabaseInsights(d *schema.ResourceData, m interface{}) error {
	sync := &OpsiDatabaseInsightsDataSourceCrud{}
func (s *OpsiDatabaseInsightsDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *OpsiDatabaseInsightsDataSourceCrud) Get() error {
	request := oci_opsi.ListDatabaseInsightsRequest{}
func (s *OpsiDatabaseInsightsDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/opsi/opsi_operations_insights_warehouse_resource.go ===
func OpsiOperationsInsightsWarehouseResource() *schema.Resource {
	return &schema.Resource{
func createOpsiOperationsInsightsWarehouse(d *schema.ResourceData, m interface{}) error {
	sync := &OpsiOperationsInsightsWarehouseResourceCrud{}
func readOpsiOperationsInsightsWarehouse(d *schema.ResourceData, m interface{}) error {
	sync := &OpsiOperationsInsightsWarehouseResourceCrud{}
func updateOpsiOperationsInsightsWarehouse(d *schema.ResourceData, m interface{}) error {
	sync := &OpsiOperationsInsightsWarehouseResourceCrud{}
func deleteOpsiOperationsInsightsWarehouse(d *schema.ResourceData, m interface{}) error {
	sync := &OpsiOperationsInsightsWarehouseResourceCrud{}
func (s *OpsiOperationsInsightsWarehouseResourceCrud) ID() string {
	return *s.Res.Id
func (s *OpsiOperationsInsightsWarehouseResourceCrud) CreatedPending() []string {
	return []string{
func (s *OpsiOperationsInsightsWarehouseResourceCrud) CreatedTarget() []string {
	return []string{
func (s *OpsiOperationsInsightsWarehouseResourceCrud) DeletedPending() []string {
	return []string{
func (s *OpsiOperationsInsightsWarehouseResourceCrud) DeletedTarget() []string {
	return []string{
func (s *OpsiOperationsInsightsWarehouseResourceCrud) Create() error {
	request := oci_opsi.CreateOperationsInsightsWarehouseRequest{}
func (s *OpsiOperationsInsightsWarehouseResourceCrud) getOperationsInsightsWarehouseFromWorkRequest(workId *string, retryPolicy *oci_common.RetryPolicy,
	actionTypeEnum oci_opsi.ActionTypeEnum, timeout time.Duration) error {
func (s *OpsiOperationsInsightsWarehouseResourceCrud) Get() error {
	request := oci_opsi.GetOperationsInsightsWarehouseRequest{}
func (s *OpsiOperationsInsightsWarehouseResourceCrud) Update() error {
	if compartment, ok := s.D.GetOkExists("compartment_id"); ok && s.D.HasChange("compartment_id") {
func (s *OpsiOperationsInsightsWarehouseResourceCrud) Delete() error {
	request := oci_opsi.DeleteOperationsInsightsWarehouseRequest{}
func (s *OpsiOperationsInsightsWarehouseResourceCrud) SetData() error {
	if s.Res.CompartmentId != nil {
func (s *OpsiOperationsInsightsWarehouseResourceCrud) updateCompartment(compartment interface{}) error {
	changeCompartmentRequest := oci_opsi.ChangeOperationsInsightsWarehouseCompartmentRequest{}

=== ./internal/service/opsi/opsi_awr_hubs_data_source.go ===
func OpsiAwrHubsDataSource() *schema.Resource {
	return &schema.Resource{
func readOpsiAwrHubs(d *schema.ResourceData, m interface{}) error {
	sync := &OpsiAwrHubsDataSourceCrud{}
func (s *OpsiAwrHubsDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *OpsiAwrHubsDataSourceCrud) Get() error {
	request := oci_opsi.ListAwrHubsRequest{}
func (s *OpsiAwrHubsDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/opsi/opsi_news_report_resource.go ===
func OpsiNewsReportResource() *schema.Resource {
	return &schema.Resource{
func createOpsiNewsReport(d *schema.ResourceData, m interface{}) error {
	sync := &OpsiNewsReportResourceCrud{}
func readOpsiNewsReport(d *schema.ResourceData, m interface{}) error {
	sync := &OpsiNewsReportResourceCrud{}
func updateOpsiNewsReport(d *schema.ResourceData, m interface{}) error {
	sync := &OpsiNewsReportResourceCrud{}
func deleteOpsiNewsReport(d *schema.ResourceData, m interface{}) error {
	sync := &OpsiNewsReportResourceCrud{}
func (s *OpsiNewsReportResourceCrud) ID() string {
	return *s.Res.Id
func (s *OpsiNewsReportResourceCrud) CreatedPending() []string {
	return []string{
func (s *OpsiNewsReportResourceCrud) CreatedTarget() []string {
	return []string{
func (s *OpsiNewsReportResourceCrud) DeletedPending() []string {
	return []string{
func (s *OpsiNewsReportResourceCrud) DeletedTarget() []string {
	return []string{
func (s *OpsiNewsReportResourceCrud) Create() error {
	request := oci_opsi.CreateNewsReportRequest{}
func (s *OpsiNewsReportResourceCrud) getNewsReportFromWorkRequest(workId *string, retryPolicy *oci_common.RetryPolicy,
	actionTypeEnum oci_opsi.ActionTypeEnum, timeout time.Duration) error {
func (s *OpsiNewsReportResourceCrud) Get() error {
	request := oci_opsi.GetNewsReportRequest{}
func (s *OpsiNewsReportResourceCrud) Update() error {
	if compartment, ok := s.D.GetOkExists("compartment_id"); ok && s.D.HasChange("compartment_id") {
func (s *OpsiNewsReportResourceCrud) Delete() error {
	request := oci_opsi.DeleteNewsReportRequest{}
func (s *OpsiNewsReportResourceCrud) SetData() error {
	if s.Res.AreChildCompartmentsIncluded != nil {
func (s *OpsiNewsReportResourceCrud) mapToNewsContentTypes(fieldKeyFormat string) (oci_opsi.NewsContentTypes, error) {
	result := oci_opsi.NewsContentTypes{}
func NewsContentTypesResourceToMap(obj oci_opsi.NewsContentTypesResourceEnum) string {
	var result string
func NewsSqlInsightsContentTypesResourceToMap(obj oci_opsi.NewsSqlInsightsContentTypesResourceEnum) string {
	var result string
func (s *OpsiNewsReportResourceCrud) updateCompartment(compartment interface{}) error {
	changeCompartmentRequest := oci_opsi.ChangeNewsReportCompartmentRequest{}

=== ./internal/service/opsi/opsi_database_insight_data_source.go ===
func OpsiDatabaseInsightDataSource() *schema.Resource {
	fieldMap := make(map[string]*schema.Schema)
func readSingularOpsiDatabaseInsight(d *schema.ResourceData, m interface{}) error {
	sync := &OpsiDatabaseInsightDataSourceCrud{}
func (s *OpsiDatabaseInsightDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *OpsiDatabaseInsightDataSourceCrud) Get() error {
	request := oci_opsi.GetDatabaseInsightRequest{}
func (s *OpsiDatabaseInsightDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/opsi/opsi_opsi_configuration_resource.go ===
func OpsiOpsiConfigurationResource() *schema.Resource {
	return &schema.Resource{
func createOpsiOpsiConfiguration(d *schema.ResourceData, m interface{}) error {
	sync := &OpsiOpsiConfigurationResourceCrud{}
func readOpsiOpsiConfiguration(d *schema.ResourceData, m interface{}) error {
	sync := &OpsiOpsiConfigurationResourceCrud{}
func updateOpsiOpsiConfiguration(d *schema.ResourceData, m interface{}) error {
	sync := &OpsiOpsiConfigurationResourceCrud{}
func deleteOpsiOpsiConfiguration(d *schema.ResourceData, m interface{}) error {
	sync := &OpsiOpsiConfigurationResourceCrud{}
func (s *OpsiOpsiConfigurationResourceCrud) ID() string {
	opsiConfiguration := *s.Res
func (s *OpsiOpsiConfigurationResourceCrud) CreatedPending() []string {
	return []string{
func (s *OpsiOpsiConfigurationResourceCrud) CreatedTarget() []string {
	return []string{
func (s *OpsiOpsiConfigurationResourceCrud) DeletedPending() []string {
	return []string{
func (s *OpsiOpsiConfigurationResourceCrud) DeletedTarget() []string {
	return []string{
func (s *OpsiOpsiConfigurationResourceCrud) Create() error {
	request := oci_opsi.CreateOpsiConfigurationRequest{}
func (s *OpsiOpsiConfigurationResourceCrud) getOpsiConfigurationFromWorkRequest(workId *string, retryPolicy *oci_common.RetryPolicy,
	actionTypeEnum oci_opsi.ActionTypeEnum, timeout time.Duration) error {
func (s *OpsiOpsiConfigurationResourceCrud) Get() error {
	request := oci_opsi.GetOpsiConfigurationRequest{}
func (s *OpsiOpsiConfigurationResourceCrud) Update() error {
	if compartment, ok := s.D.GetOkExists("compartment_id"); ok && s.D.HasChange("compartment_id") {
func (s *OpsiOpsiConfigurationResourceCrud) Delete() error {
	request := oci_opsi.DeleteOpsiConfigurationRequest{}
func (s *OpsiOpsiConfigurationResourceCrud) SetData() error {
	switch v := (*s.Res).(type) {
func (s *OpsiOpsiConfigurationResourceCrud) mapToConfigurationItemAllowedValueDetails(fieldKeyFormat string) (oci_opsi.ConfigurationItemAllowedValueDetails, error) {
	var baseObject oci_opsi.ConfigurationItemAllowedValueDetails
func (s *OpsiOpsiConfigurationResourceCrud) mapToConfigurationItemUnitDetails(fieldKeyFormat string) (oci_opsi.ConfigurationItemUnitDetails, error) {
	result := oci_opsi.ConfigurationItemUnitDetails{}
func (s *OpsiOpsiConfigurationResourceCrud) mapToCreateConfigurationItemDetails(fieldKeyFormat string) (oci_opsi.CreateConfigurationItemDetails, error) {
	var baseObject oci_opsi.CreateConfigurationItemDetails
func (s *OpsiOpsiConfigurationResourceCrud) mapToUpdateConfigurationItemDetails(fieldKeyFormat string) (oci_opsi.UpdateConfigurationItemDetails, error) {
	var baseObject oci_opsi.UpdateConfigurationItemDetails
func (s *OpsiOpsiConfigurationResourceCrud) populateTopLevelPolymorphicCreateOpsiConfigurationRequest(request *oci_opsi.CreateOpsiConfigurationRequest) error {
	//discriminator
func (s *OpsiOpsiConfigurationResourceCrud) populateTopLevelPolymorphicUpdateOpsiConfigurationRequest(request *oci_opsi.UpdateOpsiConfigurationRequest) error {
	//discriminator
func (s *OpsiOpsiConfigurationResourceCrud) updateCompartment(compartment interface{}) error {
	changeCompartmentRequest := oci_opsi.ChangeOpsiConfigurationCompartmentRequest{}

=== ./internal/service/opsi/opsi_host_insights_data_source.go ===
func OpsiHostInsightsDataSource() *schema.Resource {
	return &schema.Resource{
func readOpsiHostInsights(d *schema.ResourceData, m interface{}) error {
	sync := &OpsiHostInsightsDataSourceCrud{}
func (s *OpsiHostInsightsDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *OpsiHostInsightsDataSourceCrud) Get() error {
	request := oci_opsi.ListHostInsightsRequest{}
func (s *OpsiHostInsightsDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/opsi/opsi_opsi_configurations_data_source.go ===
func OpsiOpsiConfigurationsDataSource() *schema.Resource {
	return &schema.Resource{
func readOpsiOpsiConfigurations(d *schema.ResourceData, m interface{}) error {
	sync := &OpsiOpsiConfigurationsDataSourceCrud{}
func (s *OpsiOpsiConfigurationsDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *OpsiOpsiConfigurationsDataSourceCrud) Get() error {
	request := oci_opsi.ListOpsiConfigurationsRequest{}
func (s *OpsiOpsiConfigurationsDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/opsi/opsi_awr_hub_sources_data_source.go ===
func OpsiAwrHubSourcesDataSource() *schema.Resource {
	return &schema.Resource{
func readOpsiAwrHubSources(d *schema.ResourceData, m interface{}) error {
	sync := &OpsiAwrHubSourcesDataSourceCrud{}
func (s *OpsiAwrHubSourcesDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *OpsiAwrHubSourcesDataSourceCrud) Get() error {
	request := oci_opsi.ListAwrHubSourcesRequest{}
func (s *OpsiAwrHubSourcesDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/opsi/opsi_importable_compute_entity_data_source.go ===
func OpsiImportableComputeEntityDataSource() *schema.Resource {
	return &schema.Resource{
func readSingularOpsiImportableComputeEntity(d *schema.ResourceData, m interface{}) error {
	sync := &OpsiImportableComputeEntityDataSourceCrud{}
func (s *OpsiImportableComputeEntityDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *OpsiImportableComputeEntityDataSourceCrud) Get() error {
	request := oci_opsi.ListImportableComputeEntitiesRequest{}
func (s *OpsiImportableComputeEntityDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/opsi/opsi_operations_insights_private_endpoint_data_source.go ===
func OpsiOperationsInsightsPrivateEndpointDataSource() *schema.Resource {
	fieldMap := make(map[string]*schema.Schema)
func readSingularOpsiOperationsInsightsPrivateEndpoint(d *schema.ResourceData, m interface{}) error {
	sync := &OpsiOperationsInsightsPrivateEndpointDataSourceCrud{}
func (s *OpsiOperationsInsightsPrivateEndpointDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *OpsiOperationsInsightsPrivateEndpointDataSourceCrud) Get() error {
	request := oci_opsi.GetOperationsInsightsPrivateEndpointRequest{}
func (s *OpsiOperationsInsightsPrivateEndpointDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/opsi/opsi_importable_compute_entities_data_source.go ===
func OpsiImportableComputeEntitiesDataSource() *schema.Resource {
	return &schema.Resource{
func readOpsiImportableComputeEntities(d *schema.ResourceData, m interface{}) error {
	sync := &OpsiImportableComputeEntitiesDataSourceCrud{}
func (s *OpsiImportableComputeEntitiesDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *OpsiImportableComputeEntitiesDataSourceCrud) Get() error {
	request := oci_opsi.ListImportableComputeEntitiesRequest{}
func (s *OpsiImportableComputeEntitiesDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/opsi/opsi_exadata_insight_data_source.go ===
func OpsiExadataInsightDataSource() *schema.Resource {
	fieldMap := make(map[string]*schema.Schema)
func readSingularOpsiExadataInsight(d *schema.ResourceData, m interface{}) error {
	sync := &OpsiExadataInsightDataSourceCrud{}
func (s *OpsiExadataInsightDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *OpsiExadataInsightDataSourceCrud) Get() error {
	request := oci_opsi.GetExadataInsightRequest{}
func (s *OpsiExadataInsightDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/opsi/opsi_operations_insights_warehouse_user_resource.go ===
func OpsiOperationsInsightsWarehouseUserResource() *schema.Resource {
	return &schema.Resource{
func createOpsiOperationsInsightsWarehouseUser(d *schema.ResourceData, m interface{}) error {
	sync := &OpsiOperationsInsightsWarehouseUserResourceCrud{}
func readOpsiOperationsInsightsWarehouseUser(d *schema.ResourceData, m interface{}) error {
	sync := &OpsiOperationsInsightsWarehouseUserResourceCrud{}
func updateOpsiOperationsInsightsWarehouseUser(d *schema.ResourceData, m interface{}) error {
	sync := &OpsiOperationsInsightsWarehouseUserResourceCrud{}
func deleteOpsiOperationsInsightsWarehouseUser(d *schema.ResourceData, m interface{}) error {
	sync := &OpsiOperationsInsightsWarehouseUserResourceCrud{}
func (s *OpsiOperationsInsightsWarehouseUserResourceCrud) ID() string {
	return *s.Res.Id
func (s *OpsiOperationsInsightsWarehouseUserResourceCrud) CreatedPending() []string {
	return []string{
func (s *OpsiOperationsInsightsWarehouseUserResourceCrud) CreatedTarget() []string {
	return []string{
func (s *OpsiOperationsInsightsWarehouseUserResourceCrud) DeletedPending() []string {
	return []string{
func (s *OpsiOperationsInsightsWarehouseUserResourceCrud) DeletedTarget() []string {
	return []string{
func (s *OpsiOperationsInsightsWarehouseUserResourceCrud) Create() error {
	request := oci_opsi.CreateOperationsInsightsWarehouseUserRequest{}
func (s *OpsiOperationsInsightsWarehouseUserResourceCrud) getOperationsInsightsWarehouseUserFromWorkRequest(workId *string, retryPolicy *oci_common.RetryPolicy,
	actionTypeEnum oci_opsi.ActionTypeEnum, timeout time.Duration) error {
func (s *OpsiOperationsInsightsWarehouseUserResourceCrud) Get() error {
	request := oci_opsi.GetOperationsInsightsWarehouseUserRequest{}
func (s *OpsiOperationsInsightsWarehouseUserResourceCrud) Update() error {
	request := oci_opsi.UpdateOperationsInsightsWarehouseUserRequest{}
func (s *OpsiOperationsInsightsWarehouseUserResourceCrud) Delete() error {
	request := oci_opsi.DeleteOperationsInsightsWarehouseUserRequest{}
func (s *OpsiOperationsInsightsWarehouseUserResourceCrud) SetData() error {
	if s.Res.CompartmentId != nil {

=== ./internal/service/opsi/opsi_operations_insights_warehouse_user_data_source.go ===
func OpsiOperationsInsightsWarehouseUserDataSource() *schema.Resource {
	fieldMap := make(map[string]*schema.Schema)
func readSingularOpsiOperationsInsightsWarehouseUser(d *schema.ResourceData, m interface{}) error {
	sync := &OpsiOperationsInsightsWarehouseUserDataSourceCrud{}
func (s *OpsiOperationsInsightsWarehouseUserDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *OpsiOperationsInsightsWarehouseUserDataSourceCrud) Get() error {
	request := oci_opsi.GetOperationsInsightsWarehouseUserRequest{}
func (s *OpsiOperationsInsightsWarehouseUserDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/opsi/opsi_operations_insights_private_endpoint_resource.go ===
func OpsiOperationsInsightsPrivateEndpointResource() *schema.Resource {
	return &schema.Resource{
func createOpsiOperationsInsightsPrivateEndpoint(d *schema.ResourceData, m interface{}) error {
	sync := &OpsiOperationsInsightsPrivateEndpointResourceCrud{}
func readOpsiOperationsInsightsPrivateEndpoint(d *schema.ResourceData, m interface{}) error {
	sync := &OpsiOperationsInsightsPrivateEndpointResourceCrud{}
func updateOpsiOperationsInsightsPrivateEndpoint(d *schema.ResourceData, m interface{}) error {
	sync := &OpsiOperationsInsightsPrivateEndpointResourceCrud{}
func deleteOpsiOperationsInsightsPrivateEndpoint(d *schema.ResourceData, m interface{}) error {
	sync := &OpsiOperationsInsightsPrivateEndpointResourceCrud{}
func (s *OpsiOperationsInsightsPrivateEndpointResourceCrud) ID() string {
	return *s.Res.Id
func (s *OpsiOperationsInsightsPrivateEndpointResourceCrud) CreatedPending() []string {
	return []string{
func (s *OpsiOperationsInsightsPrivateEndpointResourceCrud) CreatedTarget() []string {
	return []string{
func (s *OpsiOperationsInsightsPrivateEndpointResourceCrud) DeletedPending() []string {
	return []string{
func (s *OpsiOperationsInsightsPrivateEndpointResourceCrud) DeletedTarget() []string {
	return []string{
func (s *OpsiOperationsInsightsPrivateEndpointResourceCrud) Create() error {
	request := oci_opsi.CreateOperationsInsightsPrivateEndpointRequest{}
func (s *OpsiOperationsInsightsPrivateEndpointResourceCrud) getOperationsInsightsPrivateEndpointFromWorkRequest(workId *string, retryPolicy *oci_common.RetryPolicy,
	actionTypeEnum oci_opsi.ActionTypeEnum, timeout time.Duration) error {
func (s *OpsiOperationsInsightsPrivateEndpointResourceCrud) Get() error {
	request := oci_opsi.GetOperationsInsightsPrivateEndpointRequest{}
func (s *OpsiOperationsInsightsPrivateEndpointResourceCrud) Update() error {
	if compartment, ok := s.D.GetOkExists("compartment_id"); ok && s.D.HasChange("compartment_id") {
func (s *OpsiOperationsInsightsPrivateEndpointResourceCrud) Delete() error {
	request := oci_opsi.DeleteOperationsInsightsPrivateEndpointRequest{}
func (s *OpsiOperationsInsightsPrivateEndpointResourceCrud) SetData() error {
	if s.Res.CompartmentId != nil {
func (s *OpsiOperationsInsightsPrivateEndpointResourceCrud) updateCompartment(compartment interface{}) error {
	changeCompartmentRequest := oci_opsi.ChangeOperationsInsightsPrivateEndpointCompartmentRequest{}

=== ./internal/service/opsi/opsi_enterprise_manager_bridge_data_source.go ===
func OpsiEnterpriseManagerBridgeDataSource() *schema.Resource {
	fieldMap := make(map[string]*schema.Schema)
func readSingularOpsiEnterpriseManagerBridge(d *schema.ResourceData, m interface{}) error {
	sync := &OpsiEnterpriseManagerBridgeDataSourceCrud{}
func (s *OpsiEnterpriseManagerBridgeDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *OpsiEnterpriseManagerBridgeDataSourceCrud) Get() error {
	request := oci_opsi.GetEnterpriseManagerBridgeRequest{}
func (s *OpsiEnterpriseManagerBridgeDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/opsi/opsi_awr_hub_data_source.go ===
func OpsiAwrHubDataSource() *schema.Resource {
	fieldMap := make(map[string]*schema.Schema)
func readSingularOpsiAwrHub(d *schema.ResourceData, m interface{}) error {
	sync := &OpsiAwrHubDataSourceCrud{}
func (s *OpsiAwrHubDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *OpsiAwrHubDataSourceCrud) Get() error {
	request := oci_opsi.GetAwrHubRequest{}
func (s *OpsiAwrHubDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/opsi/opsi_awr_hub_awr_snapshot_data_source.go ===
func OpsiAwrHubAwrSnapshotDataSource() *schema.Resource {
	return &schema.Resource{
func readSingularOpsiAwrHubAwrSnapshot(d *schema.ResourceData, m interface{}) error {
	sync := &OpsiAwrHubAwrSnapshotDataSourceCrud{}
func (s *OpsiAwrHubAwrSnapshotDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *OpsiAwrHubAwrSnapshotDataSourceCrud) Get() error {
	request := oci_opsi.ListAwrSnapshotsRequest{}
func (s *OpsiAwrHubAwrSnapshotDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/opsi/opsi_operations_insights_warehouse_users_data_source.go ===
func OpsiOperationsInsightsWarehouseUsersDataSource() *schema.Resource {
	return &schema.Resource{
func readOpsiOperationsInsightsWarehouseUsers(d *schema.ResourceData, m interface{}) error {
	sync := &OpsiOperationsInsightsWarehouseUsersDataSourceCrud{}
func (s *OpsiOperationsInsightsWarehouseUsersDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *OpsiOperationsInsightsWarehouseUsersDataSourceCrud) Get() error {
	request := oci_opsi.ListOperationsInsightsWarehouseUsersRequest{}
func (s *OpsiOperationsInsightsWarehouseUsersDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/opsi/opsi_operations_insights_warehouse_rotate_warehouse_wallet_resource.go ===
func OpsiOperationsInsightsWarehouseRotateWarehouseWalletResource() *schema.Resource {
	return &schema.Resource{
func createOpsiOperationsInsightsWarehouseRotateWarehouseWallet(d *schema.ResourceData, m interface{}) error {
	sync := &OpsiOperationsInsightsWarehouseRotateWarehouseWalletResourceCrud{}
func readOpsiOperationsInsightsWarehouseRotateWarehouseWallet(d *schema.ResourceData, m interface{}) error {
	return nil
func deleteOpsiOperationsInsightsWarehouseRotateWarehouseWallet(d *schema.ResourceData, m interface{}) error {
	return nil
func (s *OpsiOperationsInsightsWarehouseRotateWarehouseWalletResourceCrud) ID() string {
	return tfresource.GenerateDataSourceHashID("OpsiOperationsInsightsWarehouseRotateWarehouseWalletResource-", OpsiOperationsInsightsWarehouseRotateWarehouseWalletResource(), s.D)
func (s *OpsiOperationsInsightsWarehouseRotateWarehouseWalletResourceCrud) Create() error {
	request := oci_opsi.RotateOperationsInsightsWarehouseWalletRequest{}
func (s *OpsiOperationsInsightsWarehouseRotateWarehouseWalletResourceCrud) getOperationsInsightsWarehouseRotateWarehouseWalletFromWorkRequest(workId *string, retryPolicy *oci_common.RetryPolicy,
	actionTypeEnum oci_opsi.ActionTypeEnum, timeout time.Duration) error {
func (s *OpsiOperationsInsightsWarehouseRotateWarehouseWalletResourceCrud) SetData() error {
	return nil

=== ./internal/service/opsi/opsi_awr_hub_awr_sources_summary_data_source.go ===
func OpsiAwrHubAwrSourcesSummaryDataSource() *schema.Resource {
	return &schema.Resource{
func readSingularOpsiAwrHubAwrSourcesSummary(d *schema.ResourceData, m interface{}) error {
	sync := &OpsiAwrHubAwrSourcesSummaryDataSourceCrud{}
func (s *OpsiAwrHubAwrSourcesSummaryDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *OpsiAwrHubAwrSourcesSummaryDataSourceCrud) Get() error {
	request := oci_opsi.SummarizeAwrSourcesSummariesRequest{}
func (s *OpsiAwrHubAwrSourcesSummaryDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/opsi/opsi_enterprise_manager_bridge_resource.go ===
func OpsiEnterpriseManagerBridgeResource() *schema.Resource {
	return &schema.Resource{
func createOpsiEnterpriseManagerBridge(d *schema.ResourceData, m interface{}) error {
	sync := &OpsiEnterpriseManagerBridgeResourceCrud{}
func readOpsiEnterpriseManagerBridge(d *schema.ResourceData, m interface{}) error {
	sync := &OpsiEnterpriseManagerBridgeResourceCrud{}
func updateOpsiEnterpriseManagerBridge(d *schema.ResourceData, m interface{}) error {
	sync := &OpsiEnterpriseManagerBridgeResourceCrud{}
func deleteOpsiEnterpriseManagerBridge(d *schema.ResourceData, m interface{}) error {
	sync := &OpsiEnterpriseManagerBridgeResourceCrud{}
func (s *OpsiEnterpriseManagerBridgeResourceCrud) ID() string {
	return *s.Res.Id
func (s *OpsiEnterpriseManagerBridgeResourceCrud) CreatedPending() []string {
	return []string{
func (s *OpsiEnterpriseManagerBridgeResourceCrud) CreatedTarget() []string {
	return []string{
func (s *OpsiEnterpriseManagerBridgeResourceCrud) DeletedPending() []string {
	return []string{
func (s *OpsiEnterpriseManagerBridgeResourceCrud) DeletedTarget() []string {
	return []string{
func (s *OpsiEnterpriseManagerBridgeResourceCrud) Create() error {
	request := oci_opsi.CreateEnterpriseManagerBridgeRequest{}
func (s *OpsiEnterpriseManagerBridgeResourceCrud) getEnterpriseManagerBridgeFromWorkRequest(workId *string, retryPolicy *oci_common.RetryPolicy,
	actionTypeEnum oci_opsi.ActionTypeEnum, timeout time.Duration) error {
func (s *OpsiEnterpriseManagerBridgeResourceCrud) Get() error {
	request := oci_opsi.GetEnterpriseManagerBridgeRequest{}
func (s *OpsiEnterpriseManagerBridgeResourceCrud) Update() error {
	if compartment, ok := s.D.GetOkExists("compartment_id"); ok && s.D.HasChange("compartment_id") {
func (s *OpsiEnterpriseManagerBridgeResourceCrud) Delete() error {
	request := oci_opsi.DeleteEnterpriseManagerBridgeRequest{}
func (s *OpsiEnterpriseManagerBridgeResourceCrud) SetData() error {
	if s.Res.CompartmentId != nil {
func (s *OpsiEnterpriseManagerBridgeResourceCrud) updateCompartment(compartment interface{}) error {
	changeCompartmentRequest := oci_opsi.ChangeEnterpriseManagerBridgeCompartmentRequest{}

=== ./internal/service/opsi/opsi_news_reports_data_source.go ===
func OpsiNewsReportsDataSource() *schema.Resource {
	return &schema.Resource{
func readOpsiNewsReports(d *schema.ResourceData, m interface{}) error {
	sync := &OpsiNewsReportsDataSourceCrud{}
func (s *OpsiNewsReportsDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *OpsiNewsReportsDataSourceCrud) Get() error {
	request := oci_opsi.ListNewsReportsRequest{}
func (s *OpsiNewsReportsDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/opsi/opsi_operations_insights_warehouse_download_warehouse_wallet_resource.go ===
func OpsiOperationsInsightsWarehouseDownloadWarehouseWalletResource() *schema.Resource {
	return &schema.Resource{
func createOpsiOperationsInsightsWarehouseDownloadWarehouseWallet(d *schema.ResourceData, m interface{}) error {
	sync := &OpsiOperationsInsightsWarehouseDownloadWarehouseWalletResourceCrud{}
func readOpsiOperationsInsightsWarehouseDownloadWarehouseWallet(d *schema.ResourceData, m interface{}) error {
	return nil
func deleteOpsiOperationsInsightsWarehouseDownloadWarehouseWallet(d *schema.ResourceData, m interface{}) error {
	return nil
func (s *OpsiOperationsInsightsWarehouseDownloadWarehouseWalletResourceCrud) ID() string {
	return tfresource.GenerateDataSourceHashID("OpsiOperationsInsightsWarehouseDownloadWarehouseWalletResource-", OpsiOperationsInsightsWarehouseDownloadWarehouseWalletResource(), s.D)
func (s *OpsiOperationsInsightsWarehouseDownloadWarehouseWalletResourceCrud) Create() error {
	request := oci_opsi.DownloadOperationsInsightsWarehouseWalletRequest{}
func (s *OpsiOperationsInsightsWarehouseDownloadWarehouseWalletResourceCrud) SetData() error {
	return nil

=== ./internal/service/opsi/opsi_awr_hub_source_awrhubsources_management_resource.go ===
func OpsiAwrHubSourceAwrhubsourcesManagementResource() *schema.Resource {
	return &schema.Resource{
func createOpsiAwrHubSourceAwrhubsourcesManagement(d *schema.ResourceData, m interface{}) error {
	sync := &OpsiAwrHubSourceAwrhubsourcesManagementResourceCrud{}
func readOpsiAwrHubSourceAwrhubsourcesManagement(d *schema.ResourceData, m interface{}) error {
	return nil
func updateOpsiAwrHubSourceAwrhubsourcesManagement(d *schema.ResourceData, m interface{}) error {
	sync := &OpsiAwrHubSourceAwrhubsourcesManagementResourceCrud{}
func deleteOpsiAwrHubSourceAwrhubsourcesManagement(d *schema.ResourceData, m interface{}) error {
	sync := &OpsiAwrHubSourceAwrhubsourcesManagementResourceCrud{}
func (s *OpsiAwrHubSourceAwrhubsourcesManagementResourceCrud) ID() string {
	return tfresource.GenerateDataSourceHashID("OpsiAwrHubSourceAwrhubsourcesManagementResource-", OpsiAwrHubSourceAwrhubsourcesManagementResource(), s.D)
func (s *OpsiAwrHubSourceAwrhubsourcesManagementResourceCrud) Create() error {
	var operation bool
func (s *OpsiAwrHubSourceAwrhubsourcesManagementResourceCrud) getAwrHubSourceAwrhubsourcesManagementFromWorkRequest(workId *string, retryPolicy *oci_common.RetryPolicy,
	actionTypeEnum oci_opsi.ActionTypeEnum, timeout time.Duration) error {
func (s *OpsiAwrHubSourceAwrhubsourcesManagementResourceCrud) Update() error {
	var operation bool
func (s *OpsiAwrHubSourceAwrhubsourcesManagementResourceCrud) Delete() error {
	var operation bool
func (s *OpsiAwrHubSourceAwrhubsourcesManagementResourceCrud) SetData() error {
	return nil

=== ./internal/service/opsi/opsi_enterprise_manager_bridges_data_source.go ===
func OpsiEnterpriseManagerBridgesDataSource() *schema.Resource {
	return &schema.Resource{
func readOpsiEnterpriseManagerBridges(d *schema.ResourceData, m interface{}) error {
	sync := &OpsiEnterpriseManagerBridgesDataSourceCrud{}
func (s *OpsiEnterpriseManagerBridgesDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *OpsiEnterpriseManagerBridgesDataSourceCrud) Get() error {
	request := oci_opsi.ListEnterpriseManagerBridgesRequest{}
func (s *OpsiEnterpriseManagerBridgesDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/opsi/opsi_operations_insights_private_endpoints_data_source.go ===
func OpsiOperationsInsightsPrivateEndpointsDataSource() *schema.Resource {
	return &schema.Resource{
func readOpsiOperationsInsightsPrivateEndpoints(d *schema.ResourceData, m interface{}) error {
	sync := &OpsiOperationsInsightsPrivateEndpointsDataSourceCrud{}
func (s *OpsiOperationsInsightsPrivateEndpointsDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *OpsiOperationsInsightsPrivateEndpointsDataSourceCrud) Get() error {
	request := oci_opsi.ListOperationsInsightsPrivateEndpointsRequest{}
func (s *OpsiOperationsInsightsPrivateEndpointsDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/opsi/register_resource.go ===
func RegisterResource() {
	tfresource.RegisterResource("oci_opsi_awr_hub", OpsiAwrHubResource())

=== ./internal/service/opsi/opsi_opsi_configuration_data_source.go ===
func OpsiOpsiConfigurationDataSource() *schema.Resource {
	fieldMap := make(map[string]*schema.Schema)
func readSingularOpsiOpsiConfiguration(d *schema.ResourceData, m interface{}) error {
	sync := &OpsiOpsiConfigurationDataSourceCrud{}
func (s *OpsiOpsiConfigurationDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *OpsiOpsiConfigurationDataSourceCrud) Get() error {
	request := oci_opsi.GetOpsiConfigurationRequest{}
func (s *OpsiOpsiConfigurationDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/objectstorage/objectstorage_replication_policies_data_source.go ===
func ObjectStorageReplicationPoliciesDataSource() *schema.Resource {
	return &schema.Resource{
func readObjectStorageReplicationPolicies(d *schema.ResourceData, m interface{}) error {
	sync := &ObjectStorageReplicationPoliciesDataSourceCrud{}
func (s *ObjectStorageReplicationPoliciesDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *ObjectStorageReplicationPoliciesDataSourceCrud) Get() error {
	request := oci_object_storage.ListReplicationPoliciesRequest{}
func (s *ObjectStorageReplicationPoliciesDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/objectstorage/objectstorage_private_endpoint_summaries_data_source.go ===
func ObjectStoragePrivateEndpointsDataSource() *schema.Resource {
	return &schema.Resource{
func readObjectStoragePrivateEndpoints(d *schema.ResourceData, m interface{}) error {
	sync := &ObjectStoragePrivateEndpointsDataSourceCrud{}
func (s *ObjectStoragePrivateEndpointsDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *ObjectStoragePrivateEndpointsDataSourceCrud) Get() error {
	request := oci_object_storage.ListPrivateEndpointsRequest{
func (s *ObjectStoragePrivateEndpointsDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/objectstorage/objectstorage_object_head_data_source.go ===
func ObjectStorageObjectHeadDataSource() *schema.Resource {
	return &schema.Resource{
func readObjectHead(d *schema.ResourceData, m interface{}) error {
	sync := &ObjectHeadDataSourceCrud{}
func (s *ObjectHeadDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *ObjectHeadDataSourceCrud) Get() error {
	request := oci_object_storage.HeadObjectRequest{}
func (s *ObjectHeadDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/objectstorage/objectstorage_preauthrequest_resource.go ===
func ObjectStoragePreauthenticatedRequestResource() *schema.Resource {
	return &schema.Resource{
func createObjectStoragePreauthenticatedRequest(d *schema.ResourceData, m interface{}) error {
	sync := &ObjectStoragePreauthenticatedRequestResourceCrud{}
func readObjectStoragePreauthenticatedRequest(d *schema.ResourceData, m interface{}) error {
	sync := &ObjectStoragePreauthenticatedRequestResourceCrud{}
func deleteObjectStoragePreauthenticatedRequest(d *schema.ResourceData, m interface{}) error {
	sync := &ObjectStoragePreauthenticatedRequestResourceCrud{}
func (s *ObjectStoragePreauthenticatedRequestResourceCrud) ID() string {
	return GetPreauthenticatedRequestCompositeId(s.D.Get("bucket").(string), s.D.Get("namespace").(string), *s.Res.Id)
func (s *ObjectStoragePreauthenticatedRequestResourceCrud) Create() error {
	request := oci_object_storage.CreatePreauthenticatedRequestRequest{}
func (s *ObjectStoragePreauthenticatedRequestResourceCrud) Get() error {
	request := oci_object_storage.GetPreauthenticatedRequestRequest{}
func (s *ObjectStoragePreauthenticatedRequestResourceCrud) Delete() error {
	request := oci_object_storage.DeletePreauthenticatedRequestRequest{}
func (s *ObjectStoragePreauthenticatedRequestResourceCrud) SetData() error {


=== ./internal/service/objectstorage/objectstorage_bucket_resource.go ===
func ObjectStorageBucketResource() *schema.Resource {
	return &schema.Resource{
func createObjectStorageBucket(d *schema.ResourceData, m interface{}) error {
	sync := &ObjectStorageBucketResourceCrud{}
func readObjectStorageBucket(d *schema.ResourceData, m interface{}) error {
	sync := &ObjectStorageBucketResourceCrud{}
func updateObjectStorageBucket(d *schema.ResourceData, m interface{}) error {
	sync := &ObjectStorageBucketResourceCrud{}
func deleteObjectStorageBucket(d *schema.ResourceData, m interface{}) error {
	sync := &ObjectStorageBucketResourceCrud{}
func (s *ObjectStorageBucketResourceCrud) ID() string {
	return GetBucketCompositeId(s.D.Get("name").(string), s.D.Get("namespace").(string))
func (s *ObjectStorageBucketResourceCrud) mapToDuration(fieldKeyFormat string) (oci_object_storage.Duration, error) {
	result := oci_object_storage.Duration{}
func (s *ObjectStorageBucketResourceCrud) Create() error {
	request := oci_object_storage.CreateBucketRequest{}
func (s *ObjectStorageBucketResourceCrud) Get() error {
	request := oci_object_storage.GetBucketRequest{}
func (s *ObjectStorageBucketResourceCrud) Update() error {
	request := oci_object_storage.UpdateBucketRequest{}
func (s *ObjectStorageBucketResourceCrud) Delete() error {
	request := oci_object_storage.DeleteBucketRequest{}
func (s *ObjectStorageBucketResourceCrud) SetData() error {
	s.D.Set("bucket_id", *s.Res.Id)
func (s *ObjectStorageBucketResourceCrud) createRetentionRulesHelper(newRetentionRulesToCreate []interface{}) error {
	if len(newRetentionRulesToCreate) == 0 {
func (s *ObjectStorageBucketResourceCrud) handleRetentionRules() error {

func (s *ObjectStorageBucketResourceCrud) categorizeRetentionRules() ([]interface{}, []interface{}, []interface{}, error) {
	o, n := s.D.GetChange("retention_rules")
func (s *ObjectStorageBucketResourceCrud) updateRetentionRulesHelper(retentionRulesToUpdate []interface{}) error {
	if len(retentionRulesToUpdate) == 0 {
func (s *ObjectStorageBucketResourceCrud) deleteRetentionRulesHelper(oldRetentionRulesToDelete []interface{}) error {
	if len(oldRetentionRulesToDelete) == 0 {
func (s *ObjectStorageBucketResourceCrud) mapToRetentionRule(retentionRule map[string]interface{}) (oci_object_storage.RetentionRule, error) {
	details := oci_object_storage.RetentionRule{}

=== ./internal/service/objectstorage/objectstorage_object_lifecycle_policy_resource.go ===
func ObjectStorageObjectLifecyclePolicyResource() *schema.Resource {
	return &schema.Resource{
func createObjectStorageObjectLifecyclePolicy(d *schema.ResourceData, m interface{}) error {
	sync := &ObjectStorageObjectLifecyclePolicyResourceCrud{}
func readObjectStorageObjectLifecyclePolicy(d *schema.ResourceData, m interface{}) error {
	sync := &ObjectStorageObjectLifecyclePolicyResourceCrud{}
func updateObjectStorageObjectLifecyclePolicy(d *schema.ResourceData, m interface{}) error {
	sync := &ObjectStorageObjectLifecyclePolicyResourceCrud{}
func deleteObjectStorageObjectLifecyclePolicy(d *schema.ResourceData, m interface{}) error {
	sync := &ObjectStorageObjectLifecyclePolicyResourceCrud{}
func (s *ObjectStorageObjectLifecyclePolicyResourceCrud) ID() string {
	return GetObjectLifecyclePolicyCompositeId(s.D.Get("bucket").(string), s.D.Get("namespace").(string))
func (s *ObjectStorageObjectLifecyclePolicyResourceCrud) Create() error {
	request := oci_object_storage.PutObjectLifecyclePolicyRequest{}
func (s *ObjectStorageObjectLifecyclePolicyResourceCrud) Get() error {
	request := oci_object_storage.GetObjectLifecyclePolicyRequest{}
func (s *ObjectStorageObjectLifecyclePolicyResourceCrud) Update() error {
	request := oci_object_storage.PutObjectLifecyclePolicyRequest{}
func (s *ObjectStorageObjectLifecyclePolicyResourceCrud) Delete() error {
	request := oci_object_storage.DeleteObjectLifecyclePolicyRequest{}
func (s *ObjectStorageObjectLifecyclePolicyResourceCrud) SetData() error {

func (s *ObjectStorageObjectLifecyclePolicyResourceCrud) mapToObjectLifecycleRule(fieldKeyFormat string) (oci_object_storage.ObjectLifecycleRule, error) {
	result := oci_object_storage.ObjectLifecycleRule{}
func (s *ObjectStorageObjectLifecyclePolicyResourceCrud) mapToObjectNameFilter(fieldKeyFormat string) (oci_object_storage.ObjectNameFilter, error) {
	result := oci_object_storage.ObjectNameFilter{}

=== ./internal/service/objectstorage/objectstorage_objects_data_source.go ===
func ObjectStorageObjectsDataSource() *schema.Resource {
	return &schema.Resource{
func readObjectStorageObjects(d *schema.ResourceData, m interface{}) error {
	sync := &ObjectStorageObjectsDataSourceCrud{}
func (s *ObjectStorageObjectsDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *ObjectStorageObjectsDataSourceCrud) Get() error {
	request := oci_object_storage.ListObjectsRequest{
func (s *ObjectStorageObjectsDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/objectstorage/objectstorage_object_lifecycle_policy_data_source.go ===
func ObjectStorageObjectLifecyclePolicyDataSource() *schema.Resource {
	fieldMap := make(map[string]*schema.Schema)
func readSingularObjectStorageObjectLifecyclePolicy(d *schema.ResourceData, m interface{}) error {
	sync := &ObjectStorageObjectLifecyclePolicyDataSourceCrud{}
func (s *ObjectStorageObjectLifecyclePolicyDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *ObjectStorageObjectLifecyclePolicyDataSourceCrud) Get() error {
	request := oci_object_storage.GetObjectLifecyclePolicyRequest{}
func (s *ObjectStorageObjectLifecyclePolicyDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/objectstorage/objectstorage_object_versions_data_source.go ===
func ObjectStorageObjectVersionsDataSource() *schema.Resource {
	return &schema.Resource{
func readObjectStorageObjectVersions(d *schema.ResourceData, m interface{}) error {
	sync := &ObjectStorageObjectVersionsDataSourceCrud{}
func (s *ObjectStorageObjectVersionsDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *ObjectStorageObjectVersionsDataSourceCrud) Get() error {
	request := oci_object_storage.ListObjectVersionsRequest{
func (s *ObjectStorageObjectVersionsDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/objectstorage/objectstorage_preauthrequests_data_source.go ===
func ObjectStoragePreauthenticatedRequestsDataSource() *schema.Resource {
	return &schema.Resource{
func readObjectStoragePreauthenticatedRequests(d *schema.ResourceData, m interface{}) error {
	sync := &ObjectStoragePreauthenticatedRequestsDataSourceCrud{}
func (s *ObjectStoragePreauthenticatedRequestsDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *ObjectStoragePreauthenticatedRequestsDataSourceCrud) Get() error {
	request := oci_object_storage.ListPreauthenticatedRequestsRequest{}
func (s *ObjectStoragePreauthenticatedRequestsDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/objectstorage/objectstorage_bucket_data_source.go ===
func ObjectStorageBucketDataSource() *schema.Resource {
	fieldMap := make(map[string]*schema.Schema)
func readSingularObjectStorageBucket(d *schema.ResourceData, m interface{}) error {
	sync := &ObjectStorageBucketDataSourceCrud{}
func (s *ObjectStorageBucketDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *ObjectStorageBucketDataSourceCrud) Get() error {
	request := oci_object_storage.GetBucketRequest{}
func (s *ObjectStorageBucketDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/objectstorage/objectstorage_object_resource.go ===
func ObjectStorageObjectResource() *schema.Resource {
	return &schema.Resource{
func createObjectStorageObject(d *schema.ResourceData, m interface{}) error {
	sync := &ObjectStorageObjectResourceCrud{}
func (s *ObjectStorageObjectResourceCrud) createMultiPartObject() error {
	multipartUploadData := MultipartUploadData{}
func (s *ObjectStorageObjectResourceCrud) createCopyObject() error {

func readObjectStorageObject(d *schema.ResourceData, m interface{}) error {
	sync := &ObjectStorageObjectResourceCrud{}
func updateObjectStorageObject(d *schema.ResourceData, m interface{}) error {
	sync := &ObjectStorageObjectResourceCrud{}
func deleteObjectStorageObject(d *schema.ResourceData, m interface{}) error {
	sync := &ObjectStorageObjectResourceCrud{}
func (s *ObjectStorageObjectResourceCrud) ID() string {
	return GetObjectCompositeId(s.D.Get("bucket").(string), s.D.Get("namespace").(string), s.D.Get("object").(string))
func (s *ObjectStorageObjectResourceCrud) Create() error {

func (s *ObjectStorageObjectResourceCrud) CreatedPending() []string {
	return []string{
func (s *ObjectStorageObjectResourceCrud) CreatedTarget() []string {
	return []string{
func (s *ObjectStorageObjectResourceCrud) createContentObject() error {
	request := oci_object_storage.PutObjectRequest{}
func (s *ObjectStorageObjectResourceCrud) getObjectHead() error {

func (s *ObjectStorageObjectResourceCrud) updateState() (bool, error) {
	if state, ok := s.D.GetOkExists("state"); ok {
func (s *ObjectStorageObjectResourceCrud) shouldUseObjectHeadForGet() bool {
	content, _ := s.D.GetOkExists("content")
func (s *ObjectStorageObjectResourceCrud) isMultiPartCreate() bool {
	source, _ := s.D.GetOkExists("source")
func (s *ObjectStorageObjectResourceCrud) isCopyCreate() bool {
	if sourceURI, ok := s.D.GetOkExists("source_uri_details"); ok {
func (s *ObjectStorageObjectResourceCrud) Get() error {

func (s *ObjectStorageObjectResourceCrud) getObject() error {
	request := oci_object_storage.GetObjectRequest{}
func (s *ObjectStorageObjectResourceCrud) Update() error {

func (s *ObjectStorageObjectResourceCrud) Delete() error {
	request := oci_object_storage.DeleteObjectRequest{}
func (s *ObjectStorageObjectResourceCrud) SetData() error {
	if s.shouldUseObjectHeadForGet() {
func (s *ObjectStorageObjectResourceCrud) setDataObjectHead() error {
	s.D.Set("namespace", s.Res.NamespaceName)
func (s *ObjectStorageObjectResourceCrud) setDataObject() error {
	s.D.Set("namespace", s.Res.NamespaceName)

=== ./internal/service/objectstorage/objectstorage_namespace_data_source.go ===
func ObjectStorageNamespaceDataSource() *schema.Resource {
	return &schema.Resource{
func readSingularObjectStorageNamespace(d *schema.ResourceData, m interface{}) error {
	sync := &ObjectStorageNamespaceDataSourceCrud{}
func (s *ObjectStorageNamespaceDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *ObjectStorageNamespaceDataSourceCrud) Get() error {
	request := oci_object_storage.GetNamespaceRequest{}
func (s *ObjectStorageNamespaceDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/objectstorage/objectstorage_replication_policy_data_source.go ===
func ObjectStorageReplicationPolicyDataSource() *schema.Resource {
	fieldMap := make(map[string]*schema.Schema)
func readSingularObjectStorageReplicationPolicy(d *schema.ResourceData, m interface{}) error {
	sync := &ObjectStorageReplicationPolicyDataSourceCrud{}
func (s *ObjectStorageReplicationPolicyDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *ObjectStorageReplicationPolicyDataSourceCrud) Get() error {
	request := oci_object_storage.GetReplicationPolicyRequest{}
func (s *ObjectStorageReplicationPolicyDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/objectstorage/objectstorage_object_data_source.go ===
func ObjectStorageObjectDataSource() *schema.Resource {
	return &schema.Resource{
func readSingularObjectStorageObject(d *schema.ResourceData, m interface{}) error {
	sync := &ObjectStorageObjectDataSourceCrud{}
func (s *ObjectStorageObjectDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *ObjectStorageObjectDataSourceCrud) Get() error {

func (s *ObjectStorageObjectDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/objectstorage/objectstorage_replication_policy_resource.go ===
func ObjectStorageReplicationPolicyResource() *schema.Resource {
	return &schema.Resource{
func createObjectStorageReplicationPolicy(d *schema.ResourceData, m interface{}) error {
	sync := &ObjectStorageReplicationPolicyResourceCrud{}
func readObjectStorageReplicationPolicy(d *schema.ResourceData, m interface{}) error {
	sync := &ObjectStorageReplicationPolicyResourceCrud{}
func deleteObjectStorageReplicationPolicy(d *schema.ResourceData, m interface{}) error {
	sync := &ObjectStorageReplicationPolicyResourceCrud{}
func (s *ObjectStorageReplicationPolicyResourceCrud) ID() string {
	return GetReplicationPolicyCompositeId(s.D.Get("bucket").(string), s.D.Get("namespace").(string), *s.Res.Id)
func (s *ObjectStorageReplicationPolicyResourceCrud) Create() error {
	request := oci_object_storage.CreateReplicationPolicyRequest{}
func (s *ObjectStorageReplicationPolicyResourceCrud) Get() error {
	request := oci_object_storage.GetReplicationPolicyRequest{}
func (s *ObjectStorageReplicationPolicyResourceCrud) Delete() error {
	request := oci_object_storage.DeleteReplicationPolicyRequest{}
func (s *ObjectStorageReplicationPolicyResourceCrud) SetData() error {


=== ./internal/service/objectstorage/objectstorage_bucket_summaries_data_source.go ===
func ObjectStorageBucketsDataSource() *schema.Resource {
	return &schema.Resource{
func readObjectStorageBuckets(d *schema.ResourceData, m interface{}) error {
	sync := &ObjectStorageBucketsDataSourceCrud{}
func (s *ObjectStorageBucketsDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *ObjectStorageBucketsDataSourceCrud) Get() error {
	request := oci_object_storage.ListBucketsRequest{
func (s *ObjectStorageBucketsDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/objectstorage/objectstorage_replication_sources_data_source.go ===
func ObjectStorageReplicationSourcesDataSource() *schema.Resource {
	return &schema.Resource{
func readObjectStorageReplicationSources(d *schema.ResourceData, m interface{}) error {
	sync := &ObjectStorageReplicationSourcesDataSourceCrud{}
func (s *ObjectStorageReplicationSourcesDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *ObjectStorageReplicationSourcesDataSourceCrud) Get() error {
	request := oci_object_storage.ListReplicationSourcesRequest{}
func (s *ObjectStorageReplicationSourcesDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/objectstorage/objectstorage_private_endpoint_data_source.go ===
func ObjectStoragePrivateEndpointDataSource() *schema.Resource {
	fieldMap := make(map[string]*schema.Schema)
func readSingularObjectStoragePrivateEndpoint(d *schema.ResourceData, m interface{}) error {
	sync := &ObjectStoragePrivateEndpointDataSourceCrud{}
func (s *ObjectStoragePrivateEndpointDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *ObjectStoragePrivateEndpointDataSourceCrud) Get() error {
	request := oci_object_storage.GetPrivateEndpointRequest{}
func (s *ObjectStoragePrivateEndpointDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/objectstorage/objectstorage_preauthrequest_data_source.go ===
func ObjectStoragePreauthenticatedRequestDataSource() *schema.Resource {
	fieldMap := make(map[string]*schema.Schema)
func readSingularObjectStoragePreauthenticatedRequest(d *schema.ResourceData, m interface{}) error {
	sync := &ObjectStoragePreauthenticatedRequestDataSourceCrud{}
func (s *ObjectStoragePreauthenticatedRequestDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *ObjectStoragePreauthenticatedRequestDataSourceCrud) Get() error {
	request := oci_object_storage.GetPreauthenticatedRequestRequest{}
func (s *ObjectStoragePreauthenticatedRequestDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/objectstorage/objectstorage_namespace_metadata_data_source.go ===
func ObjectStorageNamespaceMetadataDataSource() *schema.Resource {
	return &schema.Resource{
func readNamespaceMetadata2(d *schema.ResourceData, m interface{}) error {
	sync := &NamespaceMetadataDataSourceCrud{}
func (s *NamespaceMetadataDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *NamespaceMetadataDataSourceCrud) Get() error {
	request := oci_object_storage.GetNamespaceMetadataRequest{}
func (s *NamespaceMetadataDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/objectstorage/objectstorage_private_endpoint_resource.go ===
func ObjectStoragePrivateEndpointResource() *schema.Resource {
	return &schema.Resource{
func createObjectStoragePrivateEndpoint(d *schema.ResourceData, m interface{}) error {
	sync := &ObjectStoragePrivateEndpointResourceCrud{}
func readObjectStoragePrivateEndpoint(d *schema.ResourceData, m interface{}) error {
	sync := &ObjectStoragePrivateEndpointResourceCrud{}
func updateObjectStoragePrivateEndpoint(d *schema.ResourceData, m interface{}) error {
	sync := &ObjectStoragePrivateEndpointResourceCrud{}
func deleteObjectStoragePrivateEndpoint(d *schema.ResourceData, m interface{}) error {
	sync := &ObjectStoragePrivateEndpointResourceCrud{}
func (s *ObjectStoragePrivateEndpointResourceCrud) SetData() error {
	_, namespace, err := parsePrivateEndpointCompositeId(s.D.Id())
func (s *ObjectStoragePrivateEndpointResourceCrud) ID() string {
	return GetPrivateEndpointCompositeId(s.D.Get("name").(string), s.D.Get("namespace").(string))
func (s *ObjectStoragePrivateEndpointResourceCrud) CreatedPending() []string {
	return []string{
func (s *ObjectStoragePrivateEndpointResourceCrud) CreatedTarget() []string {
	return []string{
func (s *ObjectStoragePrivateEndpointResourceCrud) UpdatedPending() []string {
	return []string{
func (s *ObjectStoragePrivateEndpointResourceCrud) UpdatedTarget() []string {

func (s *ObjectStoragePrivateEndpointResourceCrud) DeletedPending() []string {
	return []string{
func (s *ObjectStoragePrivateEndpointResourceCrud) DeletedTarget() []string {

func (s *ObjectStoragePrivateEndpointResourceCrud) Create() error {
	request := oci_object_storage.CreatePrivateEndpointRequest{}
func (s *ObjectStoragePrivateEndpointResourceCrud) Get() error {
	request := oci_object_storage.GetPrivateEndpointRequest{}
func (s *ObjectStoragePrivateEndpointResourceCrud) Update() error {
	request := oci_object_storage.UpdatePrivateEndpointRequest{}
func (s *ObjectStoragePrivateEndpointResourceCrud) Delete() error {
	request := oci_object_storage.DeletePrivateEndpointRequest{}
func (s *ObjectStoragePrivateEndpointResourceCrud) mapToAccessTargets(accessTargets map[string]interface{}) (oci_object_storage.AccessTargetDetails, error) {
	details := oci_object_storage.AccessTargetDetails{}

=== ./internal/service/objectstorage/objectstorage_export.go ===
func processObjectStorageNamespace(ctx *tf_export.ResourceDiscoveryContext, resources []*tf_export.OCIResource) ([]*tf_export.OCIResource, error) {
	for _, ns := range resources {
func getObjectStorageNamespaceHCLDatasource(builder *strings.Builder, ociRes *tf_export.OCIResource, varMap map[string]string) error {
	builder.WriteString(fmt.Sprintf("data %s %s {\n", ociRes.TerraformClass, ociRes.TerraformName))
func processObjectStoragePreauthenticatedRequest(ctx *tf_export.ResourceDiscoveryContext, resources []*tf_export.OCIResource) ([]*tf_export.OCIResource, error) {
	for _, resource := range resources {
func processObjectStorageReplicationPolicy(ctx *tf_export.ResourceDiscoveryContext, resources []*tf_export.OCIResource) ([]*tf_export.OCIResource, error) {
	for _, resource := range resources {
func getObjectStorageBucketId(resource *tf_export.OCIResource) (string, error) {

func getObjectStorageObjectLifecyclePolicyId(resource *tf_export.OCIResource) (string, error) {

func getObjectStorageObjectId(resource *tf_export.OCIResource) (string, error) {

func getObjectStoragePreauthenticatedRequestId(resource *tf_export.OCIResource) (string, error) {

func getObjectStorageReplicationPolicyId(resource *tf_export.OCIResource) (string, error) {


=== ./internal/service/objectstorage/helpers_objectstorage.go ===
func (s *ObjectStorageObjectResourceCrud) createSourceRegionClient(region string) error {
	if s.SourceRegionClient == nil {

=== ./internal/service/objectstorage/register_resource.go ===
func RegisterResource() {
	tfresource.RegisterResource("oci_objectstorage_bucket", ObjectStorageBucketResource())

=== ./internal/service/objectstorage/objectstorage_namespace_metadata_resource.go ===
func ObjectStorageNamespaceMetadataResource() *schema.Resource {
	return &schema.Resource{
func readNamespaceMetadata(d *schema.ResourceData, m interface{}) error {
	sync := &NamespaceMetadataResourceCrud{}
func updateNamespaceMetadata(d *schema.ResourceData, m interface{}) error {
	sync := &NamespaceMetadataResourceCrud{}
func deleteNamespaceMetadata(d *schema.ResourceData, m interface{}) error {
	return nil
func (s *NamespaceMetadataResourceCrud) ID() string {
	return *s.Res.Namespace
func (s *NamespaceMetadataResourceCrud) Get() error {
	request := oci_object_storage.GetNamespaceMetadataRequest{}
func (s *NamespaceMetadataResourceCrud) Update() error {
	request := oci_object_storage.UpdateNamespaceMetadataRequest{}
func (s *NamespaceMetadataResourceCrud) SetData() error {
	if s.Res.DefaultS3CompartmentId != nil {

=== ./internal/service/generic_artifacts_content/generic_artifacts_content_artifact_by_path_resource.go ===
func GenericArtifactsContentArtifactByPathResource() *schema.Resource {
	return &schema.Resource{
func createGenericArtifactsContentArtifactByPath(d *schema.ResourceData, m interface{}) error {
	sync := &GenericArtifactsContentArtifactByPathResourceCrud{}
func readGenericArtifactsContentArtifactByPath(d *schema.ResourceData, m interface{}) error {
	sync := &GenericArtifactsContentArtifactByPathResourceCrud{}
func deleteGenericArtifactsContentArtifactByPath(d *schema.ResourceData, m interface{}) error {
	return nil
func (s *GenericArtifactsContentArtifactByPathResourceCrud) ID() string {
	return *s.Res.Id
func (s *GenericArtifactsContentArtifactByPathResourceCrud) CreatedPending() []string {
	return []string{}
func (s *GenericArtifactsContentArtifactByPathResourceCrud) CreatedTarget() []string {
	return []string{
func (s *GenericArtifactsContentArtifactByPathResourceCrud) DeletedPending() []string {
	return []string{
func (s *GenericArtifactsContentArtifactByPathResourceCrud) DeletedTarget() []string {
	return []string{
func (s *GenericArtifactsContentArtifactByPathResourceCrud) Get() error {
	request := oci_generic_artifacts_content.GetGenericArtifactContentByPathRequest{}
func (s *GenericArtifactsContentArtifactByPathResourceCrud) Create() error {
	if s.isSourceCreate() {
func (s *GenericArtifactsContentArtifactByPathResourceCrud) isSourceCreate() bool {
	source, _ := s.D.GetOkExists("source")
func (s *GenericArtifactsContentArtifactByPathResourceCrud) createArtifactByContent() error {
	request := oci_generic_artifacts_content.PutGenericArtifactContentByPathRequest{}
func (s *GenericArtifactsContentArtifactByPathResourceCrud) createArtifactBySource() error {
	request := oci_generic_artifacts_content.PutGenericArtifactContentByPathRequest{}
func (s *GenericArtifactsContentArtifactByPathResourceCrud) SetData() error {


=== ./internal/service/generic_artifacts_content/generic_artifacts_content_generic_artifacts_content_data_source.go ===
func GenericArtifactsContentGenericArtifactsContentDataSource() *schema.Resource {
	return &schema.Resource{
func readSingularGenericArtifactsContentGenericArtifactsContent(d *schema.ResourceData, m interface{}) error {
	sync := &GenericArtifactsContentGenericArtifactsContentDataSourceCrud{}
func (s *GenericArtifactsContentGenericArtifactsContentDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *GenericArtifactsContentGenericArtifactsContentDataSourceCrud) Get() error {
	request := oci_generic_artifacts_content.GetGenericArtifactContentRequest{}
func (s *GenericArtifactsContentGenericArtifactsContentDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/generic_artifacts_content/generic_artifacts_content_artifact_by_path_data_source.go ===
func GenericArtifactsContentArtifactByPathDataSource() *schema.Resource {
	fieldMap := make(map[string]*schema.Schema)
func readSingularGenericArtifactsContentArtifactByPath(d *schema.ResourceData, m interface{}) error {
	sync := &GenericArtifactsContentArtifactByPathDataSourceCrud{}
func (s *GenericArtifactsContentArtifactByPathDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *GenericArtifactsContentArtifactByPathDataSourceCrud) Get() error {
	request := oci_generic_artifacts_content.GetGenericArtifactContentByPathRequest{}
func (s *GenericArtifactsContentArtifactByPathDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/generic_artifacts_content/register_resource.go ===
func RegisterResource() {
	tfresource.RegisterResource("oci_generic_artifacts_content_artifact_by_path", GenericArtifactsContentArtifactByPathResource())

=== ./internal/service/globally_distributed_database/globally_distributed_database_sharded_database_resource.go ===
func GloballyDistributedDatabaseShardedDatabaseResource() *schema.Resource {
	return &schema.Resource{
func createGloballyDistributedDatabaseShardedDatabase(d *schema.ResourceData, m interface{}) error {
	sync := &GloballyDistributedDatabaseShardedDatabaseResourceCrud{}
func readGloballyDistributedDatabaseShardedDatabase(d *schema.ResourceData, m interface{}) error {
	sync := &GloballyDistributedDatabaseShardedDatabaseResourceCrud{}
func updateGloballyDistributedDatabaseShardedDatabase(d *schema.ResourceData, m interface{}) error {
	sync := &GloballyDistributedDatabaseShardedDatabaseResourceCrud{}
func deleteGloballyDistributedDatabaseShardedDatabase(d *schema.ResourceData, m interface{}) error {
	sync := &GloballyDistributedDatabaseShardedDatabaseResourceCrud{}
func (s *GloballyDistributedDatabaseShardedDatabaseResourceCrud) ID() string {
	shardedDatabase := *s.Res
func (s *GloballyDistributedDatabaseShardedDatabaseResourceCrud) CreatedPending() []string {
	return []string{
func (s *GloballyDistributedDatabaseShardedDatabaseResourceCrud) CreatedTarget() []string {
	return []string{
func (s *GloballyDistributedDatabaseShardedDatabaseResourceCrud) DeletedPending() []string {
	return []string{
func (s *GloballyDistributedDatabaseShardedDatabaseResourceCrud) DeletedTarget() []string {
	return []string{
func (s *GloballyDistributedDatabaseShardedDatabaseResourceCrud) Create() error {
	request := oci_globally_distributed_database.CreateShardedDatabaseRequest{}
func (s *GloballyDistributedDatabaseShardedDatabaseResourceCrud) Patch() error {
	request := oci_globally_distributed_database.PatchShardedDatabaseRequest{}
func (s *GloballyDistributedDatabaseShardedDatabaseResourceCrud) getShardedDatabaseFromWorkRequest(workId *string, retryPolicy *oci_common.RetryPolicy,
	actionTypeEnum oci_globally_distributed_database.ActionTypeEnum, timeout time.Duration) error {
func (s *GloballyDistributedDatabaseShardedDatabaseResourceCrud) Get() error {
	request := oci_globally_distributed_database.GetShardedDatabaseRequest{}
func (s *GloballyDistributedDatabaseShardedDatabaseResourceCrud) Update() error {
	if compartment, ok := s.D.GetOkExists("compartment_id"); ok && s.D.HasChange("compartment_id") {
func (s *GloballyDistributedDatabaseShardedDatabaseResourceCrud) Delete() error {
	request := oci_globally_distributed_database.DeleteShardedDatabaseRequest{}
func (s *GloballyDistributedDatabaseShardedDatabaseResourceCrud) SetData() error {
	switch v := (*s.Res).(type) {
func (s *GloballyDistributedDatabaseShardedDatabaseResourceCrud) ConfigureShardedDatabaseGsms() error {
	request := oci_globally_distributed_database.ConfigureShardedDatabaseGsmsRequest{}
func (s *GloballyDistributedDatabaseShardedDatabaseResourceCrud) ConfigureSharding() error {
	request := oci_globally_distributed_database.ConfigureShardingRequest{}
func (s *GloballyDistributedDatabaseShardedDatabaseResourceCrud) DownloadGsmCertificateSigningRequest() error {
	request := oci_globally_distributed_database.DownloadGsmCertificateSigningRequestRequest{}
func (s *GloballyDistributedDatabaseShardedDatabaseResourceCrud) GenerateGsmCertificateSigningRequest() error {
	request := oci_globally_distributed_database.GenerateGsmCertificateSigningRequestRequest{}
func (s *GloballyDistributedDatabaseShardedDatabaseResourceCrud) GenerateWallet() error {
	request := oci_globally_distributed_database.GenerateWalletRequest{}
func (s *GloballyDistributedDatabaseShardedDatabaseResourceCrud) FetchConnectionString() error {
	request := oci_globally_distributed_database.FetchConnectionStringRequest{}
func (s *GloballyDistributedDatabaseShardedDatabaseResourceCrud) StartShardedDatabase() error {
	request := oci_globally_distributed_database.StartShardedDatabaseRequest{}
func (s *GloballyDistributedDatabaseShardedDatabaseResourceCrud) StopShardedDatabase() error {
	request := oci_globally_distributed_database.StopShardedDatabaseRequest{}
func (s *GloballyDistributedDatabaseShardedDatabaseResourceCrud) UploadSignedCertificateAndGenerateWallet() error {
	request := oci_globally_distributed_database.UploadSignedCertificateAndGenerateWalletRequest{}
func (s *GloballyDistributedDatabaseShardedDatabaseResourceCrud) ValidateNetwork() error {
	request := oci_globally_distributed_database.ValidateNetworkRequest{}
func (s *GloballyDistributedDatabaseShardedDatabaseResourceCrud) mapToConnectionString(fieldKeyFormat string) (oci_globally_distributed_database.ConnectionString, error) {
	result := oci_globally_distributed_database.ConnectionString{}
func (s *GloballyDistributedDatabaseShardedDatabaseResourceCrud) mapToCreateDedicatedCatalogDetail(fieldKeyFormat string) (oci_globally_distributed_database.CreateDedicatedCatalogDetail, error) {
	result := oci_globally_distributed_database.CreateDedicatedCatalogDetail{}
func (s *GloballyDistributedDatabaseShardedDatabaseResourceCrud) mapToCreateDedicatedShardDetail(fieldKeyFormat string) (oci_globally_distributed_database.CreateDedicatedShardDetail, error) {
	result := oci_globally_distributed_database.CreateDedicatedShardDetail{}
func (s *GloballyDistributedDatabaseShardedDatabaseResourceCrud) mapToDedicatedCatalogDetails(fieldKeyFormat string) (oci_globally_distributed_database.DedicatedCatalogDetails, error) {
	result := oci_globally_distributed_database.DedicatedCatalogDetails{}
func DedicatedCatalogDetailsToMapForResource(obj oci_globally_distributed_database.DedicatedCatalogDetails, adminPassword string) map[string]interface{} {
	result := map[string]interface{}{}
func (s *GloballyDistributedDatabaseShardedDatabaseResourceCrud) mapToDedicatedShardDetails(fieldKeyFormat string) (oci_globally_distributed_database.DedicatedShardDetails, error) {
	result := oci_globally_distributed_database.DedicatedShardDetails{}
func DedicatedShardDetailsToMapForResource(obj oci_globally_distributed_database.DedicatedShardDetails, adminPassword string) map[string]interface{} {
	result := map[string]interface{}{}
func (s *GloballyDistributedDatabaseShardedDatabaseResourceCrud) mapToDedicatedShardOrCatalogEncryptionKeyDetails(fieldKeyFormat string) (oci_globally_distributed_database.DedicatedShardOrCatalogEncryptionKeyDetails, error) {
	result := oci_globally_distributed_database.DedicatedShardOrCatalogEncryptionKeyDetails{}
func (s *GloballyDistributedDatabaseShardedDatabaseResourceCrud) mapToGsmDetails(fieldKeyFormat string) (oci_globally_distributed_database.GsmDetails, error) {
	result := oci_globally_distributed_database.GsmDetails{}
func (s *GloballyDistributedDatabaseShardedDatabaseResourceCrud) mapToPatchInstruction(fieldKeyFormat string) (oci_globally_distributed_database.PatchInstruction, error) {
	var baseObject oci_globally_distributed_database.PatchInstruction
func (s *GloballyDistributedDatabaseShardedDatabaseResourceCrud) mapToobject(fieldKeyFormat string) (oci_globally_distributed_database.Object, error) {
	result := oci_globally_distributed_database.Object{}
func (s *GloballyDistributedDatabaseShardedDatabaseResourceCrud) populateTopLevelPolymorphicCreateShardedDatabaseRequest(request *oci_globally_distributed_database.CreateShardedDatabaseRequest) error {
	//discriminator
func (s *GloballyDistributedDatabaseShardedDatabaseResourceCrud) updateCompartment(compartment interface{}) error {
	changeCompartmentRequest := oci_globally_distributed_database.ChangeShardedDatabaseCompartmentRequest{}

=== ./internal/service/globally_distributed_database/globally_distributed_database_private_endpoint_resource.go ===
func GloballyDistributedDatabasePrivateEndpointResource() *schema.Resource {
	return &schema.Resource{
func createGloballyDistributedDatabasePrivateEndpoint(d *schema.ResourceData, m interface{}) error {
	sync := &GloballyDistributedDatabasePrivateEndpointResourceCrud{}
func readGloballyDistributedDatabasePrivateEndpoint(d *schema.ResourceData, m interface{}) error {
	sync := &GloballyDistributedDatabasePrivateEndpointResourceCrud{}
func updateGloballyDistributedDatabasePrivateEndpoint(d *schema.ResourceData, m interface{}) error {
	sync := &GloballyDistributedDatabasePrivateEndpointResourceCrud{}
func deleteGloballyDistributedDatabasePrivateEndpoint(d *schema.ResourceData, m interface{}) error {
	sync := &GloballyDistributedDatabasePrivateEndpointResourceCrud{}
func (s *GloballyDistributedDatabasePrivateEndpointResourceCrud) ID() string {
	return *s.Res.Id
func (s *GloballyDistributedDatabasePrivateEndpointResourceCrud) CreatedPending() []string {
	return []string{
func (s *GloballyDistributedDatabasePrivateEndpointResourceCrud) CreatedTarget() []string {
	return []string{
func (s *GloballyDistributedDatabasePrivateEndpointResourceCrud) DeletedPending() []string {
	return []string{
func (s *GloballyDistributedDatabasePrivateEndpointResourceCrud) DeletedTarget() []string {
	return []string{
func (s *GloballyDistributedDatabasePrivateEndpointResourceCrud) Create() error {
	request := oci_globally_distributed_database.CreatePrivateEndpointRequest{}
func (s *GloballyDistributedDatabasePrivateEndpointResourceCrud) getPrivateEndpointFromWorkRequest(workId *string, retryPolicy *oci_common.RetryPolicy,
	actionTypeEnum oci_globally_distributed_database.ActionTypeEnum, timeout time.Duration) error {
func (s *GloballyDistributedDatabasePrivateEndpointResourceCrud) Get() error {
	request := oci_globally_distributed_database.GetPrivateEndpointRequest{}
func (s *GloballyDistributedDatabasePrivateEndpointResourceCrud) Update() error {
	if compartment, ok := s.D.GetOkExists("compartment_id"); ok && s.D.HasChange("compartment_id") {
func (s *GloballyDistributedDatabasePrivateEndpointResourceCrud) Delete() error {
	request := oci_globally_distributed_database.DeletePrivateEndpointRequest{}
func (s *GloballyDistributedDatabasePrivateEndpointResourceCrud) SetData() error {
	if s.Res.CompartmentId != nil {
func (s *GloballyDistributedDatabasePrivateEndpointResourceCrud) ReinstateProxyInstance() error {
	request := oci_globally_distributed_database.ReinstateProxyInstanceRequest{}
func (s *GloballyDistributedDatabasePrivateEndpointResourceCrud) updateCompartment(compartment interface{}) error {
	changeCompartmentRequest := oci_globally_distributed_database.ChangePrivateEndpointCompartmentRequest{}

=== ./internal/service/globally_distributed_database/globally_distributed_database_private_endpoints_data_source.go ===
func GloballyDistributedDatabasePrivateEndpointsDataSource() *schema.Resource {
	return &schema.Resource{
func readGloballyDistributedDatabasePrivateEndpoints(d *schema.ResourceData, m interface{}) error {
	sync := &GloballyDistributedDatabasePrivateEndpointsDataSourceCrud{}
func (s *GloballyDistributedDatabasePrivateEndpointsDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *GloballyDistributedDatabasePrivateEndpointsDataSourceCrud) Get() error {
	request := oci_globally_distributed_database.ListPrivateEndpointsRequest{}
func (s *GloballyDistributedDatabasePrivateEndpointsDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/globally_distributed_database/globally_distributed_database_private_endpoint_data_source.go ===
func GloballyDistributedDatabasePrivateEndpointDataSource() *schema.Resource {
	fieldMap := make(map[string]*schema.Schema)
func readSingularGloballyDistributedDatabasePrivateEndpoint(d *schema.ResourceData, m interface{}) error {
	sync := &GloballyDistributedDatabasePrivateEndpointDataSourceCrud{}
func (s *GloballyDistributedDatabasePrivateEndpointDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *GloballyDistributedDatabasePrivateEndpointDataSourceCrud) Get() error {
	request := oci_globally_distributed_database.GetPrivateEndpointRequest{}
func (s *GloballyDistributedDatabasePrivateEndpointDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/globally_distributed_database/globally_distributed_database_sharded_databases_data_source.go ===
func GloballyDistributedDatabaseShardedDatabaseSummaryResource() *schema.Resource {
	return &schema.Resource{
func GloballyDistributedDatabaseShardedDatabasesDataSource() *schema.Resource {
	return &schema.Resource{
func readGloballyDistributedDatabaseShardedDatabases(d *schema.ResourceData, m interface{}) error {
	sync := &GloballyDistributedDatabaseShardedDatabasesDataSourceCrud{}
func (s *GloballyDistributedDatabaseShardedDatabasesDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *GloballyDistributedDatabaseShardedDatabasesDataSourceCrud) Get() error {
	request := oci_globally_distributed_database.ListShardedDatabasesRequest{}
func (s *GloballyDistributedDatabaseShardedDatabasesDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/globally_distributed_database/globally_distributed_database_sharded_database_data_source.go ===
func GloballyDistributedDatabaseShardedDatabaseDataSource() *schema.Resource {
	fieldMap := make(map[string]*schema.Schema)
func readSingularGloballyDistributedDatabaseShardedDatabase(d *schema.ResourceData, m interface{}) error {
	sync := &GloballyDistributedDatabaseShardedDatabaseDataSourceCrud{}
func (s *GloballyDistributedDatabaseShardedDatabaseDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *GloballyDistributedDatabaseShardedDatabaseDataSourceCrud) Get() error {
	request := oci_globally_distributed_database.GetShardedDatabaseRequest{}
func (s *GloballyDistributedDatabaseShardedDatabaseDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/globally_distributed_database/register_resource.go ===
func RegisterResource() {
	tfresource.RegisterResource("oci_globally_distributed_database_private_endpoint", GloballyDistributedDatabasePrivateEndpointResource())

=== ./internal/service/compute_cloud_at_customer/compute_cloud_at_customer_ccc_upgrade_schedule_resource.go ===
func ComputeCloudAtCustomerCccUpgradeScheduleResource() *schema.Resource {
	return &schema.Resource{
func createComputeCloudAtCustomerCccUpgradeSchedule(d *schema.ResourceData, m interface{}) error {
	sync := &ComputeCloudAtCustomerCccUpgradeScheduleResourceCrud{}
func readComputeCloudAtCustomerCccUpgradeSchedule(d *schema.ResourceData, m interface{}) error {
	sync := &ComputeCloudAtCustomerCccUpgradeScheduleResourceCrud{}
func updateComputeCloudAtCustomerCccUpgradeSchedule(d *schema.ResourceData, m interface{}) error {
	sync := &ComputeCloudAtCustomerCccUpgradeScheduleResourceCrud{}
func deleteComputeCloudAtCustomerCccUpgradeSchedule(d *schema.ResourceData, m interface{}) error {
	sync := &ComputeCloudAtCustomerCccUpgradeScheduleResourceCrud{}
func (s *ComputeCloudAtCustomerCccUpgradeScheduleResourceCrud) ID() string {
	return *s.Res.Id
func (s *ComputeCloudAtCustomerCccUpgradeScheduleResourceCrud) CreatedPending() []string {
	return []string{}
func (s *ComputeCloudAtCustomerCccUpgradeScheduleResourceCrud) CreatedTarget() []string {
	return []string{
func (s *ComputeCloudAtCustomerCccUpgradeScheduleResourceCrud) DeletedPending() []string {
	return []string{}
func (s *ComputeCloudAtCustomerCccUpgradeScheduleResourceCrud) DeletedTarget() []string {
	return []string{
func (s *ComputeCloudAtCustomerCccUpgradeScheduleResourceCrud) Create() error {
	request := oci_compute_cloud_at_customer.CreateCccUpgradeScheduleRequest{}
func (s *ComputeCloudAtCustomerCccUpgradeScheduleResourceCrud) Get() error {
	request := oci_compute_cloud_at_customer.GetCccUpgradeScheduleRequest{}
func (s *ComputeCloudAtCustomerCccUpgradeScheduleResourceCrud) Update() error {
	if compartment, ok := s.D.GetOkExists("compartment_id"); ok && s.D.HasChange("compartment_id") {
func (s *ComputeCloudAtCustomerCccUpgradeScheduleResourceCrud) Delete() error {
	request := oci_compute_cloud_at_customer.DeleteCccUpgradeScheduleRequest{}
func (s *ComputeCloudAtCustomerCccUpgradeScheduleResourceCrud) SetData() error {
	if s.Res.CompartmentId != nil {
func (s *ComputeCloudAtCustomerCccUpgradeScheduleResourceCrud) mapToCreateCccScheduleEvent(fieldKeyFormat string) (oci_compute_cloud_at_customer.CreateCccScheduleEvent, error) {
	result := oci_compute_cloud_at_customer.CreateCccScheduleEvent{}
func (s *ComputeCloudAtCustomerCccUpgradeScheduleResourceCrud) mapToUpdateCccScheduleEvent(fieldKeyFormat string) (oci_compute_cloud_at_customer.UpdateCccScheduleEvent, error) {
	result := oci_compute_cloud_at_customer.UpdateCccScheduleEvent{}
func (s *ComputeCloudAtCustomerCccUpgradeScheduleResourceCrud) updateCompartment(compartment interface{}) error {
	changeCompartmentRequest := oci_compute_cloud_at_customer.ChangeCccUpgradeScheduleCompartmentRequest{}

=== ./internal/service/compute_cloud_at_customer/compute_cloud_at_customer_ccc_upgrade_schedule_data_source.go ===
func ComputeCloudAtCustomerCccUpgradeScheduleDataSource() *schema.Resource {
	fieldMap := make(map[string]*schema.Schema)
func readSingularComputeCloudAtCustomerCccUpgradeSchedule(d *schema.ResourceData, m interface{}) error {
	sync := &ComputeCloudAtCustomerCccUpgradeScheduleDataSourceCrud{}
func (s *ComputeCloudAtCustomerCccUpgradeScheduleDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *ComputeCloudAtCustomerCccUpgradeScheduleDataSourceCrud) Get() error {
	request := oci_compute_cloud_at_customer.GetCccUpgradeScheduleRequest{}
func (s *ComputeCloudAtCustomerCccUpgradeScheduleDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/compute_cloud_at_customer/compute_cloud_at_customer_ccc_infrastructure_resource.go ===
func ComputeCloudAtCustomerCccInfrastructureResource() *schema.Resource {
	return &schema.Resource{
func createComputeCloudAtCustomerCccInfrastructure(d *schema.ResourceData, m interface{}) error {
	sync := &ComputeCloudAtCustomerCccInfrastructureResourceCrud{}
func readComputeCloudAtCustomerCccInfrastructure(d *schema.ResourceData, m interface{}) error {
	sync := &ComputeCloudAtCustomerCccInfrastructureResourceCrud{}
func updateComputeCloudAtCustomerCccInfrastructure(d *schema.ResourceData, m interface{}) error {
	sync := &ComputeCloudAtCustomerCccInfrastructureResourceCrud{}
func deleteComputeCloudAtCustomerCccInfrastructure(d *schema.ResourceData, m interface{}) error {
	sync := &ComputeCloudAtCustomerCccInfrastructureResourceCrud{}
func (s *ComputeCloudAtCustomerCccInfrastructureResourceCrud) ID() string {
	return *s.Res.Id
func (s *ComputeCloudAtCustomerCccInfrastructureResourceCrud) CreatedPending() []string {
	return []string{}
func (s *ComputeCloudAtCustomerCccInfrastructureResourceCrud) CreatedTarget() []string {
	return []string{
func (s *ComputeCloudAtCustomerCccInfrastructureResourceCrud) DeletedPending() []string {
	return []string{}
func (s *ComputeCloudAtCustomerCccInfrastructureResourceCrud) DeletedTarget() []string {
	return []string{
func (s *ComputeCloudAtCustomerCccInfrastructureResourceCrud) Create() error {
	request := oci_compute_cloud_at_customer.CreateCccInfrastructureRequest{}
func (s *ComputeCloudAtCustomerCccInfrastructureResourceCrud) Get() error {
	request := oci_compute_cloud_at_customer.GetCccInfrastructureRequest{}
func (s *ComputeCloudAtCustomerCccInfrastructureResourceCrud) Update() error {
	if compartment, ok := s.D.GetOkExists("compartment_id"); ok && s.D.HasChange("compartment_id") {
func (s *ComputeCloudAtCustomerCccInfrastructureResourceCrud) Delete() error {
	request := oci_compute_cloud_at_customer.DeleteCccInfrastructureRequest{}
func (s *ComputeCloudAtCustomerCccInfrastructureResourceCrud) SetData() error {
	if s.Res.CccUpgradeScheduleId != nil {
func (s *ComputeCloudAtCustomerCccInfrastructureResourceCrud) updateCompartment(compartment interface{}) error {
	changeCompartmentRequest := oci_compute_cloud_at_customer.ChangeCccInfrastructureCompartmentRequest{}

=== ./internal/service/compute_cloud_at_customer/compute_cloud_at_customer_ccc_infrastructures_data_source.go ===
func ComputeCloudAtCustomerCccInfrastructuresDataSource() *schema.Resource {
	return &schema.Resource{
func readComputeCloudAtCustomerCccInfrastructures(d *schema.ResourceData, m interface{}) error {
	sync := &ComputeCloudAtCustomerCccInfrastructuresDataSourceCrud{}
func (s *ComputeCloudAtCustomerCccInfrastructuresDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *ComputeCloudAtCustomerCccInfrastructuresDataSourceCrud) Get() error {
	request := oci_compute_cloud_at_customer.ListCccInfrastructuresRequest{}
func (s *ComputeCloudAtCustomerCccInfrastructuresDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/compute_cloud_at_customer/compute_cloud_at_customer_ccc_infrastructure_data_source.go ===
func ComputeCloudAtCustomerCccInfrastructureDataSource() *schema.Resource {
	fieldMap := make(map[string]*schema.Schema)
func readSingularComputeCloudAtCustomerCccInfrastructure(d *schema.ResourceData, m interface{}) error {
	sync := &ComputeCloudAtCustomerCccInfrastructureDataSourceCrud{}
func (s *ComputeCloudAtCustomerCccInfrastructureDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *ComputeCloudAtCustomerCccInfrastructureDataSourceCrud) Get() error {
	request := oci_compute_cloud_at_customer.GetCccInfrastructureRequest{}
func (s *ComputeCloudAtCustomerCccInfrastructureDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/compute_cloud_at_customer/compute_cloud_at_customer_ccc_upgrade_schedules_data_source.go ===
func ComputeCloudAtCustomerCccUpgradeSchedulesDataSource() *schema.Resource {
	return &schema.Resource{
func readComputeCloudAtCustomerCccUpgradeSchedules(d *schema.ResourceData, m interface{}) error {
	sync := &ComputeCloudAtCustomerCccUpgradeSchedulesDataSourceCrud{}
func (s *ComputeCloudAtCustomerCccUpgradeSchedulesDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *ComputeCloudAtCustomerCccUpgradeSchedulesDataSourceCrud) Get() error {
	request := oci_compute_cloud_at_customer.ListCccUpgradeSchedulesRequest{}
func (s *ComputeCloudAtCustomerCccUpgradeSchedulesDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/compute_cloud_at_customer/register_resource.go ===
func RegisterResource() {
	tfresource.RegisterResource("oci_compute_cloud_at_customer_ccc_infrastructure", ComputeCloudAtCustomerCccInfrastructureResource())

=== ./internal/service/fleet_apps_management/fleet_apps_management_fleet_credentials_data_source.go ===
func FleetAppsManagementFleetCredentialsDataSource() *schema.Resource {
	return &schema.Resource{
func readFleetAppsManagementFleetCredentials(d *schema.ResourceData, m interface{}) error {
	sync := &FleetAppsManagementFleetCredentialsDataSourceCrud{}
func (s *FleetAppsManagementFleetCredentialsDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *FleetAppsManagementFleetCredentialsDataSourceCrud) Get() error {
	request := oci_fleet_apps_management.ListFleetCredentialsRequest{}
func (s *FleetAppsManagementFleetCredentialsDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/fleet_apps_management/fleet_apps_management_fleet_properties_data_source.go ===
func FleetAppsManagementFleetPropertiesDataSource() *schema.Resource {
	return &schema.Resource{
func readFleetAppsManagementFleetProperties(d *schema.ResourceData, m interface{}) error {
	sync := &FleetAppsManagementFleetPropertiesDataSourceCrud{}
func (s *FleetAppsManagementFleetPropertiesDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *FleetAppsManagementFleetPropertiesDataSourceCrud) Get() error {
	request := oci_fleet_apps_management.ListFleetPropertiesRequest{}
func (s *FleetAppsManagementFleetPropertiesDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/fleet_apps_management/fleet_apps_management_maintenance_window_resource.go ===
func FleetAppsManagementMaintenanceWindowResource() *schema.Resource {
	return &schema.Resource{
func createFleetAppsManagementMaintenanceWindow(d *schema.ResourceData, m interface{}) error {
	sync := &FleetAppsManagementMaintenanceWindowResourceCrud{}
func readFleetAppsManagementMaintenanceWindow(d *schema.ResourceData, m interface{}) error {
	sync := &FleetAppsManagementMaintenanceWindowResourceCrud{}
func updateFleetAppsManagementMaintenanceWindow(d *schema.ResourceData, m interface{}) error {
	sync := &FleetAppsManagementMaintenanceWindowResourceCrud{}
func deleteFleetAppsManagementMaintenanceWindow(d *schema.ResourceData, m interface{}) error {
	sync := &FleetAppsManagementMaintenanceWindowResourceCrud{}
func (s *FleetAppsManagementMaintenanceWindowResourceCrud) ID() string {
	return *s.Res.Id
func (s *FleetAppsManagementMaintenanceWindowResourceCrud) CreatedPending() []string {
	return []string{}
func (s *FleetAppsManagementMaintenanceWindowResourceCrud) CreatedTarget() []string {
	return []string{
func (s *FleetAppsManagementMaintenanceWindowResourceCrud) DeletedPending() []string {
	return []string{
func (s *FleetAppsManagementMaintenanceWindowResourceCrud) DeletedTarget() []string {
	return []string{
func (s *FleetAppsManagementMaintenanceWindowResourceCrud) Create() error {
	request := oci_fleet_apps_management.CreateMaintenanceWindowRequest{}
func (s *FleetAppsManagementMaintenanceWindowResourceCrud) getMaintenanceWindowFromWorkRequest(workId *string, retryPolicy *oci_common.RetryPolicy,
	actionTypeEnum oci_fleet_apps_management.ActionTypeEnum, timeout time.Duration) error {
func (s *FleetAppsManagementMaintenanceWindowResourceCrud) Get() error {
	request := oci_fleet_apps_management.GetMaintenanceWindowRequest{}
func (s *FleetAppsManagementMaintenanceWindowResourceCrud) Update() error {
	request := oci_fleet_apps_management.UpdateMaintenanceWindowRequest{}
func (s *FleetAppsManagementMaintenanceWindowResourceCrud) Delete() error {
	request := oci_fleet_apps_management.DeleteMaintenanceWindowRequest{}
func (s *FleetAppsManagementMaintenanceWindowResourceCrud) SetData() error {
	if s.Res.CompartmentId != nil {

=== ./internal/service/fleet_apps_management/fleet_apps_management_onboarding_resource.go ===
func FleetAppsManagementOnboardingResource() *schema.Resource {
	return &schema.Resource{
func createFleetAppsManagementOnboarding(d *schema.ResourceData, m interface{}) error {
	sync := &FleetAppsManagementOnboardingResourceCrud{}
func readFleetAppsManagementOnboarding(d *schema.ResourceData, m interface{}) error {
	sync := &FleetAppsManagementOnboardingResourceCrud{}
func deleteFleetAppsManagementOnboarding(d *schema.ResourceData, m interface{}) error {
	return nil
func (s *FleetAppsManagementOnboardingResourceCrud) ID() string {
	return *s.Res.Id
func (s *FleetAppsManagementOnboardingResourceCrud) CreatedPending() []string {
	return []string{
func (s *FleetAppsManagementOnboardingResourceCrud) CreatedTarget() []string {
	return []string{
func (s *FleetAppsManagementOnboardingResourceCrud) DeletedPending() []string {
	return []string{
func (s *FleetAppsManagementOnboardingResourceCrud) DeletedTarget() []string {
	return []string{
func (s *FleetAppsManagementOnboardingResourceCrud) Create() error {
	request := oci_fleet_apps_management.CreateOnboardingRequest{}
func (s *FleetAppsManagementOnboardingResourceCrud) getOnboardingFromWorkRequest(workId *string, retryPolicy *oci_common.RetryPolicy,
	actionTypeEnum oci_fleet_apps_management.ActionTypeEnum, timeout time.Duration) error {
func (s *FleetAppsManagementOnboardingResourceCrud) Get() error {

func (s *FleetAppsManagementOnboardingResourceCrud) SetData() error {
	if s.Res.CompartmentId != nil {

=== ./internal/service/fleet_apps_management/fleet_apps_management_runbooks_data_source.go ===
func FleetAppsManagementRunbooksDataSource() *schema.Resource {
	return &schema.Resource{
func readFleetAppsManagementRunbooks(d *schema.ResourceData, m interface{}) error {
	sync := &FleetAppsManagementRunbooksDataSourceCrud{}
func (s *FleetAppsManagementRunbooksDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *FleetAppsManagementRunbooksDataSourceCrud) Get() error {
	request := oci_fleet_apps_management.ListRunbooksRequest{}
func (s *FleetAppsManagementRunbooksDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/fleet_apps_management/fleet_apps_management_properties_data_source.go ===
func FleetAppsManagementPropertiesDataSource() *schema.Resource {
	return &schema.Resource{
func readFleetAppsManagementProperties(d *schema.ResourceData, m interface{}) error {
	sync := &FleetAppsManagementPropertiesDataSourceCrud{}
func (s *FleetAppsManagementPropertiesDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *FleetAppsManagementPropertiesDataSourceCrud) Get() error {
	request := oci_fleet_apps_management.ListPropertiesRequest{}
func (s *FleetAppsManagementPropertiesDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/fleet_apps_management/fleet_apps_management_inventory_resources_data_source.go ===
func FleetAppsManagementInventoryResourcesDataSource() *schema.Resource {
	return &schema.Resource{
func readFleetAppsManagementInventoryResources(d *schema.ResourceData, m interface{}) error {
	sync := &FleetAppsManagementInventoryResourcesDataSourceCrud{}
func (s *FleetAppsManagementInventoryResourcesDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *FleetAppsManagementInventoryResourcesDataSourceCrud) Get() error {
	request := oci_fleet_apps_management.ListInventoryResourcesRequest{}
func (s *FleetAppsManagementInventoryResourcesDataSourceCrud) SetData() error {
	if s.Res == nil {
func InventoryResourceSummaryToMap(obj oci_fleet_apps_management.InventoryResourceSummary) map[string]interface{} {
	result := map[string]interface{}{}

=== ./internal/service/fleet_apps_management/fleet_apps_management_fleet_property_resource.go ===
func FleetAppsManagementFleetPropertyResource() *schema.Resource {
	return &schema.Resource{
func createFleetAppsManagementFleetProperty(d *schema.ResourceData, m interface{}) error {
	sync := &FleetAppsManagementFleetPropertyResourceCrud{}
func readFleetAppsManagementFleetProperty(d *schema.ResourceData, m interface{}) error {
	sync := &FleetAppsManagementFleetPropertyResourceCrud{}
func updateFleetAppsManagementFleetProperty(d *schema.ResourceData, m interface{}) error {
	sync := &FleetAppsManagementFleetPropertyResourceCrud{}
func deleteFleetAppsManagementFleetProperty(d *schema.ResourceData, m interface{}) error {
	sync := &FleetAppsManagementFleetPropertyResourceCrud{}
func (s *FleetAppsManagementFleetPropertyResourceCrud) ID() string {
	compositeId := GetFleetPropertyCompositeId(s.D.Get("fleet_id").(string), *s.Res.Id)
func (s *FleetAppsManagementFleetPropertyResourceCrud) CreatedPending() []string {
	return []string{}
func (s *FleetAppsManagementFleetPropertyResourceCrud) CreatedTarget() []string {
	return []string{
func (s *FleetAppsManagementFleetPropertyResourceCrud) DeletedPending() []string {
	return []string{}
func (s *FleetAppsManagementFleetPropertyResourceCrud) DeletedTarget() []string {
	return []string{
func (s *FleetAppsManagementFleetPropertyResourceCrud) Create() error {
	request := oci_fleet_apps_management.CreateFleetPropertyRequest{}
func (s *FleetAppsManagementFleetPropertyResourceCrud) Get() error {
	request := oci_fleet_apps_management.GetFleetPropertyRequest{}
func (s *FleetAppsManagementFleetPropertyResourceCrud) Update() error {
	request := oci_fleet_apps_management.UpdateFleetPropertyRequest{}
func (s *FleetAppsManagementFleetPropertyResourceCrud) Delete() error {
	request := oci_fleet_apps_management.DeleteFleetPropertyRequest{}
func (s *FleetAppsManagementFleetPropertyResourceCrud) SetData() error {


=== ./internal/service/fleet_apps_management/fleet_apps_management_runbook_data_source.go ===
func FleetAppsManagementRunbookDataSource() *schema.Resource {
	return &schema.Resource{
func readSingularFleetAppsManagementRunbook(d *schema.ResourceData, m interface{}) error {
	sync := &FleetAppsManagementRunbookDataSourceCrud{}
func (s *FleetAppsManagementRunbookDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *FleetAppsManagementRunbookDataSourceCrud) Get() error {
	request := oci_fleet_apps_management.GetRunbookRequest{}
func (s *FleetAppsManagementRunbookDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/fleet_apps_management/fleet_apps_management_maintenance_windows_data_source.go ===
func FleetAppsManagementMaintenanceWindowsDataSource() *schema.Resource {
	return &schema.Resource{
func readFleetAppsManagementMaintenanceWindows(d *schema.ResourceData, m interface{}) error {
	sync := &FleetAppsManagementMaintenanceWindowsDataSourceCrud{}
func (s *FleetAppsManagementMaintenanceWindowsDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *FleetAppsManagementMaintenanceWindowsDataSourceCrud) Get() error {
	request := oci_fleet_apps_management.ListMaintenanceWindowsRequest{}
func (s *FleetAppsManagementMaintenanceWindowsDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/fleet_apps_management/fleet_apps_management_announcements_data_source.go ===
func FleetAppsManagementAnnouncementsDataSource() *schema.Resource {
	return &schema.Resource{
func readFleetAppsManagementAnnouncements(d *schema.ResourceData, m interface{}) error {
	sync := &FleetAppsManagementAnnouncementsDataSourceCrud{}
func (s *FleetAppsManagementAnnouncementsDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *FleetAppsManagementAnnouncementsDataSourceCrud) Get() error {
	request := oci_fleet_apps_management.ListAnnouncementsRequest{}
func (s *FleetAppsManagementAnnouncementsDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/fleet_apps_management/fleet_apps_management_fleet_resource_data_source.go ===
func FleetAppsManagementFleetResourceDataSource() *schema.Resource {
	fieldMap := make(map[string]*schema.Schema)
func readSingularFleetAppsManagementFleetResource(d *schema.ResourceData, m interface{}) error {
	sync := &FleetAppsManagementFleetResourceDataSourceCrud{}
func (s *FleetAppsManagementFleetResourceDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *FleetAppsManagementFleetResourceDataSourceCrud) Get() error {
	request := oci_fleet_apps_management.GetFleetResourceRequest{}
func (s *FleetAppsManagementFleetResourceDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/fleet_apps_management/fleet_apps_management_scheduler_definition_data_source.go ===
func FleetAppsManagementSchedulerDefinitionDataSource() *schema.Resource {
	fieldMap := make(map[string]*schema.Schema)
func readSingularFleetAppsManagementSchedulerDefinition(d *schema.ResourceData, m interface{}) error {
	sync := &FleetAppsManagementSchedulerDefinitionDataSourceCrud{}
func (s *FleetAppsManagementSchedulerDefinitionDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *FleetAppsManagementSchedulerDefinitionDataSourceCrud) Get() error {
	request := oci_fleet_apps_management.GetSchedulerDefinitionRequest{}
func (s *FleetAppsManagementSchedulerDefinitionDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/fleet_apps_management/fleet_apps_management_fleet_products_data_source.go ===
func FleetAppsManagementFleetProductsDataSource() *schema.Resource {
	return &schema.Resource{
func readFleetAppsManagementFleetProducts(d *schema.ResourceData, m interface{}) error {
	sync := &FleetAppsManagementFleetProductsDataSourceCrud{}
func (s *FleetAppsManagementFleetProductsDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *FleetAppsManagementFleetProductsDataSourceCrud) Get() error {
	request := oci_fleet_apps_management.ListFleetProductsRequest{}
func (s *FleetAppsManagementFleetProductsDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/fleet_apps_management/fleet_apps_management_fleet_targets_data_source.go ===
func FleetAppsManagementFleetTargetsDataSource() *schema.Resource {
	return &schema.Resource{
func readFleetAppsManagementFleetTargets(d *schema.ResourceData, m interface{}) error {
	sync := &FleetAppsManagementFleetTargetsDataSourceCrud{}
func (s *FleetAppsManagementFleetTargetsDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *FleetAppsManagementFleetTargetsDataSourceCrud) Get() error {
	request := oci_fleet_apps_management.ListFleetTargetsRequest{}
func (s *FleetAppsManagementFleetTargetsDataSourceCrud) SetData() error {
	if s.Res == nil {
func TargetResourceToMap(obj *oci_fleet_apps_management.TargetResource) map[string]interface{} {
	result := map[string]interface{}{}

=== ./internal/service/fleet_apps_management/fleet_apps_management_onboardings_data_source.go ===
func FleetAppsManagementOnboardingsDataSource() *schema.Resource {
	return &schema.Resource{
func readFleetAppsManagementOnboardings(d *schema.ResourceData, m interface{}) error {
	sync := &FleetAppsManagementOnboardingsDataSourceCrud{}
func (s *FleetAppsManagementOnboardingsDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *FleetAppsManagementOnboardingsDataSourceCrud) Get() error {
	request := oci_fleet_apps_management.ListOnboardingsRequest{}
func (s *FleetAppsManagementOnboardingsDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/fleet_apps_management/fleet_apps_management_fleet_resource_resource.go ===
func FleetAppsManagementFleetResourceResource() *schema.Resource {
	return &schema.Resource{
func createFleetAppsManagementFleetResource(d *schema.ResourceData, m interface{}) error {
	sync := &FleetAppsManagementFleetResourceResourceCrud{}
func readFleetAppsManagementFleetResource(d *schema.ResourceData, m interface{}) error {
	sync := &FleetAppsManagementFleetResourceResourceCrud{}
func updateFleetAppsManagementFleetResource(d *schema.ResourceData, m interface{}) error {
	sync := &FleetAppsManagementFleetResourceResourceCrud{}
func deleteFleetAppsManagementFleetResource(d *schema.ResourceData, m interface{}) error {
	sync := &FleetAppsManagementFleetResourceResourceCrud{}
func (s *FleetAppsManagementFleetResourceResourceCrud) ID() string {
	return GetFleetResourceCompositeId(s.D.Get("fleet_id").(string), s.D.Get("resource_id").(string))
func (s *FleetAppsManagementFleetResourceResourceCrud) CreatedPending() []string {
	return []string{}
func (s *FleetAppsManagementFleetResourceResourceCrud) CreatedTarget() []string {
	return []string{
func (s *FleetAppsManagementFleetResourceResourceCrud) DeletedPending() []string {
	return []string{}
func (s *FleetAppsManagementFleetResourceResourceCrud) DeletedTarget() []string {
	return []string{
func (s *FleetAppsManagementFleetResourceResourceCrud) Create() error {
	request := oci_fleet_apps_management.CreateFleetResourceRequest{}
func (s *FleetAppsManagementFleetResourceResourceCrud) getFleetResourceFromWorkRequest(workId *string, retryPolicy *oci_common.RetryPolicy,
	actionTypeEnum oci_fleet_apps_management.ActionTypeEnum, timeout time.Duration) error {
func fleetResourceWorkRequestShouldRetryFunc(timeout time.Duration) func(response oci_common.OCIOperationResponse) bool {
	startTime := time.Now()
func fleetResourceWaitForWorkRequest(wId *string, entityType string, action oci_fleet_apps_management.ActionTypeEnum,
	timeout time.Duration, disableFoundRetries bool, client *oci_fleet_apps_management.FleetAppsManagementClient) (*string, error) {
func getErrorFromFleetAppsManagementFleetResourceWorkRequest(client *oci_fleet_apps_management.FleetAppsManagementClient, workId *string, retryPolicy *oci_common.RetryPolicy, entityType string, action oci_fleet_apps_management.ActionTypeEnum) error {
	response, err := client.ListWorkRequestErrors(context.Background(),
func (s *FleetAppsManagementFleetResourceResourceCrud) Get() error {
	request := oci_fleet_apps_management.GetFleetResourceRequest{}
func (s *FleetAppsManagementFleetResourceResourceCrud) Update() error {
	request := oci_fleet_apps_management.UpdateFleetResourceRequest{}
func (s *FleetAppsManagementFleetResourceResourceCrud) Delete() error {
	request := oci_fleet_apps_management.DeleteFleetResourceRequest{}
func (s *FleetAppsManagementFleetResourceResourceCrud) SetData() error {

func GetFleetResourceCompositeId(fleetId string, fleetResourceId string) string {
	fleetId = url.PathEscape(fleetId)
func parseFleetResourceCompositeId(compositeId string) (fleetId string, fleetResourceId string, err error) {
	parts := strings.Split(compositeId, "/")
func FleetResourceSummaryToMap(obj oci_fleet_apps_management.FleetResourceSummary) map[string]interface{} {
	result := map[string]interface{}{}

=== ./internal/service/fleet_apps_management/fleet_apps_management_fleet_credential_resource.go ===
func FleetAppsManagementFleetCredentialResource() *schema.Resource {
	return &schema.Resource{
func createFleetAppsManagementFleetCredential(d *schema.ResourceData, m interface{}) error {
	sync := &FleetAppsManagementFleetCredentialResourceCrud{}
func readFleetAppsManagementFleetCredential(d *schema.ResourceData, m interface{}) error {
	sync := &FleetAppsManagementFleetCredentialResourceCrud{}
func updateFleetAppsManagementFleetCredential(d *schema.ResourceData, m interface{}) error {
	sync := &FleetAppsManagementFleetCredentialResourceCrud{}
func deleteFleetAppsManagementFleetCredential(d *schema.ResourceData, m interface{}) error {
	sync := &FleetAppsManagementFleetCredentialResourceCrud{}
func (s *FleetAppsManagementFleetCredentialResourceCrud) ID() string {
	return GetFleetCredentialCompositeId(*s.Res.Id, s.D.Get("fleet_id").(string))
func (s *FleetAppsManagementFleetCredentialResourceCrud) CreatedPending() []string {
	return []string{}
func (s *FleetAppsManagementFleetCredentialResourceCrud) CreatedTarget() []string {
	return []string{
func (s *FleetAppsManagementFleetCredentialResourceCrud) DeletedPending() []string {
	return []string{}
func (s *FleetAppsManagementFleetCredentialResourceCrud) DeletedTarget() []string {
	return []string{
func (s *FleetAppsManagementFleetCredentialResourceCrud) Create() error {
	request := oci_fleet_apps_management.CreateFleetCredentialRequest{}
func (s *FleetAppsManagementFleetCredentialResourceCrud) getFleetCredentialFromWorkRequest(workId *string, retryPolicy *oci_common.RetryPolicy,
	actionTypeEnum oci_fleet_apps_management.ActionTypeEnum, timeout time.Duration) error {
func (s *FleetAppsManagementFleetCredentialResourceCrud) Get() error {
	request := oci_fleet_apps_management.GetFleetCredentialRequest{}
func (s *FleetAppsManagementFleetCredentialResourceCrud) Update() error {
	request := oci_fleet_apps_management.UpdateFleetCredentialRequest{}
func (s *FleetAppsManagementFleetCredentialResourceCrud) Delete() error {
	request := oci_fleet_apps_management.DeleteFleetCredentialRequest{}
func (s *FleetAppsManagementFleetCredentialResourceCrud) SetData() error {

func (s *FleetAppsManagementFleetCredentialResourceCrud) mapToCredentialDetails(fieldKeyFormat string) (oci_fleet_apps_management.CredentialDetails, error) {
	var baseObject oci_fleet_apps_management.CredentialDetails
func (s *FleetAppsManagementFleetCredentialResourceCrud) mapToCredentialEntitySpecificDetails(fieldKeyFormat string) (oci_fleet_apps_management.CredentialEntitySpecificDetails, error) {
	var baseObject oci_fleet_apps_management.CredentialEntitySpecificDetails

=== ./internal/service/fleet_apps_management/fleet_apps_management_fleet_property_data_source.go ===
func FleetAppsManagementFleetPropertyDataSource() *schema.Resource {
	fieldMap := make(map[string]*schema.Schema)
func readSingularFleetAppsManagementFleetProperty(d *schema.ResourceData, m interface{}) error {
	sync := &FleetAppsManagementFleetPropertyDataSourceCrud{}
func (s *FleetAppsManagementFleetPropertyDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *FleetAppsManagementFleetPropertyDataSourceCrud) Get() error {
	request := oci_fleet_apps_management.GetFleetPropertyRequest{}
func (s *FleetAppsManagementFleetPropertyDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/fleet_apps_management/fleet_apps_management_fleet_credential_data_source.go ===
func FleetAppsManagementFleetCredentialDataSource() *schema.Resource {
	fieldMap := make(map[string]*schema.Schema)
func readSingularFleetAppsManagementFleetCredential(d *schema.ResourceData, m interface{}) error {
	sync := &FleetAppsManagementFleetCredentialDataSourceCrud{}
func (s *FleetAppsManagementFleetCredentialDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *FleetAppsManagementFleetCredentialDataSourceCrud) Get() error {
	request := oci_fleet_apps_management.GetFleetCredentialRequest{}
func (s *FleetAppsManagementFleetCredentialDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/fleet_apps_management/fleet_apps_management_task_records_data_source.go ===
func FleetAppsManagementTaskRecordsDataSource() *schema.Resource {
	return &schema.Resource{
func readFleetAppsManagementTaskRecords(d *schema.ResourceData, m interface{}) error {
	sync := &FleetAppsManagementTaskRecordsDataSourceCrud{}
func (s *FleetAppsManagementTaskRecordsDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *FleetAppsManagementTaskRecordsDataSourceCrud) Get() error {
	request := oci_fleet_apps_management.ListTaskRecordsRequest{}
func (s *FleetAppsManagementTaskRecordsDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/fleet_apps_management/fleet_apps_management_fleet_resource.go ===
func FleetAppsManagementFleetResource() *schema.Resource {
	return &schema.Resource{
func createFleetAppsManagementFleet(d *schema.ResourceData, m interface{}) error {
	sync := &FleetAppsManagementFleetResourceCrud{}
func readFleetAppsManagementFleet(d *schema.ResourceData, m interface{}) error {
	sync := &FleetAppsManagementFleetResourceCrud{}
func updateFleetAppsManagementFleet(d *schema.ResourceData, m interface{}) error {
	sync := &FleetAppsManagementFleetResourceCrud{}
func deleteFleetAppsManagementFleet(d *schema.ResourceData, m interface{}) error {
	sync := &FleetAppsManagementFleetResourceCrud{}
func (s *FleetAppsManagementFleetResourceCrud) ID() string {
	return *s.Res.Id
func (s *FleetAppsManagementFleetResourceCrud) CreatedPending() []string {
	return []string{
func (s *FleetAppsManagementFleetResourceCrud) CreatedTarget() []string {
	return []string{
func (s *FleetAppsManagementFleetResourceCrud) DeletedPending() []string {
	return []string{
func (s *FleetAppsManagementFleetResourceCrud) DeletedTarget() []string {
	return []string{
func (s *FleetAppsManagementFleetResourceCrud) Create() error {
	request := oci_fleet_apps_management.CreateFleetRequest{}
func (s *FleetAppsManagementFleetResourceCrud) getFleetFromWorkRequest(workId *string, retryPolicy *oci_common.RetryPolicy,
	actionTypeEnum oci_fleet_apps_management.ActionTypeEnum, timeout time.Duration) error {
func (s *FleetAppsManagementFleetResourceCrud) Get() error {
	request := oci_fleet_apps_management.GetFleetRequest{}
func (s *FleetAppsManagementFleetResourceCrud) Update() error {
	request := oci_fleet_apps_management.UpdateFleetRequest{}
func (s *FleetAppsManagementFleetResourceCrud) Delete() error {
	request := oci_fleet_apps_management.DeleteFleetRequest{}
func (s *FleetAppsManagementFleetResourceCrud) SetData() error {
	if s.Res.ApplicationType != nil {
func (s *FleetAppsManagementFleetResourceCrud) mapToAssociatedFleetResourceDetails(fieldKeyFormat string) (oci_fleet_apps_management.AssociatedFleetResourceDetails, error) {
	result := oci_fleet_apps_management.AssociatedFleetResourceDetails{}
func AssociatedFleetResourceDetailsToMap(obj oci_fleet_apps_management.AssociatedFleetResourceDetails) map[string]interface{} {
	result := map[string]interface{}{}
func (s *FleetAppsManagementFleetResourceCrud) mapToCondition(fieldKeyFormat string) (oci_fleet_apps_management.Condition, error) {
	result := oci_fleet_apps_management.Condition{}
func (s *FleetAppsManagementFleetResourceCrud) mapToNotificationPreferences(fieldKeyFormat string) (oci_fleet_apps_management.NotificationPreferences, error) {
	result := oci_fleet_apps_management.NotificationPreferences{}
func (s *FleetAppsManagementFleetResourceCrud) mapToPreferences(fieldKeyFormat string) (oci_fleet_apps_management.Preferences, error) {
	result := oci_fleet_apps_management.Preferences{}
func (s *FleetAppsManagementFleetResourceCrud) mapToRule(fieldKeyFormat string) (oci_fleet_apps_management.Rule, error) {
	result := oci_fleet_apps_management.Rule{}
func (s *FleetAppsManagementFleetResourceCrud) mapToSelectionCriteria(fieldKeyFormat string) (oci_fleet_apps_management.SelectionCriteria, error) {
	result := oci_fleet_apps_management.SelectionCriteria{}

=== ./internal/service/fleet_apps_management/fleet_apps_management_fleet_compliance_report_data_source.go ===
func FleetAppsManagementFleetComplianceReportDataSource() *schema.Resource {
	return &schema.Resource{
func readSingularFleetAppsManagementFleetComplianceReport(d *schema.ResourceData, m interface{}) error {
	sync := &FleetAppsManagementFleetComplianceReportDataSourceCrud{}
func (s *FleetAppsManagementFleetComplianceReportDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *FleetAppsManagementFleetComplianceReportDataSourceCrud) Get() error {
	request := oci_fleet_apps_management.GetComplianceReportRequest{}
func (s *FleetAppsManagementFleetComplianceReportDataSourceCrud) SetData() error {
	if s.Res == nil {
func ComplianceReportResourceToMap(obj oci_fleet_apps_management.ComplianceReportResource) map[string]interface{} {
	result := map[string]interface{}{}

=== ./internal/service/fleet_apps_management/fleet_apps_management_scheduler_definitions_data_source.go ===
func FleetAppsManagementSchedulerDefinitionsDataSource() *schema.Resource {
	return &schema.Resource{
func readFleetAppsManagementSchedulerDefinitions(d *schema.ResourceData, m interface{}) error {
	sync := &FleetAppsManagementSchedulerDefinitionsDataSourceCrud{}
func (s *FleetAppsManagementSchedulerDefinitionsDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *FleetAppsManagementSchedulerDefinitionsDataSourceCrud) Get() error {
	request := oci_fleet_apps_management.ListSchedulerDefinitionsRequest{}
func (s *FleetAppsManagementSchedulerDefinitionsDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/fleet_apps_management/fleet_apps_management_scheduler_definition_resource.go ===
func FleetAppsManagementSchedulerDefinitionResource() *schema.Resource {
	return &schema.Resource{
func createFleetAppsManagementSchedulerDefinition(d *schema.ResourceData, m interface{}) error {
	sync := &FleetAppsManagementSchedulerDefinitionResourceCrud{}
func readFleetAppsManagementSchedulerDefinition(d *schema.ResourceData, m interface{}) error {
	sync := &FleetAppsManagementSchedulerDefinitionResourceCrud{}
func updateFleetAppsManagementSchedulerDefinition(d *schema.ResourceData, m interface{}) error {
	sync := &FleetAppsManagementSchedulerDefinitionResourceCrud{}
func deleteFleetAppsManagementSchedulerDefinition(d *schema.ResourceData, m interface{}) error {
	sync := &FleetAppsManagementSchedulerDefinitionResourceCrud{}
func (s *FleetAppsManagementSchedulerDefinitionResourceCrud) ID() string {
	return *s.Res.Id
func (s *FleetAppsManagementSchedulerDefinitionResourceCrud) CreatedPending() []string {
	return []string{
func (s *FleetAppsManagementSchedulerDefinitionResourceCrud) CreatedTarget() []string {
	return []string{
func (s *FleetAppsManagementSchedulerDefinitionResourceCrud) DeletedPending() []string {
	return []string{
func (s *FleetAppsManagementSchedulerDefinitionResourceCrud) DeletedTarget() []string {
	return []string{
func (s *FleetAppsManagementSchedulerDefinitionResourceCrud) Create() error {
	request := oci_fleet_apps_management.CreateSchedulerDefinitionRequest{}
func (s *FleetAppsManagementSchedulerDefinitionResourceCrud) getSchedulerDefinitionFromWorkRequest(workId *string, retryPolicy *oci_common.RetryPolicy,
	actionTypeEnum oci_fleet_apps_management.ActionTypeEnum, timeout time.Duration) error {
func (s *FleetAppsManagementSchedulerDefinitionResourceCrud) Get() error {
	request := oci_fleet_apps_management.GetSchedulerDefinitionRequest{}
func (s *FleetAppsManagementSchedulerDefinitionResourceCrud) Update() error {
	request := oci_fleet_apps_management.UpdateSchedulerDefinitionRequest{}
func (s *FleetAppsManagementSchedulerDefinitionResourceCrud) Delete() error {
	request := oci_fleet_apps_management.DeleteSchedulerDefinitionRequest{}
func (s *FleetAppsManagementSchedulerDefinitionResourceCrud) SetData() error {
	s.D.Set("action_group_types", s.Res.ActionGroupTypes)
func (s *FleetAppsManagementSchedulerDefinitionResourceCrud) mapToActionGroup(fieldKeyFormat string) (oci_fleet_apps_management.ActionGroup, error) {
	result := oci_fleet_apps_management.ActionGroup{}
func (s *FleetAppsManagementSchedulerDefinitionResourceCrud) mapToInputParameter(fieldKeyFormat string) (oci_fleet_apps_management.InputParameter, error) {
	result := oci_fleet_apps_management.InputParameter{}
func (s *FleetAppsManagementSchedulerDefinitionResourceCrud) mapToOperationRunbook(fieldKeyFormat string) (oci_fleet_apps_management.OperationRunbook, error) {
	result := oci_fleet_apps_management.OperationRunbook{}
func (s *FleetAppsManagementSchedulerDefinitionResourceCrud) mapToSchedule(fieldKeyFormat string) (oci_fleet_apps_management.Schedule, error) {
	result := oci_fleet_apps_management.Schedule{}
func (s *FleetAppsManagementSchedulerDefinitionResourceCrud) mapToTaskArgument(fieldKeyFormat string) (oci_fleet_apps_management.TaskArgument, error) {
	result := oci_fleet_apps_management.TaskArgument{}

=== ./internal/service/fleet_apps_management/fleet_apps_management_onboarding_policies_data_source.go ===
func FleetAppsManagementOnboardingPoliciesDataSource() *schema.Resource {
	return &schema.Resource{
func readFleetAppsManagementOnboardingPolicies(d *schema.ResourceData, m interface{}) error {
	sync := &FleetAppsManagementOnboardingPoliciesDataSourceCrud{}
func (s *FleetAppsManagementOnboardingPoliciesDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *FleetAppsManagementOnboardingPoliciesDataSourceCrud) Get() error {
	request := oci_fleet_apps_management.ListOnboardingPoliciesRequest{}
func (s *FleetAppsManagementOnboardingPoliciesDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/fleet_apps_management/fleet_apps_management_fleet_data_source.go ===
func FleetAppsManagementFleetDataSource() *schema.Resource {
	fieldMap := make(map[string]*schema.Schema)
func readSingularFleetAppsManagementFleet(d *schema.ResourceData, m interface{}) error {
	sync := &FleetAppsManagementFleetDataSourceCrud{}
func (s *FleetAppsManagementFleetDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *FleetAppsManagementFleetDataSourceCrud) Get() error {
	request := oci_fleet_apps_management.GetFleetRequest{}
func (s *FleetAppsManagementFleetDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/fleet_apps_management/fleet_apps_management_property_resource.go ===
func FleetAppsManagementPropertyResource() *schema.Resource {
	return &schema.Resource{
func createFleetAppsManagementProperty(d *schema.ResourceData, m interface{}) error {
	sync := &FleetAppsManagementPropertyResourceCrud{}
func readFleetAppsManagementProperty(d *schema.ResourceData, m interface{}) error {
	sync := &FleetAppsManagementPropertyResourceCrud{}
func updateFleetAppsManagementProperty(d *schema.ResourceData, m interface{}) error {
	sync := &FleetAppsManagementPropertyResourceCrud{}
func deleteFleetAppsManagementProperty(d *schema.ResourceData, m interface{}) error {
	sync := &FleetAppsManagementPropertyResourceCrud{}
func (s *FleetAppsManagementPropertyResourceCrud) ID() string {
	return *s.Res.Id
func (s *FleetAppsManagementPropertyResourceCrud) CreatedPending() []string {
	return []string{}
func (s *FleetAppsManagementPropertyResourceCrud) CreatedTarget() []string {
	return []string{
func (s *FleetAppsManagementPropertyResourceCrud) DeletedPending() []string {
	return []string{}
func (s *FleetAppsManagementPropertyResourceCrud) DeletedTarget() []string {
	return []string{
func (s *FleetAppsManagementPropertyResourceCrud) Create() error {
	request := oci_fleet_apps_management.CreatePropertyRequest{}
func (s *FleetAppsManagementPropertyResourceCrud) Get() error {
	request := oci_fleet_apps_management.GetPropertyRequest{}
func (s *FleetAppsManagementPropertyResourceCrud) Update() error {
	request := oci_fleet_apps_management.UpdatePropertyRequest{}
func (s *FleetAppsManagementPropertyResourceCrud) Delete() error {
	request := oci_fleet_apps_management.DeletePropertyRequest{}
func (s *FleetAppsManagementPropertyResourceCrud) SetData() error {
	if s.Res.CompartmentId != nil {

=== ./internal/service/fleet_apps_management/fleet_apps_management_property_data_source.go ===
func FleetAppsManagementPropertyDataSource() *schema.Resource {
	fieldMap := make(map[string]*schema.Schema)
func readSingularFleetAppsManagementProperty(d *schema.ResourceData, m interface{}) error {
	sync := &FleetAppsManagementPropertyDataSourceCrud{}
func (s *FleetAppsManagementPropertyDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *FleetAppsManagementPropertyDataSourceCrud) Get() error {
	request := oci_fleet_apps_management.GetPropertyRequest{}
func (s *FleetAppsManagementPropertyDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/fleet_apps_management/fleet_apps_management_task_record_data_source.go ===
func FleetAppsManagementTaskRecordDataSource() *schema.Resource {
	return &schema.Resource{
func readSingularFleetAppsManagementTaskRecord(d *schema.ResourceData, m interface{}) error {
	sync := &FleetAppsManagementTaskRecordDataSourceCrud{}
func (s *FleetAppsManagementTaskRecordDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *FleetAppsManagementTaskRecordDataSourceCrud) Get() error {
	request := oci_fleet_apps_management.GetTaskRecordRequest{}
func (s *FleetAppsManagementTaskRecordDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/fleet_apps_management/fleet_apps_management_fleet_resources_data_source.go ===
func FleetAppsManagementFleetResourcesDataSource() *schema.Resource {
	return &schema.Resource{
func readFleetAppsManagementFleetResources(d *schema.ResourceData, m interface{}) error {
	sync := &FleetAppsManagementFleetResourcesDataSourceCrud{}
func (s *FleetAppsManagementFleetResourcesDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *FleetAppsManagementFleetResourcesDataSourceCrud) Get() error {
	request := oci_fleet_apps_management.ListFleetResourcesRequest{}
func (s *FleetAppsManagementFleetResourcesDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/fleet_apps_management/fleet_apps_management_scheduler_definition_scheduled_fleets_data_source.go ===
func FleetAppsManagementSchedulerDefinitionScheduledFleetsDataSource() *schema.Resource {
	return &schema.Resource{
func readFleetAppsManagementSchedulerDefinitionScheduledFleets(d *schema.ResourceData, m interface{}) error {
	sync := &FleetAppsManagementSchedulerDefinitionScheduledFleetsDataSourceCrud{}
func (s *FleetAppsManagementSchedulerDefinitionScheduledFleetsDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *FleetAppsManagementSchedulerDefinitionScheduledFleetsDataSourceCrud) Get() error {
	request := oci_fleet_apps_management.ListScheduledFleetsRequest{}
func (s *FleetAppsManagementSchedulerDefinitionScheduledFleetsDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/fleet_apps_management/fleet_apps_management_fleets_data_source.go ===
func FleetAppsManagementFleetsDataSource() *schema.Resource {
	return &schema.Resource{
func readFleetAppsManagementFleets(d *schema.ResourceData, m interface{}) error {
	sync := &FleetAppsManagementFleetsDataSourceCrud{}
func (s *FleetAppsManagementFleetsDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *FleetAppsManagementFleetsDataSourceCrud) Get() error {
	request := oci_fleet_apps_management.ListFleetsRequest{}
func (s *FleetAppsManagementFleetsDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/fleet_apps_management/fleet_apps_management_maintenance_window_data_source.go ===
func FleetAppsManagementMaintenanceWindowDataSource() *schema.Resource {
	fieldMap := make(map[string]*schema.Schema)
func readSingularFleetAppsManagementMaintenanceWindow(d *schema.ResourceData, m interface{}) error {
	sync := &FleetAppsManagementMaintenanceWindowDataSourceCrud{}
func (s *FleetAppsManagementMaintenanceWindowDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *FleetAppsManagementMaintenanceWindowDataSourceCrud) Get() error {
	request := oci_fleet_apps_management.GetMaintenanceWindowRequest{}
func (s *FleetAppsManagementMaintenanceWindowDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/fleet_apps_management/register_resource.go ===
func RegisterResource() {
	tfresource.RegisterResource("oci_fleet_apps_management_fleet", FleetAppsManagementFleetResource())

=== ./internal/service/apm_traces/apm_traces_trace_snapshot_data_data_source.go ===
func ApmTracesTraceSnapshotDataDataSource() *schema.Resource {
	return &schema.Resource{
func readSingularApmTracesTraceSnapshotData(d *schema.ResourceData, m interface{}) error {
	sync := &ApmTracesTraceSnapshotDataDataSourceCrud{}
func (s *ApmTracesTraceSnapshotDataDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *ApmTracesTraceSnapshotDataDataSourceCrud) Get() error {
	request := oci_apm_traces.GetTraceSnapshotRequest{}
func (s *ApmTracesTraceSnapshotDataDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/apm_traces/apm_traces_trace_aggregated_snapshot_data_data_source.go ===
func ApmTracesTraceAggregatedSnapshotDataDataSource() *schema.Resource {
	return &schema.Resource{
func readSingularApmTracesTraceAggregatedSnapshotData(d *schema.ResourceData, m interface{}) error {
	sync := &ApmTracesTraceAggregatedSnapshotDataDataSourceCrud{}
func (s *ApmTracesTraceAggregatedSnapshotDataDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *ApmTracesTraceAggregatedSnapshotDataDataSourceCrud) Get() error {
	request := oci_apm_traces.GetAggregatedSnapshotRequest{}
func (s *ApmTracesTraceAggregatedSnapshotDataDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/apm_traces/apm_traces_trace_data_source.go ===
func ApmTracesTraceDataSource() *schema.Resource {
	return &schema.Resource{
func readSingularApmTracesTrace(d *schema.ResourceData, m interface{}) error {
	sync := &ApmTracesTraceDataSourceCrud{}
func (s *ApmTracesTraceDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *ApmTracesTraceDataSourceCrud) Get() error {
	request := oci_apm_traces.GetTraceRequest{}
func (s *ApmTracesTraceDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/apm_traces/apm_traces_query_quick_picks_data_source.go ===
func ApmTracesQueryQuickPicksDataSource() *schema.Resource {
	return &schema.Resource{
func readApmTracesQueryQuickPicks(d *schema.ResourceData, m interface{}) error {
	sync := &ApmTracesQueryQuickPicksDataSourceCrud{}
func (s *ApmTracesQueryQuickPicksDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *ApmTracesQueryQuickPicksDataSourceCrud) Get() error {
	request := oci_apm_traces.ListQuickPicksRequest{}
func (s *ApmTracesQueryQuickPicksDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/apm_traces/register_resource.go ===
func RegisterResource() {
}

=== ./internal/service/onesubscription/onesubscription_commitment_data_source.go ===
func OnesubscriptionCommitmentDataSource() *schema.Resource {
	return &schema.Resource{
func readSingularOnesubscriptionCommitment(d *schema.ResourceData, m interface{}) error {
	sync := &OnesubscriptionCommitmentDataSourceCrud{}
func (s *OnesubscriptionCommitmentDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *OnesubscriptionCommitmentDataSourceCrud) Get() error {
	request := oci_onesubscription.GetCommitmentRequest{}
func (s *OnesubscriptionCommitmentDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/onesubscription/onesubscription_subscribed_service_data_source.go ===
func OnesubscriptionSubscribedServiceDataSource() *schema.Resource {
	return &schema.Resource{
func readSingularOnesubscriptionSubscribedService(d *schema.ResourceData, m interface{}) error {
	sync := &OnesubscriptionSubscribedServiceDataSourceCrud{}
func (s *OnesubscriptionSubscribedServiceDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *OnesubscriptionSubscribedServiceDataSourceCrud) Get() error {
	request := oci_onesubscription.GetSubscribedServiceRequest{}
func (s *OnesubscriptionSubscribedServiceDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/onesubscription/onesubscription_aggregated_computed_usages_data_source.go ===
func OnesubscriptionAggregatedComputedUsagesDataSource() *schema.Resource {
	return &schema.Resource{
func readOnesubscriptionAggregatedComputedUsages(d *schema.ResourceData, m interface{}) error {
	sync := &OnesubscriptionAggregatedComputedUsagesDataSourceCrud{}
func (s *OnesubscriptionAggregatedComputedUsagesDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *OnesubscriptionAggregatedComputedUsagesDataSourceCrud) Get() error {
	request := oci_onesubscription.ListAggregatedComputedUsagesRequest{}
func (s *OnesubscriptionAggregatedComputedUsagesDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/onesubscription/onesubscription_billing_schedules_data_source.go ===
func OnesubscriptionBillingSchedulesDataSource() *schema.Resource {
	return &schema.Resource{
func readOnesubscriptionBillingSchedules(d *schema.ResourceData, m interface{}) error {
	sync := &OnesubscriptionBillingSchedulesDataSourceCrud{}
func (s *OnesubscriptionBillingSchedulesDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *OnesubscriptionBillingSchedulesDataSourceCrud) Get() error {
	request := oci_onesubscription.ListBillingSchedulesRequest{}
func (s *OnesubscriptionBillingSchedulesDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/onesubscription/onesubscription_subscriptions_data_source.go ===
func OnesubscriptionSubscriptionsDataSource() *schema.Resource {
	return &schema.Resource{
func readOnesubscriptionSubscriptions(d *schema.ResourceData, m interface{}) error {
	sync := &OnesubscriptionSubscriptionsDataSourceCrud{}
func (s *OnesubscriptionSubscriptionsDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *OnesubscriptionSubscriptionsDataSourceCrud) Get() error {
	request := oci_onesubscription.ListSubscriptionsRequest{}
func (s *OnesubscriptionSubscriptionsDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/onesubscription/onesubscription_invoice_line_computed_usages_data_source.go ===
func OnesubscriptionInvoiceLineComputedUsagesDataSource() *schema.Resource {
	return &schema.Resource{
func readOnesubscriptionInvoiceLineComputedUsages(d *schema.ResourceData, m interface{}) error {
	sync := &OnesubscriptionInvoiceLineComputedUsagesDataSourceCrud{}
func (s *OnesubscriptionInvoiceLineComputedUsagesDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *OnesubscriptionInvoiceLineComputedUsagesDataSourceCrud) Get() error {
	request := oci_onesubscription.ListInvoicelineComputedUsagesRequest{}
func (s *OnesubscriptionInvoiceLineComputedUsagesDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/onesubscription/onesubscription_commitments_data_source.go ===
func OnesubscriptionCommitmentsDataSource() *schema.Resource {
	return &schema.Resource{
func readOnesubscriptionCommitments(d *schema.ResourceData, m interface{}) error {
	sync := &OnesubscriptionCommitmentsDataSourceCrud{}
func (s *OnesubscriptionCommitmentsDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *OnesubscriptionCommitmentsDataSourceCrud) Get() error {
	request := oci_onesubscription.ListCommitmentsRequest{}
func (s *OnesubscriptionCommitmentsDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/onesubscription/onesubscription_subscribed_services_data_source.go ===
func OnesubscriptionSubscribedServicesDataSource() *schema.Resource {
	return &schema.Resource{
func readOnesubscriptionSubscribedServices(d *schema.ResourceData, m interface{}) error {
	sync := &OnesubscriptionSubscribedServicesDataSourceCrud{}
func (s *OnesubscriptionSubscribedServicesDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *OnesubscriptionSubscribedServicesDataSourceCrud) Get() error {
	request := oci_onesubscription.ListSubscribedServicesRequest{}
func (s *OnesubscriptionSubscribedServicesDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/onesubscription/onesubscription_computed_usage_data_source.go ===
func OnesubscriptionComputedUsageDataSource() *schema.Resource {
	return &schema.Resource{
func readSingularOnesubscriptionComputedUsage(d *schema.ResourceData, m interface{}) error {
	sync := &OnesubscriptionComputedUsageDataSourceCrud{}
func (s *OnesubscriptionComputedUsageDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *OnesubscriptionComputedUsageDataSourceCrud) Get() error {
	request := oci_onesubscription.GetComputedUsageRequest{}
func (s *OnesubscriptionComputedUsageDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/onesubscription/onesubscription_computed_usages_data_source.go ===
func OnesubscriptionComputedUsagesDataSource() *schema.Resource {
	return &schema.Resource{
func readOnesubscriptionComputedUsages(d *schema.ResourceData, m interface{}) error {
	sync := &OnesubscriptionComputedUsagesDataSourceCrud{}
func (s *OnesubscriptionComputedUsagesDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *OnesubscriptionComputedUsagesDataSourceCrud) Get() error {
	request := oci_onesubscription.ListComputedUsagesRequest{}
func (s *OnesubscriptionComputedUsagesDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/onesubscription/onesubscription_ratecards_data_source.go ===
func OnesubscriptionRatecardsDataSource() *schema.Resource {
	return &schema.Resource{
func readOnesubscriptionRatecards(d *schema.ResourceData, m interface{}) error {
	sync := &OnesubscriptionRatecardsDataSourceCrud{}
func (s *OnesubscriptionRatecardsDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *OnesubscriptionRatecardsDataSourceCrud) Get() error {
	request := oci_onesubscription.ListRateCardsRequest{}
func (s *OnesubscriptionRatecardsDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/onesubscription/onesubscription_organization_subscriptions_data_source.go ===
func OnesubscriptionOrganizationSubscriptionsDataSource() *schema.Resource {
	return &schema.Resource{
func readOnesubscriptionOrganizationSubscriptions(d *schema.ResourceData, m interface{}) error {
	sync := &OnesubscriptionOrganizationSubscriptionsDataSourceCrud{}
func (s *OnesubscriptionOrganizationSubscriptionsDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *OnesubscriptionOrganizationSubscriptionsDataSourceCrud) Get() error {
	request := oci_onesubscription.ListOrganizationSubscriptionsRequest{}
func (s *OnesubscriptionOrganizationSubscriptionsDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/onesubscription/register_resource.go ===
func RegisterResource() {
}

=== ./internal/service/onesubscription/onesubscription_invoices_data_source.go ===
func OnesubscriptionInvoicesDataSource() *schema.Resource {
	return &schema.Resource{
func readOnesubscriptionInvoices(d *schema.ResourceData, m interface{}) error {
	sync := &OnesubscriptionInvoicesDataSourceCrud{}
func (s *OnesubscriptionInvoicesDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *OnesubscriptionInvoicesDataSourceCrud) Get() error {
	request := oci_onesubscription.ListInvoicesRequest{}
func (s *OnesubscriptionInvoicesDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/waa/waa_web_app_acceleration_resource.go ===
func WaaWebAppAccelerationResource() *schema.Resource {
	return &schema.Resource{
func createWaaWebAppAcceleration(d *schema.ResourceData, m interface{}) error {
	sync := &WaaWebAppAccelerationResourceCrud{}
func readWaaWebAppAcceleration(d *schema.ResourceData, m interface{}) error {
	sync := &WaaWebAppAccelerationResourceCrud{}
func updateWaaWebAppAcceleration(d *schema.ResourceData, m interface{}) error {
	sync := &WaaWebAppAccelerationResourceCrud{}
func deleteWaaWebAppAcceleration(d *schema.ResourceData, m interface{}) error {
	sync := &WaaWebAppAccelerationResourceCrud{}
func (s *WaaWebAppAccelerationResourceCrud) ID() string {
	webAppAcceleration := *s.Res
func (s *WaaWebAppAccelerationResourceCrud) CreatedPending() []string {
	return []string{
func (s *WaaWebAppAccelerationResourceCrud) CreatedTarget() []string {
	return []string{
func (s *WaaWebAppAccelerationResourceCrud) DeletedPending() []string {
	return []string{
func (s *WaaWebAppAccelerationResourceCrud) DeletedTarget() []string {
	return []string{
func (s *WaaWebAppAccelerationResourceCrud) Create() error {
	request := oci_waa.CreateWebAppAccelerationRequest{}
func (s *WaaWebAppAccelerationResourceCrud) getWebAppAccelerationFromWorkRequest(workId *string, retryPolicy *oci_common.RetryPolicy,
	actionTypeEnum oci_waa.WorkRequestResourceActionTypeEnum, timeout time.Duration) error {
func webAppAccelerationWaitForWorkRequest(wId *string, entityType string, action oci_waa.WorkRequestResourceActionTypeEnum,
	timeout time.Duration, disableFoundRetries bool, client *oci_waa.WorkRequestClient) (*string, error) {
func getErrorFromWaaWebAppAccelerationWorkRequest(client *oci_waa.WorkRequestClient, workId *string, retryPolicy *oci_common.RetryPolicy, entityType string, action oci_waa.WorkRequestResourceActionTypeEnum) error {
	response, err := client.ListWorkRequestErrors(context.Background(),
func (s *WaaWebAppAccelerationResourceCrud) Get() error {
	request := oci_waa.GetWebAppAccelerationRequest{}
func (s *WaaWebAppAccelerationResourceCrud) Update() error {
	if compartment, ok := s.D.GetOkExists("compartment_id"); ok && s.D.HasChange("compartment_id") {
func (s *WaaWebAppAccelerationResourceCrud) Delete() error {
	request := oci_waa.DeleteWebAppAccelerationRequest{}
func (s *WaaWebAppAccelerationResourceCrud) SetData() error {
	switch v := (*s.Res).(type) {
func (s *WaaWebAppAccelerationResourceCrud) populateTopLevelPolymorphicCreateWebAppAccelerationRequest(request *oci_waa.CreateWebAppAccelerationRequest) error {
	//discriminator
func (s *WaaWebAppAccelerationResourceCrud) updateCompartment(compartment interface{}) error {
	changeCompartmentRequest := oci_waa.ChangeWebAppAccelerationCompartmentRequest{}

=== ./internal/service/waa/waa_web_app_acceleration_policy_resource.go ===
func WaaWebAppAccelerationPolicyResource() *schema.Resource {
	return &schema.Resource{
func createWaaWebAppAccelerationPolicy(d *schema.ResourceData, m interface{}) error {
	sync := &WaaWebAppAccelerationPolicyResourceCrud{}
func readWaaWebAppAccelerationPolicy(d *schema.ResourceData, m interface{}) error {
	sync := &WaaWebAppAccelerationPolicyResourceCrud{}
func updateWaaWebAppAccelerationPolicy(d *schema.ResourceData, m interface{}) error {
	sync := &WaaWebAppAccelerationPolicyResourceCrud{}
func deleteWaaWebAppAccelerationPolicy(d *schema.ResourceData, m interface{}) error {
	sync := &WaaWebAppAccelerationPolicyResourceCrud{}
func (s *WaaWebAppAccelerationPolicyResourceCrud) ID() string {
	return *s.Res.Id
func (s *WaaWebAppAccelerationPolicyResourceCrud) CreatedPending() []string {
	return []string{
func (s *WaaWebAppAccelerationPolicyResourceCrud) CreatedTarget() []string {
	return []string{
func (s *WaaWebAppAccelerationPolicyResourceCrud) DeletedPending() []string {
	return []string{
func (s *WaaWebAppAccelerationPolicyResourceCrud) DeletedTarget() []string {
	return []string{
func (s *WaaWebAppAccelerationPolicyResourceCrud) Create() error {
	request := oci_waa.CreateWebAppAccelerationPolicyRequest{}
func (s *WaaWebAppAccelerationPolicyResourceCrud) getWebAppAccelerationPolicyFromWorkRequest(workId *string, retryPolicy *oci_common.RetryPolicy,
	actionTypeEnum oci_waa.WorkRequestResourceActionTypeEnum, timeout time.Duration) error {
func webAppAccelerationPolicyWaitForWorkRequest(wId *string, entityType string, action oci_waa.WorkRequestResourceActionTypeEnum,
	timeout time.Duration, disableFoundRetries bool, client *oci_waa.WorkRequestClient) (*string, error) {
func getErrorFromWaaWebAppAccelerationPolicyWorkRequest(client *oci_waa.WorkRequestClient, workId *string, retryPolicy *oci_common.RetryPolicy, entityType string, action oci_waa.WorkRequestResourceActionTypeEnum) error {
	response, err := client.ListWorkRequestErrors(context.Background(),
func (s *WaaWebAppAccelerationPolicyResourceCrud) Get() error {
	request := oci_waa.GetWebAppAccelerationPolicyRequest{}
func (s *WaaWebAppAccelerationPolicyResourceCrud) Update() error {
	if compartment, ok := s.D.GetOkExists("compartment_id"); ok && s.D.HasChange("compartment_id") {
func (s *WaaWebAppAccelerationPolicyResourceCrud) Delete() error {
	request := oci_waa.DeleteWebAppAccelerationPolicyRequest{}
func (s *WaaWebAppAccelerationPolicyResourceCrud) SetData() error {
	if s.Res.CompartmentId != nil {
func (s *WaaWebAppAccelerationPolicyResourceCrud) mapToGzipCompressionPolicy(fieldKeyFormat string) (oci_waa.GzipCompressionPolicy, error) {
	result := oci_waa.GzipCompressionPolicy{}
func (s *WaaWebAppAccelerationPolicyResourceCrud) mapToResponseCachingPolicy(fieldKeyFormat string) (oci_waa.ResponseCachingPolicy, error) {
	result := oci_waa.ResponseCachingPolicy{}
func (s *WaaWebAppAccelerationPolicyResourceCrud) mapToResponseCompressionPolicy(fieldKeyFormat string) (oci_waa.ResponseCompressionPolicy, error) {
	result := oci_waa.ResponseCompressionPolicy{}
func (s *WaaWebAppAccelerationPolicyResourceCrud) updateCompartment(compartment interface{}) error {
	changeCompartmentRequest := oci_waa.ChangeWebAppAccelerationPolicyCompartmentRequest{}

=== ./internal/service/waa/waa_web_app_accelerations_data_source.go ===
func WaaWebAppAccelerationsDataSource() *schema.Resource {
	return &schema.Resource{
func readWaaWebAppAccelerations(d *schema.ResourceData, m interface{}) error {
	sync := &WaaWebAppAccelerationsDataSourceCrud{}
func (s *WaaWebAppAccelerationsDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *WaaWebAppAccelerationsDataSourceCrud) Get() error {
	request := oci_waa.ListWebAppAccelerationsRequest{}
func (s *WaaWebAppAccelerationsDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/waa/waa_web_app_acceleration_policies_data_source.go ===
func WaaWebAppAccelerationPoliciesDataSource() *schema.Resource {
	return &schema.Resource{
func readWaaWebAppAccelerationPolicies(d *schema.ResourceData, m interface{}) error {
	sync := &WaaWebAppAccelerationPoliciesDataSourceCrud{}
func (s *WaaWebAppAccelerationPoliciesDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *WaaWebAppAccelerationPoliciesDataSourceCrud) Get() error {
	request := oci_waa.ListWebAppAccelerationPoliciesRequest{}
func (s *WaaWebAppAccelerationPoliciesDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/waa/waa_web_app_acceleration_data_source.go ===
func WaaWebAppAccelerationDataSource() *schema.Resource {
	fieldMap := make(map[string]*schema.Schema)
func readSingularWaaWebAppAcceleration(d *schema.ResourceData, m interface{}) error {
	sync := &WaaWebAppAccelerationDataSourceCrud{}
func (s *WaaWebAppAccelerationDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *WaaWebAppAccelerationDataSourceCrud) Get() error {
	request := oci_waa.GetWebAppAccelerationRequest{}
func (s *WaaWebAppAccelerationDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/waa/waa_web_app_acceleration_policy_data_source.go ===
func WaaWebAppAccelerationPolicyDataSource() *schema.Resource {
	fieldMap := make(map[string]*schema.Schema)
func readSingularWaaWebAppAccelerationPolicy(d *schema.ResourceData, m interface{}) error {
	sync := &WaaWebAppAccelerationPolicyDataSourceCrud{}
func (s *WaaWebAppAccelerationPolicyDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *WaaWebAppAccelerationPolicyDataSourceCrud) Get() error {
	request := oci_waa.GetWebAppAccelerationPolicyRequest{}
func (s *WaaWebAppAccelerationPolicyDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/waa/register_resource.go ===
func RegisterResource() {
	tfresource.RegisterResource("oci_waa_web_app_acceleration", WaaWebAppAccelerationResource())

=== ./internal/service/identity_data_plane/identity_data_plane_generate_scoped_access_token_resource.go ===
func IdentityDataPlaneGenerateScopedAccessTokenResource() *schema.Resource {
	return &schema.Resource{
func createIdentityDataPlaneGenerateScopedAccessToken(d *schema.ResourceData, m interface{}) error {
	sync := &IdentityDataPlaneGenerateScopedAccessTokenResourceCrud{}
func readIdentityDataPlaneGenerateScopedAccessToken(d *schema.ResourceData, m interface{}) error {
	return nil
func deleteIdentityDataPlaneGenerateScopedAccessToken(d *schema.ResourceData, m interface{}) error {
	return nil
func (s *IdentityDataPlaneGenerateScopedAccessTokenResourceCrud) ID() string {
	return *s.Res.Token
func (s *IdentityDataPlaneGenerateScopedAccessTokenResourceCrud) Create() error {
	request := oci_identity_data_plane.GenerateScopedAccessTokenRequest{}
func (s *IdentityDataPlaneGenerateScopedAccessTokenResourceCrud) SetData() error {
	if s.Res.Token != nil {

=== ./internal/service/identity_data_plane/register_resource.go ===
func RegisterResource() {
	tfresource.RegisterResource("oci_identity_data_plane_generate_scoped_access_token", IdentityDataPlaneGenerateScopedAccessTokenResource())

=== ./internal/service/vulnerability_scanning/vulnerability_scanning_host_scan_target_resource.go ===
func VulnerabilityScanningHostScanTargetResource() *schema.Resource {
	return &schema.Resource{
func createVulnerabilityScanningHostScanTarget(d *schema.ResourceData, m interface{}) error {
	sync := &VulnerabilityScanningHostScanTargetResourceCrud{}
func readVulnerabilityScanningHostScanTarget(d *schema.ResourceData, m interface{}) error {
	sync := &VulnerabilityScanningHostScanTargetResourceCrud{}
func updateVulnerabilityScanningHostScanTarget(d *schema.ResourceData, m interface{}) error {
	sync := &VulnerabilityScanningHostScanTargetResourceCrud{}
func deleteVulnerabilityScanningHostScanTarget(d *schema.ResourceData, m interface{}) error {
	sync := &VulnerabilityScanningHostScanTargetResourceCrud{}
func (s *VulnerabilityScanningHostScanTargetResourceCrud) ID() string {
	return *s.Res.Id
func (s *VulnerabilityScanningHostScanTargetResourceCrud) CreatedPending() []string {
	return []string{
func (s *VulnerabilityScanningHostScanTargetResourceCrud) CreatedTarget() []string {
	return []string{
func (s *VulnerabilityScanningHostScanTargetResourceCrud) DeletedPending() []string {
	return []string{
func (s *VulnerabilityScanningHostScanTargetResourceCrud) DeletedTarget() []string {
	return []string{
func (s *VulnerabilityScanningHostScanTargetResourceCrud) Create() error {
	request := oci_vulnerability_scanning.CreateHostScanTargetRequest{}
func (s *VulnerabilityScanningHostScanTargetResourceCrud) Get() error {
	request := oci_vulnerability_scanning.GetHostScanTargetRequest{}
func (s *VulnerabilityScanningHostScanTargetResourceCrud) Update() error {
	if compartment, ok := s.D.GetOkExists("compartment_id"); ok && s.D.HasChange("compartment_id") {
func (s *VulnerabilityScanningHostScanTargetResourceCrud) getHostScanTargetFromWorkRequest(workId *string, policy *oci_common.RetryPolicy, actionTypeEnum oci_vulnerability_scanning.ActionTypeEnum, timeout time.Duration) error {
	// Wait until it finishes
func (s *VulnerabilityScanningHostScanTargetResourceCrud) Delete() error {
	request := oci_vulnerability_scanning.DeleteHostScanTargetRequest{}
func (s *VulnerabilityScanningHostScanTargetResourceCrud) SetData() error {
	if s.Res.CompartmentId != nil {
func (s *VulnerabilityScanningHostScanTargetResourceCrud) updateCompartment(compartment interface{}) error {
	changeCompartmentRequest := oci_vulnerability_scanning.ChangeHostScanTargetCompartmentRequest{}

=== ./internal/service/vulnerability_scanning/vulnerability_scanning_container_scan_target_resource.go ===
func VulnerabilityScanningContainerScanTargetResource() *schema.Resource {
	return &schema.Resource{
func createVulnerabilityScanningContainerScanTarget(d *schema.ResourceData, m interface{}) error {
	sync := &VulnerabilityScanningContainerScanTargetResourceCrud{}
func readVulnerabilityScanningContainerScanTarget(d *schema.ResourceData, m interface{}) error {
	sync := &VulnerabilityScanningContainerScanTargetResourceCrud{}
func updateVulnerabilityScanningContainerScanTarget(d *schema.ResourceData, m interface{}) error {
	sync := &VulnerabilityScanningContainerScanTargetResourceCrud{}
func deleteVulnerabilityScanningContainerScanTarget(d *schema.ResourceData, m interface{}) error {
	sync := &VulnerabilityScanningContainerScanTargetResourceCrud{}
func (s *VulnerabilityScanningContainerScanTargetResourceCrud) ID() string {
	return *s.Res.Id
func (s *VulnerabilityScanningContainerScanTargetResourceCrud) CreatedPending() []string {
	return []string{
func (s *VulnerabilityScanningContainerScanTargetResourceCrud) CreatedTarget() []string {
	return []string{
func (s *VulnerabilityScanningContainerScanTargetResourceCrud) DeletedPending() []string {
	return []string{
func (s *VulnerabilityScanningContainerScanTargetResourceCrud) DeletedTarget() []string {
	return []string{
func (s *VulnerabilityScanningContainerScanTargetResourceCrud) Create() error {
	request := oci_vulnerability_scanning.CreateContainerScanTargetRequest{}
func (s *VulnerabilityScanningContainerScanTargetResourceCrud) getContainerScanTargetFromWorkRequest(workId *string, retryPolicy *oci_common.RetryPolicy,
	actionTypeEnum oci_vulnerability_scanning.ActionTypeEnum, timeout time.Duration) error {
func (s *VulnerabilityScanningContainerScanTargetResourceCrud) Get() error {
	request := oci_vulnerability_scanning.GetContainerScanTargetRequest{}
func (s *VulnerabilityScanningContainerScanTargetResourceCrud) Update() error {
	if compartment, ok := s.D.GetOkExists("compartment_id"); ok && s.D.HasChange("compartment_id") {
func (s *VulnerabilityScanningContainerScanTargetResourceCrud) Delete() error {
	request := oci_vulnerability_scanning.DeleteContainerScanTargetRequest{}
func (s *VulnerabilityScanningContainerScanTargetResourceCrud) SetData() error {
	if s.Res.CompartmentId != nil {
func (s *VulnerabilityScanningContainerScanTargetResourceCrud) mapToCreateContainerScanRegistryDetails(fieldKeyFormat string) (oci_vulnerability_scanning.CreateContainerScanRegistryDetails, error) {
	var baseObject oci_vulnerability_scanning.CreateContainerScanRegistryDetails
func (s *VulnerabilityScanningContainerScanTargetResourceCrud) updateCompartment(compartment interface{}) error {
	changeCompartmentRequest := oci_vulnerability_scanning.ChangeContainerScanTargetCompartmentRequest{}
func (s *VulnerabilityScanningContainerScanTargetResourceCrud) mapToUpdateContainerScanRegistryDetails(fieldKeyFormat string) (oci_vulnerability_scanning.UpdateContainerScanRegistryDetails, error) {
	var baseObject oci_vulnerability_scanning.UpdateContainerScanRegistryDetails

=== ./internal/service/vulnerability_scanning/vulnerability_scanning_container_scan_recipe_data_source.go ===
func VulnerabilityScanningContainerScanRecipeDataSource() *schema.Resource {
	fieldMap := make(map[string]*schema.Schema)
func readSingularVulnerabilityScanningContainerScanRecipe(d *schema.ResourceData, m interface{}) error {
	sync := &VulnerabilityScanningContainerScanRecipeDataSourceCrud{}
func (s *VulnerabilityScanningContainerScanRecipeDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *VulnerabilityScanningContainerScanRecipeDataSourceCrud) Get() error {
	request := oci_vulnerability_scanning.GetContainerScanRecipeRequest{}
func (s *VulnerabilityScanningContainerScanRecipeDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/vulnerability_scanning/vulnerability_scanning_container_scan_recipe_resource.go ===
func VulnerabilityScanningContainerScanRecipeResource() *schema.Resource {
	return &schema.Resource{
func createVulnerabilityScanningContainerScanRecipe(d *schema.ResourceData, m interface{}) error {
	sync := &VulnerabilityScanningContainerScanRecipeResourceCrud{}
func readVulnerabilityScanningContainerScanRecipe(d *schema.ResourceData, m interface{}) error {
	sync := &VulnerabilityScanningContainerScanRecipeResourceCrud{}
func updateVulnerabilityScanningContainerScanRecipe(d *schema.ResourceData, m interface{}) error {
	sync := &VulnerabilityScanningContainerScanRecipeResourceCrud{}
func deleteVulnerabilityScanningContainerScanRecipe(d *schema.ResourceData, m interface{}) error {
	sync := &VulnerabilityScanningContainerScanRecipeResourceCrud{}
func (s *VulnerabilityScanningContainerScanRecipeResourceCrud) ID() string {
	return *s.Res.Id
func (s *VulnerabilityScanningContainerScanRecipeResourceCrud) CreatedPending() []string {
	return []string{
func (s *VulnerabilityScanningContainerScanRecipeResourceCrud) CreatedTarget() []string {
	return []string{
func (s *VulnerabilityScanningContainerScanRecipeResourceCrud) DeletedPending() []string {
	return []string{
func (s *VulnerabilityScanningContainerScanRecipeResourceCrud) DeletedTarget() []string {
	return []string{
func (s *VulnerabilityScanningContainerScanRecipeResourceCrud) Create() error {
	request := oci_vulnerability_scanning.CreateContainerScanRecipeRequest{}
func (s *VulnerabilityScanningContainerScanRecipeResourceCrud) getContainerScanRecipeFromWorkRequest(workId *string, retryPolicy *oci_common.RetryPolicy,
	actionTypeEnum oci_vulnerability_scanning.ActionTypeEnum, timeout time.Duration) error {
func (s *VulnerabilityScanningContainerScanRecipeResourceCrud) Get() error {
	request := oci_vulnerability_scanning.GetContainerScanRecipeRequest{}
func (s *VulnerabilityScanningContainerScanRecipeResourceCrud) Update() error {
	if compartment, ok := s.D.GetOkExists("compartment_id"); ok && s.D.HasChange("compartment_id") {
func (s *VulnerabilityScanningContainerScanRecipeResourceCrud) Delete() error {
	request := oci_vulnerability_scanning.DeleteContainerScanRecipeRequest{}
func (s *VulnerabilityScanningContainerScanRecipeResourceCrud) SetData() error {
	if s.Res.CompartmentId != nil {
func (s *VulnerabilityScanningContainerScanRecipeResourceCrud) mapToContainerScanSettings(fieldKeyFormat string) (oci_vulnerability_scanning.ContainerScanSettings, error) {
	result := oci_vulnerability_scanning.ContainerScanSettings{}
func (s *VulnerabilityScanningContainerScanRecipeResourceCrud) updateCompartment(compartment interface{}) error {
	changeCompartmentRequest := oci_vulnerability_scanning.ChangeContainerScanRecipeCompartmentRequest{}

=== ./internal/service/vulnerability_scanning/vulnerability_scanning_container_scan_recipes_data_source.go ===
func VulnerabilityScanningContainerScanRecipesDataSource() *schema.Resource {
	return &schema.Resource{
func readVulnerabilityScanningContainerScanRecipes(d *schema.ResourceData, m interface{}) error {
	sync := &VulnerabilityScanningContainerScanRecipesDataSourceCrud{}
func (s *VulnerabilityScanningContainerScanRecipesDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *VulnerabilityScanningContainerScanRecipesDataSourceCrud) Get() error {
	request := oci_vulnerability_scanning.ListContainerScanRecipesRequest{}
func (s *VulnerabilityScanningContainerScanRecipesDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/vulnerability_scanning/vulnerability_scanning_host_scan_recipe_data_source.go ===
func VulnerabilityScanningHostScanRecipeDataSource() *schema.Resource {
	fieldMap := make(map[string]*schema.Schema)
func readSingularVulnerabilityScanningHostScanRecipe(d *schema.ResourceData, m interface{}) error {
	sync := &VulnerabilityScanningHostScanRecipeDataSourceCrud{}
func (s *VulnerabilityScanningHostScanRecipeDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *VulnerabilityScanningHostScanRecipeDataSourceCrud) Get() error {
	request := oci_vulnerability_scanning.GetHostScanRecipeRequest{}
func (s *VulnerabilityScanningHostScanRecipeDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/vulnerability_scanning/vulnerability_scanning_container_scan_targets_data_source.go ===
func VulnerabilityScanningContainerScanTargetsDataSource() *schema.Resource {
	return &schema.Resource{
func readVulnerabilityScanningContainerScanTargets(d *schema.ResourceData, m interface{}) error {
	sync := &VulnerabilityScanningContainerScanTargetsDataSourceCrud{}
func (s *VulnerabilityScanningContainerScanTargetsDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *VulnerabilityScanningContainerScanTargetsDataSourceCrud) Get() error {
	request := oci_vulnerability_scanning.ListContainerScanTargetsRequest{}
func (s *VulnerabilityScanningContainerScanTargetsDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/vulnerability_scanning/vulnerability_scanning_host_scan_target_data_source.go ===
func VulnerabilityScanningHostScanTargetDataSource() *schema.Resource {
	fieldMap := make(map[string]*schema.Schema)
func readSingularVulnerabilityScanningHostScanTarget(d *schema.ResourceData, m interface{}) error {
	sync := &VulnerabilityScanningHostScanTargetDataSourceCrud{}
func (s *VulnerabilityScanningHostScanTargetDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *VulnerabilityScanningHostScanTargetDataSourceCrud) Get() error {
	request := oci_vulnerability_scanning.GetHostScanTargetRequest{}
func (s *VulnerabilityScanningHostScanTargetDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/vulnerability_scanning/vulnerability_scanning_host_scan_recipe_resource.go ===
func VulnerabilityScanningHostScanRecipeResource() *schema.Resource {
	return &schema.Resource{
func createVulnerabilityScanningHostScanRecipe(d *schema.ResourceData, m interface{}) error {
	sync := &VulnerabilityScanningHostScanRecipeResourceCrud{}
func readVulnerabilityScanningHostScanRecipe(d *schema.ResourceData, m interface{}) error {
	sync := &VulnerabilityScanningHostScanRecipeResourceCrud{}
func updateVulnerabilityScanningHostScanRecipe(d *schema.ResourceData, m interface{}) error {
	sync := &VulnerabilityScanningHostScanRecipeResourceCrud{}
func deleteVulnerabilityScanningHostScanRecipe(d *schema.ResourceData, m interface{}) error {
	sync := &VulnerabilityScanningHostScanRecipeResourceCrud{}
func (s *VulnerabilityScanningHostScanRecipeResourceCrud) ID() string {
	return *s.Res.Id
func (s *VulnerabilityScanningHostScanRecipeResourceCrud) CreatedPending() []string {
	return []string{
func (s *VulnerabilityScanningHostScanRecipeResourceCrud) CreatedTarget() []string {
	return []string{
func (s *VulnerabilityScanningHostScanRecipeResourceCrud) DeletedPending() []string {
	return []string{
func (s *VulnerabilityScanningHostScanRecipeResourceCrud) DeletedTarget() []string {
	return []string{
func (s *VulnerabilityScanningHostScanRecipeResourceCrud) Create() error {
	request := oci_vulnerability_scanning.CreateHostScanRecipeRequest{}
func (s *VulnerabilityScanningHostScanRecipeResourceCrud) Get() error {
	request := oci_vulnerability_scanning.GetHostScanRecipeRequest{}
func (s *VulnerabilityScanningHostScanRecipeResourceCrud) Update() error {
	if compartment, ok := s.D.GetOkExists("compartment_id"); ok && s.D.HasChange("compartment_id") {
func (s *VulnerabilityScanningHostScanRecipeResourceCrud) getHostScanRecipeFromWorkRequest(workId *string, policy *common.RetryPolicy, actionTypeEnum oci_vulnerability_scanning.ActionTypeEnum, timeout time.Duration) error {
	// Wait until it finishes
func (s *VulnerabilityScanningHostScanRecipeResourceCrud) Delete() error {
	request := oci_vulnerability_scanning.DeleteHostScanRecipeRequest{}
func (s *VulnerabilityScanningHostScanRecipeResourceCrud) SetData() error {
	if s.Res.AgentSettings != nil {
func (s *VulnerabilityScanningHostScanRecipeResourceCrud) mapToApplicationScanSettings(fieldKeyFormat string) (oci_vulnerability_scanning.ApplicationScanSettings, error) {
	result := oci_vulnerability_scanning.ApplicationScanSettings{}
func (s *VulnerabilityScanningHostScanRecipeResourceCrud) mapToFolderToScan(fieldKeyFormat string) (oci_vulnerability_scanning.FolderToScan, error) {
	result := oci_vulnerability_scanning.FolderToScan{}
func (s *VulnerabilityScanningHostScanRecipeResourceCrud) mapToHostCisBenchmarkSettings(fieldKeyFormat string) (oci_vulnerability_scanning.HostCisBenchmarkSettings, error) {
	result := oci_vulnerability_scanning.HostCisBenchmarkSettings{}
func (s *VulnerabilityScanningHostScanRecipeResourceCrud) mapToHostEndpointProtectionSettings(fieldKeyFormat string) (oci_vulnerability_scanning.HostEndpointProtectionSettings, error) {
	result := oci_vulnerability_scanning.HostEndpointProtectionSettings{}
func (s *VulnerabilityScanningHostScanRecipeResourceCrud) mapToHostScanAgentConfiguration(fieldKeyFormat string) (oci_vulnerability_scanning.HostScanAgentConfiguration, error) {
	var baseObject oci_vulnerability_scanning.HostScanAgentConfiguration
func (s *VulnerabilityScanningHostScanRecipeResourceCrud) mapToHostScanAgentSettings(fieldKeyFormat string) (oci_vulnerability_scanning.HostScanAgentSettings, error) {
	result := oci_vulnerability_scanning.HostScanAgentSettings{}
func (s *VulnerabilityScanningHostScanRecipeResourceCrud) mapToHostScanPortSettings(fieldKeyFormat string) (oci_vulnerability_scanning.HostScanPortSettings, error) {
	result := oci_vulnerability_scanning.HostScanPortSettings{}
func (s *VulnerabilityScanningHostScanRecipeResourceCrud) mapToSchedule(fieldKeyFormat string) (oci_vulnerability_scanning.Schedule, error) {
	result := oci_vulnerability_scanning.Schedule{}
func (s *VulnerabilityScanningHostScanRecipeResourceCrud) updateCompartment(compartment interface{}) error {
	changeCompartmentRequest := oci_vulnerability_scanning.ChangeHostScanRecipeCompartmentRequest{}

=== ./internal/service/vulnerability_scanning/vulnerability_scanning_container_scan_target_data_source.go ===
func VulnerabilityScanningContainerScanTargetDataSource() *schema.Resource {
	fieldMap := make(map[string]*schema.Schema)
func readSingularVulnerabilityScanningContainerScanTarget(d *schema.ResourceData, m interface{}) error {
	sync := &VulnerabilityScanningContainerScanTargetDataSourceCrud{}
func (s *VulnerabilityScanningContainerScanTargetDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *VulnerabilityScanningContainerScanTargetDataSourceCrud) Get() error {
	request := oci_vulnerability_scanning.GetContainerScanTargetRequest{}
func (s *VulnerabilityScanningContainerScanTargetDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/vulnerability_scanning/vulnerability_scanning_host_scan_targets_data_source.go ===
func VulnerabilityScanningHostScanTargetsDataSource() *schema.Resource {
	return &schema.Resource{
func readVulnerabilityScanningHostScanTargets(d *schema.ResourceData, m interface{}) error {
	sync := &VulnerabilityScanningHostScanTargetsDataSourceCrud{}
func (s *VulnerabilityScanningHostScanTargetsDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *VulnerabilityScanningHostScanTargetsDataSourceCrud) Get() error {
	request := oci_vulnerability_scanning.ListHostScanTargetsRequest{}
func (s *VulnerabilityScanningHostScanTargetsDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/vulnerability_scanning/vulnerability_scanning_host_scan_target_errors_data_source.go ===
func VulnerabilityScanningHostScanTargetErrorsDataSource() *schema.Resource {
	return &schema.Resource{
func readVulnerabilityScanningHostScanTargetErrors(d *schema.ResourceData, m interface{}) error {
	sync := &VulnerabilityScanningHostScanTargetErrorsDataSourceCrud{}
func (s *VulnerabilityScanningHostScanTargetErrorsDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *VulnerabilityScanningHostScanTargetErrorsDataSourceCrud) Get() error {
	request := oci_vulnerability_scanning.ListHostScanTargetErrorsRequest{}
func (s *VulnerabilityScanningHostScanTargetErrorsDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/vulnerability_scanning/vulnerability_scanning_host_scan_recipes_data_source.go ===
func VulnerabilityScanningHostScanRecipesDataSource() *schema.Resource {
	return &schema.Resource{
func readVulnerabilityScanningHostScanRecipes(d *schema.ResourceData, m interface{}) error {
	sync := &VulnerabilityScanningHostScanRecipesDataSourceCrud{}
func (s *VulnerabilityScanningHostScanRecipesDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *VulnerabilityScanningHostScanRecipesDataSourceCrud) Get() error {
	request := oci_vulnerability_scanning.ListHostScanRecipesRequest{}
func (s *VulnerabilityScanningHostScanRecipesDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/vulnerability_scanning/register_resource.go ===
func RegisterResource() {
	tfresource.RegisterResource("oci_vulnerability_scanning_container_scan_recipe", VulnerabilityScanningContainerScanRecipeResource())

=== ./internal/service/jms/jms_fleet_export_setting_data_source.go ===
func JmsFleetExportSettingDataSource() *schema.Resource {
	return &schema.Resource{
func readSingularJmsFleetExportSetting(d *schema.ResourceData, m interface{}) error {
	sync := &JmsFleetExportSettingDataSourceCrud{}
func (s *JmsFleetExportSettingDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *JmsFleetExportSettingDataSourceCrud) Get() error {
	request := oci_jms.GetExportSettingRequest{}
func (s *JmsFleetExportSettingDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/jms/jms_fleet_java_migration_analysis_results_data_source.go ===
func JmsFleetJavaMigrationAnalysisResultsDataSource() *schema.Resource {
	return &schema.Resource{
func readJmsFleetJavaMigrationAnalysisResults(d *schema.ResourceData, m interface{}) error {
	sync := &JmsFleetJavaMigrationAnalysisResultsDataSourceCrud{}
func (s *JmsFleetJavaMigrationAnalysisResultsDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *JmsFleetJavaMigrationAnalysisResultsDataSourceCrud) Get() error {
	request := oci_jms.ListJavaMigrationAnalysisResultsRequest{}
func (s *JmsFleetJavaMigrationAnalysisResultsDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/jms/jms_fleet_performance_tuning_analysis_result_data_source.go ===
func JmsFleetPerformanceTuningAnalysisResultDataSource() *schema.Resource {
	return &schema.Resource{
func readSingularJmsFleetPerformanceTuningAnalysisResult(d *schema.ResourceData, m interface{}) error {
	sync := &JmsFleetPerformanceTuningAnalysisResultDataSourceCrud{}
func (s *JmsFleetPerformanceTuningAnalysisResultDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *JmsFleetPerformanceTuningAnalysisResultDataSourceCrud) Get() error {
	request := oci_jms.GetPerformanceTuningAnalysisResultRequest{}
func (s *JmsFleetPerformanceTuningAnalysisResultDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/jms/jms_fleet_data_source.go ===
func JmsFleetDataSource() *schema.Resource {
	fieldMap := make(map[string]*schema.Schema)
func readSingularJmsFleet(d *schema.ResourceData, m interface{}) error {
	sync := &JmsFleetDataSourceCrud{}
func (s *JmsFleetDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *JmsFleetDataSourceCrud) Get() error {
	request := oci_jms.GetFleetRequest{}
func (s *JmsFleetDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/jms/jms_fleets_data_source.go ===
func JmsFleetsDataSource() *schema.Resource {
	return &schema.Resource{
func readJmsFleets(d *schema.ResourceData, m interface{}) error {
	sync := &JmsFleetsDataSourceCrud{}
func (s *JmsFleetsDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *JmsFleetsDataSourceCrud) Get() error {
	request := oci_jms.ListFleetsRequest{}
func (s *JmsFleetsDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/jms/jms_export.go ===
func getJmsFleetAdvancedFeatureConfigurationId(resource *tf_export.OCIResource) (string, error) {


=== ./internal/service/jms/jms_summarize_resource_inventory_data_source.go ===
func JmsSummarizeResourceInventoryDataSource() *schema.Resource {
	return &schema.Resource{
func readSingularJmsSummarizeResourceInventory(d *schema.ResourceData, m interface{}) error {
	sync := &JmsSummarizeResourceInventoryDataSourceCrud{}
func (s *JmsSummarizeResourceInventoryDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *JmsSummarizeResourceInventoryDataSourceCrud) Get() error {
	request := oci_jms.SummarizeResourceInventoryRequest{}
func (s *JmsSummarizeResourceInventoryDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/jms/jms_java_release_data_source.go ===
func JmsJavaReleaseDataSource() *schema.Resource {
	return &schema.Resource{
func readSingularJmsJavaRelease(d *schema.ResourceData, m interface{}) error {
	sync := &JmsJavaReleaseDataSourceCrud{}
func (s *JmsJavaReleaseDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *JmsJavaReleaseDataSourceCrud) Get() error {
	request := oci_jms.GetJavaReleaseRequest{}
func (s *JmsJavaReleaseDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/jms/jms_fleet_drs_file_data_source.go ===
func JmsFleetDrsFileDataSource() *schema.Resource {
	return &schema.Resource{
func readSingularJmsFleetDrsFile(d *schema.ResourceData, m interface{}) error {
	sync := &JmsFleetDrsFileDataSourceCrud{}
func (s *JmsFleetDrsFileDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *JmsFleetDrsFileDataSourceCrud) Get() error {
	request := oci_jms.GetDrsFileRequest{}
func (s *JmsFleetDrsFileDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/jms/jms_agent_installers_data_source.go ===
func JmsAgentInstallersDataSource() *schema.Resource {
	return &schema.Resource{
func readJmsAgentInstallers(d *schema.ResourceData, m interface{}) error {
	sync := &JmsAgentInstallersDataSourceCrud{}
func (s *JmsAgentInstallersDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *JmsAgentInstallersDataSourceCrud) Get() error {
	request := oci_jms.ListAgentInstallersRequest{}
func (s *JmsAgentInstallersDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/jms/jms_fleet_advanced_feature_configuration_resource.go ===
func JmsFleetAdvancedFeatureConfigurationResource() *schema.Resource {
	return &schema.Resource{
func createJmsFleetAdvancedFeatureConfiguration(d *schema.ResourceData, m interface{}) error {
	sync := &JmsFleetAdvancedFeatureConfigurationResourceCrud{}
func readJmsFleetAdvancedFeatureConfiguration(d *schema.ResourceData, m interface{}) error {
	sync := &JmsFleetAdvancedFeatureConfigurationResourceCrud{}
func updateJmsFleetAdvancedFeatureConfiguration(d *schema.ResourceData, m interface{}) error {
	sync := &JmsFleetAdvancedFeatureConfigurationResourceCrud{}
func deleteJmsFleetAdvancedFeatureConfiguration(d *schema.ResourceData, m interface{}) error {
	return nil
func (s *JmsFleetAdvancedFeatureConfigurationResourceCrud) ID() string {
	return GetFleetAdvancedFeatureConfigurationCompositeId(s.D.Get("fleet_id").(string))
func (s *JmsFleetAdvancedFeatureConfigurationResourceCrud) Create() error {
	request := oci_jms.UpdateFleetAdvancedFeatureConfigurationRequest{}
func (s *JmsFleetAdvancedFeatureConfigurationResourceCrud) Get() error {
	request := oci_jms.GetFleetAdvancedFeatureConfigurationRequest{}
func (s *JmsFleetAdvancedFeatureConfigurationResourceCrud) Update() error {
	request := oci_jms.UpdateFleetAdvancedFeatureConfigurationRequest{}
func (s *JmsFleetAdvancedFeatureConfigurationResourceCrud) SetData() error {

func (s *JmsFleetAdvancedFeatureConfigurationResourceCrud) mapToAdvancedUsageTracking(fieldKeyFormat string) (oci_jms.AdvancedUsageTracking, error) {
	result := oci_jms.AdvancedUsageTracking{}
func (s *JmsFleetAdvancedFeatureConfigurationResourceCrud) mapToCryptoEventAnalysis(fieldKeyFormat string) (oci_jms.CryptoEventAnalysis, error) {
	result := oci_jms.CryptoEventAnalysis{}
func (s *JmsFleetAdvancedFeatureConfigurationResourceCrud) mapToJavaMigrationAnalysis(fieldKeyFormat string) (oci_jms.JavaMigrationAnalysis, error) {
	result := oci_jms.JavaMigrationAnalysis{}
func (s *JmsFleetAdvancedFeatureConfigurationResourceCrud) mapToJfrRecording(fieldKeyFormat string) (oci_jms.JfrRecording, error) {
	result := oci_jms.JfrRecording{}
func (s *JmsFleetAdvancedFeatureConfigurationResourceCrud) mapToKeySizeAlgorithm(fieldKeyFormat string) (oci_jms.KeySizeAlgorithm, error) {
	result := oci_jms.KeySizeAlgorithm{}
func (s *JmsFleetAdvancedFeatureConfigurationResourceCrud) mapToLcm(fieldKeyFormat string) (oci_jms.Lcm, error) {
	result := oci_jms.Lcm{}
func (s *JmsFleetAdvancedFeatureConfigurationResourceCrud) mapToMinimumKeySizeSettings(fieldKeyFormat string) (oci_jms.MinimumKeySizeSettings, error) {
	result := oci_jms.MinimumKeySizeSettings{}
func (s *JmsFleetAdvancedFeatureConfigurationResourceCrud) mapToPerformanceTuningAnalysis(fieldKeyFormat string) (oci_jms.PerformanceTuningAnalysis, error) {
	result := oci_jms.PerformanceTuningAnalysis{}
func (s *JmsFleetAdvancedFeatureConfigurationResourceCrud) mapToPostInstallationActionSettings(fieldKeyFormat string) (oci_jms.PostInstallationActionSettings, error) {
	result := oci_jms.PostInstallationActionSettings{}
func (s *JmsFleetAdvancedFeatureConfigurationResourceCrud) mapToProxies(fieldKeyFormat string) (oci_jms.Proxies, error) {
	result := oci_jms.Proxies{}
func (s *JmsFleetAdvancedFeatureConfigurationResourceCrud) mapToSummarizedEventsLog(fieldKeyFormat string) (oci_jms.SummarizedEventsLog, error) {
	result := oci_jms.SummarizedEventsLog{}

=== ./internal/service/jms/jms_fleet_performance_tuning_analysis_results_data_source.go ===
func JmsFleetPerformanceTuningAnalysisResultsDataSource() *schema.Resource {
	return &schema.Resource{
func readJmsFleetPerformanceTuningAnalysisResults(d *schema.ResourceData, m interface{}) error {
	sync := &JmsFleetPerformanceTuningAnalysisResultsDataSourceCrud{}
func (s *JmsFleetPerformanceTuningAnalysisResultsDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *JmsFleetPerformanceTuningAnalysisResultsDataSourceCrud) Get() error {
	request := oci_jms.ListPerformanceTuningAnalysisResultsRequest{}
func (s *JmsFleetPerformanceTuningAnalysisResultsDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/jms/jms_fleet_drs_files_data_source.go ===
func JmsFleetDrsFilesDataSource() *schema.Resource {
	return &schema.Resource{
func readJmsFleetDrsFiles(d *schema.ResourceData, m interface{}) error {
	sync := &JmsFleetDrsFilesDataSourceCrud{}
func (s *JmsFleetDrsFilesDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *JmsFleetDrsFilesDataSourceCrud) Get() error {
	request := oci_jms.ListDrsFilesRequest{}
func (s *JmsFleetDrsFilesDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/jms/jms_fleet_installation_site_data_source.go ===
func JmsFleetInstallationSiteDataSource() *schema.Resource {
	return &schema.Resource{
func readSingularJmsFleetInstallationSite(d *schema.ResourceData, m interface{}) error {
	sync := &JmsFleetInstallationSiteDataSourceCrud{}
func (s *JmsFleetInstallationSiteDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *JmsFleetInstallationSiteDataSourceCrud) Get() error {
	request := oci_jms.ListInstallationSitesRequest{}
func (s *JmsFleetInstallationSiteDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/jms/jms_fleet_crypto_analysis_results_data_source.go ===
func JmsFleetCryptoAnalysisResultsDataSource() *schema.Resource {
	return &schema.Resource{
func readJmsFleetCryptoAnalysisResults(d *schema.ResourceData, m interface{}) error {
	sync := &JmsFleetCryptoAnalysisResultsDataSourceCrud{}
func (s *JmsFleetCryptoAnalysisResultsDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *JmsFleetCryptoAnalysisResultsDataSourceCrud) Get() error {
	request := oci_jms.ListCryptoAnalysisResultsRequest{}
func (s *JmsFleetCryptoAnalysisResultsDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/jms/jms_jms_plugin_data_source.go ===
func JmsJmsPluginDataSource() *schema.Resource {
	fieldMap := make(map[string]*schema.Schema)
func readSingularJmsJmsPlugin(d *schema.ResourceData, m interface{}) error {
	sync := &JmsJmsPluginDataSourceCrud{}
func (s *JmsJmsPluginDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *JmsJmsPluginDataSourceCrud) Get() error {
	request := oci_jms.GetJmsPluginRequest{}
func (s *JmsJmsPluginDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/jms/jms_fleet_blocklists_data_source.go ===
func JmsFleetBlocklistsDataSource() *schema.Resource {
	return &schema.Resource{
func readJmsFleetBlocklists(d *schema.ResourceData, m interface{}) error {
	sync := &JmsFleetBlocklistsDataSourceCrud{}
func (s *JmsFleetBlocklistsDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *JmsFleetBlocklistsDataSourceCrud) Get() error {
	request := oci_jms.ListBlocklistsRequest{}
func (s *JmsFleetBlocklistsDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/jms/jms_jms_plugins_data_source.go ===
func JmsJmsPluginsDataSource() *schema.Resource {
	return &schema.Resource{
func readJmsJmsPlugins(d *schema.ResourceData, m interface{}) error {
	sync := &JmsJmsPluginsDataSourceCrud{}
func (s *JmsJmsPluginsDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *JmsJmsPluginsDataSourceCrud) Get() error {
	request := oci_jms.ListJmsPluginsRequest{}
func (s *JmsJmsPluginsDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/jms/jms_list_jre_usage_data_source.go ===
func JmsListJreUsageDataSource() *schema.Resource {
	return &schema.Resource{
func readSingularJmsListJreUsage(d *schema.ResourceData, m interface{}) error {
	sync := &JmsListJreUsageDataSourceCrud{}
func (s *JmsListJreUsageDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *JmsListJreUsageDataSourceCrud) Get() error {
	request := oci_jms.ListJreUsageRequest{}
func (s *JmsListJreUsageDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/jms/jms_java_family_data_source.go ===
func JmsJavaFamilyDataSource() *schema.Resource {
	return &schema.Resource{
func readSingularJmsJavaFamily(d *schema.ResourceData, m interface{}) error {
	sync := &JmsJavaFamilyDataSourceCrud{}
func (s *JmsJavaFamilyDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *JmsJavaFamilyDataSourceCrud) Get() error {
	request := oci_jms.GetJavaFamilyRequest{}
func (s *JmsJavaFamilyDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/jms/jms_java_releases_data_source.go ===
func JmsJavaReleasesDataSource() *schema.Resource {
	return &schema.Resource{
func readJmsJavaReleases(d *schema.ResourceData, m interface{}) error {
	sync := &JmsJavaReleasesDataSourceCrud{}
func (s *JmsJavaReleasesDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *JmsJavaReleasesDataSourceCrud) Get() error {
	request := oci_jms.ListJavaReleasesRequest{}
func (s *JmsJavaReleasesDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/jms/jms_fleet_export_status_data_source.go ===
func JmsFleetExportStatusDataSource() *schema.Resource {
	return &schema.Resource{
func readSingularJmsFleetExportStatus(d *schema.ResourceData, m interface{}) error {
	sync := &JmsFleetExportStatusDataSourceCrud{}
func (s *JmsFleetExportStatusDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *JmsFleetExportStatusDataSourceCrud) Get() error {
	request := oci_jms.GetExportStatusRequest{}
func (s *JmsFleetExportStatusDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/jms/jms_fleet_resource.go ===
func JmsFleetResource() *schema.Resource {
	return &schema.Resource{
func createJmsFleet(d *schema.ResourceData, m interface{}) error {
	sync := &JmsFleetResourceCrud{}
func readJmsFleet(d *schema.ResourceData, m interface{}) error {
	sync := &JmsFleetResourceCrud{}
func updateJmsFleet(d *schema.ResourceData, m interface{}) error {
	sync := &JmsFleetResourceCrud{}
func deleteJmsFleet(d *schema.ResourceData, m interface{}) error {
	sync := &JmsFleetResourceCrud{}
func (s *JmsFleetResourceCrud) ID() string {
	return *s.Res.Id
func (s *JmsFleetResourceCrud) CreatedPending() []string {
	return []string{
func (s *JmsFleetResourceCrud) CreatedTarget() []string {
	return []string{
func (s *JmsFleetResourceCrud) DeletedPending() []string {
	return []string{
func (s *JmsFleetResourceCrud) DeletedTarget() []string {
	return []string{
func (s *JmsFleetResourceCrud) Create() error {
	request := oci_jms.CreateFleetRequest{}
func (s *JmsFleetResourceCrud) getFleetFromWorkRequest(workId *string, retryPolicy *oci_common.RetryPolicy,
	actionTypeEnum oci_jms.ActionTypeEnum, timeout time.Duration) error {
func (s *JmsFleetResourceCrud) Get() error {
	request := oci_jms.GetFleetRequest{}
func (s *JmsFleetResourceCrud) Update() error {
	if compartment, ok := s.D.GetOkExists("compartment_id"); ok && s.D.HasChange("compartment_id") {
func (s *JmsFleetResourceCrud) Delete() error {
	request := oci_jms.DeleteFleetRequest{}
func (s *JmsFleetResourceCrud) SetData() error {
	if s.Res.ApproximateApplicationCount != nil {
func (s *JmsFleetResourceCrud) mapToCustomLog(fieldKeyFormat string) (oci_jms.CustomLog, error) {
	result := oci_jms.CustomLog{}
func (s *JmsFleetResourceCrud) updateCompartment(compartment interface{}) error {
	changeCompartmentRequest := oci_jms.ChangeFleetCompartmentRequest{}

=== ./internal/service/jms/jms_fleet_crypto_analysis_result_data_source.go ===
func JmsFleetCryptoAnalysisResultDataSource() *schema.Resource {
	return &schema.Resource{
func readSingularJmsFleetCryptoAnalysisResult(d *schema.ResourceData, m interface{}) error {
	sync := &JmsFleetCryptoAnalysisResultDataSourceCrud{}
func (s *JmsFleetCryptoAnalysisResultDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *JmsFleetCryptoAnalysisResultDataSourceCrud) Get() error {
	request := oci_jms.GetCryptoAnalysisResultRequest{}
func (s *JmsFleetCryptoAnalysisResultDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/jms/jms_fleet_installation_sites_data_source.go ===
func JmsFleetInstallationSitesDataSource() *schema.Resource {
	return &schema.Resource{
func readJmsFleetInstallationSites(d *schema.ResourceData, m interface{}) error {
	sync := &JmsFleetInstallationSitesDataSourceCrud{}
func (s *JmsFleetInstallationSitesDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *JmsFleetInstallationSitesDataSourceCrud) Get() error {
	request := oci_jms.ListInstallationSitesRequest{}
func (s *JmsFleetInstallationSitesDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/jms/jms_jms_plugin_resource.go ===
func JmsJmsPluginResource() *schema.Resource {
	return &schema.Resource{
func createJmsJmsPlugin(d *schema.ResourceData, m interface{}) error {
	sync := &JmsJmsPluginResourceCrud{}
func readJmsJmsPlugin(d *schema.ResourceData, m interface{}) error {
	sync := &JmsJmsPluginResourceCrud{}
func updateJmsJmsPlugin(d *schema.ResourceData, m interface{}) error {
	sync := &JmsJmsPluginResourceCrud{}
func deleteJmsJmsPlugin(d *schema.ResourceData, m interface{}) error {
	sync := &JmsJmsPluginResourceCrud{}
func (s *JmsJmsPluginResourceCrud) ID() string {
	return *s.Res.Id
func (s *JmsJmsPluginResourceCrud) CreatedPending() []string {
	return []string{}
func (s *JmsJmsPluginResourceCrud) CreatedTarget() []string {
	return []string{
func (s *JmsJmsPluginResourceCrud) DeletedPending() []string {
	return []string{}
func (s *JmsJmsPluginResourceCrud) DeletedTarget() []string {
	return []string{
func (s *JmsJmsPluginResourceCrud) Create() error {
	request := oci_jms.CreateJmsPluginRequest{}
func (s *JmsJmsPluginResourceCrud) Get() error {
	request := oci_jms.GetJmsPluginRequest{}
func (s *JmsJmsPluginResourceCrud) Update() error {
	request := oci_jms.UpdateJmsPluginRequest{}
func (s *JmsJmsPluginResourceCrud) Delete() error {
	request := oci_jms.DeleteJmsPluginRequest{}
func (s *JmsJmsPluginResourceCrud) SetData() error {
	if s.Res.AgentId != nil {

=== ./internal/service/jms/jms_announcements_data_source.go ===
func JmsAnnouncementsDataSource() *schema.Resource {
	return &schema.Resource{
func readJmsAnnouncements(d *schema.ResourceData, m interface{}) error {
	sync := &JmsAnnouncementsDataSourceCrud{}
func (s *JmsAnnouncementsDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *JmsAnnouncementsDataSourceCrud) Get() error {
	request := oci_jms.ListAnnouncementsRequest{}
func (s *JmsAnnouncementsDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/jms/jms_fleet_advanced_feature_configuration_data_source.go ===
func JmsFleetAdvancedFeatureConfigurationDataSource() *schema.Resource {
	fieldMap := make(map[string]*schema.Schema)
func readSingularJmsFleetAdvancedFeatureConfiguration(d *schema.ResourceData, m interface{}) error {
	sync := &JmsFleetAdvancedFeatureConfigurationDataSourceCrud{}
func (s *JmsFleetAdvancedFeatureConfigurationDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *JmsFleetAdvancedFeatureConfigurationDataSourceCrud) Get() error {
	request := oci_jms.GetFleetAdvancedFeatureConfigurationRequest{}
func (s *JmsFleetAdvancedFeatureConfigurationDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/jms/jms_java_families_data_source.go ===
func JmsJavaFamiliesDataSource() *schema.Resource {
	return &schema.Resource{
func readJmsJavaFamilies(d *schema.ResourceData, m interface{}) error {
	sync := &JmsJavaFamiliesDataSourceCrud{}
func (s *JmsJavaFamiliesDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *JmsJavaFamiliesDataSourceCrud) Get() error {
	request := oci_jms.ListJavaFamiliesRequest{}
func (s *JmsJavaFamiliesDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/jms/jms_fleet_diagnoses_data_source.go ===
func JmsFleetDiagnosesDataSource() *schema.Resource {
	return &schema.Resource{
func readJmsFleetDiagnoses(d *schema.ResourceData, m interface{}) error {
	sync := &JmsFleetDiagnosesDataSourceCrud{}
func (s *JmsFleetDiagnosesDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *JmsFleetDiagnosesDataSourceCrud) Get() error {
	request := oci_jms.ListFleetDiagnosesRequest{}
func (s *JmsFleetDiagnosesDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/jms/register_resource.go ===
func RegisterResource() {
	tfresource.RegisterResource("oci_jms_fleet", JmsFleetResource())

=== ./internal/service/jms/jms_fleet_java_migration_analysis_result_data_source.go ===
func JmsFleetJavaMigrationAnalysisResultDataSource() *schema.Resource {
	return &schema.Resource{
func readSingularJmsFleetJavaMigrationAnalysisResult(d *schema.ResourceData, m interface{}) error {
	sync := &JmsFleetJavaMigrationAnalysisResultDataSourceCrud{}
func (s *JmsFleetJavaMigrationAnalysisResultDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *JmsFleetJavaMigrationAnalysisResultDataSourceCrud) Get() error {
	request := oci_jms.GetJavaMigrationAnalysisResultRequest{}
func (s *JmsFleetJavaMigrationAnalysisResultDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/identity_domains/identity_domains_notification_settings_data_source.go ===
func IdentityDomainsNotificationSettingsDataSource() *schema.Resource {
	return &schema.Resource{
func readIdentityDomainsNotificationSettings(d *schema.ResourceData, m interface{}) error {
	sync := &IdentityDomainsNotificationSettingsDataSourceCrud{}
func (s *IdentityDomainsNotificationSettingsDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *IdentityDomainsNotificationSettingsDataSourceCrud) Get() error {
	request := oci_identity_domains.ListNotificationSettingsRequest{}
func (s *IdentityDomainsNotificationSettingsDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/identity_domains/identity_domains_api_keys_data_source.go ===
func IdentityDomainsApiKeysDataSource() *schema.Resource {
	return &schema.Resource{
func readIdentityDomainsApiKeys(d *schema.ResourceData, m interface{}) error {
	sync := &IdentityDomainsApiKeysDataSourceCrud{}
func (s *IdentityDomainsApiKeysDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *IdentityDomainsApiKeysDataSourceCrud) Get() error {
	request := oci_identity_domains.ListApiKeysRequest{}
func (s *IdentityDomainsApiKeysDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/identity_domains/identity_domains_approval_workflow_step_resource.go ===
func IdentityDomainsApprovalWorkflowStepResource() *schema.Resource {
	return &schema.Resource{
func createIdentityDomainsApprovalWorkflowStep(d *schema.ResourceData, m interface{}) error {
	sync := &IdentityDomainsApprovalWorkflowStepResourceCrud{}
func readIdentityDomainsApprovalWorkflowStep(d *schema.ResourceData, m interface{}) error {
	sync := &IdentityDomainsApprovalWorkflowStepResourceCrud{}
func deleteIdentityDomainsApprovalWorkflowStep(d *schema.ResourceData, m interface{}) error {
	sync := &IdentityDomainsApprovalWorkflowStepResourceCrud{}
func (s *IdentityDomainsApprovalWorkflowStepResourceCrud) ID() string {
	return *s.Res.Id
func (s *IdentityDomainsApprovalWorkflowStepResourceCrud) Create() error {
	request := oci_identity_domains.CreateApprovalWorkflowStepRequest{}
func (s *IdentityDomainsApprovalWorkflowStepResourceCrud) Get() error {
	request := oci_identity_domains.GetApprovalWorkflowStepRequest{}
func (s *IdentityDomainsApprovalWorkflowStepResourceCrud) Delete() error {
	request := oci_identity_domains.DeleteApprovalWorkflowStepRequest{}
func (s *IdentityDomainsApprovalWorkflowStepResourceCrud) SetData() error {

func (s *IdentityDomainsApprovalWorkflowStepResourceCrud) mapToApprovalWorkflowStepApprovers(fieldKeyFormat string) (oci_identity_domains.ApprovalWorkflowStepApprovers, error) {
	result := oci_identity_domains.ApprovalWorkflowStepApprovers{}
func (s *IdentityDomainsApprovalWorkflowStepResourceCrud) mapTotags(fieldKeyFormat string) (oci_identity_domains.Tags, error) {
	result := oci_identity_domains.Tags{}

=== ./internal/service/identity_domains/identity_domains_auth_token_data_source.go ===
func IdentityDomainsAuthTokenDataSource() *schema.Resource {
	fieldMap := make(map[string]*schema.Schema)
func readSingularIdentityDomainsAuthToken(d *schema.ResourceData, m interface{}) error {
	sync := &IdentityDomainsAuthTokenDataSourceCrud{}
func (s *IdentityDomainsAuthTokenDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *IdentityDomainsAuthTokenDataSourceCrud) Get() error {
	request := oci_identity_domains.GetAuthTokenRequest{}
func (s *IdentityDomainsAuthTokenDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/identity_domains/identity_domains_oauth2client_credential_resource.go ===
func IdentityDomainsOAuth2ClientCredentialResource() *schema.Resource {
	return &schema.Resource{
func createIdentityDomainsOAuth2ClientCredential(d *schema.ResourceData, m interface{}) error {
	sync := &IdentityDomainsOAuth2ClientCredentialResourceCrud{}
func readIdentityDomainsOAuth2ClientCredential(d *schema.ResourceData, m interface{}) error {
	sync := &IdentityDomainsOAuth2ClientCredentialResourceCrud{}
func deleteIdentityDomainsOAuth2ClientCredential(d *schema.ResourceData, m interface{}) error {
	sync := &IdentityDomainsOAuth2ClientCredentialResourceCrud{}
func (s *IdentityDomainsOAuth2ClientCredentialResourceCrud) ID() string {
	return *s.Res.Id
func (s *IdentityDomainsOAuth2ClientCredentialResourceCrud) Create() error {
	request := oci_identity_domains.CreateOAuth2ClientCredentialRequest{}
func (s *IdentityDomainsOAuth2ClientCredentialResourceCrud) Get() error {
	request := oci_identity_domains.GetOAuth2ClientCredentialRequest{}
func (s *IdentityDomainsOAuth2ClientCredentialResourceCrud) Delete() error {
	request := oci_identity_domains.DeleteOAuth2ClientCredentialRequest{}
func (s *IdentityDomainsOAuth2ClientCredentialResourceCrud) SetData() error {

func (s *IdentityDomainsOAuth2ClientCredentialResourceCrud) mapToExtensionSelfChangeUser(fieldKeyFormat string) (oci_identity_domains.ExtensionSelfChangeUser, error) {
	result := oci_identity_domains.ExtensionSelfChangeUser{}
func (s *IdentityDomainsOAuth2ClientCredentialResourceCrud) mapToOAuth2ClientCredentialScopes(fieldKeyFormat string) (oci_identity_domains.OAuth2ClientCredentialScopes, error) {
	result := oci_identity_domains.OAuth2ClientCredentialScopes{}
func (s *IdentityDomainsOAuth2ClientCredentialResourceCrud) mapToOAuth2ClientCredentialUser(fieldKeyFormat string) (oci_identity_domains.OAuth2ClientCredentialUser, error) {
	result := oci_identity_domains.OAuth2ClientCredentialUser{}
func (s *IdentityDomainsOAuth2ClientCredentialResourceCrud) mapTotags(fieldKeyFormat string) (oci_identity_domains.Tags, error) {
	result := oci_identity_domains.Tags{}

=== ./internal/service/identity_domains/identity_domains_my_auth_token_data_source.go ===
func IdentityDomainsMyAuthTokenDataSource() *schema.Resource {
	fieldMap := make(map[string]*schema.Schema)
func readSingularIdentityDomainsMyAuthToken(d *schema.ResourceData, m interface{}) error {
	sync := &IdentityDomainsMyAuthTokenDataSourceCrud{}
func (s *IdentityDomainsMyAuthTokenDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *IdentityDomainsMyAuthTokenDataSourceCrud) Get() error {
	request := oci_identity_domains.GetMyAuthTokenRequest{}
func (s *IdentityDomainsMyAuthTokenDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/identity_domains/identity_domains_smtp_credentials_data_source.go ===
func IdentityDomainsSmtpCredentialsDataSource() *schema.Resource {
	return &schema.Resource{
func readIdentityDomainsSmtpCredentials(d *schema.ResourceData, m interface{}) error {
	sync := &IdentityDomainsSmtpCredentialsDataSourceCrud{}
func (s *IdentityDomainsSmtpCredentialsDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *IdentityDomainsSmtpCredentialsDataSourceCrud) Get() error {
	request := oci_identity_domains.ListSmtpCredentialsRequest{}
func (s *IdentityDomainsSmtpCredentialsDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/identity_domains/identity_domains_smtp_credential_data_source.go ===
func IdentityDomainsSmtpCredentialDataSource() *schema.Resource {
	fieldMap := make(map[string]*schema.Schema)
func readSingularIdentityDomainsSmtpCredential(d *schema.ResourceData, m interface{}) error {
	sync := &IdentityDomainsSmtpCredentialDataSourceCrud{}
func (s *IdentityDomainsSmtpCredentialDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *IdentityDomainsSmtpCredentialDataSourceCrud) Get() error {
	request := oci_identity_domains.GetSmtpCredentialRequest{}
func (s *IdentityDomainsSmtpCredentialDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/identity_domains/identity_domains_notification_setting_data_source.go ===
func IdentityDomainsNotificationSettingDataSource() *schema.Resource {
	fieldMap := make(map[string]*schema.Schema)
func readSingularIdentityDomainsNotificationSetting(d *schema.ResourceData, m interface{}) error {
	sync := &IdentityDomainsNotificationSettingDataSourceCrud{}
func (s *IdentityDomainsNotificationSettingDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *IdentityDomainsNotificationSettingDataSourceCrud) Get() error {
	request := oci_identity_domains.GetNotificationSettingRequest{}
func (s *IdentityDomainsNotificationSettingDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/identity_domains/identity_domains_identity_provider_data_source.go ===
func IdentityDomainsIdentityProviderDataSource() *schema.Resource {
	fieldMap := make(map[string]*schema.Schema)
func readSingularIdentityDomainsIdentityProvider(d *schema.ResourceData, m interface{}) error {
	sync := &IdentityDomainsIdentityProviderDataSourceCrud{}
func (s *IdentityDomainsIdentityProviderDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *IdentityDomainsIdentityProviderDataSourceCrud) Get() error {
	request := oci_identity_domains.GetIdentityProviderRequest{}
func (s *IdentityDomainsIdentityProviderDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/identity_domains/identity_domains_account_recovery_setting_data_source.go ===
func IdentityDomainsAccountRecoverySettingDataSource() *schema.Resource {
	fieldMap := make(map[string]*schema.Schema)
func readSingularIdentityDomainsAccountRecoverySetting(d *schema.ResourceData, m interface{}) error {
	sync := &IdentityDomainsAccountRecoverySettingDataSourceCrud{}
func (s *IdentityDomainsAccountRecoverySettingDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *IdentityDomainsAccountRecoverySettingDataSourceCrud) Get() error {
	request := oci_identity_domains.GetAccountRecoverySettingRequest{}
func (s *IdentityDomainsAccountRecoverySettingDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/identity_domains/identity_domains_my_auth_token_resource.go ===
func IdentityDomainsMyAuthTokenResource() *schema.Resource {
	return &schema.Resource{
func createIdentityDomainsMyAuthToken(d *schema.ResourceData, m interface{}) error {
	sync := &IdentityDomainsMyAuthTokenResourceCrud{}
func readIdentityDomainsMyAuthToken(d *schema.ResourceData, m interface{}) error {
	sync := &IdentityDomainsMyAuthTokenResourceCrud{}
func deleteIdentityDomainsMyAuthToken(d *schema.ResourceData, m interface{}) error {
	sync := &IdentityDomainsMyAuthTokenResourceCrud{}
func (s *IdentityDomainsMyAuthTokenResourceCrud) ID() string {
	return *s.Res.Id
func (s *IdentityDomainsMyAuthTokenResourceCrud) Create() error {
	request := oci_identity_domains.CreateMyAuthTokenRequest{}
func (s *IdentityDomainsMyAuthTokenResourceCrud) Get() error {
	request := oci_identity_domains.GetMyAuthTokenRequest{}
func (s *IdentityDomainsMyAuthTokenResourceCrud) Delete() error {
	request := oci_identity_domains.DeleteMyAuthTokenRequest{}
func (s *IdentityDomainsMyAuthTokenResourceCrud) SetData() error {

func (s *IdentityDomainsMyAuthTokenResourceCrud) mapToMyAuthTokenUser(fieldKeyFormat string) (oci_identity_domains.MyAuthTokenUser, error) {
	result := oci_identity_domains.MyAuthTokenUser{}
func (s *IdentityDomainsMyAuthTokenResourceCrud) mapTotags(fieldKeyFormat string) (oci_identity_domains.Tags, error) {
	result := oci_identity_domains.Tags{}

=== ./internal/service/identity_domains/identity_domains_policies_data_source.go ===
func IdentityDomainsPoliciesDataSource() *schema.Resource {
	return &schema.Resource{
func readIdentityDomainsPolicies(d *schema.ResourceData, m interface{}) error {
	sync := &IdentityDomainsPoliciesDataSourceCrud{}
func (s *IdentityDomainsPoliciesDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *IdentityDomainsPoliciesDataSourceCrud) Get() error {
	request := oci_identity_domains.ListPoliciesRequest{}
func (s *IdentityDomainsPoliciesDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/identity_domains/identity_domains_branding_setting_data_source.go ===
func IdentityDomainsBrandingSettingDataSource() *schema.Resource {
	return &schema.Resource{
func readSingularIdentityDomainsBrandingSetting(d *schema.ResourceData, m interface{}) error {
	sync := &IdentityDomainsBrandingSettingDataSourceCrud{}
func (s *IdentityDomainsBrandingSettingDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *IdentityDomainsBrandingSettingDataSourceCrud) Get() error {
	request := oci_identity_domains.GetBrandingSettingRequest{}
func (s *IdentityDomainsBrandingSettingDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/identity_domains/identity_domains_my_trusted_user_agents_data_source.go ===
func IdentityDomainsMyTrustedUserAgentsDataSource() *schema.Resource {
	return &schema.Resource{
func readIdentityDomainsMyTrustedUserAgents(d *schema.ResourceData, m interface{}) error {
	sync := &IdentityDomainsMyTrustedUserAgentsDataSourceCrud{}
func (s *IdentityDomainsMyTrustedUserAgentsDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *IdentityDomainsMyTrustedUserAgentsDataSourceCrud) Get() error {
	request := oci_identity_domains.ListMyTrustedUserAgentsRequest{}
func (s *IdentityDomainsMyTrustedUserAgentsDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/identity_domains/identity_domains_oauth2client_credential_data_source.go ===
func IdentityDomainsOAuth2ClientCredentialDataSource() *schema.Resource {
	fieldMap := make(map[string]*schema.Schema)
func readSingularIdentityDomainsOAuth2ClientCredential(d *schema.ResourceData, m interface{}) error {
	sync := &IdentityDomainsOAuth2ClientCredentialDataSourceCrud{}
func (s *IdentityDomainsOAuth2ClientCredentialDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *IdentityDomainsOAuth2ClientCredentialDataSourceCrud) Get() error {
	request := oci_identity_domains.GetOAuth2ClientCredentialRequest{}
func (s *IdentityDomainsOAuth2ClientCredentialDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/identity_domains/identity_domains_groups_data_source.go ===
func IdentityDomainsGroupsDataSource() *schema.Resource {
	return &schema.Resource{
func readIdentityDomainsGroups(d *schema.ResourceData, m interface{}) error {
	sync := &IdentityDomainsGroupsDataSourceCrud{}
func (s *IdentityDomainsGroupsDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *IdentityDomainsGroupsDataSourceCrud) Get() error {
	request := oci_identity_domains.ListGroupsRequest{}
func (s *IdentityDomainsGroupsDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/identity_domains/identity_domains_approval_workflow_resource.go ===
func IdentityDomainsApprovalWorkflowResource() *schema.Resource {
	return &schema.Resource{
func createIdentityDomainsApprovalWorkflow(d *schema.ResourceData, m interface{}) error {
	sync := &IdentityDomainsApprovalWorkflowResourceCrud{}
func readIdentityDomainsApprovalWorkflow(d *schema.ResourceData, m interface{}) error {
	sync := &IdentityDomainsApprovalWorkflowResourceCrud{}
func updateIdentityDomainsApprovalWorkflow(d *schema.ResourceData, m interface{}) error {
	sync := &IdentityDomainsApprovalWorkflowResourceCrud{}
func deleteIdentityDomainsApprovalWorkflow(d *schema.ResourceData, m interface{}) error {
	sync := &IdentityDomainsApprovalWorkflowResourceCrud{}
func (s *IdentityDomainsApprovalWorkflowResourceCrud) ID() string {
	return *s.Res.Id
func (s *IdentityDomainsApprovalWorkflowResourceCrud) Create() error {
	request := oci_identity_domains.CreateApprovalWorkflowRequest{}
func (s *IdentityDomainsApprovalWorkflowResourceCrud) Get() error {
	request := oci_identity_domains.GetApprovalWorkflowRequest{}
func (s *IdentityDomainsApprovalWorkflowResourceCrud) Update() error {
	request := oci_identity_domains.PutApprovalWorkflowRequest{}
func (s *IdentityDomainsApprovalWorkflowResourceCrud) Delete() error {
	request := oci_identity_domains.DeleteApprovalWorkflowRequest{}
func (s *IdentityDomainsApprovalWorkflowResourceCrud) SetData() error {

func (s *IdentityDomainsApprovalWorkflowResourceCrud) mapToApprovalWorkflowApprovalWorkflowSteps(fieldKeyFormat string) (oci_identity_domains.ApprovalWorkflowApprovalWorkflowSteps, error) {
	result := oci_identity_domains.ApprovalWorkflowApprovalWorkflowSteps{}
func (s *IdentityDomainsApprovalWorkflowResourceCrud) mapToApprovalWorkflowMaxDuration(fieldKeyFormat string) (oci_identity_domains.ApprovalWorkflowMaxDuration, error) {
	result := oci_identity_domains.ApprovalWorkflowMaxDuration{}
func (s *IdentityDomainsApprovalWorkflowResourceCrud) mapTotags(fieldKeyFormat string) (oci_identity_domains.Tags, error) {
	result := oci_identity_domains.Tags{}

=== ./internal/service/identity_domains/identity_domains_app_resource.go ===
func IdentityDomainsAppResource() *schema.Resource {
	return &schema.Resource{
func createIdentityDomainsApp(d *schema.ResourceData, m interface{}) error {
	sync := &IdentityDomainsAppResourceCrud{}
func readIdentityDomainsApp(d *schema.ResourceData, m interface{}) error {
	sync := &IdentityDomainsAppResourceCrud{}
func updateIdentityDomainsApp(d *schema.ResourceData, m interface{}) error {
	sync := &IdentityDomainsAppResourceCrud{}
func deleteIdentityDomainsApp(d *schema.ResourceData, m interface{}) error {
	sync := &IdentityDomainsAppResourceCrud{}
func (s *IdentityDomainsAppResourceCrud) ID() string {
	return *s.Res.Id
func (s *IdentityDomainsAppResourceCrud) Create() error {
	request := oci_identity_domains.CreateAppRequest{}
func (s *IdentityDomainsAppResourceCrud) Get() error {
	request := oci_identity_domains.GetAppRequest{}
func (s *IdentityDomainsAppResourceCrud) Update() error {
	request := oci_identity_domains.PutAppRequest{}
func (s *IdentityDomainsAppResourceCrud) Delete() error {
	request := oci_identity_domains.DeleteAppRequest{}
func (s *IdentityDomainsAppResourceCrud) SetData() error {

func (s *IdentityDomainsAppResourceCrud) mapToAppAliasApps(fieldKeyFormat string) (oci_identity_domains.AppAliasApps, error) {
	result := oci_identity_domains.AppAliasApps{}
func (s *IdentityDomainsAppResourceCrud) mapToAppAllowAuthzPolicy(fieldKeyFormat string) (oci_identity_domains.AppAllowAuthzPolicy, error) {
	result := oci_identity_domains.AppAllowAuthzPolicy{}
func (s *IdentityDomainsAppResourceCrud) mapToAppAllowedScopes(fieldKeyFormat string) (oci_identity_domains.AppAllowedScopes, error) {
	result := oci_identity_domains.AppAllowedScopes{}
func (s *IdentityDomainsAppResourceCrud) mapToAppAllowedTags(fieldKeyFormat string) (oci_identity_domains.AppAllowedTags, error) {
	result := oci_identity_domains.AppAllowedTags{}
func (s *IdentityDomainsAppResourceCrud) mapToAppAppResources(fieldKeyFormat string) (oci_identity_domains.AppAppResources, error) {
	result := oci_identity_domains.AppAppResources{}
func AppAppResourcesToMap(obj oci_identity_domains.AppAppResources) map[string]interface{} {
	result := map[string]interface{}{}
func (s *IdentityDomainsAppResourceCrud) mapToAppAppSignonPolicy(fieldKeyFormat string) (oci_identity_domains.AppAppSignonPolicy, error) {
	result := oci_identity_domains.AppAppSignonPolicy{}
func (s *IdentityDomainsAppResourceCrud) mapToAppAppsNetworkPerimeters(fieldKeyFormat string) (oci_identity_domains.AppAppsNetworkPerimeters, error) {
	result := oci_identity_domains.AppAppsNetworkPerimeters{}
func (s *IdentityDomainsAppResourceCrud) mapToAppAsOPCService(fieldKeyFormat string) (oci_identity_domains.AppAsOpcService, error) {
	result := oci_identity_domains.AppAsOpcService{}
func (s *IdentityDomainsAppResourceCrud) mapToAppAttrRenderingMetadata(fieldKeyFormat string) (oci_identity_domains.AppAttrRenderingMetadata, error) {
	result := oci_identity_domains.AppAttrRenderingMetadata{}
func (s *IdentityDomainsAppResourceCrud) mapToAppBasedOnTemplate(fieldKeyFormat string) (oci_identity_domains.AppBasedOnTemplate, error) {
	result := oci_identity_domains.AppBasedOnTemplate{}
func (s *IdentityDomainsAppResourceCrud) mapToAppBundleConfigurationProperties(fieldKeyFormat string) (oci_identity_domains.AppBundleConfigurationProperties, error) {
	result := oci_identity_domains.AppBundleConfigurationProperties{}
func (s *IdentityDomainsAppResourceCrud) mapToAppBundlePoolConfiguration(fieldKeyFormat string) (oci_identity_domains.AppBundlePoolConfiguration, error) {
	result := oci_identity_domains.AppBundlePoolConfiguration{}
func (s *IdentityDomainsAppResourceCrud) mapToAppCertificates(fieldKeyFormat string) (oci_identity_domains.AppCertificates, error) {
	result := oci_identity_domains.AppCertificates{}
func (s *IdentityDomainsAppResourceCrud) mapToAppConnectorBundle(fieldKeyFormat string) (oci_identity_domains.AppConnectorBundle, error) {
	result := oci_identity_domains.AppConnectorBundle{}
func (s *IdentityDomainsAppResourceCrud) mapToAppDenyAuthzPolicy(fieldKeyFormat string) (oci_identity_domains.AppDenyAuthzPolicy, error) {
	result := oci_identity_domains.AppDenyAuthzPolicy{}
func (s *IdentityDomainsAppResourceCrud) mapToAppDomainApp(fieldKeyFormat string) (oci_identity_domains.AppDomainApp, error) {
	result := oci_identity_domains.AppDomainApp{}
func (s *IdentityDomainsAppResourceCrud) mapToAppExtensionDbcsApp(fieldKeyFormat string) (oci_identity_domains.AppExtensionDbcsApp, error) {
	result := oci_identity_domains.AppExtensionDbcsApp{}
func (s *IdentityDomainsAppResourceCrud) mapToAppExtensionEnterpriseAppApp(fieldKeyFormat string) (oci_identity_domains.AppExtensionEnterpriseAppApp, error) {
	result := oci_identity_domains.AppExtensionEnterpriseAppApp{}
func (s *IdentityDomainsAppResourceCrud) mapToAppExtensionFormFillAppApp(fieldKeyFormat string) (oci_identity_domains.AppExtensionFormFillAppApp, error) {
	result := oci_identity_domains.AppExtensionFormFillAppApp{}
func (s *IdentityDomainsAppResourceCrud) mapToAppExtensionFormFillAppTemplateAppTemplate(fieldKeyFormat string) (oci_identity_domains.AppExtensionFormFillAppTemplateAppTemplate, error) {
	result := oci_identity_domains.AppExtensionFormFillAppTemplateAppTemplate{}
func (s *IdentityDomainsAppResourceCrud) mapToAppExtensionKerberosRealmApp(fieldKeyFormat string) (oci_identity_domains.AppExtensionKerberosRealmApp, error) {
	result := oci_identity_domains.AppExtensionKerberosRealmApp{}
func (s *IdentityDomainsAppResourceCrud) mapToAppExtensionManagedappApp(fieldKeyFormat string) (oci_identity_domains.AppExtensionManagedappApp, error) {
	result := oci_identity_domains.AppExtensionManagedappApp{}
func (s *IdentityDomainsAppResourceCrud) mapToAppExtensionMulticloudServiceAppApp(fieldKeyFormat string) (oci_identity_domains.AppExtensionMulticloudServiceAppApp, error) {
	result := oci_identity_domains.AppExtensionMulticloudServiceAppApp{}
func (s *IdentityDomainsAppResourceCrud) mapToAppExtensionOpcServiceApp(fieldKeyFormat string) (oci_identity_domains.AppExtensionOpcServiceApp, error) {
	result := oci_identity_domains.AppExtensionOpcServiceApp{}
func (s *IdentityDomainsAppResourceCrud) mapToAppExtensionRadiusAppApp(fieldKeyFormat string) (oci_identity_domains.AppExtensionRadiusAppApp, error) {
	result := oci_identity_domains.AppExtensionRadiusAppApp{}
func (s *IdentityDomainsAppResourceCrud) mapToAppExtensionRequestableApp(fieldKeyFormat string) (oci_identity_domains.AppExtensionRequestableApp, error) {
	result := oci_identity_domains.AppExtensionRequestableApp{}
func (s *IdentityDomainsAppResourceCrud) mapToAppExtensionSamlServiceProviderApp(fieldKeyFormat string) (oci_identity_domains.AppExtensionSamlServiceProviderApp, error) {
	result := oci_identity_domains.AppExtensionSamlServiceProviderApp{}
func (s *IdentityDomainsAppResourceCrud) mapToAppExtensionWebTierPolicyApp(fieldKeyFormat string) (oci_identity_domains.AppExtensionWebTierPolicyApp, error) {
	result := oci_identity_domains.AppExtensionWebTierPolicyApp{}
func (s *IdentityDomainsAppResourceCrud) mapToAppFlatFileBundleConfigurationProperties(fieldKeyFormat string) (oci_identity_domains.AppFlatFileBundleConfigurationProperties, error) {
	result := oci_identity_domains.AppFlatFileBundleConfigurationProperties{}
func (s *IdentityDomainsAppResourceCrud) mapToAppFlatFileConnectorBundle(fieldKeyFormat string) (oci_identity_domains.AppFlatFileConnectorBundle, error) {
	result := oci_identity_domains.AppFlatFileConnectorBundle{}
func (s *IdentityDomainsAppResourceCrud) mapToAppFormFillUrlMatch(fieldKeyFormat string) (oci_identity_domains.AppFormFillUrlMatch, error) {
	result := oci_identity_domains.AppFormFillUrlMatch{}
func (s *IdentityDomainsAppResourceCrud) mapToAppGroupAssertionAttributes(fieldKeyFormat string) (oci_identity_domains.AppGroupAssertionAttributes, error) {
	result := oci_identity_domains.AppGroupAssertionAttributes{}
func (s *IdentityDomainsAppResourceCrud) mapToAppGroupMembershipToReturn(fieldKeyFormat string) (oci_identity_domains.AppGroupMembershipToReturn, error) {
	result := oci_identity_domains.AppGroupMembershipToReturn{}
func (s *IdentityDomainsAppResourceCrud) mapToAppIdentityBridges(fieldKeyFormat string) (oci_identity_domains.AppIdentityBridges, error) {
	result := oci_identity_domains.AppIdentityBridges{}
func (s *IdentityDomainsAppResourceCrud) mapToAppIdentityProviders(fieldKeyFormat string) (oci_identity_domains.AppIdentityProviders, error) {
	result := oci_identity_domains.AppIdentityProviders{}
func (s *IdentityDomainsAppResourceCrud) mapToAppIdpPolicy(fieldKeyFormat string) (oci_identity_domains.AppIdpPolicy, error) {
	result := oci_identity_domains.AppIdpPolicy{}
func (s *IdentityDomainsAppResourceCrud) mapToAppObjectClasses(fieldKeyFormat string) (oci_identity_domains.AppObjectClasses, error) {
	result := oci_identity_domains.AppObjectClasses{}
func (s *IdentityDomainsAppResourceCrud) mapToAppOutboundAssertionAttributes(fieldKeyFormat string) (oci_identity_domains.AppOutboundAssertionAttributes, error) {
	result := oci_identity_domains.AppOutboundAssertionAttributes{}
func (s *IdentityDomainsAppResourceCrud) mapToAppProtectableSecondaryAudiences(fieldKeyFormat string) (oci_identity_domains.AppProtectableSecondaryAudiences, error) {
	result := oci_identity_domains.AppProtectableSecondaryAudiences{}
func (s *IdentityDomainsAppResourceCrud) mapToAppRadiusPolicy(fieldKeyFormat string) (oci_identity_domains.AppRadiusPolicy, error) {
	result := oci_identity_domains.AppRadiusPolicy{}
func (s *IdentityDomainsAppResourceCrud) mapToAppSamlServiceProvider(fieldKeyFormat string) (oci_identity_domains.AppSamlServiceProvider, error) {
	result := oci_identity_domains.AppSamlServiceProvider{}
func (s *IdentityDomainsAppResourceCrud) mapToAppScopes(fieldKeyFormat string) (oci_identity_domains.AppScopes, error) {
	result := oci_identity_domains.AppScopes{}
func (s *IdentityDomainsAppResourceCrud) mapToAppServiceParams(fieldKeyFormat string) (oci_identity_domains.AppServiceParams, error) {
	result := oci_identity_domains.AppServiceParams{}
func (s *IdentityDomainsAppResourceCrud) mapToAppSignonPolicy(fieldKeyFormat string) (oci_identity_domains.AppSignonPolicy, error) {
	result := oci_identity_domains.AppSignonPolicy{}
func (s *IdentityDomainsAppResourceCrud) mapToAppTermsOfUse(fieldKeyFormat string) (oci_identity_domains.AppTermsOfUse, error) {
	result := oci_identity_domains.AppTermsOfUse{}
func (s *IdentityDomainsAppResourceCrud) mapToAppThreeLeggedOAuthCredential(fieldKeyFormat string) (oci_identity_domains.AppThreeLeggedOAuthCredential, error) {
	result := oci_identity_domains.AppThreeLeggedOAuthCredential{}
func (s *IdentityDomainsAppResourceCrud) mapToAppTrustPolicies(fieldKeyFormat string) (oci_identity_domains.AppTrustPolicies, error) {
	result := oci_identity_domains.AppTrustPolicies{}
func (s *IdentityDomainsAppResourceCrud) mapToAppUserAssertionAttributes(fieldKeyFormat string) (oci_identity_domains.AppUserAssertionAttributes, error) {
	result := oci_identity_domains.AppUserAssertionAttributes{}
func (s *IdentityDomainsAppResourceCrud) mapToExtensionOCITags(fieldKeyFormat string) (oci_identity_domains.ExtensionOciTags, error) {
	result := oci_identity_domains.ExtensionOciTags{}
func (s *IdentityDomainsAppResourceCrud) mapTodefinedTags(fieldKeyFormat string) (oci_identity_domains.DefinedTags, error) {
	result := oci_identity_domains.DefinedTags{}
func (s *IdentityDomainsAppResourceCrud) mapTofreeformTags(fieldKeyFormat string) (oci_identity_domains.FreeformTags, error) {
	result := oci_identity_domains.FreeformTags{}
func (s *IdentityDomainsAppResourceCrud) mapTotags(fieldKeyFormat string) (oci_identity_domains.Tags, error) {
	result := oci_identity_domains.Tags{}

=== ./internal/service/identity_domains/identity_domains_my_customer_secret_keys_data_source.go ===
func IdentityDomainsMyCustomerSecretKeysDataSource() *schema.Resource {
	return &schema.Resource{
func readIdentityDomainsMyCustomerSecretKeys(d *schema.ResourceData, m interface{}) error {
	sync := &IdentityDomainsMyCustomerSecretKeysDataSourceCrud{}
func (s *IdentityDomainsMyCustomerSecretKeysDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *IdentityDomainsMyCustomerSecretKeysDataSourceCrud) Get() error {
	request := oci_identity_domains.ListMyCustomerSecretKeysRequest{}
func (s *IdentityDomainsMyCustomerSecretKeysDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/identity_domains/identity_domains_account_mgmt_infos_data_source.go ===
func IdentityDomainsAccountMgmtInfosDataSource() *schema.Resource {
	return &schema.Resource{
func readIdentityDomainsAccountMgmtInfos(d *schema.ResourceData, m interface{}) error {
	sync := &IdentityDomainsAccountMgmtInfosDataSourceCrud{}
func (s *IdentityDomainsAccountMgmtInfosDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *IdentityDomainsAccountMgmtInfosDataSourceCrud) Get() error {
	request := oci_identity_domains.ListAccountMgmtInfosRequest{}
func (s *IdentityDomainsAccountMgmtInfosDataSourceCrud) SetData() error {
	if s.Res == nil {
func AccountMgmtInfoResourceTypeToMap(obj *oci_identity_domains.AccountMgmtInfoResourceType) map[string]interface{} {
	result := map[string]interface{}{}

=== ./internal/service/identity_domains/identity_domains_user_data_source.go ===
func IdentityDomainsUserDataSource() *schema.Resource {
	fieldMap := make(map[string]*schema.Schema)
func readSingularIdentityDomainsUser(d *schema.ResourceData, m interface{}) error {
	sync := &IdentityDomainsUserDataSourceCrud{}
func (s *IdentityDomainsUserDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *IdentityDomainsUserDataSourceCrud) Get() error {
	request := oci_identity_domains.GetUserRequest{}
func (s *IdentityDomainsUserDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/identity_domains/identity_domains_my_device_data_source.go ===
func IdentityDomainsMyDeviceDataSource() *schema.Resource {
	return &schema.Resource{
func readSingularIdentityDomainsMyDevice(d *schema.ResourceData, m interface{}) error {
	sync := &IdentityDomainsMyDeviceDataSourceCrud{}
func (s *IdentityDomainsMyDeviceDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *IdentityDomainsMyDeviceDataSourceCrud) Get() error {
	request := oci_identity_domains.GetMyDeviceRequest{}
func (s *IdentityDomainsMyDeviceDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/identity_domains/identity_domains_api_key_resource.go ===
func IdentityDomainsApiKeyResource() *schema.Resource {
	return &schema.Resource{
func createIdentityDomainsApiKey(d *schema.ResourceData, m interface{}) error {
	sync := &IdentityDomainsApiKeyResourceCrud{}
func readIdentityDomainsApiKey(d *schema.ResourceData, m interface{}) error {
	sync := &IdentityDomainsApiKeyResourceCrud{}
func deleteIdentityDomainsApiKey(d *schema.ResourceData, m interface{}) error {
	sync := &IdentityDomainsApiKeyResourceCrud{}
func (s *IdentityDomainsApiKeyResourceCrud) ID() string {
	return *s.Res.Id
func (s *IdentityDomainsApiKeyResourceCrud) Create() error {
	request := oci_identity_domains.CreateApiKeyRequest{}
func (s *IdentityDomainsApiKeyResourceCrud) Get() error {
	request := oci_identity_domains.GetApiKeyRequest{}
func (s *IdentityDomainsApiKeyResourceCrud) Delete() error {
	request := oci_identity_domains.DeleteApiKeyRequest{}
func (s *IdentityDomainsApiKeyResourceCrud) SetData() error {

func (s *IdentityDomainsApiKeyResourceCrud) mapToApiKeyUser(fieldKeyFormat string) (oci_identity_domains.ApiKeyUser, error) {
	result := oci_identity_domains.ApiKeyUser{}
func (s *IdentityDomainsApiKeyResourceCrud) mapToExtensionSelfChangeUser(fieldKeyFormat string) (oci_identity_domains.ExtensionSelfChangeUser, error) {
	result := oci_identity_domains.ExtensionSelfChangeUser{}
func (s *IdentityDomainsApiKeyResourceCrud) mapTotags(fieldKeyFormat string) (oci_identity_domains.Tags, error) {
	result := oci_identity_domains.Tags{}

=== ./internal/service/identity_domains/identity_domains_cloud_gate_mappings_data_source.go ===
func IdentityDomainsCloudGateMappingsDataSource() *schema.Resource {
	return &schema.Resource{
func readIdentityDomainsCloudGateMappings(d *schema.ResourceData, m interface{}) error {
	sync := &IdentityDomainsCloudGateMappingsDataSourceCrud{}
func (s *IdentityDomainsCloudGateMappingsDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *IdentityDomainsCloudGateMappingsDataSourceCrud) Get() error {
	request := oci_identity_domains.ListCloudGateMappingsRequest{}
func (s *IdentityDomainsCloudGateMappingsDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/identity_domains/identity_domains_my_devices_data_source.go ===
func IdentityDomainsMyDevicesDataSource() *schema.Resource {
	return &schema.Resource{
func readIdentityDomainsMyDevices(d *schema.ResourceData, m interface{}) error {
	sync := &IdentityDomainsMyDevicesDataSourceCrud{}
func (s *IdentityDomainsMyDevicesDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *IdentityDomainsMyDevicesDataSourceCrud) Get() error {
	request := oci_identity_domains.ListMyDevicesRequest{}
func (s *IdentityDomainsMyDevicesDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/identity_domains/identity_domains_account_mgmt_info_data_source.go ===
func IdentityDomainsAccountMgmtInfoDataSource() *schema.Resource {
	return &schema.Resource{
func readSingularIdentityDomainsAccountMgmtInfo(d *schema.ResourceData, m interface{}) error {
	sync := &IdentityDomainsAccountMgmtInfoDataSourceCrud{}
func (s *IdentityDomainsAccountMgmtInfoDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *IdentityDomainsAccountMgmtInfoDataSourceCrud) Get() error {
	request := oci_identity_domains.GetAccountMgmtInfoRequest{}
func (s *IdentityDomainsAccountMgmtInfoDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/identity_domains/identity_domains_app_role_data_source.go ===
func IdentityDomainsAppRoleDataSource() *schema.Resource {
	fieldMap := make(map[string]*schema.Schema)
func readSingularIdentityDomainsAppRole(d *schema.ResourceData, m interface{}) error {
	sync := &IdentityDomainsAppRoleDataSourceCrud{}
func (s *IdentityDomainsAppRoleDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *IdentityDomainsAppRoleDataSourceCrud) Get() error {
	request := oci_identity_domains.GetAppRoleRequest{}
func (s *IdentityDomainsAppRoleDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/identity_domains/identity_domains_condition_resource.go ===
func IdentityDomainsConditionResource() *schema.Resource {
	return &schema.Resource{
func createIdentityDomainsCondition(d *schema.ResourceData, m interface{}) error {
	sync := &IdentityDomainsConditionResourceCrud{}
func readIdentityDomainsCondition(d *schema.ResourceData, m interface{}) error {
	sync := &IdentityDomainsConditionResourceCrud{}
func updateIdentityDomainsCondition(d *schema.ResourceData, m interface{}) error {
	sync := &IdentityDomainsConditionResourceCrud{}
func deleteIdentityDomainsCondition(d *schema.ResourceData, m interface{}) error {
	sync := &IdentityDomainsConditionResourceCrud{}
func (s *IdentityDomainsConditionResourceCrud) ID() string {
	return *s.Res.Id
func (s *IdentityDomainsConditionResourceCrud) Create() error {
	request := oci_identity_domains.CreateConditionRequest{}
func (s *IdentityDomainsConditionResourceCrud) Get() error {
	request := oci_identity_domains.GetConditionRequest{}
func (s *IdentityDomainsConditionResourceCrud) Update() error {
	request := oci_identity_domains.PutConditionRequest{}
func (s *IdentityDomainsConditionResourceCrud) Delete() error {
	request := oci_identity_domains.DeleteConditionRequest{}
func (s *IdentityDomainsConditionResourceCrud) SetData() error {

func (s *IdentityDomainsConditionResourceCrud) mapTotags(fieldKeyFormat string) (oci_identity_domains.Tags, error) {
	result := oci_identity_domains.Tags{}

=== ./internal/service/identity_domains/identity_domains_identity_setting_data_source.go ===
func IdentityDomainsIdentitySettingDataSource() *schema.Resource {
	fieldMap := make(map[string]*schema.Schema)
func readSingularIdentityDomainsIdentitySetting(d *schema.ResourceData, m interface{}) error {
	sync := &IdentityDomainsIdentitySettingDataSourceCrud{}
func (s *IdentityDomainsIdentitySettingDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *IdentityDomainsIdentitySettingDataSourceCrud) Get() error {
	request := oci_identity_domains.GetIdentitySettingRequest{}
func (s *IdentityDomainsIdentitySettingDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/identity_domains/identity_domains_policy_resource.go ===
func IdentityDomainsPolicyResource() *schema.Resource {
	return &schema.Resource{
func createIdentityDomainsPolicy(d *schema.ResourceData, m interface{}) error {
	sync := &IdentityDomainsPolicyResourceCrud{}
func readIdentityDomainsPolicy(d *schema.ResourceData, m interface{}) error {
	sync := &IdentityDomainsPolicyResourceCrud{}
func updateIdentityDomainsPolicy(d *schema.ResourceData, m interface{}) error {
	sync := &IdentityDomainsPolicyResourceCrud{}
func deleteIdentityDomainsPolicy(d *schema.ResourceData, m interface{}) error {
	sync := &IdentityDomainsPolicyResourceCrud{}
func (s *IdentityDomainsPolicyResourceCrud) ID() string {
	return *s.Res.Id
func (s *IdentityDomainsPolicyResourceCrud) Create() error {
	request := oci_identity_domains.CreatePolicyRequest{}
func (s *IdentityDomainsPolicyResourceCrud) Get() error {
	request := oci_identity_domains.GetPolicyRequest{}
func (s *IdentityDomainsPolicyResourceCrud) Update() error {
	request := oci_identity_domains.PutPolicyRequest{}
func (s *IdentityDomainsPolicyResourceCrud) Delete() error {
	request := oci_identity_domains.DeletePolicyRequest{}
func (s *IdentityDomainsPolicyResourceCrud) SetData() error {

func (s *IdentityDomainsPolicyResourceCrud) mapToPolicyPolicyType(fieldKeyFormat string) (oci_identity_domains.PolicyPolicyType, error) {
	result := oci_identity_domains.PolicyPolicyType{}
func (s *IdentityDomainsPolicyResourceCrud) mapToPolicyRules(fieldKeyFormat string) (oci_identity_domains.PolicyRules, error) {
	result := oci_identity_domains.PolicyRules{}
func (s *IdentityDomainsPolicyResourceCrud) mapTotags(fieldKeyFormat string) (oci_identity_domains.Tags, error) {
	result := oci_identity_domains.Tags{}

=== ./internal/service/identity_domains/identity_domains_my_support_accounts_data_source.go ===
func IdentityDomainsMySupportAccountsDataSource() *schema.Resource {
	return &schema.Resource{
func readIdentityDomainsMySupportAccounts(d *schema.ResourceData, m interface{}) error {
	sync := &IdentityDomainsMySupportAccountsDataSourceCrud{}
func (s *IdentityDomainsMySupportAccountsDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *IdentityDomainsMySupportAccountsDataSourceCrud) Get() error {
	request := oci_identity_domains.ListMySupportAccountsRequest{}
func (s *IdentityDomainsMySupportAccountsDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/identity_domains/identity_domains_self_registration_profiles_data_source.go ===
func IdentityDomainsSelfRegistrationProfilesDataSource() *schema.Resource {
	return &schema.Resource{
func readIdentityDomainsSelfRegistrationProfiles(d *schema.ResourceData, m interface{}) error {
	sync := &IdentityDomainsSelfRegistrationProfilesDataSourceCrud{}
func (s *IdentityDomainsSelfRegistrationProfilesDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *IdentityDomainsSelfRegistrationProfilesDataSourceCrud) Get() error {
	request := oci_identity_domains.ListSelfRegistrationProfilesRequest{}
func (s *IdentityDomainsSelfRegistrationProfilesDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/identity_domains/identity_domains_network_perimeter_resource.go ===
func IdentityDomainsNetworkPerimeterResource() *schema.Resource {
	return &schema.Resource{
func createIdentityDomainsNetworkPerimeter(d *schema.ResourceData, m interface{}) error {
	sync := &IdentityDomainsNetworkPerimeterResourceCrud{}
func readIdentityDomainsNetworkPerimeter(d *schema.ResourceData, m interface{}) error {
	sync := &IdentityDomainsNetworkPerimeterResourceCrud{}
func updateIdentityDomainsNetworkPerimeter(d *schema.ResourceData, m interface{}) error {
	sync := &IdentityDomainsNetworkPerimeterResourceCrud{}
func deleteIdentityDomainsNetworkPerimeter(d *schema.ResourceData, m interface{}) error {
	sync := &IdentityDomainsNetworkPerimeterResourceCrud{}
func (s *IdentityDomainsNetworkPerimeterResourceCrud) ID() string {
	return *s.Res.Id
func (s *IdentityDomainsNetworkPerimeterResourceCrud) Create() error {
	request := oci_identity_domains.CreateNetworkPerimeterRequest{}
func (s *IdentityDomainsNetworkPerimeterResourceCrud) Get() error {
	request := oci_identity_domains.GetNetworkPerimeterRequest{}
func (s *IdentityDomainsNetworkPerimeterResourceCrud) Update() error {
	request := oci_identity_domains.PutNetworkPerimeterRequest{}
func (s *IdentityDomainsNetworkPerimeterResourceCrud) Delete() error {
	request := oci_identity_domains.DeleteNetworkPerimeterRequest{}
func (s *IdentityDomainsNetworkPerimeterResourceCrud) SetData() error {

func (s *IdentityDomainsNetworkPerimeterResourceCrud) mapToNetworkPerimeterIpAddresses(fieldKeyFormat string) (oci_identity_domains.NetworkPerimeterIpAddresses, error) {
	result := oci_identity_domains.NetworkPerimeterIpAddresses{}
func (s *IdentityDomainsNetworkPerimeterResourceCrud) mapTotags(fieldKeyFormat string) (oci_identity_domains.Tags, error) {
	result := oci_identity_domains.Tags{}

=== ./internal/service/identity_domains/identity_domains_oauth2client_credentials_data_source.go ===
func IdentityDomainsOAuth2ClientCredentialsDataSource() *schema.Resource {
	return &schema.Resource{
func readIdentityDomainsOAuth2ClientCredentials(d *schema.ResourceData, m interface{}) error {
	sync := &IdentityDomainsOAuth2ClientCredentialsDataSourceCrud{}
func (s *IdentityDomainsOAuth2ClientCredentialsDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *IdentityDomainsOAuth2ClientCredentialsDataSourceCrud) Get() error {
	request := oci_identity_domains.ListOAuth2ClientCredentialsRequest{}
func (s *IdentityDomainsOAuth2ClientCredentialsDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/identity_domains/identity_domains_customer_secret_keys_data_source.go ===
func IdentityDomainsCustomerSecretKeysDataSource() *schema.Resource {
	return &schema.Resource{
func readIdentityDomainsCustomerSecretKeys(d *schema.ResourceData, m interface{}) error {
	sync := &IdentityDomainsCustomerSecretKeysDataSourceCrud{}
func (s *IdentityDomainsCustomerSecretKeysDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *IdentityDomainsCustomerSecretKeysDataSourceCrud) Get() error {
	request := oci_identity_domains.ListCustomerSecretKeysRequest{}
func (s *IdentityDomainsCustomerSecretKeysDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/identity_domains/identity_domains_user_db_credential_data_source.go ===
func IdentityDomainsUserDbCredentialDataSource() *schema.Resource {
	fieldMap := make(map[string]*schema.Schema)
func readSingularIdentityDomainsUserDbCredential(d *schema.ResourceData, m interface{}) error {
	sync := &IdentityDomainsUserDbCredentialDataSourceCrud{}
func (s *IdentityDomainsUserDbCredentialDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *IdentityDomainsUserDbCredentialDataSourceCrud) Get() error {
	request := oci_identity_domains.GetUserDbCredentialRequest{}
func (s *IdentityDomainsUserDbCredentialDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/identity_domains/identity_domains_social_identity_provider_resource.go ===
func IdentityDomainsSocialIdentityProviderResource() *schema.Resource {
	return &schema.Resource{
func createIdentityDomainsSocialIdentityProvider(d *schema.ResourceData, m interface{}) error {
	sync := &IdentityDomainsSocialIdentityProviderResourceCrud{}
func readIdentityDomainsSocialIdentityProvider(d *schema.ResourceData, m interface{}) error {
	sync := &IdentityDomainsSocialIdentityProviderResourceCrud{}
func updateIdentityDomainsSocialIdentityProvider(d *schema.ResourceData, m interface{}) error {
	sync := &IdentityDomainsSocialIdentityProviderResourceCrud{}
func deleteIdentityDomainsSocialIdentityProvider(d *schema.ResourceData, m interface{}) error {
	sync := &IdentityDomainsSocialIdentityProviderResourceCrud{}
func (s *IdentityDomainsSocialIdentityProviderResourceCrud) ID() string {
	// return GetSocialIdentityProviderCompositeId(s.D.Get("id").(string))
func (s *IdentityDomainsSocialIdentityProviderResourceCrud) Create() error {
	request := oci_identity_domains.CreateSocialIdentityProviderRequest{}
func (s *IdentityDomainsSocialIdentityProviderResourceCrud) Get() error {
	request := oci_identity_domains.GetSocialIdentityProviderRequest{}
func (s *IdentityDomainsSocialIdentityProviderResourceCrud) Update() error {
	request := oci_identity_domains.PutSocialIdentityProviderRequest{}
func (s *IdentityDomainsSocialIdentityProviderResourceCrud) Delete() error {
	request := oci_identity_domains.DeleteSocialIdentityProviderRequest{}
func (s *IdentityDomainsSocialIdentityProviderResourceCrud) SetData() error {

func (s *IdentityDomainsSocialIdentityProviderResourceCrud) mapToSocialIdentityProviderJitProvAssignedGroups(fieldKeyFormat string) (oci_identity_domains.SocialIdentityProviderJitProvAssignedGroups, error) {
	result := oci_identity_domains.SocialIdentityProviderJitProvAssignedGroups{}
func (s *IdentityDomainsSocialIdentityProviderResourceCrud) mapToSocialIdentityProviderRelayIdpParamMappings(fieldKeyFormat string) (oci_identity_domains.SocialIdentityProviderRelayIdpParamMappings, error) {
	result := oci_identity_domains.SocialIdentityProviderRelayIdpParamMappings{}
func (s *IdentityDomainsSocialIdentityProviderResourceCrud) mapTotags(fieldKeyFormat string) (oci_identity_domains.Tags, error) {
	result := oci_identity_domains.Tags{}

=== ./internal/service/identity_domains/identity_domains_authentication_factor_settings_data_source.go ===
func IdentityDomainsAuthenticationFactorSettingsDataSource() *schema.Resource {
	return &schema.Resource{
func readIdentityDomainsAuthenticationFactorSettings(d *schema.ResourceData, m interface{}) error {
	sync := &IdentityDomainsAuthenticationFactorSettingsDataSourceCrud{}
func (s *IdentityDomainsAuthenticationFactorSettingsDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *IdentityDomainsAuthenticationFactorSettingsDataSourceCrud) Get() error {
	request := oci_identity_domains.ListAuthenticationFactorSettingsRequest{}
func (s *IdentityDomainsAuthenticationFactorSettingsDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/identity_domains/identity_domains_cloud_gate_resource.go ===
func IdentityDomainsCloudGateResource() *schema.Resource {
	return &schema.Resource{
func createIdentityDomainsCloudGate(d *schema.ResourceData, m interface{}) error {
	sync := &IdentityDomainsCloudGateResourceCrud{}
func readIdentityDomainsCloudGate(d *schema.ResourceData, m interface{}) error {
	sync := &IdentityDomainsCloudGateResourceCrud{}
func updateIdentityDomainsCloudGate(d *schema.ResourceData, m interface{}) error {
	sync := &IdentityDomainsCloudGateResourceCrud{}
func deleteIdentityDomainsCloudGate(d *schema.ResourceData, m interface{}) error {
	sync := &IdentityDomainsCloudGateResourceCrud{}
func (s *IdentityDomainsCloudGateResourceCrud) ID() string {
	return *s.Res.Id
func (s *IdentityDomainsCloudGateResourceCrud) Create() error {
	request := oci_identity_domains.CreateCloudGateRequest{}
func (s *IdentityDomainsCloudGateResourceCrud) Get() error {
	request := oci_identity_domains.GetCloudGateRequest{}
func (s *IdentityDomainsCloudGateResourceCrud) Update() error {
	request := oci_identity_domains.PutCloudGateRequest{}
func (s *IdentityDomainsCloudGateResourceCrud) Delete() error {
	request := oci_identity_domains.DeleteCloudGateRequest{}
func (s *IdentityDomainsCloudGateResourceCrud) SetData() error {

func (s *IdentityDomainsCloudGateResourceCrud) mapTotags(fieldKeyFormat string) (oci_identity_domains.Tags, error) {
	result := oci_identity_domains.Tags{}

=== ./internal/service/identity_domains/identity_domains_identity_settings_data_source.go ===
func IdentityDomainsIdentitySettingsDataSource() *schema.Resource {
	return &schema.Resource{
func readIdentityDomainsIdentitySettings(d *schema.ResourceData, m interface{}) error {
	sync := &IdentityDomainsIdentitySettingsDataSourceCrud{}
func (s *IdentityDomainsIdentitySettingsDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *IdentityDomainsIdentitySettingsDataSourceCrud) Get() error {
	request := oci_identity_domains.ListIdentitySettingsRequest{}
func (s *IdentityDomainsIdentitySettingsDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/identity_domains/identity_domains_app_roles_data_source.go ===
func IdentityDomainsAppRolesDataSource() *schema.Resource {
	return &schema.Resource{
func readIdentityDomainsAppRoles(d *schema.ResourceData, m interface{}) error {
	sync := &IdentityDomainsAppRolesDataSourceCrud{}
func (s *IdentityDomainsAppRolesDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *IdentityDomainsAppRolesDataSourceCrud) Get() error {
	request := oci_identity_domains.ListAppRolesRequest{}
func (s *IdentityDomainsAppRolesDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/identity_domains/identity_domains_identity_propagation_trust_resource.go ===
func IdentityDomainsIdentityPropagationTrustResource() *schema.Resource {
	return &schema.Resource{
func createIdentityDomainsIdentityPropagationTrust(d *schema.ResourceData, m interface{}) error {
	sync := &IdentityDomainsIdentityPropagationTrustResourceCrud{}
func readIdentityDomainsIdentityPropagationTrust(d *schema.ResourceData, m interface{}) error {
	sync := &IdentityDomainsIdentityPropagationTrustResourceCrud{}
func updateIdentityDomainsIdentityPropagationTrust(d *schema.ResourceData, m interface{}) error {
	sync := &IdentityDomainsIdentityPropagationTrustResourceCrud{}
func deleteIdentityDomainsIdentityPropagationTrust(d *schema.ResourceData, m interface{}) error {
	sync := &IdentityDomainsIdentityPropagationTrustResourceCrud{}
func (s *IdentityDomainsIdentityPropagationTrustResourceCrud) ID() string {
	return *s.Res.Id
func (s *IdentityDomainsIdentityPropagationTrustResourceCrud) Create() error {
	request := oci_identity_domains.CreateIdentityPropagationTrustRequest{}
func (s *IdentityDomainsIdentityPropagationTrustResourceCrud) Get() error {
	request := oci_identity_domains.GetIdentityPropagationTrustRequest{}
func (s *IdentityDomainsIdentityPropagationTrustResourceCrud) Update() error {
	request := oci_identity_domains.PutIdentityPropagationTrustRequest{}
func (s *IdentityDomainsIdentityPropagationTrustResourceCrud) Delete() error {
	request := oci_identity_domains.DeleteIdentityPropagationTrustRequest{}
func (s *IdentityDomainsIdentityPropagationTrustResourceCrud) SetData() error {

func (s *IdentityDomainsIdentityPropagationTrustResourceCrud) mapToIdentityPropagationTrustImpersonationServiceUsers(fieldKeyFormat string) (oci_identity_domains.IdentityPropagationTrustImpersonationServiceUsers, error) {
	result := oci_identity_domains.IdentityPropagationTrustImpersonationServiceUsers{}
func (s *IdentityDomainsIdentityPropagationTrustResourceCrud) mapToIdentityPropagationTrustKeytab(fieldKeyFormat string) (oci_identity_domains.IdentityPropagationTrustKeytab, error) {
	result := oci_identity_domains.IdentityPropagationTrustKeytab{}
func (s *IdentityDomainsIdentityPropagationTrustResourceCrud) mapTotags(fieldKeyFormat string) (oci_identity_domains.Tags, error) {
	result := oci_identity_domains.Tags{}

=== ./internal/service/identity_domains/identity_domains_user_resource.go ===
func IdentityDomainsUserResource() *schema.Resource {
	return &schema.Resource{
func createIdentityDomainsUser(d *schema.ResourceData, m interface{}) error {
	sync := &IdentityDomainsUserResourceCrud{}
func readIdentityDomainsUser(d *schema.ResourceData, m interface{}) error {
	sync := &IdentityDomainsUserResourceCrud{}
func updateIdentityDomainsUser(d *schema.ResourceData, m interface{}) error {
	sync := &IdentityDomainsUserResourceCrud{}
func deleteIdentityDomainsUser(d *schema.ResourceData, m interface{}) error {
	sync := &IdentityDomainsUserResourceCrud{}
func (s *IdentityDomainsUserResourceCrud) ID() string {
	return *s.Res.Id
func (s *IdentityDomainsUserResourceCrud) Create() error {
	request := oci_identity_domains.CreateUserRequest{}
func (s *IdentityDomainsUserResourceCrud) Get() error {
	request := oci_identity_domains.GetUserRequest{}
func (s *IdentityDomainsUserResourceCrud) Update() error {
	request := oci_identity_domains.PutUserRequest{}
func (s *IdentityDomainsUserResourceCrud) Delete() error {
	request := oci_identity_domains.DeleteUserRequest{}
func (s *IdentityDomainsUserResourceCrud) SetData() error {

func (s *IdentityDomainsUserResourceCrud) mapToExtensionAdaptiveUser(fieldKeyFormat string) (oci_identity_domains.ExtensionAdaptiveUser, error) {
	result := oci_identity_domains.ExtensionAdaptiveUser{}
func (s *IdentityDomainsUserResourceCrud) mapToExtensionCapabilitiesUser(fieldKeyFormat string) (oci_identity_domains.ExtensionCapabilitiesUser, error) {
	result := oci_identity_domains.ExtensionCapabilitiesUser{}
func (s *IdentityDomainsUserResourceCrud) mapToExtensionDbCredentialsUser(fieldKeyFormat string) (oci_identity_domains.ExtensionDbCredentialsUser, error) {
	result := oci_identity_domains.ExtensionDbCredentialsUser{}
func (s *IdentityDomainsUserResourceCrud) mapToExtensionEnterprise20User(fieldKeyFormat string) (oci_identity_domains.ExtensionEnterprise20User, error) {
	result := oci_identity_domains.ExtensionEnterprise20User{}
func (s *IdentityDomainsUserResourceCrud) mapToExtensionKerberosUserUser(fieldKeyFormat string) (oci_identity_domains.ExtensionKerberosUserUser, error) {
	result := oci_identity_domains.ExtensionKerberosUserUser{}
func (s *IdentityDomainsUserResourceCrud) mapToExtensionMfaUser(fieldKeyFormat string) (oci_identity_domains.ExtensionMfaUser, error) {
	result := oci_identity_domains.ExtensionMfaUser{}
func (s *IdentityDomainsUserResourceCrud) mapToExtensionOCITags(fieldKeyFormat string) (oci_identity_domains.ExtensionOciTags, error) {
	result := oci_identity_domains.ExtensionOciTags{}
func (s *IdentityDomainsUserResourceCrud) mapTodefinedTags(fieldKeyFormat string) (oci_identity_domains.DefinedTags, error) {
	result := oci_identity_domains.DefinedTags{}
func (s *IdentityDomainsUserResourceCrud) mapToExtensionPasswordlessUser(fieldKeyFormat string) (oci_identity_domains.ExtensionPasswordlessUser, error) {
	result := oci_identity_domains.ExtensionPasswordlessUser{}
func (s *IdentityDomainsUserResourceCrud) mapToExtensionPosixUser(fieldKeyFormat string) (oci_identity_domains.ExtensionPosixUser, error) {
	result := oci_identity_domains.ExtensionPosixUser{}
func (s *IdentityDomainsUserResourceCrud) mapToExtensionSecurityQuestionsUser(fieldKeyFormat string) (oci_identity_domains.ExtensionSecurityQuestionsUser, error) {
	result := oci_identity_domains.ExtensionSecurityQuestionsUser{}
func (s *IdentityDomainsUserResourceCrud) mapToExtensionSelfChangeUser(fieldKeyFormat string) (oci_identity_domains.ExtensionSelfChangeUser, error) {
	result := oci_identity_domains.ExtensionSelfChangeUser{}
func (s *IdentityDomainsUserResourceCrud) mapToExtensionSelfRegistrationUser(fieldKeyFormat string) (oci_identity_domains.ExtensionSelfRegistrationUser, error) {
	result := oci_identity_domains.ExtensionSelfRegistrationUser{}
func (s *IdentityDomainsUserResourceCrud) mapToExtensionSffUser(fieldKeyFormat string) (oci_identity_domains.ExtensionSffUser, error) {
	result := oci_identity_domains.ExtensionSffUser{}
func (s *IdentityDomainsUserResourceCrud) mapToExtensionSocialAccountUser(fieldKeyFormat string) (oci_identity_domains.ExtensionSocialAccountUser, error) {
	result := oci_identity_domains.ExtensionSocialAccountUser{}
func (s *IdentityDomainsUserResourceCrud) mapToExtensionTermsOfUseUser(fieldKeyFormat string) (oci_identity_domains.ExtensionTermsOfUseUser, error) {
	result := oci_identity_domains.ExtensionTermsOfUseUser{}
func (s *IdentityDomainsUserResourceCrud) mapToExtensionUserStateUser(fieldKeyFormat string) (oci_identity_domains.ExtensionUserStateUser, error) {
	result := oci_identity_domains.ExtensionUserStateUser{}
func (s *IdentityDomainsUserResourceCrud) mapToExtensionUserUser(fieldKeyFormat string, forUpdate bool) (oci_identity_domains.ExtensionUserUser, error) {
	result := oci_identity_domains.ExtensionUserUser{}
func (s *IdentityDomainsUserResourceCrud) mapToUserEmails(fieldKeyFormat string) (oci_identity_domains.UserEmails, error) {
	result := oci_identity_domains.UserEmails{}
func (s *IdentityDomainsUserResourceCrud) mapToUserEntitlements(fieldKeyFormat string) (oci_identity_domains.UserEntitlements, error) {
	result := oci_identity_domains.UserEntitlements{}
func (s *IdentityDomainsUserResourceCrud) mapToUserExtApiKeys(fieldKeyFormat string) (oci_identity_domains.UserExtApiKeys, error) {
	result := oci_identity_domains.UserExtApiKeys{}
func (s *IdentityDomainsUserResourceCrud) mapToUserExtApplicablePasswordPolicy(fieldKeyFormat string) (oci_identity_domains.UserExtApplicablePasswordPolicy, error) {
	result := oci_identity_domains.UserExtApplicablePasswordPolicy{}
func (s *IdentityDomainsUserResourceCrud) mapToUserExtAuthTokens(fieldKeyFormat string) (oci_identity_domains.UserExtAuthTokens, error) {
	result := oci_identity_domains.UserExtAuthTokens{}
func (s *IdentityDomainsUserResourceCrud) mapToUserExtBypassCodes(fieldKeyFormat string) (oci_identity_domains.UserExtBypassCodes, error) {
	result := oci_identity_domains.UserExtBypassCodes{}
func (s *IdentityDomainsUserResourceCrud) mapToUserExtCustomerSecretKeys(fieldKeyFormat string) (oci_identity_domains.UserExtCustomerSecretKeys, error) {
	result := oci_identity_domains.UserExtCustomerSecretKeys{}
func (s *IdentityDomainsUserResourceCrud) mapToUserExtDbCredentials(fieldKeyFormat string) (oci_identity_domains.UserExtDbCredentials, error) {
	result := oci_identity_domains.UserExtDbCredentials{}
func (s *IdentityDomainsUserResourceCrud) mapToUserExtDelegatedAuthenticationTargetApp(fieldKeyFormat string) (oci_identity_domains.UserExtDelegatedAuthenticationTargetApp, error) {
	result := oci_identity_domains.UserExtDelegatedAuthenticationTargetApp{}
func (s *IdentityDomainsUserResourceCrud) mapToUserExtDevices(fieldKeyFormat string) (oci_identity_domains.UserExtDevices, error) {
	result := oci_identity_domains.UserExtDevices{}
func (s *IdentityDomainsUserResourceCrud) mapToUserExtFactorIdentifier(fieldKeyFormat string) (oci_identity_domains.UserExtFactorIdentifier, error) {
	result := oci_identity_domains.UserExtFactorIdentifier{}
func (s *IdentityDomainsUserResourceCrud) mapToUserExtLocked(fieldKeyFormat string) (oci_identity_domains.UserExtLocked, error) {
	result := oci_identity_domains.UserExtLocked{}
func (s *IdentityDomainsUserResourceCrud) mapToUserExtManager(fieldKeyFormat string) (oci_identity_domains.UserExtManager, error) {
	result := oci_identity_domains.UserExtManager{}
func (s *IdentityDomainsUserResourceCrud) mapToUserExtOAuth2ClientCredentials(fieldKeyFormat string) (oci_identity_domains.UserExtOAuth2ClientCredentials, error) {
	result := oci_identity_domains.UserExtOAuth2ClientCredentials{}
func (s *IdentityDomainsUserResourceCrud) mapToUserExtPasswordVerifiers(fieldKeyFormat string) (oci_identity_domains.UserExtPasswordVerifiers, error) {
	result := oci_identity_domains.UserExtPasswordVerifiers{}
func (s *IdentityDomainsUserResourceCrud) mapToUserExtPreferredDevice(fieldKeyFormat string) (oci_identity_domains.UserExtPreferredDevice, error) {
	result := oci_identity_domains.UserExtPreferredDevice{}
func (s *IdentityDomainsUserResourceCrud) mapToUserExtRealmUsers(fieldKeyFormat string) (oci_identity_domains.UserExtRealmUsers, error) {
	result := oci_identity_domains.UserExtRealmUsers{}
func (s *IdentityDomainsUserResourceCrud) mapToUserExtRecoveryLocked(fieldKeyFormat string) (oci_identity_domains.UserExtRecoveryLocked, error) {
	result := oci_identity_domains.UserExtRecoveryLocked{}
func (s *IdentityDomainsUserResourceCrud) mapToUserExtRiskScores(fieldKeyFormat string) (oci_identity_domains.UserExtRiskScores, error) {
	result := oci_identity_domains.UserExtRiskScores{}
func (s *IdentityDomainsUserResourceCrud) mapToUserExtSecQuestions(fieldKeyFormat string) (oci_identity_domains.UserExtSecQuestions, error) {
	result := oci_identity_domains.UserExtSecQuestions{}
func (s *IdentityDomainsUserResourceCrud) mapToUserExtSelfRegistrationProfile(fieldKeyFormat string) (oci_identity_domains.UserExtSelfRegistrationProfile, error) {
	result := oci_identity_domains.UserExtSelfRegistrationProfile{}
func (s *IdentityDomainsUserResourceCrud) mapToUserExtSmtpCredentials(fieldKeyFormat string) (oci_identity_domains.UserExtSmtpCredentials, error) {
	result := oci_identity_domains.UserExtSmtpCredentials{}
func (s *IdentityDomainsUserResourceCrud) mapToUserExtSocialAccounts(fieldKeyFormat string) (oci_identity_domains.UserExtSocialAccounts, error) {
	result := oci_identity_domains.UserExtSocialAccounts{}
func (s *IdentityDomainsUserResourceCrud) mapToUserExtSyncedFromApp(fieldKeyFormat string) (oci_identity_domains.UserExtSyncedFromApp, error) {
	result := oci_identity_domains.UserExtSyncedFromApp{}
func (s *IdentityDomainsUserResourceCrud) mapToUserExtTermsOfUseConsents(fieldKeyFormat string) (oci_identity_domains.UserExtTermsOfUseConsents, error) {
	result := oci_identity_domains.UserExtTermsOfUseConsents{}
func (s *IdentityDomainsUserResourceCrud) mapToUserExtTrustedUserAgents(fieldKeyFormat string) (oci_identity_domains.UserExtTrustedUserAgents, error) {
	result := oci_identity_domains.UserExtTrustedUserAgents{}
func (s *IdentityDomainsUserResourceCrud) mapToUserIms(fieldKeyFormat string) (oci_identity_domains.UserIms, error) {
	result := oci_identity_domains.UserIms{}
func (s *IdentityDomainsUserResourceCrud) mapToUserName(fieldKeyFormat string) (oci_identity_domains.UserName, error) {
	result := oci_identity_domains.UserName{}
func (s *IdentityDomainsUserResourceCrud) mapToUserPhoneNumbers(fieldKeyFormat string) (oci_identity_domains.UserPhoneNumbers, error) {
	result := oci_identity_domains.UserPhoneNumbers{}
func (s *IdentityDomainsUserResourceCrud) mapToUserPhotos(fieldKeyFormat string) (oci_identity_domains.UserPhotos, error) {
	result := oci_identity_domains.UserPhotos{}
func (s *IdentityDomainsUserResourceCrud) mapToUserRoles(fieldKeyFormat string) (oci_identity_domains.UserRoles, error) {
	result := oci_identity_domains.UserRoles{}
func (s *IdentityDomainsUserResourceCrud) mapToUserX509Certificates(fieldKeyFormat string) (oci_identity_domains.UserX509Certificates, error) {
	result := oci_identity_domains.UserX509Certificates{}
func (s *IdentityDomainsUserResourceCrud) mapToaddresses(fieldKeyFormat string) (oci_identity_domains.Addresses, error) {
	result := oci_identity_domains.Addresses{}
func (s *IdentityDomainsUserResourceCrud) mapTofreeformTags(fieldKeyFormat string) (oci_identity_domains.FreeformTags, error) {
	result := oci_identity_domains.FreeformTags{}
func (s *IdentityDomainsUserResourceCrud) mapTotags(fieldKeyFormat string) (oci_identity_domains.Tags, error) {
	result := oci_identity_domains.Tags{}

=== ./internal/service/identity_domains/identity_domains_oauth_client_certificate_resource.go ===
func IdentityDomainsOAuthClientCertificateResource() *schema.Resource {
	return &schema.Resource{
func createIdentityDomainsOAuthClientCertificate(d *schema.ResourceData, m interface{}) error {
	sync := &IdentityDomainsOAuthClientCertificateResourceCrud{}
func readIdentityDomainsOAuthClientCertificate(d *schema.ResourceData, m interface{}) error {
	sync := &IdentityDomainsOAuthClientCertificateResourceCrud{}
func deleteIdentityDomainsOAuthClientCertificate(d *schema.ResourceData, m interface{}) error {
	sync := &IdentityDomainsOAuthClientCertificateResourceCrud{}
func (s *IdentityDomainsOAuthClientCertificateResourceCrud) ID() string {
	return *s.Res.Id
func (s *IdentityDomainsOAuthClientCertificateResourceCrud) Create() error {
	request := oci_identity_domains.CreateOAuthClientCertificateRequest{}
func (s *IdentityDomainsOAuthClientCertificateResourceCrud) Get() error {
	request := oci_identity_domains.GetOAuthClientCertificateRequest{}
func (s *IdentityDomainsOAuthClientCertificateResourceCrud) Delete() error {
	request := oci_identity_domains.DeleteOAuthClientCertificateRequest{}
func (s *IdentityDomainsOAuthClientCertificateResourceCrud) SetData() error {

func (s *IdentityDomainsOAuthClientCertificateResourceCrud) mapTotags(fieldKeyFormat string) (oci_identity_domains.Tags, error) {
	result := oci_identity_domains.Tags{}

=== ./internal/service/identity_domains/identity_domains_my_pending_approvals_data_source.go ===
func IdentityDomainsMyPendingApprovalsDataSource() *schema.Resource {
	return &schema.Resource{
func readIdentityDomainsMyPendingApprovals(d *schema.ResourceData, m interface{}) error {
	sync := &IdentityDomainsMyPendingApprovalsDataSourceCrud{}
func (s *IdentityDomainsMyPendingApprovalsDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *IdentityDomainsMyPendingApprovalsDataSourceCrud) Get() error {
	request := oci_identity_domains.ListMyPendingApprovalsRequest{}
func (s *IdentityDomainsMyPendingApprovalsDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/identity_domains/identity_domains_cloud_gate_data_source.go ===
func IdentityDomainsCloudGateDataSource() *schema.Resource {
	fieldMap := make(map[string]*schema.Schema)
func readSingularIdentityDomainsCloudGate(d *schema.ResourceData, m interface{}) error {
	sync := &IdentityDomainsCloudGateDataSourceCrud{}
func (s *IdentityDomainsCloudGateDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *IdentityDomainsCloudGateDataSourceCrud) Get() error {
	request := oci_identity_domains.GetCloudGateRequest{}
func (s *IdentityDomainsCloudGateDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/identity_domains/identity_domains_app_role_resource.go ===
func IdentityDomainsAppRoleResource() *schema.Resource {
	return &schema.Resource{
func createIdentityDomainsAppRole(d *schema.ResourceData, m interface{}) error {
	sync := &IdentityDomainsAppRoleResourceCrud{}
func readIdentityDomainsAppRole(d *schema.ResourceData, m interface{}) error {
	sync := &IdentityDomainsAppRoleResourceCrud{}
func deleteIdentityDomainsAppRole(d *schema.ResourceData, m interface{}) error {
	sync := &IdentityDomainsAppRoleResourceCrud{}
func (s *IdentityDomainsAppRoleResourceCrud) ID() string {
	return *s.Res.Id
func (s *IdentityDomainsAppRoleResourceCrud) Create() error {
	request := oci_identity_domains.CreateAppRoleRequest{}
func (s *IdentityDomainsAppRoleResourceCrud) Get() error {
	request := oci_identity_domains.GetAppRoleRequest{}
func (s *IdentityDomainsAppRoleResourceCrud) Delete() error {
	request := oci_identity_domains.DeleteAppRoleRequest{}
func (s *IdentityDomainsAppRoleResourceCrud) SetData() error {

func (s *IdentityDomainsAppRoleResourceCrud) mapToAppRoleApp(fieldKeyFormat string) (oci_identity_domains.AppRoleApp, error) {
	result := oci_identity_domains.AppRoleApp{}
func (s *IdentityDomainsAppRoleResourceCrud) mapTotags(fieldKeyFormat string) (oci_identity_domains.Tags, error) {
	result := oci_identity_domains.Tags{}

=== ./internal/service/identity_domains/identity_domains_notification_setting_resource.go ===
func IdentityDomainsNotificationSettingResource() *schema.Resource {
	return &schema.Resource{
func createIdentityDomainsNotificationSetting(d *schema.ResourceData, m interface{}) error {
	sync := &IdentityDomainsNotificationSettingResourceCrud{}
func readIdentityDomainsNotificationSetting(d *schema.ResourceData, m interface{}) error {
	sync := &IdentityDomainsNotificationSettingResourceCrud{}
func updateIdentityDomainsNotificationSetting(d *schema.ResourceData, m interface{}) error {
	sync := &IdentityDomainsNotificationSettingResourceCrud{}
func deleteIdentityDomainsNotificationSetting(d *schema.ResourceData, m interface{}) error {
	return nil
func (s *IdentityDomainsNotificationSettingResourceCrud) ID() string {
	return *s.Res.Id
func (s *IdentityDomainsNotificationSettingResourceCrud) Create() error {
	request := oci_identity_domains.PutNotificationSettingRequest{}
func (s *IdentityDomainsNotificationSettingResourceCrud) Get() error {
	request := oci_identity_domains.GetNotificationSettingRequest{}
func (s *IdentityDomainsNotificationSettingResourceCrud) Update() error {
	request := oci_identity_domains.PutNotificationSettingRequest{}
func (s *IdentityDomainsNotificationSettingResourceCrud) SetData() error {

func (s *IdentityDomainsNotificationSettingResourceCrud) mapToNotificationSettingsEventSettings(fieldKeyFormat string) (oci_identity_domains.NotificationSettingsEventSettings, error) {
	result := oci_identity_domains.NotificationSettingsEventSettings{}
func (s *IdentityDomainsNotificationSettingResourceCrud) mapToNotificationSettingsFromEmailAddress(fieldKeyFormat string) (oci_identity_domains.NotificationSettingsFromEmailAddress, error) {
	result := oci_identity_domains.NotificationSettingsFromEmailAddress{}
func (s *IdentityDomainsNotificationSettingResourceCrud) mapTotags(fieldKeyFormat string) (oci_identity_domains.Tags, error) {
	result := oci_identity_domains.Tags{}

=== ./internal/service/identity_domains/identity_domains_group_resource.go ===
func IdentityDomainsGroupResource() *schema.Resource {
	return &schema.Resource{
func createIdentityDomainsGroup(d *schema.ResourceData, m interface{}) error {
	sync := &IdentityDomainsGroupResourceCrud{}
func readIdentityDomainsGroup(d *schema.ResourceData, m interface{}) error {
	sync := &IdentityDomainsGroupResourceCrud{}
func updateIdentityDomainsGroup(d *schema.ResourceData, m interface{}) error {
	sync := &IdentityDomainsGroupResourceCrud{}
func deleteIdentityDomainsGroup(d *schema.ResourceData, m interface{}) error {
	sync := &IdentityDomainsGroupResourceCrud{}
func (s *IdentityDomainsGroupResourceCrud) ID() string {
	return *s.Res.Id
func (s *IdentityDomainsGroupResourceCrud) Create() error {
	request := oci_identity_domains.CreateGroupRequest{}
func (s *IdentityDomainsGroupResourceCrud) Get() error {
	request := oci_identity_domains.GetGroupRequest{}
func (s *IdentityDomainsGroupResourceCrud) Update() error {
	request := oci_identity_domains.PutGroupRequest{}
func (s *IdentityDomainsGroupResourceCrud) Delete() error {
	request := oci_identity_domains.DeleteGroupRequest{}
func (s *IdentityDomainsGroupResourceCrud) SetData() error {

func (s *IdentityDomainsGroupResourceCrud) mapToExtensionDynamicGroup(fieldKeyFormat string) (oci_identity_domains.ExtensionDynamicGroup, error) {
	result := oci_identity_domains.ExtensionDynamicGroup{}
func (s *IdentityDomainsGroupResourceCrud) mapToExtensionGroupGroup(fieldKeyFormat string) (oci_identity_domains.ExtensionGroupGroup, error) {
	result := oci_identity_domains.ExtensionGroupGroup{}
func (s *IdentityDomainsGroupResourceCrud) mapToExtensionOCITags(fieldKeyFormat string) (oci_identity_domains.ExtensionOciTags, error) {
	result := oci_identity_domains.ExtensionOciTags{}
func (s *IdentityDomainsGroupResourceCrud) mapToExtensionPosixGroup(fieldKeyFormat string) (oci_identity_domains.ExtensionPosixGroup, error) {
	result := oci_identity_domains.ExtensionPosixGroup{}
func (s *IdentityDomainsGroupResourceCrud) mapToExtensionRequestableGroup(fieldKeyFormat string) (oci_identity_domains.ExtensionRequestableGroup, error) {
	result := oci_identity_domains.ExtensionRequestableGroup{}
func (s *IdentityDomainsGroupResourceCrud) mapToGroupExtAppRoles(fieldKeyFormat string) (oci_identity_domains.GroupExtAppRoles, error) {
	result := oci_identity_domains.GroupExtAppRoles{}
func (s *IdentityDomainsGroupResourceCrud) mapToGroupExtDomainLevelSchemaNames(fieldKeyFormat string) (oci_identity_domains.GroupExtDomainLevelSchemaNames, error) {
	result := oci_identity_domains.GroupExtDomainLevelSchemaNames{}
func (s *IdentityDomainsGroupResourceCrud) mapToGroupExtGrants(fieldKeyFormat string) (oci_identity_domains.GroupExtGrants, error) {
	result := oci_identity_domains.GroupExtGrants{}
func (s *IdentityDomainsGroupResourceCrud) mapToGroupExtInstanceLevelSchemaNames(fieldKeyFormat string) (oci_identity_domains.GroupExtInstanceLevelSchemaNames, error) {
	result := oci_identity_domains.GroupExtInstanceLevelSchemaNames{}
func (s *IdentityDomainsGroupResourceCrud) mapToGroupExtOwners(fieldKeyFormat string) (oci_identity_domains.GroupExtOwners, error) {
	result := oci_identity_domains.GroupExtOwners{}
func (s *IdentityDomainsGroupResourceCrud) mapToGroupExtPasswordPolicy(fieldKeyFormat string) (oci_identity_domains.GroupExtPasswordPolicy, error) {
	result := oci_identity_domains.GroupExtPasswordPolicy{}
func (s *IdentityDomainsGroupResourceCrud) mapToGroupExtSyncedFromApp(fieldKeyFormat string) (oci_identity_domains.GroupExtSyncedFromApp, error) {
	result := oci_identity_domains.GroupExtSyncedFromApp{}
func (s *IdentityDomainsGroupResourceCrud) mapToGroupMembers(fieldKeyFormat string) (oci_identity_domains.GroupMembers, error) {
	result := oci_identity_domains.GroupMembers{}
func (s *IdentityDomainsGroupResourceCrud) mapTofreeformTags(fieldKeyFormat string) (oci_identity_domains.FreeformTags, error) {
	result := oci_identity_domains.FreeformTags{}
func (s *IdentityDomainsGroupResourceCrud) mapTodefinedTags(fieldKeyFormat string) (oci_identity_domains.DefinedTags, error) {
	result := oci_identity_domains.DefinedTags{}
func (s *IdentityDomainsGroupResourceCrud) mapTotags(fieldKeyFormat string) (oci_identity_domains.Tags, error) {
	result := oci_identity_domains.Tags{}

=== ./internal/service/identity_domains/identity_domains_approval_workflow_step_data_source.go ===
func IdentityDomainsApprovalWorkflowStepDataSource() *schema.Resource {
	fieldMap := make(map[string]*schema.Schema)
func readSingularIdentityDomainsApprovalWorkflowStep(d *schema.ResourceData, m interface{}) error {
	sync := &IdentityDomainsApprovalWorkflowStepDataSourceCrud{}
func (s *IdentityDomainsApprovalWorkflowStepDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *IdentityDomainsApprovalWorkflowStepDataSourceCrud) Get() error {
	request := oci_identity_domains.GetApprovalWorkflowStepRequest{}
func (s *IdentityDomainsApprovalWorkflowStepDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/identity_domains/identity_domains_cloud_gates_data_source.go ===
func IdentityDomainsCloudGatesDataSource() *schema.Resource {
	return &schema.Resource{
func readIdentityDomainsCloudGates(d *schema.ResourceData, m interface{}) error {
	sync := &IdentityDomainsCloudGatesDataSourceCrud{}
func (s *IdentityDomainsCloudGatesDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *IdentityDomainsCloudGatesDataSourceCrud) Get() error {
	request := oci_identity_domains.ListCloudGatesRequest{}
func (s *IdentityDomainsCloudGatesDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/identity_domains/identity_domains_password_policies_data_source.go ===
func IdentityDomainsPasswordPoliciesDataSource() *schema.Resource {
	return &schema.Resource{
func readIdentityDomainsPasswordPolicies(d *schema.ResourceData, m interface{}) error {
	sync := &IdentityDomainsPasswordPoliciesDataSourceCrud{}
func (s *IdentityDomainsPasswordPoliciesDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *IdentityDomainsPasswordPoliciesDataSourceCrud) Get() error {
	request := oci_identity_domains.ListPasswordPoliciesRequest{}
func (s *IdentityDomainsPasswordPoliciesDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/identity_domains/identity_domains_auth_token_resource.go ===
func IdentityDomainsAuthTokenResource() *schema.Resource {
	return &schema.Resource{
func createIdentityDomainsAuthToken(d *schema.ResourceData, m interface{}) error {
	sync := &IdentityDomainsAuthTokenResourceCrud{}
func readIdentityDomainsAuthToken(d *schema.ResourceData, m interface{}) error {
	sync := &IdentityDomainsAuthTokenResourceCrud{}
func deleteIdentityDomainsAuthToken(d *schema.ResourceData, m interface{}) error {
	sync := &IdentityDomainsAuthTokenResourceCrud{}
func (s *IdentityDomainsAuthTokenResourceCrud) ID() string {
	return *s.Res.Id
func (s *IdentityDomainsAuthTokenResourceCrud) Create() error {
	request := oci_identity_domains.CreateAuthTokenRequest{}
func (s *IdentityDomainsAuthTokenResourceCrud) Get() error {
	request := oci_identity_domains.GetAuthTokenRequest{}
func (s *IdentityDomainsAuthTokenResourceCrud) Delete() error {
	request := oci_identity_domains.DeleteAuthTokenRequest{}
func (s *IdentityDomainsAuthTokenResourceCrud) SetData() error {

func (s *IdentityDomainsAuthTokenResourceCrud) mapToAuthTokenUser(fieldKeyFormat string) (oci_identity_domains.AuthTokenUser, error) {
	result := oci_identity_domains.AuthTokenUser{}
func (s *IdentityDomainsAuthTokenResourceCrud) mapToExtensionSelfChangeUser(fieldKeyFormat string) (oci_identity_domains.ExtensionSelfChangeUser, error) {
	result := oci_identity_domains.ExtensionSelfChangeUser{}
func (s *IdentityDomainsAuthTokenResourceCrud) mapTotags(fieldKeyFormat string) (oci_identity_domains.Tags, error) {
	result := oci_identity_domains.Tags{}

=== ./internal/service/identity_domains/identity_domains_identity_propagation_trusts_data_source.go ===
func IdentityDomainsIdentityPropagationTrustsDataSource() *schema.Resource {
	return &schema.Resource{
func readIdentityDomainsIdentityPropagationTrusts(d *schema.ResourceData, m interface{}) error {
	sync := &IdentityDomainsIdentityPropagationTrustsDataSourceCrud{}
func (s *IdentityDomainsIdentityPropagationTrustsDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *IdentityDomainsIdentityPropagationTrustsDataSourceCrud) Get() error {
	request := oci_identity_domains.ListIdentityPropagationTrustsRequest{}
func (s *IdentityDomainsIdentityPropagationTrustsDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/identity_domains/identity_domains_my_api_keys_data_source.go ===
func IdentityDomainsMyApiKeysDataSource() *schema.Resource {
	return &schema.Resource{
func readIdentityDomainsMyApiKeys(d *schema.ResourceData, m interface{}) error {
	sync := &IdentityDomainsMyApiKeysDataSourceCrud{}
func (s *IdentityDomainsMyApiKeysDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *IdentityDomainsMyApiKeysDataSourceCrud) Get() error {
	request := oci_identity_domains.ListMyApiKeysRequest{}
func (s *IdentityDomainsMyApiKeysDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/identity_domains/identity_domains_conditions_data_source.go ===
func IdentityDomainsConditionsDataSource() *schema.Resource {
	return &schema.Resource{
func readIdentityDomainsConditions(d *schema.ResourceData, m interface{}) error {
	sync := &IdentityDomainsConditionsDataSourceCrud{}
func (s *IdentityDomainsConditionsDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *IdentityDomainsConditionsDataSourceCrud) Get() error {
	request := oci_identity_domains.ListConditionsRequest{}
func (s *IdentityDomainsConditionsDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/identity_domains/identity_domains_my_support_account_resource.go ===
func IdentityDomainsMySupportAccountResource() *schema.Resource {
	return &schema.Resource{
func createIdentityDomainsMySupportAccount(d *schema.ResourceData, m interface{}) error {
	sync := &IdentityDomainsMySupportAccountResourceCrud{}
func readIdentityDomainsMySupportAccount(d *schema.ResourceData, m interface{}) error {
	sync := &IdentityDomainsMySupportAccountResourceCrud{}
func deleteIdentityDomainsMySupportAccount(d *schema.ResourceData, m interface{}) error {
	sync := &IdentityDomainsMySupportAccountResourceCrud{}
func (s *IdentityDomainsMySupportAccountResourceCrud) ID() string {
	return *s.Res.Id
func (s *IdentityDomainsMySupportAccountResourceCrud) Create() error {
	request := oci_identity_domains.CreateMySupportAccountRequest{}
func (s *IdentityDomainsMySupportAccountResourceCrud) Get() error {
	request := oci_identity_domains.GetMySupportAccountRequest{}
func (s *IdentityDomainsMySupportAccountResourceCrud) Delete() error {
	request := oci_identity_domains.DeleteMySupportAccountRequest{}
func (s *IdentityDomainsMySupportAccountResourceCrud) SetData() error {

func (s *IdentityDomainsMySupportAccountResourceCrud) mapToMySupportAccountUser(fieldKeyFormat string) (oci_identity_domains.MySupportAccountUser, error) {
	result := oci_identity_domains.MySupportAccountUser{}
func (s *IdentityDomainsMySupportAccountResourceCrud) mapTotags(fieldKeyFormat string) (oci_identity_domains.Tags, error) {
	result := oci_identity_domains.Tags{}

=== ./internal/service/identity_domains/identity_domains_rule_data_source.go ===
func IdentityDomainsRuleDataSource() *schema.Resource {
	fieldMap := make(map[string]*schema.Schema)
func readSingularIdentityDomainsRule(d *schema.ResourceData, m interface{}) error {
	sync := &IdentityDomainsRuleDataSourceCrud{}
func (s *IdentityDomainsRuleDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *IdentityDomainsRuleDataSourceCrud) Get() error {
	request := oci_identity_domains.GetRuleRequest{}
func (s *IdentityDomainsRuleDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/identity_domains/identity_domains_my_support_account_data_source.go ===
func IdentityDomainsMySupportAccountDataSource() *schema.Resource {
	fieldMap := make(map[string]*schema.Schema)
func readSingularIdentityDomainsMySupportAccount(d *schema.ResourceData, m interface{}) error {
	sync := &IdentityDomainsMySupportAccountDataSourceCrud{}
func (s *IdentityDomainsMySupportAccountDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *IdentityDomainsMySupportAccountDataSourceCrud) Get() error {
	request := oci_identity_domains.GetMySupportAccountRequest{}
func (s *IdentityDomainsMySupportAccountDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/identity_domains/identity_domains_security_question_setting_resource.go ===
func IdentityDomainsSecurityQuestionSettingResource() *schema.Resource {
	return &schema.Resource{
func createIdentityDomainsSecurityQuestionSetting(d *schema.ResourceData, m interface{}) error {
	sync := &IdentityDomainsSecurityQuestionSettingResourceCrud{}
func readIdentityDomainsSecurityQuestionSetting(d *schema.ResourceData, m interface{}) error {
	sync := &IdentityDomainsSecurityQuestionSettingResourceCrud{}
func updateIdentityDomainsSecurityQuestionSetting(d *schema.ResourceData, m interface{}) error {
	sync := &IdentityDomainsSecurityQuestionSettingResourceCrud{}
func deleteIdentityDomainsSecurityQuestionSetting(d *schema.ResourceData, m interface{}) error {
	return nil
func (s *IdentityDomainsSecurityQuestionSettingResourceCrud) ID() string {
	return *s.Res.Id
func (s *IdentityDomainsSecurityQuestionSettingResourceCrud) Create() error {
	request := oci_identity_domains.PutSecurityQuestionSettingRequest{}
func (s *IdentityDomainsSecurityQuestionSettingResourceCrud) Get() error {
	request := oci_identity_domains.GetSecurityQuestionSettingRequest{}
func (s *IdentityDomainsSecurityQuestionSettingResourceCrud) Update() error {
	request := oci_identity_domains.PutSecurityQuestionSettingRequest{}
func (s *IdentityDomainsSecurityQuestionSettingResourceCrud) SetData() error {

func (s *IdentityDomainsSecurityQuestionSettingResourceCrud) mapTotags(fieldKeyFormat string) (oci_identity_domains.Tags, error) {
	result := oci_identity_domains.Tags{}

=== ./internal/service/identity_domains/identity_domains_user_attributes_settings_data_source.go ===
func IdentityDomainsUserAttributesSettingsDataSource() *schema.Resource {
	return &schema.Resource{
func readIdentityDomainsUserAttributesSettings(d *schema.ResourceData, m interface{}) error {
	sync := &IdentityDomainsUserAttributesSettingsDataSourceCrud{}
func (s *IdentityDomainsUserAttributesSettingsDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *IdentityDomainsUserAttributesSettingsDataSourceCrud) Get() error {
	request := oci_identity_domains.ListUserAttributesSettingsRequest{}
func (s *IdentityDomainsUserAttributesSettingsDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/identity_domains/identity_domains_dynamic_resource_groups_data_source.go ===
func IdentityDomainsDynamicResourceGroupsDataSource() *schema.Resource {
	return &schema.Resource{
func readIdentityDomainsDynamicResourceGroups(d *schema.ResourceData, m interface{}) error {
	sync := &IdentityDomainsDynamicResourceGroupsDataSourceCrud{}
func (s *IdentityDomainsDynamicResourceGroupsDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *IdentityDomainsDynamicResourceGroupsDataSourceCrud) Get() error {
	request := oci_identity_domains.ListDynamicResourceGroupsRequest{}
func (s *IdentityDomainsDynamicResourceGroupsDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/identity_domains/identity_domains_export.go ===
func processIdentityDomainsResources(ctx *tf_export.ResourceDiscoveryContext, resources []*tf_export.OCIResource) ([]*tf_export.OCIResource, error) {
	for _, resource := range resources {
func getResourceUrl(resource *tf_export.OCIResource) (string, error) {
	idcsEndpoint, ok := resource.SourceAttributes["url"].(string)
func getResourceId(resource *tf_export.OCIResource) (string, error) {
	var resourceMap map[string]interface{} = resource.RawResource.(map[string]interface{})
func getDomainResourceInfo(resource *tf_export.OCIResource) (string, string, error) {
	idcsEndpoint, err := getResourceUrl(resource.Parent)
func getGetIdFn(resourceName string) func(*tf_export.OCIResource) (string, error) {
	return func(resource *tf_export.OCIResource) (string, error) {
func findUserSubResources(ctx *tf_export.ResourceDiscoveryContext, tfMeta *tf_export.TerraformResourceAssociation, parent *tf_export.OCIResource, resourceGraph *tf_export.TerraformResourceGraph) ([]*tf_export.OCIResource, error) {
	licenseType, ok := parent.Parent.SourceAttributes["license_type"].(string)
func processUserSubResources(ctx *tf_export.ResourceDiscoveryContext, resources []*tf_export.OCIResource) ([]*tf_export.OCIResource, error) {
	for _, resource := range resources {
func getUserSubResourceGetIdFn(resourceName string) func(*tf_export.OCIResource) (string, error) {
	return func(resource *tf_export.OCIResource) (string, error) {
func getFindMyResources(resourceName string) func(*tf_export.ResourceDiscoveryContext, *tf_export.TerraformResourceAssociation, *tf_export.OCIResource, *tf_export.TerraformResourceGraph) ([]*tf_export.OCIResource, error) {
	return func(ctx *tf_export.ResourceDiscoveryContext, tfMeta *tf_export.TerraformResourceAssociation, parent *tf_export.OCIResource, resourceGraph *tf_export.TerraformResourceGraph) ([]*tf_export.OCIResource, error) {

=== ./internal/service/identity_domains/identity_domains_authentication_factor_setting_data_source.go ===
func IdentityDomainsAuthenticationFactorSettingDataSource() *schema.Resource {
	fieldMap := make(map[string]*schema.Schema)
func readSingularIdentityDomainsAuthenticationFactorSetting(d *schema.ResourceData, m interface{}) error {
	sync := &IdentityDomainsAuthenticationFactorSettingDataSourceCrud{}
func (s *IdentityDomainsAuthenticationFactorSettingDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *IdentityDomainsAuthenticationFactorSettingDataSourceCrud) Get() error {
	request := oci_identity_domains.GetAuthenticationFactorSettingRequest{}
func (s *IdentityDomainsAuthenticationFactorSettingDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/identity_domains/identity_domains_grant_data_source.go ===
func IdentityDomainsGrantDataSource() *schema.Resource {
	fieldMap := make(map[string]*schema.Schema)
func readSingularIdentityDomainsGrant(d *schema.ResourceData, m interface{}) error {
	sync := &IdentityDomainsGrantDataSourceCrud{}
func (s *IdentityDomainsGrantDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *IdentityDomainsGrantDataSourceCrud) Get() error {
	request := oci_identity_domains.GetGrantRequest{}
func (s *IdentityDomainsGrantDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/identity_domains/identity_domains_cloud_gate_servers_data_source.go ===
func IdentityDomainsCloudGateServersDataSource() *schema.Resource {
	return &schema.Resource{
func readIdentityDomainsCloudGateServers(d *schema.ResourceData, m interface{}) error {
	sync := &IdentityDomainsCloudGateServersDataSourceCrud{}
func (s *IdentityDomainsCloudGateServersDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *IdentityDomainsCloudGateServersDataSourceCrud) Get() error {
	request := oci_identity_domains.ListCloudGateServersRequest{}
func (s *IdentityDomainsCloudGateServersDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/identity_domains/identity_domains_my_auth_tokens_data_source.go ===
func IdentityDomainsMyAuthTokensDataSource() *schema.Resource {
	return &schema.Resource{
func readIdentityDomainsMyAuthTokens(d *schema.ResourceData, m interface{}) error {
	sync := &IdentityDomainsMyAuthTokensDataSourceCrud{}
func (s *IdentityDomainsMyAuthTokensDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *IdentityDomainsMyAuthTokensDataSourceCrud) Get() error {
	request := oci_identity_domains.ListMyAuthTokensRequest{}
func (s *IdentityDomainsMyAuthTokensDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/identity_domains/identity_domains_setting_data_source.go ===
func IdentityDomainsSettingDataSource() *schema.Resource {
	fieldMap := make(map[string]*schema.Schema)
func readSingularIdentityDomainsSetting(d *schema.ResourceData, m interface{}) error {
	sync := &IdentityDomainsSettingDataSourceCrud{}
func (s *IdentityDomainsSettingDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *IdentityDomainsSettingDataSourceCrud) Get() error {
	request := oci_identity_domains.GetSettingRequest{}
func (s *IdentityDomainsSettingDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/identity_domains/identity_domains_identity_provider_resource.go ===
func IdentityDomainsIdentityProviderResource() *schema.Resource {
	return &schema.Resource{
func createIdentityDomainsIdentityProvider(d *schema.ResourceData, m interface{}) error {
	sync := &IdentityDomainsIdentityProviderResourceCrud{}
func readIdentityDomainsIdentityProvider(d *schema.ResourceData, m interface{}) error {
	sync := &IdentityDomainsIdentityProviderResourceCrud{}
func updateIdentityDomainsIdentityProvider(d *schema.ResourceData, m interface{}) error {
	sync := &IdentityDomainsIdentityProviderResourceCrud{}
func deleteIdentityDomainsIdentityProvider(d *schema.ResourceData, m interface{}) error {
	sync := &IdentityDomainsIdentityProviderResourceCrud{}
func (s *IdentityDomainsIdentityProviderResourceCrud) ID() string {
	return *s.Res.Id
func (s *IdentityDomainsIdentityProviderResourceCrud) Create() error {
	request := oci_identity_domains.CreateIdentityProviderRequest{}
func (s *IdentityDomainsIdentityProviderResourceCrud) Get() error {
	request := oci_identity_domains.GetIdentityProviderRequest{}
func (s *IdentityDomainsIdentityProviderResourceCrud) Update() error {
	request := oci_identity_domains.PutIdentityProviderRequest{}
func (s *IdentityDomainsIdentityProviderResourceCrud) Delete() error {
	request := oci_identity_domains.DeleteIdentityProviderRequest{}
func (s *IdentityDomainsIdentityProviderResourceCrud) SetData() error {

func (s *IdentityDomainsIdentityProviderResourceCrud) mapToExtensionSocialIdentityProvider(fieldKeyFormat string) (oci_identity_domains.ExtensionSocialIdentityProvider, error) {
	result := oci_identity_domains.ExtensionSocialIdentityProvider{}
func (s *IdentityDomainsIdentityProviderResourceCrud) mapToExtensionX509IdentityProvider(fieldKeyFormat string) (oci_identity_domains.ExtensionX509IdentityProvider, error) {
	result := oci_identity_domains.ExtensionX509IdentityProvider{}
func (s *IdentityDomainsIdentityProviderResourceCrud) mapToIdentityProviderCorrelationPolicy(fieldKeyFormat string) (oci_identity_domains.IdentityProviderCorrelationPolicy, error) {
	result := oci_identity_domains.IdentityProviderCorrelationPolicy{}
func (s *IdentityDomainsIdentityProviderResourceCrud) mapToIdentityProviderJitProvAssignedGroups(fieldKeyFormat string) (oci_identity_domains.IdentityProviderJitProvAssignedGroups, error) {
	result := oci_identity_domains.IdentityProviderJitProvAssignedGroups{}
func (s *IdentityDomainsIdentityProviderResourceCrud) mapToIdentityProviderJitUserProvAssignedGroups(fieldKeyFormat string) (oci_identity_domains.IdentityProviderJitUserProvAssignedGroups, error) {
	result := oci_identity_domains.IdentityProviderJitUserProvAssignedGroups{}
func (s *IdentityDomainsIdentityProviderResourceCrud) mapToIdentityProviderJitUserProvAttributes(fieldKeyFormat string) (oci_identity_domains.IdentityProviderJitUserProvAttributes, error) {
	result := oci_identity_domains.IdentityProviderJitUserProvAttributes{}
func (s *IdentityDomainsIdentityProviderResourceCrud) mapToIdentityProviderJitUserProvGroupMappings(fieldKeyFormat string) (oci_identity_domains.IdentityProviderJitUserProvGroupMappings, error) {
	result := oci_identity_domains.IdentityProviderJitUserProvGroupMappings{}
func (s *IdentityDomainsIdentityProviderResourceCrud) mapTotags(fieldKeyFormat string) (oci_identity_domains.Tags, error) {
	result := oci_identity_domains.Tags{}

=== ./internal/service/identity_domains/identity_domains_account_recovery_setting_resource.go ===
func IdentityDomainsAccountRecoverySettingResource() *schema.Resource {
	return &schema.Resource{
func createIdentityDomainsAccountRecoverySetting(d *schema.ResourceData, m interface{}) error {
	sync := &IdentityDomainsAccountRecoverySettingResourceCrud{}
func readIdentityDomainsAccountRecoverySetting(d *schema.ResourceData, m interface{}) error {
	sync := &IdentityDomainsAccountRecoverySettingResourceCrud{}
func updateIdentityDomainsAccountRecoverySetting(d *schema.ResourceData, m interface{}) error {
	sync := &IdentityDomainsAccountRecoverySettingResourceCrud{}
func deleteIdentityDomainsAccountRecoverySetting(d *schema.ResourceData, m interface{}) error {
	return nil
func (s *IdentityDomainsAccountRecoverySettingResourceCrud) ID() string {
	return *s.Res.Id
func (s *IdentityDomainsAccountRecoverySettingResourceCrud) Create() error {
	request := oci_identity_domains.PutAccountRecoverySettingRequest{}
func (s *IdentityDomainsAccountRecoverySettingResourceCrud) Get() error {
	request := oci_identity_domains.GetAccountRecoverySettingRequest{}
func (s *IdentityDomainsAccountRecoverySettingResourceCrud) Update() error {
	request := oci_identity_domains.PutAccountRecoverySettingRequest{}
func (s *IdentityDomainsAccountRecoverySettingResourceCrud) SetData() error {

func (s *IdentityDomainsAccountRecoverySettingResourceCrud) mapToTags(fieldKeyFormat string) (oci_identity_domains.Tags, error) {
	result := oci_identity_domains.Tags{}

=== ./internal/service/identity_domains/identity_domains_approval_workflows_data_source.go ===
func IdentityDomainsApprovalWorkflowsDataSource() *schema.Resource {
	return &schema.Resource{
func readIdentityDomainsApprovalWorkflows(d *schema.ResourceData, m interface{}) error {
	sync := &IdentityDomainsApprovalWorkflowsDataSourceCrud{}
func (s *IdentityDomainsApprovalWorkflowsDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *IdentityDomainsApprovalWorkflowsDataSourceCrud) Get() error {
	request := oci_identity_domains.ListApprovalWorkflowsRequest{}
func (s *IdentityDomainsApprovalWorkflowsDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/identity_domains/identity_domains_group_data_source.go ===
func IdentityDomainsGroupDataSource() *schema.Resource {
	fieldMap := make(map[string]*schema.Schema)
func readSingularIdentityDomainsGroup(d *schema.ResourceData, m interface{}) error {
	sync := &IdentityDomainsGroupDataSourceCrud{}
func (s *IdentityDomainsGroupDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *IdentityDomainsGroupDataSourceCrud) Get() error {
	request := oci_identity_domains.GetGroupRequest{}
func (s *IdentityDomainsGroupDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/identity_domains/identity_domains_oauth_client_certificate_data_source.go ===
func IdentityDomainsOAuthClientCertificateDataSource() *schema.Resource {
	fieldMap := make(map[string]*schema.Schema)
func readSingularIdentityDomainsOAuthClientCertificate(d *schema.ResourceData, m interface{}) error {
	sync := &IdentityDomainsOAuthClientCertificateDataSourceCrud{}
func (s *IdentityDomainsOAuthClientCertificateDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *IdentityDomainsOAuthClientCertificateDataSourceCrud) Get() error {
	request := oci_identity_domains.GetOAuthClientCertificateRequest{}
func (s *IdentityDomainsOAuthClientCertificateDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/identity_domains/identity_domains_branding_settings_data_source.go ===
func IdentityDomainsBrandingSettingsDataSource() *schema.Resource {
	return &schema.Resource{
func readIdentityDomainsBrandingSettings(d *schema.ResourceData, m interface{}) error {
	sync := &IdentityDomainsBrandingSettingsDataSourceCrud{}
func (s *IdentityDomainsBrandingSettingsDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *IdentityDomainsBrandingSettingsDataSourceCrud) Get() error {
	request := oci_identity_domains.ListBrandingSettingsRequest{}
func (s *IdentityDomainsBrandingSettingsDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/identity_domains/identity_domains_my_completed_approval_data_source.go ===
func IdentityDomainsMyCompletedApprovalDataSource() *schema.Resource {
	return &schema.Resource{
func readSingularIdentityDomainsMyCompletedApproval(d *schema.ResourceData, m interface{}) error {
	sync := &IdentityDomainsMyCompletedApprovalDataSourceCrud{}
func (s *IdentityDomainsMyCompletedApprovalDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *IdentityDomainsMyCompletedApprovalDataSourceCrud) Get() error {
	request := oci_identity_domains.GetMyCompletedApprovalRequest{}
func (s *IdentityDomainsMyCompletedApprovalDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/identity_domains/identity_domains_security_questions_data_source.go ===
func IdentityDomainsSecurityQuestionsDataSource() *schema.Resource {
	return &schema.Resource{
func readIdentityDomainsSecurityQuestions(d *schema.ResourceData, m interface{}) error {
	sync := &IdentityDomainsSecurityQuestionsDataSourceCrud{}
func (s *IdentityDomainsSecurityQuestionsDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *IdentityDomainsSecurityQuestionsDataSourceCrud) Get() error {
	request := oci_identity_domains.ListSecurityQuestionsRequest{}
func (s *IdentityDomainsSecurityQuestionsDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/identity_domains/identity_domains_my_smtp_credential_data_source.go ===
func IdentityDomainsMySmtpCredentialDataSource() *schema.Resource {
	fieldMap := make(map[string]*schema.Schema)
func readSingularIdentityDomainsMySmtpCredential(d *schema.ResourceData, m interface{}) error {
	sync := &IdentityDomainsMySmtpCredentialDataSourceCrud{}
func (s *IdentityDomainsMySmtpCredentialDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *IdentityDomainsMySmtpCredentialDataSourceCrud) Get() error {
	request := oci_identity_domains.GetMySmtpCredentialRequest{}
func (s *IdentityDomainsMySmtpCredentialDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/identity_domains/identity_domains_my_pending_approval_data_source.go ===
func IdentityDomainsMyPendingApprovalDataSource() *schema.Resource {
	return &schema.Resource{
func readSingularIdentityDomainsMyPendingApproval(d *schema.ResourceData, m interface{}) error {
	sync := &IdentityDomainsMyPendingApprovalDataSourceCrud{}
func (s *IdentityDomainsMyPendingApprovalDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *IdentityDomainsMyPendingApprovalDataSourceCrud) Get() error {
	request := oci_identity_domains.GetMyPendingApprovalRequest{}
func (s *IdentityDomainsMyPendingApprovalDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/identity_domains/identity_domains_my_api_key_data_source.go ===
func IdentityDomainsMyApiKeyDataSource() *schema.Resource {
	fieldMap := make(map[string]*schema.Schema)
func readSingularIdentityDomainsMyApiKey(d *schema.ResourceData, m interface{}) error {
	sync := &IdentityDomainsMyApiKeyDataSourceCrud{}
func (s *IdentityDomainsMyApiKeyDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *IdentityDomainsMyApiKeyDataSourceCrud) Get() error {
	request := oci_identity_domains.GetMyApiKeyRequest{}
func (s *IdentityDomainsMyApiKeyDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/identity_domains/identity_domains_authentication_factor_setting_resource.go ===
func IdentityDomainsAuthenticationFactorSettingResource() *schema.Resource {
	return &schema.Resource{
func createIdentityDomainsAuthenticationFactorSetting(d *schema.ResourceData, m interface{}) error {
	sync := &IdentityDomainsAuthenticationFactorSettingResourceCrud{}
func readIdentityDomainsAuthenticationFactorSetting(d *schema.ResourceData, m interface{}) error {
	sync := &IdentityDomainsAuthenticationFactorSettingResourceCrud{}
func updateIdentityDomainsAuthenticationFactorSetting(d *schema.ResourceData, m interface{}) error {
	sync := &IdentityDomainsAuthenticationFactorSettingResourceCrud{}
func deleteIdentityDomainsAuthenticationFactorSetting(d *schema.ResourceData, m interface{}) error {
	return nil
func (s *IdentityDomainsAuthenticationFactorSettingResourceCrud) ID() string {
	return *s.Res.Id
func (s *IdentityDomainsAuthenticationFactorSettingResourceCrud) Create() error {
	request := oci_identity_domains.PutAuthenticationFactorSettingRequest{}
func (s *IdentityDomainsAuthenticationFactorSettingResourceCrud) Get() error {
	request := oci_identity_domains.GetAuthenticationFactorSettingRequest{}
func (s *IdentityDomainsAuthenticationFactorSettingResourceCrud) Update() error {
	request := oci_identity_domains.PutAuthenticationFactorSettingRequest{}
func (s *IdentityDomainsAuthenticationFactorSettingResourceCrud) SetData() error {

func (s *IdentityDomainsAuthenticationFactorSettingResourceCrud) mapToAuthenticationFactorSettingsBypassCodeSettings(fieldKeyFormat string) (oci_identity_domains.AuthenticationFactorSettingsBypassCodeSettings, error) {
	result := oci_identity_domains.AuthenticationFactorSettingsBypassCodeSettings{}
func (s *IdentityDomainsAuthenticationFactorSettingResourceCrud) mapToAuthenticationFactorSettingsClientAppSettings(fieldKeyFormat string) (oci_identity_domains.AuthenticationFactorSettingsClientAppSettings, error) {
	result := oci_identity_domains.AuthenticationFactorSettingsClientAppSettings{}
func (s *IdentityDomainsAuthenticationFactorSettingResourceCrud) mapToAuthenticationFactorSettingsCompliancePolicy(fieldKeyFormat string) (oci_identity_domains.AuthenticationFactorSettingsCompliancePolicy, error) {
	result := oci_identity_domains.AuthenticationFactorSettingsCompliancePolicy{}
func (s *IdentityDomainsAuthenticationFactorSettingResourceCrud) mapToAuthenticationFactorSettingsDuoSecuritySettings(fieldKeyFormat string) (oci_identity_domains.AuthenticationFactorSettingsDuoSecuritySettings, error) {
	result := oci_identity_domains.AuthenticationFactorSettingsDuoSecuritySettings{}
func (s *IdentityDomainsAuthenticationFactorSettingResourceCrud) mapToAuthenticationFactorSettingsEmailSettings(fieldKeyFormat string) (oci_identity_domains.AuthenticationFactorSettingsEmailSettings, error) {
	result := oci_identity_domains.AuthenticationFactorSettingsEmailSettings{}
func (s *IdentityDomainsAuthenticationFactorSettingResourceCrud) mapToAuthenticationFactorSettingsEndpointRestrictions(fieldKeyFormat string) (oci_identity_domains.AuthenticationFactorSettingsEndpointRestrictions, error) {
	result := oci_identity_domains.AuthenticationFactorSettingsEndpointRestrictions{}
func (s *IdentityDomainsAuthenticationFactorSettingResourceCrud) mapToAuthenticationFactorSettingsIdentityStoreSettings(fieldKeyFormat string) (oci_identity_domains.AuthenticationFactorSettingsIdentityStoreSettings, error) {
	result := oci_identity_domains.AuthenticationFactorSettingsIdentityStoreSettings{}
func (s *IdentityDomainsAuthenticationFactorSettingResourceCrud) mapToAuthenticationFactorSettingsNotificationSettings(fieldKeyFormat string) (oci_identity_domains.AuthenticationFactorSettingsNotificationSettings, error) {
	result := oci_identity_domains.AuthenticationFactorSettingsNotificationSettings{}
func (s *IdentityDomainsAuthenticationFactorSettingResourceCrud) mapToAuthenticationFactorSettingsThirdPartyFactor(fieldKeyFormat string) (oci_identity_domains.AuthenticationFactorSettingsThirdPartyFactor, error) {
	result := oci_identity_domains.AuthenticationFactorSettingsThirdPartyFactor{}
func (s *IdentityDomainsAuthenticationFactorSettingResourceCrud) mapToAuthenticationFactorSettingsTotpSettings(fieldKeyFormat string) (oci_identity_domains.AuthenticationFactorSettingsTotpSettings, error) {
	result := oci_identity_domains.AuthenticationFactorSettingsTotpSettings{}
func (s *IdentityDomainsAuthenticationFactorSettingResourceCrud) mapToExtensionFidoAuthenticationFactorSettings(fieldKeyFormat string) (oci_identity_domains.ExtensionFidoAuthenticationFactorSettings, error) {
	result := oci_identity_domains.ExtensionFidoAuthenticationFactorSettings{}
func (s *IdentityDomainsAuthenticationFactorSettingResourceCrud) mapToExtensionThirdPartyAuthenticationFactorSettings(fieldKeyFormat string) (oci_identity_domains.ExtensionThirdPartyAuthenticationFactorSettings, error) {
	result := oci_identity_domains.ExtensionThirdPartyAuthenticationFactorSettings{}
func (s *IdentityDomainsAuthenticationFactorSettingResourceCrud) mapTotags(fieldKeyFormat string) (oci_identity_domains.Tags, error) {
	result := oci_identity_domains.Tags{}

=== ./internal/service/identity_domains/identity_domains_approval_workflow_steps_data_source.go ===
func IdentityDomainsApprovalWorkflowStepsDataSource() *schema.Resource {
	return &schema.Resource{
func readIdentityDomainsApprovalWorkflowSteps(d *schema.ResourceData, m interface{}) error {
	sync := &IdentityDomainsApprovalWorkflowStepsDataSourceCrud{}
func (s *IdentityDomainsApprovalWorkflowStepsDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *IdentityDomainsApprovalWorkflowStepsDataSourceCrud) Get() error {
	request := oci_identity_domains.ListApprovalWorkflowStepsRequest{}
func (s *IdentityDomainsApprovalWorkflowStepsDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/identity_domains/identity_domains_customer_secret_key_data_source.go ===
func IdentityDomainsCustomerSecretKeyDataSource() *schema.Resource {
	fieldMap := make(map[string]*schema.Schema)
func readSingularIdentityDomainsCustomerSecretKey(d *schema.ResourceData, m interface{}) error {
	sync := &IdentityDomainsCustomerSecretKeyDataSourceCrud{}
func (s *IdentityDomainsCustomerSecretKeyDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *IdentityDomainsCustomerSecretKeyDataSourceCrud) Get() error {
	request := oci_identity_domains.GetCustomerSecretKeyRequest{}
func (s *IdentityDomainsCustomerSecretKeyDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/identity_domains/identity_domains_rule_resource.go ===
func IdentityDomainsRuleResource() *schema.Resource {
	return &schema.Resource{
func createIdentityDomainsRule(d *schema.ResourceData, m interface{}) error {
	sync := &IdentityDomainsRuleResourceCrud{}
func readIdentityDomainsRule(d *schema.ResourceData, m interface{}) error {
	sync := &IdentityDomainsRuleResourceCrud{}
func updateIdentityDomainsRule(d *schema.ResourceData, m interface{}) error {
	sync := &IdentityDomainsRuleResourceCrud{}
func deleteIdentityDomainsRule(d *schema.ResourceData, m interface{}) error {
	sync := &IdentityDomainsRuleResourceCrud{}
func (s *IdentityDomainsRuleResourceCrud) ID() string {
	return *s.Res.Id
func (s *IdentityDomainsRuleResourceCrud) Create() error {
	request := oci_identity_domains.CreateRuleRequest{}
func (s *IdentityDomainsRuleResourceCrud) Get() error {
	request := oci_identity_domains.GetRuleRequest{}
func (s *IdentityDomainsRuleResourceCrud) Update() error {
	request := oci_identity_domains.PutRuleRequest{}
func (s *IdentityDomainsRuleResourceCrud) Delete() error {
	request := oci_identity_domains.DeleteRuleRequest{}
func (s *IdentityDomainsRuleResourceCrud) SetData() error {

func (s *IdentityDomainsRuleResourceCrud) mapToRuleConditionGroup(fieldKeyFormat string) (oci_identity_domains.RuleConditionGroup, error) {
	result := oci_identity_domains.RuleConditionGroup{}
func (s *IdentityDomainsRuleResourceCrud) mapToRulePolicyType(fieldKeyFormat string) (oci_identity_domains.RulePolicyType, error) {
	result := oci_identity_domains.RulePolicyType{}
func (s *IdentityDomainsRuleResourceCrud) mapToRuleReturn(fieldKeyFormat string) (oci_identity_domains.RuleReturn, error) {
	result := oci_identity_domains.RuleReturn{}
func (s *IdentityDomainsRuleResourceCrud) mapTotags(fieldKeyFormat string) (oci_identity_domains.Tags, error) {
	result := oci_identity_domains.Tags{}

=== ./internal/service/identity_domains/identity_domains_my_customer_secret_key_resource.go ===
func IdentityDomainsMyCustomerSecretKeyResource() *schema.Resource {
	return &schema.Resource{
func createIdentityDomainsMyCustomerSecretKey(d *schema.ResourceData, m interface{}) error {
	sync := &IdentityDomainsMyCustomerSecretKeyResourceCrud{}
func readIdentityDomainsMyCustomerSecretKey(d *schema.ResourceData, m interface{}) error {
	sync := &IdentityDomainsMyCustomerSecretKeyResourceCrud{}
func deleteIdentityDomainsMyCustomerSecretKey(d *schema.ResourceData, m interface{}) error {
	sync := &IdentityDomainsMyCustomerSecretKeyResourceCrud{}
func (s *IdentityDomainsMyCustomerSecretKeyResourceCrud) ID() string {
	return *s.Res.Id
func (s *IdentityDomainsMyCustomerSecretKeyResourceCrud) Create() error {
	request := oci_identity_domains.CreateMyCustomerSecretKeyRequest{}
func (s *IdentityDomainsMyCustomerSecretKeyResourceCrud) Get() error {
	request := oci_identity_domains.GetMyCustomerSecretKeyRequest{}
func (s *IdentityDomainsMyCustomerSecretKeyResourceCrud) Delete() error {
	request := oci_identity_domains.DeleteMyCustomerSecretKeyRequest{}
func (s *IdentityDomainsMyCustomerSecretKeyResourceCrud) SetData() error {

func (s *IdentityDomainsMyCustomerSecretKeyResourceCrud) mapToMyCustomerSecretKeyUser(fieldKeyFormat string) (oci_identity_domains.MyCustomerSecretKeyUser, error) {
	result := oci_identity_domains.MyCustomerSecretKeyUser{}
func (s *IdentityDomainsMyCustomerSecretKeyResourceCrud) mapTotags(fieldKeyFormat string) (oci_identity_domains.Tags, error) {
	result := oci_identity_domains.Tags{}

=== ./internal/service/identity_domains/identity_domains_my_apps_data_source.go ===
func IdentityDomainsMyAppsDataSource() *schema.Resource {
	return &schema.Resource{
func readIdentityDomainsMyApps(d *schema.ResourceData, m interface{}) error {
	sync := &IdentityDomainsMyAppsDataSourceCrud{}
func (s *IdentityDomainsMyAppsDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *IdentityDomainsMyAppsDataSourceCrud) Get() error {
	request := oci_identity_domains.ListMyAppsRequest{}
func (s *IdentityDomainsMyAppsDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/identity_domains/identity_domains_my_oauth2client_credential_resource.go ===
func IdentityDomainsMyOAuth2ClientCredentialResource() *schema.Resource {
	return &schema.Resource{
func createIdentityDomainsMyOAuth2ClientCredential(d *schema.ResourceData, m interface{}) error {
	sync := &IdentityDomainsMyOAuth2ClientCredentialResourceCrud{}
func readIdentityDomainsMyOAuth2ClientCredential(d *schema.ResourceData, m interface{}) error {
	sync := &IdentityDomainsMyOAuth2ClientCredentialResourceCrud{}
func deleteIdentityDomainsMyOAuth2ClientCredential(d *schema.ResourceData, m interface{}) error {
	sync := &IdentityDomainsMyOAuth2ClientCredentialResourceCrud{}
func (s *IdentityDomainsMyOAuth2ClientCredentialResourceCrud) ID() string {
	return *s.Res.Id
func (s *IdentityDomainsMyOAuth2ClientCredentialResourceCrud) Create() error {
	request := oci_identity_domains.CreateMyOAuth2ClientCredentialRequest{}
func (s *IdentityDomainsMyOAuth2ClientCredentialResourceCrud) Get() error {
	request := oci_identity_domains.GetMyOAuth2ClientCredentialRequest{}
func (s *IdentityDomainsMyOAuth2ClientCredentialResourceCrud) Delete() error {
	request := oci_identity_domains.DeleteMyOAuth2ClientCredentialRequest{}
func (s *IdentityDomainsMyOAuth2ClientCredentialResourceCrud) SetData() error {

func (s *IdentityDomainsMyOAuth2ClientCredentialResourceCrud) mapToMyOAuth2ClientCredentialScopes(fieldKeyFormat string) (oci_identity_domains.MyOAuth2ClientCredentialScopes, error) {
	result := oci_identity_domains.MyOAuth2ClientCredentialScopes{}
func (s *IdentityDomainsMyOAuth2ClientCredentialResourceCrud) mapToMyOAuth2ClientCredentialUser(fieldKeyFormat string) (oci_identity_domains.MyOAuth2ClientCredentialUser, error) {
	result := oci_identity_domains.MyOAuth2ClientCredentialUser{}
func (s *IdentityDomainsMyOAuth2ClientCredentialResourceCrud) mapTotags(fieldKeyFormat string) (oci_identity_domains.Tags, error) {
	result := oci_identity_domains.Tags{}

=== ./internal/service/identity_domains/identity_domains_approval_workflow_assignments_data_source.go ===
func IdentityDomainsApprovalWorkflowAssignmentsDataSource() *schema.Resource {
	return &schema.Resource{
func readIdentityDomainsApprovalWorkflowAssignments(d *schema.ResourceData, m interface{}) error {
	sync := &IdentityDomainsApprovalWorkflowAssignmentsDataSourceCrud{}
func (s *IdentityDomainsApprovalWorkflowAssignmentsDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *IdentityDomainsApprovalWorkflowAssignmentsDataSourceCrud) Get() error {
	request := oci_identity_domains.ListApprovalWorkflowAssignmentsRequest{}
func (s *IdentityDomainsApprovalWorkflowAssignmentsDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/identity_domains/identity_domains_my_api_key_resource.go ===
func IdentityDomainsMyApiKeyResource() *schema.Resource {
	return &schema.Resource{
func createIdentityDomainsMyApiKey(d *schema.ResourceData, m interface{}) error {
	sync := &IdentityDomainsMyApiKeyResourceCrud{}
func readIdentityDomainsMyApiKey(d *schema.ResourceData, m interface{}) error {
	sync := &IdentityDomainsMyApiKeyResourceCrud{}
func deleteIdentityDomainsMyApiKey(d *schema.ResourceData, m interface{}) error {
	sync := &IdentityDomainsMyApiKeyResourceCrud{}
func (s *IdentityDomainsMyApiKeyResourceCrud) ID() string {
	return *s.Res.Id
func (s *IdentityDomainsMyApiKeyResourceCrud) Create() error {
	request := oci_identity_domains.CreateMyApiKeyRequest{}
func (s *IdentityDomainsMyApiKeyResourceCrud) Get() error {
	request := oci_identity_domains.GetMyApiKeyRequest{}
func (s *IdentityDomainsMyApiKeyResourceCrud) Delete() error {
	request := oci_identity_domains.DeleteMyApiKeyRequest{}
func (s *IdentityDomainsMyApiKeyResourceCrud) SetData() error {

func (s *IdentityDomainsMyApiKeyResourceCrud) mapToMyApiKeyUser(fieldKeyFormat string) (oci_identity_domains.MyApiKeyUser, error) {
	result := oci_identity_domains.MyApiKeyUser{}
func (s *IdentityDomainsMyApiKeyResourceCrud) mapTotags(fieldKeyFormat string) (oci_identity_domains.Tags, error) {
	result := oci_identity_domains.Tags{}

=== ./internal/service/identity_domains/identity_domains_oauth_partner_certificates_data_source.go ===
func IdentityDomainsOAuthPartnerCertificatesDataSource() *schema.Resource {
	return &schema.Resource{
func readIdentityDomainsOAuthPartnerCertificates(d *schema.ResourceData, m interface{}) error {
	sync := &IdentityDomainsOAuthPartnerCertificatesDataSourceCrud{}
func (s *IdentityDomainsOAuthPartnerCertificatesDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *IdentityDomainsOAuthPartnerCertificatesDataSourceCrud) Get() error {
	request := oci_identity_domains.ListOAuthPartnerCertificatesRequest{}
func (s *IdentityDomainsOAuthPartnerCertificatesDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/identity_domains/identity_domains_user_db_credentials_data_source.go ===
func IdentityDomainsUserDbCredentialsDataSource() *schema.Resource {
	return &schema.Resource{
func readIdentityDomainsUserDbCredentials(d *schema.ResourceData, m interface{}) error {
	sync := &IdentityDomainsUserDbCredentialsDataSourceCrud{}
func (s *IdentityDomainsUserDbCredentialsDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *IdentityDomainsUserDbCredentialsDataSourceCrud) Get() error {
	request := oci_identity_domains.ListUserDbCredentialsRequest{}
func (s *IdentityDomainsUserDbCredentialsDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/identity_domains/identity_domains_security_question_resource.go ===
func IdentityDomainsSecurityQuestionResource() *schema.Resource {
	return &schema.Resource{
func createIdentityDomainsSecurityQuestion(d *schema.ResourceData, m interface{}) error {
	sync := &IdentityDomainsSecurityQuestionResourceCrud{}
func readIdentityDomainsSecurityQuestion(d *schema.ResourceData, m interface{}) error {
	sync := &IdentityDomainsSecurityQuestionResourceCrud{}
func deleteIdentityDomainsSecurityQuestion(d *schema.ResourceData, m interface{}) error {
	sync := &IdentityDomainsSecurityQuestionResourceCrud{}
func (s *IdentityDomainsSecurityQuestionResourceCrud) ID() string {
	return *s.Res.Id
func (s *IdentityDomainsSecurityQuestionResourceCrud) Create() error {
	request := oci_identity_domains.CreateSecurityQuestionRequest{}
func (s *IdentityDomainsSecurityQuestionResourceCrud) Get() error {
	request := oci_identity_domains.GetSecurityQuestionRequest{}
func (s *IdentityDomainsSecurityQuestionResourceCrud) Delete() error {
	request := oci_identity_domains.DeleteSecurityQuestionRequest{}
func (s *IdentityDomainsSecurityQuestionResourceCrud) SetData() error {

func (s *IdentityDomainsSecurityQuestionResourceCrud) mapToSecurityQuestionQuestionText(fieldKeyFormat string) (oci_identity_domains.SecurityQuestionQuestionText, error) {
	result := oci_identity_domains.SecurityQuestionQuestionText{}
func (s *IdentityDomainsSecurityQuestionResourceCrud) mapTotags(fieldKeyFormat string) (oci_identity_domains.Tags, error) {
	result := oci_identity_domains.Tags{}

=== ./internal/service/identity_domains/identity_domains_kmsi_setting_data_source.go ===
func IdentityDomainsKmsiSettingDataSource() *schema.Resource {
	fieldMap := make(map[string]*schema.Schema)
func readSingularIdentityDomainsKmsiSetting(d *schema.ResourceData, m interface{}) error {
	sync := &IdentityDomainsKmsiSettingDataSourceCrud{}
func (s *IdentityDomainsKmsiSettingDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *IdentityDomainsKmsiSettingDataSourceCrud) Get() error {
	request := oci_identity_domains.GetKmsiSettingRequest{}
func (s *IdentityDomainsKmsiSettingDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/identity_domains/identity_domains_network_perimeter_data_source.go ===
func IdentityDomainsNetworkPerimeterDataSource() *schema.Resource {
	fieldMap := make(map[string]*schema.Schema)
func readSingularIdentityDomainsNetworkPerimeter(d *schema.ResourceData, m interface{}) error {
	sync := &IdentityDomainsNetworkPerimeterDataSourceCrud{}
func (s *IdentityDomainsNetworkPerimeterDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *IdentityDomainsNetworkPerimeterDataSourceCrud) Get() error {
	request := oci_identity_domains.GetNetworkPerimeterRequest{}
func (s *IdentityDomainsNetworkPerimeterDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/identity_domains/identity_domains_my_customer_secret_key_data_source.go ===
func IdentityDomainsMyCustomerSecretKeyDataSource() *schema.Resource {
	fieldMap := make(map[string]*schema.Schema)
func readSingularIdentityDomainsMyCustomerSecretKey(d *schema.ResourceData, m interface{}) error {
	sync := &IdentityDomainsMyCustomerSecretKeyDataSourceCrud{}
func (s *IdentityDomainsMyCustomerSecretKeyDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *IdentityDomainsMyCustomerSecretKeyDataSourceCrud) Get() error {
	request := oci_identity_domains.GetMyCustomerSecretKeyRequest{}
func (s *IdentityDomainsMyCustomerSecretKeyDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/identity_domains/identity_domains_my_user_db_credentials_data_source.go ===
func IdentityDomainsMyUserDbCredentialsDataSource() *schema.Resource {
	return &schema.Resource{
func readIdentityDomainsMyUserDbCredentials(d *schema.ResourceData, m interface{}) error {
	sync := &IdentityDomainsMyUserDbCredentialsDataSourceCrud{}
func (s *IdentityDomainsMyUserDbCredentialsDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *IdentityDomainsMyUserDbCredentialsDataSourceCrud) Get() error {
	request := oci_identity_domains.ListMyUserDbCredentialsRequest{}
func (s *IdentityDomainsMyUserDbCredentialsDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/identity_domains/identity_domains_identity_providers_data_source.go ===
func IdentityDomainsIdentityProvidersDataSource() *schema.Resource {
	return &schema.Resource{
func readIdentityDomainsIdentityProviders(d *schema.ResourceData, m interface{}) error {
	sync := &IdentityDomainsIdentityProvidersDataSourceCrud{}
func (s *IdentityDomainsIdentityProvidersDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *IdentityDomainsIdentityProvidersDataSourceCrud) Get() error {
	request := oci_identity_domains.ListIdentityProvidersRequest{}
func (s *IdentityDomainsIdentityProvidersDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/identity_domains/identity_domains_oauth_partner_certificate_data_source.go ===
func IdentityDomainsOAuthPartnerCertificateDataSource() *schema.Resource {
	fieldMap := make(map[string]*schema.Schema)
func readSingularIdentityDomainsOAuthPartnerCertificate(d *schema.ResourceData, m interface{}) error {
	sync := &IdentityDomainsOAuthPartnerCertificateDataSourceCrud{}
func (s *IdentityDomainsOAuthPartnerCertificateDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *IdentityDomainsOAuthPartnerCertificateDataSourceCrud) Get() error {
	request := oci_identity_domains.GetOAuthPartnerCertificateRequest{}
func (s *IdentityDomainsOAuthPartnerCertificateDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/identity_domains/identity_domains_resource_type_schema_attributes_data_source.go ===
func IdentityDomainsResourceTypeSchemaAttributesDataSource() *schema.Resource {
	return &schema.Resource{
func readIdentityDomainsResourceTypeSchemaAttributes(d *schema.ResourceData, m interface{}) error {
	sync := &IdentityDomainsResourceTypeSchemaAttributesDataSourceCrud{}
func (s *IdentityDomainsResourceTypeSchemaAttributesDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *IdentityDomainsResourceTypeSchemaAttributesDataSourceCrud) Get() error {
	request := oci_identity_domains.ListResourceTypeSchemaAttributesRequest{}
func (s *IdentityDomainsResourceTypeSchemaAttributesDataSourceCrud) SetData() error {
	if s.Res == nil {
func ResourceTypeSchemaAttributeToMap(obj oci_identity_domains.ResourceTypeSchemaAttribute) map[string]interface{} {
	result := map[string]interface{}{}

=== ./internal/service/identity_domains/identity_domains_my_groups_data_source.go ===
func IdentityDomainsMyGroupsDataSource() *schema.Resource {
	return &schema.Resource{
func readIdentityDomainsMyGroups(d *schema.ResourceData, m interface{}) error {
	sync := &IdentityDomainsMyGroupsDataSourceCrud{}
func (s *IdentityDomainsMyGroupsDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *IdentityDomainsMyGroupsDataSourceCrud) Get() error {
	request := oci_identity_domains.ListMyGroupsRequest{}
func (s *IdentityDomainsMyGroupsDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/identity_domains/identity_domains_rules_data_source.go ===
func IdentityDomainsRulesDataSource() *schema.Resource {
	return &schema.Resource{
func readIdentityDomainsRules(d *schema.ResourceData, m interface{}) error {
	sync := &IdentityDomainsRulesDataSourceCrud{}
func (s *IdentityDomainsRulesDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *IdentityDomainsRulesDataSourceCrud) Get() error {
	request := oci_identity_domains.ListRulesRequest{}
func (s *IdentityDomainsRulesDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/identity_domains/identity_domains_users_data_source.go ===
func IdentityDomainsUsersDataSource() *schema.Resource {
	return &schema.Resource{
func readIdentityDomainsUsers(d *schema.ResourceData, m interface{}) error {
	sync := &IdentityDomainsUsersDataSourceCrud{}
func (s *IdentityDomainsUsersDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *IdentityDomainsUsersDataSourceCrud) Get() error {
	request := oci_identity_domains.ListUsersRequest{}
func (s *IdentityDomainsUsersDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/identity_domains/identity_domains_setting_resource.go ===
func IdentityDomainsSettingResource() *schema.Resource {
	return &schema.Resource{
func createIdentityDomainsSetting(d *schema.ResourceData, m interface{}) error {
	sync := &IdentityDomainsSettingResourceCrud{}
func readIdentityDomainsSetting(d *schema.ResourceData, m interface{}) error {
	sync := &IdentityDomainsSettingResourceCrud{}
func updateIdentityDomainsSetting(d *schema.ResourceData, m interface{}) error {
	sync := &IdentityDomainsSettingResourceCrud{}
func deleteIdentityDomainsSetting(d *schema.ResourceData, m interface{}) error {
	return nil
func (s *IdentityDomainsSettingResourceCrud) ID() string {
	return *s.Res.Id
func (s *IdentityDomainsSettingResourceCrud) Create() error {
	request := oci_identity_domains.PutSettingRequest{}
func (s *IdentityDomainsSettingResourceCrud) Get() error {
	request := oci_identity_domains.GetSettingRequest{}
func (s *IdentityDomainsSettingResourceCrud) Update() error {
	request := oci_identity_domains.PutSettingRequest{}
func (s *IdentityDomainsSettingResourceCrud) SetData() error {

func (s *IdentityDomainsSettingResourceCrud) mapToSettingsCertificateValidation(fieldKeyFormat string) (oci_identity_domains.SettingsCertificateValidation, error) {
	result := oci_identity_domains.SettingsCertificateValidation{}
func (s *IdentityDomainsSettingResourceCrud) mapToSettingsCloudGateCorsSettings(fieldKeyFormat string) (oci_identity_domains.SettingsCloudGateCorsSettings, error) {
	result := oci_identity_domains.SettingsCloudGateCorsSettings{}
func (s *IdentityDomainsSettingResourceCrud) mapToSettingsCompanyNames(fieldKeyFormat string) (oci_identity_domains.SettingsCompanyNames, error) {
	result := oci_identity_domains.SettingsCompanyNames{}
func (s *IdentityDomainsSettingResourceCrud) mapToSettingsImages(fieldKeyFormat string) (oci_identity_domains.SettingsImages, error) {
	result := oci_identity_domains.SettingsImages{}
func (s *IdentityDomainsSettingResourceCrud) mapToSettingsLoginTexts(fieldKeyFormat string) (oci_identity_domains.SettingsLoginTexts, error) {
	result := oci_identity_domains.SettingsLoginTexts{}
func (s *IdentityDomainsSettingResourceCrud) mapToSettingsPurgeConfigs(fieldKeyFormat string) (oci_identity_domains.SettingsPurgeConfigs, error) {
	result := oci_identity_domains.SettingsPurgeConfigs{}
func (s *IdentityDomainsSettingResourceCrud) mapToSettingsTenantCustomClaims(fieldKeyFormat string) (oci_identity_domains.SettingsTenantCustomClaims, error) {
	result := oci_identity_domains.SettingsTenantCustomClaims{}
func (s *IdentityDomainsSettingResourceCrud) mapTotags(fieldKeyFormat string) (oci_identity_domains.Tags, error) {
	result := oci_identity_domains.Tags{}

=== ./internal/service/identity_domains/identity_domains_my_smtp_credential_resource.go ===
func IdentityDomainsMySmtpCredentialResource() *schema.Resource {
	return &schema.Resource{
func createIdentityDomainsMySmtpCredential(d *schema.ResourceData, m interface{}) error {
	sync := &IdentityDomainsMySmtpCredentialResourceCrud{}
func readIdentityDomainsMySmtpCredential(d *schema.ResourceData, m interface{}) error {
	sync := &IdentityDomainsMySmtpCredentialResourceCrud{}
func deleteIdentityDomainsMySmtpCredential(d *schema.ResourceData, m interface{}) error {
	sync := &IdentityDomainsMySmtpCredentialResourceCrud{}
func (s *IdentityDomainsMySmtpCredentialResourceCrud) ID() string {
	return *s.Res.Id
func (s *IdentityDomainsMySmtpCredentialResourceCrud) Create() error {
	request := oci_identity_domains.CreateMySmtpCredentialRequest{}
func (s *IdentityDomainsMySmtpCredentialResourceCrud) Get() error {
	request := oci_identity_domains.GetMySmtpCredentialRequest{}
func (s *IdentityDomainsMySmtpCredentialResourceCrud) Delete() error {
	request := oci_identity_domains.DeleteMySmtpCredentialRequest{}
func (s *IdentityDomainsMySmtpCredentialResourceCrud) SetData() error {

func (s *IdentityDomainsMySmtpCredentialResourceCrud) mapToMySmtpCredentialUser(fieldKeyFormat string) (oci_identity_domains.MySmtpCredentialUser, error) {
	result := oci_identity_domains.MySmtpCredentialUser{}
func (s *IdentityDomainsMySmtpCredentialResourceCrud) mapTotags(fieldKeyFormat string) (oci_identity_domains.Tags, error) {
	result := oci_identity_domains.Tags{}

=== ./internal/service/identity_domains/identity_domains_apps_data_source.go ===
func IdentityDomainsAppsDataSource() *schema.Resource {
	return &schema.Resource{
func readIdentityDomainsApps(d *schema.ResourceData, m interface{}) error {
	sync := &IdentityDomainsAppsDataSourceCrud{}
func (s *IdentityDomainsAppsDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *IdentityDomainsAppsDataSourceCrud) Get() error {
	request := oci_identity_domains.ListAppsRequest{}
func (s *IdentityDomainsAppsDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/identity_domains/identity_domains_kmsi_settings_data_source.go ===
func IdentityDomainsKmsiSettingsDataSource() *schema.Resource {
	return &schema.Resource{
func readIdentityDomainsKmsiSettings(d *schema.ResourceData, m interface{}) error {
	sync := &IdentityDomainsKmsiSettingsDataSourceCrud{}
func (s *IdentityDomainsKmsiSettingsDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *IdentityDomainsKmsiSettingsDataSourceCrud) Get() error {
	request := oci_identity_domains.ListKmsiSettingsRequest{}
func (s *IdentityDomainsKmsiSettingsDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/identity_domains/identity_domains_oauth_client_certificates_data_source.go ===
func IdentityDomainsOAuthClientCertificatesDataSource() *schema.Resource {
	return &schema.Resource{
func readIdentityDomainsOAuthClientCertificates(d *schema.ResourceData, m interface{}) error {
	sync := &IdentityDomainsOAuthClientCertificatesDataSourceCrud{}
func (s *IdentityDomainsOAuthClientCertificatesDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *IdentityDomainsOAuthClientCertificatesDataSourceCrud) Get() error {
	request := oci_identity_domains.ListOAuthClientCertificatesRequest{}
func (s *IdentityDomainsOAuthClientCertificatesDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/identity_domains/identity_domains_social_identity_providers_data_source.go ===
func IdentityDomainsSocialIdentityProvidersDataSource() *schema.Resource {
	return &schema.Resource{
func readIdentityDomainsSocialIdentityProviders(d *schema.ResourceData, m interface{}) error {
	sync := &IdentityDomainsSocialIdentityProvidersDataSourceCrud{}
func (s *IdentityDomainsSocialIdentityProvidersDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *IdentityDomainsSocialIdentityProvidersDataSourceCrud) Get() error {
	request := oci_identity_domains.ListSocialIdentityProvidersRequest{}
func (s *IdentityDomainsSocialIdentityProvidersDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/identity_domains/identity_domains_auth_tokens_data_source.go ===
func IdentityDomainsAuthTokensDataSource() *schema.Resource {
	return &schema.Resource{
func readIdentityDomainsAuthTokens(d *schema.ResourceData, m interface{}) error {
	sync := &IdentityDomainsAuthTokensDataSourceCrud{}
func (s *IdentityDomainsAuthTokensDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *IdentityDomainsAuthTokensDataSourceCrud) Get() error {
	request := oci_identity_domains.ListAuthTokensRequest{}
func (s *IdentityDomainsAuthTokensDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/identity_domains/identity_domains_account_recovery_settings_data_source.go ===
func IdentityDomainsAccountRecoverySettingsDataSource() *schema.Resource {
	return &schema.Resource{
func readIdentityDomainsAccountRecoverySettings(d *schema.ResourceData, m interface{}) error {
	sync := &IdentityDomainsAccountRecoverySettingsDataSourceCrud{}
func (s *IdentityDomainsAccountRecoverySettingsDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *IdentityDomainsAccountRecoverySettingsDataSourceCrud) Get() error {
	request := oci_identity_domains.ListAccountRecoverySettingsRequest{}
func (s *IdentityDomainsAccountRecoverySettingsDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/identity_domains/identity_domains_policy_data_source.go ===
func IdentityDomainsPolicyDataSource() *schema.Resource {
	fieldMap := make(map[string]*schema.Schema)
func readSingularIdentityDomainsPolicy(d *schema.ResourceData, m interface{}) error {
	sync := &IdentityDomainsPolicyDataSourceCrud{}
func (s *IdentityDomainsPolicyDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *IdentityDomainsPolicyDataSourceCrud) Get() error {
	request := oci_identity_domains.GetPolicyRequest{}
func (s *IdentityDomainsPolicyDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/identity_domains/identity_domains_my_user_db_credential_resource.go ===
func IdentityDomainsMyUserDbCredentialResource() *schema.Resource {
	return &schema.Resource{
func createIdentityDomainsMyUserDbCredential(d *schema.ResourceData, m interface{}) error {
	sync := &IdentityDomainsMyUserDbCredentialResourceCrud{}
func readIdentityDomainsMyUserDbCredential(d *schema.ResourceData, m interface{}) error {
	sync := &IdentityDomainsMyUserDbCredentialResourceCrud{}
func deleteIdentityDomainsMyUserDbCredential(d *schema.ResourceData, m interface{}) error {
	sync := &IdentityDomainsMyUserDbCredentialResourceCrud{}
func (s *IdentityDomainsMyUserDbCredentialResourceCrud) ID() string {
	return *s.Res.Id
func (s *IdentityDomainsMyUserDbCredentialResourceCrud) Create() error {
	request := oci_identity_domains.CreateMyUserDbCredentialRequest{}
func (s *IdentityDomainsMyUserDbCredentialResourceCrud) Get() error {
	request := oci_identity_domains.GetMyUserDbCredentialRequest{}
func (s *IdentityDomainsMyUserDbCredentialResourceCrud) Delete() error {
	request := oci_identity_domains.DeleteMyUserDbCredentialRequest{}
func (s *IdentityDomainsMyUserDbCredentialResourceCrud) SetData() error {

func (s *IdentityDomainsMyUserDbCredentialResourceCrud) mapToMyUserDbCredentialsUser(fieldKeyFormat string) (oci_identity_domains.MyUserDbCredentialsUser, error) {
	result := oci_identity_domains.MyUserDbCredentialsUser{}
func (s *IdentityDomainsMyUserDbCredentialResourceCrud) mapTotags(fieldKeyFormat string) (oci_identity_domains.Tags, error) {
	result := oci_identity_domains.Tags{}

=== ./internal/service/identity_domains/identity_domains_my_requestable_groups_data_source.go ===
func IdentityDomainsMyRequestableGroupsDataSource() *schema.Resource {
	return &schema.Resource{
func readIdentityDomainsMyRequestableGroups(d *schema.ResourceData, m interface{}) error {
	sync := &IdentityDomainsMyRequestableGroupsDataSourceCrud{}
func (s *IdentityDomainsMyRequestableGroupsDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *IdentityDomainsMyRequestableGroupsDataSourceCrud) Get() error {
	request := oci_identity_domains.ListMyRequestableGroupsRequest{}
func (s *IdentityDomainsMyRequestableGroupsDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/identity_domains/identity_domains_util.go ===
func getIdcsEndpoint(d *schema.ResourceData) (string, error) {
	endpoint, ok := d.GetOkExists("idcs_endpoint")
func getIdcsEndpointForRead(d *schema.ResourceData, resourceName string) (string, error) {
	if endpoint, err := getIdcsEndpoint(d); err == nil {
func IsOptionalField(resource *schema.Resource, fieldPath []string) bool {
	pathLen := len(fieldPath)
func IsOptionalAndEmpty(resource *schema.Resource, D *schema.ResourceData, fieldKey string) bool {
	return IsOptionalField(resource, strings.Split(fieldKey, ".")) && IsEmptyValued(D.Get(fieldKey))

=== ./internal/service/identity_domains/identity_domains_network_perimeters_data_source.go ===
func IdentityDomainsNetworkPerimetersDataSource() *schema.Resource {
	return &schema.Resource{
func readIdentityDomainsNetworkPerimeters(d *schema.ResourceData, m interface{}) error {
	sync := &IdentityDomainsNetworkPerimetersDataSourceCrud{}
func (s *IdentityDomainsNetworkPerimetersDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *IdentityDomainsNetworkPerimetersDataSourceCrud) Get() error {
	request := oci_identity_domains.ListNetworkPerimetersRequest{}
func (s *IdentityDomainsNetworkPerimetersDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/identity_domains/identity_domains_security_question_setting_data_source.go ===
func IdentityDomainsSecurityQuestionSettingDataSource() *schema.Resource {
	fieldMap := make(map[string]*schema.Schema)
func readSingularIdentityDomainsSecurityQuestionSetting(d *schema.ResourceData, m interface{}) error {
	sync := &IdentityDomainsSecurityQuestionSettingDataSourceCrud{}
func (s *IdentityDomainsSecurityQuestionSettingDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *IdentityDomainsSecurityQuestionSettingDataSourceCrud) Get() error {
	request := oci_identity_domains.GetSecurityQuestionSettingRequest{}
func (s *IdentityDomainsSecurityQuestionSettingDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/identity_domains/identity_domains_dynamic_resource_group_resource.go ===
func IdentityDomainsDynamicResourceGroupResource() *schema.Resource {
	return &schema.Resource{
func createIdentityDomainsDynamicResourceGroup(d *schema.ResourceData, m interface{}) error {
	sync := &IdentityDomainsDynamicResourceGroupResourceCrud{}
func readIdentityDomainsDynamicResourceGroup(d *schema.ResourceData, m interface{}) error {
	sync := &IdentityDomainsDynamicResourceGroupResourceCrud{}
func updateIdentityDomainsDynamicResourceGroup(d *schema.ResourceData, m interface{}) error {
	sync := &IdentityDomainsDynamicResourceGroupResourceCrud{}
func deleteIdentityDomainsDynamicResourceGroup(d *schema.ResourceData, m interface{}) error {
	sync := &IdentityDomainsDynamicResourceGroupResourceCrud{}
func (s *IdentityDomainsDynamicResourceGroupResourceCrud) ID() string {
	return *s.Res.Id
func (s *IdentityDomainsDynamicResourceGroupResourceCrud) Create() error {
	request := oci_identity_domains.CreateDynamicResourceGroupRequest{}
func (s *IdentityDomainsDynamicResourceGroupResourceCrud) Get() error {
	request := oci_identity_domains.GetDynamicResourceGroupRequest{}
func (s *IdentityDomainsDynamicResourceGroupResourceCrud) Update() error {
	request := oci_identity_domains.PutDynamicResourceGroupRequest{}
func (s *IdentityDomainsDynamicResourceGroupResourceCrud) Delete() error {
	request := oci_identity_domains.DeleteDynamicResourceGroupRequest{}
func (s *IdentityDomainsDynamicResourceGroupResourceCrud) SetData() error {

func parseDynamicResourceGroupCompositeId(compositeId string) (dynamicResourceGroupId string, err error) {
	parts := strings.Split(compositeId, "/")
func DynamicResourceGroupToMap(obj oci_identity_domains.DynamicResourceGroup) map[string]interface{} {
	result := map[string]interface{}{}
func DynamicResourceGroupDynamicGroupAppRolesToMap(obj oci_identity_domains.DynamicResourceGroupDynamicGroupAppRoles) map[string]interface{} {
	result := map[string]interface{}{}
func DynamicResourceGroupGrantsToMap(obj oci_identity_domains.DynamicResourceGroupGrants) map[string]interface{} {
	result := map[string]interface{}{}
func (s *IdentityDomainsDynamicResourceGroupResourceCrud) mapToExtensionOCITags(fieldKeyFormat string) (oci_identity_domains.ExtensionOciTags, error) {
	result := oci_identity_domains.ExtensionOciTags{}
func (s *IdentityDomainsDynamicResourceGroupResourceCrud) mapTofreeformTags(fieldKeyFormat string) (oci_identity_domains.FreeformTags, error) {
	result := oci_identity_domains.FreeformTags{}
func (s *IdentityDomainsDynamicResourceGroupResourceCrud) mapTotags(fieldKeyFormat string) (oci_identity_domains.Tags, error) {
	result := oci_identity_domains.Tags{}
func (s *IdentityDomainsDynamicResourceGroupResourceCrud) mapTodefinedTags(fieldKeyFormat string) (oci_identity_domains.DefinedTags, error) {
	result := oci_identity_domains.DefinedTags{}

=== ./internal/service/identity_domains/identity_domains_approval_workflow_data_source.go ===
func IdentityDomainsApprovalWorkflowDataSource() *schema.Resource {
	fieldMap := make(map[string]*schema.Schema)
func readSingularIdentityDomainsApprovalWorkflow(d *schema.ResourceData, m interface{}) error {
	sync := &IdentityDomainsApprovalWorkflowDataSourceCrud{}
func (s *IdentityDomainsApprovalWorkflowDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *IdentityDomainsApprovalWorkflowDataSourceCrud) Get() error {
	request := oci_identity_domains.GetApprovalWorkflowRequest{}
func (s *IdentityDomainsApprovalWorkflowDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/identity_domains/identity_domains_smtp_credential_resource.go ===
func IdentityDomainsSmtpCredentialResource() *schema.Resource {
	return &schema.Resource{
func createIdentityDomainsSmtpCredential(d *schema.ResourceData, m interface{}) error {
	sync := &IdentityDomainsSmtpCredentialResourceCrud{}
func readIdentityDomainsSmtpCredential(d *schema.ResourceData, m interface{}) error {
	sync := &IdentityDomainsSmtpCredentialResourceCrud{}
func deleteIdentityDomainsSmtpCredential(d *schema.ResourceData, m interface{}) error {
	sync := &IdentityDomainsSmtpCredentialResourceCrud{}
func (s *IdentityDomainsSmtpCredentialResourceCrud) ID() string {
	return *s.Res.Id
func (s *IdentityDomainsSmtpCredentialResourceCrud) Create() error {
	request := oci_identity_domains.CreateSmtpCredentialRequest{}
func (s *IdentityDomainsSmtpCredentialResourceCrud) Get() error {
	request := oci_identity_domains.GetSmtpCredentialRequest{}
func (s *IdentityDomainsSmtpCredentialResourceCrud) Delete() error {
	request := oci_identity_domains.DeleteSmtpCredentialRequest{}
func (s *IdentityDomainsSmtpCredentialResourceCrud) SetData() error {

func (s *IdentityDomainsSmtpCredentialResourceCrud) mapToExtensionSelfChangeUser(fieldKeyFormat string) (oci_identity_domains.ExtensionSelfChangeUser, error) {
	result := oci_identity_domains.ExtensionSelfChangeUser{}
func (s *IdentityDomainsSmtpCredentialResourceCrud) mapToSmtpCredentialUser(fieldKeyFormat string) (oci_identity_domains.SmtpCredentialUser, error) {
	result := oci_identity_domains.SmtpCredentialUser{}
func (s *IdentityDomainsSmtpCredentialResourceCrud) mapTotags(fieldKeyFormat string) (oci_identity_domains.Tags, error) {
	result := oci_identity_domains.Tags{}

=== ./internal/service/identity_domains/identity_domains_social_identity_provider_data_source.go ===
func IdentityDomainsSocialIdentityProviderDataSource() *schema.Resource {
	fieldMap := make(map[string]*schema.Schema)
func readSingularIdentityDomainsSocialIdentityProvider(d *schema.ResourceData, m interface{}) error {
	sync := &IdentityDomainsSocialIdentityProviderDataSourceCrud{}
func (s *IdentityDomainsSocialIdentityProviderDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *IdentityDomainsSocialIdentityProviderDataSourceCrud) Get() error {
	request := oci_identity_domains.GetSocialIdentityProviderRequest{}
func (s *IdentityDomainsSocialIdentityProviderDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/identity_domains/identity_domains_security_question_settings_data_source.go ===
func IdentityDomainsSecurityQuestionSettingsDataSource() *schema.Resource {
	return &schema.Resource{
func readIdentityDomainsSecurityQuestionSettings(d *schema.ResourceData, m interface{}) error {
	sync := &IdentityDomainsSecurityQuestionSettingsDataSourceCrud{}
func (s *IdentityDomainsSecurityQuestionSettingsDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *IdentityDomainsSecurityQuestionSettingsDataSourceCrud) Get() error {
	request := oci_identity_domains.ListSecurityQuestionSettingsRequest{}
func (s *IdentityDomainsSecurityQuestionSettingsDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/identity_domains/identity_domains_self_registration_profile_data_source.go ===
func IdentityDomainsSelfRegistrationProfileDataSource() *schema.Resource {
	fieldMap := make(map[string]*schema.Schema)
func readSingularIdentityDomainsSelfRegistrationProfile(d *schema.ResourceData, m interface{}) error {
	sync := &IdentityDomainsSelfRegistrationProfileDataSourceCrud{}
func (s *IdentityDomainsSelfRegistrationProfileDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *IdentityDomainsSelfRegistrationProfileDataSourceCrud) Get() error {
	request := oci_identity_domains.GetSelfRegistrationProfileRequest{}
func (s *IdentityDomainsSelfRegistrationProfileDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/identity_domains/identity_domains_my_oauth2client_credentials_data_source.go ===
func IdentityDomainsMyOAuth2ClientCredentialsDataSource() *schema.Resource {
	return &schema.Resource{
func readIdentityDomainsMyOAuth2ClientCredentials(d *schema.ResourceData, m interface{}) error {
	sync := &IdentityDomainsMyOAuth2ClientCredentialsDataSourceCrud{}
func (s *IdentityDomainsMyOAuth2ClientCredentialsDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *IdentityDomainsMyOAuth2ClientCredentialsDataSourceCrud) Get() error {
	request := oci_identity_domains.ListMyOAuth2ClientCredentialsRequest{}
func (s *IdentityDomainsMyOAuth2ClientCredentialsDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/identity_domains/identity_domains_my_trusted_user_agent_data_source.go ===
func IdentityDomainsMyTrustedUserAgentDataSource() *schema.Resource {
	return &schema.Resource{
func readSingularIdentityDomainsMyTrustedUserAgent(d *schema.ResourceData, m interface{}) error {
	sync := &IdentityDomainsMyTrustedUserAgentDataSourceCrud{}
func (s *IdentityDomainsMyTrustedUserAgentDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *IdentityDomainsMyTrustedUserAgentDataSourceCrud) Get() error {
	request := oci_identity_domains.GetMyTrustedUserAgentRequest{}
func (s *IdentityDomainsMyTrustedUserAgentDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/identity_domains/identity_domains_my_completed_approvals_data_source.go ===
func IdentityDomainsMyCompletedApprovalsDataSource() *schema.Resource {
	return &schema.Resource{
func readIdentityDomainsMyCompletedApprovals(d *schema.ResourceData, m interface{}) error {
	sync := &IdentityDomainsMyCompletedApprovalsDataSourceCrud{}
func (s *IdentityDomainsMyCompletedApprovalsDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *IdentityDomainsMyCompletedApprovalsDataSourceCrud) Get() error {
	request := oci_identity_domains.ListMyCompletedApprovalsRequest{}
func (s *IdentityDomainsMyCompletedApprovalsDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/identity_domains/identity_domains_self_registration_profile_resource.go ===
func IdentityDomainsSelfRegistrationProfileResource() *schema.Resource {
	return &schema.Resource{
func createIdentityDomainsSelfRegistrationProfile(d *schema.ResourceData, m interface{}) error {
	sync := &IdentityDomainsSelfRegistrationProfileResourceCrud{}
func readIdentityDomainsSelfRegistrationProfile(d *schema.ResourceData, m interface{}) error {
	sync := &IdentityDomainsSelfRegistrationProfileResourceCrud{}
func updateIdentityDomainsSelfRegistrationProfile(d *schema.ResourceData, m interface{}) error {
	sync := &IdentityDomainsSelfRegistrationProfileResourceCrud{}
func deleteIdentityDomainsSelfRegistrationProfile(d *schema.ResourceData, m interface{}) error {
	sync := &IdentityDomainsSelfRegistrationProfileResourceCrud{}
func (s *IdentityDomainsSelfRegistrationProfileResourceCrud) ID() string {
	return *s.Res.Id
func (s *IdentityDomainsSelfRegistrationProfileResourceCrud) Create() error {
	request := oci_identity_domains.CreateSelfRegistrationProfileRequest{}
func (s *IdentityDomainsSelfRegistrationProfileResourceCrud) Get() error {
	request := oci_identity_domains.GetSelfRegistrationProfileRequest{}
func (s *IdentityDomainsSelfRegistrationProfileResourceCrud) Update() error {
	request := oci_identity_domains.PutSelfRegistrationProfileRequest{}
func (s *IdentityDomainsSelfRegistrationProfileResourceCrud) Delete() error {
	request := oci_identity_domains.DeleteSelfRegistrationProfileRequest{}
func (s *IdentityDomainsSelfRegistrationProfileResourceCrud) SetData() error {

func (s *IdentityDomainsSelfRegistrationProfileResourceCrud) mapToSelfRegistrationProfileAfterSubmitText(fieldKeyFormat string) (oci_identity_domains.SelfRegistrationProfileAfterSubmitText, error) {
	result := oci_identity_domains.SelfRegistrationProfileAfterSubmitText{}
func (s *IdentityDomainsSelfRegistrationProfileResourceCrud) mapToSelfRegistrationProfileConsentText(fieldKeyFormat string) (oci_identity_domains.SelfRegistrationProfileConsentText, error) {
	result := oci_identity_domains.SelfRegistrationProfileConsentText{}
func (s *IdentityDomainsSelfRegistrationProfileResourceCrud) mapToSelfRegistrationProfileDefaultGroups(fieldKeyFormat string) (oci_identity_domains.SelfRegistrationProfileDefaultGroups, error) {
	result := oci_identity_domains.SelfRegistrationProfileDefaultGroups{}
func (s *IdentityDomainsSelfRegistrationProfileResourceCrud) mapToSelfRegistrationProfileDisplayName(fieldKeyFormat string) (oci_identity_domains.SelfRegistrationProfileDisplayName, error) {
	result := oci_identity_domains.SelfRegistrationProfileDisplayName{}
func (s *IdentityDomainsSelfRegistrationProfileResourceCrud) mapToSelfRegistrationProfileEmailTemplate(fieldKeyFormat string) (oci_identity_domains.SelfRegistrationProfileEmailTemplate, error) {
	result := oci_identity_domains.SelfRegistrationProfileEmailTemplate{}
func (s *IdentityDomainsSelfRegistrationProfileResourceCrud) mapToSelfRegistrationProfileFooterText(fieldKeyFormat string) (oci_identity_domains.SelfRegistrationProfileFooterText, error) {
	result := oci_identity_domains.SelfRegistrationProfileFooterText{}
func (s *IdentityDomainsSelfRegistrationProfileResourceCrud) mapToSelfRegistrationProfileHeaderText(fieldKeyFormat string) (oci_identity_domains.SelfRegistrationProfileHeaderText, error) {
	result := oci_identity_domains.SelfRegistrationProfileHeaderText{}
func (s *IdentityDomainsSelfRegistrationProfileResourceCrud) mapToSelfRegistrationProfileUserAttributes(fieldKeyFormat string) (oci_identity_domains.SelfRegistrationProfileUserAttributes, error) {
	result := oci_identity_domains.SelfRegistrationProfileUserAttributes{}
func (s *IdentityDomainsSelfRegistrationProfileResourceCrud) mapTotags(fieldKeyFormat string) (oci_identity_domains.Tags, error) {
	result := oci_identity_domains.Tags{}

=== ./internal/service/identity_domains/identity_domains_my_request_resource.go ===
func IdentityDomainsMyRequestResource() *schema.Resource {
	return &schema.Resource{
func createIdentityDomainsMyRequest(d *schema.ResourceData, m interface{}) error {
	sync := &IdentityDomainsMyRequestResourceCrud{}
func readIdentityDomainsMyRequest(d *schema.ResourceData, m interface{}) error {
	return nil
func deleteIdentityDomainsMyRequest(d *schema.ResourceData, m interface{}) error {
	return nil
func (s *IdentityDomainsMyRequestResourceCrud) ID() string {
	return *s.Res.Id
func (s *IdentityDomainsMyRequestResourceCrud) Create() error {
	request := oci_identity_domains.CreateMyRequestRequest{}
func (s *IdentityDomainsMyRequestResourceCrud) SetData() error {

func (s *IdentityDomainsMyRequestResourceCrud) mapToMyRequestApprovalDetails(fieldKeyFormat string) (oci_identity_domains.MyRequestApprovalDetails, error) {
	result := oci_identity_domains.MyRequestApprovalDetails{}
func (s *IdentityDomainsMyRequestResourceCrud) mapToMyRequestRequesting(fieldKeyFormat string) (oci_identity_domains.MyRequestRequesting, error) {
	result := oci_identity_domains.MyRequestRequesting{}
func (s *IdentityDomainsMyRequestResourceCrud) mapToMyRequestRequestor(fieldKeyFormat string) (oci_identity_domains.MyRequestRequestor, error) {
	result := oci_identity_domains.MyRequestRequestor{}
func (s *IdentityDomainsMyRequestResourceCrud) mapTotags(fieldKeyFormat string) (oci_identity_domains.Tags, error) {
	result := oci_identity_domains.Tags{}

=== ./internal/service/identity_domains/identity_domains_user_attributes_setting_data_source.go ===
func IdentityDomainsUserAttributesSettingDataSource() *schema.Resource {
	return &schema.Resource{
func readSingularIdentityDomainsUserAttributesSetting(d *schema.ResourceData, m interface{}) error {
	sync := &IdentityDomainsUserAttributesSettingDataSourceCrud{}
func (s *IdentityDomainsUserAttributesSettingDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *IdentityDomainsUserAttributesSettingDataSourceCrud) Get() error {
	request := oci_identity_domains.GetUserAttributesSettingRequest{}
func (s *IdentityDomainsUserAttributesSettingDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/identity_domains/identity_domains_my_smtp_credentials_data_source.go ===
func IdentityDomainsMySmtpCredentialsDataSource() *schema.Resource {
	return &schema.Resource{
func readIdentityDomainsMySmtpCredentials(d *schema.ResourceData, m interface{}) error {
	sync := &IdentityDomainsMySmtpCredentialsDataSourceCrud{}
func (s *IdentityDomainsMySmtpCredentialsDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *IdentityDomainsMySmtpCredentialsDataSourceCrud) Get() error {
	request := oci_identity_domains.ListMySmtpCredentialsRequest{}
func (s *IdentityDomainsMySmtpCredentialsDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/identity_domains/identity_domains_password_policy_data_source.go ===
func IdentityDomainsPasswordPolicyDataSource() *schema.Resource {
	fieldMap := make(map[string]*schema.Schema)
func readSingularIdentityDomainsPasswordPolicy(d *schema.ResourceData, m interface{}) error {
	sync := &IdentityDomainsPasswordPolicyDataSourceCrud{}
func (s *IdentityDomainsPasswordPolicyDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *IdentityDomainsPasswordPolicyDataSourceCrud) Get() error {
	request := oci_identity_domains.GetPasswordPolicyRequest{}
func (s *IdentityDomainsPasswordPolicyDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/identity_domains/identity_domains_user_db_credential_resource.go ===
func IdentityDomainsUserDbCredentialResource() *schema.Resource {
	return &schema.Resource{
func createIdentityDomainsUserDbCredential(d *schema.ResourceData, m interface{}) error {
	sync := &IdentityDomainsUserDbCredentialResourceCrud{}
func readIdentityDomainsUserDbCredential(d *schema.ResourceData, m interface{}) error {
	sync := &IdentityDomainsUserDbCredentialResourceCrud{}
func deleteIdentityDomainsUserDbCredential(d *schema.ResourceData, m interface{}) error {
	sync := &IdentityDomainsUserDbCredentialResourceCrud{}
func (s *IdentityDomainsUserDbCredentialResourceCrud) ID() string {
	return *s.Res.Id
func (s *IdentityDomainsUserDbCredentialResourceCrud) Create() error {
	request := oci_identity_domains.CreateUserDbCredentialRequest{}
func (s *IdentityDomainsUserDbCredentialResourceCrud) Get() error {
	request := oci_identity_domains.GetUserDbCredentialRequest{}
func (s *IdentityDomainsUserDbCredentialResourceCrud) Delete() error {
	request := oci_identity_domains.DeleteUserDbCredentialRequest{}
func (s *IdentityDomainsUserDbCredentialResourceCrud) SetData() error {

func (s *IdentityDomainsUserDbCredentialResourceCrud) mapToExtensionSelfChangeUser(fieldKeyFormat string) (oci_identity_domains.ExtensionSelfChangeUser, error) {
	result := oci_identity_domains.ExtensionSelfChangeUser{}
func (s *IdentityDomainsUserDbCredentialResourceCrud) mapToUserDbCredentialsUser(fieldKeyFormat string) (oci_identity_domains.UserDbCredentialsUser, error) {
	result := oci_identity_domains.UserDbCredentialsUser{}
func (s *IdentityDomainsUserDbCredentialResourceCrud) mapTotags(fieldKeyFormat string) (oci_identity_domains.Tags, error) {
	result := oci_identity_domains.Tags{}

=== ./internal/service/identity_domains/identity_domains_my_user_db_credential_data_source.go ===
func IdentityDomainsMyUserDbCredentialDataSource() *schema.Resource {
	fieldMap := make(map[string]*schema.Schema)
func readSingularIdentityDomainsMyUserDbCredential(d *schema.ResourceData, m interface{}) error {
	sync := &IdentityDomainsMyUserDbCredentialDataSourceCrud{}
func (s *IdentityDomainsMyUserDbCredentialDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *IdentityDomainsMyUserDbCredentialDataSourceCrud) Get() error {
	request := oci_identity_domains.GetMyUserDbCredentialRequest{}
func (s *IdentityDomainsMyUserDbCredentialDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/identity_domains/identity_domains_identity_propagation_trust_data_source.go ===
func IdentityDomainsIdentityPropagationTrustDataSource() *schema.Resource {
	fieldMap := make(map[string]*schema.Schema)
func readSingularIdentityDomainsIdentityPropagationTrust(d *schema.ResourceData, m interface{}) error {
	sync := &IdentityDomainsIdentityPropagationTrustDataSourceCrud{}
func (s *IdentityDomainsIdentityPropagationTrustDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *IdentityDomainsIdentityPropagationTrustDataSourceCrud) Get() error {
	request := oci_identity_domains.GetIdentityPropagationTrustRequest{}
func (s *IdentityDomainsIdentityPropagationTrustDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/identity_domains/identity_domains_cloud_gate_mapping_resource.go ===
func IdentityDomainsCloudGateMappingResource() *schema.Resource {
	return &schema.Resource{
func createIdentityDomainsCloudGateMapping(d *schema.ResourceData, m interface{}) error {
	sync := &IdentityDomainsCloudGateMappingResourceCrud{}
func readIdentityDomainsCloudGateMapping(d *schema.ResourceData, m interface{}) error {
	sync := &IdentityDomainsCloudGateMappingResourceCrud{}
func updateIdentityDomainsCloudGateMapping(d *schema.ResourceData, m interface{}) error {
	sync := &IdentityDomainsCloudGateMappingResourceCrud{}
func deleteIdentityDomainsCloudGateMapping(d *schema.ResourceData, m interface{}) error {
	sync := &IdentityDomainsCloudGateMappingResourceCrud{}
func (s *IdentityDomainsCloudGateMappingResourceCrud) ID() string {
	return *s.Res.Id
func (s *IdentityDomainsCloudGateMappingResourceCrud) Create() error {
	request := oci_identity_domains.CreateCloudGateMappingRequest{}
func (s *IdentityDomainsCloudGateMappingResourceCrud) Get() error {
	request := oci_identity_domains.GetCloudGateMappingRequest{}
func (s *IdentityDomainsCloudGateMappingResourceCrud) Update() error {
	request := oci_identity_domains.PutCloudGateMappingRequest{}
func (s *IdentityDomainsCloudGateMappingResourceCrud) Delete() error {
	request := oci_identity_domains.DeleteCloudGateMappingRequest{}
func (s *IdentityDomainsCloudGateMappingResourceCrud) SetData() error {

func (s *IdentityDomainsCloudGateMappingResourceCrud) mapToCloudGateMappingCloudGate(fieldKeyFormat string) (oci_identity_domains.CloudGateMappingCloudGate, error) {
	result := oci_identity_domains.CloudGateMappingCloudGate{}
func (s *IdentityDomainsCloudGateMappingResourceCrud) mapToCloudGateMappingGatewayApp(fieldKeyFormat string) (oci_identity_domains.CloudGateMappingGatewayApp, error) {
	result := oci_identity_domains.CloudGateMappingGatewayApp{}
func (s *IdentityDomainsCloudGateMappingResourceCrud) mapToCloudGateMappingServer(fieldKeyFormat string) (oci_identity_domains.CloudGateMappingServer, error) {
	result := oci_identity_domains.CloudGateMappingServer{}
func (s *IdentityDomainsCloudGateMappingResourceCrud) mapToCloudGateMappingUpstreamServerGroup(fieldKeyFormat string) (oci_identity_domains.CloudGateMappingUpstreamServerGroup, error) {
	result := oci_identity_domains.CloudGateMappingUpstreamServerGroup{}
func (s *IdentityDomainsCloudGateMappingResourceCrud) mapTotags(fieldKeyFormat string) (oci_identity_domains.Tags, error) {
	result := oci_identity_domains.Tags{}

=== ./internal/service/identity_domains/identity_domains_cloud_gate_server_resource.go ===
func IdentityDomainsCloudGateServerResource() *schema.Resource {
	return &schema.Resource{
func createIdentityDomainsCloudGateServer(d *schema.ResourceData, m interface{}) error {
	sync := &IdentityDomainsCloudGateServerResourceCrud{}
func readIdentityDomainsCloudGateServer(d *schema.ResourceData, m interface{}) error {
	sync := &IdentityDomainsCloudGateServerResourceCrud{}
func updateIdentityDomainsCloudGateServer(d *schema.ResourceData, m interface{}) error {
	sync := &IdentityDomainsCloudGateServerResourceCrud{}
func deleteIdentityDomainsCloudGateServer(d *schema.ResourceData, m interface{}) error {
	sync := &IdentityDomainsCloudGateServerResourceCrud{}
func (s *IdentityDomainsCloudGateServerResourceCrud) ID() string {
	return *s.Res.Id
func (s *IdentityDomainsCloudGateServerResourceCrud) Create() error {
	request := oci_identity_domains.CreateCloudGateServerRequest{}
func (s *IdentityDomainsCloudGateServerResourceCrud) Get() error {
	request := oci_identity_domains.GetCloudGateServerRequest{}
func (s *IdentityDomainsCloudGateServerResourceCrud) Update() error {
	request := oci_identity_domains.PutCloudGateServerRequest{}
func (s *IdentityDomainsCloudGateServerResourceCrud) Delete() error {
	request := oci_identity_domains.DeleteCloudGateServerRequest{}
func (s *IdentityDomainsCloudGateServerResourceCrud) SetData() error {

func (s *IdentityDomainsCloudGateServerResourceCrud) mapToCloudGateServerCloudGate(fieldKeyFormat string) (oci_identity_domains.CloudGateServerCloudGate, error) {
	result := oci_identity_domains.CloudGateServerCloudGate{}
func (s *IdentityDomainsCloudGateServerResourceCrud) mapTotags(fieldKeyFormat string) (oci_identity_domains.Tags, error) {
	result := oci_identity_domains.Tags{}

=== ./internal/service/identity_domains/identity_domains_approval_workflow_assignment_data_source.go ===
func IdentityDomainsApprovalWorkflowAssignmentDataSource() *schema.Resource {
	fieldMap := make(map[string]*schema.Schema)
func readSingularIdentityDomainsApprovalWorkflowAssignment(d *schema.ResourceData, m interface{}) error {
	sync := &IdentityDomainsApprovalWorkflowAssignmentDataSourceCrud{}
func (s *IdentityDomainsApprovalWorkflowAssignmentDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *IdentityDomainsApprovalWorkflowAssignmentDataSourceCrud) Get() error {
	request := oci_identity_domains.GetApprovalWorkflowAssignmentRequest{}
func (s *IdentityDomainsApprovalWorkflowAssignmentDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/identity_domains/identity_domains_kmsi_setting_resource.go ===
func IdentityDomainsKmsiSettingResource() *schema.Resource {
	return &schema.Resource{
func createIdentityDomainsKmsiSetting(d *schema.ResourceData, m interface{}) error {
	sync := &IdentityDomainsKmsiSettingResourceCrud{}
func readIdentityDomainsKmsiSetting(d *schema.ResourceData, m interface{}) error {
	sync := &IdentityDomainsKmsiSettingResourceCrud{}
func updateIdentityDomainsKmsiSetting(d *schema.ResourceData, m interface{}) error {
	sync := &IdentityDomainsKmsiSettingResourceCrud{}
func deleteIdentityDomainsKmsiSetting(d *schema.ResourceData, m interface{}) error {
	return nil
func (s *IdentityDomainsKmsiSettingResourceCrud) ID() string {
	return *s.Res.Id
func (s *IdentityDomainsKmsiSettingResourceCrud) Create() error {
	request := oci_identity_domains.PutKmsiSettingRequest{}
func (s *IdentityDomainsKmsiSettingResourceCrud) Get() error {
	request := oci_identity_domains.GetKmsiSettingRequest{}
func (s *IdentityDomainsKmsiSettingResourceCrud) Update() error {
	request := oci_identity_domains.PutKmsiSettingRequest{}
func (s *IdentityDomainsKmsiSettingResourceCrud) SetData() error {

func (s *IdentityDomainsKmsiSettingResourceCrud) mapTotags(fieldKeyFormat string) (oci_identity_domains.Tags, error) {
	result := oci_identity_domains.Tags{}

=== ./internal/service/identity_domains/identity_domains_grant_resource.go ===
func IdentityDomainsGrantResource() *schema.Resource {
	return &schema.Resource{
func createIdentityDomainsGrant(d *schema.ResourceData, m interface{}) error {
	sync := &IdentityDomainsGrantResourceCrud{}
func readIdentityDomainsGrant(d *schema.ResourceData, m interface{}) error {
	sync := &IdentityDomainsGrantResourceCrud{}
func deleteIdentityDomainsGrant(d *schema.ResourceData, m interface{}) error {
	sync := &IdentityDomainsGrantResourceCrud{}
func (s *IdentityDomainsGrantResourceCrud) ID() string {
	return *s.Res.Id
func (s *IdentityDomainsGrantResourceCrud) Create() error {
	request := oci_identity_domains.CreateGrantRequest{}
func (s *IdentityDomainsGrantResourceCrud) Get() error {
	request := oci_identity_domains.GetGrantRequest{}
func (s *IdentityDomainsGrantResourceCrud) Delete() error {
	request := oci_identity_domains.DeleteGrantRequest{}
func (s *IdentityDomainsGrantResourceCrud) SetData() error {

func (s *IdentityDomainsGrantResourceCrud) mapToGrantApp(fieldKeyFormat string) (oci_identity_domains.GrantApp, error) {
	result := oci_identity_domains.GrantApp{}
func (s *IdentityDomainsGrantResourceCrud) mapToGrantAppEntitlementCollection(fieldKeyFormat string) (oci_identity_domains.GrantAppEntitlementCollection, error) {
	result := oci_identity_domains.GrantAppEntitlementCollection{}
func (s *IdentityDomainsGrantResourceCrud) mapToGrantEntitlement(fieldKeyFormat string) (oci_identity_domains.GrantEntitlement, error) {
	result := oci_identity_domains.GrantEntitlement{}
func (s *IdentityDomainsGrantResourceCrud) mapToGrantGrantee(fieldKeyFormat string) (oci_identity_domains.GrantGrantee, error) {
	result := oci_identity_domains.GrantGrantee{}
func (s *IdentityDomainsGrantResourceCrud) mapToTags(fieldKeyFormat string) (oci_identity_domains.Tags, error) {
	result := oci_identity_domains.Tags{}

=== ./internal/service/identity_domains/identity_domains_oci_console_sign_on_policy_consents_data_source.go ===
func IdentityDomainsOciConsoleSignOnPolicyConsentsDataSource() *schema.Resource {
	return &schema.Resource{
func readIdentityDomainsOciConsoleSignOnPolicyConsents(d *schema.ResourceData, m interface{}) error {
	sync := &IdentityDomainsOciConsoleSignOnPolicyConsentsDataSourceCrud{}
func (s *IdentityDomainsOciConsoleSignOnPolicyConsentsDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *IdentityDomainsOciConsoleSignOnPolicyConsentsDataSourceCrud) Get() error {
	request := oci_identity_domains.ListOciConsoleSignOnPolicyConsentsRequest{}
func (s *IdentityDomainsOciConsoleSignOnPolicyConsentsDataSourceCrud) SetData() error {
	if s.Res == nil {
func OciConsoleSignOnPolicyConsentModifiedResourceToMap(obj *oci_identity_domains.OciConsoleSignOnPolicyConsentModifiedResource) map[string]interface{} {
	result := map[string]interface{}{}
func OciConsoleSignOnPolicyConsentPolicyResourceToMap(obj *oci_identity_domains.OciConsoleSignOnPolicyConsentPolicyResource) map[string]interface{} {
	result := map[string]interface{}{}

=== ./internal/service/identity_domains/identity_domains_dynamic_resource_group_data_source.go ===
func IdentityDomainsDynamicResourceGroupDataSource() *schema.Resource {
	fieldMap := make(map[string]*schema.Schema)
func readSingularIdentityDomainsDynamicResourceGroup(d *schema.ResourceData, m interface{}) error {
	sync := &IdentityDomainsDynamicResourceGroupDataSourceCrud{}
func (s *IdentityDomainsDynamicResourceGroupDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *IdentityDomainsDynamicResourceGroupDataSourceCrud) Get() error {
	request := oci_identity_domains.GetDynamicResourceGroupRequest{}
func (s *IdentityDomainsDynamicResourceGroupDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/identity_domains/identity_domains_api_key_data_source.go ===
func IdentityDomainsApiKeyDataSource() *schema.Resource {
	fieldMap := make(map[string]*schema.Schema)
func readSingularIdentityDomainsApiKey(d *schema.ResourceData, m interface{}) error {
	sync := &IdentityDomainsApiKeyDataSourceCrud{}
func (s *IdentityDomainsApiKeyDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *IdentityDomainsApiKeyDataSourceCrud) Get() error {
	request := oci_identity_domains.GetApiKeyRequest{}
func (s *IdentityDomainsApiKeyDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/identity_domains/identity_domains_customer_secret_key_resource.go ===
func IdentityDomainsCustomerSecretKeyResource() *schema.Resource {
	return &schema.Resource{
func createIdentityDomainsCustomerSecretKey(d *schema.ResourceData, m interface{}) error {
	sync := &IdentityDomainsCustomerSecretKeyResourceCrud{}
func readIdentityDomainsCustomerSecretKey(d *schema.ResourceData, m interface{}) error {
	sync := &IdentityDomainsCustomerSecretKeyResourceCrud{}
func deleteIdentityDomainsCustomerSecretKey(d *schema.ResourceData, m interface{}) error {
	sync := &IdentityDomainsCustomerSecretKeyResourceCrud{}
func (s *IdentityDomainsCustomerSecretKeyResourceCrud) ID() string {
	return *s.Res.Id
func (s *IdentityDomainsCustomerSecretKeyResourceCrud) Create() error {
	request := oci_identity_domains.CreateCustomerSecretKeyRequest{}
func (s *IdentityDomainsCustomerSecretKeyResourceCrud) Get() error {
	request := oci_identity_domains.GetCustomerSecretKeyRequest{}
func (s *IdentityDomainsCustomerSecretKeyResourceCrud) Delete() error {
	request := oci_identity_domains.DeleteCustomerSecretKeyRequest{}
func (s *IdentityDomainsCustomerSecretKeyResourceCrud) SetData() error {

func (s *IdentityDomainsCustomerSecretKeyResourceCrud) mapToCustomerSecretKeyUser(fieldKeyFormat string) (oci_identity_domains.CustomerSecretKeyUser, error) {
	result := oci_identity_domains.CustomerSecretKeyUser{}
func (s *IdentityDomainsCustomerSecretKeyResourceCrud) mapToExtensionSelfChangeUser(fieldKeyFormat string) (oci_identity_domains.ExtensionSelfChangeUser, error) {
	result := oci_identity_domains.ExtensionSelfChangeUser{}
func (s *IdentityDomainsCustomerSecretKeyResourceCrud) mapTotags(fieldKeyFormat string) (oci_identity_domains.Tags, error) {
	result := oci_identity_domains.Tags{}

=== ./internal/service/identity_domains/identity_domains_oauth_partner_certificate_resource.go ===
func IdentityDomainsOAuthPartnerCertificateResource() *schema.Resource {
	return &schema.Resource{
func createIdentityDomainsOAuthPartnerCertificate(d *schema.ResourceData, m interface{}) error {
	sync := &IdentityDomainsOAuthPartnerCertificateResourceCrud{}
func readIdentityDomainsOAuthPartnerCertificate(d *schema.ResourceData, m interface{}) error {
	sync := &IdentityDomainsOAuthPartnerCertificateResourceCrud{}
func deleteIdentityDomainsOAuthPartnerCertificate(d *schema.ResourceData, m interface{}) error {
	sync := &IdentityDomainsOAuthPartnerCertificateResourceCrud{}
func (s *IdentityDomainsOAuthPartnerCertificateResourceCrud) ID() string {
	return *s.Res.Id
func (s *IdentityDomainsOAuthPartnerCertificateResourceCrud) Create() error {
	request := oci_identity_domains.CreateOAuthPartnerCertificateRequest{}
func (s *IdentityDomainsOAuthPartnerCertificateResourceCrud) Get() error {
	request := oci_identity_domains.GetOAuthPartnerCertificateRequest{}
func (s *IdentityDomainsOAuthPartnerCertificateResourceCrud) Delete() error {
	request := oci_identity_domains.DeleteOAuthPartnerCertificateRequest{}
func (s *IdentityDomainsOAuthPartnerCertificateResourceCrud) SetData() error {

func (s *IdentityDomainsOAuthPartnerCertificateResourceCrud) mapTotags(fieldKeyFormat string) (oci_identity_domains.Tags, error) {
	result := oci_identity_domains.Tags{}

=== ./internal/service/identity_domains/identity_domains_security_question_data_source.go ===
func IdentityDomainsSecurityQuestionDataSource() *schema.Resource {
	fieldMap := make(map[string]*schema.Schema)
func readSingularIdentityDomainsSecurityQuestion(d *schema.ResourceData, m interface{}) error {
	sync := &IdentityDomainsSecurityQuestionDataSourceCrud{}
func (s *IdentityDomainsSecurityQuestionDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *IdentityDomainsSecurityQuestionDataSourceCrud) Get() error {
	request := oci_identity_domains.GetSecurityQuestionRequest{}
func (s *IdentityDomainsSecurityQuestionDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/identity_domains/identity_domains_my_oauth2client_credential_data_source.go ===
func IdentityDomainsMyOAuth2ClientCredentialDataSource() *schema.Resource {
	fieldMap := make(map[string]*schema.Schema)
func readSingularIdentityDomainsMyOAuth2ClientCredential(d *schema.ResourceData, m interface{}) error {
	sync := &IdentityDomainsMyOAuth2ClientCredentialDataSourceCrud{}
func (s *IdentityDomainsMyOAuth2ClientCredentialDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *IdentityDomainsMyOAuth2ClientCredentialDataSourceCrud) Get() error {
	request := oci_identity_domains.GetMyOAuth2ClientCredentialRequest{}
func (s *IdentityDomainsMyOAuth2ClientCredentialDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/identity_domains/identity_domains_cloud_gate_mapping_data_source.go ===
func IdentityDomainsCloudGateMappingDataSource() *schema.Resource {
	fieldMap := make(map[string]*schema.Schema)
func readSingularIdentityDomainsCloudGateMapping(d *schema.ResourceData, m interface{}) error {
	sync := &IdentityDomainsCloudGateMappingDataSourceCrud{}
func (s *IdentityDomainsCloudGateMappingDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *IdentityDomainsCloudGateMappingDataSourceCrud) Get() error {
	request := oci_identity_domains.GetCloudGateMappingRequest{}
func (s *IdentityDomainsCloudGateMappingDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/identity_domains/identity_domains_password_policy_resource.go ===
func IdentityDomainsPasswordPolicyResource() *schema.Resource {
	return &schema.Resource{
func createIdentityDomainsPasswordPolicy(d *schema.ResourceData, m interface{}) error {
	sync := &IdentityDomainsPasswordPolicyResourceCrud{}
func readIdentityDomainsPasswordPolicy(d *schema.ResourceData, m interface{}) error {
	sync := &IdentityDomainsPasswordPolicyResourceCrud{}
func updateIdentityDomainsPasswordPolicy(d *schema.ResourceData, m interface{}) error {
	sync := &IdentityDomainsPasswordPolicyResourceCrud{}
func deleteIdentityDomainsPasswordPolicy(d *schema.ResourceData, m interface{}) error {
	sync := &IdentityDomainsPasswordPolicyResourceCrud{}
func (s *IdentityDomainsPasswordPolicyResourceCrud) ID() string {
	return *s.Res.Id
func (s *IdentityDomainsPasswordPolicyResourceCrud) Create() error {
	request := oci_identity_domains.CreatePasswordPolicyRequest{}
func (s *IdentityDomainsPasswordPolicyResourceCrud) Get() error {
	request := oci_identity_domains.GetPasswordPolicyRequest{}
func (s *IdentityDomainsPasswordPolicyResourceCrud) Update() error {
	request := oci_identity_domains.PutPasswordPolicyRequest{}
func (s *IdentityDomainsPasswordPolicyResourceCrud) Delete() error {
	request := oci_identity_domains.DeletePasswordPolicyRequest{}
func (s *IdentityDomainsPasswordPolicyResourceCrud) SetData() error {

func (s *IdentityDomainsPasswordPolicyResourceCrud) mapToPasswordPolicyGroups(fieldKeyFormat string) (oci_identity_domains.PasswordPolicyGroups, error) {
	result := oci_identity_domains.PasswordPolicyGroups{}
func (s *IdentityDomainsPasswordPolicyResourceCrud) mapTotags(fieldKeyFormat string) (oci_identity_domains.Tags, error) {
	result := oci_identity_domains.Tags{}

=== ./internal/service/identity_domains/register_resource.go ===
func RegisterResource() {
	tfresource.RegisterResource("oci_identity_domains_account_recovery_setting", IdentityDomainsAccountRecoverySettingResource())

=== ./internal/service/identity_domains/identity_domains_grants_data_source.go ===
func IdentityDomainsGrantsDataSource() *schema.Resource {
	return &schema.Resource{
func readIdentityDomainsGrants(d *schema.ResourceData, m interface{}) error {
	sync := &IdentityDomainsGrantsDataSourceCrud{}
func (s *IdentityDomainsGrantsDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *IdentityDomainsGrantsDataSourceCrud) Get() error {
	request := oci_identity_domains.ListGrantsRequest{}
func (s *IdentityDomainsGrantsDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/identity_domains/identity_domains_settings_data_source.go ===
func IdentityDomainsSettingsDataSource() *schema.Resource {
	return &schema.Resource{
func readIdentityDomainsSettings(d *schema.ResourceData, m interface{}) error {
	sync := &IdentityDomainsSettingsDataSourceCrud{}
func (s *IdentityDomainsSettingsDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *IdentityDomainsSettingsDataSourceCrud) Get() error {
	request := oci_identity_domains.ListSettingsRequest{}
func (s *IdentityDomainsSettingsDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/identity_domains/identity_domains_cloud_gate_server_data_source.go ===
func IdentityDomainsCloudGateServerDataSource() *schema.Resource {
	fieldMap := make(map[string]*schema.Schema)
func readSingularIdentityDomainsCloudGateServer(d *schema.ResourceData, m interface{}) error {
	sync := &IdentityDomainsCloudGateServerDataSourceCrud{}
func (s *IdentityDomainsCloudGateServerDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *IdentityDomainsCloudGateServerDataSourceCrud) Get() error {
	request := oci_identity_domains.GetCloudGateServerRequest{}
func (s *IdentityDomainsCloudGateServerDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/identity_domains/identity_domains_oci_console_sign_on_policy_consent_data_source.go ===
func IdentityDomainsOciConsoleSignOnPolicyConsentDataSource() *schema.Resource {
	return &schema.Resource{
func readSingularIdentityDomainsOciConsoleSignOnPolicyConsent(d *schema.ResourceData, m interface{}) error {
	sync := &IdentityDomainsOciConsoleSignOnPolicyConsentDataSourceCrud{}
func (s *IdentityDomainsOciConsoleSignOnPolicyConsentDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *IdentityDomainsOciConsoleSignOnPolicyConsentDataSourceCrud) Get() error {
	request := oci_identity_domains.GetOciConsoleSignOnPolicyConsentRequest{}
func (s *IdentityDomainsOciConsoleSignOnPolicyConsentDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/identity_domains/identity_domains_app_data_source.go ===
func IdentityDomainsAppDataSource() *schema.Resource {
	fieldMap := make(map[string]*schema.Schema)
func readSingularIdentityDomainsApp(d *schema.ResourceData, m interface{}) error {
	sync := &IdentityDomainsAppDataSourceCrud{}
func (s *IdentityDomainsAppDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *IdentityDomainsAppDataSourceCrud) Get() error {
	request := oci_identity_domains.GetAppRequest{}
func (s *IdentityDomainsAppDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/identity_domains/identity_domains_approval_workflow_assignment_resource.go ===
func IdentityDomainsApprovalWorkflowAssignmentResource() *schema.Resource {
	return &schema.Resource{
func createIdentityDomainsApprovalWorkflowAssignment(d *schema.ResourceData, m interface{}) error {
	sync := &IdentityDomainsApprovalWorkflowAssignmentResourceCrud{}
func readIdentityDomainsApprovalWorkflowAssignment(d *schema.ResourceData, m interface{}) error {
	sync := &IdentityDomainsApprovalWorkflowAssignmentResourceCrud{}
func deleteIdentityDomainsApprovalWorkflowAssignment(d *schema.ResourceData, m interface{}) error {
	sync := &IdentityDomainsApprovalWorkflowAssignmentResourceCrud{}
func (s *IdentityDomainsApprovalWorkflowAssignmentResourceCrud) ID() string {
	return *s.Res.Id
func (s *IdentityDomainsApprovalWorkflowAssignmentResourceCrud) Create() error {
	request := oci_identity_domains.CreateApprovalWorkflowAssignmentRequest{}
func (s *IdentityDomainsApprovalWorkflowAssignmentResourceCrud) Get() error {
	request := oci_identity_domains.GetApprovalWorkflowAssignmentRequest{}
func (s *IdentityDomainsApprovalWorkflowAssignmentResourceCrud) Delete() error {
	request := oci_identity_domains.DeleteApprovalWorkflowAssignmentRequest{}
func (s *IdentityDomainsApprovalWorkflowAssignmentResourceCrud) SetData() error {

func (s *IdentityDomainsApprovalWorkflowAssignmentResourceCrud) mapToApprovalWorkflowAssignmentApprovalWorkflow(fieldKeyFormat string) (oci_identity_domains.ApprovalWorkflowAssignmentApprovalWorkflow, error) {
	result := oci_identity_domains.ApprovalWorkflowAssignmentApprovalWorkflow{}
func ApprovalWorkflowAssignmentApprovalWorkflowToMap(obj *oci_identity_domains.ApprovalWorkflowAssignmentApprovalWorkflow, s *IdentityDomainsApprovalWorkflowAssignmentResourceCrud) map[string]interface{} {
	result := map[string]interface{}{}
func (s *IdentityDomainsApprovalWorkflowAssignmentResourceCrud) mapToApprovalWorkflowAssignmentAssignedTo(fieldKeyFormat string) (oci_identity_domains.ApprovalWorkflowAssignmentAssignedTo, error) {
	result := oci_identity_domains.ApprovalWorkflowAssignmentAssignedTo{}
func (s *IdentityDomainsApprovalWorkflowAssignmentResourceCrud) mapTotags(fieldKeyFormat string) (oci_identity_domains.Tags, error) {
	result := oci_identity_domains.Tags{}

=== ./internal/service/identity_domains/identity_domains_my_requests_data_source.go ===
func IdentityDomainsMyRequestsDataSource() *schema.Resource {
	return &schema.Resource{
func readIdentityDomainsMyRequests(d *schema.ResourceData, m interface{}) error {
	sync := &IdentityDomainsMyRequestsDataSourceCrud{}
func (s *IdentityDomainsMyRequestsDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *IdentityDomainsMyRequestsDataSourceCrud) Get() error {
	request := oci_identity_domains.ListMyRequestsRequest{}
func (s *IdentityDomainsMyRequestsDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/identity_domains/identity_domains_condition_data_source.go ===
func IdentityDomainsConditionDataSource() *schema.Resource {
	fieldMap := make(map[string]*schema.Schema)
func readSingularIdentityDomainsCondition(d *schema.ResourceData, m interface{}) error {
	sync := &IdentityDomainsConditionDataSourceCrud{}
func (s *IdentityDomainsConditionDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *IdentityDomainsConditionDataSourceCrud) Get() error {
	request := oci_identity_domains.GetConditionRequest{}
func (s *IdentityDomainsConditionDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/identity_domains/identity_domains_identity_setting_resource.go ===
func IdentityDomainsIdentitySettingResource() *schema.Resource {
	return &schema.Resource{
func createIdentityDomainsIdentitySetting(d *schema.ResourceData, m interface{}) error {
	sync := &IdentityDomainsIdentitySettingResourceCrud{}
func readIdentityDomainsIdentitySetting(d *schema.ResourceData, m interface{}) error {
	sync := &IdentityDomainsIdentitySettingResourceCrud{}
func updateIdentityDomainsIdentitySetting(d *schema.ResourceData, m interface{}) error {
	sync := &IdentityDomainsIdentitySettingResourceCrud{}
func deleteIdentityDomainsIdentitySetting(d *schema.ResourceData, m interface{}) error {
	return nil
func (s *IdentityDomainsIdentitySettingResourceCrud) ID() string {
	return *s.Res.Id
func (s *IdentityDomainsIdentitySettingResourceCrud) Create() error {
	request := oci_identity_domains.PutIdentitySettingRequest{}
func (s *IdentityDomainsIdentitySettingResourceCrud) Get() error {
	request := oci_identity_domains.GetIdentitySettingRequest{}
func (s *IdentityDomainsIdentitySettingResourceCrud) Update() error {
	request := oci_identity_domains.PutIdentitySettingRequest{}
func (s *IdentityDomainsIdentitySettingResourceCrud) SetData() error {

func (s *IdentityDomainsIdentitySettingResourceCrud) mapToIdentitySettingsMyProfile(fieldKeyFormat string) (oci_identity_domains.IdentitySettingsMyProfile, error) {
	result := oci_identity_domains.IdentitySettingsMyProfile{}
func (s *IdentityDomainsIdentitySettingResourceCrud) mapToIdentitySettingsPOSIXGid(fieldKeyFormat string) (oci_identity_domains.IdentitySettingsPosixGid, error) {
	result := oci_identity_domains.IdentitySettingsPosixGid{}
func (s *IdentityDomainsIdentitySettingResourceCrud) mapToIdentitySettingsPOSIXUid(fieldKeyFormat string) (oci_identity_domains.IdentitySettingsPosixUid, error) {
	result := oci_identity_domains.IdentitySettingsPosixUid{}
func (s *IdentityDomainsIdentitySettingResourceCrud) mapToIdentitySettingsTokens(fieldKeyFormat string) (oci_identity_domains.IdentitySettingsTokens, error) {
	result := oci_identity_domains.IdentitySettingsTokens{}
func (s *IdentityDomainsIdentitySettingResourceCrud) mapTotags(fieldKeyFormat string) (oci_identity_domains.Tags, error) {
	result := oci_identity_domains.Tags{}

=== ./internal/service/service_catalog/service_catalog_private_application_package_data_source.go ===
func ServiceCatalogPrivateApplicationPackageDataSource() *schema.Resource {
	return &schema.Resource{
func readSingularServiceCatalogPrivateApplicationPackage(d *schema.ResourceData, m interface{}) error {
	sync := &ServiceCatalogPrivateApplicationPackageDataSourceCrud{}
func (s *ServiceCatalogPrivateApplicationPackageDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *ServiceCatalogPrivateApplicationPackageDataSourceCrud) Get() error {
	request := oci_service_catalog.GetPrivateApplicationPackageRequest{}
func (s *ServiceCatalogPrivateApplicationPackageDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/service_catalog/service_catalog_service_catalog_associations_data_source.go ===
func ServiceCatalogServiceCatalogAssociationsDataSource() *schema.Resource {
	return &schema.Resource{
func readServiceCatalogServiceCatalogAssociations(d *schema.ResourceData, m interface{}) error {
	sync := &ServiceCatalogServiceCatalogAssociationsDataSourceCrud{}
func (s *ServiceCatalogServiceCatalogAssociationsDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *ServiceCatalogServiceCatalogAssociationsDataSourceCrud) Get() error {
	request := oci_service_catalog.ListServiceCatalogAssociationsRequest{}
func (s *ServiceCatalogServiceCatalogAssociationsDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/service_catalog/service_catalog_service_catalogs_data_source.go ===
func ServiceCatalogServiceCatalogsDataSource() *schema.Resource {
	return &schema.Resource{
func readServiceCatalogServiceCatalogs(d *schema.ResourceData, m interface{}) error {
	sync := &ServiceCatalogServiceCatalogsDataSourceCrud{}
func (s *ServiceCatalogServiceCatalogsDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *ServiceCatalogServiceCatalogsDataSourceCrud) Get() error {
	request := oci_service_catalog.ListServiceCatalogsRequest{}
func (s *ServiceCatalogServiceCatalogsDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/service_catalog/service_catalog_service_catalog_data_source.go ===
func ServiceCatalogServiceCatalogDataSource() *schema.Resource {
	fieldMap := make(map[string]*schema.Schema)
func readSingularServiceCatalogServiceCatalog(d *schema.ResourceData, m interface{}) error {
	sync := &ServiceCatalogServiceCatalogDataSourceCrud{}
func (s *ServiceCatalogServiceCatalogDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *ServiceCatalogServiceCatalogDataSourceCrud) Get() error {
	request := oci_service_catalog.GetServiceCatalogRequest{}
func (s *ServiceCatalogServiceCatalogDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/service_catalog/service_catalog_private_application_data_source.go ===
func ServiceCatalogPrivateApplicationDataSource() *schema.Resource {
	fieldMap := make(map[string]*schema.Schema)
func readSingularServiceCatalogPrivateApplication(d *schema.ResourceData, m interface{}) error {
	sync := &ServiceCatalogPrivateApplicationDataSourceCrud{}
func (s *ServiceCatalogPrivateApplicationDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *ServiceCatalogPrivateApplicationDataSourceCrud) Get() error {
	request := oci_service_catalog.GetPrivateApplicationRequest{}
func (s *ServiceCatalogPrivateApplicationDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/service_catalog/service_catalog_service_catalog_association_data_source.go ===
func ServiceCatalogServiceCatalogAssociationDataSource() *schema.Resource {
	fieldMap := make(map[string]*schema.Schema)
func readSingularServiceCatalogServiceCatalogAssociation(d *schema.ResourceData, m interface{}) error {
	sync := &ServiceCatalogServiceCatalogAssociationDataSourceCrud{}
func (s *ServiceCatalogServiceCatalogAssociationDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *ServiceCatalogServiceCatalogAssociationDataSourceCrud) Get() error {
	request := oci_service_catalog.GetServiceCatalogAssociationRequest{}
func (s *ServiceCatalogServiceCatalogAssociationDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/service_catalog/service_catalog_service_catalog_association_resource.go ===
func ServiceCatalogServiceCatalogAssociationResource() *schema.Resource {
	return &schema.Resource{
func createServiceCatalogServiceCatalogAssociation(d *schema.ResourceData, m interface{}) error {
	sync := &ServiceCatalogServiceCatalogAssociationResourceCrud{}
func readServiceCatalogServiceCatalogAssociation(d *schema.ResourceData, m interface{}) error {
	sync := &ServiceCatalogServiceCatalogAssociationResourceCrud{}
func deleteServiceCatalogServiceCatalogAssociation(d *schema.ResourceData, m interface{}) error {
	sync := &ServiceCatalogServiceCatalogAssociationResourceCrud{}
func (s *ServiceCatalogServiceCatalogAssociationResourceCrud) ID() string {
	return *s.Res.Id
func (s *ServiceCatalogServiceCatalogAssociationResourceCrud) Create() error {
	request := oci_service_catalog.CreateServiceCatalogAssociationRequest{}
func (s *ServiceCatalogServiceCatalogAssociationResourceCrud) Get() error {
	request := oci_service_catalog.GetServiceCatalogAssociationRequest{}
func (s *ServiceCatalogServiceCatalogAssociationResourceCrud) Delete() error {
	request := oci_service_catalog.DeleteServiceCatalogAssociationRequest{}
func (s *ServiceCatalogServiceCatalogAssociationResourceCrud) SetData() error {
	if s.Res.EntityId != nil {

=== ./internal/service/service_catalog/service_catalog_service_catalog_resource.go ===
func ServiceCatalogServiceCatalogResource() *schema.Resource {
	return &schema.Resource{
func createServiceCatalogServiceCatalog(d *schema.ResourceData, m interface{}) error {
	sync := &ServiceCatalogServiceCatalogResourceCrud{}
func readServiceCatalogServiceCatalog(d *schema.ResourceData, m interface{}) error {
	sync := &ServiceCatalogServiceCatalogResourceCrud{}
func updateServiceCatalogServiceCatalog(d *schema.ResourceData, m interface{}) error {
	sync := &ServiceCatalogServiceCatalogResourceCrud{}
func deleteServiceCatalogServiceCatalog(d *schema.ResourceData, m interface{}) error {
	sync := &ServiceCatalogServiceCatalogResourceCrud{}
func (s *ServiceCatalogServiceCatalogResourceCrud) ID() string {
	return *s.Res.Id
func (s *ServiceCatalogServiceCatalogResourceCrud) CreatedPending() []string {
	return []string{}
func (s *ServiceCatalogServiceCatalogResourceCrud) CreatedTarget() []string {
	return []string{
func (s *ServiceCatalogServiceCatalogResourceCrud) DeletedPending() []string {
	return []string{}
func (s *ServiceCatalogServiceCatalogResourceCrud) DeletedTarget() []string {
	return []string{
func (s *ServiceCatalogServiceCatalogResourceCrud) Create() error {
	request := oci_service_catalog.CreateServiceCatalogRequest{}
func (s *ServiceCatalogServiceCatalogResourceCrud) Get() error {
	request := oci_service_catalog.GetServiceCatalogRequest{}
func (s *ServiceCatalogServiceCatalogResourceCrud) Update() error {
	if compartment, ok := s.D.GetOkExists("compartment_id"); ok && s.D.HasChange("compartment_id") {
func (s *ServiceCatalogServiceCatalogResourceCrud) Delete() error {
	request := oci_service_catalog.DeleteServiceCatalogRequest{}
func (s *ServiceCatalogServiceCatalogResourceCrud) SetData() error {
	if s.Res.CompartmentId != nil {
func (s *ServiceCatalogServiceCatalogResourceCrud) updateCompartment(compartment interface{}) error {
	changeCompartmentRequest := oci_service_catalog.ChangeServiceCatalogCompartmentRequest{}

=== ./internal/service/service_catalog/service_catalog_private_applications_data_source.go ===
func ServiceCatalogPrivateApplicationsDataSource() *schema.Resource {
	return &schema.Resource{
func readServiceCatalogPrivateApplications(d *schema.ResourceData, m interface{}) error {
	sync := &ServiceCatalogPrivateApplicationsDataSourceCrud{}
func (s *ServiceCatalogPrivateApplicationsDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *ServiceCatalogPrivateApplicationsDataSourceCrud) Get() error {
	request := oci_service_catalog.ListPrivateApplicationsRequest{}
func (s *ServiceCatalogPrivateApplicationsDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/service_catalog/register_resource.go ===
func RegisterResource() {
	tfresource.RegisterResource("oci_service_catalog_private_application", ServiceCatalogPrivateApplicationResource())

=== ./internal/service/service_catalog/service_catalog_private_application_packages_data_source.go ===
func ServiceCatalogPrivateApplicationPackagesDataSource() *schema.Resource {
	return &schema.Resource{
func readServiceCatalogPrivateApplicationPackages(d *schema.ResourceData, m interface{}) error {
	sync := &ServiceCatalogPrivateApplicationPackagesDataSourceCrud{}
func (s *ServiceCatalogPrivateApplicationPackagesDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *ServiceCatalogPrivateApplicationPackagesDataSourceCrud) Get() error {
	request := oci_service_catalog.ListPrivateApplicationPackagesRequest{}
func (s *ServiceCatalogPrivateApplicationPackagesDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/service_catalog/service_catalog_private_application_resource.go ===
func ServiceCatalogPrivateApplicationResource() *schema.Resource {
	return &schema.Resource{
func createServiceCatalogPrivateApplication(d *schema.ResourceData, m interface{}) error {
	sync := &ServiceCatalogPrivateApplicationResourceCrud{}
func readServiceCatalogPrivateApplication(d *schema.ResourceData, m interface{}) error {
	sync := &ServiceCatalogPrivateApplicationResourceCrud{}
func updateServiceCatalogPrivateApplication(d *schema.ResourceData, m interface{}) error {
	sync := &ServiceCatalogPrivateApplicationResourceCrud{}
func deleteServiceCatalogPrivateApplication(d *schema.ResourceData, m interface{}) error {
	sync := &ServiceCatalogPrivateApplicationResourceCrud{}
func (s *ServiceCatalogPrivateApplicationResourceCrud) ID() string {
	return *s.Res.Id
func (s *ServiceCatalogPrivateApplicationResourceCrud) CreatedPending() []string {
	return []string{
func (s *ServiceCatalogPrivateApplicationResourceCrud) CreatedTarget() []string {
	return []string{
func (s *ServiceCatalogPrivateApplicationResourceCrud) DeletedPending() []string {
	return []string{
func (s *ServiceCatalogPrivateApplicationResourceCrud) DeletedTarget() []string {
	return []string{
func (s *ServiceCatalogPrivateApplicationResourceCrud) Create() error {
	request := oci_service_catalog.CreatePrivateApplicationRequest{}
func (s *ServiceCatalogPrivateApplicationResourceCrud) getPrivateApplicationFromWorkRequest(workId *string, retryPolicy *oci_common.RetryPolicy,
	actionTypeEnum oci_service_catalog.ActionTypeEnum, timeout time.Duration) error {
func (s *ServiceCatalogPrivateApplicationResourceCrud) Get() error {
	request := oci_service_catalog.GetPrivateApplicationRequest{}
func (s *ServiceCatalogPrivateApplicationResourceCrud) Update() error {
	if compartment, ok := s.D.GetOkExists("compartment_id"); ok && s.D.HasChange("compartment_id") {
func (s *ServiceCatalogPrivateApplicationResourceCrud) Delete() error {
	request := oci_service_catalog.DeletePrivateApplicationRequest{}
func (s *ServiceCatalogPrivateApplicationResourceCrud) SetData() error {
	if s.Res.CompartmentId != nil {
func (s *ServiceCatalogPrivateApplicationResourceCrud) mapToCreatePrivateApplicationPackage(fieldKeyFormat string) (oci_service_catalog.CreatePrivateApplicationPackage, error) {
	var baseObject oci_service_catalog.CreatePrivateApplicationPackage
func (s *ServiceCatalogPrivateApplicationResourceCrud) updateCompartment(compartment interface{}) error {
	changeCompartmentRequest := oci_service_catalog.ChangePrivateApplicationCompartmentRequest{}

=== ./internal/service/visual_builder/visual_builder_vb_instance_applications_data_source.go ===
func VisualBuilderVbInstanceApplicationsDataSource() *schema.Resource {
	return &schema.Resource{
func readVisualBuilderVbInstanceApplication(d *schema.ResourceData, m interface{}) error {
	sync := &VisualBuilderVbInstanceApplicationsDataSourceCrud{}
func (s *VisualBuilderVbInstanceApplicationsDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *VisualBuilderVbInstanceApplicationsDataSourceCrud) Get() error {
	request := oci_visual_builder.RequestSummarizedApplicationsRequest{}
func (s *VisualBuilderVbInstanceApplicationsDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/visual_builder/visual_builder_vb_instance_data_source.go ===
func VisualBuilderVbInstanceDataSource() *schema.Resource {
	fieldMap := make(map[string]*schema.Schema)
func readSingularVisualBuilderVbInstance(d *schema.ResourceData, m interface{}) error {
	sync := &VisualBuilderVbInstanceDataSourceCrud{}
func (s *VisualBuilderVbInstanceDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *VisualBuilderVbInstanceDataSourceCrud) Get() error {
	request := oci_visual_builder.GetVbInstanceRequest{}
func (s *VisualBuilderVbInstanceDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/visual_builder/visual_builder_vb_instance_resource.go ===
func VisualBuilderVbInstanceResource() *schema.Resource {
	return &schema.Resource{
func createVisualBuilderVbInstance(d *schema.ResourceData, m interface{}) error {
	sync := &VisualBuilderVbInstanceResourceCrud{}
func readVisualBuilderVbInstance(d *schema.ResourceData, m interface{}) error {
	sync := &VisualBuilderVbInstanceResourceCrud{}
func updateVisualBuilderVbInstance(d *schema.ResourceData, m interface{}) error {
	sync := &VisualBuilderVbInstanceResourceCrud{}
func deleteVisualBuilderVbInstance(d *schema.ResourceData, m interface{}) error {
	sync := &VisualBuilderVbInstanceResourceCrud{}
func (s *VisualBuilderVbInstanceResourceCrud) ID() string {
	return *s.Res.Id
func (s *VisualBuilderVbInstanceResourceCrud) CreatedPending() []string {
	return []string{
func (s *VisualBuilderVbInstanceResourceCrud) CreatedTarget() []string {
	return []string{
func (s *VisualBuilderVbInstanceResourceCrud) DeletedPending() []string {
	return []string{
func (s *VisualBuilderVbInstanceResourceCrud) DeletedTarget() []string {
	return []string{
func (s *VisualBuilderVbInstanceResourceCrud) Create() error {
	request := oci_visual_builder.CreateVbInstanceRequest{}
func (s *VisualBuilderVbInstanceResourceCrud) getVbInstanceFromWorkRequest(workId *string, retryPolicy *oci_common.RetryPolicy,
	actionTypeEnum oci_visual_builder.WorkRequestResourceActionTypeEnum, timeout time.Duration) error {
func vbInstanceWaitForWorkRequest(wId *string, entityType string, action oci_visual_builder.WorkRequestResourceActionTypeEnum,
	timeout time.Duration, disableFoundRetries bool, client *oci_visual_builder.VbInstanceClient) (*string, error) {
func getErrorFromVisualBuilderVbInstanceWorkRequest(client *oci_visual_builder.VbInstanceClient, compartmentId *string, workId *string, retryPolicy *oci_common.RetryPolicy, entityType string, action oci_visual_builder.WorkRequestResourceActionTypeEnum) error {
	response, err := client.ListWorkRequestErrors(context.Background(),
func (s *VisualBuilderVbInstanceResourceCrud) Get() error {
	request := oci_visual_builder.GetVbInstanceRequest{}
func (s *VisualBuilderVbInstanceResourceCrud) Update() error {
	if compartment, ok := s.D.GetOkExists("compartment_id"); ok && s.D.HasChange("compartment_id") {
func (s *VisualBuilderVbInstanceResourceCrud) Delete() error {
	request := oci_visual_builder.DeleteVbInstanceRequest{}
func (s *VisualBuilderVbInstanceResourceCrud) SetData() error {
	alternateCustomEndpoints := []interface{}{}
func (s *VisualBuilderVbInstanceResourceCrud) mapToCreateCustomEndpointDetails(fieldKeyFormat string) (oci_visual_builder.CreateCustomEndpointDetails, error) {
	result := oci_visual_builder.CreateCustomEndpointDetails{}
func (s *VisualBuilderVbInstanceResourceCrud) mapToUpdateVbCustomEndpointDetails(fieldKeyFormat string) (oci_visual_builder.UpdateCustomEndpointDetails, error) {
	result := oci_visual_builder.UpdateCustomEndpointDetails{}
func (s *VisualBuilderVbInstanceResourceCrud) updateCompartment(compartment interface{}) error {
	changeCompartmentRequest := oci_visual_builder.ChangeVbInstanceCompartmentRequest{}

=== ./internal/service/visual_builder/visual_builder_vb_instances_data_source.go ===
func VisualBuilderVbInstancesDataSource() *schema.Resource {
	return &schema.Resource{
func readVisualBuilderVbInstances(d *schema.ResourceData, m interface{}) error {
	sync := &VisualBuilderVbInstancesDataSourceCrud{}
func (s *VisualBuilderVbInstancesDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *VisualBuilderVbInstancesDataSourceCrud) Get() error {
	request := oci_visual_builder.ListVbInstancesRequest{}
func (s *VisualBuilderVbInstancesDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/visual_builder/register_resource.go ===
func RegisterResource() {
	tfresource.RegisterResource("oci_visual_builder_vb_instance", VisualBuilderVbInstanceResource())

=== ./internal/service/monitoring/monitoring_alarm_data_source.go ===
func MonitoringAlarmDataSource() *schema.Resource {
	fieldMap := make(map[string]*schema.Schema)
func readSingularMonitoringAlarm(d *schema.ResourceData, m interface{}) error {
	sync := &MonitoringAlarmDataSourceCrud{}
func (s *MonitoringAlarmDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *MonitoringAlarmDataSourceCrud) Get() error {
	request := oci_monitoring.GetAlarmRequest{}
func (s *MonitoringAlarmDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/monitoring/monitoring_alarm_history_collection_data_source.go ===
func MonitoringAlarmHistoryCollectionDataSource() *schema.Resource {
	return &schema.Resource{
func readSingularMonitoringAlarmHistoryCollection(d *schema.ResourceData, m interface{}) error {
	sync := &MonitoringAlarmHistoryCollectionDataSourceCrud{}
func (s *MonitoringAlarmHistoryCollectionDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *MonitoringAlarmHistoryCollectionDataSourceCrud) Get() error {
	request := oci_monitoring.GetAlarmHistoryRequest{}
func (s *MonitoringAlarmHistoryCollectionDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/monitoring/monitoring_alarm_suppressions_data_source.go ===
func MonitoringAlarmSuppressionsDataSource() *schema.Resource {
	return &schema.Resource{
func readMonitoringAlarmSuppressions(d *schema.ResourceData, m interface{}) error {
	sync := &MonitoringAlarmSuppressionsDataSourceCrud{}
func (s *MonitoringAlarmSuppressionsDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *MonitoringAlarmSuppressionsDataSourceCrud) Get() error {
	request := oci_monitoring.ListAlarmSuppressionsRequest{}
func (s *MonitoringAlarmSuppressionsDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/monitoring/monitoring_alarm_resource.go ===
func MonitoringAlarmResource() *schema.Resource {
	return &schema.Resource{
func createMonitoringAlarm(d *schema.ResourceData, m interface{}) error {
	sync := &MonitoringAlarmResourceCrud{}
func readMonitoringAlarm(d *schema.ResourceData, m interface{}) error {
	sync := &MonitoringAlarmResourceCrud{}
func updateMonitoringAlarm(d *schema.ResourceData, m interface{}) error {
	sync := &MonitoringAlarmResourceCrud{}
func deleteMonitoringAlarm(d *schema.ResourceData, m interface{}) error {
	sync := &MonitoringAlarmResourceCrud{}
func (s *MonitoringAlarmResourceCrud) ID() string {
	return *s.Res.Id
func (s *MonitoringAlarmResourceCrud) CreatedPending() []string {
	return []string{}
func (s *MonitoringAlarmResourceCrud) CreatedTarget() []string {
	return []string{
func (s *MonitoringAlarmResourceCrud) DeletedPending() []string {
	return []string{
func (s *MonitoringAlarmResourceCrud) DeletedTarget() []string {
	return []string{
func (s *MonitoringAlarmResourceCrud) Create() error {
	request := oci_monitoring.CreateAlarmRequest{}
func (s *MonitoringAlarmResourceCrud) Get() error {
	request := oci_monitoring.GetAlarmRequest{}
func (s *MonitoringAlarmResourceCrud) Update() error {
	if compartment, ok := s.D.GetOkExists("compartment_id"); ok && s.D.HasChange("compartment_id") {
func (s *MonitoringAlarmResourceCrud) Delete() error {
	request := oci_monitoring.DeleteAlarmRequest{}
func (s *MonitoringAlarmResourceCrud) SetData() error {
	if s.Res.AlarmSummary != nil {
func (s *MonitoringAlarmResourceCrud) mapToAlarmOverride(fieldKeyFormat string) (oci_monitoring.AlarmOverride, error) {
	result := oci_monitoring.AlarmOverride{}
func (s *MonitoringAlarmResourceCrud) mapToSuppression(fieldKeyFormat string) (oci_monitoring.Suppression, error) {
	result := oci_monitoring.Suppression{}
func (s *MonitoringAlarmResourceCrud) updateCompartment(compartment interface{}) error {
	changeCompartmentRequest := oci_monitoring.ChangeAlarmCompartmentRequest{}

=== ./internal/service/monitoring/monitoring_metrics_data_source.go ===
func MonitoringMetricsDataSource() *schema.Resource {
	return &schema.Resource{
func readMonitoringMetrics(d *schema.ResourceData, m interface{}) error {
	sync := &MonitoringMetricsDataSourceCrud{}
func (s *MonitoringMetricsDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *MonitoringMetricsDataSourceCrud) Get() error {
	request := oci_monitoring.ListMetricsRequest{}
func (s *MonitoringMetricsDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/monitoring/monitoring_alarms_data_source.go ===
func MonitoringAlarmsDataSource() *schema.Resource {
	return &schema.Resource{
func readMonitoringAlarms(d *schema.ResourceData, m interface{}) error {
	sync := &MonitoringAlarmsDataSourceCrud{}
func (s *MonitoringAlarmsDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *MonitoringAlarmsDataSourceCrud) Get() error {
	request := oci_monitoring.ListAlarmsRequest{}
func (s *MonitoringAlarmsDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/monitoring/monitoring_alarm_suppression_data_source.go ===
func MonitoringAlarmSuppressionDataSource() *schema.Resource {
	fieldMap := make(map[string]*schema.Schema)
func readSingularMonitoringAlarmSuppression(d *schema.ResourceData, m interface{}) error {
	sync := &MonitoringAlarmSuppressionDataSourceCrud{}
func (s *MonitoringAlarmSuppressionDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *MonitoringAlarmSuppressionDataSourceCrud) Get() error {
	request := oci_monitoring.GetAlarmSuppressionRequest{}
func (s *MonitoringAlarmSuppressionDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/monitoring/monitoring_alarm_suppression_resource.go ===
func MonitoringAlarmSuppressionResource() *schema.Resource {
	return &schema.Resource{
func createMonitoringAlarmSuppression(d *schema.ResourceData, m interface{}) error {
	sync := &MonitoringAlarmSuppressionResourceCrud{}
func readMonitoringAlarmSuppression(d *schema.ResourceData, m interface{}) error {
	sync := &MonitoringAlarmSuppressionResourceCrud{}
func deleteMonitoringAlarmSuppression(d *schema.ResourceData, m interface{}) error {
	sync := &MonitoringAlarmSuppressionResourceCrud{}
func (s *MonitoringAlarmSuppressionResourceCrud) ID() string {
	return *s.Res.Id
func (s *MonitoringAlarmSuppressionResourceCrud) CreatedPending() []string {
	return []string{}
func (s *MonitoringAlarmSuppressionResourceCrud) CreatedTarget() []string {
	return []string{
func (s *MonitoringAlarmSuppressionResourceCrud) DeletedPending() []string {
	return []string{}
func (s *MonitoringAlarmSuppressionResourceCrud) DeletedTarget() []string {
	return []string{
func (s *MonitoringAlarmSuppressionResourceCrud) Create() error {
	request := oci_monitoring.CreateAlarmSuppressionRequest{}
func (s *MonitoringAlarmSuppressionResourceCrud) Get() error {
	request := oci_monitoring.GetAlarmSuppressionRequest{}
func (s *MonitoringAlarmSuppressionResourceCrud) Delete() error {
	request := oci_monitoring.DeleteAlarmSuppressionRequest{}
func (s *MonitoringAlarmSuppressionResourceCrud) SetData() error {
	if s.Res.AlarmSuppressionTarget != nil {
func (s *MonitoringAlarmSuppressionResourceCrud) mapToAlarmSuppressionTarget(fieldKeyFormat string) (oci_monitoring.AlarmSuppressionTarget, error) {
	var baseObject oci_monitoring.AlarmSuppressionTarget
func (s *MonitoringAlarmSuppressionResourceCrud) mapToSuppressionCondition(fieldKeyFormat string) (oci_monitoring.SuppressionCondition, error) {
	var baseObject oci_monitoring.SuppressionCondition

=== ./internal/service/monitoring/register_resource.go ===
func RegisterResource() {
	tfresource.RegisterResource("oci_monitoring_alarm", MonitoringAlarmResource())

=== ./internal/service/monitoring/monitoring_alarm_statuses_data_source.go ===
func MonitoringAlarmStatusesDataSource() *schema.Resource {
	return &schema.Resource{
func readMonitoringAlarmStatuses(d *schema.ResourceData, m interface{}) error {
	sync := &MonitoringAlarmStatusesDataSourceCrud{}
func (s *MonitoringAlarmStatusesDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *MonitoringAlarmStatusesDataSourceCrud) Get() error {
	request := oci_monitoring.ListAlarmsStatusRequest{}
func (s *MonitoringAlarmStatusesDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/monitoring/monitoring_metric_data_data_source.go ===
func MonitoringMetricDataDataSource() *schema.Resource {
	return &schema.Resource{
func readMonitoringMetricData(d *schema.ResourceData, m interface{}) error {
	sync := &MonitoringMetricDataDataSourceCrud{}
func (s *MonitoringMetricDataDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *MonitoringMetricDataDataSourceCrud) Get() error {
	request := oci_monitoring.SummarizeMetricsDataRequest{}
func (s *MonitoringMetricDataDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/usage_proxy/usage_proxy_subscription_redeemable_user_data_source.go ===
func UsageProxySubscriptionRedeemableUserDataSource() *schema.Resource {
	fieldMap := make(map[string]*schema.Schema)
func readSingularUsageProxySubscriptionRedeemableUser(d *schema.ResourceData, m interface{}) error {
	sync := &UsageProxySubscriptionRedeemableUserDataSourceCrud{}
func (s *UsageProxySubscriptionRedeemableUserDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *UsageProxySubscriptionRedeemableUserDataSourceCrud) Get() error {
	request := oci_usage_proxy.ListRedeemableUsersRequest{}
func (s *UsageProxySubscriptionRedeemableUserDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/usage_proxy/usage_proxy_usagelimits_data_source.go ===
func UsageProxyUsagelimitsDataSource() *schema.Resource {
	return &schema.Resource{
func readUsageProxyUsagelimits(d *schema.ResourceData, m interface{}) error {
	sync := &UsageProxyUsagelimitsDataSourceCrud{}
func (s *UsageProxyUsagelimitsDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *UsageProxyUsagelimitsDataSourceCrud) Get() error {
	request := oci_usage_proxy.ListUsageLimitsRequest{}
func (s *UsageProxyUsagelimitsDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/usage_proxy/usage_proxy_subscription_redeemable_user_resource.go ===
func UsageProxySubscriptionRedeemableUserResource() *schema.Resource {
	return &schema.Resource{
func createUsageProxySubscriptionRedeemableUser(d *schema.ResourceData, m interface{}) error {
	sync := &UsageProxySubscriptionRedeemableUserResourceCrud{}
func readUsageProxySubscriptionRedeemableUser(d *schema.ResourceData, m interface{}) error {
	sync := &UsageProxySubscriptionRedeemableUserResourceCrud{}
func deleteUsageProxySubscriptionRedeemableUser(d *schema.ResourceData, m interface{}) error {
	sync := &UsageProxySubscriptionRedeemableUserResourceCrud{}
func (s *UsageProxySubscriptionRedeemableUserResourceCrud) ID() string {
	return GetSubscriptionRedeemableUserCompositeId(s.D.Get("subscription_id").(string), s.D.Get("tenancy_id").(string))
func (s *UsageProxySubscriptionRedeemableUserResourceCrud) Create() error {
	request := oci_usage_proxy.CreateRedeemableUserRequest{}
func (s *UsageProxySubscriptionRedeemableUserResourceCrud) Get() error {
	request := oci_usage_proxy.ListRedeemableUsersRequest{}
func (s *UsageProxySubscriptionRedeemableUserResourceCrud) Delete() error {
	request := oci_usage_proxy.DeleteRedeemableUserRequest{}
func (s *UsageProxySubscriptionRedeemableUserResourceCrud) SetData() error {

func (s *UsageProxySubscriptionRedeemableUserResourceCrud) mapToRedeemableUser(fieldKeyFormat string) (oci_usage_proxy.RedeemableUser, error) {
	result := oci_usage_proxy.RedeemableUser{}

=== ./internal/service/usage_proxy/usage_proxy_export.go ===
func getUsageProxySubscriptionRedeemableUserId(resource *tf_export.OCIResource) (string, error) {


=== ./internal/service/usage_proxy/usage_proxy_resources_data_source.go ===
func UsageProxyResourcesDataSource() *schema.Resource {
	return &schema.Resource{
func readUsageProxyResources(d *schema.ResourceData, m interface{}) error {
	sync := &UsageProxyResourcesDataSourceCrud{}
func (s *UsageProxyResourcesDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *UsageProxyResourcesDataSourceCrud) Get() error {
	request := oci_usage_proxy.ListResourcesRequest{}
func (s *UsageProxyResourcesDataSourceCrud) SetData() error {
	if s.Res == nil {
func ResourceSummaryToMap(obj oci_usage_proxy.ResourceSummary) map[string]interface{} {
	result := map[string]interface{}{}

=== ./internal/service/usage_proxy/usage_proxy_subscription_products_data_source.go ===
func UsageProxySubscriptionProductsDataSource() *schema.Resource {
	return &schema.Resource{
func readUsageProxySubscriptionProducts(d *schema.ResourceData, m interface{}) error {
	sync := &UsageProxySubscriptionProductsDataSourceCrud{}
func (s *UsageProxySubscriptionProductsDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *UsageProxySubscriptionProductsDataSourceCrud) Get() error {
	request := oci_usage_proxy.ListProductsRequest{}
func (s *UsageProxySubscriptionProductsDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/usage_proxy/usage_proxy_subscription_reward_data_source.go ===
func UsageProxySubscriptionRewardDataSource() *schema.Resource {
	return &schema.Resource{
func readSingularUsageProxySubscriptionReward(d *schema.ResourceData, m interface{}) error {
	sync := &UsageProxySubscriptionRewardDataSourceCrud{}
func (s *UsageProxySubscriptionRewardDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *UsageProxySubscriptionRewardDataSourceCrud) Get() error {
	request := oci_usage_proxy.ListRewardsRequest{}
func (s *UsageProxySubscriptionRewardDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/usage_proxy/usage_proxy_resource_quotas_data_source.go ===
func UsageProxyResourceQuotasDataSource() *schema.Resource {
	return &schema.Resource{
func readUsageProxyResourceQuotas(d *schema.ResourceData, m interface{}) error {
	sync := &UsageProxyResourceQuotasDataSourceCrud{}
func (s *UsageProxyResourceQuotasDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *UsageProxyResourceQuotasDataSourceCrud) Get() error {
	request := oci_usage_proxy.ListResourceQuotaRequest{}
func (s *UsageProxyResourceQuotasDataSourceCrud) SetData() error {
	if s.Res == nil {
func ResourceQuotumSummaryToMap(obj oci_usage_proxy.ResourceQuotumSummary) map[string]interface{} {
	result := map[string]interface{}{}

=== ./internal/service/usage_proxy/usage_proxy_subscription_redemption_data_source.go ===
func UsageProxySubscriptionRedemptionDataSource() *schema.Resource {
	return &schema.Resource{
func readSingularUsageProxySubscriptionRedemption(d *schema.ResourceData, m interface{}) error {
	sync := &UsageProxySubscriptionRedemptionDataSourceCrud{}
func (s *UsageProxySubscriptionRedemptionDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *UsageProxySubscriptionRedemptionDataSourceCrud) Get() error {
	request := oci_usage_proxy.ListRedemptionsRequest{}
func (s *UsageProxySubscriptionRedemptionDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/usage_proxy/usage_proxy_subscription_rewards_data_source.go ===
func UsageProxySubscriptionRewardsDataSource() *schema.Resource {
	return &schema.Resource{
func readUsageProxySubscriptionRewards(d *schema.ResourceData, m interface{}) error {
	sync := &UsageProxySubscriptionRewardsDataSourceCrud{}
func (s *UsageProxySubscriptionRewardsDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *UsageProxySubscriptionRewardsDataSourceCrud) Get() error {
	request := oci_usage_proxy.ListRewardsRequest{}
func (s *UsageProxySubscriptionRewardsDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/usage_proxy/usage_proxy_subscription_product_data_source.go ===
func UsageProxySubscriptionProductDataSource() *schema.Resource {
	return &schema.Resource{
func readSingularUsageProxySubscriptionProduct(d *schema.ResourceData, m interface{}) error {
	sync := &UsageProxySubscriptionProductDataSourceCrud{}
func (s *UsageProxySubscriptionProductDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *UsageProxySubscriptionProductDataSourceCrud) Get() error {
	request := oci_usage_proxy.ListProductsRequest{}
func (s *UsageProxySubscriptionProductDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/usage_proxy/usage_proxy_subscription_redemptions_data_source.go ===
func UsageProxySubscriptionRedemptionsDataSource() *schema.Resource {
	return &schema.Resource{
func readUsageProxySubscriptionRedemptions(d *schema.ResourceData, m interface{}) error {
	sync := &UsageProxySubscriptionRedemptionsDataSourceCrud{}
func (s *UsageProxySubscriptionRedemptionsDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *UsageProxySubscriptionRedemptionsDataSourceCrud) Get() error {
	request := oci_usage_proxy.ListRedemptionsRequest{}
func (s *UsageProxySubscriptionRedemptionsDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/usage_proxy/usage_proxy_subscription_redeemable_users_data_source.go ===
func UsageProxySubscriptionRedeemableUsersDataSource() *schema.Resource {
	return &schema.Resource{
func readUsageProxySubscriptionRedeemableUsers(d *schema.ResourceData, m interface{}) error {
	sync := &UsageProxySubscriptionRedeemableUsersDataSourceCrud{}
func (s *UsageProxySubscriptionRedeemableUsersDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *UsageProxySubscriptionRedeemableUsersDataSourceCrud) Get() error {
	request := oci_usage_proxy.ListRedeemableUsersRequest{}
func (s *UsageProxySubscriptionRedeemableUsersDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/usage_proxy/register_resource.go ===
func RegisterResource() {
	tfresource.RegisterResource("oci_usage_proxy_subscription_redeemable_user", UsageProxySubscriptionRedeemableUserResource())

=== ./internal/service/dataflow/dataflow_pools_data_source.go ===
func DataflowPoolsDataSource() *schema.Resource {
	return &schema.Resource{
func readDataflowPools(d *schema.ResourceData, m interface{}) error {
	sync := &DataflowPoolsDataSourceCrud{}
func (s *DataflowPoolsDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *DataflowPoolsDataSourceCrud) Get() error {
	request := oci_dataflow.ListPoolsRequest{}
func (s *DataflowPoolsDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/dataflow/dataflow_invoke_runs_data_source.go ===
func DataflowInvokeRunsDataSource() *schema.Resource {
	return &schema.Resource{
func readDataflowInvokeRuns(d *schema.ResourceData, m interface{}) error {
	sync := &DataflowInvokeRunsDataSourceCrud{}
func (s *DataflowInvokeRunsDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *DataflowInvokeRunsDataSourceCrud) Get() error {
	request := oci_dataflow.ListRunsRequest{}
func (s *DataflowInvokeRunsDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/dataflow/dataflow_run_statements_data_source.go ===
func DataflowRunStatementsDataSource() *schema.Resource {
	return &schema.Resource{
func readDataflowRunStatements(d *schema.ResourceData, m interface{}) error {
	sync := &DataflowRunStatementsDataSourceCrud{}
func (s *DataflowRunStatementsDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *DataflowRunStatementsDataSourceCrud) Get() error {
	request := oci_dataflow.ListStatementsRequest{}
func (s *DataflowRunStatementsDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/dataflow/dataflow_pool_data_source.go ===
func DataflowPoolDataSource() *schema.Resource {
	fieldMap := make(map[string]*schema.Schema)
func readSingularDataflowPool(d *schema.ResourceData, m interface{}) error {
	sync := &DataflowPoolDataSourceCrud{}
func (s *DataflowPoolDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *DataflowPoolDataSourceCrud) Get() error {
	request := oci_dataflow.GetPoolRequest{}
func (s *DataflowPoolDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/dataflow/dataflow_run_log_data_source.go ===
func DataflowRunLogDataSource() *schema.Resource {
	return &schema.Resource{
func readSingularDataflowRunLog(d *schema.ResourceData, m interface{}) error {
	sync := &DataflowRunLogDataSourceCrud{}
func (s *DataflowRunLogDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *DataflowRunLogDataSourceCrud) Get() error {
	request := oci_dataflow.GetRunLogRequest{}
func (s *DataflowRunLogDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/dataflow/dataflow_run_statement_data_source.go ===
func DataflowRunStatementDataSource() *schema.Resource {
	fieldMap := make(map[string]*schema.Schema)
func readSingularDataflowRunStatement(d *schema.ResourceData, m interface{}) error {
	sync := &DataflowRunStatementDataSourceCrud{}
func (s *DataflowRunStatementDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *DataflowRunStatementDataSourceCrud) Get() error {
	request := oci_dataflow.GetStatementRequest{}
func (s *DataflowRunStatementDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/dataflow/dataflow_run_statement_resource.go ===
func DataflowRunStatementResource() *schema.Resource {
	return &schema.Resource{
func createDataflowRunStatement(d *schema.ResourceData, m interface{}) error {
	sync := &DataflowRunStatementResourceCrud{}
func readDataflowRunStatement(d *schema.ResourceData, m interface{}) error {
	sync := &DataflowRunStatementResourceCrud{}
func deleteDataflowRunStatement(d *schema.ResourceData, m interface{}) error {
	sync := &DataflowRunStatementResourceCrud{}
func (s *DataflowRunStatementResourceCrud) ID() string {
	return GetRunStatementCompositeId(s.D.Get("run_id").(string), *s.Res.Id)
func (s *DataflowRunStatementResourceCrud) CreatedPending() []string {
	return []string{
func (s *DataflowRunStatementResourceCrud) CreatedTarget() []string {
	return []string{
func (s *DataflowRunStatementResourceCrud) DeletedPending() []string {
	return []string{
func (s *DataflowRunStatementResourceCrud) DeletedTarget() []string {
	return []string{
func (s *DataflowRunStatementResourceCrud) Create() error {
	request := oci_dataflow.CreateStatementRequest{}
func (s *DataflowRunStatementResourceCrud) Get() error {
	request := oci_dataflow.GetStatementRequest{}
func (s *DataflowRunStatementResourceCrud) Delete() error {
	request := oci_dataflow.DeleteStatementRequest{}
func (s *DataflowRunStatementResourceCrud) SetData() error {


=== ./internal/service/dataflow/dataflow_invoke_run_resource.go ===
func DataflowInvokeRunResource() *schema.Resource {
	return &schema.Resource{
func createDataflowInvokeRun(d *schema.ResourceData, m interface{}) error {
	sync := &DataflowInvokeRunResourceCrud{}
func readDataflowInvokeRun(d *schema.ResourceData, m interface{}) error {
	sync := &DataflowInvokeRunResourceCrud{}
func updateDataflowInvokeRun(d *schema.ResourceData, m interface{}) error {
	sync := &DataflowInvokeRunResourceCrud{}
func deleteDataflowInvokeRun(d *schema.ResourceData, m interface{}) error {
	sync := &DataflowInvokeRunResourceCrud{}
func (s *DataflowInvokeRunResourceCrud) ID() string {
	return *s.Res.Id
func (s *DataflowInvokeRunResourceCrud) CreatedPending() []string {
	invokeAsynchronously := true
func (s *DataflowInvokeRunResourceCrud) CreatedTarget() []string {
	invokeAsynchronously := true
func (s *DataflowInvokeRunResourceCrud) DeletedPending() []string {
	return []string{
func (s *DataflowInvokeRunResourceCrud) DeletedTarget() []string {
	return []string{
func (s *DataflowInvokeRunResourceCrud) Create() error {
	request := oci_dataflow.CreateRunRequest{}
func (s *DataflowInvokeRunResourceCrud) Get() error {
	request := oci_dataflow.GetRunRequest{}
func (s *DataflowInvokeRunResourceCrud) Update() error {
	fmt.Println("ML: in run update here is s.D", s.D)
func (s *DataflowInvokeRunResourceCrud) Delete() error {
	getRequest := oci_dataflow.GetRunRequest{}
func (s *DataflowInvokeRunResourceCrud) SetData() error {
	if s.Res.ApplicationId != nil {
func (s *DataflowInvokeRunResourceCrud) mapToApplicationLogConfig(fieldKeyFormat string) (oci_dataflow.ApplicationLogConfig, error) {
	result := oci_dataflow.ApplicationLogConfig{}
func (s *DataflowInvokeRunResourceCrud) mapToApplicationParameter(fieldKeyFormat string) (oci_dataflow.ApplicationParameter, error) {
	result := oci_dataflow.ApplicationParameter{}
func (s *DataflowInvokeRunResourceCrud) mapToShapeConfig(fieldKeyFormat string) (oci_dataflow.ShapeConfig, error) {
	result := oci_dataflow.ShapeConfig{}
func (s *DataflowInvokeRunResourceCrud) updateCompartment(compartment interface{}) error {
	changeCompartmentRequest := oci_dataflow.ChangeRunCompartmentRequest{}

=== ./internal/service/dataflow/dataflow_private_endpoints_data_source.go ===
func DataflowPrivateEndpointsDataSource() *schema.Resource {
	return &schema.Resource{
func readDataflowPrivateEndpoints(d *schema.ResourceData, m interface{}) error {
	sync := &DataflowPrivateEndpointsDataSourceCrud{}
func (s *DataflowPrivateEndpointsDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *DataflowPrivateEndpointsDataSourceCrud) Get() error {
	request := oci_dataflow.ListPrivateEndpointsRequest{}
func (s *DataflowPrivateEndpointsDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/dataflow/dataflow_sql_endpoint_data_source.go ===
func DataflowSqlEndpointDataSource() *schema.Resource {
	fieldMap := make(map[string]*schema.Schema)
func readSingularDataflowSqlEndpoint(d *schema.ResourceData, m interface{}) error {
	sync := &DataflowSqlEndpointDataSourceCrud{}
func (s *DataflowSqlEndpointDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *DataflowSqlEndpointDataSourceCrud) Get() error {
	request := oci_dataflow.GetSqlEndpointRequest{}
func (s *DataflowSqlEndpointDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/dataflow/dataflow_pool_resource.go ===
func DataflowPoolResource() *schema.Resource {
	return &schema.Resource{
func createDataflowPool(d *schema.ResourceData, m interface{}) error {
	sync := &DataflowPoolResourceCrud{}
func readDataflowPool(d *schema.ResourceData, m interface{}) error {
	sync := &DataflowPoolResourceCrud{}
func updateDataflowPool(d *schema.ResourceData, m interface{}) error {
	sync := &DataflowPoolResourceCrud{}
func deleteDataflowPool(d *schema.ResourceData, m interface{}) error {
	sync := &DataflowPoolResourceCrud{}
func (s *DataflowPoolResourceCrud) ID() string {
	return *s.Res.Id
func (s *DataflowPoolResourceCrud) CreatedPending() []string {
	return []string{
func (s *DataflowPoolResourceCrud) CreatedTarget() []string {
	return []string{
func (s *DataflowPoolResourceCrud) DeletedPending() []string {
	return []string{
func (s *DataflowPoolResourceCrud) DeletedTarget() []string {
	return []string{
func (s *DataflowPoolResourceCrud) Create() error {
	request := oci_dataflow.CreatePoolRequest{}
func (s *DataflowPoolResourceCrud) getPoolFromWorkRequest(workId *string, retryPolicy *oci_common.RetryPolicy,
	actionTypeEnum oci_dataflow.WorkRequestResourceActionTypeEnum, timeout time.Duration) error {
func poolWaitForWorkRequest(wId *string, entityType string, action oci_dataflow.WorkRequestResourceActionTypeEnum,
	timeout time.Duration, disableFoundRetries bool, client *oci_dataflow.DataFlowClient) (*string, error) {
func getErrorFromDataflowPoolWorkRequest(client *oci_dataflow.DataFlowClient, workId *string, retryPolicy *oci_common.RetryPolicy, entityType string, action oci_dataflow.WorkRequestResourceActionTypeEnum) error {
	response, err := client.ListWorkRequestErrors(context.Background(),
func (s *DataflowPoolResourceCrud) Get() error {
	request := oci_dataflow.GetPoolRequest{}
func (s *DataflowPoolResourceCrud) Update() error {
	if compartment, ok := s.D.GetOkExists("compartment_id"); ok && s.D.HasChange("compartment_id") {
func (s *DataflowPoolResourceCrud) Delete() error {
	request := oci_dataflow.DeletePoolRequest{}
func (s *DataflowPoolResourceCrud) SetData() error {
	fmt.Println("in setData, ", s.Res)
func (s *DataflowPoolResourceCrud) StartPool() error {
	request := oci_dataflow.StartPoolRequest{}
func (s *DataflowPoolResourceCrud) StopPool() error {
	fmt.Println("ML: in stop pool")
func (s *DataflowPoolResourceCrud) mapToPoolConfig(fieldKeyFormat string) (oci_dataflow.PoolConfig, error) {
	result := oci_dataflow.PoolConfig{}
func (s *DataflowPoolResourceCrud) mapToPoolSchedule(fieldKeyFormat string) (oci_dataflow.PoolSchedule, error) {
	result := oci_dataflow.PoolSchedule{}
func (s *DataflowPoolResourceCrud) mapToShapeConfig(fieldKeyFormat string) (oci_dataflow.ShapeConfig, error) {
	result := oci_dataflow.ShapeConfig{}
func (s *DataflowPoolResourceCrud) updateCompartment(compartment interface{}) error {
	changeCompartmentRequest := oci_dataflow.ChangePoolCompartmentRequest{}

=== ./internal/service/dataflow/dataflow_private_endpoint_data_source.go ===
func DataflowPrivateEndpointDataSource() *schema.Resource {
	fieldMap := make(map[string]*schema.Schema)
func readSingularDataflowPrivateEndpoint(d *schema.ResourceData, m interface{}) error {
	sync := &DataflowPrivateEndpointDataSourceCrud{}
func (s *DataflowPrivateEndpointDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *DataflowPrivateEndpointDataSourceCrud) Get() error {
	request := oci_dataflow.GetPrivateEndpointRequest{}
func (s *DataflowPrivateEndpointDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/dataflow/dataflow_run_logs_data_source.go ===
func DataflowRunLogsDataSource() *schema.Resource {
	return &schema.Resource{
func readDataflowRunLogs(d *schema.ResourceData, m interface{}) error {
	sync := &DataflowRunLogsDataSourceCrud{}
func (s *DataflowRunLogsDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *DataflowRunLogsDataSourceCrud) Get() error {
	request := oci_dataflow.ListRunLogsRequest{}
func (s *DataflowRunLogsDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/dataflow/dataflow_invoke_run_data_source.go ===
func DataflowInvokeRunDataSource() *schema.Resource {
	fieldMap := make(map[string]*schema.Schema)
func readSingularDataflowInvokeRun(d *schema.ResourceData, m interface{}) error {
	sync := &DataflowInvokeRunDataSourceCrud{}
func (s *DataflowInvokeRunDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *DataflowInvokeRunDataSourceCrud) Get() error {
	request := oci_dataflow.GetRunRequest{}
func (s *DataflowInvokeRunDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/dataflow/dataflow_applications_data_source.go ===
func DataflowApplicationsDataSource() *schema.Resource {
	return &schema.Resource{
func readDataflowApplications(d *schema.ResourceData, m interface{}) error {
	sync := &DataflowApplicationsDataSourceCrud{}
func (s *DataflowApplicationsDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *DataflowApplicationsDataSourceCrud) Get() error {
	request := oci_dataflow.ListApplicationsRequest{}
func (s *DataflowApplicationsDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/dataflow/dataflow_application_resource.go ===
func DataflowApplicationResource() *schema.Resource {
	return &schema.Resource{
func createDataflowApplication(d *schema.ResourceData, m interface{}) error {
	sync := &DataflowApplicationResourceCrud{}
func readDataflowApplication(d *schema.ResourceData, m interface{}) error {
	sync := &DataflowApplicationResourceCrud{}
func updateDataflowApplication(d *schema.ResourceData, m interface{}) error {
	sync := &DataflowApplicationResourceCrud{}
func deleteDataflowApplication(d *schema.ResourceData, m interface{}) error {
	sync := &DataflowApplicationResourceCrud{}
func (s *DataflowApplicationResourceCrud) ID() string {
	return *s.Res.Id
func (s *DataflowApplicationResourceCrud) CreatedPending() []string {
	return []string{}
func (s *DataflowApplicationResourceCrud) CreatedTarget() []string {
	return []string{
func (s *DataflowApplicationResourceCrud) DeletedPending() []string {
	return []string{}
func (s *DataflowApplicationResourceCrud) DeletedTarget() []string {
	return []string{
func (s *DataflowApplicationResourceCrud) Create() error {
	request := oci_dataflow.CreateApplicationRequest{}
func (s *DataflowApplicationResourceCrud) Get() error {
	request := oci_dataflow.GetApplicationRequest{}
func (s *DataflowApplicationResourceCrud) Update() error {
	if compartment, ok := s.D.GetOkExists("compartment_id"); ok && s.D.HasChange("compartment_id") {
func (s *DataflowApplicationResourceCrud) Delete() error {
	request := oci_dataflow.DeleteApplicationRequest{}
func (s *DataflowApplicationResourceCrud) SetData() error {
	if s.Res.ApplicationLogConfig != nil {
func (s *DataflowApplicationResourceCrud) mapToApplicationLogConfig(fieldKeyFormat string) (oci_dataflow.ApplicationLogConfig, error) {
	result := oci_dataflow.ApplicationLogConfig{}
func (s *DataflowApplicationResourceCrud) mapToApplicationParameter(fieldKeyFormat string) (oci_dataflow.ApplicationParameter, error) {
	result := oci_dataflow.ApplicationParameter{}
func (s *DataflowApplicationResourceCrud) mapToShapeConfig(fieldKeyFormat string) (oci_dataflow.ShapeConfig, error) {
	result := oci_dataflow.ShapeConfig{}
func (s *DataflowApplicationResourceCrud) updateCompartment(compartment interface{}) error {
	changeCompartmentRequest := oci_dataflow.ChangeApplicationCompartmentRequest{}

=== ./internal/service/dataflow/dataflow_application_data_source.go ===
func DataflowApplicationDataSource() *schema.Resource {
	fieldMap := make(map[string]*schema.Schema)
func readSingularDataflowApplication(d *schema.ResourceData, m interface{}) error {
	sync := &DataflowApplicationDataSourceCrud{}
func (s *DataflowApplicationDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *DataflowApplicationDataSourceCrud) Get() error {
	request := oci_dataflow.GetApplicationRequest{}
func (s *DataflowApplicationDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/dataflow/dataflow_sql_endpoints_data_source.go ===
func DataflowSqlEndpointsDataSource() *schema.Resource {
	return &schema.Resource{
func readDataflowSqlEndpoints(d *schema.ResourceData, m interface{}) error {
	sync := &DataflowSqlEndpointsDataSourceCrud{}
func (s *DataflowSqlEndpointsDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *DataflowSqlEndpointsDataSourceCrud) Get() error {
	request := oci_dataflow.ListSqlEndpointsRequest{}
func (s *DataflowSqlEndpointsDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/dataflow/dataflow_private_endpoint_resource.go ===
func DataflowPrivateEndpointResource() *schema.Resource {
	return &schema.Resource{
func createDataflowPrivateEndpoint(d *schema.ResourceData, m interface{}) error {
	sync := &DataflowPrivateEndpointResourceCrud{}
func readDataflowPrivateEndpoint(d *schema.ResourceData, m interface{}) error {
	sync := &DataflowPrivateEndpointResourceCrud{}
func updateDataflowPrivateEndpoint(d *schema.ResourceData, m interface{}) error {
	sync := &DataflowPrivateEndpointResourceCrud{}
func deleteDataflowPrivateEndpoint(d *schema.ResourceData, m interface{}) error {
	sync := &DataflowPrivateEndpointResourceCrud{}
func (s *DataflowPrivateEndpointResourceCrud) ID() string {
	return *s.Res.Id
func (s *DataflowPrivateEndpointResourceCrud) CreatedPending() []string {
	return []string{
func (s *DataflowPrivateEndpointResourceCrud) CreatedTarget() []string {
	return []string{
func (s *DataflowPrivateEndpointResourceCrud) DeletedPending() []string {
	return []string{
func (s *DataflowPrivateEndpointResourceCrud) DeletedTarget() []string {
	return []string{
func (s *DataflowPrivateEndpointResourceCrud) Create() error {
	request := oci_dataflow.CreatePrivateEndpointRequest{}
func (s *DataflowPrivateEndpointResourceCrud) getPrivateEndpointFromWorkRequest(workId *string, retryPolicy *oci_common.RetryPolicy,
	actionTypeEnum oci_dataflow.WorkRequestResourceActionTypeEnum, timeout time.Duration) error {
func privateEndpointWaitForWorkRequest(wId *string, entityType string, action oci_dataflow.WorkRequestResourceActionTypeEnum,
	timeout time.Duration, disableFoundRetries bool, client *oci_dataflow.DataFlowClient) (*string, error) {
func getErrorFromDataflowPrivateEndpointWorkRequest(client *oci_dataflow.DataFlowClient, workId *string, retryPolicy *oci_common.RetryPolicy, entityType string, action oci_dataflow.WorkRequestResourceActionTypeEnum) error {
	response, err := client.ListWorkRequestErrors(context.Background(),
func (s *DataflowPrivateEndpointResourceCrud) Get() error {
	request := oci_dataflow.GetPrivateEndpointRequest{}
func (s *DataflowPrivateEndpointResourceCrud) Update() error {
	if compartment, ok := s.D.GetOkExists("compartment_id"); ok && s.D.HasChange("compartment_id") {
func (s *DataflowPrivateEndpointResourceCrud) Delete() error {
	request := oci_dataflow.DeletePrivateEndpointRequest{}
func (s *DataflowPrivateEndpointResourceCrud) SetData() error {
	if s.Res.CompartmentId != nil {
func (s *DataflowPrivateEndpointResourceCrud) mapToScan(fieldKeyFormat string) (oci_dataflow.Scan, error) {
	result := oci_dataflow.Scan{}
func (s *DataflowPrivateEndpointResourceCrud) updateCompartment(compartment interface{}) error {
	changeCompartmentRequest := oci_dataflow.ChangePrivateEndpointCompartmentRequest{}

=== ./internal/service/dataflow/dataflow_sql_endpoint_resource.go ===
func DataflowSqlEndpointResource() *schema.Resource {
	return &schema.Resource{
func createDataflowSqlEndpoint(d *schema.ResourceData, m interface{}) error {
	sync := &DataflowSqlEndpointResourceCrud{}
func readDataflowSqlEndpoint(d *schema.ResourceData, m interface{}) error {
	sync := &DataflowSqlEndpointResourceCrud{}
func updateDataflowSqlEndpoint(d *schema.ResourceData, m interface{}) error {
	sync := &DataflowSqlEndpointResourceCrud{}
func deleteDataflowSqlEndpoint(d *schema.ResourceData, m interface{}) error {
	sync := &DataflowSqlEndpointResourceCrud{}
func (s *DataflowSqlEndpointResourceCrud) ID() string {
	return *s.Res.Id
func (s *DataflowSqlEndpointResourceCrud) CreatedPending() []string {
	return []string{
func (s *DataflowSqlEndpointResourceCrud) CreatedTarget() []string {
	return []string{
func (s *DataflowSqlEndpointResourceCrud) DeletedPending() []string {
	return []string{
func (s *DataflowSqlEndpointResourceCrud) DeletedTarget() []string {
	return []string{
func (s *DataflowSqlEndpointResourceCrud) Create() error {
	request := oci_dataflow.CreateSqlEndpointRequest{}
func (s *DataflowSqlEndpointResourceCrud) pollForSqlEpOperationCompletion(sqlEndpointId *string, retryPolicy *oci_common.RetryPolicy,
	actionTypeEnum oci_dataflow.SqlEndpointLifecycleStateEnum, timeout time.Duration) error {
func (s *DataflowSqlEndpointResourceCrud) Get() error {
	request := oci_dataflow.GetSqlEndpointRequest{}
func (s *DataflowSqlEndpointResourceCrud) Update() error {
	if compartment, ok := s.D.GetOkExists("compartment_id"); ok && s.D.HasChange("compartment_id") {
func (s *DataflowSqlEndpointResourceCrud) Delete() error {
	request := oci_dataflow.DeleteSqlEndpointRequest{}
func (s *DataflowSqlEndpointResourceCrud) SetData() error {
	if s.Res.CompartmentId != nil {
func (s *DataflowSqlEndpointResourceCrud) StartSqlEndpoint() error {
	request := oci_dataflow.StartSqlEndpointRequest{}
func (s *DataflowSqlEndpointResourceCrud) StopSqlEndpoint() error {
	request := oci_dataflow.StopSqlEndpointRequest{}
func (s *DataflowSqlEndpointResourceCrud) mapToSecureAccessControlRule(fieldKeyFormat string) (oci_dataflow.SecureAccessControlRule, error) {
	result := oci_dataflow.SecureAccessControlRule{}
func (s *DataflowSqlEndpointResourceCrud) mapToShapeConfig(fieldKeyFormat string) (oci_dataflow.ShapeConfig, error) {
	result := oci_dataflow.ShapeConfig{}
func (s *DataflowSqlEndpointResourceCrud) mapToSqlEndpointNetworkConfiguration(fieldKeyFormat string) (oci_dataflow.SqlEndpointNetworkConfiguration, error) {
	var baseObject oci_dataflow.SqlEndpointNetworkConfiguration
func (s *DataflowSqlEndpointResourceCrud) updateCompartment(compartment interface{}) error {
	changeCompartmentRequest := oci_dataflow.ChangeSqlEndpointCompartmentRequest{}

=== ./internal/service/dataflow/register_resource.go ===
func RegisterResource() {
	tfresource.RegisterResource("oci_dataflow_application", DataflowApplicationResource())

=== ./internal/service/osub_billing_schedule/osub_billing_schedule_billing_schedules_data_source.go ===
func OsubBillingScheduleBillingSchedulesDataSource() *schema.Resource {
	return &schema.Resource{
func readOsubBillingScheduleBillingSchedules(d *schema.ResourceData, m interface{}) error {
	sync := &OsubBillingScheduleBillingSchedulesDataSourceCrud{}
func (s *OsubBillingScheduleBillingSchedulesDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *OsubBillingScheduleBillingSchedulesDataSourceCrud) Get() error {
	request := oci_osub_billing_schedule.ListBillingSchedulesRequest{}
func (s *OsubBillingScheduleBillingSchedulesDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/osub_billing_schedule/register_resource.go ===
func RegisterResource() {
}

=== ./internal/service/dataintegration/dataintegration_workspace_import_request_data_source.go ===
func DataintegrationWorkspaceImportRequestDataSource() *schema.Resource {
	fieldMap := make(map[string]*schema.Schema)
func readSingularDataintegrationWorkspaceImportRequest(d *schema.ResourceData, m interface{}) error {
	sync := &DataintegrationWorkspaceImportRequestDataSourceCrud{}
func (s *DataintegrationWorkspaceImportRequestDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *DataintegrationWorkspaceImportRequestDataSourceCrud) Get() error {
	request := oci_dataintegration.GetImportRequestRequest{}
func (s *DataintegrationWorkspaceImportRequestDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/dataintegration/dataintegration_workspace_resource.go ===
func DataintegrationWorkspaceResource() *schema.Resource {
	return &schema.Resource{
func createDataintegrationWorkspace(d *schema.ResourceData, m interface{}) error {
	sync := &DataintegrationWorkspaceResourceCrud{}
func readDataintegrationWorkspace(d *schema.ResourceData, m interface{}) error {
	sync := &DataintegrationWorkspaceResourceCrud{}
func updateDataintegrationWorkspace(d *schema.ResourceData, m interface{}) error {
	sync := &DataintegrationWorkspaceResourceCrud{}
func deleteDataintegrationWorkspace(d *schema.ResourceData, m interface{}) error {
	sync := &DataintegrationWorkspaceResourceCrud{}
func (s *DataintegrationWorkspaceResourceCrud) ID() string {
	return *s.Res.Id
func (s *DataintegrationWorkspaceResourceCrud) CreatedPending() []string {
	return []string{
func (s *DataintegrationWorkspaceResourceCrud) CreatedTarget() []string {
	return []string{
func (s *DataintegrationWorkspaceResourceCrud) DeletedPending() []string {
	return []string{
func (s *DataintegrationWorkspaceResourceCrud) DeletedTarget() []string {
	return []string{
func (s *DataintegrationWorkspaceResourceCrud) Create() error {
	request := oci_dataintegration.CreateWorkspaceRequest{}
func (s *DataintegrationWorkspaceResourceCrud) getWorkspaceFromWorkRequest(workId *string, retryPolicy *oci_common.RetryPolicy,
	actionTypeEnum oci_dataintegration.WorkRequestResourceActionTypeEnum, timeout time.Duration) error {
func workspaceWaitForWorkRequest(wId *string, entityType string, action oci_dataintegration.WorkRequestResourceActionTypeEnum,
	timeout time.Duration, disableFoundRetries bool, client *oci_dataintegration.DataIntegrationClient) (*string, error) {
func getErrorFromDataintegrationWorkspaceWorkRequest(client *oci_dataintegration.DataIntegrationClient, workId *string, retryPolicy *oci_common.RetryPolicy, entityType string, action oci_dataintegration.WorkRequestResourceActionTypeEnum) error {
	response, err := client.ListWorkRequestErrors(context.Background(),
func (s *DataintegrationWorkspaceResourceCrud) Get() error {
	request := oci_dataintegration.GetWorkspaceRequest{}
func (s *DataintegrationWorkspaceResourceCrud) Update() error {
	if compartment, ok := s.D.GetOkExists("compartment_id"); ok && s.D.HasChange("compartment_id") {
func (s *DataintegrationWorkspaceResourceCrud) Delete() error {
	request := oci_dataintegration.DeleteWorkspaceRequest{}
func (s *DataintegrationWorkspaceResourceCrud) SetData() error {
	if s.Res.CompartmentId != nil {
func (s *DataintegrationWorkspaceResourceCrud) updateCompartment(compartment interface{}) error {
	changeCompartmentRequest := oci_dataintegration.ChangeCompartmentRequest{}

=== ./internal/service/dataintegration/dataintegration_workspace_projects_data_source.go ===
func DataintegrationWorkspaceProjectsDataSource() *schema.Resource {
	return &schema.Resource{
func readDataintegrationWorkspaceProjects(d *schema.ResourceData, m interface{}) error {
	sync := &DataintegrationWorkspaceProjectsDataSourceCrud{}
func (s *DataintegrationWorkspaceProjectsDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *DataintegrationWorkspaceProjectsDataSourceCrud) Get() error {
	request := oci_dataintegration.ListProjectsRequest{}
func (s *DataintegrationWorkspaceProjectsDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/dataintegration/dataintegration_workspace_task_data_source.go ===
func DataintegrationWorkspaceTaskDataSource() *schema.Resource {
	fieldMap := make(map[string]*schema.Schema)
func readSingularDataintegrationWorkspaceTask(d *schema.ResourceData, m interface{}) error {
	sync := &DataintegrationWorkspaceTaskDataSourceCrud{}
func (s *DataintegrationWorkspaceTaskDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *DataintegrationWorkspaceTaskDataSourceCrud) Get() error {
	request := oci_dataintegration.GetTaskRequest{}
func (s *DataintegrationWorkspaceTaskDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/dataintegration/dataintegration_workspace_application_resource.go ===
func DataintegrationWorkspaceApplicationResource() *schema.Resource {
	return &schema.Resource{
func createDataintegrationWorkspaceApplication(d *schema.ResourceData, m interface{}) error {
	sync := &DataintegrationWorkspaceApplicationResourceCrud{}
func readDataintegrationWorkspaceApplication(d *schema.ResourceData, m interface{}) error {
	sync := &DataintegrationWorkspaceApplicationResourceCrud{}
func updateDataintegrationWorkspaceApplication(d *schema.ResourceData, m interface{}) error {
	sync := &DataintegrationWorkspaceApplicationResourceCrud{}
func deleteDataintegrationWorkspaceApplication(d *schema.ResourceData, m interface{}) error {
	sync := &DataintegrationWorkspaceApplicationResourceCrud{}
func (s *DataintegrationWorkspaceApplicationResourceCrud) ID() string {
	return GetWorkspaceApplicationCompositeId(*s.Res.Key, s.D.Get("workspace_id").(string))
func (s *DataintegrationWorkspaceApplicationResourceCrud) CreatedPending() []string {
	return []string{
func (s *DataintegrationWorkspaceApplicationResourceCrud) CreatedTarget() []string {
	return []string{
func (s *DataintegrationWorkspaceApplicationResourceCrud) DeletedPending() []string {
	return []string{
func (s *DataintegrationWorkspaceApplicationResourceCrud) DeletedTarget() []string {
	return []string{
func (s *DataintegrationWorkspaceApplicationResourceCrud) Create() error {
	request := oci_dataintegration.CreateApplicationRequest{}
func (s *DataintegrationWorkspaceApplicationResourceCrud) Get() error {
	request := oci_dataintegration.GetApplicationRequest{}
func (s *DataintegrationWorkspaceApplicationResourceCrud) Update() error {
	request := oci_dataintegration.UpdateApplicationRequest{}
func (s *DataintegrationWorkspaceApplicationResourceCrud) Delete() error {
	request := oci_dataintegration.DeleteApplicationRequest{}
func (s *DataintegrationWorkspaceApplicationResourceCrud) SetData() error {

func (s *DataintegrationWorkspaceApplicationResourceCrud) mapToAggregatorSummary(fieldKeyFormat string) (oci_dataintegration.AggregatorSummary, error) {
	result := oci_dataintegration.AggregatorSummary{}
func (s *DataintegrationWorkspaceApplicationResourceCrud) mapToCountStatistic(fieldKeyFormat string) (oci_dataintegration.CountStatistic, error) {
	result := oci_dataintegration.CountStatistic{}
func (s *DataintegrationWorkspaceApplicationResourceCrud) mapToCountStatisticSummary(fieldKeyFormat string) (oci_dataintegration.CountStatisticSummary, error) {
	result := oci_dataintegration.CountStatisticSummary{}
func (s *DataintegrationWorkspaceApplicationResourceCrud) mapToCreateSourceApplicationInfo(fieldKeyFormat string) (oci_dataintegration.CreateSourceApplicationInfo, error) {
	result := oci_dataintegration.CreateSourceApplicationInfo{}
func (s *DataintegrationWorkspaceApplicationResourceCrud) mapToObjectMetadata(fieldKeyFormat string) (oci_dataintegration.ObjectMetadata, error) {
	result := oci_dataintegration.ObjectMetadata{}
func (s *DataintegrationWorkspaceApplicationResourceCrud) mapToParentReference(fieldKeyFormat string) (oci_dataintegration.ParentReference, error) {
	result := oci_dataintegration.ParentReference{}
func (s *DataintegrationWorkspaceApplicationResourceCrud) mapToRegistryMetadata(fieldKeyFormat string) (oci_dataintegration.RegistryMetadata, error) {
	result := oci_dataintegration.RegistryMetadata{}

=== ./internal/service/dataintegration/dataintegration_workspace_export_requests_data_source.go ===
func DataintegrationWorkspaceExportRequestsDataSource() *schema.Resource {
	return &schema.Resource{
func readDataintegrationWorkspaceExportRequests(d *schema.ResourceData, m interface{}) error {
	sync := &DataintegrationWorkspaceExportRequestsDataSourceCrud{}
func (s *DataintegrationWorkspaceExportRequestsDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *DataintegrationWorkspaceExportRequestsDataSourceCrud) Get() error {
	request := oci_dataintegration.ListExportRequestsRequest{}
func (s *DataintegrationWorkspaceExportRequestsDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/dataintegration/dataintegration_workspace_data_source.go ===
func DataintegrationWorkspaceDataSource() *schema.Resource {
	fieldMap := make(map[string]*schema.Schema)
func readSingularDataintegrationWorkspace(d *schema.ResourceData, m interface{}) error {
	sync := &DataintegrationWorkspaceDataSourceCrud{}
func (s *DataintegrationWorkspaceDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *DataintegrationWorkspaceDataSourceCrud) Get() error {
	request := oci_dataintegration.GetWorkspaceRequest{}
func (s *DataintegrationWorkspaceDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/dataintegration/dataintegration_workspace_tasks_data_source.go ===
func DataintegrationWorkspaceTasksDataSource() *schema.Resource {
	return &schema.Resource{
func readDataintegrationWorkspaceTasks(d *schema.ResourceData, m interface{}) error {
	sync := &DataintegrationWorkspaceTasksDataSourceCrud{}
func (s *DataintegrationWorkspaceTasksDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *DataintegrationWorkspaceTasksDataSourceCrud) Get() error {
	request := oci_dataintegration.ListTasksRequest{}
func (s *DataintegrationWorkspaceTasksDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/dataintegration/dataintegration_workspace_application_task_schedule_resource.go ===
func DataintegrationWorkspaceApplicationTaskScheduleResource() *schema.Resource {
	return &schema.Resource{
func createDataintegrationWorkspaceApplicationTaskSchedule(d *schema.ResourceData, m interface{}) error {
	sync := &DataintegrationWorkspaceApplicationTaskScheduleResourceCrud{}
func readDataintegrationWorkspaceApplicationTaskSchedule(d *schema.ResourceData, m interface{}) error {
	sync := &DataintegrationWorkspaceApplicationTaskScheduleResourceCrud{}
func updateDataintegrationWorkspaceApplicationTaskSchedule(d *schema.ResourceData, m interface{}) error {
	sync := &DataintegrationWorkspaceApplicationTaskScheduleResourceCrud{}
func deleteDataintegrationWorkspaceApplicationTaskSchedule(d *schema.ResourceData, m interface{}) error {
	sync := &DataintegrationWorkspaceApplicationTaskScheduleResourceCrud{}
func (s *DataintegrationWorkspaceApplicationTaskScheduleResourceCrud) ID() string {
	return GetWorkspaceApplicationTaskScheduleCompositeId(s.D.Get("application_key").(string), *s.Res.Key, s.D.Get("workspace_id").(string))
func (s *DataintegrationWorkspaceApplicationTaskScheduleResourceCrud) Create() error {
	request := oci_dataintegration.CreateTaskScheduleRequest{}
func (s *DataintegrationWorkspaceApplicationTaskScheduleResourceCrud) Get() error {
	request := oci_dataintegration.GetTaskScheduleRequest{}
func (s *DataintegrationWorkspaceApplicationTaskScheduleResourceCrud) Update() error {
	request := oci_dataintegration.UpdateTaskScheduleRequest{}
func (s *DataintegrationWorkspaceApplicationTaskScheduleResourceCrud) Delete() error {
	request := oci_dataintegration.DeleteTaskScheduleRequest{}
func (s *DataintegrationWorkspaceApplicationTaskScheduleResourceCrud) SetData() error {

func (s *DataintegrationWorkspaceApplicationTaskScheduleResourceCrud) mapToAbstractFrequencyDetails(fieldKeyFormat string) (oci_dataintegration.AbstractFrequencyDetails, error) {
	var baseObject oci_dataintegration.AbstractFrequencyDetails
func (s *DataintegrationWorkspaceApplicationTaskScheduleResourceCrud) mapToAggregatorSummary(fieldKeyFormat string) (oci_dataintegration.AggregatorSummary, error) {
	result := oci_dataintegration.AggregatorSummary{}
func (s *DataintegrationWorkspaceApplicationTaskScheduleResourceCrud) mapToCountStatistic(fieldKeyFormat string) (oci_dataintegration.CountStatistic, error) {
	result := oci_dataintegration.CountStatistic{}
func (s *DataintegrationWorkspaceApplicationTaskScheduleResourceCrud) mapToCountStatisticSummary(fieldKeyFormat string) (oci_dataintegration.CountStatisticSummary, error) {
	result := oci_dataintegration.CountStatisticSummary{}
func (s *DataintegrationWorkspaceApplicationTaskScheduleResourceCrud) mapToObjectMetadata(fieldKeyFormat string) (oci_dataintegration.ObjectMetadata, error) {
	result := oci_dataintegration.ObjectMetadata{}
func (s *DataintegrationWorkspaceApplicationTaskScheduleResourceCrud) mapToParentReference(fieldKeyFormat string) (oci_dataintegration.ParentReference, error) {
	result := oci_dataintegration.ParentReference{}
func (s *DataintegrationWorkspaceApplicationTaskScheduleResourceCrud) mapToRegistryMetadata(fieldKeyFormat string) (oci_dataintegration.RegistryMetadata, error) {
	result := oci_dataintegration.RegistryMetadata{}
func (s *DataintegrationWorkspaceApplicationTaskScheduleResourceCrud) mapToSchedule(fieldKeyFormat string) (oci_dataintegration.Schedule, error) {
	result := oci_dataintegration.Schedule{}
func (s *DataintegrationWorkspaceApplicationTaskScheduleResourceCrud) mapToTime(fieldKeyFormat string) (oci_dataintegration.Time, error) {
	result := oci_dataintegration.Time{}

=== ./internal/service/dataintegration/dataintegration_workspace_application_task_schedule_data_source.go ===
func DataintegrationWorkspaceApplicationTaskScheduleDataSource() *schema.Resource {
	fieldMap := make(map[string]*schema.Schema)
func readSingularDataintegrationWorkspaceApplicationTaskSchedule(d *schema.ResourceData, m interface{}) error {
	sync := &DataintegrationWorkspaceApplicationTaskScheduleDataSourceCrud{}
func (s *DataintegrationWorkspaceApplicationTaskScheduleDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *DataintegrationWorkspaceApplicationTaskScheduleDataSourceCrud) Get() error {
	request := oci_dataintegration.GetTaskScheduleRequest{}
func (s *DataintegrationWorkspaceApplicationTaskScheduleDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/dataintegration/dataintegration_workspace_import_requests_data_source.go ===
func DataintegrationWorkspaceImportRequestsDataSource() *schema.Resource {
	return &schema.Resource{
func readDataintegrationWorkspaceImportRequests(d *schema.ResourceData, m interface{}) error {
	sync := &DataintegrationWorkspaceImportRequestsDataSourceCrud{}
func (s *DataintegrationWorkspaceImportRequestsDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *DataintegrationWorkspaceImportRequestsDataSourceCrud) Get() error {
	request := oci_dataintegration.ListImportRequestsRequest{}
func (s *DataintegrationWorkspaceImportRequestsDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/dataintegration/dataintegration_workspace_application_patch_data_source.go ===
func DataintegrationWorkspaceApplicationPatchDataSource() *schema.Resource {
	fieldMap := make(map[string]*schema.Schema)
func readSingularDataintegrationWorkspaceApplicationPatch(d *schema.ResourceData, m interface{}) error {
	sync := &DataintegrationWorkspaceApplicationPatchDataSourceCrud{}
func (s *DataintegrationWorkspaceApplicationPatchDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *DataintegrationWorkspaceApplicationPatchDataSourceCrud) Get() error {
	request := oci_dataintegration.GetPatchRequest{}
func (s *DataintegrationWorkspaceApplicationPatchDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/dataintegration/dataintegration_workspace_folder_resource.go ===
func DataintegrationWorkspaceFolderResource() *schema.Resource {
	return &schema.Resource{
func createDataintegrationWorkspaceFolder(d *schema.ResourceData, m interface{}) error {
	sync := &DataintegrationWorkspaceFolderResourceCrud{}
func readDataintegrationWorkspaceFolder(d *schema.ResourceData, m interface{}) error {
	sync := &DataintegrationWorkspaceFolderResourceCrud{}
func updateDataintegrationWorkspaceFolder(d *schema.ResourceData, m interface{}) error {
	sync := &DataintegrationWorkspaceFolderResourceCrud{}
func deleteDataintegrationWorkspaceFolder(d *schema.ResourceData, m interface{}) error {
	sync := &DataintegrationWorkspaceFolderResourceCrud{}
func (s *DataintegrationWorkspaceFolderResourceCrud) ID() string {
	return GetWorkspaceFolderCompositeId(*s.Res.Key, s.D.Get("workspace_id").(string))
func (s *DataintegrationWorkspaceFolderResourceCrud) Create() error {
	request := oci_dataintegration.CreateFolderRequest{}
func (s *DataintegrationWorkspaceFolderResourceCrud) Get() error {
	request := oci_dataintegration.GetFolderRequest{}
func (s *DataintegrationWorkspaceFolderResourceCrud) Update() error {
	request := oci_dataintegration.UpdateFolderRequest{}
func (s *DataintegrationWorkspaceFolderResourceCrud) Delete() error {
	request := oci_dataintegration.DeleteFolderRequest{}
func (s *DataintegrationWorkspaceFolderResourceCrud) SetData() error {

func (s *DataintegrationWorkspaceFolderResourceCrud) mapToParentReference(fieldKeyFormat string) (oci_dataintegration.ParentReference, error) {
	result := oci_dataintegration.ParentReference{}
func (s *DataintegrationWorkspaceFolderResourceCrud) mapToRegistryMetadata(fieldKeyFormat string) (oci_dataintegration.RegistryMetadata, error) {
	result := oci_dataintegration.RegistryMetadata{}

=== ./internal/service/dataintegration/dataintegration_workspace_applications_data_source.go ===
func DataintegrationWorkspaceApplicationsDataSource() *schema.Resource {
	return &schema.Resource{
func readDataintegrationWorkspaceApplications(d *schema.ResourceData, m interface{}) error {
	sync := &DataintegrationWorkspaceApplicationsDataSourceCrud{}
func (s *DataintegrationWorkspaceApplicationsDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *DataintegrationWorkspaceApplicationsDataSourceCrud) Get() error {
	request := oci_dataintegration.ListApplicationsRequest{}
func (s *DataintegrationWorkspaceApplicationsDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/dataintegration/dataintegration_workspace_application_patches_data_source.go ===
func DataintegrationWorkspaceApplicationPatchesDataSource() *schema.Resource {
	return &schema.Resource{
func readDataintegrationWorkspaceApplicationPatches(d *schema.ResourceData, m interface{}) error {
	sync := &DataintegrationWorkspaceApplicationPatchesDataSourceCrud{}
func (s *DataintegrationWorkspaceApplicationPatchesDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *DataintegrationWorkspaceApplicationPatchesDataSourceCrud) Get() error {
	request := oci_dataintegration.ListPatchesRequest{}
func (s *DataintegrationWorkspaceApplicationPatchesDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/dataintegration/dataintegration_workspace_application_schedule_data_source.go ===
func DataintegrationWorkspaceApplicationScheduleDataSource() *schema.Resource {
	fieldMap := make(map[string]*schema.Schema)
func readSingularDataintegrationWorkspaceApplicationSchedule(d *schema.ResourceData, m interface{}) error {
	sync := &DataintegrationWorkspaceApplicationScheduleDataSourceCrud{}
func (s *DataintegrationWorkspaceApplicationScheduleDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *DataintegrationWorkspaceApplicationScheduleDataSourceCrud) Get() error {
	request := oci_dataintegration.GetScheduleRequest{}
func (s *DataintegrationWorkspaceApplicationScheduleDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/dataintegration/dataintegration_workspace_project_resource.go ===
func DataintegrationWorkspaceProjectResource() *schema.Resource {
	return &schema.Resource{
func createDataintegrationWorkspaceProject(d *schema.ResourceData, m interface{}) error {
	sync := &DataintegrationWorkspaceProjectResourceCrud{}
func readDataintegrationWorkspaceProject(d *schema.ResourceData, m interface{}) error {
	sync := &DataintegrationWorkspaceProjectResourceCrud{}
func updateDataintegrationWorkspaceProject(d *schema.ResourceData, m interface{}) error {
	sync := &DataintegrationWorkspaceProjectResourceCrud{}
func deleteDataintegrationWorkspaceProject(d *schema.ResourceData, m interface{}) error {
	sync := &DataintegrationWorkspaceProjectResourceCrud{}
func (s *DataintegrationWorkspaceProjectResourceCrud) ID() string {
	return GetWorkspaceProjectCompositeId(*s.Res.Key, s.D.Get("workspace_id").(string))
func (s *DataintegrationWorkspaceProjectResourceCrud) Create() error {
	request := oci_dataintegration.CreateProjectRequest{}
func (s *DataintegrationWorkspaceProjectResourceCrud) Get() error {
	request := oci_dataintegration.GetProjectRequest{}
func (s *DataintegrationWorkspaceProjectResourceCrud) Update() error {
	request := oci_dataintegration.UpdateProjectRequest{}
func (s *DataintegrationWorkspaceProjectResourceCrud) Delete() error {
	request := oci_dataintegration.DeleteProjectRequest{}
func (s *DataintegrationWorkspaceProjectResourceCrud) SetData() error {

func (s *DataintegrationWorkspaceProjectResourceCrud) mapToParentReference(fieldKeyFormat string) (oci_dataintegration.ParentReference, error) {
	result := oci_dataintegration.ParentReference{}
func (s *DataintegrationWorkspaceProjectResourceCrud) mapToRegistryMetadata(fieldKeyFormat string) (oci_dataintegration.RegistryMetadata, error) {
	result := oci_dataintegration.RegistryMetadata{}

=== ./internal/service/dataintegration/dataintegration_workspaces_data_source.go ===
func DataintegrationWorkspacesDataSource() *schema.Resource {
	return &schema.Resource{
func readDataintegrationWorkspaces(d *schema.ResourceData, m interface{}) error {
	sync := &DataintegrationWorkspacesDataSourceCrud{}
func (s *DataintegrationWorkspacesDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *DataintegrationWorkspacesDataSourceCrud) Get() error {
	request := oci_dataintegration.ListWorkspacesRequest{}
func (s *DataintegrationWorkspacesDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/dataintegration/dataintegration_workspace_folders_data_source.go ===
func DataintegrationWorkspaceFoldersDataSource() *schema.Resource {
	return &schema.Resource{
func readDataintegrationWorkspaceFolders(d *schema.ResourceData, m interface{}) error {
	sync := &DataintegrationWorkspaceFoldersDataSourceCrud{}
func (s *DataintegrationWorkspaceFoldersDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *DataintegrationWorkspaceFoldersDataSourceCrud) Get() error {
	request := oci_dataintegration.ListFoldersRequest{}
func (s *DataintegrationWorkspaceFoldersDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/dataintegration/dataintegration_workspace_export_request_data_source.go ===
func DataintegrationWorkspaceExportRequestDataSource() *schema.Resource {
	fieldMap := make(map[string]*schema.Schema)
func readSingularDataintegrationWorkspaceExportRequest(d *schema.ResourceData, m interface{}) error {
	sync := &DataintegrationWorkspaceExportRequestDataSourceCrud{}
func (s *DataintegrationWorkspaceExportRequestDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *DataintegrationWorkspaceExportRequestDataSourceCrud) Get() error {
	request := oci_dataintegration.GetExportRequestRequest{}
func (s *DataintegrationWorkspaceExportRequestDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/dataintegration/dataintegration_workspace_application_task_schedules_data_source.go ===
func DataintegrationWorkspaceApplicationTaskSchedulesDataSource() *schema.Resource {
	return &schema.Resource{
func readDataintegrationWorkspaceApplicationTaskSchedules(d *schema.ResourceData, m interface{}) error {
	sync := &DataintegrationWorkspaceApplicationTaskSchedulesDataSourceCrud{}
func (s *DataintegrationWorkspaceApplicationTaskSchedulesDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *DataintegrationWorkspaceApplicationTaskSchedulesDataSourceCrud) Get() error {
	request := oci_dataintegration.ListTaskSchedulesRequest{}
func (s *DataintegrationWorkspaceApplicationTaskSchedulesDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/dataintegration/dataintegration_workspace_application_data_source.go ===
func DataintegrationWorkspaceApplicationDataSource() *schema.Resource {
	fieldMap := make(map[string]*schema.Schema)
func readSingularDataintegrationWorkspaceApplication(d *schema.ResourceData, m interface{}) error {
	sync := &DataintegrationWorkspaceApplicationDataSourceCrud{}
func (s *DataintegrationWorkspaceApplicationDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *DataintegrationWorkspaceApplicationDataSourceCrud) Get() error {
	request := oci_dataintegration.GetApplicationRequest{}
func (s *DataintegrationWorkspaceApplicationDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/dataintegration/dataintegration_workspace_export_request_resource.go ===
func DataintegrationWorkspaceExportRequestResource() *schema.Resource {
	return &schema.Resource{
func createDataintegrationWorkspaceExportRequest(d *schema.ResourceData, m interface{}) error {
	sync := &DataintegrationWorkspaceExportRequestResourceCrud{}
func readDataintegrationWorkspaceExportRequest(d *schema.ResourceData, m interface{}) error {
	sync := &DataintegrationWorkspaceExportRequestResourceCrud{}
func deleteDataintegrationWorkspaceExportRequest(d *schema.ResourceData, m interface{}) error {
	sync := &DataintegrationWorkspaceExportRequestResourceCrud{}
func (s *DataintegrationWorkspaceExportRequestResourceCrud) ID() string {
	return GetWorkspaceExportRequestCompositeId(s.D.Get("key").(string), s.D.Get("workspace_id").(string))
func (s *DataintegrationWorkspaceExportRequestResourceCrud) Create() error {
	request := oci_dataintegration.CreateExportRequestRequest{}
func (s *DataintegrationWorkspaceExportRequestResourceCrud) Get() error {
	request := oci_dataintegration.GetExportRequestRequest{}
func (s *DataintegrationWorkspaceExportRequestResourceCrud) Delete() error {
	request := oci_dataintegration.DeleteExportRequestRequest{}
func (s *DataintegrationWorkspaceExportRequestResourceCrud) SetData() error {


=== ./internal/service/dataintegration/dataintegration_workspace_project_data_source.go ===
func DataintegrationWorkspaceProjectDataSource() *schema.Resource {
	fieldMap := make(map[string]*schema.Schema)
func readSingularDataintegrationWorkspaceProject(d *schema.ResourceData, m interface{}) error {
	sync := &DataintegrationWorkspaceProjectDataSourceCrud{}
func (s *DataintegrationWorkspaceProjectDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *DataintegrationWorkspaceProjectDataSourceCrud) Get() error {
	request := oci_dataintegration.GetProjectRequest{}
func (s *DataintegrationWorkspaceProjectDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/dataintegration/dataintegration_workspace_application_schedules_data_source.go ===
func DataintegrationWorkspaceApplicationSchedulesDataSource() *schema.Resource {
	return &schema.Resource{
func readDataintegrationWorkspaceApplicationSchedules(d *schema.ResourceData, m interface{}) error {
	sync := &DataintegrationWorkspaceApplicationSchedulesDataSourceCrud{}
func (s *DataintegrationWorkspaceApplicationSchedulesDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *DataintegrationWorkspaceApplicationSchedulesDataSourceCrud) Get() error {
	request := oci_dataintegration.ListSchedulesRequest{}
func (s *DataintegrationWorkspaceApplicationSchedulesDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/dataintegration/dataintegration_workspace_folder_data_source.go ===
func DataintegrationWorkspaceFolderDataSource() *schema.Resource {
	fieldMap := make(map[string]*schema.Schema)
func readSingularDataintegrationWorkspaceFolder(d *schema.ResourceData, m interface{}) error {
	sync := &DataintegrationWorkspaceFolderDataSourceCrud{}
func (s *DataintegrationWorkspaceFolderDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *DataintegrationWorkspaceFolderDataSourceCrud) Get() error {
	request := oci_dataintegration.GetFolderRequest{}
func (s *DataintegrationWorkspaceFolderDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/dataintegration/dataintegration_export.go ===
func getDataintegrationWorkspaceProjectId(resource *tf_export.OCIResource) (string, error) {

func getDataintegrationWorkspaceFolderId(resource *tf_export.OCIResource) (string, error) {

func getDataintegrationWorkspaceApplicationId(resource *tf_export.OCIResource) (string, error) {

func getDataintegrationWorkspaceImportRequestId(resource *tf_export.OCIResource) (string, error) {

func getDataintegrationWorkspaceExportRequestId(resource *tf_export.OCIResource) (string, error) {

func getDataintegrationWorkspaceTaskId(resource *tf_export.OCIResource) (string, error) {

func getDataintegrationWorkspaceApplicationPatchId(resource *tf_export.OCIResource) (string, error) {

func getDataintegrationWorkspaceApplicationScheduleId(resource *tf_export.OCIResource) (string, error) {

func getDataintegrationWorkspaceApplicationTaskScheduleId(resource *tf_export.OCIResource) (string, error) {


=== ./internal/service/dataintegration/dataintegration_workspace_application_patch_resource.go ===
func DataintegrationWorkspaceApplicationPatchResource() *schema.Resource {
	return &schema.Resource{
func createDataintegrationWorkspaceApplicationPatch(d *schema.ResourceData, m interface{}) error {
	sync := &DataintegrationWorkspaceApplicationPatchResourceCrud{}
func readDataintegrationWorkspaceApplicationPatch(d *schema.ResourceData, m interface{}) error {
	sync := &DataintegrationWorkspaceApplicationPatchResourceCrud{}
func deleteDataintegrationWorkspaceApplicationPatch(d *schema.ResourceData, m interface{}) error {
	sync := &DataintegrationWorkspaceApplicationPatchResourceCrud{}
func (s *DataintegrationWorkspaceApplicationPatchResourceCrud) ID() string {
	return GetWorkspaceApplicationPatchCompositeId(s.D.Get("application_key").(string), *s.Res.Key, s.D.Get("workspace_id").(string))
func (s *DataintegrationWorkspaceApplicationPatchResourceCrud) Create() error {
	request := oci_dataintegration.CreatePatchRequest{}
func (s *DataintegrationWorkspaceApplicationPatchResourceCrud) Get() error {
	request := oci_dataintegration.GetPatchRequest{}
func (s *DataintegrationWorkspaceApplicationPatchResourceCrud) Delete() error {
	request := oci_dataintegration.DeletePatchRequest{}
func (s *DataintegrationWorkspaceApplicationPatchResourceCrud) SetData() error {

func (s *DataintegrationWorkspaceApplicationPatchResourceCrud) mapToRegistryMetadata(fieldKeyFormat string) (oci_dataintegration.RegistryMetadata, error) {
	result := oci_dataintegration.RegistryMetadata{}

=== ./internal/service/dataintegration/dataintegration_workspace_application_schedule_resource.go ===
func DataintegrationWorkspaceApplicationScheduleResource() *schema.Resource {
	return &schema.Resource{
func createDataintegrationWorkspaceApplicationSchedule(d *schema.ResourceData, m interface{}) error {
	sync := &DataintegrationWorkspaceApplicationScheduleResourceCrud{}
func readDataintegrationWorkspaceApplicationSchedule(d *schema.ResourceData, m interface{}) error {
	sync := &DataintegrationWorkspaceApplicationScheduleResourceCrud{}
func updateDataintegrationWorkspaceApplicationSchedule(d *schema.ResourceData, m interface{}) error {
	sync := &DataintegrationWorkspaceApplicationScheduleResourceCrud{}
func deleteDataintegrationWorkspaceApplicationSchedule(d *schema.ResourceData, m interface{}) error {
	sync := &DataintegrationWorkspaceApplicationScheduleResourceCrud{}
func (s *DataintegrationWorkspaceApplicationScheduleResourceCrud) ID() string {
	return GetWorkspaceApplicationScheduleCompositeId(s.D.Get("application_key").(string), *s.Res.Key, s.D.Get("workspace_id").(string))
func (s *DataintegrationWorkspaceApplicationScheduleResourceCrud) Create() error {
	request := oci_dataintegration.CreateScheduleRequest{}
func (s *DataintegrationWorkspaceApplicationScheduleResourceCrud) Get() error {
	request := oci_dataintegration.GetScheduleRequest{}
func (s *DataintegrationWorkspaceApplicationScheduleResourceCrud) Update() error {
	request := oci_dataintegration.UpdateScheduleRequest{}
func (s *DataintegrationWorkspaceApplicationScheduleResourceCrud) Delete() error {
	request := oci_dataintegration.DeleteScheduleRequest{}
func (s *DataintegrationWorkspaceApplicationScheduleResourceCrud) SetData() error {

func (s *DataintegrationWorkspaceApplicationScheduleResourceCrud) mapToParentReference(fieldKeyFormat string) (oci_dataintegration.ParentReference, error) {
	result := oci_dataintegration.ParentReference{}
func (s *DataintegrationWorkspaceApplicationScheduleResourceCrud) mapToRegistryMetadata(fieldKeyFormat string) (oci_dataintegration.RegistryMetadata, error) {
	result := oci_dataintegration.RegistryMetadata{}
func (s *DataintegrationWorkspaceApplicationScheduleResourceCrud) mapToTime(fieldKeyFormat string) (oci_dataintegration.Time, error) {
	result := oci_dataintegration.Time{}
func (s *DataintegrationWorkspaceApplicationScheduleResourceCrud) mapToAbstractFrequencyDetailsForSchedule(fieldKeyFormat string) (oci_dataintegration.AbstractFrequencyDetails, error) {
	var baseObject oci_dataintegration.AbstractFrequencyDetails

=== ./internal/service/dataintegration/dataintegration_workspace_task_resource.go ===
func DataintegrationWorkspaceTaskResource() *schema.Resource {
	return &schema.Resource{
func createDataintegrationWorkspaceTask(d *schema.ResourceData, m interface{}) error {
	sync := &DataintegrationWorkspaceTaskResourceCrud{}
func readDataintegrationWorkspaceTask(d *schema.ResourceData, m interface{}) error {
	sync := &DataintegrationWorkspaceTaskResourceCrud{}
func updateDataintegrationWorkspaceTask(d *schema.ResourceData, m interface{}) error {
	sync := &DataintegrationWorkspaceTaskResourceCrud{}
func deleteDataintegrationWorkspaceTask(d *schema.ResourceData, m interface{}) error {
	sync := &DataintegrationWorkspaceTaskResourceCrud{}
func (s *DataintegrationWorkspaceTaskResourceCrud) ID() string {
	workspaceTask := *s.Res
func (s *DataintegrationWorkspaceTaskResourceCrud) Create() error {
	request := oci_dataintegration.CreateTaskRequest{}
func (s *DataintegrationWorkspaceTaskResourceCrud) Get() error {
	request := oci_dataintegration.GetTaskRequest{}
func (s *DataintegrationWorkspaceTaskResourceCrud) Update() error {
	request := oci_dataintegration.UpdateTaskRequest{}
func (s *DataintegrationWorkspaceTaskResourceCrud) Delete() error {
	request := oci_dataintegration.DeleteTaskRequest{}
func (s *DataintegrationWorkspaceTaskResourceCrud) SetData() error {

func (s *DataintegrationWorkspaceTaskResourceCrud) mapToAggregatorSummary(fieldKeyFormat string) (oci_dataintegration.AggregatorSummary, error) {
	result := oci_dataintegration.AggregatorSummary{}
func (s *DataintegrationWorkspaceTaskResourceCrud) mapToAuthConfig(fieldKeyFormat string) (oci_dataintegration.AuthConfig, error) {
	var baseObject oci_dataintegration.AuthConfig
func (s *DataintegrationWorkspaceTaskResourceCrud) mapToAuthDetails(fieldKeyFormat string) (oci_dataintegration.AuthDetails, error) {
	result := oci_dataintegration.AuthDetails{}
func (s *DataintegrationWorkspaceTaskResourceCrud) mapToCancelRestCallConfig(fieldKeyFormat string) (oci_dataintegration.CancelRestCallConfig, error) {
	result := oci_dataintegration.CancelRestCallConfig{}
func (s *DataintegrationWorkspaceTaskResourceCrud) mapToRestCallConfigValues(fieldKeyFormat string) (oci_dataintegration.ConfigValues, error) {
	result := oci_dataintegration.ConfigValues{}
func (s *DataintegrationWorkspaceTaskResourceCrud) mapToRequestPayload(fieldKeyFormat string, tmpList []interface{}) (oci_dataintegration.ConfigParameterValue, error) {
	result := oci_dataintegration.ConfigParameterValue{}
func (s *DataintegrationWorkspaceTaskResourceCrud) ObjectMapToPayloadRefValue(fieldKeyFormat string) interface{} {
	result := make(map[string]interface{})
func (s *DataintegrationWorkspaceTaskResourceCrud) ObjectMapToPayloadRefValueConfigValues(fieldKeyFormat string) oci_dataintegration.ConfigValues {
	result := oci_dataintegration.ConfigValues{}
func (s *DataintegrationWorkspaceTaskResourceCrud) mapToPayloadRefDataParam(fieldKeyFormat string) oci_dataintegration.ConfigParameterValue {
	result := oci_dataintegration.ConfigParameterValue{}
func (s *DataintegrationWorkspaceTaskResourceCrud) mapToPollCondition(tmpList []interface{}) (oci_dataintegration.ConfigParameterValue, error) {
	result := oci_dataintegration.ConfigParameterValue{}
func (s *DataintegrationWorkspaceTaskResourceCrud) mapToConditionalCompositeFieldMap(fieldKeyFormat string) (oci_dataintegration.ConditionalCompositeFieldMap, error) {
	result := oci_dataintegration.ConditionalCompositeFieldMap{}
func (s *DataintegrationWorkspaceTaskResourceCrud) mapToConfigValues(fieldKeyFormat string) (oci_dataintegration.ConfigValues, error) {
	result := oci_dataintegration.ConfigValues{}
func (s *DataintegrationWorkspaceTaskResourceCrud) mapToCountStatistic(fieldKeyFormat string) (oci_dataintegration.CountStatistic, error) {
	result := oci_dataintegration.CountStatistic{}
func (s *DataintegrationWorkspaceTaskResourceCrud) mapToCountStatisticSummary(fieldKeyFormat string) (oci_dataintegration.CountStatisticSummary, error) {
	result := oci_dataintegration.CountStatisticSummary{}
func (s *DataintegrationWorkspaceTaskResourceCrud) mapToCreateConfigProvider(fieldKeyFormat string) (oci_dataintegration.CreateConfigProvider, error) {
	result := oci_dataintegration.CreateConfigProvider{}
func (s *DataintegrationWorkspaceTaskResourceCrud) mapToConfigProvider(fieldKeyFormat string) (oci_dataintegration.ConfigProvider, error) {
	result := oci_dataintegration.ConfigProvider{}
func (s *DataintegrationWorkspaceTaskResourceCrud) mapToDataFlow(fieldKeyFormat string) (oci_dataintegration.DataFlow, error) {
	result := oci_dataintegration.DataFlow{}
func (s *DataintegrationWorkspaceTaskResourceCrud) mapToDataflowApplication(fieldKeyFormat string) (oci_dataintegration.DataflowApplication, error) {
	result := oci_dataintegration.DataflowApplication{}
func (s *DataintegrationWorkspaceTaskResourceCrud) mapToExecuteRestCallConfig(fieldKeyFormat string) (oci_dataintegration.ExecuteRestCallConfig, error) {
	result := oci_dataintegration.ExecuteRestCallConfig{}
func (s *DataintegrationWorkspaceTaskResourceCrud) mapToExpression(fieldKeyFormat string) (oci_dataintegration.Expression, error) {
	result := oci_dataintegration.Expression{}
func (s *DataintegrationWorkspaceTaskResourceCrud) mapToFlowNode(fieldKeyFormat string) (oci_dataintegration.FlowNode, error) {
	result := oci_dataintegration.FlowNode{}
func (s *DataintegrationWorkspaceTaskResourceCrud) mapToInputLink(fieldKeyFormat string) (oci_dataintegration.InputLink, error) {
	result := oci_dataintegration.InputLink{}
func (s *DataintegrationWorkspaceTaskResourceCrud) mapToObjectMetadata(fieldKeyFormat string) (oci_dataintegration.ObjectMetadata, error) {
	result := oci_dataintegration.ObjectMetadata{}
func (s *DataintegrationWorkspaceTaskResourceCrud) mapToOutputLink(fieldKeyFormat string) (oci_dataintegration.OutputLink, error) {
	result := oci_dataintegration.OutputLink{}
func (s *DataintegrationWorkspaceTaskResourceCrud) mapToOutputPort(fieldKeyFormat string) (oci_dataintegration.OutputPort, error) {
	result := oci_dataintegration.OutputPort{}
func (s *DataintegrationWorkspaceTaskResourceCrud) mapToInputPort(fieldKeyFormat string) (oci_dataintegration.InputPort, error) {
	result := oci_dataintegration.InputPort{}
func (s *DataintegrationWorkspaceTaskResourceCrud) mapToParameter(fieldKeyFormat string) (oci_dataintegration.Parameter, error) {
	result := oci_dataintegration.Parameter{}
func (s *DataintegrationWorkspaceTaskResourceCrud) mapToDataType(fieldKeyFormat string) (interface{}, error) {
	result := map[string]string{}
func (s *DataintegrationWorkspaceTaskResourceCrud) mapToParentReference(fieldKeyFormat string) (oci_dataintegration.ParentReference, error) {
	result := oci_dataintegration.ParentReference{}
func (s *DataintegrationWorkspaceTaskResourceCrud) mapToPipeline(fieldKeyFormat string) (oci_dataintegration.Pipeline, error) {
	result := oci_dataintegration.Pipeline{}
func (s *DataintegrationWorkspaceTaskResourceCrud) mapToPollRestCallConfig(fieldKeyFormat string) (oci_dataintegration.PollRestCallConfig, error) {
	result := oci_dataintegration.PollRestCallConfig{}
func (s *DataintegrationWorkspaceTaskResourceCrud) mapToTypedExpressionConfigValues(fieldKeyFormat string) (oci_dataintegration.ConfigValues, error) {
	result := oci_dataintegration.ConfigValues{}
func (s *DataintegrationWorkspaceTaskResourceCrud) mapToPollRestCallConfigValues(fieldKeyFormat string) (oci_dataintegration.ConfigValues, error) {
	result := oci_dataintegration.ConfigValues{}
func (s *DataintegrationWorkspaceTaskResourceCrud) mapToProjectionRule(fieldKeyFormat string) (oci_dataintegration.ProjectionRule, error) {
	var baseObject oci_dataintegration.ProjectionRule
func (s *DataintegrationWorkspaceTaskResourceCrud) mapToRegistryMetadata(fieldKeyFormat string) (oci_dataintegration.RegistryMetadata, error) {
	result := oci_dataintegration.RegistryMetadata{}
func (s *DataintegrationWorkspaceTaskResourceCrud) mapToRootObject(fieldKeyFormat string) (oci_dataintegration.RootObject, error) {
	result := oci_dataintegration.RootObject{}
func (s *DataintegrationWorkspaceTaskResourceCrud) mapToScript(fieldKeyFormat string) (oci_dataintegration.Script, error) {
	result := oci_dataintegration.Script{}
func (s *DataintegrationWorkspaceTaskResourceCrud) mapToTypedExpression(fieldKeyFormat string) (oci_dataintegration.TypedExpression, error) {
	result := oci_dataintegration.TypedExpression{}
func (s *DataintegrationWorkspaceTaskResourceCrud) mapToUIProperties(fieldKeyFormat string) (oci_dataintegration.UiProperties, error) {
	result := oci_dataintegration.UiProperties{}
func (s *DataintegrationWorkspaceTaskResourceCrud) mapToVariable(fieldKeyFormat string) (oci_dataintegration.Variable, error) {
	result := oci_dataintegration.Variable{}
func (s *DataintegrationWorkspaceTaskResourceCrud) populateTopLevelPolymorphicCreateTaskRequest(request *oci_dataintegration.CreateTaskRequest) error {
	//discriminator
func (s *DataintegrationWorkspaceTaskResourceCrud) populateTopLevelPolymorphicUpdateTaskRequest(request *oci_dataintegration.UpdateTaskRequest) error {
	//discriminator

=== ./internal/service/dataintegration/register_resource.go ===
func RegisterResource() {
	tfresource.RegisterResource("oci_dataintegration_workspace", DataintegrationWorkspaceResource())

=== ./internal/service/dataintegration/dataintegration_workspace_import_request_resource.go ===
func DataintegrationWorkspaceImportRequestResource() *schema.Resource {
	return &schema.Resource{
func createDataintegrationWorkspaceImportRequest(d *schema.ResourceData, m interface{}) error {
	sync := &DataintegrationWorkspaceImportRequestResourceCrud{}
func readDataintegrationWorkspaceImportRequest(d *schema.ResourceData, m interface{}) error {
	sync := &DataintegrationWorkspaceImportRequestResourceCrud{}
func deleteDataintegrationWorkspaceImportRequest(d *schema.ResourceData, m interface{}) error {
	sync := &DataintegrationWorkspaceImportRequestResourceCrud{}
func (s *DataintegrationWorkspaceImportRequestResourceCrud) ID() string {
	return GetWorkspaceImportRequestCompositeId(s.D.Get("key").(string), s.D.Get("workspace_id").(string))
func (s *DataintegrationWorkspaceImportRequestResourceCrud) Create() error {
	request := oci_dataintegration.CreateImportRequestRequest{}
func (s *DataintegrationWorkspaceImportRequestResourceCrud) Get() error {
	request := oci_dataintegration.GetImportRequestRequest{}
func (s *DataintegrationWorkspaceImportRequestResourceCrud) Delete() error {
	request := oci_dataintegration.DeleteImportRequestRequest{}
func (s *DataintegrationWorkspaceImportRequestResourceCrud) SetData() error {

func (s *DataintegrationWorkspaceImportRequestResourceCrud) mapToImportConflictResolution(fieldKeyFormat string) (oci_dataintegration.ImportConflictResolution, error) {
	result := oci_dataintegration.ImportConflictResolution{}

=== ./internal/service/cloud_bridge/cloud_bridge_inventory_data_source.go ===
func CloudBridgeInventoryDataSource() *schema.Resource {
	fieldMap := make(map[string]*schema.Schema)
func readSingularCloudBridgeInventory(d *schema.ResourceData, m interface{}) error {
	sync := &CloudBridgeInventoryDataSourceCrud{}
func (s *CloudBridgeInventoryDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *CloudBridgeInventoryDataSourceCrud) Get() error {
	request := oci_cloud_bridge.GetInventoryRequest{}
func (s *CloudBridgeInventoryDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/cloud_bridge/cloud_bridge_asset_source_data_source.go ===
func CloudBridgeAssetSourceDataSource() *schema.Resource {
	fieldMap := make(map[string]*schema.Schema)
func readSingularCloudBridgeAssetSource(d *schema.ResourceData, m interface{}) error {
	sync := &CloudBridgeAssetSourceDataSourceCrud{}
func (s *CloudBridgeAssetSourceDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *CloudBridgeAssetSourceDataSourceCrud) Get() error {
	request := oci_cloud_bridge.GetAssetSourceRequest{}
func (s *CloudBridgeAssetSourceDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/cloud_bridge/cloud_bridge_agents_data_source.go ===
func CloudBridgeAgentsDataSource() *schema.Resource {
	return &schema.Resource{
func readCloudBridgeAgents(d *schema.ResourceData, m interface{}) error {
	sync := &CloudBridgeAgentsDataSourceCrud{}
func (s *CloudBridgeAgentsDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *CloudBridgeAgentsDataSourceCrud) Get() error {
	request := oci_cloud_bridge.ListAgentsRequest{}
func (s *CloudBridgeAgentsDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/cloud_bridge/cloud_bridge_environment_resource.go ===
func CloudBridgeEnvironmentResource() *schema.Resource {
	return &schema.Resource{
func createCloudBridgeEnvironment(d *schema.ResourceData, m interface{}) error {
	sync := &CloudBridgeEnvironmentResourceCrud{}
func readCloudBridgeEnvironment(d *schema.ResourceData, m interface{}) error {
	sync := &CloudBridgeEnvironmentResourceCrud{}
func updateCloudBridgeEnvironment(d *schema.ResourceData, m interface{}) error {
	sync := &CloudBridgeEnvironmentResourceCrud{}
func deleteCloudBridgeEnvironment(d *schema.ResourceData, m interface{}) error {
	sync := &CloudBridgeEnvironmentResourceCrud{}
func (s *CloudBridgeEnvironmentResourceCrud) ID() string {
	return *s.Res.Id
func (s *CloudBridgeEnvironmentResourceCrud) CreatedPending() []string {
	return []string{
func (s *CloudBridgeEnvironmentResourceCrud) CreatedTarget() []string {
	return []string{
func (s *CloudBridgeEnvironmentResourceCrud) DeletedPending() []string {
	return []string{
func (s *CloudBridgeEnvironmentResourceCrud) DeletedTarget() []string {
	return []string{
func (s *CloudBridgeEnvironmentResourceCrud) Create() error {
	request := oci_cloud_bridge.CreateEnvironmentRequest{}
func (s *CloudBridgeEnvironmentResourceCrud) getEnvironmentFromWorkRequest(workId *string, retryPolicy *oci_common.RetryPolicy,
	actionTypeEnum oci_cloud_bridge.ActionTypeEnum, timeout time.Duration) error {
func (s *CloudBridgeEnvironmentResourceCrud) Get() error {
	request := oci_cloud_bridge.GetEnvironmentRequest{}
func (s *CloudBridgeEnvironmentResourceCrud) Update() error {
	if compartment, ok := s.D.GetOkExists("compartment_id"); ok && s.D.HasChange("compartment_id") {
func (s *CloudBridgeEnvironmentResourceCrud) Delete() error {
	request := oci_cloud_bridge.DeleteEnvironmentRequest{}
func (s *CloudBridgeEnvironmentResourceCrud) SetData() error {
	if s.Res.CompartmentId != nil {
func (s *CloudBridgeEnvironmentResourceCrud) updateCompartment(compartment interface{}) error {
	changeCompartmentRequest := oci_cloud_bridge.ChangeEnvironmentCompartmentRequest{}

=== ./internal/service/cloud_bridge/cloud_bridge_environments_data_source.go ===
func CloudBridgeEnvironmentsDataSource() *schema.Resource {
	return &schema.Resource{
func readCloudBridgeEnvironments(d *schema.ResourceData, m interface{}) error {
	sync := &CloudBridgeEnvironmentsDataSourceCrud{}
func (s *CloudBridgeEnvironmentsDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *CloudBridgeEnvironmentsDataSourceCrud) Get() error {
	request := oci_cloud_bridge.ListEnvironmentsRequest{}
func (s *CloudBridgeEnvironmentsDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/cloud_bridge/cloud_bridge_agent_data_source.go ===
func CloudBridgeAgentDataSource() *schema.Resource {
	fieldMap := make(map[string]*schema.Schema)
func readSingularCloudBridgeAgent(d *schema.ResourceData, m interface{}) error {
	sync := &CloudBridgeAgentDataSourceCrud{}
func (s *CloudBridgeAgentDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *CloudBridgeAgentDataSourceCrud) Get() error {
	request := oci_cloud_bridge.GetAgentRequest{}
func (s *CloudBridgeAgentDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/cloud_bridge/cloud_bridge_inventory_resource.go ===
func CloudBridgeInventoryResource() *schema.Resource {
	return &schema.Resource{
func createCloudBridgeInventory(d *schema.ResourceData, m interface{}) error {
	sync := &CloudBridgeInventoryResourceCrud{}
func readCloudBridgeInventory(d *schema.ResourceData, m interface{}) error {
	sync := &CloudBridgeInventoryResourceCrud{}
func updateCloudBridgeInventory(d *schema.ResourceData, m interface{}) error {
	sync := &CloudBridgeInventoryResourceCrud{}
func deleteCloudBridgeInventory(d *schema.ResourceData, m interface{}) error {
	sync := &CloudBridgeInventoryResourceCrud{}
func (s *CloudBridgeInventoryResourceCrud) ID() string {
	return *s.Res.Id
func (s *CloudBridgeInventoryResourceCrud) CreatedPending() []string {
	return []string{
func (s *CloudBridgeInventoryResourceCrud) CreatedTarget() []string {
	return []string{
func (s *CloudBridgeInventoryResourceCrud) DeletedPending() []string {
	return []string{
func (s *CloudBridgeInventoryResourceCrud) DeletedTarget() []string {
	return []string{
func (s *CloudBridgeInventoryResourceCrud) Create() error {
	request := oci_cloud_bridge.CreateInventoryRequest{}
func (s *CloudBridgeInventoryResourceCrud) getInventoryFromWorkRequest(workId *string, retryPolicy *oci_common.RetryPolicy,
	actionTypeEnum oci_cloud_bridge.ActionTypeEnum, timeout time.Duration) error {
func (s *CloudBridgeInventoryResourceCrud) Get() error {
	request := oci_cloud_bridge.GetInventoryRequest{}
func (s *CloudBridgeInventoryResourceCrud) Update() error {
	request := oci_cloud_bridge.UpdateInventoryRequest{}
func (s *CloudBridgeInventoryResourceCrud) Delete() error {
	request := oci_cloud_bridge.DeleteInventoryRequest{}
func (s *CloudBridgeInventoryResourceCrud) SetData() error {
	if s.Res.CompartmentId != nil {

=== ./internal/service/cloud_bridge/cloud_bridge_appliance_images_data_source.go ===
func CloudBridgeApplianceImagesDataSource() *schema.Resource {
	return &schema.Resource{
func readCloudBridgeApplianceImages(d *schema.ResourceData, m interface{}) error {
	sync := &CloudBridgeApplianceImagesDataSourceCrud{}
func (s *CloudBridgeApplianceImagesDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *CloudBridgeApplianceImagesDataSourceCrud) Get() error {
	request := oci_cloud_bridge.ListApplianceImagesRequest{}
func (s *CloudBridgeApplianceImagesDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/cloud_bridge/cloud_bridge_discovery_schedule_resource.go ===
func CloudBridgeDiscoveryScheduleResource() *schema.Resource {
	return &schema.Resource{
func createCloudBridgeDiscoverySchedule(d *schema.ResourceData, m interface{}) error {
	sync := &CloudBridgeDiscoveryScheduleResourceCrud{}
func readCloudBridgeDiscoverySchedule(d *schema.ResourceData, m interface{}) error {
	sync := &CloudBridgeDiscoveryScheduleResourceCrud{}
func updateCloudBridgeDiscoverySchedule(d *schema.ResourceData, m interface{}) error {
	sync := &CloudBridgeDiscoveryScheduleResourceCrud{}
func deleteCloudBridgeDiscoverySchedule(d *schema.ResourceData, m interface{}) error {
	sync := &CloudBridgeDiscoveryScheduleResourceCrud{}
func (s *CloudBridgeDiscoveryScheduleResourceCrud) ID() string {
	return *s.Res.Id
func (s *CloudBridgeDiscoveryScheduleResourceCrud) CreatedPending() []string {
	return []string{}
func (s *CloudBridgeDiscoveryScheduleResourceCrud) CreatedTarget() []string {
	return []string{
func (s *CloudBridgeDiscoveryScheduleResourceCrud) DeletedPending() []string {
	return []string{}
func (s *CloudBridgeDiscoveryScheduleResourceCrud) DeletedTarget() []string {
	return []string{
func (s *CloudBridgeDiscoveryScheduleResourceCrud) Create() error {
	request := oci_cloud_bridge.CreateDiscoveryScheduleRequest{}
func (s *CloudBridgeDiscoveryScheduleResourceCrud) Get() error {
	request := oci_cloud_bridge.GetDiscoveryScheduleRequest{}
func (s *CloudBridgeDiscoveryScheduleResourceCrud) Update() error {
	if compartment, ok := s.D.GetOkExists("compartment_id"); ok && s.D.HasChange("compartment_id") {
func (s *CloudBridgeDiscoveryScheduleResourceCrud) Delete() error {
	request := oci_cloud_bridge.DeleteDiscoveryScheduleRequest{}
func (s *CloudBridgeDiscoveryScheduleResourceCrud) SetData() error {
	if s.Res.CompartmentId != nil {
func (s *CloudBridgeDiscoveryScheduleResourceCrud) updateCompartment(compartment interface{}) error {
	changeCompartmentRequest := oci_cloud_bridge.ChangeDiscoveryScheduleCompartmentRequest{}

=== ./internal/service/cloud_bridge/cloud_bridge_agent_plugin_resource.go ===
func CloudBridgeAgentPluginResource() *schema.Resource {
	return &schema.Resource{
func createCloudBridgeAgentPlugin(d *schema.ResourceData, m interface{}) error {
	sync := &CloudBridgeAgentPluginResourceCrud{}
func readCloudBridgeAgentPlugin(d *schema.ResourceData, m interface{}) error {
	sync := &CloudBridgeAgentPluginResourceCrud{}
func updateCloudBridgeAgentPlugin(d *schema.ResourceData, m interface{}) error {
	sync := &CloudBridgeAgentPluginResourceCrud{}
func deleteCloudBridgeAgentPlugin(d *schema.ResourceData, m interface{}) error {
	return nil
func (s *CloudBridgeAgentPluginResourceCrud) ID() string {
	return GetAgentPluginCompositeId(s.D.Get("agent_id").(string), s.D.Get("plugin_name").(string))
func (s *CloudBridgeAgentPluginResourceCrud) CreatedPending() []string {
	return []string{}
func (s *CloudBridgeAgentPluginResourceCrud) CreatedTarget() []string {
	return []string{
func (s *CloudBridgeAgentPluginResourceCrud) DeletedPending() []string {
	return []string{}
func (s *CloudBridgeAgentPluginResourceCrud) DeletedTarget() []string {
	return []string{
func (s *CloudBridgeAgentPluginResourceCrud) Create() error {
	request := oci_cloud_bridge.UpdatePluginRequest{}
func (s *CloudBridgeAgentPluginResourceCrud) Get() error {
	request := oci_cloud_bridge.GetPluginRequest{}
func (s *CloudBridgeAgentPluginResourceCrud) Update() error {
	request := oci_cloud_bridge.UpdatePluginRequest{}
func (s *CloudBridgeAgentPluginResourceCrud) SetData() error {


=== ./internal/service/cloud_bridge/cloud_bridge_asset_resource.go ===
func CloudBridgeAssetResource() *schema.Resource {
	return &schema.Resource{
func createCloudBridgeAsset(d *schema.ResourceData, m interface{}) error {
	sync := &CloudBridgeAssetResourceCrud{}
func readCloudBridgeAsset(d *schema.ResourceData, m interface{}) error {
	sync := &CloudBridgeAssetResourceCrud{}
func updateCloudBridgeAsset(d *schema.ResourceData, m interface{}) error {
	sync := &CloudBridgeAssetResourceCrud{}
func deleteCloudBridgeAsset(d *schema.ResourceData, m interface{}) error {
	sync := &CloudBridgeAssetResourceCrud{}
func (s *CloudBridgeAssetResourceCrud) ID() string {
	asset := *s.Res
func (s *CloudBridgeAssetResourceCrud) CreatedPending() []string {
	return []string{}
func (s *CloudBridgeAssetResourceCrud) CreatedTarget() []string {
	return []string{
func (s *CloudBridgeAssetResourceCrud) DeletedPending() []string {
	return []string{}
func (s *CloudBridgeAssetResourceCrud) DeletedTarget() []string {
	return []string{
func (s *CloudBridgeAssetResourceCrud) Create() error {
	request := oci_cloud_bridge.CreateAssetRequest{}
func (s *CloudBridgeAssetResourceCrud) Get() error {
	request := oci_cloud_bridge.GetAssetRequest{}
func (s *CloudBridgeAssetResourceCrud) Update() error {
	if compartment, ok := s.D.GetOkExists("compartment_id"); ok && s.D.HasChange("compartment_id") {
func (s *CloudBridgeAssetResourceCrud) Delete() error {
	request := oci_cloud_bridge.DeleteAssetRequest{}
func (s *CloudBridgeAssetResourceCrud) SetData() error {

func (s *CloudBridgeAssetResourceCrud) mapToComputeProperties(fieldKeyFormat string) (oci_cloud_bridge.ComputeProperties, error) {
	result := oci_cloud_bridge.ComputeProperties{}
func (s *CloudBridgeAssetResourceCrud) mapToCustomerTag(fieldKeyFormat string) (oci_cloud_bridge.CustomerTag, error) {
	result := oci_cloud_bridge.CustomerTag{}
func (s *CloudBridgeAssetResourceCrud) mapToDisk(fieldKeyFormat string) (oci_cloud_bridge.Disk, error) {
	result := oci_cloud_bridge.Disk{}
func (s *CloudBridgeAssetResourceCrud) mapToGpuDevice(fieldKeyFormat string) (oci_cloud_bridge.GpuDevice, error) {
	result := oci_cloud_bridge.GpuDevice{}
func (s *CloudBridgeAssetResourceCrud) mapToNic(fieldKeyFormat string) (oci_cloud_bridge.Nic, error) {
	result := oci_cloud_bridge.Nic{}
func (s *CloudBridgeAssetResourceCrud) mapToNvdimm(fieldKeyFormat string) (oci_cloud_bridge.Nvdimm, error) {
	result := oci_cloud_bridge.Nvdimm{}
func (s *CloudBridgeAssetResourceCrud) mapToNvdimmController(fieldKeyFormat string) (oci_cloud_bridge.NvdimmController, error) {
	result := oci_cloud_bridge.NvdimmController{}
func (s *CloudBridgeAssetResourceCrud) mapToScsiController(fieldKeyFormat string) (oci_cloud_bridge.ScsiController, error) {
	result := oci_cloud_bridge.ScsiController{}
func (s *CloudBridgeAssetResourceCrud) mapToVmProperties(fieldKeyFormat string) (oci_cloud_bridge.VmProperties, error) {
	result := oci_cloud_bridge.VmProperties{}
func (s *CloudBridgeAssetResourceCrud) mapToVmwareVCenterProperties(fieldKeyFormat string) (oci_cloud_bridge.VmwareVCenterProperties, error) {
	result := oci_cloud_bridge.VmwareVCenterProperties{}
func (s *CloudBridgeAssetResourceCrud) mapToVmwareVmProperties(fieldKeyFormat string) (oci_cloud_bridge.VmwareVmProperties, error) {
	result := oci_cloud_bridge.VmwareVmProperties{}
func (s *CloudBridgeAssetResourceCrud) populateTopLevelPolymorphicCreateAssetRequest(request *oci_cloud_bridge.CreateAssetRequest) error {
	//discriminator
func (s *CloudBridgeAssetResourceCrud) populateTopLevelPolymorphicUpdateAssetRequest(request *oci_cloud_bridge.UpdateAssetRequest) error {
	//discriminator
func (s *CloudBridgeAssetResourceCrud) updateCompartment(compartment interface{}) error {
	changeCompartmentRequest := oci_cloud_bridge.ChangeAssetCompartmentRequest{}

=== ./internal/service/cloud_bridge/cloud_bridge_agent_dependency_data_source.go ===
func CloudBridgeAgentDependencyDataSource() *schema.Resource {
	fieldMap := make(map[string]*schema.Schema)
func readSingularCloudBridgeAgentDependency(d *schema.ResourceData, m interface{}) error {
	sync := &CloudBridgeAgentDependencyDataSourceCrud{}
func (s *CloudBridgeAgentDependencyDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *CloudBridgeAgentDependencyDataSourceCrud) Get() error {
	request := oci_cloud_bridge.GetAgentDependencyRequest{}
func (s *CloudBridgeAgentDependencyDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/cloud_bridge/cloud_bridge_export.go ===
func getCloudBridgeAgentPluginId(resource *tf_export.OCIResource) (string, error) {


=== ./internal/service/cloud_bridge/cloud_bridge_environment_data_source.go ===
func CloudBridgeEnvironmentDataSource() *schema.Resource {
	fieldMap := make(map[string]*schema.Schema)
func readSingularCloudBridgeEnvironment(d *schema.ResourceData, m interface{}) error {
	sync := &CloudBridgeEnvironmentDataSourceCrud{}
func (s *CloudBridgeEnvironmentDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *CloudBridgeEnvironmentDataSourceCrud) Get() error {
	request := oci_cloud_bridge.GetEnvironmentRequest{}
func (s *CloudBridgeEnvironmentDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/cloud_bridge/cloud_bridge_agent_dependency_resource.go ===
func CloudBridgeAgentDependencyResource() *schema.Resource {
	return &schema.Resource{
func createCloudBridgeAgentDependency(d *schema.ResourceData, m interface{}) error {
	sync := &CloudBridgeAgentDependencyResourceCrud{}
func readCloudBridgeAgentDependency(d *schema.ResourceData, m interface{}) error {
	sync := &CloudBridgeAgentDependencyResourceCrud{}
func updateCloudBridgeAgentDependency(d *schema.ResourceData, m interface{}) error {
	sync := &CloudBridgeAgentDependencyResourceCrud{}
func deleteCloudBridgeAgentDependency(d *schema.ResourceData, m interface{}) error {
	sync := &CloudBridgeAgentDependencyResourceCrud{}
func (s *CloudBridgeAgentDependencyResourceCrud) ID() string {
	return *s.Res.Id
func (s *CloudBridgeAgentDependencyResourceCrud) CreatedPending() []string {
	return []string{
func (s *CloudBridgeAgentDependencyResourceCrud) CreatedTarget() []string {
	return []string{
func (s *CloudBridgeAgentDependencyResourceCrud) DeletedPending() []string {
	return []string{
func (s *CloudBridgeAgentDependencyResourceCrud) DeletedTarget() []string {
	return []string{
func (s *CloudBridgeAgentDependencyResourceCrud) Create() error {
	request := oci_cloud_bridge.CreateAgentDependencyRequest{}
func (s *CloudBridgeAgentDependencyResourceCrud) getAgentDependencyFromWorkRequest(workId *string, retryPolicy *oci_common.RetryPolicy,
	actionTypeEnum oci_cloud_bridge.ActionTypeEnum, timeout time.Duration) error {
func (s *CloudBridgeAgentDependencyResourceCrud) Get() error {
	request := oci_cloud_bridge.GetAgentDependencyRequest{}
func (s *CloudBridgeAgentDependencyResourceCrud) Update() error {
	if compartment, ok := s.D.GetOkExists("compartment_id"); ok && s.D.HasChange("compartment_id") {
func (s *CloudBridgeAgentDependencyResourceCrud) Delete() error {
	request := oci_cloud_bridge.DeleteAgentDependencyRequest{}
func (s *CloudBridgeAgentDependencyResourceCrud) SetData() error {
	if s.Res.Bucket != nil {
func (s *CloudBridgeAgentDependencyResourceCrud) updateCompartment(compartment interface{}) error {
	changeCompartmentRequest := oci_cloud_bridge.ChangeAgentDependencyCompartmentRequest{}

=== ./internal/service/cloud_bridge/cloud_bridge_assets_data_source.go ===
func CloudBridgeAssetsDataSource() *schema.Resource {
	return &schema.Resource{
func readCloudBridgeAssets(d *schema.ResourceData, m interface{}) error {
	sync := &CloudBridgeAssetsDataSourceCrud{}
func (s *CloudBridgeAssetsDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *CloudBridgeAssetsDataSourceCrud) Get() error {
	request := oci_cloud_bridge.ListAssetsRequest{}
func (s *CloudBridgeAssetsDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/cloud_bridge/cloud_bridge_agent_dependencies_data_source.go ===
func CloudBridgeAgentDependenciesDataSource() *schema.Resource {
	return &schema.Resource{
func readCloudBridgeAgentDependencies(d *schema.ResourceData, m interface{}) error {
	sync := &CloudBridgeAgentDependenciesDataSourceCrud{}
func (s *CloudBridgeAgentDependenciesDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *CloudBridgeAgentDependenciesDataSourceCrud) Get() error {
	request := oci_cloud_bridge.ListAgentDependenciesRequest{}
func (s *CloudBridgeAgentDependenciesDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/cloud_bridge/cloud_bridge_asset_sources_data_source.go ===
func CloudBridgeAssetSourcesDataSource() *schema.Resource {
	return &schema.Resource{
func readCloudBridgeAssetSources(d *schema.ResourceData, m interface{}) error {
	sync := &CloudBridgeAssetSourcesDataSourceCrud{}
func (s *CloudBridgeAssetSourcesDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *CloudBridgeAssetSourcesDataSourceCrud) Get() error {
	request := oci_cloud_bridge.ListAssetSourcesRequest{}
func (s *CloudBridgeAssetSourcesDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/cloud_bridge/cloud_bridge_appliance_image_data_source.go ===
func CloudBridgeApplianceImageDataSource() *schema.Resource {
	return &schema.Resource{
func readSingularCloudBridgeApplianceImage(d *schema.ResourceData, m interface{}) error {
	sync := &CloudBridgeApplianceImageDataSourceCrud{}
func (s *CloudBridgeApplianceImageDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *CloudBridgeApplianceImageDataSourceCrud) Get() error {
	request := oci_cloud_bridge.ListApplianceImagesRequest{}
func (s *CloudBridgeApplianceImageDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/cloud_bridge/cloud_bridge_discovery_schedule_data_source.go ===
func CloudBridgeDiscoveryScheduleDataSource() *schema.Resource {
	fieldMap := make(map[string]*schema.Schema)
func readSingularCloudBridgeDiscoverySchedule(d *schema.ResourceData, m interface{}) error {
	sync := &CloudBridgeDiscoveryScheduleDataSourceCrud{}
func (s *CloudBridgeDiscoveryScheduleDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *CloudBridgeDiscoveryScheduleDataSourceCrud) Get() error {
	request := oci_cloud_bridge.GetDiscoveryScheduleRequest{}
func (s *CloudBridgeDiscoveryScheduleDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/cloud_bridge/cloud_bridge_agent_resource.go ===
func CloudBridgeAgentResource() *schema.Resource {
	return &schema.Resource{
func createCloudBridgeAgent(d *schema.ResourceData, m interface{}) error {
	sync := &CloudBridgeAgentResourceCrud{}
func readCloudBridgeAgent(d *schema.ResourceData, m interface{}) error {
	sync := &CloudBridgeAgentResourceCrud{}
func updateCloudBridgeAgent(d *schema.ResourceData, m interface{}) error {
	sync := &CloudBridgeAgentResourceCrud{}
func deleteCloudBridgeAgent(d *schema.ResourceData, m interface{}) error {
	sync := &CloudBridgeAgentResourceCrud{}
func (s *CloudBridgeAgentResourceCrud) ID() string {
	return *s.Res.Id
func (s *CloudBridgeAgentResourceCrud) CreatedPending() []string {
	return []string{
func (s *CloudBridgeAgentResourceCrud) CreatedTarget() []string {
	return []string{
func (s *CloudBridgeAgentResourceCrud) DeletedPending() []string {
	return []string{}
func (s *CloudBridgeAgentResourceCrud) DeletedTarget() []string {
	return []string{
func (s *CloudBridgeAgentResourceCrud) Create() error {
	request := oci_cloud_bridge.CreateAgentRequest{}
func (s *CloudBridgeAgentResourceCrud) getAgentFromWorkRequest(workId *string, retryPolicy *oci_common.RetryPolicy,
	actionTypeEnum oci_cloud_bridge.ActionTypeEnum, timeout time.Duration) error {
func (s *CloudBridgeAgentResourceCrud) Get() error {
	request := oci_cloud_bridge.GetAgentRequest{}
func (s *CloudBridgeAgentResourceCrud) Update() error {
	if compartment, ok := s.D.GetOkExists("compartment_id"); ok && s.D.HasChange("compartment_id") {
func (s *CloudBridgeAgentResourceCrud) Delete() error {
	request := oci_cloud_bridge.DeleteAgentRequest{}
func (s *CloudBridgeAgentResourceCrud) SetData() error {
	if s.Res.AgentPubKey != nil {
func (s *CloudBridgeAgentResourceCrud) updateCompartment(compartment interface{}) error {
	changeCompartmentRequest := oci_cloud_bridge.ChangeAgentCompartmentRequest{}

=== ./internal/service/cloud_bridge/cloud_bridge_discovery_schedules_data_source.go ===
func CloudBridgeDiscoverySchedulesDataSource() *schema.Resource {
	return &schema.Resource{
func readCloudBridgeDiscoverySchedules(d *schema.ResourceData, m interface{}) error {
	sync := &CloudBridgeDiscoverySchedulesDataSourceCrud{}
func (s *CloudBridgeDiscoverySchedulesDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *CloudBridgeDiscoverySchedulesDataSourceCrud) Get() error {
	request := oci_cloud_bridge.ListDiscoverySchedulesRequest{}
func (s *CloudBridgeDiscoverySchedulesDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/cloud_bridge/cloud_bridge_agent_plugin_data_source.go ===
func CloudBridgeAgentPluginDataSource() *schema.Resource {
	fieldMap := make(map[string]*schema.Schema)
func readSingularCloudBridgeAgentPlugin(d *schema.ResourceData, m interface{}) error {
	sync := &CloudBridgeAgentPluginDataSourceCrud{}
func (s *CloudBridgeAgentPluginDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *CloudBridgeAgentPluginDataSourceCrud) Get() error {
	request := oci_cloud_bridge.GetPluginRequest{}
func (s *CloudBridgeAgentPluginDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/cloud_bridge/cloud_bridge_inventories_data_source.go ===
func CloudBridgeInventoriesDataSource() *schema.Resource {
	return &schema.Resource{
func readCloudBridgeInventories(d *schema.ResourceData, m interface{}) error {
	sync := &CloudBridgeInventoriesDataSourceCrud{}
func (s *CloudBridgeInventoriesDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *CloudBridgeInventoriesDataSourceCrud) Get() error {
	request := oci_cloud_bridge.ListInventoriesRequest{}
func (s *CloudBridgeInventoriesDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/cloud_bridge/cloud_bridge_asset_data_source.go ===
func CloudBridgeAssetDataSource() *schema.Resource {
	fieldMap := make(map[string]*schema.Schema)
func readSingularCloudBridgeAsset(d *schema.ResourceData, m interface{}) error {
	sync := &CloudBridgeAssetDataSourceCrud{}
func (s *CloudBridgeAssetDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *CloudBridgeAssetDataSourceCrud) Get() error {
	request := oci_cloud_bridge.GetAssetRequest{}
func (s *CloudBridgeAssetDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/cloud_bridge/register_resource.go ===
func RegisterResource() {
	tfresource.RegisterResource("oci_cloud_bridge_agent", CloudBridgeAgentResource())

=== ./internal/service/cloud_bridge/cloud_bridge_asset_source_resource.go ===
func CloudBridgeAssetSourceResource() *schema.Resource {
	return &schema.Resource{
func createCloudBridgeAssetSource(d *schema.ResourceData, m interface{}) error {
	sync := &CloudBridgeAssetSourceResourceCrud{}
func readCloudBridgeAssetSource(d *schema.ResourceData, m interface{}) error {
	sync := &CloudBridgeAssetSourceResourceCrud{}
func updateCloudBridgeAssetSource(d *schema.ResourceData, m interface{}) error {
	sync := &CloudBridgeAssetSourceResourceCrud{}
func deleteCloudBridgeAssetSource(d *schema.ResourceData, m interface{}) error {
	sync := &CloudBridgeAssetSourceResourceCrud{}
func (s *CloudBridgeAssetSourceResourceCrud) ID() string {
	assetSource := *s.Res
func (s *CloudBridgeAssetSourceResourceCrud) CreatedPending() []string {
	return []string{
func (s *CloudBridgeAssetSourceResourceCrud) CreatedTarget() []string {
	return []string{
func (s *CloudBridgeAssetSourceResourceCrud) DeletedPending() []string {
	return []string{
func (s *CloudBridgeAssetSourceResourceCrud) DeletedTarget() []string {
	return []string{
func (s *CloudBridgeAssetSourceResourceCrud) Create() error {
	request := oci_cloud_bridge.CreateAssetSourceRequest{}
func (s *CloudBridgeAssetSourceResourceCrud) getAssetSourceFromWorkRequest(workId *string, retryPolicy *oci_common.RetryPolicy,
	actionTypeEnum oci_cloud_bridge.ActionTypeEnum, timeout time.Duration) error {
func (s *CloudBridgeAssetSourceResourceCrud) Get() error {
	request := oci_cloud_bridge.GetAssetSourceRequest{}
func (s *CloudBridgeAssetSourceResourceCrud) Update() error {
	if compartment, ok := s.D.GetOkExists("compartment_id"); ok && s.D.HasChange("compartment_id") {
func (s *CloudBridgeAssetSourceResourceCrud) Delete() error {
	request := oci_cloud_bridge.DeleteAssetSourceRequest{}
func (s *CloudBridgeAssetSourceResourceCrud) SetData() error {

func (s *CloudBridgeAssetSourceResourceCrud) mapToAssetSourceCredentials(fieldKeyFormat string) (oci_cloud_bridge.AssetSourceCredentials, error) {
	result := oci_cloud_bridge.AssetSourceCredentials{}
func (s *CloudBridgeAssetSourceResourceCrud) populateTopLevelPolymorphicCreateAssetSourceRequest(request *oci_cloud_bridge.CreateAssetSourceRequest) error {
	//discriminator
func (s *CloudBridgeAssetSourceResourceCrud) populateTopLevelPolymorphicUpdateAssetSourceRequest(request *oci_cloud_bridge.UpdateAssetSourceRequest) error {
	//discriminator
func (s *CloudBridgeAssetSourceResourceCrud) updateCompartment(compartment interface{}) error {
	changeCompartmentRequest := oci_cloud_bridge.ChangeAssetSourceCompartmentRequest{}

=== ./internal/service/recovery/recovery_protection_policy_data_source.go ===
func RecoveryProtectionPolicyDataSource() *schema.Resource {
	fieldMap := make(map[string]*schema.Schema)
func readSingularRecoveryProtectionPolicy(d *schema.ResourceData, m interface{}) error {
	sync := &RecoveryProtectionPolicyDataSourceCrud{}
func (s *RecoveryProtectionPolicyDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *RecoveryProtectionPolicyDataSourceCrud) Get() error {
	request := oci_recovery.GetProtectionPolicyRequest{}
func (s *RecoveryProtectionPolicyDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/recovery/recovery_protection_policy_resource.go ===
func RecoveryProtectionPolicyResource() *schema.Resource {
	return &schema.Resource{
func createRecoveryProtectionPolicy(d *schema.ResourceData, m interface{}) error {
	sync := &RecoveryProtectionPolicyResourceCrud{}
func readRecoveryProtectionPolicy(d *schema.ResourceData, m interface{}) error {
	sync := &RecoveryProtectionPolicyResourceCrud{}
func updateRecoveryProtectionPolicy(d *schema.ResourceData, m interface{}) error {
	sync := &RecoveryProtectionPolicyResourceCrud{}
func deleteRecoveryProtectionPolicy(d *schema.ResourceData, m interface{}) error {
	sync := &RecoveryProtectionPolicyResourceCrud{}
func (s *RecoveryProtectionPolicyResourceCrud) ID() string {
	return *s.Res.Id
func (s *RecoveryProtectionPolicyResourceCrud) CreatedPending() []string {
	return []string{
func (s *RecoveryProtectionPolicyResourceCrud) CreatedTarget() []string {
	return []string{
func (s *RecoveryProtectionPolicyResourceCrud) DeletedPending() []string {
	return []string{
func (s *RecoveryProtectionPolicyResourceCrud) DeletedTarget() []string {
	return []string{
func (s *RecoveryProtectionPolicyResourceCrud) Create() error {
	request := oci_recovery.CreateProtectionPolicyRequest{}
func (s *RecoveryProtectionPolicyResourceCrud) getProtectionPolicyFromWorkRequest(workId *string, retryPolicy *oci_common.RetryPolicy,
	actionTypeEnum oci_recovery.ActionTypeEnum, timeout time.Duration) error {
func (s *RecoveryProtectionPolicyResourceCrud) Get() error {
	request := oci_recovery.GetProtectionPolicyRequest{}
func (s *RecoveryProtectionPolicyResourceCrud) Update() error {
	if compartment, ok := s.D.GetOkExists("compartment_id"); ok && s.D.HasChange("compartment_id") {
func (s *RecoveryProtectionPolicyResourceCrud) Delete() error {
	request := oci_recovery.DeleteProtectionPolicyRequest{}
func (s *RecoveryProtectionPolicyResourceCrud) SetData() error {
	if s.Res.BackupRetentionPeriodInDays != nil {
func (s *RecoveryProtectionPolicyResourceCrud) updateCompartment(compartment interface{}) error {
	changeCompartmentRequest := oci_recovery.ChangeProtectionPolicyCompartmentRequest{}

=== ./internal/service/recovery/recovery_recovery_service_subnet_data_source.go ===
func RecoveryRecoveryServiceSubnetDataSource() *schema.Resource {
	fieldMap := make(map[string]*schema.Schema)
func readSingularRecoveryRecoveryServiceSubnet(d *schema.ResourceData, m interface{}) error {
	sync := &RecoveryRecoveryServiceSubnetDataSourceCrud{}
func (s *RecoveryRecoveryServiceSubnetDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *RecoveryRecoveryServiceSubnetDataSourceCrud) Get() error {
	request := oci_recovery.GetRecoveryServiceSubnetRequest{}
func (s *RecoveryRecoveryServiceSubnetDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/recovery/recovery_recovery_service_subnet_resource.go ===
func RecoveryRecoveryServiceSubnetResource() *schema.Resource {
	return &schema.Resource{
func createRecoveryRecoveryServiceSubnet(d *schema.ResourceData, m interface{}) error {
	sync := &RecoveryRecoveryServiceSubnetResourceCrud{}
func readRecoveryRecoveryServiceSubnet(d *schema.ResourceData, m interface{}) error {
	sync := &RecoveryRecoveryServiceSubnetResourceCrud{}
func updateRecoveryRecoveryServiceSubnet(d *schema.ResourceData, m interface{}) error {
	sync := &RecoveryRecoveryServiceSubnetResourceCrud{}
func deleteRecoveryRecoveryServiceSubnet(d *schema.ResourceData, m interface{}) error {
	sync := &RecoveryRecoveryServiceSubnetResourceCrud{}
func (s *RecoveryRecoveryServiceSubnetResourceCrud) ID() string {
	return *s.Res.Id
func (s *RecoveryRecoveryServiceSubnetResourceCrud) CreatedPending() []string {
	return []string{
func (s *RecoveryRecoveryServiceSubnetResourceCrud) CreatedTarget() []string {
	return []string{
func (s *RecoveryRecoveryServiceSubnetResourceCrud) DeletedPending() []string {
	return []string{
func (s *RecoveryRecoveryServiceSubnetResourceCrud) DeletedTarget() []string {
	return []string{
func (s *RecoveryRecoveryServiceSubnetResourceCrud) Create() error {
	request := oci_recovery.CreateRecoveryServiceSubnetRequest{}
func (s *RecoveryRecoveryServiceSubnetResourceCrud) getRecoveryServiceSubnetFromWorkRequest(workId *string, retryPolicy *oci_common.RetryPolicy,
	actionTypeEnum oci_recovery.ActionTypeEnum, timeout time.Duration) error {
func (s *RecoveryRecoveryServiceSubnetResourceCrud) Get() error {
	request := oci_recovery.GetRecoveryServiceSubnetRequest{}
func (s *RecoveryRecoveryServiceSubnetResourceCrud) Update() error {
	if compartment, ok := s.D.GetOkExists("compartment_id"); ok && s.D.HasChange("compartment_id") {
func (s *RecoveryRecoveryServiceSubnetResourceCrud) Delete() error {
	request := oci_recovery.DeleteRecoveryServiceSubnetRequest{}
func (s *RecoveryRecoveryServiceSubnetResourceCrud) SetData() error {
	if s.Res.CompartmentId != nil {
func (s *RecoveryRecoveryServiceSubnetResourceCrud) updateCompartment(compartment interface{}) error {
	changeCompartmentRequest := oci_recovery.ChangeRecoveryServiceSubnetCompartmentRequest{}

=== ./internal/service/recovery/recovery_protected_databases_data_source.go ===
func RecoveryProtectedDatabasesDataSource() *schema.Resource {
	return &schema.Resource{
func readRecoveryProtectedDatabases(d *schema.ResourceData, m interface{}) error {
	sync := &RecoveryProtectedDatabasesDataSourceCrud{}
func (s *RecoveryProtectedDatabasesDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *RecoveryProtectedDatabasesDataSourceCrud) Get() error {
	request := oci_recovery.ListProtectedDatabasesRequest{}
func (s *RecoveryProtectedDatabasesDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/recovery/recovery_protected_database_fetch_configuration_data_source.go ===
func RecoveryProtectedDatabaseFetchConfigurationDataSource() *schema.Resource {
	return &schema.Resource{
func readSingularRecoveryProtectedDatabaseFetchConfiguration(d *schema.ResourceData, m interface{}) error {
	sync := &RecoveryProtectedDatabaseFetchConfigurationDataSourceCrud{}
func (s *RecoveryProtectedDatabaseFetchConfigurationDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *RecoveryProtectedDatabaseFetchConfigurationDataSourceCrud) Get() error {
	request := oci_recovery.FetchProtectedDatabaseConfigurationRequest{}
func (s *RecoveryProtectedDatabaseFetchConfigurationDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/recovery/recovery_protected_database_data_source.go ===
func RecoveryProtectedDatabaseDataSource() *schema.Resource {
	fieldMap := make(map[string]*schema.Schema)
func readSingularRecoveryProtectedDatabase(d *schema.ResourceData, m interface{}) error {
	sync := &RecoveryProtectedDatabaseDataSourceCrud{}
func (s *RecoveryProtectedDatabaseDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *RecoveryProtectedDatabaseDataSourceCrud) Get() error {
	request := oci_recovery.GetProtectedDatabaseRequest{}
func (s *RecoveryProtectedDatabaseDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/recovery/recovery_recovery_service_subnets_data_source.go ===
func RecoveryRecoveryServiceSubnetsDataSource() *schema.Resource {
	return &schema.Resource{
func readRecoveryRecoveryServiceSubnets(d *schema.ResourceData, m interface{}) error {
	sync := &RecoveryRecoveryServiceSubnetsDataSourceCrud{}
func (s *RecoveryRecoveryServiceSubnetsDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *RecoveryRecoveryServiceSubnetsDataSourceCrud) Get() error {
	request := oci_recovery.ListRecoveryServiceSubnetsRequest{}
func (s *RecoveryRecoveryServiceSubnetsDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/recovery/recovery_protection_policies_data_source.go ===
func RecoveryProtectionPoliciesDataSource() *schema.Resource {
	return &schema.Resource{
func readRecoveryProtectionPolicies(d *schema.ResourceData, m interface{}) error {
	sync := &RecoveryProtectionPoliciesDataSourceCrud{}
func (s *RecoveryProtectionPoliciesDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *RecoveryProtectionPoliciesDataSourceCrud) Get() error {
	request := oci_recovery.ListProtectionPoliciesRequest{}
func (s *RecoveryProtectionPoliciesDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/recovery/recovery_protected_database_resource.go ===
func RecoveryProtectedDatabaseResource() *schema.Resource {
	return &schema.Resource{
func createRecoveryProtectedDatabase(d *schema.ResourceData, m interface{}) error {
	sync := &RecoveryProtectedDatabaseResourceCrud{}
func readRecoveryProtectedDatabase(d *schema.ResourceData, m interface{}) error {
	sync := &RecoveryProtectedDatabaseResourceCrud{}
func updateRecoveryProtectedDatabase(d *schema.ResourceData, m interface{}) error {
	sync := &RecoveryProtectedDatabaseResourceCrud{}
func deleteRecoveryProtectedDatabase(d *schema.ResourceData, m interface{}) error {
	sync := &RecoveryProtectedDatabaseResourceCrud{}
func (s *RecoveryProtectedDatabaseResourceCrud) ID() string {
	return *s.Res.Id
func (s *RecoveryProtectedDatabaseResourceCrud) CreatedPending() []string {
	return []string{
func (s *RecoveryProtectedDatabaseResourceCrud) CreatedTarget() []string {
	return []string{
func (s *RecoveryProtectedDatabaseResourceCrud) DeletedPending() []string {
	return []string{
func (s *RecoveryProtectedDatabaseResourceCrud) DeletedTarget() []string {
	return []string{
func (s *RecoveryProtectedDatabaseResourceCrud) Create() error {
	request := oci_recovery.CreateProtectedDatabaseRequest{}
func (s *RecoveryProtectedDatabaseResourceCrud) getProtectedDatabaseFromWorkRequest(workId *string, retryPolicy *oci_common.RetryPolicy,
	actionTypeEnum oci_recovery.ActionTypeEnum, timeout time.Duration) error {
func (s *RecoveryProtectedDatabaseResourceCrud) Get() error {
	request := oci_recovery.GetProtectedDatabaseRequest{}
func (s *RecoveryProtectedDatabaseResourceCrud) Update() error {
	if compartment, ok := s.D.GetOkExists("compartment_id"); ok && s.D.HasChange("compartment_id") {
func (s *RecoveryProtectedDatabaseResourceCrud) Delete() error {
	request := oci_recovery.ScheduleProtectedDatabaseDeletionRequest{}
func (s *RecoveryProtectedDatabaseResourceCrud) SetData() error {
	if s.Res.CompartmentId != nil {
func (s *RecoveryProtectedDatabaseResourceCrud) mapToRecoveryServiceSubnetInput(fieldKeyFormat string) (oci_recovery.RecoveryServiceSubnetInput, error) {
	result := oci_recovery.RecoveryServiceSubnetInput{}
func (s *RecoveryProtectedDatabaseResourceCrud) updateCompartment(compartment interface{}) error {
	changeCompartmentRequest := oci_recovery.ChangeProtectedDatabaseCompartmentRequest{}
func (s *RecoveryProtectedDatabaseResourceCrud) updateSubscription(subscriptionId string) error {
	changeSubscriptionRequest := oci_recovery.ChangeProtectedDatabaseSubscriptionRequest{}

=== ./internal/service/recovery/register_resource.go ===
func RegisterResource() {
	tfresource.RegisterResource("oci_recovery_protected_database", RecoveryProtectedDatabaseResource())

=== ./internal/service/oda/oda_oda_private_endpoint_resource.go ===
func OdaOdaPrivateEndpointResource() *schema.Resource {
	return &schema.Resource{
func createOdaOdaPrivateEndpoint(d *schema.ResourceData, m interface{}) error {
	sync := &OdaOdaPrivateEndpointResourceCrud{}
func readOdaOdaPrivateEndpoint(d *schema.ResourceData, m interface{}) error {
	sync := &OdaOdaPrivateEndpointResourceCrud{}
func updateOdaOdaPrivateEndpoint(d *schema.ResourceData, m interface{}) error {
	sync := &OdaOdaPrivateEndpointResourceCrud{}
func deleteOdaOdaPrivateEndpoint(d *schema.ResourceData, m interface{}) error {
	sync := &OdaOdaPrivateEndpointResourceCrud{}
func (s *OdaOdaPrivateEndpointResourceCrud) ID() string {
	fmt.Printf("[Debug] Oda Private Endpoint Id: %v", *s.Res.Id)
func (s *OdaOdaPrivateEndpointResourceCrud) CreatedPending() []string {
	return []string{
func (s *OdaOdaPrivateEndpointResourceCrud) CreatedTarget() []string {
	return []string{
func (s *OdaOdaPrivateEndpointResourceCrud) DeletedPending() []string {
	return []string{
func (s *OdaOdaPrivateEndpointResourceCrud) DeletedTarget() []string {
	return []string{
func (s *OdaOdaPrivateEndpointResourceCrud) Create() error {
	request := oci_oda.CreateOdaPrivateEndpointRequest{}
func (s *OdaOdaPrivateEndpointResourceCrud) getOdaPrivateEndpointFromWorkRequest(workId *string, retryPolicy *oci_common.RetryPolicy,
	actionTypeEnum oci_oda.WorkRequestResourceResourceActionEnum, timeout time.Duration) error {
func odaPrivateEndpointWaitForWorkRequest(wId *string, entityType string, action oci_oda.WorkRequestResourceResourceActionEnum,
	timeout time.Duration, disableFoundRetries bool, client *oci_oda.OdaClient) (*string, error) {
func getErrorFromOdaOdaPrivateEndpointWorkRequest(client *oci_oda.OdaClient, workId *string, retryPolicy *oci_common.RetryPolicy, entityType string, action oci_oda.WorkRequestResourceResourceActionEnum) error {
	response, err := client.ListWorkRequestErrors(context.Background(),
func (s *OdaOdaPrivateEndpointResourceCrud) Get() error {
	request := oci_oda.GetOdaPrivateEndpointRequest{}
func (s *OdaOdaPrivateEndpointResourceCrud) Update() error {
	if compartment, ok := s.D.GetOkExists("compartment_id"); ok && s.D.HasChange("compartment_id") {
func (s *OdaOdaPrivateEndpointResourceCrud) Delete() error {
	request := oci_oda.DeleteOdaPrivateEndpointRequest{}
func (s *OdaOdaPrivateEndpointResourceCrud) SetData() error {
	if s.Res.CompartmentId != nil {
func (s *OdaOdaPrivateEndpointResourceCrud) updateCompartment(compartment interface{}) error {
	changeCompartmentRequest := oci_oda.ChangeOdaPrivateEndpointCompartmentRequest{}

=== ./internal/service/oda/oda_oda_private_endpoint_scan_proxy_data_source.go ===
func OdaOdaPrivateEndpointScanProxyDataSource() *schema.Resource {
	fieldMap := make(map[string]*schema.Schema)
func readSingularOdaOdaPrivateEndpointScanProxy(d *schema.ResourceData, m interface{}) error {
	sync := &OdaOdaPrivateEndpointScanProxyDataSourceCrud{}
func (s *OdaOdaPrivateEndpointScanProxyDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *OdaOdaPrivateEndpointScanProxyDataSourceCrud) Get() error {
	request := oci_oda.GetOdaPrivateEndpointScanProxyRequest{}
func (s *OdaOdaPrivateEndpointScanProxyDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/oda/oda_oda_instances_data_source.go ===
func OdaOdaInstancesDataSource() *schema.Resource {
	return &schema.Resource{
func readOdaOdaInstances(d *schema.ResourceData, m interface{}) error {
	sync := &OdaOdaInstancesDataSourceCrud{}
func (s *OdaOdaInstancesDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *OdaOdaInstancesDataSourceCrud) Get() error {
	request := oci_oda.ListOdaInstancesRequest{}
func (s *OdaOdaInstancesDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/oda/oda_oda_private_endpoint_scan_proxy_resource.go ===
func OdaOdaPrivateEndpointScanProxyResource() *schema.Resource {
	return &schema.Resource{
func createOdaOdaPrivateEndpointScanProxy(d *schema.ResourceData, m interface{}) error {
	sync := &OdaOdaPrivateEndpointScanProxyResourceCrud{}
func readOdaOdaPrivateEndpointScanProxy(d *schema.ResourceData, m interface{}) error {
	sync := &OdaOdaPrivateEndpointScanProxyResourceCrud{}
func deleteOdaOdaPrivateEndpointScanProxy(d *schema.ResourceData, m interface{}) error {
	sync := &OdaOdaPrivateEndpointScanProxyResourceCrud{}
func (s *OdaOdaPrivateEndpointScanProxyResourceCrud) ID() string {
	return GetOdaPrivateEndpointScanProxyCompositeId(s.D.Get("oda_private_endpoint_id").(string), *s.Res.Id)
func (s *OdaOdaPrivateEndpointScanProxyResourceCrud) CreatedPending() []string {
	return []string{
func (s *OdaOdaPrivateEndpointScanProxyResourceCrud) CreatedTarget() []string {
	return []string{
func (s *OdaOdaPrivateEndpointScanProxyResourceCrud) DeletedPending() []string {
	return []string{
func (s *OdaOdaPrivateEndpointScanProxyResourceCrud) DeletedTarget() []string {
	return []string{
func (s *OdaOdaPrivateEndpointScanProxyResourceCrud) Create() error {
	request := oci_oda.CreateOdaPrivateEndpointScanProxyRequest{}
func (s *OdaOdaPrivateEndpointScanProxyResourceCrud) setIdFromWorkRequest(workId *string) {
	var identifier *string
func (s *OdaOdaPrivateEndpointScanProxyResourceCrud) getOdaPrivateEndpointScanProxyFromWorkRequest(workId *string, retryPolicy *oci_common.RetryPolicy,
	actionTypeEnum oci_oda.WorkRequestResourceResourceActionEnum, timeout time.Duration) error {
func odaPrivateEndpointScanProxyWaitForWorkRequest(wId *string, entityType string, action oci_oda.WorkRequestResourceResourceActionEnum,
	timeout time.Duration, disableFoundRetries bool, client *oci_oda.OdaClient) (*string, error) {
func getErrorFromOdaOdaPrivateEndpointScanProxyWorkRequest(client *oci_oda.OdaClient, workId *string, retryPolicy *oci_common.RetryPolicy, entityType string, action oci_oda.WorkRequestResourceResourceActionEnum) error {
	response, err := client.ListWorkRequestErrors(context.Background(),
func (s *OdaOdaPrivateEndpointScanProxyResourceCrud) Get() error {
	request := oci_oda.GetOdaPrivateEndpointScanProxyRequest{}
func (s *OdaOdaPrivateEndpointScanProxyResourceCrud) Delete() error {
	request := oci_oda.DeleteOdaPrivateEndpointScanProxyRequest{}
func (s *OdaOdaPrivateEndpointScanProxyResourceCrud) SetData() error {

func (s *OdaOdaPrivateEndpointScanProxyResourceCrud) mapToScanListenerInfo(fieldKeyFormat string) (oci_oda.ScanListenerInfo, error) {
	result := oci_oda.ScanListenerInfo{}

=== ./internal/service/oda/oda_oda_private_endpoint_attachment_resource.go ===
func OdaOdaPrivateEndpointAttachmentResource() *schema.Resource {
	return &schema.Resource{
func createOdaOdaPrivateEndpointAttachment(d *schema.ResourceData, m interface{}) error {
	sync := &OdaOdaPrivateEndpointAttachmentResourceCrud{}
func readOdaOdaPrivateEndpointAttachment(d *schema.ResourceData, m interface{}) error {
	sync := &OdaOdaPrivateEndpointAttachmentResourceCrud{}
func deleteOdaOdaPrivateEndpointAttachment(d *schema.ResourceData, m interface{}) error {
	sync := &OdaOdaPrivateEndpointAttachmentResourceCrud{}
func (s *OdaOdaPrivateEndpointAttachmentResourceCrud) ID() string {
	return *s.Res.Id
func (s *OdaOdaPrivateEndpointAttachmentResourceCrud) CreatedPending() []string {
	return []string{
func (s *OdaOdaPrivateEndpointAttachmentResourceCrud) CreatedTarget() []string {
	return []string{
func (s *OdaOdaPrivateEndpointAttachmentResourceCrud) DeletedPending() []string {
	return []string{
func (s *OdaOdaPrivateEndpointAttachmentResourceCrud) DeletedTarget() []string {
	return []string{
func (s *OdaOdaPrivateEndpointAttachmentResourceCrud) Create() error {
	request := oci_oda.CreateOdaPrivateEndpointAttachmentRequest{}
func (s *OdaOdaPrivateEndpointAttachmentResourceCrud) getOdaPrivateEndpointAttachmentFromWorkRequest(workId *string, retryPolicy *oci_common.RetryPolicy,
	actionTypeEnum oci_oda.WorkRequestResourceResourceActionEnum, timeout time.Duration) error {
func odaPrivateEndpointAttachmentWaitForWorkRequest(wId *string, entityType string, action oci_oda.WorkRequestResourceResourceActionEnum,
	timeout time.Duration, disableFoundRetries bool, client *oci_oda.OdaClient) (*string, error) {
func getErrorFromOdaOdaPrivateEndpointAttachmentWorkRequest(client *oci_oda.OdaClient, workId *string, retryPolicy *oci_common.RetryPolicy, entityType string, action oci_oda.WorkRequestResourceResourceActionEnum) error {
	response, err := client.ListWorkRequestErrors(context.Background(),
func (s *OdaOdaPrivateEndpointAttachmentResourceCrud) Get() error {
	request := oci_oda.GetOdaPrivateEndpointAttachmentRequest{}
func (s *OdaOdaPrivateEndpointAttachmentResourceCrud) Delete() error {
	request := oci_oda.DeleteOdaPrivateEndpointAttachmentRequest{}
func (s *OdaOdaPrivateEndpointAttachmentResourceCrud) SetData() error {
	if s.Res.CompartmentId != nil {

=== ./internal/service/oda/oda_oda_private_endpoint_attachment_data_source.go ===
func OdaOdaPrivateEndpointAttachmentDataSource() *schema.Resource {
	fieldMap := make(map[string]*schema.Schema)
func readSingularOdaOdaPrivateEndpointAttachment(d *schema.ResourceData, m interface{}) error {
	sync := &OdaOdaPrivateEndpointAttachmentDataSourceCrud{}
func (s *OdaOdaPrivateEndpointAttachmentDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *OdaOdaPrivateEndpointAttachmentDataSourceCrud) Get() error {
	request := oci_oda.GetOdaPrivateEndpointAttachmentRequest{}
func (s *OdaOdaPrivateEndpointAttachmentDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/oda/oda_oda_instance_data_source.go ===
func OdaOdaInstanceDataSource() *schema.Resource {
	fieldMap := make(map[string]*schema.Schema)
func readSingularOdaOdaInstance(d *schema.ResourceData, m interface{}) error {
	sync := &OdaOdaInstanceDataSourceCrud{}
func (s *OdaOdaInstanceDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *OdaOdaInstanceDataSourceCrud) Get() error {
	request := oci_oda.GetOdaInstanceRequest{}
func (s *OdaOdaInstanceDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/oda/oda_oda_private_endpoint_attachments_data_source.go ===
func OdaOdaPrivateEndpointAttachmentsDataSource() *schema.Resource {
	return &schema.Resource{
func readOdaOdaPrivateEndpointAttachments(d *schema.ResourceData, m interface{}) error {
	sync := &OdaOdaPrivateEndpointAttachmentsDataSourceCrud{}
func (s *OdaOdaPrivateEndpointAttachmentsDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *OdaOdaPrivateEndpointAttachmentsDataSourceCrud) Get() error {
	request := oci_oda.ListOdaPrivateEndpointAttachmentsRequest{}
func (s *OdaOdaPrivateEndpointAttachmentsDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/oda/oda_oda_instance_resource.go ===
func OdaOdaInstanceResource() *schema.Resource {
	return &schema.Resource{
func createOdaOdaInstance(d *schema.ResourceData, m interface{}) error {
	sync := &OdaOdaInstanceResourceCrud{}
func inactiveOdaIfNeeded(d *schema.ResourceData, sync *OdaOdaInstanceResourceCrud) error {
	if err := sync.StopOdaInstance(); err != nil {
func readOdaOdaInstance(d *schema.ResourceData, m interface{}) error {
	sync := &OdaOdaInstanceResourceCrud{}
func updateOdaOdaInstance(d *schema.ResourceData, m interface{}) error {
	sync := &OdaOdaInstanceResourceCrud{}
func deleteOdaOdaInstance(d *schema.ResourceData, m interface{}) error {
	sync := &OdaOdaInstanceResourceCrud{}
func (s *OdaOdaInstanceResourceCrud) ID() string {
	return *s.Res.Id
func (s *OdaOdaInstanceResourceCrud) CreatedPending() []string {
	return []string{
func (s *OdaOdaInstanceResourceCrud) CreatedTarget() []string {
	return []string{
func (s *OdaOdaInstanceResourceCrud) DeletedPending() []string {
	return []string{
func (s *OdaOdaInstanceResourceCrud) DeletedTarget() []string {
	return []string{
func (s *OdaOdaInstanceResourceCrud) UpdatedPending() []string {
	return []string{
func (s *OdaOdaInstanceResourceCrud) UpdatedTarget() []string {
	return []string{
func (s *OdaOdaInstanceResourceCrud) Create() error {
	request := oci_oda.CreateOdaInstanceRequest{}
func (s *OdaOdaInstanceResourceCrud) getOdaInstanceFromWorkRequest(workId *string, retryPolicy *oci_common.RetryPolicy,
	actionTypeEnum oci_oda.WorkRequestResourceResourceActionEnum, timeout time.Duration) error {
func odaInstanceWaitForWorkRequest(wId *string, entityType string, action oci_oda.WorkRequestResourceResourceActionEnum,
	timeout time.Duration, disableFoundRetries bool, client *oci_oda.OdaClient) (*string, error) {
func getErrorFromOdaOdaInstanceWorkRequest(client *oci_oda.OdaClient, workId *string, retryPolicy *oci_common.RetryPolicy, entityType string, action oci_oda.WorkRequestResourceResourceActionEnum) error {
	response, err := client.ListWorkRequestErrors(context.Background(),
func (s *OdaOdaInstanceResourceCrud) Get() error {
	request := oci_oda.GetOdaInstanceRequest{}
func (s *OdaOdaInstanceResourceCrud) Update() error {
	if compartment, ok := s.D.GetOkExists("compartment_id"); ok && s.D.HasChange("compartment_id") {
func (s *OdaOdaInstanceResourceCrud) Delete() error {
	request := oci_oda.DeleteOdaInstanceRequest{}
func (s *OdaOdaInstanceResourceCrud) SetData() error {
	s.D.Set("attachment_ids", s.Res.AttachmentIds)
func (s *OdaOdaInstanceResourceCrud) updateCompartment(compartment interface{}) error {
	changeCompartmentRequest := oci_oda.ChangeOdaInstanceCompartmentRequest{}
func (s *OdaOdaInstanceResourceCrud) StartOdaInstance() error {
	state := oci_oda.OdaInstanceLifecycleStateActive
func (s *OdaOdaInstanceResourceCrud) StopOdaInstance() error {
	state := oci_oda.OdaInstanceLifecycleStateInactive

=== ./internal/service/oda/oda_oda_private_endpoint_scan_proxies_data_source.go ===
func OdaOdaPrivateEndpointScanProxiesDataSource() *schema.Resource {
	return &schema.Resource{
func readOdaOdaPrivateEndpointScanProxies(d *schema.ResourceData, m interface{}) error {
	sync := &OdaOdaPrivateEndpointScanProxiesDataSourceCrud{}
func (s *OdaOdaPrivateEndpointScanProxiesDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *OdaOdaPrivateEndpointScanProxiesDataSourceCrud) Get() error {
	request := oci_oda.ListOdaPrivateEndpointScanProxiesRequest{}
func (s *OdaOdaPrivateEndpointScanProxiesDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/oda/oda_oda_private_endpoint_data_source.go ===
func OdaOdaPrivateEndpointDataSource() *schema.Resource {
	fieldMap := make(map[string]*schema.Schema)
func readSingularOdaOdaPrivateEndpoint(d *schema.ResourceData, m interface{}) error {
	sync := &OdaOdaPrivateEndpointDataSourceCrud{}
func (s *OdaOdaPrivateEndpointDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *OdaOdaPrivateEndpointDataSourceCrud) Get() error {
	request := oci_oda.GetOdaPrivateEndpointRequest{}
func (s *OdaOdaPrivateEndpointDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/oda/oda_export.go ===
func getOdaOdaPrivateEndpointScanProxyId(resource *tf_export.OCIResource) (string, error) {

func processPrivateEndpointScanProxy(ctx *tf_export.ResourceDiscoveryContext, resources []*tf_export.OCIResource) ([]*tf_export.OCIResource, error) {
	for _, resource := range resources {

=== ./internal/service/oda/oda_oda_private_endpoints_data_source.go ===
func OdaOdaPrivateEndpointsDataSource() *schema.Resource {
	return &schema.Resource{
func readOdaOdaPrivateEndpoints(d *schema.ResourceData, m interface{}) error {
	sync := &OdaOdaPrivateEndpointsDataSourceCrud{}
func (s *OdaOdaPrivateEndpointsDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *OdaOdaPrivateEndpointsDataSourceCrud) Get() error {
	request := oci_oda.ListOdaPrivateEndpointsRequest{}
func (s *OdaOdaPrivateEndpointsDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/oda/register_resource.go ===
func RegisterResource() {
	tfresource.RegisterResource("oci_oda_oda_instance", OdaOdaInstanceResource())

=== ./internal/service/identity/identity_import_standard_tags_management_resource.go ===
func IdentityImportStandardTagsManagementResource() *schema.Resource {
	return &schema.Resource{
func createIdentityImportStandardTagsManagement(d *schema.ResourceData, m interface{}) error {
	sync := &IdentityImportStandardTagsManagementResourceCrud{}
func readIdentityImportStandardTagsManagement(d *schema.ResourceData, m interface{}) error {
	return nil
func deleteIdentityImportStandardTagsManagement(d *schema.ResourceData, m interface{}) error {
	return nil
func (s *IdentityImportStandardTagsManagementResourceCrud) ID() string {
	return *s.Res.OpcWorkRequestId
func (s *IdentityImportStandardTagsManagementResourceCrud) Create() error {
	request := oci_identity.ImportStandardTagsRequest{}
func (s *IdentityImportStandardTagsManagementResourceCrud) getImportStandardTagsManagementFromWorkRequest(workId *string, retryPolicy *oci_common.RetryPolicy,
	actionTypeEnum oci_identity.WorkRequestResourceActionTypeEnum, timeout time.Duration) error {
func importStandardTagsManagementWaitForWorkRequest(wId *string, entityType string, action oci_identity.WorkRequestResourceActionTypeEnum,
	timeout time.Duration, disableFoundRetries bool, client *oci_identity.IdentityClient) (*string, error) {
func getErrorFromIdentityImportStandardTagsManagementWorkRequest(client *oci_identity.IdentityClient, workId *string, retryPolicy *oci_common.RetryPolicy, entityType string, action oci_identity.WorkRequestResourceActionTypeEnum) error {
	response, err := client.ListTaggingWorkRequestErrors(context.Background(),
func (s *IdentityImportStandardTagsManagementResourceCrud) SetData() error {
	if s.Res.OpcWorkRequestId != nil {

=== ./internal/service/identity/identity_iam_work_requests_data_source.go ===
func IdentityIamWorkRequestsDataSource() *schema.Resource {
	return &schema.Resource{
func readIdentityIamWorkRequests(d *schema.ResourceData, m interface{}) error {
	sync := &IdentityIamWorkRequestsDataSourceCrud{}
func (s *IdentityIamWorkRequestsDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *IdentityIamWorkRequestsDataSourceCrud) Get() error {
	request := oci_identity.ListIamWorkRequestsRequest{}
func (s *IdentityIamWorkRequestsDataSourceCrud) SetData() error {
	if s.Res == nil {
func IamWorkRequestResourceToMap(obj oci_identity.IamWorkRequestResource) map[string]interface{} {
	result := map[string]interface{}{}

=== ./internal/service/identity/identity_identity_providers_data_source.go ===
func IdentityIdentityProvidersDataSource() *schema.Resource {
	return &schema.Resource{
func readIdentityIdentityProviders(d *schema.ResourceData, m interface{}) error {
	sync := &IdentityIdentityProvidersDataSourceCrud{}
func (s *IdentityIdentityProvidersDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *IdentityIdentityProvidersDataSourceCrud) Get() error {
	request := oci_identity.ListIdentityProvidersRequest{}
func (s *IdentityIdentityProvidersDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/identity/identity_authentication_policy_data_source.go ===
func IdentityAuthenticationPolicyDataSource() *schema.Resource {
	fieldMap := make(map[string]*schema.Schema)
func readSingularIdentityAuthenticationPolicy(d *schema.ResourceData, m interface{}) error {
	sync := &IdentityAuthenticationPolicyDataSourceCrud{}
func (s *IdentityAuthenticationPolicyDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *IdentityAuthenticationPolicyDataSourceCrud) Get() error {
	request := oci_identity.GetAuthenticationPolicyRequest{}
func (s *IdentityAuthenticationPolicyDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/identity/identity_policy_resource.go ===
func IdentityPolicyResource() *schema.Resource {
	return &schema.Resource{
func createIdentityPolicy(d *schema.ResourceData, m interface{}) error {
	sync := &IdentityPolicyResourceCrud{}
func readIdentityPolicy(d *schema.ResourceData, m interface{}) error {
	sync := &IdentityPolicyResourceCrud{}
func updateIdentityPolicy(d *schema.ResourceData, m interface{}) error {
	sync := &IdentityPolicyResourceCrud{}
func deleteIdentityPolicy(d *schema.ResourceData, m interface{}) error {
	sync := &IdentityPolicyResourceCrud{}
func (s *IdentityPolicyResourceCrud) ID() string {
	return *s.Res.Id
func (s *IdentityPolicyResourceCrud) CreatedPending() []string {
	return []string{
func (s *IdentityPolicyResourceCrud) CreatedTarget() []string {
	return []string{
func (s *IdentityPolicyResourceCrud) DeletedPending() []string {
	return []string{
func (s *IdentityPolicyResourceCrud) DeletedTarget() []string {
	return []string{
func (s *IdentityPolicyResourceCrud) Create() error {
	request := oci_identity.CreatePolicyRequest{}
func (s *IdentityPolicyResourceCrud) Get() error {
	request := oci_identity.GetPolicyRequest{}
func (s *IdentityPolicyResourceCrud) Update() error {
	request := oci_identity.UpdatePolicyRequest{}
func (s *IdentityPolicyResourceCrud) Delete() error {
	request := oci_identity.DeletePolicyRequest{}
func (s *IdentityPolicyResourceCrud) SetData() error {
	if s.Res.CompartmentId != nil {
func ignorePolicyFormatDiff(k string, old string, new string, d *schema.ResourceData) bool {
	oldHash := getOrDefault(d, "policyHash", "")
func getOrDefault(d *schema.ResourceData, key string, defaultValue string) string {
	valueString := defaultValue

=== ./internal/service/identity/identity_customer_secret_keys_data_source.go ===
func IdentityCustomerSecretKeysDataSource() *schema.Resource {
	return &schema.Resource{
func readIdentityCustomerSecretKeys(d *schema.ResourceData, m interface{}) error {
	sync := &IdentityCustomerSecretKeysDataSourceCrud{}
func (s *IdentityCustomerSecretKeysDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *IdentityCustomerSecretKeysDataSourceCrud) Get() error {
	request := oci_identity.ListCustomerSecretKeysRequest{}
func (s *IdentityCustomerSecretKeysDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/identity/identity_group_data_source.go ===
func IdentityGroupDataSource() *schema.Resource {
	fieldMap := make(map[string]*schema.Schema)
func readSingularIdentityGroup(d *schema.ResourceData, m interface{}) error {
	sync := &IdentityGroupDataSourceCrud{}
func (s *IdentityGroupDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *IdentityGroupDataSourceCrud) Get() error {
	request := oci_identity.GetGroupRequest{}
func (s *IdentityGroupDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/identity/identity_domain_data_source.go ===
func IdentityDomainDataSource() *schema.Resource {
	fieldMap := make(map[string]*schema.Schema)
func readSingularIdentityDomain(d *schema.ResourceData, m interface{}) error {
	sync := &IdentityDomainDataSourceCrud{}
func (s *IdentityDomainDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *IdentityDomainDataSourceCrud) Get() error {
	request := oci_identity.GetDomainRequest{}
func (s *IdentityDomainDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/identity/identity_identity_provider_groups_data_source.go ===
func IdentityIdentityProviderGroupsDataSource() *schema.Resource {
	return &schema.Resource{
func readIdentityIdentityProviderGroups(d *schema.ResourceData, m interface{}) error {
	sync := &IdentityIdentityProviderGroupsDataSourceCrud{}
func (s *IdentityIdentityProviderGroupsDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *IdentityIdentityProviderGroupsDataSourceCrud) Get() error {
	request := oci_identity.ListIdentityProviderGroupsRequest{}
func (s *IdentityIdentityProviderGroupsDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/identity/identity_tags_data_source.go ===
func IdentityTagsDataSource() *schema.Resource {
	return &schema.Resource{
func readIdentityTags(d *schema.ResourceData, m interface{}) error {
	sync := &IdentityTagsDataSourceCrud{}
func (s *IdentityTagsDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *IdentityTagsDataSourceCrud) Get() error {
	request := oci_identity.ListTagsRequest{}
func (s *IdentityTagsDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/identity/identity_fault_domains_data_source.go ===
func IdentityFaultDomainsDataSource() *schema.Resource {
	return &schema.Resource{
func readIdentityFaultDomains(d *schema.ResourceData, m interface{}) error {
	sync := &IdentityFaultDomainsDataSourceCrud{}
func (s *IdentityFaultDomainsDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *IdentityFaultDomainsDataSourceCrud) Get() error {
	request := oci_identity.ListFaultDomainsRequest{}
func (s *IdentityFaultDomainsDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/identity/identity_iam_work_request_logs_data_source.go ===
func IdentityIamWorkRequestLogsDataSource() *schema.Resource {
	return &schema.Resource{
func readIdentityIamWorkRequestLogs(d *schema.ResourceData, m interface{}) error {
	sync := &IdentityIamWorkRequestLogsDataSourceCrud{}
func (s *IdentityIamWorkRequestLogsDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *IdentityIamWorkRequestLogsDataSourceCrud) Get() error {
	request := oci_identity.ListIamWorkRequestLogsRequest{}
func (s *IdentityIamWorkRequestLogsDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/identity/identity_smtp_credentials_data_source.go ===
func IdentitySmtpCredentialsDataSource() *schema.Resource {
	return &schema.Resource{
func readIdentitySmtpCredentials(d *schema.ResourceData, m interface{}) error {
	sync := &IdentitySmtpCredentialsDataSourceCrud{}
func (s *IdentitySmtpCredentialsDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *IdentitySmtpCredentialsDataSourceCrud) Get() error {
	request := oci_identity.ListSmtpCredentialsRequest{}
func (s *IdentitySmtpCredentialsDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/identity/identity_compartments_data_source.go ===
func IdentityCompartmentsDataSource() *schema.Resource {
	return &schema.Resource{
func readIdentityCompartments(d *schema.ResourceData, m interface{}) error {
	sync := &IdentityCompartmentsDataSourceCrud{}
func (s *IdentityCompartmentsDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *IdentityCompartmentsDataSourceCrud) Get() error {
	request := oci_identity.ListCompartmentsRequest{}
func (s *IdentityCompartmentsDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/identity/identity_tag_namespace_resource.go ===
func IdentityTagNamespaceResource() *schema.Resource {
	return &schema.Resource{
func createIdentityTagNamespace(d *schema.ResourceData, m interface{}) error {
	sync := &IdentityTagNamespaceResourceCrud{}
func readIdentityTagNamespace(d *schema.ResourceData, m interface{}) error {
	sync := &IdentityTagNamespaceResourceCrud{}
func updateIdentityTagNamespace(d *schema.ResourceData, m interface{}) error {
	sync := &IdentityTagNamespaceResourceCrud{}
func deleteIdentityTagNamespace(d *schema.ResourceData, m interface{}) error {
	// Only empty tag namespaces can be deleted, to execute our tests we don't want to delete namespaces as we Create
func (s *IdentityTagNamespaceResourceCrud) ID() string {
	return *s.Res.Id
func (s *IdentityTagNamespaceResourceCrud) CreatedPending() []string {
	return []string{}
func (s *IdentityTagNamespaceResourceCrud) CreatedTarget() []string {
	return []string{
func (s *IdentityTagNamespaceResourceCrud) DeletedPending() []string {
	return []string{
func (s *IdentityTagNamespaceResourceCrud) DeletedTarget() []string {
	return []string{
func (s *IdentityTagNamespaceResourceCrud) Create() error {
	request := oci_identity.CreateTagNamespaceRequest{}
func (s *IdentityTagNamespaceResourceCrud) Get() error {
	request := oci_identity.GetTagNamespaceRequest{}
func (s *IdentityTagNamespaceResourceCrud) Update() error {
	if compartment, ok := s.D.GetOkExists("compartment_id"); ok && s.D.HasChange("compartment_id") {
func (s *IdentityTagNamespaceResourceCrud) Delete() error {
	request := oci_identity.DeleteTagNamespaceRequest{}
func (s *IdentityTagNamespaceResourceCrud) SetData() error {
	if s.Res.CompartmentId != nil {
func (s *IdentityTagNamespaceResourceCrud) updateCompartment(compartment interface{}) error {
	changeCompartmentRequest := oci_identity.ChangeTagNamespaceCompartmentRequest{}

=== ./internal/service/identity/identity_dynamic_group_resource.go ===
func IdentityDynamicGroupResource() *schema.Resource {
	return &schema.Resource{
func createIdentityDynamicGroup(d *schema.ResourceData, m interface{}) error {
	sync := &IdentityDynamicGroupResourceCrud{}
func readIdentityDynamicGroup(d *schema.ResourceData, m interface{}) error {
	sync := &IdentityDynamicGroupResourceCrud{}
func updateIdentityDynamicGroup(d *schema.ResourceData, m interface{}) error {
	sync := &IdentityDynamicGroupResourceCrud{}
func deleteIdentityDynamicGroup(d *schema.ResourceData, m interface{}) error {
	sync := &IdentityDynamicGroupResourceCrud{}
func (s *IdentityDynamicGroupResourceCrud) ID() string {
	return *s.Res.Id
func (s *IdentityDynamicGroupResourceCrud) CreatedPending() []string {
	return []string{
func (s *IdentityDynamicGroupResourceCrud) CreatedTarget() []string {
	return []string{
func (s *IdentityDynamicGroupResourceCrud) DeletedPending() []string {
	return []string{
func (s *IdentityDynamicGroupResourceCrud) DeletedTarget() []string {
	return []string{
func (s *IdentityDynamicGroupResourceCrud) Create() error {
	request := oci_identity.CreateDynamicGroupRequest{}
func (s *IdentityDynamicGroupResourceCrud) Get() error {
	request := oci_identity.GetDynamicGroupRequest{}
func (s *IdentityDynamicGroupResourceCrud) Update() error {
	request := oci_identity.UpdateDynamicGroupRequest{}
func (s *IdentityDynamicGroupResourceCrud) Delete() error {
	request := oci_identity.DeleteDynamicGroupRequest{}
func (s *IdentityDynamicGroupResourceCrud) SetData() error {
	if s.Res.CompartmentId != nil {

=== ./internal/service/identity/identity_users_data_source.go ===
func IdentityUsersDataSource() *schema.Resource {
	return &schema.Resource{
func readIdentityUsers(d *schema.ResourceData, m interface{}) error {
	sync := &IdentityUsersDataSourceCrud{}
func (s *IdentityUsersDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *IdentityUsersDataSourceCrud) Get() error {
	request := oci_identity.ListUsersRequest{}
func (s *IdentityUsersDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/identity/identity_domain_replication_to_region_resource.go ===
func IdentityDomainReplicationToRegionResource() *schema.Resource {
	return &schema.Resource{
func createIdentityDomainReplicationToRegion(d *schema.ResourceData, m interface{}) error {
	sync := &IdentityDomainReplicationToRegionResourceCrud{}
func readIdentityDomainReplicationToRegion(d *schema.ResourceData, m interface{}) error {
	return nil
func deleteIdentityDomainReplicationToRegion(d *schema.ResourceData, m interface{}) error {
	return nil
func (s *IdentityDomainReplicationToRegionResourceCrud) ID() string {
	return *s.Res.Id
func (s *IdentityDomainReplicationToRegionResourceCrud) Create() error {
	request := oci_identity.EnableReplicationToRegionRequest{}
func (s *IdentityDomainReplicationToRegionResourceCrud) getDomainReplicationToRegionFromWorkRequest(workId *string, retryPolicy *oci_common.RetryPolicy,
	actionTypeEnum oci_identity.IamWorkRequestResourceActionTypeEnum, timeout time.Duration) error {
func (s *IdentityDomainReplicationToRegionResourceCrud) Get() error {
	request := oci_identity.GetDomainRequest{}
func domainReplicationToRegionWaitForWorkRequest(wId *string, entityType string, action oci_identity.IamWorkRequestResourceActionTypeEnum,
	timeout time.Duration, disableFoundRetries bool, client *oci_identity.IdentityClient) (*string, error) {
func (s *IdentityDomainReplicationToRegionResourceCrud) SetData() error {
	return nil
func (s *IdentityDomainResourceCrud) GetDomain() error {
	request := oci_identity.GetDomainRequest{}

=== ./internal/service/identity/identity_tag_namespaces_data_source.go ===
func IdentityTagNamespacesDataSource() *schema.Resource {
	return &schema.Resource{
func readIdentityTagNamespaces(d *schema.ResourceData, m interface{}) error {
	sync := &IdentityTagNamespacesDataSourceCrud{}
func (s *IdentityTagNamespacesDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *IdentityTagNamespacesDataSourceCrud) Get() error {
	request := oci_identity.ListTagNamespacesRequest{}
func (s *IdentityTagNamespacesDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/identity/identity_domains_data_source.go ===
func IdentityDomainsDataSource() *schema.Resource {
	return &schema.Resource{
func readIdentityDomains(d *schema.ResourceData, m interface{}) error {
	sync := &IdentityDomainsDataSourceCrud{}
func (s *IdentityDomainsDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *IdentityDomainsDataSourceCrud) Get() error {
	request := oci_identity.ListDomainsRequest{}
func (s *IdentityDomainsDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/identity/identity_policies_data_source.go ===
func IdentityPoliciesDataSource() *schema.Resource {
	return &schema.Resource{
func readIdentityPolicies(d *schema.ResourceData, m interface{}) error {
	sync := &IdentityPoliciesDataSourceCrud{}
func (s *IdentityPoliciesDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *IdentityPoliciesDataSourceCrud) Get() error {
	request := oci_identity.ListPoliciesRequest{}
func (s *IdentityPoliciesDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/identity/identity_tenancy_data_source.go ===
func IdentityTenancyDataSource() *schema.Resource {
	return &schema.Resource{
func readSingularIdentityTenancy(d *schema.ResourceData, m interface{}) error {
	sync := &IdentityTenancyDataSourceCrud{}
func (s *IdentityTenancyDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *IdentityTenancyDataSourceCrud) Get() error {
	request := oci_identity.GetTenancyRequest{}
func (s *IdentityTenancyDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/identity/identity_smtp_credential_resource.go ===
func IdentitySmtpCredentialResource() *schema.Resource {
	return &schema.Resource{
func createIdentitySmtpCredential(d *schema.ResourceData, m interface{}) error {
	sync := &IdentitySmtpCredentialResourceCrud{}
func readIdentitySmtpCredential(d *schema.ResourceData, m interface{}) error {
	sync := &IdentitySmtpCredentialResourceCrud{}
func updateIdentitySmtpCredential(d *schema.ResourceData, m interface{}) error {
	sync := &IdentitySmtpCredentialResourceCrud{}
func deleteIdentitySmtpCredential(d *schema.ResourceData, m interface{}) error {
	sync := &IdentitySmtpCredentialResourceCrud{}
func (s *IdentitySmtpCredentialResourceCrud) ID() string {
	return *s.Res.Id
func (s *IdentitySmtpCredentialResourceCrud) State() oci_identity.SmtpCredentialLifecycleStateEnum {
	return s.Res.LifecycleState
func (s *IdentitySmtpCredentialResourceCrud) CreatedPending() []string {
	return []string{
func (s *IdentitySmtpCredentialResourceCrud) CreatedTarget() []string {
	return []string{
func (s *IdentitySmtpCredentialResourceCrud) DeletedPending() []string {
	return []string{
func (s *IdentitySmtpCredentialResourceCrud) DeletedTarget() []string {
	return []string{
func (s *IdentitySmtpCredentialResourceCrud) Create() error {
	request := oci_identity.CreateSmtpCredentialRequest{}
func (s *IdentitySmtpCredentialResourceCrud) Get() error {
	request := oci_identity.ListSmtpCredentialsRequest{}
func (s *IdentitySmtpCredentialResourceCrud) Update() error {
	request := oci_identity.UpdateSmtpCredentialRequest{}
func (s *IdentitySmtpCredentialResourceCrud) Delete() error {
	request := oci_identity.DeleteSmtpCredentialRequest{}
func (s *IdentitySmtpCredentialResourceCrud) SetData() error {
	if s.Res.Description != nil {

=== ./internal/service/identity/identity_group_resource.go ===
func IdentityGroupResource() *schema.Resource {
	return &schema.Resource{
func createIdentityGroup(d *schema.ResourceData, m interface{}) error {
	sync := &IdentityGroupResourceCrud{}
func readIdentityGroup(d *schema.ResourceData, m interface{}) error {
	sync := &IdentityGroupResourceCrud{}
func updateIdentityGroup(d *schema.ResourceData, m interface{}) error {
	sync := &IdentityGroupResourceCrud{}
func deleteIdentityGroup(d *schema.ResourceData, m interface{}) error {
	sync := &IdentityGroupResourceCrud{}
func (s *IdentityGroupResourceCrud) ID() string {
	return *s.Res.Id
func (s *IdentityGroupResourceCrud) CreatedPending() []string {
	return []string{
func (s *IdentityGroupResourceCrud) CreatedTarget() []string {
	return []string{
func (s *IdentityGroupResourceCrud) DeletedPending() []string {
	return []string{
func (s *IdentityGroupResourceCrud) DeletedTarget() []string {
	return []string{
func (s *IdentityGroupResourceCrud) Create() error {
	request := oci_identity.CreateGroupRequest{}
func (s *IdentityGroupResourceCrud) Get() error {
	request := oci_identity.GetGroupRequest{}
func (s *IdentityGroupResourceCrud) Update() error {
	request := oci_identity.UpdateGroupRequest{}
func (s *IdentityGroupResourceCrud) Delete() error {
	request := oci_identity.DeleteGroupRequest{}
func (s *IdentityGroupResourceCrud) SetData() error {
	if s.Res.CompartmentId != nil {
func (s *IdentityGroupResourceCrud) ExtraWaitPostCreateDelete() time.Duration {
	return time.Duration(2 * time.Second)

=== ./internal/service/identity/identity_dynamic_groups_data_source.go ===
func IdentityDynamicGroupsDataSource() *schema.Resource {
	return &schema.Resource{
func readIdentityDynamicGroups(d *schema.ResourceData, m interface{}) error {
	sync := &IdentityDynamicGroupsDataSourceCrud{}
func (s *IdentityDynamicGroupsDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *IdentityDynamicGroupsDataSourceCrud) Get() error {
	request := oci_identity.ListDynamicGroupsRequest{}
func (s *IdentityDynamicGroupsDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/identity/identity_tag_default_data_source.go ===
func IdentityTagDefaultDataSource() *schema.Resource {
	fieldMap := make(map[string]*schema.Schema)
func readSingularIdentityTagDefault(d *schema.ResourceData, m interface{}) error {
	sync := &IdentityTagDefaultDataSourceCrud{}
func (s *IdentityTagDefaultDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *IdentityTagDefaultDataSourceCrud) Get() error {
	request := oci_identity.GetTagDefaultRequest{}
func (s *IdentityTagDefaultDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/identity/identity_user_group_memberships_data_source.go ===
func IdentityUserGroupMembershipsDataSource() *schema.Resource {
	return &schema.Resource{
func readIdentityUserGroupMemberships(d *schema.ResourceData, m interface{}) error {
	sync := &IdentityUserGroupMembershipsDataSourceCrud{}
func (s *IdentityUserGroupMembershipsDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *IdentityUserGroupMembershipsDataSourceCrud) Get() error {
	request := oci_identity.ListUserGroupMembershipsRequest{}
func (s *IdentityUserGroupMembershipsDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/identity/identity_domain_resource.go ===
func IdentityDomainResource() *schema.Resource {
	return &schema.Resource{
func createIdentityDomain(d *schema.ResourceData, m interface{}) error {
	sync := &IdentityDomainResourceCrud{}
func readIdentityDomain(d *schema.ResourceData, m interface{}) error {
	sync := &IdentityDomainResourceCrud{}
func updateIdentityDomain(d *schema.ResourceData, m interface{}) error {
	sync := &IdentityDomainResourceCrud{}
func deleteIdentityDomain(d *schema.ResourceData, m interface{}) error {
	sync := &IdentityDomainResourceCrud{}
func (s *IdentityDomainResourceCrud) ID() string {
	return *s.Res.Id
func (s *IdentityDomainResourceCrud) CreatedPending() []string {
	return []string{
func (s *IdentityDomainResourceCrud) CreatedTarget() []string {
	return []string{
func (s *IdentityDomainResourceCrud) DeletedPending() []string {
	return []string{
func (s *IdentityDomainResourceCrud) DeletedTarget() []string {
	return []string{}
func (s *IdentityDomainResourceCrud) Create() error {
	request := oci_identity.CreateDomainRequest{}
func (s *IdentityDomainResourceCrud) getDomainFromWorkRequest(workId *string,
	actionTypeEnum oci_identity.IamWorkRequestResourceActionTypeEnum, timeout time.Duration) error {
func domainWaitForWorkRequest(wId *string, entityType string, action oci_identity.IamWorkRequestResourceActionTypeEnum,
	timeout time.Duration, disableFoundRetries bool, client *oci_identity.IdentityClient) (*string, error) {
func (s *IdentityDomainResourceCrud) Get() error {
	request := oci_identity.GetDomainRequest{}
func (s *IdentityDomainResourceCrud) Update() error {
	if compartment, ok := s.D.GetOkExists("compartment_id"); ok && s.D.HasChange("compartment_id") {
func (s *IdentityDomainResourceCrud) Delete() error {
	request := oci_identity.DeleteDomainRequest{}
func (s *IdentityDomainResourceCrud) SetData() error {
	if s.Res.CompartmentId != nil {
func (s *IdentityDomainResourceCrud) updateCompartment(compartment interface{}) error {
	changeCompartmentRequest := oci_identity.ChangeDomainCompartmentRequest{}
func (s *IdentityDomainResourceCrud) updateLicenseType(licenseType interface{}) error {
	changeDomainLicenseTypeRequest := oci_identity.ChangeDomainLicenseTypeRequest{}
func (s *IdentityDomainResourceCrud) activate() error {
	activateDomainRequest := oci_identity.ActivateDomainRequest{}
func (s *IdentityDomainResourceCrud) deActivate() error {
	deactivateDomainRequest := oci_identity.DeactivateDomainRequest{}

=== ./internal/service/identity/identity_regions_data_source.go ===
func IdentityRegionsDataSource() *schema.Resource {
	return &schema.Resource{
func readIdentityRegions(d *schema.ResourceData, m interface{}) error {
	sync := &IdentityRegionsDataSourceCrud{}
func (s *IdentityRegionsDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *IdentityRegionsDataSourceCrud) Get() error {
	request := oci_identity.ListRegionsRequest{}
func (s *IdentityRegionsDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/identity/identity_auth_token_resource.go ===
func IdentityAuthTokenResource() *schema.Resource {
	return &schema.Resource{
func createIdentityAuthToken(d *schema.ResourceData, m interface{}) error {
	sync := &IdentityAuthTokenResourceCrud{}
func readIdentityAuthToken(d *schema.ResourceData, m interface{}) error {
	sync := &IdentityAuthTokenResourceCrud{}
func updateIdentityAuthToken(d *schema.ResourceData, m interface{}) error {
	sync := &IdentityAuthTokenResourceCrud{}
func deleteIdentityAuthToken(d *schema.ResourceData, m interface{}) error {
	sync := &IdentityAuthTokenResourceCrud{}
func (s *IdentityAuthTokenResourceCrud) ID() string {
	return *s.Res.Id
func (s *IdentityAuthTokenResourceCrud) State() oci_identity.AuthTokenLifecycleStateEnum {
	return s.Res.LifecycleState
func (s *IdentityAuthTokenResourceCrud) CreatedPending() []string {
	return []string{
func (s *IdentityAuthTokenResourceCrud) CreatedTarget() []string {
	return []string{
func (s *IdentityAuthTokenResourceCrud) DeletedPending() []string {
	return []string{
func (s *IdentityAuthTokenResourceCrud) DeletedTarget() []string {
	return []string{
func (s *IdentityAuthTokenResourceCrud) Create() error {
	request := oci_identity.CreateAuthTokenRequest{}
func (s *IdentityAuthTokenResourceCrud) Get() error {
	request := oci_identity.ListAuthTokensRequest{}
func (s *IdentityAuthTokenResourceCrud) Update() error {
	request := oci_identity.UpdateAuthTokenRequest{}
func (s *IdentityAuthTokenResourceCrud) Delete() error {
	request := oci_identity.DeleteAuthTokenRequest{}
func (s *IdentityAuthTokenResourceCrud) SetData() error {
	if s.Res.Description != nil {

=== ./internal/service/identity/identity_api_keys_data_source.go ===
func IdentityApiKeysDataSource() *schema.Resource {
	return &schema.Resource{
func readIdentityApiKeys(d *schema.ResourceData, m interface{}) error {
	sync := &IdentityApiKeysDataSourceCrud{}
func (s *IdentityApiKeysDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *IdentityApiKeysDataSourceCrud) Get() error {
	request := oci_identity.ListApiKeysRequest{}
func (s *IdentityApiKeysDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/identity/identity_api_key_resource.go ===
func IdentityApiKeyResource() *schema.Resource {
	return &schema.Resource{
func createIdentityApiKey(d *schema.ResourceData, m interface{}) error {
	sync := &IdentityApiKeyResourceCrud{}
func readIdentityApiKey(d *schema.ResourceData, m interface{}) error {
	sync := &IdentityApiKeyResourceCrud{}
func deleteIdentityApiKey(d *schema.ResourceData, m interface{}) error {
	sync := &IdentityApiKeyResourceCrud{}
func (s *IdentityApiKeyResourceCrud) ID() string {
	return *s.Res.KeyId
func (s *IdentityApiKeyResourceCrud) State() oci_identity.ApiKeyLifecycleStateEnum {
	return s.Res.LifecycleState
func (s *IdentityApiKeyResourceCrud) CreatedPending() []string {
	return []string{
func (s *IdentityApiKeyResourceCrud) CreatedTarget() []string {
	return []string{
func (s *IdentityApiKeyResourceCrud) DeletedPending() []string {
	return []string{
func (s *IdentityApiKeyResourceCrud) DeletedTarget() []string {
	return []string{
func (s *IdentityApiKeyResourceCrud) Create() error {
	request := oci_identity.UploadApiKeyRequest{}
func (s *IdentityApiKeyResourceCrud) Get() error {
	request := oci_identity.ListApiKeysRequest{}
func (s *IdentityApiKeyResourceCrud) Delete() error {
	request := oci_identity.DeleteApiKeyRequest{}
func (s *IdentityApiKeyResourceCrud) SetData() error {
	if s.Res.Fingerprint != nil {

=== ./internal/service/identity/identity_ui_password_data_source.go ===
func IdentityUiPasswordDataSource() *schema.Resource {
	fieldMap := make(map[string]*schema.Schema)
func readSingularIdentityUiPassword(d *schema.ResourceData, m interface{}) error {
	sync := &IdentityUiPasswordDataSourceCrud{}
func (s *IdentityUiPasswordDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *IdentityUiPasswordDataSourceCrud) Get() error {
	request := oci_identity.GetUserUIPasswordInformationRequest{}
func (s *IdentityUiPasswordDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/identity/identity_region_subscriptions_data_source.go ===
func IdentityRegionSubscriptionsDataSource() *schema.Resource {
	return &schema.Resource{
func readIdentityRegionSubscriptions(d *schema.ResourceData, m interface{}) error {
	sync := &IdentityRegionSubscriptionsDataSourceCrud{}
func (s *IdentityRegionSubscriptionsDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *IdentityRegionSubscriptionsDataSourceCrud) Get() error {
	request := oci_identity.ListRegionSubscriptionsRequest{}
func (s *IdentityRegionSubscriptionsDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/identity/identity_network_source_data_source.go ===
func IdentityNetworkSourceDataSource() *schema.Resource {
	fieldMap := make(map[string]*schema.Schema)
func readSingularIdentityNetworkSource(d *schema.ResourceData, m interface{}) error {
	sync := &IdentityNetworkSourceDataSourceCrud{}
func (s *IdentityNetworkSourceDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *IdentityNetworkSourceDataSourceCrud) Get() error {
	request := oci_identity.GetNetworkSourceRequest{}
func (s *IdentityNetworkSourceDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/identity/identity_compartment_resource.go ===
func IdentityCompartmentResource() *schema.Resource {
	return &schema.Resource{
func createIdentityCompartment(d *schema.ResourceData, m interface{}) error {
	sync := &IdentityCompartmentResourceCrud{}
func readIdentityCompartment(d *schema.ResourceData, m interface{}) error {
	sync := &IdentityCompartmentResourceCrud{}
func updateIdentityCompartment(d *schema.ResourceData, m interface{}) error {
	sync := &IdentityCompartmentResourceCrud{}
func deleteIdentityCompartment(d *schema.ResourceData, m interface{}) error {
	if enableDelete, ok := d.GetOkExists("enable_delete"); !ok || !enableDelete.(bool) {
func (s *IdentityCompartmentResourceCrud) ID() string {
	return *s.Res.Id
func (s *IdentityCompartmentResourceCrud) CreatedPending() []string {
	return []string{
func (s *IdentityCompartmentResourceCrud) CreatedTarget() []string {
	return []string{
func (s *IdentityCompartmentResourceCrud) DeletedPending() []string {
	return []string{
func (s *IdentityCompartmentResourceCrud) DeletedTarget() []string {
	return []string{
func (s *IdentityCompartmentResourceCrud) Create() error {
	request := oci_identity.CreateCompartmentRequest{}
func (s *IdentityCompartmentResourceCrud) Get() error {
	request := oci_identity.GetCompartmentRequest{}
func (s *IdentityCompartmentResourceCrud) Update() error {
	if compartment, ok := s.D.GetOkExists("compartment_id"); ok && s.D.HasChange("compartment_id") {
func (s *IdentityCompartmentResourceCrud) Delete() error {
	request := oci_identity.DeleteCompartmentRequest{}
func (s *IdentityCompartmentResourceCrud) SetData() error {
	if s.Res.CompartmentId != nil {
func (s *IdentityCompartmentResourceCrud) updateCompartment(compartment interface{}) error {
	changeCompartmentRequest := oci_identity.MoveCompartmentRequest{}

=== ./internal/service/identity/identity_ui_password_resource.go ===
func IdentityUiPasswordResource() *schema.Resource {
	return &schema.Resource{
func createIdentityUiPassword(d *schema.ResourceData, m interface{}) error {
	sync := &IdentityUiPasswordResourceCrud{}
func readIdentityUiPassword(d *schema.ResourceData, m interface{}) error {
	return nil
func deleteIdentityUiPassword(d *schema.ResourceData, m interface{}) error {
	return nil
func (s *IdentityUiPasswordResourceCrud) ID() string {
	return *s.Res.UserId
func (s *IdentityUiPasswordResourceCrud) CreatedPending() []string {
	return []string{
func (s *IdentityUiPasswordResourceCrud) CreatedTarget() []string {
	return []string{
func (s *IdentityUiPasswordResourceCrud) DeletedPending() []string {
	return []string{
func (s *IdentityUiPasswordResourceCrud) DeletedTarget() []string {
	return []string{
func (s *IdentityUiPasswordResourceCrud) Create() error {
	request := oci_identity.CreateOrResetUIPasswordRequest{}
func (s *IdentityUiPasswordResourceCrud) SetData() error {
	if s.Res.InactiveStatus != nil {

=== ./internal/service/identity/identity_export.go ===
func getIdentityDbCredentialId(resource *tf_export.OCIResource) (string, error) {

func processTagDefinitions(ctx *tf_export.ResourceDiscoveryContext, resources []*tf_export.OCIResource) ([]*tf_export.OCIResource, error) {
	for _, resource := range resources {
func findIdentityTags(ctx *tf_export.ResourceDiscoveryContext, tfMeta *tf_export.TerraformResourceAssociation, parent *tf_export.OCIResource, resourceGraph *tf_export.TerraformResourceGraph) ([]*tf_export.OCIResource, error) {
	// List on Tags does not return validator, and resource Read requires tagNamespaceId
func processIdentityAuthenticationPolicies(ctx *tf_export.ResourceDiscoveryContext, resources []*tf_export.OCIResource) ([]*tf_export.OCIResource, error) {
	// Add composite id as the resource's import ID
func processAvailabilityDomains(ctx *tf_export.ResourceDiscoveryContext, resources []*tf_export.OCIResource) ([]*tf_export.OCIResource, error) {
	for idx, ad := range resources {
func getAvailabilityDomainHCLDatasource(builder *strings.Builder, ociRes *tf_export.OCIResource, varMap map[string]string) error {
	builder.WriteString(fmt.Sprintf("data %s %s {\n", ociRes.TerraformClass, ociRes.TerraformName))
func getIdentityApiKeyId(resource *tf_export.OCIResource) (string, error) {

func getIdentityAuthenticationPolicyId(resource *tf_export.OCIResource) (string, error) {

func getIdentityAuthTokenId(resource *tf_export.OCIResource) (string, error) {

func getIdentityCustomerSecretKeyId(resource *tf_export.OCIResource) (string, error) {

func getIdentityIdpGroupMappingId(resource *tf_export.OCIResource) (string, error) {

func getIdentitySmtpCredentialId(resource *tf_export.OCIResource) (string, error) {


=== ./internal/service/identity/identity_identity_provider_resource.go ===
func IdentityIdentityProviderResource() *schema.Resource {
	return &schema.Resource{
func createIdentityIdentityProvider(d *schema.ResourceData, m interface{}) error {
	sync := &IdentityIdentityProviderResourceCrud{}
func readIdentityIdentityProvider(d *schema.ResourceData, m interface{}) error {
	sync := &IdentityIdentityProviderResourceCrud{}
func updateIdentityIdentityProvider(d *schema.ResourceData, m interface{}) error {
	sync := &IdentityIdentityProviderResourceCrud{}
func deleteIdentityIdentityProvider(d *schema.ResourceData, m interface{}) error {
	sync := &IdentityIdentityProviderResourceCrud{}
func (s *IdentityIdentityProviderResourceCrud) ID() string {
	identityProvider := *s.Res
func (s *IdentityIdentityProviderResourceCrud) CreatedPending() []string {
	return []string{
func (s *IdentityIdentityProviderResourceCrud) CreatedTarget() []string {
	return []string{
func (s *IdentityIdentityProviderResourceCrud) DeletedPending() []string {
	return []string{
func (s *IdentityIdentityProviderResourceCrud) DeletedTarget() []string {
	return []string{
func (s *IdentityIdentityProviderResourceCrud) Create() error {
	request := oci_identity.CreateIdentityProviderRequest{}
func (s *IdentityIdentityProviderResourceCrud) Get() error {
	request := oci_identity.GetIdentityProviderRequest{}
func (s *IdentityIdentityProviderResourceCrud) Update() error {
	request := oci_identity.UpdateIdentityProviderRequest{}
func (s *IdentityIdentityProviderResourceCrud) Delete() error {
	request := oci_identity.DeleteIdentityProviderRequest{}
func (s *IdentityIdentityProviderResourceCrud) SetData() error {
	switch v := (*s.Res).(type) {
func (s *IdentityIdentityProviderResourceCrud) populateTopLevelPolymorphicCreateIdentityProviderRequest(request *oci_identity.CreateIdentityProviderRequest) error {
	//discriminator
func (s *IdentityIdentityProviderResourceCrud) populateTopLevelPolymorphicUpdateIdentityProviderRequest(request *oci_identity.UpdateIdentityProviderRequest) error {
	//discriminator

=== ./internal/service/identity/identity_allowed_domain_license_types_data_source.go ===
func IdentityAllowedDomainLicenseTypesDataSource() *schema.Resource {
	return &schema.Resource{
func readIdentityAllowedDomainLicenseTypes(d *schema.ResourceData, m interface{}) error {
	sync := &IdentityAllowedDomainLicenseTypesDataSourceCrud{}
func (s *IdentityAllowedDomainLicenseTypesDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *IdentityAllowedDomainLicenseTypesDataSourceCrud) Get() error {
	request := oci_identity.ListAllowedDomainLicenseTypesRequest{}
func (s *IdentityAllowedDomainLicenseTypesDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/identity/identity_tag_standard_tag_namespace_templates_data_source.go ===
func IdentityTagStandardTagNamespaceTemplatesDataSource() *schema.Resource {
	return &schema.Resource{
func readIdentityTagStandardTagNamespaceTemplates(d *schema.ResourceData, m interface{}) error {
	sync := &IdentityTagStandardTagNamespaceTemplatesDataSourceCrud{}
func (s *IdentityTagStandardTagNamespaceTemplatesDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *IdentityTagStandardTagNamespaceTemplatesDataSourceCrud) Get() error {
	request := oci_identity.ListStandardTagNamespacesRequest{}
func (s *IdentityTagStandardTagNamespaceTemplatesDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/identity/identity_user_data_source.go ===
func IdentityUserDataSource() *schema.Resource {
	fieldMap := make(map[string]*schema.Schema)
func readSingularIdentityUser(d *schema.ResourceData, m interface{}) error {
	sync := &IdentityUserDataSourceCrud{}
func (s *IdentityUserDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *IdentityUserDataSourceCrud) Get() error {
	request := oci_identity.GetUserRequest{}
func (s *IdentityUserDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/identity/identity_cost_tracking_tags_data_source.go ===
func IdentityCostTrackingTagsDataSource() *schema.Resource {
	return &schema.Resource{
func readIdentityCostTrackingTags(d *schema.ResourceData, m interface{}) error {
	sync := &IdentityCostTrackingTagsDataSourceCrud{}
func (s *IdentityCostTrackingTagsDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *IdentityCostTrackingTagsDataSourceCrud) Get() error {
	request := oci_identity.ListCostTrackingTagsRequest{}
func (s *IdentityCostTrackingTagsDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/identity/identity_iam_work_request_errors_data_source.go ===
func IdentityIamWorkRequestErrorsDataSource() *schema.Resource {
	return &schema.Resource{
func readIdentityIamWorkRequestErrors(d *schema.ResourceData, m interface{}) error {
	sync := &IdentityIamWorkRequestErrorsDataSourceCrud{}
func (s *IdentityIamWorkRequestErrorsDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *IdentityIamWorkRequestErrorsDataSourceCrud) Get() error {
	request := oci_identity.ListIamWorkRequestErrorsRequest{}
func (s *IdentityIamWorkRequestErrorsDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/identity/identity_network_source_resource.go ===
func IdentityNetworkSourceResource() *schema.Resource {
	return &schema.Resource{
func createIdentityNetworkSource(d *schema.ResourceData, m interface{}) error {
	sync := &IdentityNetworkSourceResourceCrud{}
func readIdentityNetworkSource(d *schema.ResourceData, m interface{}) error {
	sync := &IdentityNetworkSourceResourceCrud{}
func updateIdentityNetworkSource(d *schema.ResourceData, m interface{}) error {
	sync := &IdentityNetworkSourceResourceCrud{}
func deleteIdentityNetworkSource(d *schema.ResourceData, m interface{}) error {
	sync := &IdentityNetworkSourceResourceCrud{}
func (s *IdentityNetworkSourceResourceCrud) ID() string {
	return *s.Res.Id
func (s *IdentityNetworkSourceResourceCrud) CreatedPending() []string {
	return []string{
func (s *IdentityNetworkSourceResourceCrud) CreatedTarget() []string {
	return []string{
func (s *IdentityNetworkSourceResourceCrud) DeletedPending() []string {
	return []string{
func (s *IdentityNetworkSourceResourceCrud) DeletedTarget() []string {
	return []string{
func (s *IdentityNetworkSourceResourceCrud) Create() error {
	request := oci_identity.CreateNetworkSourceRequest{}
func (s *IdentityNetworkSourceResourceCrud) Get() error {
	request := oci_identity.GetNetworkSourceRequest{}
func (s *IdentityNetworkSourceResourceCrud) Update() error {
	request := oci_identity.UpdateNetworkSourceRequest{}
func (s *IdentityNetworkSourceResourceCrud) Delete() error {
	request := oci_identity.DeleteNetworkSourceRequest{}
func (s *IdentityNetworkSourceResourceCrud) SetData() error {
	if s.Res.CompartmentId != nil {
func (s *IdentityNetworkSourceResourceCrud) mapToNetworkSourcesVirtualSourceList(fieldKeyFormat string) (oci_identity.NetworkSourcesVirtualSourceList, error) {
	result := oci_identity.NetworkSourcesVirtualSourceList{}

=== ./internal/service/identity/identity_network_sources_data_source.go ===
func IdentityNetworkSourcesDataSource() *schema.Resource {
	return &schema.Resource{
func readIdentityNetworkSources(d *schema.ResourceData, m interface{}) error {
	sync := &IdentityNetworkSourcesDataSourceCrud{}
func (s *IdentityNetworkSourcesDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *IdentityNetworkSourcesDataSourceCrud) Get() error {
	request := oci_identity.ListNetworkSourcesRequest{}
func (s *IdentityNetworkSourcesDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/identity/identity_tag_standard_tag_namespace_template_data_source.go ===
func IdentityTagStandardTagNamespaceTemplateDataSource() *schema.Resource {
	return &schema.Resource{
func readSingularIdentityTagStandardTagNamespaceTemplate(d *schema.ResourceData, m interface{}) error {
	sync := &IdentityTagStandardTagNamespaceTemplateDataSourceCrud{}
func (s *IdentityTagStandardTagNamespaceTemplateDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *IdentityTagStandardTagNamespaceTemplateDataSourceCrud) Get() error {
	request := oci_identity.GetStandardTagTemplateRequest{}
func (s *IdentityTagStandardTagNamespaceTemplateDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/identity/identity_user_group_membership_resource.go ===
func IdentityUserGroupMembershipResource() *schema.Resource {
	return &schema.Resource{
func createIdentityUserGroupMembership(d *schema.ResourceData, m interface{}) error {
	sync := &IdentityUserGroupMembershipResourceCrud{}
func readIdentityUserGroupMembership(d *schema.ResourceData, m interface{}) error {
	sync := &IdentityUserGroupMembershipResourceCrud{}
func deleteIdentityUserGroupMembership(d *schema.ResourceData, m interface{}) error {
	sync := &IdentityUserGroupMembershipResourceCrud{}
func (s *IdentityUserGroupMembershipResourceCrud) ID() string {
	return *s.Res.Id
func (s *IdentityUserGroupMembershipResourceCrud) CreatedPending() []string {
	return []string{
func (s *IdentityUserGroupMembershipResourceCrud) CreatedTarget() []string {
	return []string{
func (s *IdentityUserGroupMembershipResourceCrud) DeletedPending() []string {
	return []string{
func (s *IdentityUserGroupMembershipResourceCrud) DeletedTarget() []string {
	return []string{
func (s *IdentityUserGroupMembershipResourceCrud) Create() error {
	request := oci_identity.AddUserToGroupRequest{}
func (s *IdentityUserGroupMembershipResourceCrud) Get() error {
	request := oci_identity.GetUserGroupMembershipRequest{}
func (s *IdentityUserGroupMembershipResourceCrud) Delete() error {
	request := oci_identity.RemoveUserFromGroupRequest{}
func (s *IdentityUserGroupMembershipResourceCrud) SetData() error {
	if s.Res.CompartmentId != nil {

=== ./internal/service/identity/identity_auth_tokens_data_source.go ===
func IdentityAuthTokensDataSource() *schema.Resource {
	return &schema.Resource{
func readIdentityAuthTokens(d *schema.ResourceData, m interface{}) error {
	sync := &IdentityAuthTokensDataSourceCrud{}
func (s *IdentityAuthTokensDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *IdentityAuthTokensDataSourceCrud) Get() error {
	request := oci_identity.ListAuthTokensRequest{}
func (s *IdentityAuthTokensDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/identity/identity_iam_work_request_data_source.go ===
func IdentityIamWorkRequestDataSource() *schema.Resource {
	return &schema.Resource{
func readSingularIdentityIamWorkRequest(d *schema.ResourceData, m interface{}) error {
	sync := &IdentityIamWorkRequestDataSourceCrud{}
func (s *IdentityIamWorkRequestDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *IdentityIamWorkRequestDataSourceCrud) Get() error {
	request := oci_identity.GetIamWorkRequestRequest{}
func (s *IdentityIamWorkRequestDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/identity/identity_idp_group_mapping_resource.go ===
func IdentityIdpGroupMappingResource() *schema.Resource {
	return &schema.Resource{
func createIdentityIdpGroupMapping(d *schema.ResourceData, m interface{}) error {
	sync := &IdentityIdpGroupMappingResourceCrud{}
func readIdentityIdpGroupMapping(d *schema.ResourceData, m interface{}) error {
	sync := &IdentityIdpGroupMappingResourceCrud{}
func updateIdentityIdpGroupMapping(d *schema.ResourceData, m interface{}) error {
	sync := &IdentityIdpGroupMappingResourceCrud{}
func deleteIdentityIdpGroupMapping(d *schema.ResourceData, m interface{}) error {
	sync := &IdentityIdpGroupMappingResourceCrud{}
func (s *IdentityIdpGroupMappingResourceCrud) ID() string {
	return *s.Res.Id
func (s *IdentityIdpGroupMappingResourceCrud) CreatedPending() []string {
	return []string{
func (s *IdentityIdpGroupMappingResourceCrud) CreatedTarget() []string {
	return []string{
func (s *IdentityIdpGroupMappingResourceCrud) DeletedPending() []string {
	return []string{
func (s *IdentityIdpGroupMappingResourceCrud) DeletedTarget() []string {
	return []string{
func (s *IdentityIdpGroupMappingResourceCrud) Create() error {
	request := oci_identity.CreateIdpGroupMappingRequest{}
func (s *IdentityIdpGroupMappingResourceCrud) Get() error {
	request := oci_identity.GetIdpGroupMappingRequest{}
func (s *IdentityIdpGroupMappingResourceCrud) Update() error {
	request := oci_identity.UpdateIdpGroupMappingRequest{}
func (s *IdentityIdpGroupMappingResourceCrud) Delete() error {
	request := oci_identity.DeleteIdpGroupMappingRequest{}
func (s *IdentityIdpGroupMappingResourceCrud) SetData() error {


=== ./internal/service/identity/identity_compartment_data_source.go ===
func IdentityCompartmentDataSource() *schema.Resource {
	return &schema.Resource{
func readSingularIdentityCompartment(d *schema.ResourceData, m interface{}) error {
	sync := &IdentityCompartmentDataSourceCrud{}
func (s *IdentityCompartmentDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *IdentityCompartmentDataSourceCrud) Get() error {
	request := oci_identity.GetCompartmentRequest{}
func (s *IdentityCompartmentDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/identity/identity_tag_defaults_data_source.go ===
func IdentityTagDefaultsDataSource() *schema.Resource {
	return &schema.Resource{
func readIdentityTagDefaults(d *schema.ResourceData, m interface{}) error {
	sync := &IdentityTagDefaultsDataSourceCrud{}
func (s *IdentityTagDefaultsDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *IdentityTagDefaultsDataSourceCrud) Get() error {
	request := oci_identity.ListTagDefaultsRequest{}
func (s *IdentityTagDefaultsDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/identity/identity_availability_domains_data_source.go ===
func IdentityAvailabilityDomainsDataSource() *schema.Resource {
	return &schema.Resource{
func readIdentityAvailabilityDomains(d *schema.ResourceData, m interface{}) error {
	sync := &IdentityAvailabilityDomainsDataSourceCrud{}
func (s *IdentityAvailabilityDomainsDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *IdentityAvailabilityDomainsDataSourceCrud) Get() error {
	request := oci_identity.ListAvailabilityDomainsRequest{}
func (s *IdentityAvailabilityDomainsDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/identity/identity_tag_data_source.go ===
func IdentityTagDataSource() *schema.Resource {
	fieldMap := make(map[string]*schema.Schema)
func readSingularIdentityTag(d *schema.ResourceData, m interface{}) error {
	sync := &IdentityTagDataSourceCrud{}
func (s *IdentityTagDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *IdentityTagDataSourceCrud) Get() error {
	request := oci_identity.GetTagRequest{}
func (s *IdentityTagDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/identity/identity_idp_group_mappings_data_source.go ===
func IdentityIdpGroupMappingsDataSource() *schema.Resource {
	return &schema.Resource{
func readIdentityIdpGroupMappings(d *schema.ResourceData, m interface{}) error {
	sync := &IdentityIdpGroupMappingsDataSourceCrud{}
func (s *IdentityIdpGroupMappingsDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *IdentityIdpGroupMappingsDataSourceCrud) Get() error {
	request := oci_identity.ListIdpGroupMappingsRequest{}
func (s *IdentityIdpGroupMappingsDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/identity/identity_groups_data_source.go ===
func IdentityGroupsDataSource() *schema.Resource {
	return &schema.Resource{
func readIdentityGroups(d *schema.ResourceData, m interface{}) error {
	sync := &IdentityGroupsDataSourceCrud{}
func (s *IdentityGroupsDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *IdentityGroupsDataSourceCrud) Get() error {
	request := oci_identity.ListGroupsRequest{}
func (s *IdentityGroupsDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/identity/identity_authentication_policy_resource.go ===
func IdentityAuthenticationPolicyResource() *schema.Resource {
	return &schema.Resource{
func createIdentityAuthenticationPolicy(d *schema.ResourceData, m interface{}) error {
	sync := &IdentityAuthenticationPolicyResourceCrud{}
func readIdentityAuthenticationPolicy(d *schema.ResourceData, m interface{}) error {
	sync := &IdentityAuthenticationPolicyResourceCrud{}
func updateIdentityAuthenticationPolicy(d *schema.ResourceData, m interface{}) error {
	sync := &IdentityAuthenticationPolicyResourceCrud{}
func deleteIdentityAuthenticationPolicy(d *schema.ResourceData, m interface{}) error {
	return nil
func (s *IdentityAuthenticationPolicyResourceCrud) ID() string {
	return GetAuthenticationPolicyCompositeId(s.D.Get("compartment_id").(string))
func (s *IdentityAuthenticationPolicyResourceCrud) Create() error {
	request := oci_identity.UpdateAuthenticationPolicyRequest{}
func (s *IdentityAuthenticationPolicyResourceCrud) Get() error {
	request := oci_identity.GetAuthenticationPolicyRequest{}
func (s *IdentityAuthenticationPolicyResourceCrud) Update() error {
	request := oci_identity.UpdateAuthenticationPolicyRequest{}
func (s *IdentityAuthenticationPolicyResourceCrud) SetData() error {

func (s *IdentityAuthenticationPolicyResourceCrud) mapToNetworkPolicy(fieldKeyFormat string) (oci_identity.NetworkPolicy, error) {
	result := oci_identity.NetworkPolicy{}
func (s *IdentityAuthenticationPolicyResourceCrud) mapToPasswordPolicy(fieldKeyFormat string) (oci_identity.PasswordPolicy, error) {
	result := oci_identity.PasswordPolicy{}

=== ./internal/service/identity/identity_tag_default_resource.go ===
func IdentityTagDefaultResource() *schema.Resource {
	return &schema.Resource{
func createIdentityTagDefault(d *schema.ResourceData, m interface{}) error {
	sync := &IdentityTagDefaultResourceCrud{}
func readIdentityTagDefault(d *schema.ResourceData, m interface{}) error {
	sync := &IdentityTagDefaultResourceCrud{}
func updateIdentityTagDefault(d *schema.ResourceData, m interface{}) error {
	sync := &IdentityTagDefaultResourceCrud{}
func deleteIdentityTagDefault(d *schema.ResourceData, m interface{}) error {
	sync := &IdentityTagDefaultResourceCrud{}
func (s *IdentityTagDefaultResourceCrud) ID() string {
	return *s.Res.Id
func (s *IdentityTagDefaultResourceCrud) CreatedPending() []string {
	return []string{}
func (s *IdentityTagDefaultResourceCrud) CreatedTarget() []string {
	return []string{
func (s *IdentityTagDefaultResourceCrud) DeletedPending() []string {
	return []string{}
func (s *IdentityTagDefaultResourceCrud) DeletedTarget() []string {
	return []string{}
func (s *IdentityTagDefaultResourceCrud) Create() error {
	request := oci_identity.CreateTagDefaultRequest{}
func (s *IdentityTagDefaultResourceCrud) Get() error {
	request := oci_identity.GetTagDefaultRequest{}
func (s *IdentityTagDefaultResourceCrud) Update() error {
	request := oci_identity.UpdateTagDefaultRequest{}
func (s *IdentityTagDefaultResourceCrud) Delete() error {
	request := oci_identity.DeleteTagDefaultRequest{}
func (s *IdentityTagDefaultResourceCrud) SetData() error {
	if s.Res.CompartmentId != nil {

=== ./internal/service/identity/identity_db_credential_resource.go ===
func IdentityDbCredentialResource() *schema.Resource {
	return &schema.Resource{
func createIdentityDbCredential(d *schema.ResourceData, m interface{}) error {
	sync := &IdentityDbCredentialResourceCrud{}
func readIdentityDbCredential(d *schema.ResourceData, m interface{}) error {
	sync := &IdentityDbCredentialResourceCrud{}
func deleteIdentityDbCredential(d *schema.ResourceData, m interface{}) error {
	sync := &IdentityDbCredentialResourceCrud{}
func (s *IdentityDbCredentialResourceCrud) ID() string {
	return GetDbCredentialCompositeId(*s.Res.Id, *s.Res.UserId)
func (s *IdentityDbCredentialResourceCrud) CreatedPending() []string {
	return []string{
func (s *IdentityDbCredentialResourceCrud) CreatedTarget() []string {
	return []string{
func (s *IdentityDbCredentialResourceCrud) DeletedPending() []string {
	return []string{
func (s *IdentityDbCredentialResourceCrud) DeletedTarget() []string {
	return []string{
func (s *IdentityDbCredentialResourceCrud) Create() error {
	request := oci_identity.CreateDbCredentialRequest{}
func (s *IdentityDbCredentialResourceCrud) Get() error {
	request := oci_identity.ListDbCredentialsRequest{}
func (s *IdentityDbCredentialResourceCrud) Delete() error {
	request := oci_identity.DeleteDbCredentialRequest{}
func (s *IdentityDbCredentialResourceCrud) SetData() error {


=== ./internal/service/identity/identity_user_capabilities_management_resource.go ===
func IdentityUserCapabilitiesManagementResource() *schema.Resource {
	return &schema.Resource{
func createUserCapabilitiesManagement(d *schema.ResourceData, m interface{}) error {
	sync := &UserCapabilitiesManagementResourceCrud{}
func readUserCapabilitiesManagement(d *schema.ResourceData, m interface{}) error {
	sync := &UserCapabilitiesManagementResourceCrud{}
func updateUserCapabilitiesManagement(d *schema.ResourceData, m interface{}) error {
	sync := &UserCapabilitiesManagementResourceCrud{}
func deleteUserCapabilitiesManagement(d *schema.ResourceData, m interface{}) error {
	sync := &UserCapabilitiesManagementResourceCrud{}
func (s *UserCapabilitiesManagementResourceCrud) ID() string {
	return getUserCapabilitiesCompositeId(s.D.Get("user_id").(string))
func (s *UserCapabilitiesManagementResourceCrud) Create() error {
	userCapabilityRequest := oci_identity.UpdateUserCapabilitiesRequest{}
func (s *UserCapabilitiesManagementResourceCrud) Get() error {
	request := oci_identity.GetUserRequest{}
func (s *UserCapabilitiesManagementResourceCrud) Update() error {
	return s.Create()
func (s *UserCapabilitiesManagementResourceCrud) Delete() error {
	// We dont know the original default values, so we pretend that the existing state is to be retained
func (s *UserCapabilitiesManagementResourceCrud) SetData() error {
	if s.Res.Capabilities != nil {

=== ./internal/service/identity/identity_customer_secret_key_resource.go ===
func IdentityCustomerSecretKeyResource() *schema.Resource {
	return &schema.Resource{
func createIdentityCustomerSecretKey(d *schema.ResourceData, m interface{}) error {
	sync := &IdentityCustomerSecretKeyResourceCrud{}
func readIdentityCustomerSecretKey(d *schema.ResourceData, m interface{}) error {
	sync := &IdentityCustomerSecretKeyResourceCrud{}
func updateIdentityCustomerSecretKey(d *schema.ResourceData, m interface{}) error {
	sync := &IdentityCustomerSecretKeyResourceCrud{}
func deleteIdentityCustomerSecretKey(d *schema.ResourceData, m interface{}) error {
	sync := &IdentityCustomerSecretKeyResourceCrud{}
func (s *IdentityCustomerSecretKeyResourceCrud) ID() string {
	return *s.Res.Id
func (s *IdentityCustomerSecretKeyResourceCrud) State() oci_identity.CustomerSecretKeyLifecycleStateEnum {
	return s.Res.LifecycleState
func (s *IdentityCustomerSecretKeyResourceCrud) CreatedPending() []string {
	return []string{
func (s *IdentityCustomerSecretKeyResourceCrud) CreatedTarget() []string {
	return []string{
func (s *IdentityCustomerSecretKeyResourceCrud) DeletedPending() []string {
	return []string{
func (s *IdentityCustomerSecretKeyResourceCrud) DeletedTarget() []string {
	return []string{
func (s *IdentityCustomerSecretKeyResourceCrud) Create() error {
	request := oci_identity.CreateCustomerSecretKeyRequest{}
func (s *IdentityCustomerSecretKeyResourceCrud) Get() error {
	request := oci_identity.ListCustomerSecretKeysRequest{}
func (s *IdentityCustomerSecretKeyResourceCrud) Update() error {
	request := oci_identity.UpdateCustomerSecretKeyRequest{}
func (s *IdentityCustomerSecretKeyResourceCrud) Delete() error {
	request := oci_identity.DeleteCustomerSecretKeyRequest{}
func (s *IdentityCustomerSecretKeyResourceCrud) SetData() error {
	if s.Res.DisplayName != nil {

=== ./internal/service/identity/identity_user_resource.go ===
func IdentityUserResource() *schema.Resource {
	return &schema.Resource{
func createIdentityUser(d *schema.ResourceData, m interface{}) error {
	sync := &IdentityUserResourceCrud{}
func readIdentityUser(d *schema.ResourceData, m interface{}) error {
	sync := &IdentityUserResourceCrud{}
func updateIdentityUser(d *schema.ResourceData, m interface{}) error {
	sync := &IdentityUserResourceCrud{}
func deleteIdentityUser(d *schema.ResourceData, m interface{}) error {
	sync := &IdentityUserResourceCrud{}
func (s *IdentityUserResourceCrud) ID() string {
	return *s.Res.Id
func (s *IdentityUserResourceCrud) CreatedPending() []string {
	return []string{
func (s *IdentityUserResourceCrud) CreatedTarget() []string {
	return []string{
func (s *IdentityUserResourceCrud) DeletedPending() []string {
	return []string{
func (s *IdentityUserResourceCrud) DeletedTarget() []string {
	return []string{
func (s *IdentityUserResourceCrud) Create() error {
	request := oci_identity.CreateUserRequest{}
func (s *IdentityUserResourceCrud) Get() error {
	request := oci_identity.GetUserRequest{}
func (s *IdentityUserResourceCrud) Update() error {
	request := oci_identity.UpdateUserRequest{}
func (s *IdentityUserResourceCrud) Delete() error {
	request := oci_identity.DeleteUserRequest{}
func (s *IdentityUserResourceCrud) SetData() error {
	if s.Res.Capabilities != nil {

=== ./internal/service/identity/identity_tag_resource.go ===
func IdentityTagResource() *schema.Resource {
	return &schema.Resource{
func createIdentityTag(d *schema.ResourceData, m interface{}) error {
	sync := &IdentityTagResourceCrud{}
func readIdentityTag(d *schema.ResourceData, m interface{}) error {
	sync := &IdentityTagResourceCrud{}
func updateIdentityTag(d *schema.ResourceData, m interface{}) error {
	sync := &IdentityTagResourceCrud{}
func deleteIdentityTag(d *schema.ResourceData, m interface{}) error {
	// prevent tag deletion when testing, as its a time consuming and sequential operation permitted one per tenancy.
func (s *IdentityTagResourceCrud) ID() string {
	return *s.Res.Id
func (s *IdentityTagResourceCrud) CreatedPending() []string {
	return []string{}
func (s *IdentityTagResourceCrud) CreatedTarget() []string {
	return []string{
func (s *IdentityTagResourceCrud) DeletedPending() []string {
	return []string{
func (s *IdentityTagResourceCrud) DeletedTarget() []string {
	return []string{
func (s *IdentityTagResourceCrud) Create() error {
	request := oci_identity.CreateTagRequest{}
func (s *IdentityTagResourceCrud) Get() error {
	request := oci_identity.GetTagRequest{}
func (s *IdentityTagResourceCrud) Update() error {
	request := oci_identity.UpdateTagRequest{}
func (s *IdentityTagResourceCrud) Delete() error {
	// retire the tag if not already retired.
func IdentityTaggingWaitForWorkRequest(workRequestId *string, entityType string, action oci_identity.WorkRequestResourceActionTypeEnum,
	timeout time.Duration, disableFoundRetries bool, client *oci_identity.IdentityClient) (*string, error) {
func getIdentityTaggingWorkRequestErrors(client *oci_identity.IdentityClient, workRequestId *string, retryPolicy *oci_common.RetryPolicy, entityType string, action oci_identity.WorkRequestResourceActionTypeEnum) error {
	response, err := client.ListTaggingWorkRequestErrors(context.Background(), oci_identity.ListTaggingWorkRequestErrorsRequest{
func (s *IdentityTagResourceCrud) SetData() error {
	if s.Res.DefinedTags != nil {
func (s *IdentityTagResourceCrud) mapToBaseTagDefinitionValidator(fieldKeyFormat string) (oci_identity.BaseTagDefinitionValidator, error) {
	var baseObject oci_identity.BaseTagDefinitionValidator

=== ./internal/service/identity/register_resource.go ===
func RegisterResource() {
	tfresource.RegisterResource("oci_identity_api_key", IdentityApiKeyResource())

=== ./internal/service/identity/identity_availability_domain_data_source.go ===
func IdentityAvailabilityDomainDataSource() *schema.Resource {
	return &schema.Resource{
func readAvailabilityDomain(d *schema.ResourceData, m interface{}) error {
	sync := &AvailabilityDomainDataSourceCrud{}
func (s *AvailabilityDomainDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *AvailabilityDomainDataSourceCrud) Get() error {
	request := oci_identity.ListAvailabilityDomainsRequest{}
func (s *AvailabilityDomainDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/identity/identity_db_credentials_data_source.go ===
func IdentityDbCredentialsDataSource() *schema.Resource {
	return &schema.Resource{
func readIdentityDbCredentials(d *schema.ResourceData, m interface{}) error {
	sync := &IdentityDbCredentialsDataSourceCrud{}
func (s *IdentityDbCredentialsDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *IdentityDbCredentialsDataSourceCrud) Get() error {
	request := oci_identity.ListDbCredentialsRequest{}
func (s *IdentityDbCredentialsDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/load_balancer/load_balancer_ssl_cipher_suites_data_source.go ===
func LoadBalancerSslCipherSuitesDataSource() *schema.Resource {
	return &schema.Resource{
func readLoadBalancerSslCipherSuites(d *schema.ResourceData, m interface{}) error {
	sync := &LoadBalancerSslCipherSuitesDataSourceCrud{}
func (s *LoadBalancerSslCipherSuitesDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *LoadBalancerSslCipherSuitesDataSourceCrud) Get() error {
	request := oci_load_balancer.ListSSLCipherSuitesRequest{}
func (s *LoadBalancerSslCipherSuitesDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/load_balancer/load_balancer_rule_set_resource.go ===
func LoadBalancerRuleSetResource() *schema.Resource {
	return &schema.Resource{
func createLoadBalancerRuleSet(d *schema.ResourceData, m interface{}) error {
	sync := &LoadBalancerRuleSetResourceCrud{}
func readLoadBalancerRuleSet(d *schema.ResourceData, m interface{}) error {
	sync := &LoadBalancerRuleSetResourceCrud{}
func updateLoadBalancerRuleSet(d *schema.ResourceData, m interface{}) error {
	sync := &LoadBalancerRuleSetResourceCrud{}
func deleteLoadBalancerRuleSet(d *schema.ResourceData, m interface{}) error {
	sync := &LoadBalancerRuleSetResourceCrud{}
func (s *LoadBalancerRuleSetResourceCrud) ID() string {
	if s.WorkRequest != nil {
func (s *LoadBalancerRuleSetResourceCrud) CreatedPending() []string {
	return []string{
func (s *LoadBalancerRuleSetResourceCrud) CreatedTarget() []string {
	return []string{
func (s *LoadBalancerRuleSetResourceCrud) DeletedPending() []string {
	return []string{
func (s *LoadBalancerRuleSetResourceCrud) DeletedTarget() []string {
	return []string{
func (s *LoadBalancerRuleSetResourceCrud) Create() error {
	request := oci_load_balancer.CreateRuleSetRequest{}
func (s *LoadBalancerRuleSetResourceCrud) Get() error {
	_, stillWorking, err := loadBalancerResourceGet(s.Client, s.D, s.WorkRequest, tfresource.GetRetryPolicy(s.DisableNotFoundRetries, "load_balancer"))
func (s *LoadBalancerRuleSetResourceCrud) Update() error {
	request := oci_load_balancer.UpdateRuleSetRequest{}
func (s *LoadBalancerRuleSetResourceCrud) Delete() error {
	request := oci_load_balancer.DeleteRuleSetRequest{}
func (s *LoadBalancerRuleSetResourceCrud) SetData() error {
	if s.Res == nil {
func (s *LoadBalancerRuleSetResourceCrud) mapToIpMaxConnections(fieldKeyFormat string) (oci_load_balancer.IpMaxConnections, error) {
	result := oci_load_balancer.IpMaxConnections{}
func (s *LoadBalancerRuleSetResourceCrud) mapToRedirectUri(fieldKeyFormat string) (oci_load_balancer.RedirectUri, error) {
	result := oci_load_balancer.RedirectUri{}
func (s *LoadBalancerRuleSetResourceCrud) mapToRule(fieldKeyFormat string) (oci_load_balancer.Rule, error) {
	var baseObject oci_load_balancer.Rule
func (s *LoadBalancerRuleSetResourceCrud) mapToRuleCondition(fieldKeyFormat string) (oci_load_balancer.RuleCondition, error) {
	var baseObject oci_load_balancer.RuleCondition

=== ./internal/service/load_balancer/load_balancer_health_data_source.go ===
func LoadBalancerLoadBalancerHealthDataSource() *schema.Resource {
	return &schema.Resource{
func readSingularLoadBalancerLoadBalancerHealth(d *schema.ResourceData, m interface{}) error {
	sync := &LoadBalancerLoadBalancerHealthDataSourceCrud{}
func (s *LoadBalancerLoadBalancerHealthDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *LoadBalancerLoadBalancerHealthDataSourceCrud) Get() error {
	request := oci_load_balancer.GetLoadBalancerHealthRequest{}
func (s *LoadBalancerLoadBalancerHealthDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/load_balancer/helpers_load_balancer.go ===
func loadBalancerResourceID(res interface{}, workReq *oci_load_balancer.WorkRequest) (id *string, workReqSucceeded bool) {
	v := reflect.ValueOf(res).Elem()
func loadBalancerResourceGet(client *oci_load_balancer.LoadBalancerClient, d *schema.ResourceData, wr *oci_load_balancer.WorkRequest, retryPolicy *oci_common.RetryPolicy) (id string, stillWorking bool, err error) {
	// NOTE: if the id is for a work request, refresh its state and loadBalancerID.
func loadBalancerWaitForWorkRequest(client *oci_load_balancer.LoadBalancerClient, d *schema.ResourceData, wr *oci_load_balancer.WorkRequest, retryPolicy *oci_common.RetryPolicy) error {
	stateConf := &resource.StateChangeConf{

=== ./internal/service/load_balancer/load_balancer_backend_health_data_source.go ===
func LoadBalancerBackendHealthDataSource() *schema.Resource {
	return &schema.Resource{
func readSingularLoadBalancerBackendHealth(d *schema.ResourceData, m interface{}) error {
	sync := &LoadBalancerBackendHealthDataSourceCrud{}
func (s *LoadBalancerBackendHealthDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *LoadBalancerBackendHealthDataSourceCrud) Get() error {
	request := oci_load_balancer.GetBackendHealthRequest{}
func (s *LoadBalancerBackendHealthDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/load_balancer/load_balancer_shapes_data_source.go ===
func LoadBalancerLoadBalancerShapesDataSource() *schema.Resource {
	return &schema.Resource{
func readLoadBalancerLoadBalancerShapes(d *schema.ResourceData, m interface{}) error {
	sync := &LoadBalancerLoadBalancerShapesDataSourceCrud{}
func (s *LoadBalancerLoadBalancerShapesDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *LoadBalancerLoadBalancerShapesDataSourceCrud) Get() error {
	request := oci_load_balancer.ListShapesRequest{}
func (s *LoadBalancerLoadBalancerShapesDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/load_balancer/load_balancer_listener_resource.go ===
func LoadBalancerListenerResource() *schema.Resource {
	return &schema.Resource{
func createLoadBalancerListener(d *schema.ResourceData, m interface{}) error {
	sync := &LoadBalancerListenerResourceCrud{}
func readLoadBalancerListener(d *schema.ResourceData, m interface{}) error {
	sync := &LoadBalancerListenerResourceCrud{}
func updateLoadBalancerListener(d *schema.ResourceData, m interface{}) error {
	sync := &LoadBalancerListenerResourceCrud{}
func deleteLoadBalancerListener(d *schema.ResourceData, m interface{}) error {
	sync := &LoadBalancerListenerResourceCrud{}
func (s *LoadBalancerListenerResourceCrud) ID() string {
	if s.WorkRequest != nil {
func (s *LoadBalancerListenerResourceCrud) CreatedPending() []string {
	return []string{
func (s *LoadBalancerListenerResourceCrud) CreatedTarget() []string {
	return []string{
func (s *LoadBalancerListenerResourceCrud) DeletedPending() []string {
	return []string{
func (s *LoadBalancerListenerResourceCrud) DeletedTarget() []string {
	return []string{
func (s *LoadBalancerListenerResourceCrud) Create() error {
	request := oci_load_balancer.CreateListenerRequest{}
func (s *LoadBalancerListenerResourceCrud) Get() (e error) {
	// key: {workRequestID} || {loadBalancerID,name}
func (s *LoadBalancerListenerResourceCrud) GetListener(loadBalancerID, name string) (*oci_load_balancer.Listener, error) {
	request := oci_load_balancer.GetLoadBalancerRequest{}
func (s *LoadBalancerListenerResourceCrud) Update() error {
	request := oci_load_balancer.UpdateListenerRequest{}
func (s *LoadBalancerListenerResourceCrud) Delete() error {
	request := oci_load_balancer.DeleteListenerRequest{}
func (s *LoadBalancerListenerResourceCrud) SetData() error {
	if s.Res == nil {
func (s *LoadBalancerListenerResourceCrud) mapToConnectionConfiguration(fieldKeyFormat string) (oci_load_balancer.ConnectionConfiguration, error) {
	result := oci_load_balancer.ConnectionConfiguration{}
func (s *LoadBalancerListenerResourceCrud) mapToSSLConfigurationDetails(fieldKeyFormat string) (oci_load_balancer.SslConfigurationDetails, error) {
	result := oci_load_balancer.SslConfigurationDetails{}

=== ./internal/service/load_balancer/load_balancer_backend_set_resource.go ===
func LoadBalancerBackendSetResource() *schema.Resource {
	return &schema.Resource{
func createLoadBalancerBackendSet(d *schema.ResourceData, m interface{}) error {
	sync := &LoadBalancerBackendSetResourceCrud{}
func readLoadBalancerBackendSet(d *schema.ResourceData, m interface{}) error {
	sync := &LoadBalancerBackendSetResourceCrud{}
func updateLoadBalancerBackendSet(d *schema.ResourceData, m interface{}) error {
	sync := &LoadBalancerBackendSetResourceCrud{}
func deleteLoadBalancerBackendSet(d *schema.ResourceData, m interface{}) error {
	sync := &LoadBalancerBackendSetResourceCrud{}
func (s *LoadBalancerBackendSetResourceCrud) GetMutex() *sync.Mutex {
	return lbBackendSetMutexes.GetOrCreateBackendSetMutex(s.D.Get("load_balancer_id").(string), s.D.Get("name").(string))
func (s *LoadBalancerBackendSetResourceCrud) ID() string {
	if s.WorkRequest != nil {
func (s *LoadBalancerBackendSetResourceCrud) CreatedPending() []string {
	return []string{
func (s *LoadBalancerBackendSetResourceCrud) CreatedTarget() []string {
	return []string{
func (s *LoadBalancerBackendSetResourceCrud) DeletedPending() []string {
	return []string{
func (s *LoadBalancerBackendSetResourceCrud) DeletedTarget() []string {
	return []string{
func (s *LoadBalancerBackendSetResourceCrud) Create() error {
	request := oci_load_balancer.CreateBackendSetRequest{}
func (s *LoadBalancerBackendSetResourceCrud) Get() error {
	_, stillWorking, err := loadBalancerResourceGet(s.Client, s.D, s.WorkRequest, tfresource.GetRetryPolicy(s.DisableNotFoundRetries, "load_balancer"))
func (s *LoadBalancerBackendSetResourceCrud) Update() error {
	request := oci_load_balancer.UpdateBackendSetRequest{}
func (s *LoadBalancerBackendSetResourceCrud) Delete() error {
	request := oci_load_balancer.DeleteBackendSetRequest{}
func (s *LoadBalancerBackendSetResourceCrud) SetData() error {
	if s.Res == nil {
func (s *LoadBalancerBackendSetResourceCrud) mapToBackendDetails(fieldKeyFormat string) (oci_load_balancer.BackendDetails, error) {
	result := oci_load_balancer.BackendDetails{}
func (s *LoadBalancerBackendSetResourceCrud) mapToHealthCheckerDetails(fieldKeyFormat string) (oci_load_balancer.HealthCheckerDetails, error) {
	result := oci_load_balancer.HealthCheckerDetails{}
func (s *LoadBalancerBackendSetResourceCrud) mapToLBCookieSessionPersistenceConfigurationDetails(fieldKeyFormat string) (oci_load_balancer.LbCookieSessionPersistenceConfigurationDetails, error) {
	result := oci_load_balancer.LbCookieSessionPersistenceConfigurationDetails{}
func (s *LoadBalancerBackendSetResourceCrud) mapToSSLConfigurationDetails(fieldKeyFormat string) (oci_load_balancer.SslConfigurationDetails, error) {
	result := oci_load_balancer.SslConfigurationDetails{}
func (s *LoadBalancerBackendSetResourceCrud) mapToSessionPersistenceConfigurationDetails(fieldKeyFormat string) (oci_load_balancer.SessionPersistenceConfigurationDetails, error) {
	result := oci_load_balancer.SessionPersistenceConfigurationDetails{}

=== ./internal/service/load_balancer/load_balancer_backend_sets_data_source.go ===
func LoadBalancerBackendSetsDataSource() *schema.Resource {
	return &schema.Resource{
func readLoadBalancerBackendSets(d *schema.ResourceData, m interface{}) error {
	sync := &LoadBalancerBackendSetsDataSourceCrud{}
func (s *LoadBalancerBackendSetsDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *LoadBalancerBackendSetsDataSourceCrud) Get() error {
	request := oci_load_balancer.ListBackendSetsRequest{}
func (s *LoadBalancerBackendSetsDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/load_balancer/load_balancer_load_balancer_routing_policy_resource.go ===
func LoadBalancerLoadBalancerRoutingPolicyResource() *schema.Resource {
	return &schema.Resource{
func createLoadBalancerLoadBalancerRoutingPolicy(d *schema.ResourceData, m interface{}) error {
	sync := &LoadBalancerLoadBalancerRoutingPolicyResourceCrud{}
func readLoadBalancerLoadBalancerRoutingPolicy(d *schema.ResourceData, m interface{}) error {
	sync := &LoadBalancerLoadBalancerRoutingPolicyResourceCrud{}
func updateLoadBalancerLoadBalancerRoutingPolicy(d *schema.ResourceData, m interface{}) error {
	sync := &LoadBalancerLoadBalancerRoutingPolicyResourceCrud{}
func deleteLoadBalancerLoadBalancerRoutingPolicy(d *schema.ResourceData, m interface{}) error {
	sync := &LoadBalancerLoadBalancerRoutingPolicyResourceCrud{}
func (s *LoadBalancerLoadBalancerRoutingPolicyResourceCrud) ID() string {
	if s.WorkRequest != nil {
func (s *LoadBalancerLoadBalancerRoutingPolicyResourceCrud) CreatedPending() []string {
	return []string{
func (s *LoadBalancerLoadBalancerRoutingPolicyResourceCrud) CreatedTarget() []string {
	return []string{
func (s *LoadBalancerLoadBalancerRoutingPolicyResourceCrud) DeletedPending() []string {
	return []string{
func (s *LoadBalancerLoadBalancerRoutingPolicyResourceCrud) DeletedTarget() []string {
	return []string{
func (s *LoadBalancerLoadBalancerRoutingPolicyResourceCrud) Create() error {
	request := oci_load_balancer.CreateRoutingPolicyRequest{}
func (s *LoadBalancerLoadBalancerRoutingPolicyResourceCrud) Get() error {
	_, stillWorking, err := loadBalancerResourceGet(s.Client, s.D, s.WorkRequest, tfresource.GetRetryPolicy(s.DisableNotFoundRetries, "load_balancer"))
func (s *LoadBalancerLoadBalancerRoutingPolicyResourceCrud) Update() error {
	request := oci_load_balancer.UpdateRoutingPolicyRequest{}
func (s *LoadBalancerLoadBalancerRoutingPolicyResourceCrud) Delete() error {
	request := oci_load_balancer.DeleteRoutingPolicyRequest{}
func (s *LoadBalancerLoadBalancerRoutingPolicyResourceCrud) SetData() error {
	if s.Res == nil {
func (s *LoadBalancerLoadBalancerRoutingPolicyResourceCrud) mapToAction(fieldKeyFormat string) (oci_load_balancer.Action, error) {
	var baseObject oci_load_balancer.Action
func (s *LoadBalancerLoadBalancerRoutingPolicyResourceCrud) mapToRoutingRule(fieldKeyFormat string) (oci_load_balancer.RoutingRule, error) {
	result := oci_load_balancer.RoutingRule{}

=== ./internal/service/load_balancer/load_balancer_ssl_cipher_suite_data_source.go ===
func LoadBalancerSslCipherSuiteDataSource() *schema.Resource {
	fieldMap := make(map[string]*schema.Schema)
func readSingularLoadBalancerSslCipherSuite(d *schema.ResourceData, m interface{}) error {
	sync := &LoadBalancerSslCipherSuiteDataSourceCrud{}
func (s *LoadBalancerSslCipherSuiteDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *LoadBalancerSslCipherSuiteDataSourceCrud) Get() error {
	request := oci_load_balancer.GetSSLCipherSuiteRequest{}
func (s *LoadBalancerSslCipherSuiteDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/load_balancer/load_balancer_path_route_sets_data_source.go ===
func LoadBalancerPathRouteSetsDataSource() *schema.Resource {
	return &schema.Resource{
func readLoadBalancerPathRouteSets(d *schema.ResourceData, m interface{}) error {
	sync := &LoadBalancerPathRouteSetsDataSourceCrud{}
func (s *LoadBalancerPathRouteSetsDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *LoadBalancerPathRouteSetsDataSourceCrud) Get() error {
	request := oci_load_balancer.ListPathRouteSetsRequest{}
func (s *LoadBalancerPathRouteSetsDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/load_balancer/load_balancer_certificate_resource.go ===
func LoadBalancerCertificateResource() *schema.Resource {
	return &schema.Resource{
func createLoadBalancerCertificate(d *schema.ResourceData, m interface{}) error {
	sync := &LoadBalancerCertificateResourceCrud{}
func readLoadBalancerCertificate(d *schema.ResourceData, m interface{}) error {
	sync := &LoadBalancerCertificateResourceCrud{}
func deleteLoadBalancerCertificate(d *schema.ResourceData, m interface{}) error {
	sync := &LoadBalancerCertificateResourceCrud{}
func (s *LoadBalancerCertificateResourceCrud) ID() string {
	if s.WorkRequest != nil {
func (s *LoadBalancerCertificateResourceCrud) CreatedPending() []string {
	return []string{
func (s *LoadBalancerCertificateResourceCrud) CreatedTarget() []string {
	return []string{
func (s *LoadBalancerCertificateResourceCrud) DeletedPending() []string {
	return []string{
func (s *LoadBalancerCertificateResourceCrud) DeletedTarget() []string {
	return []string{
func (s *LoadBalancerCertificateResourceCrud) Create() error {
	request := oci_load_balancer.CreateCertificateRequest{}
func (s *LoadBalancerCertificateResourceCrud) Get() error {
	_, stillWorking, err := loadBalancerResourceGet(s.Client, s.D, s.WorkRequest, tfresource.GetRetryPolicy(s.DisableNotFoundRetries, "load_balancer"))
func (s *LoadBalancerCertificateResourceCrud) Delete() error {
	request := oci_load_balancer.DeleteCertificateRequest{}
func (s *LoadBalancerCertificateResourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/load_balancer/load_balancer_ssl_cipher_suite_resource.go ===
func LoadBalancerSslCipherSuiteResource() *schema.Resource {
	return &schema.Resource{
func createLoadBalancerSslCipherSuite(d *schema.ResourceData, m interface{}) error {
	sync := &LoadBalancerSslCipherSuiteResourceCrud{}
func readLoadBalancerSslCipherSuite(d *schema.ResourceData, m interface{}) error {
	sync := &LoadBalancerSslCipherSuiteResourceCrud{}
func deleteLoadBalancerSslCipherSuite(d *schema.ResourceData, m interface{}) error {
	sync := &LoadBalancerSslCipherSuiteResourceCrud{}
func (s *LoadBalancerSslCipherSuiteResourceCrud) ID() string {
	if s.WorkRequest != nil {
func (s *LoadBalancerSslCipherSuiteResourceCrud) CreatedPending() []string {
	return []string{
func (s *LoadBalancerSslCipherSuiteResourceCrud) CreatedTarget() []string {
	return []string{
func (s *LoadBalancerSslCipherSuiteResourceCrud) DeletedPending() []string {
	return []string{
func (s *LoadBalancerSslCipherSuiteResourceCrud) DeletedTarget() []string {
	return []string{
func (s *LoadBalancerSslCipherSuiteResourceCrud) Create() error {
	request := oci_load_balancer.CreateSSLCipherSuiteRequest{}
func (s *LoadBalancerSslCipherSuiteResourceCrud) Get() error {
	_, stillWorking, err := loadBalancerResourceGet(s.Client, s.D, s.WorkRequest, tfresource.GetRetryPolicy(s.DisableNotFoundRetries, "load_balancer"))
func (s *LoadBalancerSslCipherSuiteResourceCrud) Delete() error {
	request := oci_load_balancer.DeleteSSLCipherSuiteRequest{}
func (s *LoadBalancerSslCipherSuiteResourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/load_balancer/load_balancer_backend_resource.go ===
func LoadBalancerBackendResource() *schema.Resource {
	return &schema.Resource{
func createLoadBalancerBackend(d *schema.ResourceData, m interface{}) error {
	sync := &LoadBalancerBackendResourceCrud{}
func readLoadBalancerBackend(d *schema.ResourceData, m interface{}) error {
	sync := &LoadBalancerBackendResourceCrud{}
func updateLoadBalancerBackend(d *schema.ResourceData, m interface{}) error {
	sync := &LoadBalancerBackendResourceCrud{}
func deleteLoadBalancerBackend(d *schema.ResourceData, m interface{}) error {
	sync := &LoadBalancerBackendResourceCrud{}
func (s *LoadBalancerBackendResourceCrud) GetMutex() *sync.Mutex {
	return lbBackendSetMutexes.GetOrCreateBackendSetMutex(s.D.Get("load_balancer_id").(string), s.D.Get("backendset_name").(string))
func (s *LoadBalancerBackendResourceCrud) buildID() string {
	return s.D.Get("ip_address").(string) + ":" + strconv.Itoa(s.D.Get("port").(int))
func (s *LoadBalancerBackendResourceCrud) ID() string {
	if s.WorkRequest != nil {
func (s *LoadBalancerBackendResourceCrud) CreatedPending() []string {
	return []string{
func (s *LoadBalancerBackendResourceCrud) CreatedTarget() []string {
	return []string{
func (s *LoadBalancerBackendResourceCrud) DeletedPending() []string {
	return []string{
func (s *LoadBalancerBackendResourceCrud) DeletedTarget() []string {
	return []string{
func (s *LoadBalancerBackendResourceCrud) Create() error {
	request := oci_load_balancer.CreateBackendRequest{}
func (s *LoadBalancerBackendResourceCrud) Get() error {
	_, stillWorking, err := loadBalancerResourceGet(s.Client, s.D, s.WorkRequest, tfresource.GetRetryPolicy(s.DisableNotFoundRetries, "load_balancer"))
func (s *LoadBalancerBackendResourceCrud) Update() error {
	request := oci_load_balancer.UpdateBackendRequest{}
func (s *LoadBalancerBackendResourceCrud) Delete() error {
	request := oci_load_balancer.DeleteBackendRequest{}
func (s *LoadBalancerBackendResourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/load_balancer/load_balancer_hostnames_data_source.go ===
func LoadBalancerHostnamesDataSource() *schema.Resource {
	return &schema.Resource{
func readLoadBalancerHostnames(d *schema.ResourceData, m interface{}) error {
	sync := &LoadBalancerHostnamesDataSourceCrud{}
func (s *LoadBalancerHostnamesDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *LoadBalancerHostnamesDataSourceCrud) Get() error {
	request := oci_load_balancer.ListHostnamesRequest{}
func (s *LoadBalancerHostnamesDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/load_balancer/load_balancer_load_balancer_routing_policies_data_source.go ===
func LoadBalancerLoadBalancerRoutingPoliciesDataSource() *schema.Resource {
	return &schema.Resource{
func readLoadBalancerLoadBalancerRoutingPolicies(d *schema.ResourceData, m interface{}) error {
	sync := &LoadBalancerLoadBalancerRoutingPoliciesDataSourceCrud{}
func (s *LoadBalancerLoadBalancerRoutingPoliciesDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *LoadBalancerLoadBalancerRoutingPoliciesDataSourceCrud) Get() error {
	request := oci_load_balancer.ListRoutingPoliciesRequest{}
func (s *LoadBalancerLoadBalancerRoutingPoliciesDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/load_balancer/load_balancer_rule_sets_data_source.go ===
func LoadBalancerRuleSetsDataSource() *schema.Resource {
	return &schema.Resource{
func readLoadBalancerRuleSets(d *schema.ResourceData, m interface{}) error {
	sync := &LoadBalancerRuleSetsDataSourceCrud{}
func (s *LoadBalancerRuleSetsDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *LoadBalancerRuleSetsDataSourceCrud) Get() error {
	request := oci_load_balancer.ListRuleSetsRequest{}
func (s *LoadBalancerRuleSetsDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/load_balancer/load_balancer_backend_set_health_data_source.go ===
func LoadBalancerBackendSetHealthDataSource() *schema.Resource {
	return &schema.Resource{
func readSingularLoadBalancerBackendSetHealth(d *schema.ResourceData, m interface{}) error {
	sync := &LoadBalancerBackendSetHealthDataSourceCrud{}
func (s *LoadBalancerBackendSetHealthDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *LoadBalancerBackendSetHealthDataSourceCrud) Get() error {
	request := oci_load_balancer.GetBackendSetHealthRequest{}
func (s *LoadBalancerBackendSetHealthDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/load_balancer/load_balancer_load_balancers_data_source.go ===
func LoadBalancerLoadBalancersDataSource() *schema.Resource {
	return &schema.Resource{
func readLoadBalancerLoadBalancers(d *schema.ResourceData, m interface{}) error {
	sync := &LoadBalancerLoadBalancersDataSourceCrud{}
func (s *LoadBalancerLoadBalancersDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *LoadBalancerLoadBalancersDataSourceCrud) Get() error {
	request := oci_load_balancer.ListLoadBalancersRequest{}
func (s *LoadBalancerLoadBalancersDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/load_balancer/load_balancer_load_balancer_resource.go ===
func LoadBalancerLoadBalancerResource() *schema.Resource {
	return &schema.Resource{
func createLoadBalancerLoadBalancer(d *schema.ResourceData, m interface{}) error {
	sync := &LoadBalancerLoadBalancerResourceCrud{}
func readLoadBalancerLoadBalancer(d *schema.ResourceData, m interface{}) error {
	sync := &LoadBalancerLoadBalancerResourceCrud{}
func updateLoadBalancerLoadBalancer(d *schema.ResourceData, m interface{}) error {
	sync := &LoadBalancerLoadBalancerResourceCrud{}
func deleteLoadBalancerLoadBalancer(d *schema.ResourceData, m interface{}) error {
	sync := &LoadBalancerLoadBalancerResourceCrud{}
func (s *LoadBalancerLoadBalancerResourceCrud) ID() string {
	id, workSuccess := loadBalancerResourceID(s.Res, s.WorkRequest)
func (s *LoadBalancerLoadBalancerResourceCrud) CreatedPending() []string {
	return []string{
func (s *LoadBalancerLoadBalancerResourceCrud) CreatedTarget() []string {
	return []string{
func (s *LoadBalancerLoadBalancerResourceCrud) DeletedPending() []string {
	return []string{
func (s *LoadBalancerLoadBalancerResourceCrud) DeletedTarget() []string {
	return []string{
func (s *LoadBalancerLoadBalancerResourceCrud) Create() error {
	request := oci_load_balancer.CreateLoadBalancerRequest{}
func (s *LoadBalancerLoadBalancerResourceCrud) Get() error {
	id, stillWorking, err := loadBalancerResourceGet(s.Client, s.D, s.WorkRequest, tfresource.GetRetryPolicy(s.DisableNotFoundRetries, "load_balancer"))
func (s *LoadBalancerLoadBalancerResourceCrud) Update() error {
	if compartment, ok := s.D.GetOkExists("compartment_id"); ok && s.D.HasChange("compartment_id") {
func (s *LoadBalancerLoadBalancerResourceCrud) Delete() error {
	request := oci_load_balancer.DeleteLoadBalancerRequest{}
func (s *LoadBalancerLoadBalancerResourceCrud) SetData() error {
	if s.Res == nil || s.Res.Id == nil {
func (s *LoadBalancerLoadBalancerResourceCrud) mapToReservedIP(fieldKeyFormat string) (oci_load_balancer.ReservedIp, error) {
	result := oci_load_balancer.ReservedIp{}
func (s *LoadBalancerLoadBalancerResourceCrud) mapToShapeDetails(fieldKeyFormat string) (oci_load_balancer.ShapeDetails, error) {
	result := oci_load_balancer.ShapeDetails{}
func (s *LoadBalancerLoadBalancerResourceCrud) updateCompartment(compartment interface{}) error {
	changeCompartmentRequest := oci_load_balancer.ChangeLoadBalancerCompartmentRequest{}
func (s *LoadBalancerLoadBalancerResourceCrud) updateNetworkSecurityGroups() error {
	updateNsgIdsRequest := oci_load_balancer.UpdateNetworkSecurityGroupsRequest{}
func (s *LoadBalancerLoadBalancerResourceCrud) updateShape(shape interface{}) error {
	changeShapeRequest := oci_load_balancer.UpdateLoadBalancerShapeRequest{}

=== ./internal/service/load_balancer/load_balancer_export.go ===
func processLoadBalancerListeners(ctx *tf_export.ResourceDiscoveryContext, resources []*tf_export.OCIResource) ([]*tf_export.OCIResource, error) {

func findLoadBalancerListeners(ctx *tf_export.ResourceDiscoveryContext, tfMeta *tf_export.TerraformResourceAssociation, parent *tf_export.OCIResource, resourceGraph *tf_export.TerraformResourceGraph) ([]*tf_export.OCIResource, error) {
	loadBalancerId := parent.SourceAttributes["load_balancer_id"].(string)
func processLoadBalancerBackendSets(ctx *tf_export.ResourceDiscoveryContext, resources []*tf_export.OCIResource) ([]*tf_export.OCIResource, error) {
	for _, backendSet := range resources {
func processLoadBalancerBackends(ctx *tf_export.ResourceDiscoveryContext, resources []*tf_export.OCIResource) ([]*tf_export.OCIResource, error) {
	for _, backend := range resources {
func processLoadBalancerHostnames(ctx *tf_export.ResourceDiscoveryContext, resources []*tf_export.OCIResource) ([]*tf_export.OCIResource, error) {
	for _, hostname := range resources {
func processLoadBalancerPathRouteSets(ctx *tf_export.ResourceDiscoveryContext, resources []*tf_export.OCIResource) ([]*tf_export.OCIResource, error) {
	for _, pathRouteSet := range resources {
func processLoadBalancerRoutingPolicies(ctx *tf_export.ResourceDiscoveryContext, resources []*tf_export.OCIResource) ([]*tf_export.OCIResource, error) {
	for _, routingPolicy := range resources {
func processLoadBalancerRuleSets(ctx *tf_export.ResourceDiscoveryContext, resources []*tf_export.OCIResource) ([]*tf_export.OCIResource, error) {
	for _, ruleSet := range resources {
func processLoadBalancerCertificates(ctx *tf_export.ResourceDiscoveryContext, resources []*tf_export.OCIResource) ([]*tf_export.OCIResource, error) {
	for _, certificate := range resources {
func getLoadBalancerBackendId(resource *tf_export.OCIResource) (string, error) {

func getLoadBalancerBackendSetId(resource *tf_export.OCIResource) (string, error) {

func getLoadBalancerCertificateId(resource *tf_export.OCIResource) (string, error) {

func getLoadBalancerHostnameId(resource *tf_export.OCIResource) (string, error) {

func getLoadBalancerListenerId(resource *tf_export.OCIResource) (string, error) {

func getLoadBalancerPathRouteSetId(resource *tf_export.OCIResource) (string, error) {

func getLoadBalancerLoadBalancerRoutingPolicyId(resource *tf_export.OCIResource) (string, error) {

func getLoadBalancerRuleSetId(resource *tf_export.OCIResource) (string, error) {

func getLoadBalancerSslCipherSuiteId(resource *tf_export.OCIResource) (string, error) {


=== ./internal/service/load_balancer/load_balancer_protocols_data_source.go ===
func LoadBalancerLoadBalancerProtocolsDataSource() *schema.Resource {
	return &schema.Resource{
func readLoadBalancerLoadBalancerProtocols(d *schema.ResourceData, m interface{}) error {
	sync := &LoadBalancerLoadBalancerProtocolsDataSourceCrud{}
func (s *LoadBalancerLoadBalancerProtocolsDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *LoadBalancerLoadBalancerProtocolsDataSourceCrud) Get() error {
	request := oci_load_balancer.ListProtocolsRequest{}
func (s *LoadBalancerLoadBalancerProtocolsDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/load_balancer/load_balancer_backends_data_source.go ===
func LoadBalancerBackendsDataSource() *schema.Resource {
	return &schema.Resource{
func readLoadBalancerBackends(d *schema.ResourceData, m interface{}) error {
	sync := &LoadBalancerBackendsDataSourceCrud{}
func (s *LoadBalancerBackendsDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *LoadBalancerBackendsDataSourceCrud) Get() error {
	request := oci_load_balancer.ListBackendsRequest{}
func (s *LoadBalancerBackendsDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/load_balancer/load_balancer_load_balancer_routing_policy_data_source.go ===
func LoadBalancerLoadBalancerRoutingPolicyDataSource() *schema.Resource {
	fieldMap := make(map[string]*schema.Schema)
func readSingularLoadBalancerLoadBalancerRoutingPolicy(d *schema.ResourceData, m interface{}) error {
	sync := &LoadBalancerLoadBalancerRoutingPolicyDataSourceCrud{}
func (s *LoadBalancerLoadBalancerRoutingPolicyDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *LoadBalancerLoadBalancerRoutingPolicyDataSourceCrud) Get() error {
	request := oci_load_balancer.GetRoutingPolicyRequest{}
func (s *LoadBalancerLoadBalancerRoutingPolicyDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/load_balancer/load_balancer_hostname_resource.go ===
func LoadBalancerHostnameResource() *schema.Resource {
	return &schema.Resource{
func createLoadBalancerHostname(d *schema.ResourceData, m interface{}) error {
	sync := &LoadBalancerHostnameResourceCrud{}
func readLoadBalancerHostname(d *schema.ResourceData, m interface{}) error {
	sync := &LoadBalancerHostnameResourceCrud{}
func updateLoadBalancerHostname(d *schema.ResourceData, m interface{}) error {
	sync := &LoadBalancerHostnameResourceCrud{}
func deleteLoadBalancerHostname(d *schema.ResourceData, m interface{}) error {
	sync := &LoadBalancerHostnameResourceCrud{}
func (s *LoadBalancerHostnameResourceCrud) ID() string {
	if s.WorkRequest != nil {
func (s *LoadBalancerHostnameResourceCrud) CreatedPending() []string {
	return []string{
func (s *LoadBalancerHostnameResourceCrud) CreatedTarget() []string {
	return []string{
func (s *LoadBalancerHostnameResourceCrud) DeletedPending() []string {
	return []string{
func (s *LoadBalancerHostnameResourceCrud) DeletedTarget() []string {
	return []string{
func (s *LoadBalancerHostnameResourceCrud) Create() error {
	request := oci_load_balancer.CreateHostnameRequest{}
func (s *LoadBalancerHostnameResourceCrud) Get() error {
	_, stillWorking, err := loadBalancerResourceGet(s.Client, s.D, s.WorkRequest, tfresource.GetRetryPolicy(s.DisableNotFoundRetries, "load_balancer"))
func (s *LoadBalancerHostnameResourceCrud) Update() error {
	request := oci_load_balancer.UpdateHostnameRequest{}
func (s *LoadBalancerHostnameResourceCrud) Delete() error {
	request := oci_load_balancer.DeleteHostnameRequest{}
func (s *LoadBalancerHostnameResourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/load_balancer/load_balancer_policies_data_source.go ===
func LoadBalancerLoadBalancerPoliciesDataSource() *schema.Resource {
	return &schema.Resource{
func readLoadBalancerLoadBalancerPolicies(d *schema.ResourceData, m interface{}) error {
	sync := &LoadBalancerLoadBalancerPoliciesDataSourceCrud{}
func (s *LoadBalancerLoadBalancerPoliciesDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *LoadBalancerLoadBalancerPoliciesDataSourceCrud) Get() error {
	request := oci_load_balancer.ListPoliciesRequest{}
func (s *LoadBalancerLoadBalancerPoliciesDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/load_balancer/load_balancer_rule_set_data_source.go ===
func LoadBalancerRuleSetDataSource() *schema.Resource {
	fieldMap := make(map[string]*schema.Schema)
func readSingularLoadBalancerRuleSet(d *schema.ResourceData, m interface{}) error {
	sync := &LoadBalancerRuleSetDataSourceCrud{}
func (s *LoadBalancerRuleSetDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *LoadBalancerRuleSetDataSourceCrud) Get() error {
	request := oci_load_balancer.GetRuleSetRequest{}
func (s *LoadBalancerRuleSetDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/load_balancer/load_balancer_certificates_data_source.go ===
func LoadBalancerCertificatesDataSource() *schema.Resource {
	return &schema.Resource{
func readLoadBalancerCertificates(d *schema.ResourceData, m interface{}) error {
	sync := &LoadBalancerCertificatesDataSourceCrud{}
func (s *LoadBalancerCertificatesDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *LoadBalancerCertificatesDataSourceCrud) Get() error {
	request := oci_load_balancer.ListCertificatesRequest{}
func (s *LoadBalancerCertificatesDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/load_balancer/load_balancer_path_route_set_resource.go ===
func LoadBalancerPathRouteSetResource() *schema.Resource {
	return &schema.Resource{
func createLoadBalancerPathRouteSet(d *schema.ResourceData, m interface{}) error {
	sync := &LoadBalancerPathRouteSetResourceCrud{}
func readLoadBalancerPathRouteSet(d *schema.ResourceData, m interface{}) error {
	sync := &LoadBalancerPathRouteSetResourceCrud{}
func updateLoadBalancerPathRouteSet(d *schema.ResourceData, m interface{}) error {
	sync := &LoadBalancerPathRouteSetResourceCrud{}
func deleteLoadBalancerPathRouteSet(d *schema.ResourceData, m interface{}) error {
	sync := &LoadBalancerPathRouteSetResourceCrud{}
func (s *LoadBalancerPathRouteSetResourceCrud) ID() string {
	if s.WorkRequest != nil {
func (s *LoadBalancerPathRouteSetResourceCrud) CreatedPending() []string {
	return []string{
func (s *LoadBalancerPathRouteSetResourceCrud) CreatedTarget() []string {
	return []string{
func (s *LoadBalancerPathRouteSetResourceCrud) DeletedPending() []string {
	return []string{
func (s *LoadBalancerPathRouteSetResourceCrud) DeletedTarget() []string {
	return []string{
func (s *LoadBalancerPathRouteSetResourceCrud) Create() error {
	request := oci_load_balancer.CreatePathRouteSetRequest{}
func (s *LoadBalancerPathRouteSetResourceCrud) Get() error {
	_, stillWorking, err := loadBalancerResourceGet(s.Client, s.D, s.WorkRequest, tfresource.GetRetryPolicy(s.DisableNotFoundRetries, "load_balancer"))
func (s *LoadBalancerPathRouteSetResourceCrud) Update() error {
	request := oci_load_balancer.UpdatePathRouteSetRequest{}
func (s *LoadBalancerPathRouteSetResourceCrud) Delete() error {
	request := oci_load_balancer.DeletePathRouteSetRequest{}
func (s *LoadBalancerPathRouteSetResourceCrud) SetData() error {
	if s.Res == nil {
func (s *LoadBalancerPathRouteSetResourceCrud) mapToPathMatchType(fieldKeyFormat string) (oci_load_balancer.PathMatchType, error) {
	result := oci_load_balancer.PathMatchType{}
func (s *LoadBalancerPathRouteSetResourceCrud) mapToPathRoute(fieldKeyFormat string) (oci_load_balancer.PathRoute, error) {
	result := oci_load_balancer.PathRoute{}

=== ./internal/service/load_balancer/load_balancer_listener_rules_data_source.go ===
func LoadBalancerListenerRulesDataSource() *schema.Resource {
	return &schema.Resource{
func readLoadBalancerListenerRules(d *schema.ResourceData, m interface{}) error {
	sync := &LoadBalancerListenerRulesDataSourceCrud{}
func (s *LoadBalancerListenerRulesDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *LoadBalancerListenerRulesDataSourceCrud) Get() error {
	request := oci_load_balancer.ListListenerRulesRequest{}
func (s *LoadBalancerListenerRulesDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/load_balancer/register_resource.go ===
func RegisterResource() {
	tfresource.RegisterResource("oci_load_balancer_backend", LoadBalancerBackendResource())

=== ./internal/service/generative_ai_agent/generative_ai_agent_data_source_data_source.go ===
func GenerativeAiAgentDataSourceDataSource() *schema.Resource {
	fieldMap := make(map[string]*schema.Schema)
func readSingularGenerativeAiAgentDataSource(d *schema.ResourceData, m interface{}) error {
	sync := &GenerativeAiAgentDataSourceDataSourceCrud{}
func (s *GenerativeAiAgentDataSourceDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *GenerativeAiAgentDataSourceDataSourceCrud) Get() error {
	request := oci_generative_ai_agent.GetDataSourceRequest{}
func (s *GenerativeAiAgentDataSourceDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/generative_ai_agent/generative_ai_agent_knowledge_bases_data_source.go ===
func GenerativeAiAgentKnowledgeBasesDataSource() *schema.Resource {
	return &schema.Resource{
func readGenerativeAiAgentKnowledgeBases(d *schema.ResourceData, m interface{}) error {
	sync := &GenerativeAiAgentKnowledgeBasesDataSourceCrud{}
func (s *GenerativeAiAgentKnowledgeBasesDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *GenerativeAiAgentKnowledgeBasesDataSourceCrud) Get() error {
	request := oci_generative_ai_agent.ListKnowledgeBasesRequest{}
func (s *GenerativeAiAgentKnowledgeBasesDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/generative_ai_agent/generative_ai_agent_knowledge_base_data_source.go ===
func GenerativeAiAgentKnowledgeBaseDataSource() *schema.Resource {
	fieldMap := make(map[string]*schema.Schema)
func readSingularGenerativeAiAgentKnowledgeBase(d *schema.ResourceData, m interface{}) error {
	sync := &GenerativeAiAgentKnowledgeBaseDataSourceCrud{}
func (s *GenerativeAiAgentKnowledgeBaseDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *GenerativeAiAgentKnowledgeBaseDataSourceCrud) Get() error {
	request := oci_generative_ai_agent.GetKnowledgeBaseRequest{}
func (s *GenerativeAiAgentKnowledgeBaseDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/generative_ai_agent/generative_ai_agent_knowledge_base_resource.go ===
func GenerativeAiAgentKnowledgeBaseResource() *schema.Resource {
	return &schema.Resource{
func createGenerativeAiAgentKnowledgeBase(d *schema.ResourceData, m interface{}) error {
	sync := &GenerativeAiAgentKnowledgeBaseResourceCrud{}
func readGenerativeAiAgentKnowledgeBase(d *schema.ResourceData, m interface{}) error {
	sync := &GenerativeAiAgentKnowledgeBaseResourceCrud{}
func updateGenerativeAiAgentKnowledgeBase(d *schema.ResourceData, m interface{}) error {
	sync := &GenerativeAiAgentKnowledgeBaseResourceCrud{}
func deleteGenerativeAiAgentKnowledgeBase(d *schema.ResourceData, m interface{}) error {
	sync := &GenerativeAiAgentKnowledgeBaseResourceCrud{}
func (s *GenerativeAiAgentKnowledgeBaseResourceCrud) ID() string {
	return *s.Res.Id
func (s *GenerativeAiAgentKnowledgeBaseResourceCrud) CreatedPending() []string {
	return []string{
func (s *GenerativeAiAgentKnowledgeBaseResourceCrud) CreatedTarget() []string {
	return []string{
func (s *GenerativeAiAgentKnowledgeBaseResourceCrud) DeletedPending() []string {
	return []string{
func (s *GenerativeAiAgentKnowledgeBaseResourceCrud) DeletedTarget() []string {
	return []string{
func (s *GenerativeAiAgentKnowledgeBaseResourceCrud) Create() error {
	request := oci_generative_ai_agent.CreateKnowledgeBaseRequest{}
func (s *GenerativeAiAgentKnowledgeBaseResourceCrud) getKnowledgeBaseFromWorkRequest(workId *string, retryPolicy *oci_common.RetryPolicy,
	actionTypeEnum oci_generative_ai_agent.ActionTypeEnum, timeout time.Duration) error {
func (s *GenerativeAiAgentKnowledgeBaseResourceCrud) Get() error {
	request := oci_generative_ai_agent.GetKnowledgeBaseRequest{}
func (s *GenerativeAiAgentKnowledgeBaseResourceCrud) Update() error {
	if compartment, ok := s.D.GetOkExists("compartment_id"); ok && s.D.HasChange("compartment_id") {
func (s *GenerativeAiAgentKnowledgeBaseResourceCrud) Delete() error {
	request := oci_generative_ai_agent.DeleteKnowledgeBaseRequest{}
func (s *GenerativeAiAgentKnowledgeBaseResourceCrud) SetData() error {
	if s.Res.CompartmentId != nil {
func (s *GenerativeAiAgentKnowledgeBaseResourceCrud) mapToDatabaseConnection(fieldKeyFormat string) (oci_generative_ai_agent.DatabaseConnection, error) {
	var baseObject oci_generative_ai_agent.DatabaseConnection
func (s *GenerativeAiAgentKnowledgeBaseResourceCrud) mapToDatabaseFunction(fieldKeyFormat string) (oci_generative_ai_agent.DatabaseFunction, error) {
	result := oci_generative_ai_agent.DatabaseFunction{}
func (s *GenerativeAiAgentKnowledgeBaseResourceCrud) mapToIndex(fieldKeyFormat string) (oci_generative_ai_agent.Index, error) {
	result := oci_generative_ai_agent.Index{}
func (s *GenerativeAiAgentKnowledgeBaseResourceCrud) mapToIndexConfig(fieldKeyFormat string) (oci_generative_ai_agent.IndexConfig, error) {
	var baseObject oci_generative_ai_agent.IndexConfig
func (s *GenerativeAiAgentKnowledgeBaseResourceCrud) mapToIndexSchema(fieldKeyFormat string) (oci_generative_ai_agent.IndexSchema, error) {
	result := oci_generative_ai_agent.IndexSchema{}
func (s *GenerativeAiAgentKnowledgeBaseResourceCrud) mapToSecretDetail(fieldKeyFormat string) (oci_generative_ai_agent.SecretDetail, error) {
	var baseObject oci_generative_ai_agent.SecretDetail
func (s *GenerativeAiAgentKnowledgeBaseResourceCrud) updateCompartment(compartment interface{}) error {
	changeCompartmentRequest := oci_generative_ai_agent.ChangeKnowledgeBaseCompartmentRequest{}

=== ./internal/service/generative_ai_agent/generative_ai_agent_data_ingestion_job_data_source.go ===
func GenerativeAiAgentDataIngestionJobDataSource() *schema.Resource {
	fieldMap := make(map[string]*schema.Schema)
func readSingularGenerativeAiAgentDataIngestionJob(d *schema.ResourceData, m interface{}) error {
	sync := &GenerativeAiAgentDataIngestionJobDataSourceCrud{}
func (s *GenerativeAiAgentDataIngestionJobDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *GenerativeAiAgentDataIngestionJobDataSourceCrud) Get() error {
	request := oci_generative_ai_agent.GetDataIngestionJobRequest{}
func (s *GenerativeAiAgentDataIngestionJobDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/generative_ai_agent/generative_ai_agent_agent_endpoint_data_source.go ===
func GenerativeAiAgentAgentEndpointDataSource() *schema.Resource {
	fieldMap := make(map[string]*schema.Schema)
func readSingularGenerativeAiAgentAgentEndpoint(d *schema.ResourceData, m interface{}) error {
	sync := &GenerativeAiAgentAgentEndpointDataSourceCrud{}
func (s *GenerativeAiAgentAgentEndpointDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *GenerativeAiAgentAgentEndpointDataSourceCrud) Get() error {
	request := oci_generative_ai_agent.GetAgentEndpointRequest{}
func (s *GenerativeAiAgentAgentEndpointDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/generative_ai_agent/generative_ai_agent_agent_resource.go ===
func GenerativeAiAgentAgentResource() *schema.Resource {
	return &schema.Resource{
func createGenerativeAiAgentAgent(d *schema.ResourceData, m interface{}) error {
	sync := &GenerativeAiAgentAgentResourceCrud{}
func readGenerativeAiAgentAgent(d *schema.ResourceData, m interface{}) error {
	sync := &GenerativeAiAgentAgentResourceCrud{}
func updateGenerativeAiAgentAgent(d *schema.ResourceData, m interface{}) error {
	sync := &GenerativeAiAgentAgentResourceCrud{}
func deleteGenerativeAiAgentAgent(d *schema.ResourceData, m interface{}) error {
	sync := &GenerativeAiAgentAgentResourceCrud{}
func (s *GenerativeAiAgentAgentResourceCrud) ID() string {
	return *s.Res.Id
func (s *GenerativeAiAgentAgentResourceCrud) CreatedPending() []string {
	return []string{
func (s *GenerativeAiAgentAgentResourceCrud) CreatedTarget() []string {
	return []string{
func (s *GenerativeAiAgentAgentResourceCrud) DeletedPending() []string {
	return []string{
func (s *GenerativeAiAgentAgentResourceCrud) DeletedTarget() []string {
	return []string{
func (s *GenerativeAiAgentAgentResourceCrud) Create() error {
	request := oci_generative_ai_agent.CreateAgentRequest{}
func (s *GenerativeAiAgentAgentResourceCrud) getAgentFromWorkRequest(workId *string, retryPolicy *oci_common.RetryPolicy,
	actionTypeEnum oci_generative_ai_agent.ActionTypeEnum, timeout time.Duration) error {
func (s *GenerativeAiAgentAgentResourceCrud) Get() error {
	request := oci_generative_ai_agent.GetAgentRequest{}
func (s *GenerativeAiAgentAgentResourceCrud) Update() error {
	if compartment, ok := s.D.GetOkExists("compartment_id"); ok && s.D.HasChange("compartment_id") {
func (s *GenerativeAiAgentAgentResourceCrud) Delete() error {
	request := oci_generative_ai_agent.DeleteAgentRequest{}
func (s *GenerativeAiAgentAgentResourceCrud) SetData() error {
	if s.Res.CompartmentId != nil {
func (s *GenerativeAiAgentAgentResourceCrud) updateCompartment(compartment interface{}) error {
	changeCompartmentRequest := oci_generative_ai_agent.ChangeAgentCompartmentRequest{}

=== ./internal/service/generative_ai_agent/generative_ai_agent_agent_data_source.go ===
func GenerativeAiAgentAgentDataSource() *schema.Resource {
	fieldMap := make(map[string]*schema.Schema)
func readSingularGenerativeAiAgentAgent(d *schema.ResourceData, m interface{}) error {
	sync := &GenerativeAiAgentAgentDataSourceCrud{}
func (s *GenerativeAiAgentAgentDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *GenerativeAiAgentAgentDataSourceCrud) Get() error {
	request := oci_generative_ai_agent.GetAgentRequest{}
func (s *GenerativeAiAgentAgentDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/generative_ai_agent/generative_ai_agent_data_ingestion_job_resource.go ===
func GenerativeAiAgentDataIngestionJobResource() *schema.Resource {
	return &schema.Resource{
func createGenerativeAiAgentDataIngestionJob(d *schema.ResourceData, m interface{}) error {
	sync := &GenerativeAiAgentDataIngestionJobResourceCrud{}
func readGenerativeAiAgentDataIngestionJob(d *schema.ResourceData, m interface{}) error {
	sync := &GenerativeAiAgentDataIngestionJobResourceCrud{}
func deleteGenerativeAiAgentDataIngestionJob(d *schema.ResourceData, m interface{}) error {
	sync := &GenerativeAiAgentDataIngestionJobResourceCrud{}
func (s *GenerativeAiAgentDataIngestionJobResourceCrud) ID() string {
	return *s.Res.Id
func (s *GenerativeAiAgentDataIngestionJobResourceCrud) CreatedPending() []string {
	return []string{
func (s *GenerativeAiAgentDataIngestionJobResourceCrud) CreatedTarget() []string {
	return []string{
func (s *GenerativeAiAgentDataIngestionJobResourceCrud) DeletedPending() []string {
	return []string{
func (s *GenerativeAiAgentDataIngestionJobResourceCrud) DeletedTarget() []string {
	return []string{
func (s *GenerativeAiAgentDataIngestionJobResourceCrud) Create() error {
	request := oci_generative_ai_agent.CreateDataIngestionJobRequest{}
func (s *GenerativeAiAgentDataIngestionJobResourceCrud) getDataIngestionJobFromWorkRequest(workId *string, retryPolicy *oci_common.RetryPolicy,
	actionTypeEnum oci_generative_ai_agent.ActionTypeEnum, timeout time.Duration) error {
func (s *GenerativeAiAgentDataIngestionJobResourceCrud) Get() error {
	request := oci_generative_ai_agent.GetDataIngestionJobRequest{}
func (s *GenerativeAiAgentDataIngestionJobResourceCrud) Delete() error {
	request := oci_generative_ai_agent.DeleteDataIngestionJobRequest{}
func (s *GenerativeAiAgentDataIngestionJobResourceCrud) SetData() error {
	if s.Res.CompartmentId != nil {

=== ./internal/service/generative_ai_agent/generative_ai_agent_agent_endpoints_data_source.go ===
func GenerativeAiAgentAgentEndpointsDataSource() *schema.Resource {
	return &schema.Resource{
func readGenerativeAiAgentAgentEndpoints(d *schema.ResourceData, m interface{}) error {
	sync := &GenerativeAiAgentAgentEndpointsDataSourceCrud{}
func (s *GenerativeAiAgentAgentEndpointsDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *GenerativeAiAgentAgentEndpointsDataSourceCrud) Get() error {
	request := oci_generative_ai_agent.ListAgentEndpointsRequest{}
func (s *GenerativeAiAgentAgentEndpointsDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/generative_ai_agent/generative_ai_agent_data_sources_data_source.go ===
func GenerativeAiAgentDataSourcesDataSource() *schema.Resource {
	return &schema.Resource{
func readGenerativeAiAgentDataSources(d *schema.ResourceData, m interface{}) error {
	sync := &GenerativeAiAgentDataSourcesDataSourceCrud{}
func (s *GenerativeAiAgentDataSourcesDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *GenerativeAiAgentDataSourcesDataSourceCrud) Get() error {
	request := oci_generative_ai_agent.ListDataSourcesRequest{}
func (s *GenerativeAiAgentDataSourcesDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/generative_ai_agent/generative_ai_agent_agent_endpoint_resource.go ===
func GenerativeAiAgentAgentEndpointResource() *schema.Resource {
	return &schema.Resource{
func createGenerativeAiAgentAgentEndpoint(d *schema.ResourceData, m interface{}) error {
	sync := &GenerativeAiAgentAgentEndpointResourceCrud{}
func readGenerativeAiAgentAgentEndpoint(d *schema.ResourceData, m interface{}) error {
	sync := &GenerativeAiAgentAgentEndpointResourceCrud{}
func updateGenerativeAiAgentAgentEndpoint(d *schema.ResourceData, m interface{}) error {
	sync := &GenerativeAiAgentAgentEndpointResourceCrud{}
func deleteGenerativeAiAgentAgentEndpoint(d *schema.ResourceData, m interface{}) error {
	sync := &GenerativeAiAgentAgentEndpointResourceCrud{}
func (s *GenerativeAiAgentAgentEndpointResourceCrud) ID() string {
	return *s.Res.Id
func (s *GenerativeAiAgentAgentEndpointResourceCrud) CreatedPending() []string {
	return []string{
func (s *GenerativeAiAgentAgentEndpointResourceCrud) CreatedTarget() []string {
	return []string{
func (s *GenerativeAiAgentAgentEndpointResourceCrud) DeletedPending() []string {
	return []string{
func (s *GenerativeAiAgentAgentEndpointResourceCrud) DeletedTarget() []string {
	return []string{
func (s *GenerativeAiAgentAgentEndpointResourceCrud) Create() error {
	request := oci_generative_ai_agent.CreateAgentEndpointRequest{}
func (s *GenerativeAiAgentAgentEndpointResourceCrud) getAgentEndpointFromWorkRequest(workId *string, retryPolicy *oci_common.RetryPolicy,
	actionTypeEnum oci_generative_ai_agent.ActionTypeEnum, timeout time.Duration) error {
func (s *GenerativeAiAgentAgentEndpointResourceCrud) Get() error {
	request := oci_generative_ai_agent.GetAgentEndpointRequest{}
func (s *GenerativeAiAgentAgentEndpointResourceCrud) Update() error {
	if compartment, ok := s.D.GetOkExists("compartment_id"); ok && s.D.HasChange("compartment_id") {
func (s *GenerativeAiAgentAgentEndpointResourceCrud) Delete() error {
	request := oci_generative_ai_agent.DeleteAgentEndpointRequest{}
func (s *GenerativeAiAgentAgentEndpointResourceCrud) SetData() error {
	if s.Res.AgentId != nil {
func (s *GenerativeAiAgentAgentEndpointResourceCrud) mapToContentModerationConfig(fieldKeyFormat string) (oci_generative_ai_agent.ContentModerationConfig, error) {
	result := oci_generative_ai_agent.ContentModerationConfig{}
func (s *GenerativeAiAgentAgentEndpointResourceCrud) mapToSessionConfig(fieldKeyFormat string) (oci_generative_ai_agent.SessionConfig, error) {
	result := oci_generative_ai_agent.SessionConfig{}
func (s *GenerativeAiAgentAgentEndpointResourceCrud) updateCompartment(compartment interface{}) error {
	changeCompartmentRequest := oci_generative_ai_agent.ChangeAgentEndpointCompartmentRequest{}

=== ./internal/service/generative_ai_agent/generative_ai_agent_data_ingestion_job_log_content_data_source.go ===
func GenerativeAiAgentDataIngestionJobLogContentDataSource() *schema.Resource {
	return &schema.Resource{
func readSingularGenerativeAiAgentDataIngestionJobLogContent(d *schema.ResourceData, m interface{}) error {
	sync := &GenerativeAiAgentDataIngestionJobLogContentDataSourceCrud{}
func (s *GenerativeAiAgentDataIngestionJobLogContentDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *GenerativeAiAgentDataIngestionJobLogContentDataSourceCrud) Get() error {
	request := oci_generative_ai_agent.GetDataIngestionJobLogContentRequest{}
func (s *GenerativeAiAgentDataIngestionJobLogContentDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/generative_ai_agent/generative_ai_agent_agents_data_source.go ===
func GenerativeAiAgentAgentsDataSource() *schema.Resource {
	return &schema.Resource{
func readGenerativeAiAgentAgents(d *schema.ResourceData, m interface{}) error {
	sync := &GenerativeAiAgentAgentsDataSourceCrud{}
func (s *GenerativeAiAgentAgentsDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *GenerativeAiAgentAgentsDataSourceCrud) Get() error {
	request := oci_generative_ai_agent.ListAgentsRequest{}
func (s *GenerativeAiAgentAgentsDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/generative_ai_agent/generative_ai_agent_data_source_resource.go ===
func GenerativeAiAgentDataSourceResource() *schema.Resource {
	return &schema.Resource{
func createGenerativeAiAgentDataSource(d *schema.ResourceData, m interface{}) error {
	sync := &GenerativeAiAgentDataSourceResourceCrud{}
func readGenerativeAiAgentDataSource(d *schema.ResourceData, m interface{}) error {
	sync := &GenerativeAiAgentDataSourceResourceCrud{}
func updateGenerativeAiAgentDataSource(d *schema.ResourceData, m interface{}) error {
	sync := &GenerativeAiAgentDataSourceResourceCrud{}
func deleteGenerativeAiAgentDataSource(d *schema.ResourceData, m interface{}) error {
	sync := &GenerativeAiAgentDataSourceResourceCrud{}
func (s *GenerativeAiAgentDataSourceResourceCrud) ID() string {
	return *s.Res.Id
func (s *GenerativeAiAgentDataSourceResourceCrud) CreatedPending() []string {
	return []string{
func (s *GenerativeAiAgentDataSourceResourceCrud) CreatedTarget() []string {
	return []string{
func (s *GenerativeAiAgentDataSourceResourceCrud) DeletedPending() []string {
	return []string{
func (s *GenerativeAiAgentDataSourceResourceCrud) DeletedTarget() []string {
	return []string{
func (s *GenerativeAiAgentDataSourceResourceCrud) Create() error {
	request := oci_generative_ai_agent.CreateDataSourceRequest{}
func (s *GenerativeAiAgentDataSourceResourceCrud) getDataSourceFromWorkRequest(workId *string, retryPolicy *oci_common.RetryPolicy,
	actionTypeEnum oci_generative_ai_agent.ActionTypeEnum, timeout time.Duration) error {
func getErrorFromGenerativeAiAgentDataSourceWorkRequest(client *oci_generative_ai_agent.GenerativeAiAgentClient, workId *string, retryPolicy *oci_common.RetryPolicy, entityType string, action oci_generative_ai_agent.ActionTypeEnum) error {
	response, err := client.ListWorkRequestErrors(context.Background(),
func (s *GenerativeAiAgentDataSourceResourceCrud) Get() error {
	request := oci_generative_ai_agent.GetDataSourceRequest{}
func (s *GenerativeAiAgentDataSourceResourceCrud) Update() error {
	request := oci_generative_ai_agent.UpdateDataSourceRequest{}
func (s *GenerativeAiAgentDataSourceResourceCrud) Delete() error {
	request := oci_generative_ai_agent.DeleteDataSourceRequest{}
func (s *GenerativeAiAgentDataSourceResourceCrud) SetData() error {
	if s.Res.CompartmentId != nil {
func (s *GenerativeAiAgentDataSourceResourceCrud) mapToDataSourceConfig(fieldKeyFormat string) (oci_generative_ai_agent.DataSourceConfig, error) {
	var baseObject oci_generative_ai_agent.DataSourceConfig
func DataSourceConfigToMap(obj *oci_generative_ai_agent.DataSourceConfig) map[string]interface{} {
	result := map[string]interface{}{}
func DataSourceSummaryToMap(obj oci_generative_ai_agent.DataSourceSummary) map[string]interface{} {
	result := map[string]interface{}{}
func (s *GenerativeAiAgentDataSourceResourceCrud) mapToObjectStoragePrefix(fieldKeyFormat string) (oci_generative_ai_agent.ObjectStoragePrefix, error) {
	result := oci_generative_ai_agent.ObjectStoragePrefix{}

=== ./internal/service/generative_ai_agent/register_resource.go ===
func RegisterResource() {
	tfresource.RegisterResource("oci_generative_ai_agent_agent", GenerativeAiAgentAgentResource())

=== ./internal/service/generative_ai_agent/generative_ai_agent_data_ingestion_jobs_data_source.go ===
func GenerativeAiAgentDataIngestionJobsDataSource() *schema.Resource {
	return &schema.Resource{
func readGenerativeAiAgentDataIngestionJobs(d *schema.ResourceData, m interface{}) error {
	sync := &GenerativeAiAgentDataIngestionJobsDataSourceCrud{}
func (s *GenerativeAiAgentDataIngestionJobsDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *GenerativeAiAgentDataIngestionJobsDataSourceCrud) Get() error {
	request := oci_generative_ai_agent.ListDataIngestionJobsRequest{}
func (s *GenerativeAiAgentDataIngestionJobsDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/functions/functions_pbf_listing_data_source.go ===
func FunctionsPbfListingDataSource() *schema.Resource {
	return &schema.Resource{
func readSingularFunctionsPbfListing(d *schema.ResourceData, m interface{}) error {
	sync := &FunctionsPbfListingDataSourceCrud{}
func (s *FunctionsPbfListingDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *FunctionsPbfListingDataSourceCrud) Get() error {
	request := oci_functions.GetPbfListingRequest{}
func (s *FunctionsPbfListingDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/functions/functions_pbf_listing_version_data_source.go ===
func FunctionsPbfListingVersionDataSource() *schema.Resource {
	return &schema.Resource{
func readSingularFunctionsPbfListingVersion(d *schema.ResourceData, m interface{}) error {
	sync := &FunctionsPbfListingVersionDataSourceCrud{}
func (s *FunctionsPbfListingVersionDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *FunctionsPbfListingVersionDataSourceCrud) Get() error {
	request := oci_functions.GetPbfListingVersionRequest{}
func (s *FunctionsPbfListingVersionDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/functions/functions_functions_data_source.go ===
func FunctionsFunctionsDataSource() *schema.Resource {
	return &schema.Resource{
func readFunctionsFunctions(d *schema.ResourceData, m interface{}) error {
	sync := &FunctionsFunctionsDataSourceCrud{}
func (s *FunctionsFunctionsDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *FunctionsFunctionsDataSourceCrud) Get() error {
	request := oci_functions.ListFunctionsRequest{}
func (s *FunctionsFunctionsDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/functions/functions_application_data_source.go ===
func FunctionsApplicationDataSource() *schema.Resource {
	fieldMap := make(map[string]*schema.Schema)
func readSingularFunctionsApplication(d *schema.ResourceData, m interface{}) error {
	sync := &FunctionsApplicationDataSourceCrud{}
func (s *FunctionsApplicationDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *FunctionsApplicationDataSourceCrud) Get() error {
	request := oci_functions.GetApplicationRequest{}
func (s *FunctionsApplicationDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/functions/functions_pbf_listing_versions_data_source.go ===
func FunctionsPbfListingVersionsDataSource() *schema.Resource {
	return &schema.Resource{
func readFunctionsPbfListingVersions(d *schema.ResourceData, m interface{}) error {
	sync := &FunctionsPbfListingVersionsDataSourceCrud{}
func (s *FunctionsPbfListingVersionsDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *FunctionsPbfListingVersionsDataSourceCrud) Get() error {
	request := oci_functions.ListPbfListingVersionsRequest{}
func (s *FunctionsPbfListingVersionsDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/functions/functions_applications_data_source.go ===
func FunctionsApplicationsDataSource() *schema.Resource {
	return &schema.Resource{
func readFunctionsApplications(d *schema.ResourceData, m interface{}) error {
	sync := &FunctionsApplicationsDataSourceCrud{}
func (s *FunctionsApplicationsDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *FunctionsApplicationsDataSourceCrud) Get() error {
	request := oci_functions.ListApplicationsRequest{}
func (s *FunctionsApplicationsDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/functions/functions_function_resource.go ===
func FunctionsFunctionResource() *schema.Resource {
	return &schema.Resource{
func isSourceTypePbf(d *schema.ResourceDiff) bool {
	fieldKeyFormat := fmt.Sprintf("%s.%d.%%s", "source_details", 0)
func createFunctionsFunction(d *schema.ResourceData, m interface{}) error {
	sync := &FunctionsFunctionResourceCrud{}
func readFunctionsFunction(d *schema.ResourceData, m interface{}) error {
	sync := &FunctionsFunctionResourceCrud{}
func updateFunctionsFunction(d *schema.ResourceData, m interface{}) error {
	sync := &FunctionsFunctionResourceCrud{}
func deleteFunctionsFunction(d *schema.ResourceData, m interface{}) error {
	sync := &FunctionsFunctionResourceCrud{}
func (s *FunctionsFunctionResourceCrud) ID() string {
	return *s.Res.Id
func (s *FunctionsFunctionResourceCrud) CreatedPending() []string {
	return []string{
func (s *FunctionsFunctionResourceCrud) CreatedTarget() []string {
	return []string{
func (s *FunctionsFunctionResourceCrud) DeletedPending() []string {
	return []string{
func (s *FunctionsFunctionResourceCrud) DeletedTarget() []string {
	return []string{
func (s *FunctionsFunctionResourceCrud) Create() error {
	request := oci_functions.CreateFunctionRequest{}
func (s *FunctionsFunctionResourceCrud) Get() error {
	request := oci_functions.GetFunctionRequest{}
func (s *FunctionsFunctionResourceCrud) Update() error {
	request := oci_functions.UpdateFunctionRequest{}
func (s *FunctionsFunctionResourceCrud) Delete() error {
	request := oci_functions.DeleteFunctionRequest{}
func (s *FunctionsFunctionResourceCrud) SetData() error {
	if s.Res.ApplicationId != nil {
func (s *FunctionsFunctionResourceCrud) mapToFunctionProvisionedConcurrencyConfig(fieldKeyFormat string) (oci_functions.FunctionProvisionedConcurrencyConfig, error) {
	var baseObject oci_functions.FunctionProvisionedConcurrencyConfig
func (s *FunctionsFunctionResourceCrud) mapToFunctionSourceDetails(fieldKeyFormat string) (oci_functions.FunctionSourceDetails, error) {
	var baseObject oci_functions.FunctionSourceDetails
func (s *FunctionsFunctionResourceCrud) mapToFunctionTraceConfig(fieldKeyFormat string) (oci_functions.FunctionTraceConfig, error) {
	result := oci_functions.FunctionTraceConfig{}

=== ./internal/service/functions/functions_application_resource.go ===
func FunctionsApplicationResource() *schema.Resource {
	return &schema.Resource{
func createFunctionsApplication(d *schema.ResourceData, m interface{}) error {
	sync := &FunctionsApplicationResourceCrud{}
func readFunctionsApplication(d *schema.ResourceData, m interface{}) error {
	sync := &FunctionsApplicationResourceCrud{}
func updateFunctionsApplication(d *schema.ResourceData, m interface{}) error {
	sync := &FunctionsApplicationResourceCrud{}
func deleteFunctionsApplication(d *schema.ResourceData, m interface{}) error {
	sync := &FunctionsApplicationResourceCrud{}
func (s *FunctionsApplicationResourceCrud) ID() string {
	return *s.Res.Id
func (s *FunctionsApplicationResourceCrud) CreatedPending() []string {
	return []string{
func (s *FunctionsApplicationResourceCrud) CreatedTarget() []string {
	return []string{
func (s *FunctionsApplicationResourceCrud) DeletedPending() []string {
	return []string{
func (s *FunctionsApplicationResourceCrud) DeletedTarget() []string {
	return []string{
func (s *FunctionsApplicationResourceCrud) Create() error {
	request := oci_functions.CreateApplicationRequest{}
func (s *FunctionsApplicationResourceCrud) Get() error {
	request := oci_functions.GetApplicationRequest{}
func (s *FunctionsApplicationResourceCrud) Update() error {
	if compartment, ok := s.D.GetOkExists("compartment_id"); ok && s.D.HasChange("compartment_id") {
func (s *FunctionsApplicationResourceCrud) Delete() error {
	request := oci_functions.DeleteApplicationRequest{}
func (s *FunctionsApplicationResourceCrud) SetData() error {
	if s.Res.CompartmentId != nil {
func (s *FunctionsApplicationResourceCrud) mapToApplicationTraceConfig(fieldKeyFormat string) (oci_functions.ApplicationTraceConfig, error) {
	result := oci_functions.ApplicationTraceConfig{}
func (s *FunctionsApplicationResourceCrud) mapToImagePolicyConfig(fieldKeyFormat string) (oci_functions.ImagePolicyConfig, error) {
	result := oci_functions.ImagePolicyConfig{}
func (s *FunctionsApplicationResourceCrud) mapToKeyDetails(fieldKeyFormat string) (oci_functions.KeyDetails, error) {
	result := oci_functions.KeyDetails{}
func (s *FunctionsApplicationResourceCrud) updateCompartment(compartment interface{}) error {
	changeCompartmentRequest := oci_functions.ChangeApplicationCompartmentRequest{}
func (s *FunctionsApplicationResourceCrud) ExtraWaitPostDelete() time.Duration {
	if httpreplay.ShouldRetryImmediately() {

=== ./internal/service/functions/functions_invoke_function_resource.go ===
func FunctionsInvokeFunctionResource() *schema.Resource {
	return &schema.Resource{
func createFunctionsInvokeFunction(d *schema.ResourceData, m interface{}) error {
	sync := &FunctionsInvokeFunctionResourceCrud{}
func (s *FunctionsInvokeFunctionResourceCrud) getInvokeEndPoint(m interface{}) (string, error) {
	functionsManagementClient := m.(*client.OracleClients).FunctionsManagementClient()
func readFunctionsInvokeFunction(d *schema.ResourceData, m interface{}) error {
	return nil
func deleteFunctionsInvokeFunction(d *schema.ResourceData, m interface{}) error {
	return nil
func (s *FunctionsInvokeFunctionResourceCrud) ID() string {
	return tfresource.Timestamp()
func (s *FunctionsInvokeFunctionResourceCrud) Create() error {
	request := oci_functions.InvokeFunctionRequest{}
func (s *FunctionsInvokeFunctionResourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/functions/functions_function_data_source.go ===
func FunctionsFunctionDataSource() *schema.Resource {
	fieldMap := make(map[string]*schema.Schema)
func readSingularFunctionsFunction(d *schema.ResourceData, m interface{}) error {
	sync := &FunctionsFunctionDataSourceCrud{}
func (s *FunctionsFunctionDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *FunctionsFunctionDataSourceCrud) Get() error {
	request := oci_functions.GetFunctionRequest{}
func (s *FunctionsFunctionDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/functions/functions_pbf_listings_data_source.go ===
func FunctionsPbfListingsDataSource() *schema.Resource {
	return &schema.Resource{
func readFunctionsPbfListings(d *schema.ResourceData, m interface{}) error {
	sync := &FunctionsPbfListingsDataSourceCrud{}
func (s *FunctionsPbfListingsDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *FunctionsPbfListingsDataSourceCrud) Get() error {
	request := oci_functions.ListPbfListingsRequest{}
func (s *FunctionsPbfListingsDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/functions/functions_pbf_listing_triggers_data_source.go ===
func FunctionsPbfListingTriggersDataSource() *schema.Resource {
	return &schema.Resource{
func readFunctionsPbfListingTriggers(d *schema.ResourceData, m interface{}) error {
	sync := &FunctionsPbfListingTriggersDataSourceCrud{}
func (s *FunctionsPbfListingTriggersDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *FunctionsPbfListingTriggersDataSourceCrud) Get() error {
	request := oci_functions.ListTriggersRequest{}
func (s *FunctionsPbfListingTriggersDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/functions/register_resource.go ===
func RegisterResource() {
	tfresource.RegisterResource("oci_functions_application", FunctionsApplicationResource())

=== ./internal/service/nosql/nosql_table_resource.go ===
func NosqlTableResource() *schema.Resource {
	return &schema.Resource{
func createNosqlTable(d *schema.ResourceData, m interface{}) error {
	sync := &NosqlTableResourceCrud{}
func readNosqlTable(d *schema.ResourceData, m interface{}) error {
	sync := &NosqlTableResourceCrud{}
func updateNosqlTable(d *schema.ResourceData, m interface{}) error {
	sync := &NosqlTableResourceCrud{}
func deleteNosqlTable(d *schema.ResourceData, m interface{}) error {
	sync := &NosqlTableResourceCrud{}
func (s *NosqlTableResourceCrud) ID() string {
	return *s.Res.Id
func (s *NosqlTableResourceCrud) CreatedPending() []string {
	return []string{
func (s *NosqlTableResourceCrud) CreatedTarget() []string {
	return []string{
func (s *NosqlTableResourceCrud) DeletedPending() []string {
	return []string{
func (s *NosqlTableResourceCrud) DeletedTarget() []string {
	return []string{
func (s *NosqlTableResourceCrud) Create() error {
	request := oci_nosql.CreateTableRequest{}
func (s *NosqlTableResourceCrud) getTableFromWorkRequest(workId *string, retryPolicy *oci_common.RetryPolicy,
	actionTypeEnum oci_nosql.WorkRequestResourceActionTypeEnum, timeout time.Duration) error {
func tableWaitForWorkRequest(wId *string, entityType string, action oci_nosql.WorkRequestResourceActionTypeEnum,
	timeout time.Duration, disableFoundRetries bool, client *oci_nosql.NosqlClient) (*string, error) {
func getErrorFromNosqlTableWorkRequest(client *oci_nosql.NosqlClient, workId *string, retryPolicy *oci_common.RetryPolicy, entityType string, action oci_nosql.WorkRequestResourceActionTypeEnum) error {
	response, err := client.ListWorkRequestErrors(context.Background(),
func (s *NosqlTableResourceCrud) Get() error {
	request := oci_nosql.GetTableRequest{}
func (s *NosqlTableResourceCrud) Update() error {
	if _, ok := s.D.GetOkExists("compartment_id"); ok && s.D.HasChange("compartment_id") {
func sendUpdateRequest(s *NosqlTableResourceCrud, request oci_nosql.UpdateTableRequest) error {
	response, err := s.Client.UpdateTable(context.Background(), request)
func (s *NosqlTableResourceCrud) Delete() error {
	request := oci_nosql.DeleteTableRequest{}
func (s *NosqlTableResourceCrud) SetData() error {
	if s.Res.CompartmentId != nil {
func (s *NosqlTableResourceCrud) mapToTableLimits(fieldKeyFormat string) (oci_nosql.TableLimits, error) {
	result := oci_nosql.TableLimits{}
func (s *NosqlTableResourceCrud) updateCompartment(fromCompartmentId, toCompartmentId string) error {
	changeCompartmentRequest := oci_nosql.ChangeTableCompartmentRequest{}
func tableLimitsSuppressFunction(k string, old string, new string, d *schema.ResourceData) bool {
	fieldKeyFormat := fmt.Sprintf("%s.%d.%%s", "table_limits", 0)

=== ./internal/service/nosql/nosql_table_replica_resource.go ===
func NosqlTableReplicaResource() *schema.Resource {
	return &schema.Resource{
func createNosqlTableReplica(d *schema.ResourceData, m interface{}) error {
	sync := &NosqlTableReplicaResourceCrud{}
func readNosqlTableReplica(d *schema.ResourceData, m interface{}) error {
	sync := &NosqlTableReplicaResourceCrud{}
func deleteNosqlTableReplica(d *schema.ResourceData, m interface{}) error {
	sync := &NosqlTableReplicaResourceCrud{}
func (s *NosqlTableReplicaResourceCrud) ID() string {
	return *s.Res.Region
func (s *NosqlTableReplicaResourceCrud) Create() error {
	request := oci_nosql.CreateReplicaRequest{}
func (s *NosqlTableReplicaResourceCrud) getTableReplicaFromWorkRequest(workId *string, retryPolicy *oci_common.RetryPolicy,
	actionTypeEnum oci_nosql.WorkRequestResourceActionTypeEnum, timeout time.Duration) error {
func tableReplicaWaitForWorkRequest(wId *string, entityType string, action oci_nosql.WorkRequestResourceActionTypeEnum,
	timeout time.Duration, disableFoundRetries bool, client *oci_nosql.NosqlClient) (*string, error) {
func getErrorFromNosqlTableReplicaWorkRequest(client *oci_nosql.NosqlClient, workId *string, retryPolicy *oci_common.RetryPolicy, entityType string, action oci_nosql.WorkRequestResourceActionTypeEnum) error {
	response, err := client.ListWorkRequestErrors(context.Background(),
func (s *NosqlTableReplicaResourceCrud) Get() error {
	request := oci_nosql.GetTableRequest{}
func (s *NosqlTableReplicaResourceCrud) Delete() error {
	request := oci_nosql.DeleteReplicaRequest{}
func (s *NosqlTableReplicaResourceCrud) SetData() error {
	region, tableNameOrId, err := parseTableReplicaCompositeId(s.D.Id())
func anyChangeSuppressFunction(k string, old string, new string, d *schema.ResourceData) bool {
	if old == "" && new != "" {

=== ./internal/service/nosql/nosql_tables_data_source.go ===
func NosqlTablesDataSource() *schema.Resource {
	return &schema.Resource{
func readNosqlTables(d *schema.ResourceData, m interface{}) error {
	sync := &NosqlTablesDataSourceCrud{}
func (s *NosqlTablesDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *NosqlTablesDataSourceCrud) Get() error {
	request := oci_nosql.ListTablesRequest{}
func (s *NosqlTablesDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/nosql/nosql_index_resource.go ===
func NosqlIndexResource() *schema.Resource {
	return &schema.Resource{
func createNosqlIndex(d *schema.ResourceData, m interface{}) error {
	sync := &NosqlIndexResourceCrud{}
func readNosqlIndex(d *schema.ResourceData, m interface{}) error {
	sync := &NosqlIndexResourceCrud{}
func deleteNosqlIndex(d *schema.ResourceData, m interface{}) error {
	sync := &NosqlIndexResourceCrud{}
func (s *NosqlIndexResourceCrud) ID() string {
	return *s.Res.Name
func (s *NosqlIndexResourceCrud) CreatedPending() []string {
	return []string{
func (s *NosqlIndexResourceCrud) CreatedTarget() []string {
	return []string{
func (s *NosqlIndexResourceCrud) DeletedPending() []string {
	return []string{
func (s *NosqlIndexResourceCrud) DeletedTarget() []string {
	return []string{
func (s *NosqlIndexResourceCrud) Create() error {
	request := oci_nosql.CreateIndexRequest{}
func (s *NosqlIndexResourceCrud) getIndexFromWorkRequest(workId *string, retryPolicy *oci_common.RetryPolicy,
	actionTypeEnum oci_nosql.WorkRequestResourceActionTypeEnum, timeout time.Duration) error {
func indexWaitForWorkRequest(wId *string, entityType string, action oci_nosql.WorkRequestResourceActionTypeEnum,
	timeout time.Duration, disableFoundRetries bool, client *oci_nosql.NosqlClient) (*string, error) {
func getErrorFromNosqlIndexWorkRequest(client *oci_nosql.NosqlClient, workId *string, retryPolicy *oci_common.RetryPolicy, entityType string, action oci_nosql.WorkRequestResourceActionTypeEnum) error {
	response, err := client.ListWorkRequestErrors(context.Background(),
func (s *NosqlIndexResourceCrud) Get() error {
	request := oci_nosql.GetIndexRequest{}
func (s *NosqlIndexResourceCrud) Delete() error {
	request := oci_nosql.DeleteIndexRequest{}
func (s *NosqlIndexResourceCrud) SetData() error {

func (s *NosqlIndexResourceCrud) mapToIndexKey(fieldKeyFormat string) (oci_nosql.IndexKey, error) {
	result := oci_nosql.IndexKey{}

=== ./internal/service/nosql/nosql_indexes_data_source.go ===
func NosqlIndexesDataSource() *schema.Resource {
	return &schema.Resource{
func readNosqlIndexes(d *schema.ResourceData, m interface{}) error {
	sync := &NosqlIndexesDataSourceCrud{}
func (s *NosqlIndexesDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *NosqlIndexesDataSourceCrud) Get() error {
	request := oci_nosql.ListIndexesRequest{}
func (s *NosqlIndexesDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/nosql/nosql_export.go ===
func processNosqlIndex(ctx *tf_export.ResourceDiscoveryContext, resources []*tf_export.OCIResource) ([]*tf_export.OCIResource, error) {
	for _, index := range resources {
func getNosqlIndexId(resource *tf_export.OCIResource) (string, error) {
	indexName, ok := resource.SourceAttributes["name"].(string)

=== ./internal/service/nosql/nosql_index_data_source.go ===
func NosqlIndexDataSource() *schema.Resource {
	fieldMap := make(map[string]*schema.Schema)
func readSingularNosqlIndex(d *schema.ResourceData, m interface{}) error {
	sync := &NosqlIndexDataSourceCrud{}
func (s *NosqlIndexDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *NosqlIndexDataSourceCrud) Get() error {
	request := oci_nosql.GetIndexRequest{}
func (s *NosqlIndexDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/nosql/register_resource.go ===
func RegisterResource() {
	tfresource.RegisterResource("oci_nosql_index", NosqlIndexResource())

=== ./internal/service/nosql/nosql_table_data_source.go ===
func NosqlTableDataSource() *schema.Resource {
	fieldMap := make(map[string]*schema.Schema)
func readSingularNosqlTable(d *schema.ResourceData, m interface{}) error {
	sync := &NosqlTableDataSourceCrud{}
func (s *NosqlTableDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *NosqlTableDataSourceCrud) Get() error {
	request := oci_nosql.GetTableRequest{}
func (s *NosqlTableDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/analytics/analytics_analytics_instance_private_access_channel_data_source.go ===
func AnalyticsAnalyticsInstancePrivateAccessChannelDataSource() *schema.Resource {
	fieldMap := make(map[string]*schema.Schema)
func readSingularAnalyticsAnalyticsInstancePrivateAccessChannel(d *schema.ResourceData, m interface{}) error {
	sync := &AnalyticsAnalyticsInstancePrivateAccessChannelDataSourceCrud{}
func (s *AnalyticsAnalyticsInstancePrivateAccessChannelDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *AnalyticsAnalyticsInstancePrivateAccessChannelDataSourceCrud) Get() error {
	request := oci_analytics.GetPrivateAccessChannelRequest{}
func (s *AnalyticsAnalyticsInstancePrivateAccessChannelDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/analytics/analytics_analytics_instances_data_source.go ===
func AnalyticsAnalyticsInstancesDataSource() *schema.Resource {
	return &schema.Resource{
func readAnalyticsAnalyticsInstances(d *schema.ResourceData, m interface{}) error {
	sync := &AnalyticsAnalyticsInstancesDataSourceCrud{}
func (s *AnalyticsAnalyticsInstancesDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *AnalyticsAnalyticsInstancesDataSourceCrud) Get() error {
	request := oci_analytics.ListAnalyticsInstancesRequest{}
func (s *AnalyticsAnalyticsInstancesDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/analytics/analytics_analytics_instance_resource.go ===
func AnalyticsAnalyticsInstanceResource() *schema.Resource {
	return &schema.Resource{
func createAnalyticsAnalyticsInstance(d *schema.ResourceData, m interface{}) error {
	sync := &AnalyticsAnalyticsInstanceResourceCrud{}
func (s *AnalyticsAnalyticsInstanceResourceCrud) SetKmsKey(kmsKeyId *string) error {
	request := oci_analytics.SetKmsKeyRequest{}
func readAnalyticsAnalyticsInstance(d *schema.ResourceData, m interface{}) error {
	sync := &AnalyticsAnalyticsInstanceResourceCrud{}
func updateAnalyticsAnalyticsInstance(d *schema.ResourceData, m interface{}) error {
	sync := &AnalyticsAnalyticsInstanceResourceCrud{}
func deleteAnalyticsAnalyticsInstance(d *schema.ResourceData, m interface{}) error {
	sync := &AnalyticsAnalyticsInstanceResourceCrud{}
func (s *AnalyticsAnalyticsInstanceResourceCrud) ID() string {
	return *s.Res.Id
func (s *AnalyticsAnalyticsInstanceResourceCrud) CreatedPending() []string {
	return []string{
func (s *AnalyticsAnalyticsInstanceResourceCrud) CreatedTarget() []string {
	return []string{
func (s *AnalyticsAnalyticsInstanceResourceCrud) DeletedPending() []string {
	return []string{
func (s *AnalyticsAnalyticsInstanceResourceCrud) DeletedTarget() []string {
	return []string{
func (s *AnalyticsAnalyticsInstanceResourceCrud) Create() error {
	request := oci_analytics.CreateAnalyticsInstanceRequest{}
func (s *AnalyticsAnalyticsInstanceResourceCrud) getAnalyticsInstanceFromWorkRequest(workId *string, retryPolicy *oci_common.RetryPolicy,
	actionTypeEnum oci_analytics.WorkRequestActionResultEnum, timeout time.Duration) error {
func (s *AnalyticsAnalyticsInstanceResourceCrud) Get() error {
	request := oci_analytics.GetAnalyticsInstanceRequest{}
func (s *AnalyticsAnalyticsInstanceResourceCrud) Update() error {
	if compartment, ok := s.D.GetOkExists("compartment_id"); ok && s.D.HasChange("compartment_id") {
func (s *AnalyticsAnalyticsInstanceResourceCrud) Delete() error {
	request := oci_analytics.DeleteAnalyticsInstanceRequest{}
func (s *AnalyticsAnalyticsInstanceResourceCrud) SetData() error {
	if s.Res.Capacity != nil {
func (s *AnalyticsAnalyticsInstanceResourceCrud) StartAnalyticsInstance() error {
	request := oci_analytics.StartAnalyticsInstanceRequest{}
func (s *AnalyticsAnalyticsInstanceResourceCrud) StopAnalyticsInstance() error {
	request := oci_analytics.StopAnalyticsInstanceRequest{}
func (s *AnalyticsAnalyticsInstanceResourceCrud) mapToCapacity(fieldKeyFormat string) (oci_analytics.Capacity, error) {
	result := oci_analytics.Capacity{}
func (s *AnalyticsAnalyticsInstanceResourceCrud) hasNEPChanged(fieldKeyFormat string) (bool, error) {
	var hasChange bool
func (s *AnalyticsAnalyticsInstanceResourceCrud) mapToNetworkEndpointDetails(fieldKeyFormat string) (oci_analytics.NetworkEndpointDetails, error) {
	var baseObject oci_analytics.NetworkEndpointDetails
func (s *AnalyticsAnalyticsInstanceResourceCrud) mapToVirtualCloudNetwork(fieldKeyFormat string) (oci_analytics.VirtualCloudNetwork, error) {
	result := oci_analytics.VirtualCloudNetwork{}
func (s *AnalyticsAnalyticsInstanceResourceCrud) updateCompartment(compartment interface{}) error {
	changeCompartmentRequest := oci_analytics.ChangeAnalyticsInstanceCompartmentRequest{}
func (s *AnalyticsAnalyticsInstanceResourceCrud) updateNetworkEndpoint(networkEndpointDetails oci_analytics.NetworkEndpointDetails) error {


=== ./internal/service/analytics/analytics_analytics_instance_vanity_url_resource.go ===
func AnalyticsAnalyticsInstanceVanityUrlResource() *schema.Resource {
	return &schema.Resource{
func createAnalyticsAnalyticsInstanceVanityUrl(d *schema.ResourceData, m interface{}) error {
	sync := &AnalyticsAnalyticsInstanceVanityUrlResourceCrud{}
func readAnalyticsAnalyticsInstanceVanityUrl(d *schema.ResourceData, m interface{}) error {
	sync := &AnalyticsAnalyticsInstanceVanityUrlResourceCrud{}
func updateAnalyticsAnalyticsInstanceVanityUrl(d *schema.ResourceData, m interface{}) error {
	sync := &AnalyticsAnalyticsInstanceVanityUrlResourceCrud{}
func deleteAnalyticsAnalyticsInstanceVanityUrl(d *schema.ResourceData, m interface{}) error {
	sync := &AnalyticsAnalyticsInstanceVanityUrlResourceCrud{}
func (s *AnalyticsAnalyticsInstanceVanityUrlResourceCrud) ID() string {
	if s.WorkRequest != nil {
func (s *AnalyticsAnalyticsInstanceVanityUrlResourceCrud) Create() error {
	request := oci_analytics.CreateVanityUrlRequest{}
func (s *AnalyticsAnalyticsInstanceVanityUrlResourceCrud) getAnalyticsInstanceVanityUrlFromWorkRequest(workId *string, retryPolicy *oci_common.RetryPolicy,
	actionTypeEnum oci_analytics.WorkRequestActionResultEnum, timeout time.Duration) error {
func (s *AnalyticsAnalyticsInstanceVanityUrlResourceCrud) Get() error {
	analyticsInstanceId, vanityUrlKey, err := parseAnalyticsInstanceVanityUrlCompositeId(s.D.Id())
func (s *AnalyticsAnalyticsInstanceVanityUrlResourceCrud) Update() error {
	request := oci_analytics.UpdateVanityUrlRequest{}
func (s *AnalyticsAnalyticsInstanceVanityUrlResourceCrud) Delete() error {
	request := oci_analytics.DeleteVanityUrlRequest{}
func (s *AnalyticsAnalyticsInstanceVanityUrlResourceCrud) SetData() error {
	analyticsInstanceId, _, err := parseAnalyticsInstanceVanityUrlCompositeId(s.D.Id())

=== ./internal/service/analytics/analytics_analytics_instance_private_access_channel_resource.go ===
func AnalyticsAnalyticsInstancePrivateAccessChannelResource() *schema.Resource {
	return &schema.Resource{
func createAnalyticsAnalyticsInstancePrivateAccessChannel(d *schema.ResourceData, m interface{}) error {
	sync := &AnalyticsAnalyticsInstancePrivateAccessChannelResourceCrud{}
func readAnalyticsAnalyticsInstancePrivateAccessChannel(d *schema.ResourceData, m interface{}) error {
	sync := &AnalyticsAnalyticsInstancePrivateAccessChannelResourceCrud{}
func updateAnalyticsAnalyticsInstancePrivateAccessChannel(d *schema.ResourceData, m interface{}) error {
	sync := &AnalyticsAnalyticsInstancePrivateAccessChannelResourceCrud{}
func deleteAnalyticsAnalyticsInstancePrivateAccessChannel(d *schema.ResourceData, m interface{}) error {
	sync := &AnalyticsAnalyticsInstancePrivateAccessChannelResourceCrud{}
func (s *AnalyticsAnalyticsInstancePrivateAccessChannelResourceCrud) ID() string {
	if s.WorkRequest != nil {
func (s *AnalyticsAnalyticsInstancePrivateAccessChannelResourceCrud) Create() error {
	request := oci_analytics.CreatePrivateAccessChannelRequest{}
func (s *AnalyticsAnalyticsInstancePrivateAccessChannelResourceCrud) getAnalyticsInstancePrivateAccessChannelFromWorkRequest(workId *string, retryPolicy *oci_common.RetryPolicy,
	actionTypeEnum oci_analytics.WorkRequestActionResultEnum, timeout time.Duration) error {
func (s *AnalyticsAnalyticsInstancePrivateAccessChannelResourceCrud) Get() error {
	request := oci_analytics.GetPrivateAccessChannelRequest{}
func (s *AnalyticsAnalyticsInstancePrivateAccessChannelResourceCrud) Update() error {
	request := oci_analytics.UpdatePrivateAccessChannelRequest{}
func (s *AnalyticsAnalyticsInstancePrivateAccessChannelResourceCrud) Delete() error {
	request := oci_analytics.DeletePrivateAccessChannelRequest{}
func (s *AnalyticsAnalyticsInstancePrivateAccessChannelResourceCrud) SetData() error {

func (s *AnalyticsAnalyticsInstancePrivateAccessChannelResourceCrud) mapToPrivateSourceDnsZone(fieldKeyFormat string) (oci_analytics.PrivateSourceDnsZone, error) {
	result := oci_analytics.PrivateSourceDnsZone{}
func (s *AnalyticsAnalyticsInstancePrivateAccessChannelResourceCrud) mapToPrivateSourceScanHost(fieldKeyFormat string) (oci_analytics.PrivateSourceScanHost, error) {
	result := oci_analytics.PrivateSourceScanHost{}

=== ./internal/service/analytics/analytics_analytics_instance_data_source.go ===
func AnalyticsAnalyticsInstanceDataSource() *schema.Resource {
	fieldMap := make(map[string]*schema.Schema)
func readSingularAnalyticsAnalyticsInstance(d *schema.ResourceData, m interface{}) error {
	sync := &AnalyticsAnalyticsInstanceDataSourceCrud{}
func (s *AnalyticsAnalyticsInstanceDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *AnalyticsAnalyticsInstanceDataSourceCrud) Get() error {
	request := oci_analytics.GetAnalyticsInstanceRequest{}
func (s *AnalyticsAnalyticsInstanceDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/analytics/register_resource.go ===
func RegisterResource() {
	tfresource.RegisterResource("oci_analytics_analytics_instance", AnalyticsAnalyticsInstanceResource())

=== ./internal/service/delegate_access_control/delegate_access_control_service_provider_action_data_source.go ===
func DelegateAccessControlServiceProviderActionDataSource() *schema.Resource {
	return &schema.Resource{
func readSingularDelegateAccessControlServiceProviderAction(d *schema.ResourceData, m interface{}) error {
	sync := &DelegateAccessControlServiceProviderActionDataSourceCrud{}
func (s *DelegateAccessControlServiceProviderActionDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *DelegateAccessControlServiceProviderActionDataSourceCrud) Get() error {
	request := oci_delegate_access_control.GetServiceProviderActionRequest{}
func (s *DelegateAccessControlServiceProviderActionDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/delegate_access_control/delegate_access_control_delegated_resource_access_request_data_source.go ===
func DelegateAccessControlDelegatedResourceAccessRequestDataSource() *schema.Resource {
	return &schema.Resource{
func readSingularDelegateAccessControlDelegatedResourceAccessRequest(d *schema.ResourceData, m interface{}) error {
	sync := &DelegateAccessControlDelegatedResourceAccessRequestDataSourceCrud{}
func (s *DelegateAccessControlDelegatedResourceAccessRequestDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *DelegateAccessControlDelegatedResourceAccessRequestDataSourceCrud) Get() error {
	request := oci_delegate_access_control.GetDelegatedResourceAccessRequestRequest{}
func (s *DelegateAccessControlDelegatedResourceAccessRequestDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/delegate_access_control/delegate_access_control_service_providers_data_source.go ===
func DelegateAccessControlServiceProvidersDataSource() *schema.Resource {
	return &schema.Resource{
func readDelegateAccessControlServiceProviders(d *schema.ResourceData, m interface{}) error {
	sync := &DelegateAccessControlServiceProvidersDataSourceCrud{}
func (s *DelegateAccessControlServiceProvidersDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *DelegateAccessControlServiceProvidersDataSourceCrud) Get() error {
	request := oci_delegate_access_control.ListServiceProvidersRequest{}
func (s *DelegateAccessControlServiceProvidersDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/delegate_access_control/delegate_access_control_delegated_resource_access_requests_data_source.go ===
func DelegateAccessControlDelegatedResourceAccessRequestsDataSource() *schema.Resource {
	return &schema.Resource{
func readDelegateAccessControlDelegatedResourceAccessRequests(d *schema.ResourceData, m interface{}) error {
	sync := &DelegateAccessControlDelegatedResourceAccessRequestsDataSourceCrud{}
func (s *DelegateAccessControlDelegatedResourceAccessRequestsDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *DelegateAccessControlDelegatedResourceAccessRequestsDataSourceCrud) Get() error {
	request := oci_delegate_access_control.ListDelegatedResourceAccessRequestsRequest{}
func (s *DelegateAccessControlDelegatedResourceAccessRequestsDataSourceCrud) SetData() error {
	if s.Res == nil {
func DelegatedResourceAccessRequestApprovalDetailsToMap(obj oci_delegate_access_control.DelegatedResourceAccessRequestApprovalDetails) map[string]interface{} {
	result := map[string]interface{}{}
func DelegatedResourceAccessRequestSummaryToMap(obj oci_delegate_access_control.DelegatedResourceAccessRequestSummary) map[string]interface{} {
	result := map[string]interface{}{}

=== ./internal/service/delegate_access_control/delegate_access_control_delegated_resource_access_request_histories_data_source.go ===
func DelegateAccessControlDelegatedResourceAccessRequestHistoriesDataSource() *schema.Resource {
	return &schema.Resource{
func readDelegateAccessControlDelegatedResourceAccessRequestHistories(d *schema.ResourceData, m interface{}) error {
	sync := &DelegateAccessControlDelegatedResourceAccessRequestHistoriesDataSourceCrud{}
func (s *DelegateAccessControlDelegatedResourceAccessRequestHistoriesDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *DelegateAccessControlDelegatedResourceAccessRequestHistoriesDataSourceCrud) Get() error {
	request := oci_delegate_access_control.ListDelegatedResourceAccessRequestHistoriesRequest{}
func (s *DelegateAccessControlDelegatedResourceAccessRequestHistoriesDataSourceCrud) SetData() error {
	if s.Res == nil {
func DelegatedResourceAccessRequestHistorySummaryToMap(obj oci_delegate_access_control.DelegatedResourceAccessRequestHistorySummary) map[string]interface{} {
	result := map[string]interface{}{}

=== ./internal/service/delegate_access_control/delegate_access_control_delegation_subscription_resource.go ===
func DelegateAccessControlDelegationSubscriptionResource() *schema.Resource {
	return &schema.Resource{
func createDelegateAccessControlDelegationSubscription(d *schema.ResourceData, m interface{}) error {
	sync := &DelegateAccessControlDelegationSubscriptionResourceCrud{}
func readDelegateAccessControlDelegationSubscription(d *schema.ResourceData, m interface{}) error {
	sync := &DelegateAccessControlDelegationSubscriptionResourceCrud{}
func updateDelegateAccessControlDelegationSubscription(d *schema.ResourceData, m interface{}) error {
	sync := &DelegateAccessControlDelegationSubscriptionResourceCrud{}
func deleteDelegateAccessControlDelegationSubscription(d *schema.ResourceData, m interface{}) error {
	sync := &DelegateAccessControlDelegationSubscriptionResourceCrud{}
func (s *DelegateAccessControlDelegationSubscriptionResourceCrud) ID() string {
	return *s.Res.Id
func (s *DelegateAccessControlDelegationSubscriptionResourceCrud) CreatedPending() []string {
	return []string{
func (s *DelegateAccessControlDelegationSubscriptionResourceCrud) CreatedTarget() []string {
	return []string{
func (s *DelegateAccessControlDelegationSubscriptionResourceCrud) DeletedPending() []string {
	return []string{
func (s *DelegateAccessControlDelegationSubscriptionResourceCrud) DeletedTarget() []string {
	return []string{
func (s *DelegateAccessControlDelegationSubscriptionResourceCrud) Create() error {
	request := oci_delegate_access_control.CreateDelegationSubscriptionRequest{}
func (s *DelegateAccessControlDelegationSubscriptionResourceCrud) getDelegationSubscriptionFromWorkRequest(workId *string, retryPolicy *oci_common.RetryPolicy,
	actionTypeEnum oci_delegate_access_control.ActionTypeEnum, timeout time.Duration) error {
func (s *DelegateAccessControlDelegationSubscriptionResourceCrud) Get() error {
	request := oci_delegate_access_control.GetDelegationSubscriptionRequest{}
func (s *DelegateAccessControlDelegationSubscriptionResourceCrud) Update() error {
	if compartment, ok := s.D.GetOkExists("compartment_id"); ok && s.D.HasChange("compartment_id") {
func (s *DelegateAccessControlDelegationSubscriptionResourceCrud) Delete() error {
	request := oci_delegate_access_control.DeleteDelegationSubscriptionRequest{}
func (s *DelegateAccessControlDelegationSubscriptionResourceCrud) SetData() error {
	if s.Res.CompartmentId != nil {
func (s *DelegateAccessControlDelegationSubscriptionResourceCrud) updateCompartment(compartment interface{}) error {
	changeCompartmentRequest := oci_delegate_access_control.ChangeDelegationSubscriptionCompartmentRequest{}

=== ./internal/service/delegate_access_control/delegate_access_control_delegated_resource_access_request_audit_log_report_data_source.go ===
func DelegateAccessControlDelegatedResourceAccessRequestAuditLogReportDataSource() *schema.Resource {
	return &schema.Resource{
func readSingularDelegateAccessControlDelegatedResourceAccessRequestAuditLogReport(d *schema.ResourceData, m interface{}) error {
	sync := &DelegateAccessControlDelegatedResourceAccessRequestAuditLogReportDataSourceCrud{}
func (s *DelegateAccessControlDelegatedResourceAccessRequestAuditLogReportDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *DelegateAccessControlDelegatedResourceAccessRequestAuditLogReportDataSourceCrud) Get() error {
	request := oci_delegate_access_control.GetDelegatedResourceAccessRequestAuditLogReportRequest{}
func (s *DelegateAccessControlDelegatedResourceAccessRequestAuditLogReportDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/delegate_access_control/delegate_access_control_service_provider_actions_data_source.go ===
func DelegateAccessControlServiceProviderActionsDataSource() *schema.Resource {
	return &schema.Resource{
func readDelegateAccessControlServiceProviderActions(d *schema.ResourceData, m interface{}) error {
	sync := &DelegateAccessControlServiceProviderActionsDataSourceCrud{}
func (s *DelegateAccessControlServiceProviderActionsDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *DelegateAccessControlServiceProviderActionsDataSourceCrud) Get() error {
	request := oci_delegate_access_control.ListServiceProviderActionsRequest{}
func (s *DelegateAccessControlServiceProviderActionsDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/delegate_access_control/delegate_access_control_delegation_controls_data_source.go ===
func DelegateAccessControlDelegationControlsDataSource() *schema.Resource {
	return &schema.Resource{
func readDelegateAccessControlDelegationControls(d *schema.ResourceData, m interface{}) error {
	sync := &DelegateAccessControlDelegationControlsDataSourceCrud{}
func (s *DelegateAccessControlDelegationControlsDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *DelegateAccessControlDelegationControlsDataSourceCrud) Get() error {
	request := oci_delegate_access_control.ListDelegationControlsRequest{}
func (s *DelegateAccessControlDelegationControlsDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/delegate_access_control/delegate_access_control_delegation_subscription_data_source.go ===
func DelegateAccessControlDelegationSubscriptionDataSource() *schema.Resource {
	fieldMap := make(map[string]*schema.Schema)
func readSingularDelegateAccessControlDelegationSubscription(d *schema.ResourceData, m interface{}) error {
	sync := &DelegateAccessControlDelegationSubscriptionDataSourceCrud{}
func (s *DelegateAccessControlDelegationSubscriptionDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *DelegateAccessControlDelegationSubscriptionDataSourceCrud) Get() error {
	request := oci_delegate_access_control.GetDelegationSubscriptionRequest{}
func (s *DelegateAccessControlDelegationSubscriptionDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/delegate_access_control/delegate_access_control_delegation_control_resource.go ===
func DelegateAccessControlDelegationControlResource() *schema.Resource {
	return &schema.Resource{
func createDelegateAccessControlDelegationControl(d *schema.ResourceData, m interface{}) error {
	sync := &DelegateAccessControlDelegationControlResourceCrud{}
func readDelegateAccessControlDelegationControl(d *schema.ResourceData, m interface{}) error {
	sync := &DelegateAccessControlDelegationControlResourceCrud{}
func updateDelegateAccessControlDelegationControl(d *schema.ResourceData, m interface{}) error {
	sync := &DelegateAccessControlDelegationControlResourceCrud{}
func deleteDelegateAccessControlDelegationControl(d *schema.ResourceData, m interface{}) error {
	sync := &DelegateAccessControlDelegationControlResourceCrud{}
func (s *DelegateAccessControlDelegationControlResourceCrud) ID() string {
	return *s.Res.Id
func (s *DelegateAccessControlDelegationControlResourceCrud) CreatedPending() []string {
	return []string{
func (s *DelegateAccessControlDelegationControlResourceCrud) CreatedTarget() []string {
	return []string{
func (s *DelegateAccessControlDelegationControlResourceCrud) DeletedPending() []string {
	return []string{
func (s *DelegateAccessControlDelegationControlResourceCrud) DeletedTarget() []string {
	return []string{
func (s *DelegateAccessControlDelegationControlResourceCrud) Create() error {
	request := oci_delegate_access_control.CreateDelegationControlRequest{}
func (s *DelegateAccessControlDelegationControlResourceCrud) getDelegationControlFromWorkRequest(workId *string, retryPolicy *oci_common.RetryPolicy,
	actionTypeEnum oci_delegate_access_control.ActionTypeEnum, timeout time.Duration) error {
func (s *DelegateAccessControlDelegationControlResourceCrud) Get() error {
	request := oci_delegate_access_control.GetDelegationControlRequest{}
func (s *DelegateAccessControlDelegationControlResourceCrud) Update() error {
	if compartment, ok := s.D.GetOkExists("compartment_id"); ok && s.D.HasChange("compartment_id") {
func (s *DelegateAccessControlDelegationControlResourceCrud) Delete() error {
	request := oci_delegate_access_control.DeleteDelegationControlRequest{}
func (s *DelegateAccessControlDelegationControlResourceCrud) SetData() error {
	if s.Res.CompartmentId != nil {
func (s *DelegateAccessControlDelegationControlResourceCrud) updateCompartment(compartment interface{}) error {
	changeCompartmentRequest := oci_delegate_access_control.ChangeDelegationControlCompartmentRequest{}

=== ./internal/service/delegate_access_control/delegate_access_control_delegation_control_data_source.go ===
func DelegateAccessControlDelegationControlDataSource() *schema.Resource {
	fieldMap := make(map[string]*schema.Schema)
func readSingularDelegateAccessControlDelegationControl(d *schema.ResourceData, m interface{}) error {
	sync := &DelegateAccessControlDelegationControlDataSourceCrud{}
func (s *DelegateAccessControlDelegationControlDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *DelegateAccessControlDelegationControlDataSourceCrud) Get() error {
	request := oci_delegate_access_control.GetDelegationControlRequest{}
func (s *DelegateAccessControlDelegationControlDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/delegate_access_control/delegate_access_control_service_provider_data_source.go ===
func DelegateAccessControlServiceProviderDataSource() *schema.Resource {
	return &schema.Resource{
func readSingularDelegateAccessControlServiceProvider(d *schema.ResourceData, m interface{}) error {
	sync := &DelegateAccessControlServiceProviderDataSourceCrud{}
func (s *DelegateAccessControlServiceProviderDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *DelegateAccessControlServiceProviderDataSourceCrud) Get() error {
	request := oci_delegate_access_control.GetServiceProviderRequest{}
func (s *DelegateAccessControlServiceProviderDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/delegate_access_control/delegate_access_control_delegation_control_resources_data_source.go ===
func DelegateAccessControlDelegationControlResourcesDataSource() *schema.Resource {
	return &schema.Resource{
func readDelegateAccessControlDelegationControlResources(d *schema.ResourceData, m interface{}) error {
	sync := &DelegateAccessControlDelegationControlResourcesDataSourceCrud{}
func (s *DelegateAccessControlDelegationControlResourcesDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *DelegateAccessControlDelegationControlResourcesDataSourceCrud) Get() error {
	request := oci_delegate_access_control.ListDelegationControlResourcesRequest{}
func (s *DelegateAccessControlDelegationControlResourcesDataSourceCrud) SetData() error {
	if s.Res == nil {
func DelegationControlResourceSummaryToMap(obj oci_delegate_access_control.DelegationControlResourceSummary) map[string]interface{} {
	result := map[string]interface{}{}

=== ./internal/service/delegate_access_control/delegate_access_control_delegation_subscriptions_data_source.go ===
func DelegateAccessControlDelegationSubscriptionsDataSource() *schema.Resource {
	return &schema.Resource{
func readDelegateAccessControlDelegationSubscriptions(d *schema.ResourceData, m interface{}) error {
	sync := &DelegateAccessControlDelegationSubscriptionsDataSourceCrud{}
func (s *DelegateAccessControlDelegationSubscriptionsDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *DelegateAccessControlDelegationSubscriptionsDataSourceCrud) Get() error {
	request := oci_delegate_access_control.ListDelegationSubscriptionsRequest{}
func (s *DelegateAccessControlDelegationSubscriptionsDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/delegate_access_control/register_resource.go ===
func RegisterResource() {
	tfresource.RegisterResource("oci_delegate_access_control_delegation_control", DelegateAccessControlDelegationControlResource())

=== ./internal/service/demand_signal/demand_signal_occ_demand_signal_data_source.go ===
func DemandSignalOccDemandSignalDataSource() *schema.Resource {
	fieldMap := make(map[string]*schema.Schema)
func readSingularDemandSignalOccDemandSignal(d *schema.ResourceData, m interface{}) error {
	sync := &DemandSignalOccDemandSignalDataSourceCrud{}
func (s *DemandSignalOccDemandSignalDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *DemandSignalOccDemandSignalDataSourceCrud) Get() error {
	request := oci_demand_signal.GetOccDemandSignalRequest{}
func (s *DemandSignalOccDemandSignalDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/demand_signal/demand_signal_occ_demand_signal_resource.go ===
func DemandSignalOccDemandSignalResource() *schema.Resource {
	return &schema.Resource{
func createDemandSignalOccDemandSignal(d *schema.ResourceData, m interface{}) error {
	sync := &DemandSignalOccDemandSignalResourceCrud{}
func readDemandSignalOccDemandSignal(d *schema.ResourceData, m interface{}) error {
	sync := &DemandSignalOccDemandSignalResourceCrud{}
func updateDemandSignalOccDemandSignal(d *schema.ResourceData, m interface{}) error {
	sync := &DemandSignalOccDemandSignalResourceCrud{}
func deleteDemandSignalOccDemandSignal(d *schema.ResourceData, m interface{}) error {
	sync := &DemandSignalOccDemandSignalResourceCrud{}
func (s *DemandSignalOccDemandSignalResourceCrud) ID() string {
	return *s.Res.Id
func (s *DemandSignalOccDemandSignalResourceCrud) CreatedPending() []string {
	return []string{
func (s *DemandSignalOccDemandSignalResourceCrud) CreatedTarget() []string {
	return []string{
func (s *DemandSignalOccDemandSignalResourceCrud) DeletedPending() []string {
	return []string{
func (s *DemandSignalOccDemandSignalResourceCrud) DeletedTarget() []string {
	return []string{
func (s *DemandSignalOccDemandSignalResourceCrud) Create() error {
	request := oci_demand_signal.CreateOccDemandSignalRequest{}
func (s *DemandSignalOccDemandSignalResourceCrud) Get() error {
	request := oci_demand_signal.GetOccDemandSignalRequest{}
func (s *DemandSignalOccDemandSignalResourceCrud) Update() error {
	request := oci_demand_signal.UpdateOccDemandSignalRequest{}
func (s *DemandSignalOccDemandSignalResourceCrud) Delete() error {
	request := oci_demand_signal.DeleteOccDemandSignalRequest{}
func (s *DemandSignalOccDemandSignalResourceCrud) SetData() error {
	if s.Res.CompartmentId != nil {
func (s *DemandSignalOccDemandSignalResourceCrud) mapToOccDemandSignalData(fieldKeyFormat string) (oci_demand_signal.OccDemandSignalData, error) {
	result := oci_demand_signal.OccDemandSignalData{}
func (s *DemandSignalOccDemandSignalResourceCrud) mapToOccDemandSignalValue(fieldKeyFormat string) (oci_demand_signal.OccDemandSignalValue, error) {
	result := oci_demand_signal.OccDemandSignalValue{}

=== ./internal/service/demand_signal/demand_signal_occ_demand_signals_data_source.go ===
func DemandSignalOccDemandSignalsDataSource() *schema.Resource {
	return &schema.Resource{
func readDemandSignalOccDemandSignals(d *schema.ResourceData, m interface{}) error {
	sync := &DemandSignalOccDemandSignalsDataSourceCrud{}
func (s *DemandSignalOccDemandSignalsDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *DemandSignalOccDemandSignalsDataSourceCrud) Get() error {
	request := oci_demand_signal.ListOccDemandSignalsRequest{}
func (s *DemandSignalOccDemandSignalsDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/demand_signal/register_resource.go ===
func RegisterResource() {
	tfresource.RegisterResource("oci_demand_signal_occ_demand_signal", DemandSignalOccDemandSignalResource())

=== ./internal/service/waf/waf_web_app_firewall_resource.go ===
func WafWebAppFirewallResource() *schema.Resource {
	return &schema.Resource{
func createWafWebAppFirewall(d *schema.ResourceData, m interface{}) error {
	sync := &WafWebAppFirewallResourceCrud{}
func readWafWebAppFirewall(d *schema.ResourceData, m interface{}) error {
	sync := &WafWebAppFirewallResourceCrud{}
func updateWafWebAppFirewall(d *schema.ResourceData, m interface{}) error {
	sync := &WafWebAppFirewallResourceCrud{}
func deleteWafWebAppFirewall(d *schema.ResourceData, m interface{}) error {
	sync := &WafWebAppFirewallResourceCrud{}
func (s *WafWebAppFirewallResourceCrud) ID() string {
	webAppFirewall := *s.Res
func (s *WafWebAppFirewallResourceCrud) CreatedPending() []string {
	return []string{
func (s *WafWebAppFirewallResourceCrud) CreatedTarget() []string {
	return []string{
func (s *WafWebAppFirewallResourceCrud) DeletedPending() []string {
	return []string{
func (s *WafWebAppFirewallResourceCrud) DeletedTarget() []string {
	return []string{
func (s *WafWebAppFirewallResourceCrud) Create() error {
	request := oci_waf.CreateWebAppFirewallRequest{}
func (s *WafWebAppFirewallResourceCrud) getWebAppFirewallFromWorkRequest(workId *string, retryPolicy *oci_common.RetryPolicy,
	actionTypeEnum oci_waf.WorkRequestResourceActionTypeEnum, timeout time.Duration) error {
func webAppFirewallWaitForWorkRequest(wId *string, entityType string, action oci_waf.WorkRequestResourceActionTypeEnum,
	timeout time.Duration, disableFoundRetries bool, client *oci_waf.WafClient) (*string, error) {
func getErrorFromWafWebAppFirewallWorkRequest(client *oci_waf.WafClient, workId *string, retryPolicy *oci_common.RetryPolicy, entityType string, action oci_waf.WorkRequestResourceActionTypeEnum) error {
	response, err := client.ListWorkRequestErrors(context.Background(),
func (s *WafWebAppFirewallResourceCrud) Get() error {
	request := oci_waf.GetWebAppFirewallRequest{}
func (s *WafWebAppFirewallResourceCrud) Update() error {
	if compartment, ok := s.D.GetOkExists("compartment_id"); ok && s.D.HasChange("compartment_id") {
func (s *WafWebAppFirewallResourceCrud) Delete() error {
	request := oci_waf.DeleteWebAppFirewallRequest{}
func (s *WafWebAppFirewallResourceCrud) SetData() error {
	switch v := (*s.Res).(type) {
func (s *WafWebAppFirewallResourceCrud) populateTopLevelPolymorphicCreateWebAppFirewallRequest(request *oci_waf.CreateWebAppFirewallRequest) error {
	//discriminator
func (s *WafWebAppFirewallResourceCrud) updateCompartment(compartment interface{}) error {
	changeCompartmentRequest := oci_waf.ChangeWebAppFirewallCompartmentRequest{}

=== ./internal/service/waf/waf_web_app_firewall_data_source.go ===
func WafWebAppFirewallDataSource() *schema.Resource {
	fieldMap := make(map[string]*schema.Schema)
func readSingularWafWebAppFirewall(d *schema.ResourceData, m interface{}) error {
	sync := &WafWebAppFirewallDataSourceCrud{}
func (s *WafWebAppFirewallDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *WafWebAppFirewallDataSourceCrud) Get() error {
	request := oci_waf.GetWebAppFirewallRequest{}
func (s *WafWebAppFirewallDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/waf/waf_protection_capability_group_tags_data_source.go ===
func WafProtectionCapabilityGroupTagsDataSource() *schema.Resource {
	return &schema.Resource{
func readWafProtectionCapabilityGroupTags(d *schema.ResourceData, m interface{}) error {
	sync := &WafProtectionCapabilityGroupTagsDataSourceCrud{}
func (s *WafProtectionCapabilityGroupTagsDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *WafProtectionCapabilityGroupTagsDataSourceCrud) Get() error {
	request := oci_waf.ListProtectionCapabilityGroupTagsRequest{}
func (s *WafProtectionCapabilityGroupTagsDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/waf/waf_network_address_lists_data_source.go ===
func WafNetworkAddressListsDataSource() *schema.Resource {
	return &schema.Resource{
func readWafNetworkAddressLists(d *schema.ResourceData, m interface{}) error {
	sync := &WafNetworkAddressListsDataSourceCrud{}
func (s *WafNetworkAddressListsDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *WafNetworkAddressListsDataSourceCrud) Get() error {
	request := oci_waf.ListNetworkAddressListsRequest{}
func (s *WafNetworkAddressListsDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/waf/waf_web_app_firewalls_data_source.go ===
func WafWebAppFirewallsDataSource() *schema.Resource {
	return &schema.Resource{
func readWafWebAppFirewalls(d *schema.ResourceData, m interface{}) error {
	sync := &WafWebAppFirewallsDataSourceCrud{}
func (s *WafWebAppFirewallsDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *WafWebAppFirewallsDataSourceCrud) Get() error {
	request := oci_waf.ListWebAppFirewallsRequest{}
func (s *WafWebAppFirewallsDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/waf/waf_network_address_list_resource.go ===
func WafNetworkAddressListResource() *schema.Resource {
	return &schema.Resource{
func createWafNetworkAddressList(d *schema.ResourceData, m interface{}) error {
	sync := &WafNetworkAddressListResourceCrud{}
func readWafNetworkAddressList(d *schema.ResourceData, m interface{}) error {
	sync := &WafNetworkAddressListResourceCrud{}
func updateWafNetworkAddressList(d *schema.ResourceData, m interface{}) error {
	sync := &WafNetworkAddressListResourceCrud{}
func deleteWafNetworkAddressList(d *schema.ResourceData, m interface{}) error {
	sync := &WafNetworkAddressListResourceCrud{}
func (s *WafNetworkAddressListResourceCrud) ID() string {
	networkAddressList := *s.Res
func (s *WafNetworkAddressListResourceCrud) CreatedPending() []string {
	return []string{
func (s *WafNetworkAddressListResourceCrud) CreatedTarget() []string {
	return []string{
func (s *WafNetworkAddressListResourceCrud) DeletedPending() []string {
	return []string{
func (s *WafNetworkAddressListResourceCrud) DeletedTarget() []string {
	return []string{
func (s *WafNetworkAddressListResourceCrud) Create() error {
	request := oci_waf.CreateNetworkAddressListRequest{}
func (s *WafNetworkAddressListResourceCrud) getNetworkAddressListFromWorkRequest(workId *string, retryPolicy *oci_common.RetryPolicy,
	actionTypeEnum oci_waf.WorkRequestResourceActionTypeEnum, timeout time.Duration) error {
func networkAddressListWaitForWorkRequest(wId *string, entityType string, action oci_waf.WorkRequestResourceActionTypeEnum,
	timeout time.Duration, disableFoundRetries bool, client *oci_waf.WafClient) (*string, error) {
func getErrorFromWafNetworkAddressListWorkRequest(client *oci_waf.WafClient, workId *string, retryPolicy *oci_common.RetryPolicy, entityType string, action oci_waf.WorkRequestResourceActionTypeEnum) error {
	response, err := client.ListWorkRequestErrors(context.Background(),
func (s *WafNetworkAddressListResourceCrud) Get() error {
	request := oci_waf.GetNetworkAddressListRequest{}
func (s *WafNetworkAddressListResourceCrud) Update() error {
	if compartment, ok := s.D.GetOkExists("compartment_id"); ok && s.D.HasChange("compartment_id") {
func (s *WafNetworkAddressListResourceCrud) Delete() error {
	request := oci_waf.DeleteNetworkAddressListRequest{}
func (s *WafNetworkAddressListResourceCrud) SetData() error {
	switch v := (*s.Res).(type) {
func (s *WafNetworkAddressListResourceCrud) mapToPrivateAddresses(fieldKeyFormat string) (oci_waf.PrivateAddresses, error) {
	result := oci_waf.PrivateAddresses{}
func (s *WafNetworkAddressListResourceCrud) populateTopLevelPolymorphicCreateNetworkAddressListRequest(request *oci_waf.CreateNetworkAddressListRequest) error {
	//discriminator
func (s *WafNetworkAddressListResourceCrud) populateTopLevelPolymorphicUpdateNetworkAddressListRequest(request *oci_waf.UpdateNetworkAddressListRequest) error {
	//discriminator
func (s *WafNetworkAddressListResourceCrud) updateCompartment(compartment interface{}) error {
	changeCompartmentRequest := oci_waf.ChangeNetworkAddressListCompartmentRequest{}

=== ./internal/service/waf/waf_web_app_firewall_policy_resource.go ===
func WafWebAppFirewallPolicyResource() *schema.Resource {
	return &schema.Resource{
func createWafWebAppFirewallPolicy(d *schema.ResourceData, m interface{}) error {
	sync := &WafWebAppFirewallPolicyResourceCrud{}
func readWafWebAppFirewallPolicy(d *schema.ResourceData, m interface{}) error {
	sync := &WafWebAppFirewallPolicyResourceCrud{}
func updateWafWebAppFirewallPolicy(d *schema.ResourceData, m interface{}) error {
	sync := &WafWebAppFirewallPolicyResourceCrud{}
func deleteWafWebAppFirewallPolicy(d *schema.ResourceData, m interface{}) error {
	sync := &WafWebAppFirewallPolicyResourceCrud{}
func (s *WafWebAppFirewallPolicyResourceCrud) ID() string {
	return *s.Res.Id
func (s *WafWebAppFirewallPolicyResourceCrud) CreatedPending() []string {
	return []string{
func (s *WafWebAppFirewallPolicyResourceCrud) CreatedTarget() []string {
	return []string{
func (s *WafWebAppFirewallPolicyResourceCrud) DeletedPending() []string {
	return []string{
func (s *WafWebAppFirewallPolicyResourceCrud) DeletedTarget() []string {
	return []string{
func (s *WafWebAppFirewallPolicyResourceCrud) Create() error {
	request := oci_waf.CreateWebAppFirewallPolicyRequest{}
func (s *WafWebAppFirewallPolicyResourceCrud) getWebAppFirewallPolicyFromWorkRequest(workId *string, retryPolicy *oci_common.RetryPolicy,
	actionTypeEnum oci_waf.WorkRequestResourceActionTypeEnum, timeout time.Duration) error {
func webAppFirewallPolicyWaitForWorkRequest(wId *string, entityType string, action oci_waf.WorkRequestResourceActionTypeEnum,
	timeout time.Duration, disableFoundRetries bool, client *oci_waf.WafClient) (*string, error) {
func getErrorFromWafWebAppFirewallPolicyWorkRequest(client *oci_waf.WafClient, workId *string, retryPolicy *oci_common.RetryPolicy, entityType string, action oci_waf.WorkRequestResourceActionTypeEnum) error {
	response, err := client.ListWorkRequestErrors(context.Background(),
func (s *WafWebAppFirewallPolicyResourceCrud) Get() error {
	request := oci_waf.GetWebAppFirewallPolicyRequest{}
func (s *WafWebAppFirewallPolicyResourceCrud) Update() error {
	if compartment, ok := s.D.GetOkExists("compartment_id"); ok && s.D.HasChange("compartment_id") {
func (s *WafWebAppFirewallPolicyResourceCrud) Delete() error {
	request := oci_waf.DeleteWebAppFirewallPolicyRequest{}
func (s *WafWebAppFirewallPolicyResourceCrud) SetData() error {
	actions := []interface{}{}
func (s *WafWebAppFirewallPolicyResourceCrud) mapToAccessControlRule(fieldKeyFormat string) (oci_waf.AccessControlRule, error) {
	result := oci_waf.AccessControlRule{}
func (s *WafWebAppFirewallPolicyResourceCrud) mapToAction(fieldKeyFormat string) (oci_waf.Action, error) {
	var baseObject oci_waf.Action
func (s *WafWebAppFirewallPolicyResourceCrud) mapToCollaborativeCapabilityWeightOverride(fieldKeyFormat string) (oci_waf.CollaborativeCapabilityWeightOverride, error) {
	result := oci_waf.CollaborativeCapabilityWeightOverride{}
func (s *WafWebAppFirewallPolicyResourceCrud) mapToHttpResponseBody(fieldKeyFormat string) (oci_waf.HttpResponseBody, error) {
	var baseObject oci_waf.HttpResponseBody
func (s *WafWebAppFirewallPolicyResourceCrud) mapToProtectionCapability(fieldKeyFormat string) (oci_waf.ProtectionCapability, error) {
	result := oci_waf.ProtectionCapability{}
func (s *WafWebAppFirewallPolicyResourceCrud) mapToProtectionCapabilityExclusions(fieldKeyFormat string) (oci_waf.ProtectionCapabilityExclusions, error) {
	result := oci_waf.ProtectionCapabilityExclusions{}
func (s *WafWebAppFirewallPolicyResourceCrud) mapToProtectionCapabilitySettings(fieldKeyFormat string) (oci_waf.ProtectionCapabilitySettings, error) {
	result := oci_waf.ProtectionCapabilitySettings{}
func (s *WafWebAppFirewallPolicyResourceCrud) mapToProtectionRule(fieldKeyFormat string) (oci_waf.ProtectionRule, error) {
	result := oci_waf.ProtectionRule{}
func (s *WafWebAppFirewallPolicyResourceCrud) mapToRequestAccessControl(fieldKeyFormat string) (oci_waf.RequestAccessControl, error) {
	result := oci_waf.RequestAccessControl{}
func (s *WafWebAppFirewallPolicyResourceCrud) mapToRequestProtection(fieldKeyFormat string) (oci_waf.RequestProtection, error) {
	result := oci_waf.RequestProtection{}
func (s *WafWebAppFirewallPolicyResourceCrud) mapToRequestRateLimiting(fieldKeyFormat string) (oci_waf.RequestRateLimiting, error) {
	result := oci_waf.RequestRateLimiting{}
func (s *WafWebAppFirewallPolicyResourceCrud) mapToRequestRateLimitingConfiguration(fieldKeyFormat string) (oci_waf.RequestRateLimitingConfiguration, error) {
	result := oci_waf.RequestRateLimitingConfiguration{}
func (s *WafWebAppFirewallPolicyResourceCrud) mapToRequestRateLimitingRule(fieldKeyFormat string) (oci_waf.RequestRateLimitingRule, error) {
	result := oci_waf.RequestRateLimitingRule{}
func (s *WafWebAppFirewallPolicyResourceCrud) mapToResponseAccessControl(fieldKeyFormat string) (oci_waf.ResponseAccessControl, error) {
	result := oci_waf.ResponseAccessControl{}
func (s *WafWebAppFirewallPolicyResourceCrud) mapToResponseHeader(fieldKeyFormat string) (oci_waf.ResponseHeader, error) {
	result := oci_waf.ResponseHeader{}
func (s *WafWebAppFirewallPolicyResourceCrud) mapToResponseProtection(fieldKeyFormat string) (oci_waf.ResponseProtection, error) {
	result := oci_waf.ResponseProtection{}
func (s *WafWebAppFirewallPolicyResourceCrud) updateCompartment(compartment interface{}) error {
	changeCompartmentRequest := oci_waf.ChangeWebAppFirewallPolicyCompartmentRequest{}

=== ./internal/service/waf/waf_web_app_firewall_policy_data_source.go ===
func WafWebAppFirewallPolicyDataSource() *schema.Resource {
	fieldMap := make(map[string]*schema.Schema)
func readSingularWafWebAppFirewallPolicy(d *schema.ResourceData, m interface{}) error {
	sync := &WafWebAppFirewallPolicyDataSourceCrud{}
func (s *WafWebAppFirewallPolicyDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *WafWebAppFirewallPolicyDataSourceCrud) Get() error {
	request := oci_waf.GetWebAppFirewallPolicyRequest{}
func (s *WafWebAppFirewallPolicyDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/waf/waf_protection_capabilities_data_source.go ===
func WafProtectionCapabilitiesDataSource() *schema.Resource {
	return &schema.Resource{
func readWafProtectionCapabilities(d *schema.ResourceData, m interface{}) error {
	sync := &WafProtectionCapabilitiesDataSourceCrud{}
func (s *WafProtectionCapabilitiesDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *WafProtectionCapabilitiesDataSourceCrud) Get() error {
	request := oci_waf.ListProtectionCapabilitiesRequest{}
func (s *WafProtectionCapabilitiesDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/waf/waf_network_address_list_data_source.go ===
func WafNetworkAddressListDataSource() *schema.Resource {
	fieldMap := make(map[string]*schema.Schema)
func readSingularWafNetworkAddressList(d *schema.ResourceData, m interface{}) error {
	sync := &WafNetworkAddressListDataSourceCrud{}
func (s *WafNetworkAddressListDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *WafNetworkAddressListDataSourceCrud) Get() error {
	request := oci_waf.GetNetworkAddressListRequest{}
func (s *WafNetworkAddressListDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/waf/register_resource.go ===
func RegisterResource() {
	tfresource.RegisterResource("oci_waf_network_address_list", WafNetworkAddressListResource())

=== ./internal/service/waf/waf_web_app_firewall_policies_data_source.go ===
func WafWebAppFirewallPoliciesDataSource() *schema.Resource {
	return &schema.Resource{
func readWafWebAppFirewallPolicies(d *schema.ResourceData, m interface{}) error {
	sync := &WafWebAppFirewallPoliciesDataSourceCrud{}
func (s *WafWebAppFirewallPoliciesDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *WafWebAppFirewallPoliciesDataSourceCrud) Get() error {
	request := oci_waf.ListWebAppFirewallPoliciesRequest{}
func (s *WafWebAppFirewallPoliciesDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/artifacts/artifacts_container_repository_data_source.go ===
func ArtifactsContainerRepositoryDataSource() *schema.Resource {
	fieldMap := make(map[string]*schema.Schema)
func readSingularArtifactsContainerRepository(d *schema.ResourceData, m interface{}) error {
	sync := &ArtifactsContainerRepositoryDataSourceCrud{}
func (s *ArtifactsContainerRepositoryDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *ArtifactsContainerRepositoryDataSourceCrud) Get() error {
	request := oci_artifacts.GetContainerRepositoryRequest{}
func (s *ArtifactsContainerRepositoryDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/artifacts/artifacts_container_image_signatures_data_source.go ===
func ArtifactsContainerImageSignaturesDataSource() *schema.Resource {
	return &schema.Resource{
func readArtifactsContainerImageSignatures(d *schema.ResourceData, m interface{}) error {
	sync := &ArtifactsContainerImageSignaturesDataSourceCrud{}
func (s *ArtifactsContainerImageSignaturesDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *ArtifactsContainerImageSignaturesDataSourceCrud) Get() error {
	request := oci_artifacts.ListContainerImageSignaturesRequest{}
func (s *ArtifactsContainerImageSignaturesDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/artifacts/artifacts_repository_resource.go ===
func ArtifactsRepositoryResource() *schema.Resource {
	return &schema.Resource{
func createArtifactsRepository(d *schema.ResourceData, m interface{}) error {
	sync := &ArtifactsRepositoryResourceCrud{}
func readArtifactsRepository(d *schema.ResourceData, m interface{}) error {
	sync := &ArtifactsRepositoryResourceCrud{}
func updateArtifactsRepository(d *schema.ResourceData, m interface{}) error {
	sync := &ArtifactsRepositoryResourceCrud{}
func deleteArtifactsRepository(d *schema.ResourceData, m interface{}) error {
	sync := &ArtifactsRepositoryResourceCrud{}
func (s *ArtifactsRepositoryResourceCrud) ID() string {
	repository := *s.Res
func (s *ArtifactsRepositoryResourceCrud) CreatedPending() []string {
	return []string{}
func (s *ArtifactsRepositoryResourceCrud) CreatedTarget() []string {
	return []string{
func (s *ArtifactsRepositoryResourceCrud) DeletedPending() []string {
	return []string{
func (s *ArtifactsRepositoryResourceCrud) DeletedTarget() []string {
	return []string{
func (s *ArtifactsRepositoryResourceCrud) Create() error {
	request := oci_artifacts.CreateRepositoryRequest{}
func (s *ArtifactsRepositoryResourceCrud) Get() error {
	request := oci_artifacts.GetRepositoryRequest{}
func (s *ArtifactsRepositoryResourceCrud) Update() error {
	if compartment, ok := s.D.GetOkExists("compartment_id"); ok && s.D.HasChange("compartment_id") {
func (s *ArtifactsRepositoryResourceCrud) Delete() error {
	request := oci_artifacts.DeleteRepositoryRequest{}
func (s *ArtifactsRepositoryResourceCrud) SetData() error {
	switch v := (*s.Res).(type) {
func (s *ArtifactsRepositoryResourceCrud) populateTopLevelPolymorphicCreateRepositoryRequest(request *oci_artifacts.CreateRepositoryRequest) error {
	//discriminator
func (s *ArtifactsRepositoryResourceCrud) populateTopLevelPolymorphicUpdateRepositoryRequest(request *oci_artifacts.UpdateRepositoryRequest) error {
	//discriminator
func (s *ArtifactsRepositoryResourceCrud) updateCompartment(compartment interface{}) error {
	changeCompartmentRequest := oci_artifacts.ChangeRepositoryCompartmentRequest{}

=== ./internal/service/artifacts/artifacts_container_images_data_source.go ===
func ArtifactsContainerImagesDataSource() *schema.Resource {
	return &schema.Resource{
func readArtifactsContainerImages(d *schema.ResourceData, m interface{}) error {
	sync := &ArtifactsContainerImagesDataSourceCrud{}
func (s *ArtifactsContainerImagesDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *ArtifactsContainerImagesDataSourceCrud) Get() error {
	request := oci_artifacts.ListContainerImagesRequest{}
func (s *ArtifactsContainerImagesDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/artifacts/artifacts_repositories_data_source.go ===
func ArtifactsRepositoriesDataSource() *schema.Resource {
	return &schema.Resource{
func readArtifactsRepositories(d *schema.ResourceData, m interface{}) error {
	sync := &ArtifactsRepositoriesDataSourceCrud{}
func (s *ArtifactsRepositoriesDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *ArtifactsRepositoriesDataSourceCrud) Get() error {
	request := oci_artifacts.ListRepositoriesRequest{}
func (s *ArtifactsRepositoriesDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/artifacts/artifacts_container_image_signature_resource.go ===
func ArtifactsContainerImageSignatureResource() *schema.Resource {
	return &schema.Resource{
func createArtifactsContainerImageSignature(d *schema.ResourceData, m interface{}) error {
	sync := &ArtifactsContainerImageSignatureResourceCrud{}
func readArtifactsContainerImageSignature(d *schema.ResourceData, m interface{}) error {
	sync := &ArtifactsContainerImageSignatureResourceCrud{}
func updateArtifactsContainerImageSignature(d *schema.ResourceData, m interface{}) error {
	sync := &ArtifactsContainerImageSignatureResourceCrud{}
func deleteArtifactsContainerImageSignature(d *schema.ResourceData, m interface{}) error {
	sync := &ArtifactsContainerImageSignatureResourceCrud{}
func (s *ArtifactsContainerImageSignatureResourceCrud) ID() string {
	return *s.Res.Id
func (s *ArtifactsContainerImageSignatureResourceCrud) CreatedPending() []string {
	return []string{}
func (s *ArtifactsContainerImageSignatureResourceCrud) CreatedTarget() []string {
	return []string{
func (s *ArtifactsContainerImageSignatureResourceCrud) DeletedPending() []string {
	return []string{
func (s *ArtifactsContainerImageSignatureResourceCrud) DeletedTarget() []string {
	return []string{
func (s *ArtifactsContainerImageSignatureResourceCrud) Create() error {
	request := oci_artifacts.CreateContainerImageSignatureRequest{}
func (s *ArtifactsContainerImageSignatureResourceCrud) Get() error {
	request := oci_artifacts.GetContainerImageSignatureRequest{}
func (s *ArtifactsContainerImageSignatureResourceCrud) Update() error {
	request := oci_artifacts.UpdateContainerImageSignatureRequest{}
func (s *ArtifactsContainerImageSignatureResourceCrud) Delete() error {
	request := oci_artifacts.DeleteContainerImageSignatureRequest{}
func (s *ArtifactsContainerImageSignatureResourceCrud) SetData() error {


=== ./internal/service/artifacts/artifacts_repository_data_source.go ===
func ArtifactsRepositoryDataSource() *schema.Resource {
	fieldMap := make(map[string]*schema.Schema)
func readSingularArtifactsRepository(d *schema.ResourceData, m interface{}) error {
	sync := &ArtifactsRepositoryDataSourceCrud{}
func (s *ArtifactsRepositoryDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *ArtifactsRepositoryDataSourceCrud) Get() error {
	request := oci_artifacts.GetRepositoryRequest{}
func (s *ArtifactsRepositoryDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/artifacts/artifacts_export.go ===
func getArtifactsRepositoryId(resource *tf_export.OCIResource) (string, error) {
	repositoryId, ok := resource.SourceAttributes["id"].(string)
func getArtifactsContainerRepositoryId(resource *tf_export.OCIResource) (string, error) {
	repositoryId, ok := resource.SourceAttributes["id"].(string)
func getArtifactsContainerImageSignatureId(resource *tf_export.OCIResource) (string, error) {

func getArtifactsGenericArtifactId(resource *tf_export.OCIResource) (string, error) {


=== ./internal/service/artifacts/artifacts_container_image_signature_data_source.go ===
func ArtifactsContainerImageSignatureDataSource() *schema.Resource {
	fieldMap := make(map[string]*schema.Schema)
func readSingularArtifactsContainerImageSignature(d *schema.ResourceData, m interface{}) error {
	sync := &ArtifactsContainerImageSignatureDataSourceCrud{}
func (s *ArtifactsContainerImageSignatureDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *ArtifactsContainerImageSignatureDataSourceCrud) Get() error {
	request := oci_artifacts.GetContainerImageSignatureRequest{}
func (s *ArtifactsContainerImageSignatureDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/artifacts/artifacts_generic_artifact_data_source.go ===
func ArtifactsGenericArtifactDataSource() *schema.Resource {
	fieldMap := make(map[string]*schema.Schema)
func readSingularArtifactsGenericArtifact(d *schema.ResourceData, m interface{}) error {
	sync := &ArtifactsGenericArtifactDataSourceCrud{}
func (s *ArtifactsGenericArtifactDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *ArtifactsGenericArtifactDataSourceCrud) Get() error {
	request := oci_artifacts.GetGenericArtifactRequest{}
func (s *ArtifactsGenericArtifactDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/artifacts/artifacts_generic_artifact_resource.go ===
func ArtifactsGenericArtifactResource() *schema.Resource {
	return &schema.Resource{
func createArtifactsGenericArtifact(d *schema.ResourceData, m interface{}) error {
	sync := &ArtifactsGenericArtifactResourceCrud{}
func readArtifactsGenericArtifact(d *schema.ResourceData, m interface{}) error {
	sync := &ArtifactsGenericArtifactResourceCrud{}
func updateArtifactsGenericArtifact(d *schema.ResourceData, m interface{}) error {
	sync := &ArtifactsGenericArtifactResourceCrud{}
func deleteArtifactsGenericArtifact(d *schema.ResourceData, m interface{}) error {
	sync := &ArtifactsGenericArtifactResourceCrud{}
func (s *ArtifactsGenericArtifactResourceCrud) ID() string {
	return *s.Res.Id
func (s *ArtifactsGenericArtifactResourceCrud) CreatedPending() []string {
	return []string{}
func (s *ArtifactsGenericArtifactResourceCrud) CreatedTarget() []string {
	return []string{
func (s *ArtifactsGenericArtifactResourceCrud) DeletedPending() []string {
	return []string{
func (s *ArtifactsGenericArtifactResourceCrud) DeletedTarget() []string {
	return []string{
func (s *ArtifactsGenericArtifactResourceCrud) Create() error {
	request := oci_artifacts.UpdateGenericArtifactRequest{}
func (s *ArtifactsGenericArtifactResourceCrud) Get() error {
	request := oci_artifacts.GetGenericArtifactRequest{}
func (s *ArtifactsGenericArtifactResourceCrud) Update() error {
	request := oci_artifacts.UpdateGenericArtifactRequest{}
func (s *ArtifactsGenericArtifactResourceCrud) Delete() error {
	request := oci_artifacts.DeleteGenericArtifactRequest{}
func (s *ArtifactsGenericArtifactResourceCrud) SetData() error {
	if s.Res.Id != nil {

=== ./internal/service/artifacts/artifacts_container_repository_resource.go ===
func ArtifactsContainerRepositoryResource() *schema.Resource {
	return &schema.Resource{
func createArtifactsContainerRepository(d *schema.ResourceData, m interface{}) error {
	sync := &ArtifactsContainerRepositoryResourceCrud{}
func readArtifactsContainerRepository(d *schema.ResourceData, m interface{}) error {
	sync := &ArtifactsContainerRepositoryResourceCrud{}
func updateArtifactsContainerRepository(d *schema.ResourceData, m interface{}) error {
	sync := &ArtifactsContainerRepositoryResourceCrud{}
func deleteArtifactsContainerRepository(d *schema.ResourceData, m interface{}) error {
	sync := &ArtifactsContainerRepositoryResourceCrud{}
func (s *ArtifactsContainerRepositoryResourceCrud) ID() string {
	return *s.Res.Id
func (s *ArtifactsContainerRepositoryResourceCrud) CreatedPending() []string {
	return []string{}
func (s *ArtifactsContainerRepositoryResourceCrud) CreatedTarget() []string {
	return []string{
func (s *ArtifactsContainerRepositoryResourceCrud) DeletedPending() []string {
	return []string{
func (s *ArtifactsContainerRepositoryResourceCrud) DeletedTarget() []string {
	return []string{
func (s *ArtifactsContainerRepositoryResourceCrud) Create() error {
	request := oci_artifacts.CreateContainerRepositoryRequest{}
func (s *ArtifactsContainerRepositoryResourceCrud) Get() error {
	request := oci_artifacts.GetContainerRepositoryRequest{}
func (s *ArtifactsContainerRepositoryResourceCrud) Update() error {
	if compartment, ok := s.D.GetOkExists("compartment_id"); ok && s.D.HasChange("compartment_id") {
func (s *ArtifactsContainerRepositoryResourceCrud) Delete() error {
	request := oci_artifacts.DeleteContainerRepositoryRequest{}
func (s *ArtifactsContainerRepositoryResourceCrud) SetData() error {

func (s *ArtifactsContainerRepositoryResourceCrud) mapToContainerRepositoryReadme(fieldKeyFormat string) (oci_artifacts.ContainerRepositoryReadme, error) {
	result := oci_artifacts.ContainerRepositoryReadme{}
func (s *ArtifactsContainerRepositoryResourceCrud) updateCompartment(compartment interface{}) error {
	changeCompartmentRequest := oci_artifacts.ChangeContainerRepositoryCompartmentRequest{}

=== ./internal/service/artifacts/artifacts_container_configuration_resource.go ===
func ArtifactsContainerConfigurationResource() *schema.Resource {
	return &schema.Resource{
func createArtifactsContainerConfiguration(d *schema.ResourceData, m interface{}) error {
	sync := &ArtifactsContainerConfigurationResourceCrud{}
func readArtifactsContainerConfiguration(d *schema.ResourceData, m interface{}) error {
	sync := &ArtifactsContainerConfigurationResourceCrud{}
func updateArtifactsContainerConfiguration(d *schema.ResourceData, m interface{}) error {
	sync := &ArtifactsContainerConfigurationResourceCrud{}
func deleteArtifactsContainerConfiguration(d *schema.ResourceData, m interface{}) error {
	return nil
func (s *ArtifactsContainerConfigurationResourceCrud) ID() string {
	return s.D.Get("compartment_id").(string)
func (s *ArtifactsContainerConfigurationResourceCrud) Create() error {
	request := oci_artifacts.UpdateContainerConfigurationRequest{}
func (s *ArtifactsContainerConfigurationResourceCrud) Get() error {
	request := oci_artifacts.GetContainerConfigurationRequest{}
func (s *ArtifactsContainerConfigurationResourceCrud) Update() error {
	request := oci_artifacts.UpdateContainerConfigurationRequest{}
func (s *ArtifactsContainerConfigurationResourceCrud) SetData() error {
	if s.Res.IsRepositoryCreatedOnFirstPush != nil {

=== ./internal/service/artifacts/artifacts_container_repositories_data_source.go ===
func ArtifactsContainerRepositoriesDataSource() *schema.Resource {
	return &schema.Resource{
func readArtifactsContainerRepositories(d *schema.ResourceData, m interface{}) error {
	sync := &ArtifactsContainerRepositoriesDataSourceCrud{}
func (s *ArtifactsContainerRepositoriesDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *ArtifactsContainerRepositoriesDataSourceCrud) Get() error {
	request := oci_artifacts.ListContainerRepositoriesRequest{}
func (s *ArtifactsContainerRepositoriesDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/artifacts/artifacts_container_configuration_data_source.go ===
func ArtifactsContainerConfigurationDataSource() *schema.Resource {
	fieldMap := make(map[string]*schema.Schema)
func readSingularArtifactsContainerConfiguration(d *schema.ResourceData, m interface{}) error {
	sync := &ArtifactsContainerConfigurationDataSourceCrud{}
func (s *ArtifactsContainerConfigurationDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *ArtifactsContainerConfigurationDataSourceCrud) Get() error {
	request := oci_artifacts.GetContainerConfigurationRequest{}
func (s *ArtifactsContainerConfigurationDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/artifacts/artifacts_container_image_data_source.go ===
func ArtifactsContainerImageDataSource() *schema.Resource {
	return &schema.Resource{
func readSingularArtifactsContainerImage(d *schema.ResourceData, m interface{}) error {
	sync := &ArtifactsContainerImageDataSourceCrud{}
func (s *ArtifactsContainerImageDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *ArtifactsContainerImageDataSourceCrud) Get() error {
	request := oci_artifacts.GetContainerImageRequest{}
func (s *ArtifactsContainerImageDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/artifacts/artifacts_generic_artifacts_data_source.go ===
func ArtifactsGenericArtifactsDataSource() *schema.Resource {
	return &schema.Resource{
func readArtifactsGenericArtifacts(d *schema.ResourceData, m interface{}) error {
	sync := &ArtifactsGenericArtifactsDataSourceCrud{}
func (s *ArtifactsGenericArtifactsDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *ArtifactsGenericArtifactsDataSourceCrud) Get() error {
	request := oci_artifacts.ListGenericArtifactsRequest{}
func (s *ArtifactsGenericArtifactsDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/artifacts/register_resource.go ===
func RegisterResource() {
	tfresource.RegisterResource("oci_artifacts_container_configuration", ArtifactsContainerConfigurationResource())

=== ./internal/service/fusion_apps/fusion_apps_fusion_environment_data_masking_activity_resource.go ===
func FusionAppsFusionEnvironmentDataMaskingActivityResource() *schema.Resource {
	return &schema.Resource{
func createFusionAppsFusionEnvironmentDataMaskingActivity(d *schema.ResourceData, m interface{}) error {
	sync := &FusionAppsFusionEnvironmentDataMaskingActivityResourceCrud{}
func readFusionAppsFusionEnvironmentDataMaskingActivity(d *schema.ResourceData, m interface{}) error {
	sync := &FusionAppsFusionEnvironmentDataMaskingActivityResourceCrud{}
func deleteFusionAppsFusionEnvironmentDataMaskingActivity(d *schema.ResourceData, m interface{}) error {
	return nil
func (s *FusionAppsFusionEnvironmentDataMaskingActivityResourceCrud) ID() string {
	return GetFusionEnvironmentDataMaskingActivityCompositeId(s.D.Get("data_masking_activity_id").(string), s.D.Get("fusion_environment_id").(string))
func (s *FusionAppsFusionEnvironmentDataMaskingActivityResourceCrud) CreatedPending() []string {
	return []string{
func (s *FusionAppsFusionEnvironmentDataMaskingActivityResourceCrud) CreatedTarget() []string {
	return []string{
func (s *FusionAppsFusionEnvironmentDataMaskingActivityResourceCrud) DeletedPending() []string {
	return []string{}
func (s *FusionAppsFusionEnvironmentDataMaskingActivityResourceCrud) DeletedTarget() []string {
	return []string{}
func (s *FusionAppsFusionEnvironmentDataMaskingActivityResourceCrud) Create() error {
	request := oci_fusion_apps.CreateDataMaskingActivityRequest{}
func (s *FusionAppsFusionEnvironmentDataMaskingActivityResourceCrud) getFusionEnvironmentDataMaskingActivityFromWorkRequest(workId *string, retryPolicy *oci_common.RetryPolicy,
	actionTypeEnum oci_fusion_apps.WorkRequestResourceActionTypeEnum, timeout time.Duration) error {
func fusionEnvironmentDataMaskingActivityWaitForWorkRequest(wId *string, entityType string, action oci_fusion_apps.WorkRequestResourceActionTypeEnum,
	timeout time.Duration, disableFoundRetries bool, client *oci_fusion_apps.FusionApplicationsClient) (*string, error) {
func getErrorFromFusionAppsFusionEnvironmentDataMaskingActivityWorkRequest(client *oci_fusion_apps.FusionApplicationsClient, workId *string, retryPolicy *oci_common.RetryPolicy, entityType string, action oci_fusion_apps.WorkRequestResourceActionTypeEnum) error {
	response, err := client.ListWorkRequestErrors(context.Background(),
func (s *FusionAppsFusionEnvironmentDataMaskingActivityResourceCrud) Get() error {
	request := oci_fusion_apps.GetDataMaskingActivityRequest{}
func (s *FusionAppsFusionEnvironmentDataMaskingActivityResourceCrud) SetData() error {


=== ./internal/service/fusion_apps/fusion_apps_fusion_environment_time_available_for_refreshs_data_source.go ===
func FusionAppsFusionEnvironmentTimeAvailableForRefreshsDataSource() *schema.Resource {
	return &schema.Resource{
func readFusionAppsFusionEnvironmentTimeAvailableForRefreshs(d *schema.ResourceData, m interface{}) error {
	sync := &FusionAppsFusionEnvironmentTimeAvailableForRefreshsDataSourceCrud{}
func (s *FusionAppsFusionEnvironmentTimeAvailableForRefreshsDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *FusionAppsFusionEnvironmentTimeAvailableForRefreshsDataSourceCrud) Get() error {
	request := oci_fusion_apps.ListTimeAvailableForRefreshesRequest{}
func (s *FusionAppsFusionEnvironmentTimeAvailableForRefreshsDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/fusion_apps/fusion_apps_fusion_environment_status_data_source.go ===
func FusionAppsFusionEnvironmentStatusDataSource() *schema.Resource {
	return &schema.Resource{
func readSingularFusionAppsFusionEnvironmentStatus(d *schema.ResourceData, m interface{}) error {
	sync := &FusionAppsFusionEnvironmentStatusDataSourceCrud{}
func (s *FusionAppsFusionEnvironmentStatusDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *FusionAppsFusionEnvironmentStatusDataSourceCrud) Get() error {
	request := oci_fusion_apps.GetFusionEnvironmentStatusRequest{}
func (s *FusionAppsFusionEnvironmentStatusDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/fusion_apps/fusion_apps_fusion_environment_data_masking_activity_data_source.go ===
func FusionAppsFusionEnvironmentDataMaskingActivityDataSource() *schema.Resource {
	fieldMap := make(map[string]*schema.Schema)
func readSingularFusionAppsFusionEnvironmentDataMaskingActivity(d *schema.ResourceData, m interface{}) error {
	sync := &FusionAppsFusionEnvironmentDataMaskingActivityDataSourceCrud{}
func (s *FusionAppsFusionEnvironmentDataMaskingActivityDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *FusionAppsFusionEnvironmentDataMaskingActivityDataSourceCrud) Get() error {
	request := oci_fusion_apps.GetDataMaskingActivityRequest{}
func (s *FusionAppsFusionEnvironmentDataMaskingActivityDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/fusion_apps/fusion_apps_fusion_environment_data_masking_activities_data_source.go ===
func FusionAppsFusionEnvironmentDataMaskingActivitiesDataSource() *schema.Resource {
	return &schema.Resource{
func readFusionAppsFusionEnvironmentDataMaskingActivities(d *schema.ResourceData, m interface{}) error {
	sync := &FusionAppsFusionEnvironmentDataMaskingActivitiesDataSourceCrud{}
func (s *FusionAppsFusionEnvironmentDataMaskingActivitiesDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *FusionAppsFusionEnvironmentDataMaskingActivitiesDataSourceCrud) Get() error {
	request := oci_fusion_apps.ListDataMaskingActivitiesRequest{}
func (s *FusionAppsFusionEnvironmentDataMaskingActivitiesDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/fusion_apps/fusion_apps_fusion_environment_time_available_for_refresh_data_source.go ===
func FusionAppsFusionEnvironmentTimeAvailableForRefreshDataSource() *schema.Resource {
	return &schema.Resource{
func readSingularFusionAppsFusionEnvironmentTimeAvailableForRefresh(d *schema.ResourceData, m interface{}) error {
	sync := &FusionAppsFusionEnvironmentTimeAvailableForRefreshDataSourceCrud{}
func (s *FusionAppsFusionEnvironmentTimeAvailableForRefreshDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *FusionAppsFusionEnvironmentTimeAvailableForRefreshDataSourceCrud) Get() error {
	request := oci_fusion_apps.ListTimeAvailableForRefreshesRequest{}
func (s *FusionAppsFusionEnvironmentTimeAvailableForRefreshDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/fusion_apps/fusion_apps_fusion_environment_admin_user_resource.go ===
func FusionAppsFusionEnvironmentAdminUserResource() *schema.Resource {
	return &schema.Resource{
func createFusionAppsFusionEnvironmentAdminUser(d *schema.ResourceData, m interface{}) error {
	sync := &FusionAppsFusionEnvironmentAdminUserResourceCrud{}
func readFusionAppsFusionEnvironmentAdminUser(d *schema.ResourceData, m interface{}) error {
	sync := &FusionAppsFusionEnvironmentAdminUserResourceCrud{}
func deleteFusionAppsFusionEnvironmentAdminUser(d *schema.ResourceData, m interface{}) error {
	sync := &FusionAppsFusionEnvironmentAdminUserResourceCrud{}
func (s *FusionAppsFusionEnvironmentAdminUserResourceCrud) ID() string {
	return GetFusionEnvironmentAdminUserCompositeId(s.D.Get("username").(string), s.D.Get("fusion_environment_id").(string))
func (s *FusionAppsFusionEnvironmentAdminUserResourceCrud) Create() error {
	request := oci_fusion_apps.CreateFusionEnvironmentAdminUserRequest{}
func (s *FusionAppsFusionEnvironmentAdminUserResourceCrud) getFusionEnvironmentAdminUserFromWorkRequest(workId *string, retryPolicy *oci_common.RetryPolicy,
	actionTypeEnum oci_fusion_apps.WorkRequestResourceActionTypeEnum, timeout time.Duration) error {
func fusionEnvironmentAdminUserWaitForWorkRequest(wId *string, entityType string, action oci_fusion_apps.WorkRequestResourceActionTypeEnum,
	timeout time.Duration, disableFoundRetries bool, client *oci_fusion_apps.FusionApplicationsClient) (*string, error) {
func getErrorFromFusionAppsFusionEnvironmentAdminUserWorkRequest(client *oci_fusion_apps.FusionApplicationsClient, workId *string, retryPolicy *oci_common.RetryPolicy, entityType string, action oci_fusion_apps.WorkRequestResourceActionTypeEnum) error {
	response, err := client.ListWorkRequestErrors(context.Background(),
func (s *FusionAppsFusionEnvironmentAdminUserResourceCrud) Get() error {
	request := oci_fusion_apps.ListAdminUsersRequest{}
func (s *FusionAppsFusionEnvironmentAdminUserResourceCrud) Delete() error {
	request := oci_fusion_apps.DeleteFusionEnvironmentAdminUserRequest{}
func (s *FusionAppsFusionEnvironmentAdminUserResourceCrud) SetData() error {


=== ./internal/service/fusion_apps/fusion_apps_fusion_environment_family_data_source.go ===
func FusionAppsFusionEnvironmentFamilyDataSource() *schema.Resource {
	fieldMap := make(map[string]*schema.Schema)
func readSingularFusionAppsFusionEnvironmentFamily(d *schema.ResourceData, m interface{}) error {
	sync := &FusionAppsFusionEnvironmentFamilyDataSourceCrud{}
func (s *FusionAppsFusionEnvironmentFamilyDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *FusionAppsFusionEnvironmentFamilyDataSourceCrud) Get() error {
	request := oci_fusion_apps.GetFusionEnvironmentFamilyRequest{}
func (s *FusionAppsFusionEnvironmentFamilyDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/fusion_apps/fusion_apps_fusion_environment_scheduled_activities_data_source.go ===
func FusionAppsFusionEnvironmentScheduledActivitiesDataSource() *schema.Resource {
	return &schema.Resource{
func readFusionAppsFusionEnvironmentScheduledActivities(d *schema.ResourceData, m interface{}) error {
	sync := &FusionAppsFusionEnvironmentScheduledActivitiesDataSourceCrud{}
func (s *FusionAppsFusionEnvironmentScheduledActivitiesDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *FusionAppsFusionEnvironmentScheduledActivitiesDataSourceCrud) Get() error {
	request := oci_fusion_apps.ListScheduledActivitiesRequest{}
func (s *FusionAppsFusionEnvironmentScheduledActivitiesDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/fusion_apps/fusion_apps_fusion_environment_families_data_source.go ===
func FusionAppsFusionEnvironmentFamiliesDataSource() *schema.Resource {
	return &schema.Resource{
func readFusionAppsFusionEnvironmentFamilies(d *schema.ResourceData, m interface{}) error {
	sync := &FusionAppsFusionEnvironmentFamiliesDataSourceCrud{}
func (s *FusionAppsFusionEnvironmentFamiliesDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *FusionAppsFusionEnvironmentFamiliesDataSourceCrud) Get() error {
	request := oci_fusion_apps.ListFusionEnvironmentFamiliesRequest{}
func (s *FusionAppsFusionEnvironmentFamiliesDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/fusion_apps/fusion_apps_fusion_environment_data_source.go ===
func FusionAppsFusionEnvironmentDataSource() *schema.Resource {
	fieldMap := make(map[string]*schema.Schema)
func readSingularFusionAppsFusionEnvironment(d *schema.ResourceData, m interface{}) error {
	sync := &FusionAppsFusionEnvironmentDataSourceCrud{}
func (s *FusionAppsFusionEnvironmentDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *FusionAppsFusionEnvironmentDataSourceCrud) Get() error {
	request := oci_fusion_apps.GetFusionEnvironmentRequest{}
func (s *FusionAppsFusionEnvironmentDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/fusion_apps/fusion_apps_fusion_environment_service_attachment_resource.go ===
func FusionAppsFusionEnvironmentServiceAttachmentResource() *schema.Resource {
	return &schema.Resource{
func createFusionAppsFusionEnvironmentServiceAttachment(d *schema.ResourceData, m interface{}) error {
	sync := &FusionAppsFusionEnvironmentServiceAttachmentResourceCrud{}
func readFusionAppsFusionEnvironmentServiceAttachment(d *schema.ResourceData, m interface{}) error {
	sync := &FusionAppsFusionEnvironmentServiceAttachmentResourceCrud{}
func deleteFusionAppsFusionEnvironmentServiceAttachment(d *schema.ResourceData, m interface{}) error {
	sync := &FusionAppsFusionEnvironmentServiceAttachmentResourceCrud{}
func (s *FusionAppsFusionEnvironmentServiceAttachmentResourceCrud) ID() string {
	return GetFusionEnvironmentServiceAttachmentCompositeId(s.D.Get("fusion_environment_id").(string), *(s.Res).Id)
func (s *FusionAppsFusionEnvironmentServiceAttachmentResourceCrud) CreatedPending() []string {
	return []string{
func (s *FusionAppsFusionEnvironmentServiceAttachmentResourceCrud) CreatedTarget() []string {
	return []string{
func (s *FusionAppsFusionEnvironmentServiceAttachmentResourceCrud) DeletedPending() []string {
	return []string{
func (s *FusionAppsFusionEnvironmentServiceAttachmentResourceCrud) DeletedTarget() []string {
	return []string{
func (s *FusionAppsFusionEnvironmentServiceAttachmentResourceCrud) Create() error {
	request := oci_fusion_apps.CreateServiceAttachmentRequest{}
func (s *FusionAppsFusionEnvironmentServiceAttachmentResourceCrud) setIdFromWorkRequest(workId *string) {
	var identifier *string
func (s *FusionAppsFusionEnvironmentServiceAttachmentResourceCrud) getFusionEnvironmentServiceAttachmentFromWorkRequest(workId *string, retryPolicy *oci_common.RetryPolicy,
	actionTypeEnum oci_fusion_apps.WorkRequestResourceActionTypeEnum, timeout time.Duration) error {
func fusionEnvironmentServiceAttachmentWaitForWorkRequest(wId *string, entityType string, action oci_fusion_apps.WorkRequestResourceActionTypeEnum,
	timeout time.Duration, disableFoundRetries bool, client *oci_fusion_apps.FusionApplicationsClient) (*string, error) {
func getErrorFromFusionAppsFusionEnvironmentServiceAttachmentWorkRequest(client *oci_fusion_apps.FusionApplicationsClient, workId *string, retryPolicy *oci_common.RetryPolicy, entityType string, action oci_fusion_apps.WorkRequestResourceActionTypeEnum) error {
	response, err := client.ListWorkRequestErrors(context.Background(),
func (s *FusionAppsFusionEnvironmentServiceAttachmentResourceCrud) Get() error {
	request := oci_fusion_apps.GetServiceAttachmentRequest{}
func (s *FusionAppsFusionEnvironmentServiceAttachmentResourceCrud) Delete() error {
	request := oci_fusion_apps.DeleteServiceAttachmentRequest{}
func (s *FusionAppsFusionEnvironmentServiceAttachmentResourceCrud) SetData() error {
	fusionEnvironmentId, _, err := parseFusionEnvironmentServiceAttachmentCompositeId(s.D.Id())

=== ./internal/service/fusion_apps/fusion_apps_fusion_environment_service_attachments_data_source.go ===
func FusionAppsFusionEnvironmentServiceAttachmentsDataSource() *schema.Resource {
	return &schema.Resource{
func readFusionAppsFusionEnvironmentServiceAttachments(d *schema.ResourceData, m interface{}) error {
	sync := &FusionAppsFusionEnvironmentServiceAttachmentsDataSourceCrud{}
func (s *FusionAppsFusionEnvironmentServiceAttachmentsDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *FusionAppsFusionEnvironmentServiceAttachmentsDataSourceCrud) Get() error {
	request := oci_fusion_apps.ListServiceAttachmentsRequest{}
func (s *FusionAppsFusionEnvironmentServiceAttachmentsDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/fusion_apps/fusion_apps_fusion_environment_family_resource.go ===
func FusionAppsFusionEnvironmentFamilyResource() *schema.Resource {
	return &schema.Resource{
func createFusionAppsFusionEnvironmentFamily(d *schema.ResourceData, m interface{}) error {
	sync := &FusionAppsFusionEnvironmentFamilyResourceCrud{}
func readFusionAppsFusionEnvironmentFamily(d *schema.ResourceData, m interface{}) error {
	sync := &FusionAppsFusionEnvironmentFamilyResourceCrud{}
func updateFusionAppsFusionEnvironmentFamily(d *schema.ResourceData, m interface{}) error {
	sync := &FusionAppsFusionEnvironmentFamilyResourceCrud{}
func deleteFusionAppsFusionEnvironmentFamily(d *schema.ResourceData, m interface{}) error {
	sync := &FusionAppsFusionEnvironmentFamilyResourceCrud{}
func (s *FusionAppsFusionEnvironmentFamilyResourceCrud) ID() string {
	return *s.Res.Id
func (s *FusionAppsFusionEnvironmentFamilyResourceCrud) CreatedPending() []string {
	return []string{
func (s *FusionAppsFusionEnvironmentFamilyResourceCrud) CreatedTarget() []string {
	return []string{
func (s *FusionAppsFusionEnvironmentFamilyResourceCrud) DeletedPending() []string {
	return []string{
func (s *FusionAppsFusionEnvironmentFamilyResourceCrud) DeletedTarget() []string {
	return []string{
func (s *FusionAppsFusionEnvironmentFamilyResourceCrud) Create() error {
	request := oci_fusion_apps.CreateFusionEnvironmentFamilyRequest{}
func (s *FusionAppsFusionEnvironmentFamilyResourceCrud) getFusionEnvironmentFamilyFromWorkRequest(workId *string, retryPolicy *oci_common.RetryPolicy,
	actionTypeEnum oci_fusion_apps.WorkRequestResourceActionTypeEnum, timeout time.Duration) error {
func fusionEnvironmentFamilyWaitForWorkRequest(wId *string, entityType string, action oci_fusion_apps.WorkRequestResourceActionTypeEnum,
	timeout time.Duration, disableFoundRetries bool, client *oci_fusion_apps.FusionApplicationsClient) (*string, error) {
func getErrorFromFusionAppsFusionEnvironmentFamilyWorkRequest(client *oci_fusion_apps.FusionApplicationsClient, workId *string, retryPolicy *oci_common.RetryPolicy, entityType string, action oci_fusion_apps.WorkRequestResourceActionTypeEnum) error {
	response, err := client.ListWorkRequestErrors(context.Background(),
func (s *FusionAppsFusionEnvironmentFamilyResourceCrud) Get() error {
	request := oci_fusion_apps.GetFusionEnvironmentFamilyRequest{}
func (s *FusionAppsFusionEnvironmentFamilyResourceCrud) Update() error {
	if compartment, ok := s.D.GetOkExists("compartment_id"); ok && s.D.HasChange("compartment_id") {
func (s *FusionAppsFusionEnvironmentFamilyResourceCrud) Delete() error {
	request := oci_fusion_apps.DeleteFusionEnvironmentFamilyRequest{}
func (s *FusionAppsFusionEnvironmentFamilyResourceCrud) SetData() error {
	if s.Res.CompartmentId != nil {
func (s *FusionAppsFusionEnvironmentFamilyResourceCrud) updateCompartment(compartment interface{}) error {
	changeCompartmentRequest := oci_fusion_apps.ChangeFusionEnvironmentFamilyCompartmentRequest{}
func (s *FusionAppsFusionEnvironmentFamilyResourceCrud) mapToFamilyMaintenancePolicy(fieldKeyFormat string) (oci_fusion_apps.FamilyMaintenancePolicy, error) {
	result := oci_fusion_apps.FamilyMaintenancePolicy{}
func (s *FusionAppsFusionEnvironmentFamilyResourceCrud) mapToUpdateFamilyMaintenancePolicyDetails(fieldKeyFormat string) (oci_fusion_apps.UpdateFamilyMaintenancePolicyDetails, error) {
	result := oci_fusion_apps.UpdateFamilyMaintenancePolicyDetails{}

=== ./internal/service/fusion_apps/fusion_apps_fusion_environment_resource.go ===
func FusionAppsFusionEnvironmentResource() *schema.Resource {
	return &schema.Resource{
func createFusionAppsFusionEnvironment(d *schema.ResourceData, m interface{}) error {
	sync := &FusionAppsFusionEnvironmentResourceCrud{}
func readFusionAppsFusionEnvironment(d *schema.ResourceData, m interface{}) error {
	sync := &FusionAppsFusionEnvironmentResourceCrud{}
func updateFusionAppsFusionEnvironment(d *schema.ResourceData, m interface{}) error {
	sync := &FusionAppsFusionEnvironmentResourceCrud{}
func deleteFusionAppsFusionEnvironment(d *schema.ResourceData, m interface{}) error {
	sync := &FusionAppsFusionEnvironmentResourceCrud{}
func (s *FusionAppsFusionEnvironmentResourceCrud) ID() string {
	return *s.Res.Id
func (s *FusionAppsFusionEnvironmentResourceCrud) CreatedPending() []string {
	return []string{
func (s *FusionAppsFusionEnvironmentResourceCrud) CreatedTarget() []string {
	return []string{
func (s *FusionAppsFusionEnvironmentResourceCrud) DeletedPending() []string {
	return []string{
func (s *FusionAppsFusionEnvironmentResourceCrud) DeletedTarget() []string {
	return []string{
func (s *FusionAppsFusionEnvironmentResourceCrud) Create() error {
	request := oci_fusion_apps.CreateFusionEnvironmentRequest{}
func (s *FusionAppsFusionEnvironmentResourceCrud) getFusionEnvironmentFromWorkRequest(workId *string, retryPolicy *oci_common.RetryPolicy,
	actionTypeEnum oci_fusion_apps.WorkRequestResourceActionTypeEnum, timeout time.Duration) error {
func fusionEnvironmentWaitForWorkRequest(wId *string, entityType string, action oci_fusion_apps.WorkRequestResourceActionTypeEnum,
	timeout time.Duration, disableFoundRetries bool, client *oci_fusion_apps.FusionApplicationsClient) (*string, error) {
func getErrorFromFusionAppsFusionEnvironmentWorkRequest(client *oci_fusion_apps.FusionApplicationsClient, workId *string, retryPolicy *oci_common.RetryPolicy, entityType string, action oci_fusion_apps.WorkRequestResourceActionTypeEnum) error {
	response, err := client.ListWorkRequestErrors(context.Background(),
func (s *FusionAppsFusionEnvironmentResourceCrud) Get() error {
	request := oci_fusion_apps.GetFusionEnvironmentRequest{}
func (s *FusionAppsFusionEnvironmentResourceCrud) Update() error {
	if compartment, ok := s.D.GetOkExists("compartment_id"); ok && s.D.HasChange("compartment_id") {
func (s *FusionAppsFusionEnvironmentResourceCrud) Delete() error {
	request := oci_fusion_apps.DeleteFusionEnvironmentRequest{}
func (s *FusionAppsFusionEnvironmentResourceCrud) SetData() error {
	s.D.Set("additional_language_packs", s.Res.AdditionalLanguagePacks)
func (s *FusionAppsFusionEnvironmentResourceCrud) mapToCreateFusionEnvironmentAdminUserDetails(fieldKeyFormat string) (oci_fusion_apps.CreateFusionEnvironmentAdminUserDetails, error) {
	result := oci_fusion_apps.CreateFusionEnvironmentAdminUserDetails{}
func (s *FusionAppsFusionEnvironmentResourceCrud) mapToMaintenancePolicy(fieldKeyFormat string) (oci_fusion_apps.MaintenancePolicy, error) {
	result := oci_fusion_apps.MaintenancePolicy{}
func (s *FusionAppsFusionEnvironmentResourceCrud) mapToRule(fieldKeyFormat string) (oci_fusion_apps.Rule, error) {
	var baseObject oci_fusion_apps.Rule
func (s *FusionAppsFusionEnvironmentResourceCrud) mapToRuleCondition(fieldKeyFormat string) (oci_fusion_apps.RuleCondition, error) {
	var baseObject oci_fusion_apps.RuleCondition
func (s *FusionAppsFusionEnvironmentResourceCrud) updateCompartment(compartment interface{}) error {
	changeCompartmentRequest := oci_fusion_apps.ChangeFusionEnvironmentCompartmentRequest{}

=== ./internal/service/fusion_apps/fusion_apps_fusion_environment_refresh_activity_resource.go ===
func FusionAppsFusionEnvironmentRefreshActivityResource() *schema.Resource {
	return &schema.Resource{
func createFusionAppsFusionEnvironmentRefreshActivity(d *schema.ResourceData, m interface{}) error {
	sync := &FusionAppsFusionEnvironmentRefreshActivityResourceCrud{}
func readFusionAppsFusionEnvironmentRefreshActivity(d *schema.ResourceData, m interface{}) error {
	sync := &FusionAppsFusionEnvironmentRefreshActivityResourceCrud{}
func deleteFusionAppsFusionEnvironmentRefreshActivity(d *schema.ResourceData, m interface{}) error {
	return nil
func (s *FusionAppsFusionEnvironmentRefreshActivityResourceCrud) ID() string {
	return GetFusionEnvironmentRefreshActivityCompositeId(s.D.Get("fusion_environment_id").(string), *(s.Res).Id)
func (s *FusionAppsFusionEnvironmentRefreshActivityResourceCrud) CreatedPending() []string {
	return []string{
func (s *FusionAppsFusionEnvironmentRefreshActivityResourceCrud) CreatedTarget() []string {
	return []string{
func (s *FusionAppsFusionEnvironmentRefreshActivityResourceCrud) DeletedPending() []string {
	return []string{}
func (s *FusionAppsFusionEnvironmentRefreshActivityResourceCrud) DeletedTarget() []string {
	return []string{}
func (s *FusionAppsFusionEnvironmentRefreshActivityResourceCrud) Create() error {
	request := oci_fusion_apps.CreateRefreshActivityRequest{}
func (s *FusionAppsFusionEnvironmentRefreshActivityResourceCrud) setIdFromWorkRequest(workId *string) {
	var identifier *string
func (s *FusionAppsFusionEnvironmentRefreshActivityResourceCrud) getFusionEnvironmentRefreshActivityFromWorkRequest(workId *string, retryPolicy *oci_common.RetryPolicy,
	actionTypeEnum oci_fusion_apps.WorkRequestResourceActionTypeEnum, timeout time.Duration) error {
func fusionEnvironmentRefreshActivityWaitForWorkRequest(wId *string, entityType string, action oci_fusion_apps.WorkRequestResourceActionTypeEnum,
	timeout time.Duration, disableFoundRetries bool, client *oci_fusion_apps.FusionApplicationsClient) (*string, error) {
func getErrorFromFusionAppsFusionEnvironmentRefreshActivityWorkRequest(client *oci_fusion_apps.FusionApplicationsClient, workId *string, retryPolicy *oci_common.RetryPolicy, entityType string, action oci_fusion_apps.WorkRequestResourceActionTypeEnum) error {
	response, err := client.ListWorkRequestErrors(context.Background(),
func (s *FusionAppsFusionEnvironmentRefreshActivityResourceCrud) Get() error {
	request := oci_fusion_apps.GetRefreshActivityRequest{}
func (s *FusionAppsFusionEnvironmentRefreshActivityResourceCrud) SetData() error {


=== ./internal/service/fusion_apps/fusion_apps_fusion_environment_refresh_activity_data_source.go ===
func FusionAppsFusionEnvironmentRefreshActivityDataSource() *schema.Resource {
	fieldMap := make(map[string]*schema.Schema)
func readSingularFusionAppsFusionEnvironmentRefreshActivity(d *schema.ResourceData, m interface{}) error {
	sync := &FusionAppsFusionEnvironmentRefreshActivityDataSourceCrud{}
func (s *FusionAppsFusionEnvironmentRefreshActivityDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *FusionAppsFusionEnvironmentRefreshActivityDataSourceCrud) Get() error {
	request := oci_fusion_apps.GetRefreshActivityRequest{}
func (s *FusionAppsFusionEnvironmentRefreshActivityDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/fusion_apps/fusion_apps_fusion_environment_refresh_activities_data_source.go ===
func FusionAppsFusionEnvironmentRefreshActivitiesDataSource() *schema.Resource {
	return &schema.Resource{
func readFusionAppsFusionEnvironmentRefreshActivities(d *schema.ResourceData, m interface{}) error {
	sync := &FusionAppsFusionEnvironmentRefreshActivitiesDataSourceCrud{}
func (s *FusionAppsFusionEnvironmentRefreshActivitiesDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *FusionAppsFusionEnvironmentRefreshActivitiesDataSourceCrud) Get() error {
	request := oci_fusion_apps.ListRefreshActivitiesRequest{}
func (s *FusionAppsFusionEnvironmentRefreshActivitiesDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/fusion_apps/fusion_apps_fusion_environments_data_source.go ===
func FusionAppsFusionEnvironmentsDataSource() *schema.Resource {
	return &schema.Resource{
func readFusionAppsFusionEnvironments(d *schema.ResourceData, m interface{}) error {
	sync := &FusionAppsFusionEnvironmentsDataSourceCrud{}
func (s *FusionAppsFusionEnvironmentsDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *FusionAppsFusionEnvironmentsDataSourceCrud) Get() error {
	request := oci_fusion_apps.ListFusionEnvironmentsRequest{}
func (s *FusionAppsFusionEnvironmentsDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/fusion_apps/fusion_apps_fusion_environment_family_subscription_detail_data_source.go ===
func FusionAppsFusionEnvironmentFamilySubscriptionDetailDataSource() *schema.Resource {
	return &schema.Resource{
func readSingularFusionAppsFusionEnvironmentFamilySubscriptionDetail(d *schema.ResourceData, m interface{}) error {
	sync := &FusionAppsFusionEnvironmentFamilySubscriptionDetailDataSourceCrud{}
func (s *FusionAppsFusionEnvironmentFamilySubscriptionDetailDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *FusionAppsFusionEnvironmentFamilySubscriptionDetailDataSourceCrud) Get() error {
	request := oci_fusion_apps.GetFusionEnvironmentFamilySubscriptionDetailRequest{}
func (s *FusionAppsFusionEnvironmentFamilySubscriptionDetailDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/fusion_apps/fusion_apps_fusion_environment_admin_users_data_source.go ===
func FusionAppsFusionEnvironmentAdminUsersDataSource() *schema.Resource {
	return &schema.Resource{
func readFusionAppsFusionEnvironmentAdminUsers(d *schema.ResourceData, m interface{}) error {
	sync := &FusionAppsFusionEnvironmentAdminUsersDataSourceCrud{}
func (s *FusionAppsFusionEnvironmentAdminUsersDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *FusionAppsFusionEnvironmentAdminUsersDataSourceCrud) Get() error {
	request := oci_fusion_apps.ListAdminUsersRequest{}
func (s *FusionAppsFusionEnvironmentAdminUsersDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/fusion_apps/fusion_apps_fusion_environment_admin_user_data_source.go ===
func FusionAppsFusionEnvironmentAdminUserDataSource() *schema.Resource {
	fieldMap := make(map[string]*schema.Schema)
func readSingularFusionAppsFusionEnvironmentAdminUser(d *schema.ResourceData, m interface{}) error {
	sync := &FusionAppsFusionEnvironmentAdminUserDataSourceCrud{}
func (s *FusionAppsFusionEnvironmentAdminUserDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *FusionAppsFusionEnvironmentAdminUserDataSourceCrud) Get() error {
	request := oci_fusion_apps.ListAdminUsersRequest{}
func (s *FusionAppsFusionEnvironmentAdminUserDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/fusion_apps/fusion_apps_fusion_environment_family_limits_and_usage_data_source.go ===
func FusionAppsFusionEnvironmentFamilyLimitsAndUsageDataSource() *schema.Resource {
	return &schema.Resource{
func readSingularFusionAppsFusionEnvironmentFamilyLimitsAndUsage(d *schema.ResourceData, m interface{}) error {
	sync := &FusionAppsFusionEnvironmentFamilyLimitsAndUsageDataSourceCrud{}
func (s *FusionAppsFusionEnvironmentFamilyLimitsAndUsageDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *FusionAppsFusionEnvironmentFamilyLimitsAndUsageDataSourceCrud) Get() error {
	request := oci_fusion_apps.GetFusionEnvironmentFamilyLimitsAndUsageRequest{}
func (s *FusionAppsFusionEnvironmentFamilyLimitsAndUsageDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/fusion_apps/fusion_apps_fusion_environment_service_attachment_data_source.go ===
func FusionAppsFusionEnvironmentServiceAttachmentDataSource() *schema.Resource {
	fieldMap := make(map[string]*schema.Schema)
func readSingularFusionAppsFusionEnvironmentServiceAttachment(d *schema.ResourceData, m interface{}) error {
	sync := &FusionAppsFusionEnvironmentServiceAttachmentDataSourceCrud{}
func (s *FusionAppsFusionEnvironmentServiceAttachmentDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *FusionAppsFusionEnvironmentServiceAttachmentDataSourceCrud) Get() error {
	request := oci_fusion_apps.GetServiceAttachmentRequest{}
func (s *FusionAppsFusionEnvironmentServiceAttachmentDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/fusion_apps/fusion_apps_export.go ===
func getFusionAppsFusionEnvironmentRefreshActivityId(resource *tf_export.OCIResource) (string, error) {

func getFusionAppsFusionEnvironmentAdminUserId(resource *tf_export.OCIResource) (string, error) {

func getFusionAppsFusionEnvironmentServiceAttachmentId(resource *tf_export.OCIResource) (string, error) {

func getFusionAppsFusionEnvironmentDataMaskingActivityId(resource *tf_export.OCIResource) (string, error) {


=== ./internal/service/fusion_apps/fusion_apps_fusion_environment_scheduled_activity_data_source.go ===
func FusionAppsFusionEnvironmentScheduledActivityDataSource() *schema.Resource {
	return &schema.Resource{
func readSingularFusionAppsFusionEnvironmentScheduledActivity(d *schema.ResourceData, m interface{}) error {
	sync := &FusionAppsFusionEnvironmentScheduledActivityDataSourceCrud{}
func (s *FusionAppsFusionEnvironmentScheduledActivityDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *FusionAppsFusionEnvironmentScheduledActivityDataSourceCrud) Get() error {
	request := oci_fusion_apps.GetScheduledActivityRequest{}
func (s *FusionAppsFusionEnvironmentScheduledActivityDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/fusion_apps/register_resource.go ===
func RegisterResource() {
	tfresource.RegisterResource("oci_fusion_apps_fusion_environment", FusionAppsFusionEnvironmentResource())

=== ./internal/service/datascience/datascience_pipeline_data_source.go ===
func DatasciencePipelineDataSource() *schema.Resource {
	fieldMap := make(map[string]*schema.Schema)
func readSingularDatasciencePipeline(d *schema.ResourceData, m interface{}) error {
	sync := &DatasciencePipelineDataSourceCrud{}
func (s *DatasciencePipelineDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *DatasciencePipelineDataSourceCrud) Get() error {
	request := oci_datascience.GetPipelineRequest{}
func (s *DatasciencePipelineDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/datascience/datascience_pipelines_data_source.go ===
func DatasciencePipelinesDataSource() *schema.Resource {
	return &schema.Resource{
func readDatasciencePipelines(d *schema.ResourceData, m interface{}) error {
	sync := &DatasciencePipelinesDataSourceCrud{}
func (s *DatasciencePipelinesDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *DatasciencePipelinesDataSourceCrud) Get() error {
	request := oci_datascience.ListPipelinesRequest{}
func (s *DatasciencePipelinesDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/datascience/datascience_pipeline_run_data_source.go ===
func DatasciencePipelineRunDataSource() *schema.Resource {
	fieldMap := make(map[string]*schema.Schema)
func readSingularDatasciencePipelineRun(d *schema.ResourceData, m interface{}) error {
	sync := &DatasciencePipelineRunDataSourceCrud{}
func (s *DatasciencePipelineRunDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *DatasciencePipelineRunDataSourceCrud) Get() error {
	request := oci_datascience.GetPipelineRunRequest{}
func (s *DatasciencePipelineRunDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/datascience/datascience_model_artifact_import_resource.go ===
func DatascienceModelArtifactImportResource() *schema.Resource {
	return &schema.Resource{
func createDatascienceModelArtifactImport(d *schema.ResourceData, m interface{}) error {
	sync := &DatascienceModelArtifactImportResourceCreate{}
func readDatascienceModelArtifactImport(d *schema.ResourceData, m interface{}) error {
	return nil
func deleteDatascienceModelArtifactImport(d *schema.ResourceData, m interface{}) error {
	return nil
func (s *DatascienceModelArtifactImportResourceCreate) ID() string {
	return *s.Res.OpcRequestId
func (s *DatascienceModelArtifactImportResourceCreate) SetData() error {
	return nil
func (s *DatascienceModelArtifactImportResourceCreate) Create() error {
	request := oci_datascience.ImportModelArtifactRequest{}
func (s *DatascienceModelArtifactImportResourceCreate) mapToArtifactImportDetails() (oci_datascience.ArtifactImportDetails, error) {
	var baseObject oci_datascience.ArtifactImportDetails
func modelArtifactImportWaitForWorkRequest(wId *string, entityType string, action oci_datascience.WorkRequestResourceActionTypeEnum,
	timeout time.Duration, disableFoundRetries bool, client *oci_datascience.DataScienceClient) (*string, error) {
func getErrorFromDatascienceModelArtifactImportWorkRequest(client *oci_datascience.DataScienceClient, workId *string, retryPolicy *oci_common.RetryPolicy, entityType string, action oci_datascience.WorkRequestResourceActionTypeEnum) error {
	response, err := client.ListWorkRequestErrors(context.Background(),

=== ./internal/service/datascience/datascience_job_data_source.go ===
func DatascienceJobDataSource() *schema.Resource {
	fieldMap := make(map[string]*schema.Schema)
func readSingularDatascienceJob(d *schema.ResourceData, m interface{}) error {
	sync := &DatascienceJobDataSourceCrud{}
func (s *DatascienceJobDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *DatascienceJobDataSourceCrud) Get() error {
	request := oci_datascience.GetJobRequest{}
func (s *DatascienceJobDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/datascience/datascience_notebook_session_shapes_data_source.go ===
func DatascienceNotebookSessionShapesDataSource() *schema.Resource {
	return &schema.Resource{
func readDatascienceNotebookSessionShapes(d *schema.ResourceData, m interface{}) error {
	sync := &DatascienceNotebookSessionShapesDataSourceCrud{}
func (s *DatascienceNotebookSessionShapesDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *DatascienceNotebookSessionShapesDataSourceCrud) Get() error {
	request := oci_datascience.ListNotebookSessionShapesRequest{}
func (s *DatascienceNotebookSessionShapesDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/datascience/datascience_fast_launch_job_configs_data_source.go ===
func DatascienceFastLaunchJobConfigsDataSource() *schema.Resource {
	return &schema.Resource{
func readDatascienceFastLaunchJobConfigs(d *schema.ResourceData, m interface{}) error {
	sync := &DatascienceFastLaunchJobConfigsDataSourceCrud{}
func (s *DatascienceFastLaunchJobConfigsDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *DatascienceFastLaunchJobConfigsDataSourceCrud) Get() error {
	request := oci_datascience.ListFastLaunchJobConfigsRequest{}
func (s *DatascienceFastLaunchJobConfigsDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/datascience/datascience_model_data_source.go ===
func DatascienceModelDataSource() *schema.Resource {
	fieldMap := make(map[string]*schema.Schema)
func readSingularDatascienceModel(d *schema.ResourceData, m interface{}) error {
	sync := &DatascienceModelDataSourceCrud{}
func (s *DatascienceModelDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *DatascienceModelDataSourceCrud) Get() error {
	request := oci_datascience.GetModelRequest{}
func (s *DatascienceModelDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/datascience/datascience_job_resource.go ===
func DatascienceJobResource() *schema.Resource {
	return &schema.Resource{
func createDatascienceJob(d *schema.ResourceData, m interface{}) error {
	sync := &DatascienceJobResourceCrud{}
func readDatascienceJob(d *schema.ResourceData, m interface{}) error {
	sync := &DatascienceJobResourceCrud{}
func updateDatascienceJob(d *schema.ResourceData, m interface{}) error {
	sync := &DatascienceJobResourceCrud{}
func deleteDatascienceJob(d *schema.ResourceData, m interface{}) error {
	sync := &DatascienceJobResourceCrud{}
func (s *DatascienceJobResourceCrud) ID() string {
	return *s.Res.Id
func (s *DatascienceJobResourceCrud) CreatedPending() []string {
	return []string{}
func (s *DatascienceJobResourceCrud) CreatedTarget() []string {
	return []string{
func (s *DatascienceJobResourceCrud) DeletedPending() []string {
	return []string{
func (s *DatascienceJobResourceCrud) DeletedTarget() []string {
	return []string{
func (s *DatascienceJobResourceCrud) Create() error {
	request := oci_datascience.CreateJobRequest{}
func (s *DatascienceJobResourceCrud) Get() error {
	request := oci_datascience.GetJobRequest{}
func (s *DatascienceJobResourceCrud) Update() error {
	if compartment, ok := s.D.GetOkExists("compartment_id"); ok && s.D.HasChange("compartment_id") {
func (s *DatascienceJobResourceCrud) Delete() error {
	request := oci_datascience.DeleteJobRequest{}
func (s *DatascienceJobResourceCrud) SetData() error {
	if s.Res.CompartmentId != nil {
func (s *DatascienceJobResourceCrud) mapToJobConfigurationDetails(fieldKeyFormat string) (oci_datascience.JobConfigurationDetails, error) {
	var baseObject oci_datascience.JobConfigurationDetails
func (s *DatascienceJobResourceCrud) mapToJobEnvironmentConfigurationDetails(fieldKeyFormat string) (oci_datascience.JobEnvironmentConfigurationDetails, error) {
	var baseObject oci_datascience.JobEnvironmentConfigurationDetails
func (s *DatascienceJobResourceCrud) mapToJobInfrastructureConfigurationDetails(fieldKeyFormat string) (oci_datascience.JobInfrastructureConfigurationDetails, error) {
	var baseObject oci_datascience.JobInfrastructureConfigurationDetails
func (s *DatascienceJobResourceCrud) mapToJobLogConfigurationDetails(fieldKeyFormat string) (oci_datascience.JobLogConfigurationDetails, error) {
	result := oci_datascience.JobLogConfigurationDetails{}
func (s *DatascienceJobResourceCrud) mapToJobShapeConfigDetails(fieldKeyFormat string) (oci_datascience.JobShapeConfigDetails, error) {
	result := oci_datascience.JobShapeConfigDetails{}
func (s *DatascienceJobResourceCrud) mapToStorageMountConfigurationDetails(fieldKeyFormat string) (oci_datascience.StorageMountConfigurationDetails, error) {
	var baseObject oci_datascience.StorageMountConfigurationDetails
func (s *DatascienceJobResourceCrud) updateCompartment(compartment interface{}) error {
	changeCompartmentRequest := oci_datascience.ChangeJobCompartmentRequest{}
func (s *DatascienceJobResourceCrud) CreateArtifact() error {
	request := oci_datascience.CreateJobArtifactRequest{}
func (s *DatascienceJobResourceCrud) GetArtifactHead() error {
	request := oci_datascience.HeadJobArtifactRequest{}
func (s *DatascienceJobResourceCrud) SetArtifactData() error {
	if s.ArtifactHeadRes == nil {

=== ./internal/service/datascience/datascience_pipeline_resource.go ===
func DatasciencePipelineResource() *schema.Resource {
	return &schema.Resource{
func createDatasciencePipeline(d *schema.ResourceData, m interface{}) error {
	sync := &DatasciencePipelineResourceCrud{}
func (s *DatasciencePipelineResourceCrud) CreateArtifact(fieldKeyFormat string) error {
	request := oci_datascience.CreateStepArtifactRequest{}
func readDatasciencePipeline(d *schema.ResourceData, m interface{}) error {
	sync := &DatasciencePipelineResourceCrud{}
func updateDatasciencePipeline(d *schema.ResourceData, m interface{}) error {
	sync := &DatasciencePipelineResourceCrud{}
func deleteDatasciencePipeline(d *schema.ResourceData, m interface{}) error {
	sync := &DatasciencePipelineResourceCrud{}
func (s *DatasciencePipelineResourceCrud) ID() string {
	return *s.Res.Id
func (s *DatasciencePipelineResourceCrud) CreatedPending() []string {
	return []string{
func (s *DatasciencePipelineResourceCrud) CreatedTarget() []string {
	return []string{
func (s *DatasciencePipelineResourceCrud) DeletedPending() []string {
	return []string{
func (s *DatasciencePipelineResourceCrud) DeletedTarget() []string {
	return []string{
func (s *DatasciencePipelineResourceCrud) Create() error {
	request := oci_datascience.CreatePipelineRequest{}
func (s *DatasciencePipelineResourceCrud) getPipelineFromWorkRequest(workId *string, retryPolicy *oci_common.RetryPolicy,
	actionTypeEnum oci_datascience.WorkRequestResourceActionTypeEnum, timeout time.Duration) error {
func pipelineWaitForWorkRequest(wId *string, entityType string, action oci_datascience.WorkRequestResourceActionTypeEnum,
	timeout time.Duration, disableFoundRetries bool, client *oci_datascience.DataScienceClient) (*string, error) {
func getErrorFromDatasciencePipelineWorkRequest(client *oci_datascience.DataScienceClient, workId *string, retryPolicy *oci_common.RetryPolicy, entityType string, action oci_datascience.WorkRequestResourceActionTypeEnum) error {
	response, err := client.ListWorkRequestErrors(context.Background(),
func (s *DatasciencePipelineResourceCrud) Get() error {
	request := oci_datascience.GetPipelineRequest{}
func (s *DatasciencePipelineResourceCrud) Update() error {
	if compartment, ok := s.D.GetOkExists("compartment_id"); ok && s.D.HasChange("compartment_id") {
func (s *DatasciencePipelineResourceCrud) Delete() error {
	request := oci_datascience.DeletePipelineRequest{}
func (s *DatasciencePipelineResourceCrud) SetData() error {
	if s.Res.CompartmentId != nil {
func (s *DatasciencePipelineResourceCrud) mapToPipelineConfigurationDetails(fieldKeyFormat string) (oci_datascience.PipelineConfigurationDetails, error) {
	var baseObject oci_datascience.PipelineConfigurationDetails
func (s *DatasciencePipelineResourceCrud) mapToPipelineContainerConfigurationDetails(fieldKeyFormat string) (oci_datascience.PipelineContainerConfigurationDetails, error) {
	var baseObject oci_datascience.PipelineContainerConfigurationDetails
func (s *DatasciencePipelineResourceCrud) mapToPipelineInfrastructureConfigurationDetails(fieldKeyFormat string) (oci_datascience.PipelineInfrastructureConfigurationDetails, error) {
	result := oci_datascience.PipelineInfrastructureConfigurationDetails{}
func (s *DatasciencePipelineResourceCrud) mapToPipelineLogConfigurationDetails(fieldKeyFormat string) (oci_datascience.PipelineLogConfigurationDetails, error) {
	result := oci_datascience.PipelineLogConfigurationDetails{}
func (s *DatasciencePipelineResourceCrud) mapToPipelineShapeConfigDetails(fieldKeyFormat string) (oci_datascience.PipelineShapeConfigDetails, error) {
	result := oci_datascience.PipelineShapeConfigDetails{}
func (s *DatasciencePipelineResourceCrud) mapToPipelineStepConfigurationDetails(fieldKeyFormat string) (oci_datascience.PipelineStepConfigurationDetails, error) {
	result := oci_datascience.PipelineStepConfigurationDetails{}
func (s *DatasciencePipelineResourceCrud) mapToPipelineStepDetails(fieldKeyFormat string) (oci_datascience.PipelineStepDetails, error) {
	var baseObject oci_datascience.PipelineStepDetails
func (s *DatasciencePipelineResourceCrud) mapToPipelineStepContainerConfigurationDetails(fieldKeyFormat string) (oci_datascience.PipelineStepConfigurationDetails, error) {
	result := oci_datascience.PipelineStepConfigurationDetails{}
func (s *DatasciencePipelineResourceCrud) ExtractPipelineStepDetailsAndCallHeadArtifact(obj oci_datascience.PipelineStepDetails) error {
	switch v := (obj).(type) {
func (s *DatasciencePipelineResourceCrud) mapToPipelineStepUpdateDetails(fieldKeyFormat string) (oci_datascience.PipelineStepUpdateDetails, error) {
	var baseObject oci_datascience.PipelineStepUpdateDetails
func (s *DatasciencePipelineResourceCrud) updateCompartment(compartment interface{}) error {
	changeCompartmentRequest := oci_datascience.ChangePipelineCompartmentRequest{}
func (s *DatasciencePipelineResourceCrud) GetArtifactHead(stepName string) (interface{}, error) {
	request := oci_datascience.HeadStepArtifactRequest{}

=== ./internal/service/datascience/datascience_model_deployment_resource.go ===
func DatascienceModelDeploymentResource() *schema.Resource {
	return &schema.Resource{
func createDatascienceModelDeployment(d *schema.ResourceData, m interface{}) error {
	sync := &DatascienceModelDeploymentResourceCrud{}
func readDatascienceModelDeployment(d *schema.ResourceData, m interface{}) error {
	sync := &DatascienceModelDeploymentResourceCrud{}
func updateDatascienceModelDeployment(d *schema.ResourceData, m interface{}) error {
	sync := &DatascienceModelDeploymentResourceCrud{}
func deleteDatascienceModelDeployment(d *schema.ResourceData, m interface{}) error {
	sync := &DatascienceModelDeploymentResourceCrud{}
func (s *DatascienceModelDeploymentResourceCrud) ID() string {
	return *s.Res.Id
func (s *DatascienceModelDeploymentResourceCrud) CreatedPending() []string {
	return []string{
func (s *DatascienceModelDeploymentResourceCrud) CreatedTarget() []string {
	return []string{
func (s *DatascienceModelDeploymentResourceCrud) DeletedPending() []string {
	return []string{
func (s *DatascienceModelDeploymentResourceCrud) DeletedTarget() []string {
	return []string{
func (s *DatascienceModelDeploymentResourceCrud) UpdatedPending() []string {
	return []string{
func (s *DatascienceModelDeploymentResourceCrud) UpdatedTarget() []string {
	return []string{
func (s *DatascienceModelDeploymentResourceCrud) Create() error {
	request := oci_datascience.CreateModelDeploymentRequest{}
func (s *DatascienceModelDeploymentResourceCrud) getModelDeploymentFromWorkRequest(workId *string, retryPolicy *oci_common.RetryPolicy,
	actionTypeEnum oci_datascience.WorkRequestResourceActionTypeEnum, timeout time.Duration) error {
func modelDeploymentWaitForWorkRequest(wId *string, entityType string, action oci_datascience.WorkRequestResourceActionTypeEnum,
	timeout time.Duration, disableFoundRetries bool, client *oci_datascience.DataScienceClient) (*string, error) {
func getErrorFromDatascienceModelDeploymentWorkRequest(client *oci_datascience.DataScienceClient, workId *string, retryPolicy *oci_common.RetryPolicy, entityType string, action oci_datascience.WorkRequestResourceActionTypeEnum) error {
	response, err := client.ListWorkRequestErrors(context.Background(),
func (s *DatascienceModelDeploymentResourceCrud) Get() error {
	request := oci_datascience.GetModelDeploymentRequest{}
func (s *DatascienceModelDeploymentResourceCrud) Update() error {
	if compartment, ok := s.D.GetOkExists("compartment_id"); ok && s.D.HasChange("compartment_id") {
func (s *DatascienceModelDeploymentResourceCrud) Delete() error {
	request := oci_datascience.DeleteModelDeploymentRequest{}
func (s *DatascienceModelDeploymentResourceCrud) SetData() error {
	if s.Res.CategoryLogDetails != nil {
func (s *DatascienceModelDeploymentResourceCrud) StartModelDeployment() error {
	request := oci_datascience.ActivateModelDeploymentRequest{}
func (s *DatascienceModelDeploymentResourceCrud) StopModelDeployment() error {
	request := oci_datascience.DeactivateModelDeploymentRequest{}
func (s *DatascienceModelDeploymentResourceCrud) mapToAutoScalingPolicyDetails(fieldKeyFormat string) (oci_datascience.AutoScalingPolicyDetails, error) {
	var baseObject oci_datascience.AutoScalingPolicyDetails
func (s *DatascienceModelDeploymentResourceCrud) mapToCategoryLogDetails(fieldKeyFormat string) (oci_datascience.CategoryLogDetails, error) {
	result := oci_datascience.CategoryLogDetails{}
func (s *DatascienceModelDeploymentResourceCrud) mapToUpdateCategoryLogDetails(fieldKeyFormat string) (oci_datascience.UpdateCategoryLogDetails, error) {
	result := oci_datascience.UpdateCategoryLogDetails{}
func (s *DatascienceModelDeploymentResourceCrud) mapToCustomExpressionQueryScalingConfiguration(fieldKeyFormat string) (oci_datascience.CustomExpressionQueryScalingConfiguration, error) {
	result := oci_datascience.CustomExpressionQueryScalingConfiguration{}
func (s *DatascienceModelDeploymentResourceCrud) mapToInstanceConfiguration(fieldKeyFormat string) (oci_datascience.InstanceConfiguration, error) {
	result := oci_datascience.InstanceConfiguration{}
func (s *DatascienceModelDeploymentResourceCrud) mapToLogDetails(fieldKeyFormat string) (oci_datascience.LogDetails, error) {
	result := oci_datascience.LogDetails{}
func (s *DatascienceModelDeploymentResourceCrud) mapToMetricExpressionRule(fieldKeyFormat string) (oci_datascience.MetricExpressionRule, error) {
	var baseObject oci_datascience.MetricExpressionRule
func (s *DatascienceModelDeploymentResourceCrud) mapToModelConfigurationDetails(fieldKeyFormat string) (oci_datascience.ModelConfigurationDetails, error) {
	result := oci_datascience.ModelConfigurationDetails{}
func (s *DatascienceModelDeploymentResourceCrud) mapToUpdateModelConfigurationDetails(fieldKeyFormat string) (oci_datascience.UpdateModelConfigurationDetails, error) {
	result := oci_datascience.UpdateModelConfigurationDetails{}
func (s *DatascienceModelDeploymentResourceCrud) mapToModelDeploymentConfigurationDetails(fieldKeyFormat string) (oci_datascience.ModelDeploymentConfigurationDetails, error) {
	var baseObject oci_datascience.ModelDeploymentConfigurationDetails
func (s *DatascienceModelDeploymentResourceCrud) mapToUpdateModelDeploymentConfigurationDetails(fieldKeyFormat string) (oci_datascience.UpdateModelDeploymentConfigurationDetails, error) {
	var baseObject oci_datascience.UpdateModelDeploymentConfigurationDetails
func (s *DatascienceModelDeploymentResourceCrud) mapToModelDeploymentEnvironmentConfigurationDetails(fieldKeyFormat string) (oci_datascience.ModelDeploymentEnvironmentConfigurationDetails, error) {
	var baseObject oci_datascience.ModelDeploymentEnvironmentConfigurationDetails
func (s *DatascienceModelDeploymentResourceCrud) mapToUpdateModelDeploymentEnvironmentConfigurationDetails(fieldKeyFormat string) (oci_datascience.UpdateModelDeploymentEnvironmentConfigurationDetails, error) {
	var baseObject oci_datascience.UpdateModelDeploymentEnvironmentConfigurationDetails
func (s *DatascienceModelDeploymentResourceCrud) mapToModelDeploymentInstanceShapeConfigDetails(fieldKeyFormat string) (oci_datascience.ModelDeploymentInstanceShapeConfigDetails, error) {
	result := oci_datascience.ModelDeploymentInstanceShapeConfigDetails{}
func (s *DatascienceModelDeploymentResourceCrud) mapToPredefinedExpressionThresholdScalingConfiguration(fieldKeyFormat string) (oci_datascience.PredefinedExpressionThresholdScalingConfiguration, error) {
	result := oci_datascience.PredefinedExpressionThresholdScalingConfiguration{}
func (s *DatascienceModelDeploymentResourceCrud) mapToScalingPolicy(fieldKeyFormat string) (oci_datascience.ScalingPolicy, error) {
	var baseObject oci_datascience.ScalingPolicy
func (s *DatascienceModelDeploymentResourceCrud) updateCompartment(compartment interface{}) error {
	changeCompartmentRequest := oci_datascience.ChangeModelDeploymentCompartmentRequest{}

=== ./internal/service/datascience/datascience_pipeline_runs_data_source.go ===
func DatasciencePipelineRunsDataSource() *schema.Resource {
	return &schema.Resource{
func readDatasciencePipelineRuns(d *schema.ResourceData, m interface{}) error {
	sync := &DatasciencePipelineRunsDataSourceCrud{}
func (s *DatasciencePipelineRunsDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *DatasciencePipelineRunsDataSourceCrud) Get() error {
	request := oci_datascience.ListPipelineRunsRequest{}
func (s *DatasciencePipelineRunsDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/datascience/datascience_jobs_data_source.go ===
func DatascienceJobsDataSource() *schema.Resource {
	return &schema.Resource{
func readDatascienceJobs(d *schema.ResourceData, m interface{}) error {
	sync := &DatascienceJobsDataSourceCrud{}
func (s *DatascienceJobsDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *DatascienceJobsDataSourceCrud) Get() error {
	request := oci_datascience.ListJobsRequest{}
func (s *DatascienceJobsDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/datascience/datascience_job_run_data_source.go ===
func DatascienceJobRunDataSource() *schema.Resource {
	fieldMap := make(map[string]*schema.Schema)
func readSingularDatascienceJobRun(d *schema.ResourceData, m interface{}) error {
	sync := &DatascienceJobRunDataSourceCrud{}
func (s *DatascienceJobRunDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *DatascienceJobRunDataSourceCrud) Get() error {
	request := oci_datascience.GetJobRunRequest{}
func (s *DatascienceJobRunDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/datascience/datascience_job_shapes_data_source.go ===
func DatascienceJobShapesDataSource() *schema.Resource {
	return &schema.Resource{
func readDatascienceJobShapes(d *schema.ResourceData, m interface{}) error {
	sync := &DatascienceJobShapesDataSourceCrud{}
func (s *DatascienceJobShapesDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *DatascienceJobShapesDataSourceCrud) Get() error {
	request := oci_datascience.ListJobShapesRequest{}
func (s *DatascienceJobShapesDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/datascience/datascience_model_artifact_export_resource.go ===
func DatascienceModelArtifactExportResource() *schema.Resource {
	return &schema.Resource{
func createDatascienceModelArtifactExport(d *schema.ResourceData, m interface{}) error {
	sync := &DatascienceModelArtifactExportResourceCreate{}
func readDatascienceModelArtifactExport(d *schema.ResourceData, m interface{}) error {
	return nil
func deleteDatascienceModelArtifactExport(d *schema.ResourceData, m interface{}) error {
	return nil
func (s *DatascienceModelArtifactExportResourceCreate) ID() string {
	return *s.Res.OpcRequestId
func (s *DatascienceModelArtifactExportResourceCreate) SetData() error {
	return nil
func (s *DatascienceModelArtifactExportResourceCreate) Create() error {
	request := oci_datascience.ExportModelArtifactRequest{}
func (s *DatascienceModelArtifactExportResourceCreate) mapToArtifactExportDetails() (oci_datascience.ArtifactExportDetails, error) {
	var baseObject oci_datascience.ArtifactExportDetails
func modelArtifactExportWaitForWorkRequest(wId *string, entityType string, action oci_datascience.WorkRequestResourceActionTypeEnum,
	timeout time.Duration, disableFoundRetries bool, client *oci_datascience.DataScienceClient) (*string, error) {
func getErrorFromDatascienceModelArtifactExportWorkRequest(client *oci_datascience.DataScienceClient, workId *string, retryPolicy *oci_common.RetryPolicy, entityType string, action oci_datascience.WorkRequestResourceActionTypeEnum) error {
	response, err := client.ListWorkRequestErrors(context.Background(),

=== ./internal/service/datascience/datascience_model_version_set_data_source.go ===
func DatascienceModelVersionSetDataSource() *schema.Resource {
	fieldMap := make(map[string]*schema.Schema)
func readSingularDatascienceModelVersionSet(d *schema.ResourceData, m interface{}) error {
	sync := &DatascienceModelVersionSetDataSourceCrud{}
func (s *DatascienceModelVersionSetDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *DatascienceModelVersionSetDataSourceCrud) Get() error {
	request := oci_datascience.GetModelVersionSetRequest{}
func (s *DatascienceModelVersionSetDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/datascience/datascience_job_run_resource.go ===
func DatascienceJobRunResource() *schema.Resource {
	return &schema.Resource{
func createDatascienceJobRun(d *schema.ResourceData, m interface{}) error {
	sync := &DatascienceJobRunResourceCrud{}
func readDatascienceJobRun(d *schema.ResourceData, m interface{}) error {
	sync := &DatascienceJobRunResourceCrud{}
func updateDatascienceJobRun(d *schema.ResourceData, m interface{}) error {
	sync := &DatascienceJobRunResourceCrud{}
func deleteDatascienceJobRun(d *schema.ResourceData, m interface{}) error {
	sync := &DatascienceJobRunResourceCrud{}
func (s *DatascienceJobRunResourceCrud) ID() string {
	return *s.Res.Id
func (s *DatascienceJobRunResourceCrud) CreatedPending() []string {
	invokeAsynchronously := true
func (s *DatascienceJobRunResourceCrud) CreatedTarget() []string {
	invokeAsynchronously := true
func (s *DatascienceJobRunResourceCrud) DeletedPending() []string {
	return []string{}
func (s *DatascienceJobRunResourceCrud) DeletedTarget() []string {
	return []string{
func (s *DatascienceJobRunResourceCrud) Create() error {
	request := oci_datascience.CreateJobRunRequest{}
func (s *DatascienceJobRunResourceCrud) Get() error {
	request := oci_datascience.GetJobRunRequest{}
func (s *DatascienceJobRunResourceCrud) Update() error {
	if compartment, ok := s.D.GetOkExists("compartment_id"); ok && s.D.HasChange("compartment_id") {
func (s *DatascienceJobRunResourceCrud) Delete() error {
	request := oci_datascience.DeleteJobRunRequest{}
func (s *DatascienceJobRunResourceCrud) SetData() error {
	if s.Res.CompartmentId != nil {
func (s *DatascienceJobRunResourceCrud) mapToJobConfigurationDetails(fieldKeyFormat string) (oci_datascience.JobConfigurationDetails, error) {
	var baseObject oci_datascience.JobConfigurationDetails
func (s *DatascienceJobRunResourceCrud) mapToJobEnvironmentConfigurationDetails(fieldKeyFormat string) (oci_datascience.JobEnvironmentConfigurationDetails, error) {
	var baseObject oci_datascience.JobEnvironmentConfigurationDetails
func (s *DatascienceJobRunResourceCrud) mapToJobLogConfigurationDetails(fieldKeyFormat string) (oci_datascience.JobLogConfigurationDetails, error) {
	result := oci_datascience.JobLogConfigurationDetails{}
func (s *DatascienceJobRunResourceCrud) mapToJobShapeConfigDetails(fieldKeyFormat string) (oci_datascience.JobShapeConfigDetails, error) {
	result := oci_datascience.JobShapeConfigDetails{}
func (s *DatascienceJobRunResourceCrud) updateCompartment(compartment interface{}) error {
	changeCompartmentRequest := oci_datascience.ChangeJobRunCompartmentRequest{}

=== ./internal/service/datascience/datascience_job_runs_data_source.go ===
func DatascienceJobRunsDataSource() *schema.Resource {
	return &schema.Resource{
func readDatascienceJobRuns(d *schema.ResourceData, m interface{}) error {
	sync := &DatascienceJobRunsDataSourceCrud{}
func (s *DatascienceJobRunsDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *DatascienceJobRunsDataSourceCrud) Get() error {
	request := oci_datascience.ListJobRunsRequest{}
func (s *DatascienceJobRunsDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/datascience/datascience_model_deployments_data_source.go ===
func DatascienceModelDeploymentsDataSource() *schema.Resource {
	return &schema.Resource{
func readDatascienceModelDeployments(d *schema.ResourceData, m interface{}) error {
	sync := &DatascienceModelDeploymentsDataSourceCrud{}
func (s *DatascienceModelDeploymentsDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *DatascienceModelDeploymentsDataSourceCrud) Get() error {
	request := oci_datascience.ListModelDeploymentsRequest{}
func (s *DatascienceModelDeploymentsDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/datascience/datascience_notebook_session_data_source.go ===
func DatascienceNotebookSessionDataSource() *schema.Resource {
	fieldMap := make(map[string]*schema.Schema)
func readSingularDatascienceNotebookSession(d *schema.ResourceData, m interface{}) error {
	sync := &DatascienceNotebookSessionDataSourceCrud{}
func (s *DatascienceNotebookSessionDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *DatascienceNotebookSessionDataSourceCrud) Get() error {
	request := oci_datascience.GetNotebookSessionRequest{}
func (s *DatascienceNotebookSessionDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/datascience/datascience_project_data_source.go ===
func DatascienceProjectDataSource() *schema.Resource {
	fieldMap := make(map[string]*schema.Schema)
func readSingularDatascienceProject(d *schema.ResourceData, m interface{}) error {
	sync := &DatascienceProjectDataSourceCrud{}
func (s *DatascienceProjectDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *DatascienceProjectDataSourceCrud) Get() error {
	request := oci_datascience.GetProjectRequest{}
func (s *DatascienceProjectDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/datascience/datascience_model_provenance_resource.go ===
func DatascienceModelProvenanceResource() *schema.Resource {
	return &schema.Resource{
func createDatascienceModelProvenance(d *schema.ResourceData, m interface{}) error {
	sync := &DatascienceModelProvenanceResourceCrud{}
func readDatascienceModelProvenance(d *schema.ResourceData, m interface{}) error {
	sync := &DatascienceModelProvenanceResourceCrud{}
func updateDatascienceModelProvenance(d *schema.ResourceData, m interface{}) error {
	sync := &DatascienceModelProvenanceResourceCrud{}
func deleteDatascienceModelProvenance(d *schema.ResourceData, m interface{}) error {
	return nil
func (s *DatascienceModelProvenanceResourceCrud) ID() string {
	return GetModelProvenanceCompositeId(s.D.Get("model_id").(string))
func (s *DatascienceModelProvenanceResourceCrud) Create() error {
	request := oci_datascience.CreateModelProvenanceRequest{}
func (s *DatascienceModelProvenanceResourceCrud) Get() error {
	request := oci_datascience.GetModelProvenanceRequest{}
func (s *DatascienceModelProvenanceResourceCrud) Update() error {
	request := oci_datascience.UpdateModelProvenanceRequest{}
func (s *DatascienceModelProvenanceResourceCrud) SetData() error {


=== ./internal/service/datascience/datascience_projects_data_source.go ===
func DatascienceProjectsDataSource() *schema.Resource {
	return &schema.Resource{
func readDatascienceProjects(d *schema.ResourceData, m interface{}) error {
	sync := &DatascienceProjectsDataSourceCrud{}
func (s *DatascienceProjectsDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *DatascienceProjectsDataSourceCrud) Get() error {
	request := oci_datascience.ListProjectsRequest{}
func (s *DatascienceProjectsDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/datascience/datascience_model_version_sets_data_source.go ===
func DatascienceModelVersionSetsDataSource() *schema.Resource {
	return &schema.Resource{
func readDatascienceModelVersionSets(d *schema.ResourceData, m interface{}) error {
	sync := &DatascienceModelVersionSetsDataSourceCrud{}
func (s *DatascienceModelVersionSetsDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *DatascienceModelVersionSetsDataSourceCrud) Get() error {
	request := oci_datascience.ListModelVersionSetsRequest{}
func (s *DatascienceModelVersionSetsDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/datascience/datascience_model_deployment_shapes_data_source.go ===
func DatascienceModelDeploymentShapesDataSource() *schema.Resource {
	return &schema.Resource{
func readDatascienceModelDeploymentShapes(d *schema.ResourceData, m interface{}) error {
	sync := &DatascienceModelDeploymentShapesDataSourceCrud{}
func (s *DatascienceModelDeploymentShapesDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *DatascienceModelDeploymentShapesDataSourceCrud) Get() error {
	request := oci_datascience.ListModelDeploymentShapesRequest{}
func (s *DatascienceModelDeploymentShapesDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/datascience/datascience_data_science_private_endpoint_resource.go ===
func DatasciencePrivateEndpointResource() *schema.Resource {
	return &schema.Resource{
func createDatascienceDataSciencePrivateEndpoint(d *schema.ResourceData, m interface{}) error {
	sync := &DatascienceDataSciencePrivateEndpointResourceCrud{}
func readDatascienceDataSciencePrivateEndpoint(d *schema.ResourceData, m interface{}) error {
	sync := &DatascienceDataSciencePrivateEndpointResourceCrud{}
func updateDatascienceDataSciencePrivateEndpoint(d *schema.ResourceData, m interface{}) error {
	sync := &DatascienceDataSciencePrivateEndpointResourceCrud{}
func deleteDatascienceDataSciencePrivateEndpoint(d *schema.ResourceData, m interface{}) error {
	sync := &DatascienceDataSciencePrivateEndpointResourceCrud{}
func (s *DatascienceDataSciencePrivateEndpointResourceCrud) ID() string {
	return *s.Res.Id
func (s *DatascienceDataSciencePrivateEndpointResourceCrud) CreatedPending() []string {
	return []string{
func (s *DatascienceDataSciencePrivateEndpointResourceCrud) CreatedTarget() []string {
	return []string{
func (s *DatascienceDataSciencePrivateEndpointResourceCrud) DeletedPending() []string {
	return []string{
func (s *DatascienceDataSciencePrivateEndpointResourceCrud) DeletedTarget() []string {
	return []string{
func (s *DatascienceDataSciencePrivateEndpointResourceCrud) Create() error {
	request := oci_datascience.CreateDataSciencePrivateEndpointRequest{}
func (s *DatascienceDataSciencePrivateEndpointResourceCrud) getDataSciencePrivateEndpointFromWorkRequest(workId *string, retryPolicy *oci_common.RetryPolicy,
	actionTypeEnum oci_datascience.WorkRequestResourceActionTypeEnum, timeout time.Duration) error {
func dataSciencePrivateEndpointWaitForWorkRequest(wId *string, entityType string, action oci_datascience.WorkRequestResourceActionTypeEnum,
	timeout time.Duration, disableFoundRetries bool, client *oci_datascience.DataScienceClient) (*string, error) {
func getErrorFromDatascienceDataSciencePrivateEndpointWorkRequest(client *oci_datascience.DataScienceClient, workId *string, retryPolicy *oci_common.RetryPolicy, entityType string, action oci_datascience.WorkRequestResourceActionTypeEnum) error {
	response, err := client.ListWorkRequestErrors(context.Background(),
func (s *DatascienceDataSciencePrivateEndpointResourceCrud) Get() error {
	request := oci_datascience.GetDataSciencePrivateEndpointRequest{}
func (s *DatascienceDataSciencePrivateEndpointResourceCrud) Update() error {
	if compartment, ok := s.D.GetOkExists("compartment_id"); ok && s.D.HasChange("compartment_id") {
func (s *DatascienceDataSciencePrivateEndpointResourceCrud) Delete() error {
	request := oci_datascience.DeleteDataSciencePrivateEndpointRequest{}
func (s *DatascienceDataSciencePrivateEndpointResourceCrud) SetData() error {
	if s.Res.CompartmentId != nil {
func (s *DatascienceDataSciencePrivateEndpointResourceCrud) updateCompartment(compartment interface{}) error {
	changeCompartmentRequest := oci_datascience.ChangeDataSciencePrivateEndpointCompartmentRequest{}

=== ./internal/service/datascience/datascience_data_science_private_endpoint_data_source.go ===
func DatasciencePrivateEndpointDataSource() *schema.Resource {
	fieldMap := make(map[string]*schema.Schema)
func readSingularDatascienceDataSciencePrivateEndpoint(d *schema.ResourceData, m interface{}) error {
	sync := &DatascienceDataSciencePrivateEndpointDataSourceCrud{}
func (s *DatascienceDataSciencePrivateEndpointDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *DatascienceDataSciencePrivateEndpointDataSourceCrud) Get() error {
	request := oci_datascience.GetDataSciencePrivateEndpointRequest{}
func (s *DatascienceDataSciencePrivateEndpointDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/datascience/datascience_notebook_session_resource.go ===
func DatascienceNotebookSessionResource() *schema.Resource {
	return &schema.Resource{
func createDatascienceNotebookSession(d *schema.ResourceData, m interface{}) error {
	sync := &DatascienceNotebookSessionResourceCrud{}
func readDatascienceNotebookSession(d *schema.ResourceData, m interface{}) error {
	sync := &DatascienceNotebookSessionResourceCrud{}
func updateDatascienceNotebookSession(d *schema.ResourceData, m interface{}) error {
	sync := &DatascienceNotebookSessionResourceCrud{}
func deleteDatascienceNotebookSession(d *schema.ResourceData, m interface{}) error {
	sync := &DatascienceNotebookSessionResourceCrud{}
func (s *DatascienceNotebookSessionResourceCrud) ID() string {
	return *s.Res.Id
func (s *DatascienceNotebookSessionResourceCrud) CreatedPending() []string {
	return []string{
func (s *DatascienceNotebookSessionResourceCrud) CreatedTarget() []string {
	return []string{
func (s *DatascienceNotebookSessionResourceCrud) DeletedPending() []string {
	return []string{
func (s *DatascienceNotebookSessionResourceCrud) DeletedTarget() []string {
	return []string{
func (s *DatascienceNotebookSessionResourceCrud) Create() error {
	request := oci_datascience.CreateNotebookSessionRequest{}
func (s *DatascienceNotebookSessionResourceCrud) Get() error {
	request := oci_datascience.GetNotebookSessionRequest{}
func (s *DatascienceNotebookSessionResourceCrud) Update() error {
	if compartment, ok := s.D.GetOkExists("compartment_id"); ok && s.D.HasChange("compartment_id") {
func (s *DatascienceNotebookSessionResourceCrud) Delete() error {
	request := oci_datascience.DeleteNotebookSessionRequest{}
func (s *DatascienceNotebookSessionResourceCrud) SetData() error {
	if s.Res.CompartmentId != nil {
func (s *DatascienceNotebookSessionResourceCrud) mapToNotebookSessionConfigDetails(fieldKeyFormat string) (oci_datascience.NotebookSessionConfigDetails, error) {
	result := oci_datascience.NotebookSessionConfigDetails{}
func (s *DatascienceNotebookSessionResourceCrud) mapToNotebookSessionConfigurationDetails(fieldKeyFormat string) (oci_datascience.NotebookSessionConfigurationDetails, error) {
	result := oci_datascience.NotebookSessionConfigurationDetails{}
func (s *DatascienceNotebookSessionResourceCrud) mapToNotebookSessionGitConfigDetails(fieldKeyFormat string) (oci_datascience.NotebookSessionGitConfigDetails, error) {
	result := oci_datascience.NotebookSessionGitConfigDetails{}
func (s *DatascienceNotebookSessionResourceCrud) mapToNotebookSessionGitRepoConfigDetails(fieldKeyFormat string) (oci_datascience.NotebookSessionGitRepoConfigDetails, error) {
	result := oci_datascience.NotebookSessionGitRepoConfigDetails{}
func (s *DatascienceNotebookSessionResourceCrud) mapToNotebookSessionRuntimeConfigDetails(fieldKeyFormat string) (oci_datascience.NotebookSessionRuntimeConfigDetails, error) {
	result := oci_datascience.NotebookSessionRuntimeConfigDetails{}
func (s *DatascienceNotebookSessionResourceCrud) mapToNotebookSessionShapeConfigDetails(fieldKeyFormat string) (oci_datascience.NotebookSessionShapeConfigDetails, error) {
	result := oci_datascience.NotebookSessionShapeConfigDetails{}
func (s *DatascienceNotebookSessionResourceCrud) mapToStorageMountConfigurationDetails(fieldKeyFormat string) (oci_datascience.StorageMountConfigurationDetails, error) {
	var baseObject oci_datascience.StorageMountConfigurationDetails
func (s *DatascienceNotebookSessionResourceCrud) updateCompartment(compartment interface{}) error {
	changeCompartmentRequest := oci_datascience.ChangeNotebookSessionCompartmentRequest{}
func (s *DatascienceNotebookSessionResourceCrud) ActivateNotebookSession() error {
	request := oci_datascience.ActivateNotebookSessionRequest{}
func (s *DatascienceNotebookSessionResourceCrud) DeactivateNotebookSession() error {
	request := oci_datascience.DeactivateNotebookSessionRequest{}

=== ./internal/service/datascience/datascience_model_resource.go ===
func DatascienceModelResource() *schema.Resource {
	return &schema.Resource{
func createDatascienceModel(d *schema.ResourceData, m interface{}) error {
	sync := &DatascienceModelResourceCrud{}
func readDatascienceModel(d *schema.ResourceData, m interface{}) error {
	sync := &DatascienceModelResourceCrud{}
func updateDatascienceModel(d *schema.ResourceData, m interface{}) error {
	sync := &DatascienceModelResourceCrud{}
func deleteDatascienceModel(d *schema.ResourceData, m interface{}) error {
	sync := &DatascienceModelResourceCrud{}
func (s *DatascienceModelResourceCrud) ID() string {
	return *s.Res.Id
func (s *DatascienceModelResourceCrud) CreatedPending() []string {
	return []string{}
func (s *DatascienceModelResourceCrud) CreatedTarget() []string {
	return []string{
func (s *DatascienceModelResourceCrud) DeletedPending() []string {
	return []string{}
func (s *DatascienceModelResourceCrud) DeletedTarget() []string {
	return []string{
func (s *DatascienceModelResourceCrud) Create() error {
	request := oci_datascience.CreateModelRequest{}
func (s *DatascienceModelResourceCrud) Get() error {
	request := oci_datascience.GetModelRequest{}
func (s *DatascienceModelResourceCrud) Update() error {
	if compartment, ok := s.D.GetOkExists("compartment_id"); ok && s.D.HasChange("compartment_id") {
func (s *DatascienceModelResourceCrud) Delete() error {
	request := oci_datascience.DeleteModelRequest{}
func (s *DatascienceModelResourceCrud) SetData() error {
	if s.Res.BackupOperationDetails != nil {
func (s *DatascienceModelResourceCrud) mapToBackupSetting(fieldKeyFormat string) (oci_datascience.BackupSetting, error) {
	result := oci_datascience.BackupSetting{}
func (s *DatascienceModelResourceCrud) mapToMetadata(fieldKeyFormat string) (oci_datascience.Metadata, error) {
	result := oci_datascience.Metadata{}
func (s *DatascienceModelResourceCrud) mapToMetadataDefined(fieldKeyFormat string) (oci_datascience.Metadata, error) {
	result := oci_datascience.Metadata{}
func (s *DatascienceModelResourceCrud) mapToRetentionSetting(fieldKeyFormat string) (oci_datascience.RetentionSetting, error) {
	result := oci_datascience.RetentionSetting{}
func (s *DatascienceModelResourceCrud) updateCompartment(compartment interface{}) error {
	changeCompartmentRequest := oci_datascience.ChangeModelCompartmentRequest{}
func (s *DatascienceModelResourceCrud) ActivateModel() error {
	request := oci_datascience.ActivateModelRequest{}
func (s *DatascienceModelResourceCrud) DeactivateModel() error {
	request := oci_datascience.DeactivateModelRequest{}
func (s *DatascienceModelResourceCrud) CreateArtifact() error {
	request := oci_datascience.CreateModelArtifactRequest{}
func (s *DatascienceModelResourceCrud) GetArtifactHead() error {
	request := oci_datascience.HeadModelArtifactRequest{}
func (s *DatascienceModelResourceCrud) SetArtifactData() error {
	if s.ArtifactHeadRes != nil {

=== ./internal/service/datascience/datascience_model_deployment_data_source.go ===
func DatascienceModelDeploymentDataSource() *schema.Resource {
	fieldMap := make(map[string]*schema.Schema)
func readSingularDatascienceModelDeployment(d *schema.ResourceData, m interface{}) error {
	sync := &DatascienceModelDeploymentDataSourceCrud{}
func (s *DatascienceModelDeploymentDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *DatascienceModelDeploymentDataSourceCrud) Get() error {
	request := oci_datascience.GetModelDeploymentRequest{}
func (s *DatascienceModelDeploymentDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/datascience/datascience_model_provenance_data_source.go ===
func DatascienceModelProvenanceDataSource() *schema.Resource {
	fieldMap := make(map[string]*schema.Schema)
func readSingularDatascienceModelProvenance(d *schema.ResourceData, m interface{}) error {
	sync := &DatascienceModelProvenanceDataSourceCrud{}
func (s *DatascienceModelProvenanceDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *DatascienceModelProvenanceDataSourceCrud) Get() error {
	request := oci_datascience.GetModelProvenanceRequest{}
func (s *DatascienceModelProvenanceDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/datascience/datascience_notebook_sessions_data_source.go ===
func DatascienceNotebookSessionsDataSource() *schema.Resource {
	return &schema.Resource{
func readDatascienceNotebookSessions(d *schema.ResourceData, m interface{}) error {
	sync := &DatascienceNotebookSessionsDataSourceCrud{}
func (s *DatascienceNotebookSessionsDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *DatascienceNotebookSessionsDataSourceCrud) Get() error {
	request := oci_datascience.ListNotebookSessionsRequest{}
func (s *DatascienceNotebookSessionsDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/datascience/datascience_export.go ===
func getDatascienceModelProvenanceId(resource *tf_export.OCIResource) (string, error) {


=== ./internal/service/datascience/datascience_data_science_private_endpoints_data_source.go ===
func DatasciencePrivateEndpointsDataSource() *schema.Resource {
	return &schema.Resource{
func readDatascienceDataSciencePrivateEndpoints(d *schema.ResourceData, m interface{}) error {
	sync := &DatascienceDataSciencePrivateEndpointsDataSourceCrud{}
func (s *DatascienceDataSciencePrivateEndpointsDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *DatascienceDataSciencePrivateEndpointsDataSourceCrud) Get() error {
	request := oci_datascience.ListDataSciencePrivateEndpointsRequest{}
func (s *DatascienceDataSciencePrivateEndpointsDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/datascience/datascience_model_version_set_resource.go ===
func DatascienceModelVersionSetResource() *schema.Resource {
	return &schema.Resource{
func createDatascienceModelVersionSet(d *schema.ResourceData, m interface{}) error {
	sync := &DatascienceModelVersionSetResourceCrud{}
func readDatascienceModelVersionSet(d *schema.ResourceData, m interface{}) error {
	sync := &DatascienceModelVersionSetResourceCrud{}
func updateDatascienceModelVersionSet(d *schema.ResourceData, m interface{}) error {
	sync := &DatascienceModelVersionSetResourceCrud{}
func deleteDatascienceModelVersionSet(d *schema.ResourceData, m interface{}) error {
	sync := &DatascienceModelVersionSetResourceCrud{}
func (s *DatascienceModelVersionSetResourceCrud) ID() string {
	return *s.Res.Id
func (s *DatascienceModelVersionSetResourceCrud) CreatedPending() []string {
	return []string{}
func (s *DatascienceModelVersionSetResourceCrud) CreatedTarget() []string {
	return []string{
func (s *DatascienceModelVersionSetResourceCrud) DeletedPending() []string {
	return []string{
func (s *DatascienceModelVersionSetResourceCrud) DeletedTarget() []string {
	return []string{
func (s *DatascienceModelVersionSetResourceCrud) Create() error {
	request := oci_datascience.CreateModelVersionSetRequest{}
func (s *DatascienceModelVersionSetResourceCrud) getModelVersionSetFromWorkRequest(workId *string, retryPolicy *oci_common.RetryPolicy,
	actionTypeEnum oci_datascience.WorkRequestResourceActionTypeEnum, timeout time.Duration) error {
func modelVersionSetWaitForWorkRequest(wId *string, entityType string, action oci_datascience.WorkRequestResourceActionTypeEnum,
	timeout time.Duration, disableFoundRetries bool, client *oci_datascience.DataScienceClient) (*string, error) {
func getErrorFromDatascienceModelVersionSetWorkRequest(client *oci_datascience.DataScienceClient, workId *string, retryPolicy *oci_common.RetryPolicy, entityType string, action oci_datascience.WorkRequestResourceActionTypeEnum) error {
	response, err := client.ListWorkRequestErrors(context.Background(),
func (s *DatascienceModelVersionSetResourceCrud) Get() error {
	request := oci_datascience.GetModelVersionSetRequest{}
func (s *DatascienceModelVersionSetResourceCrud) Update() error {
	if compartment, ok := s.D.GetOkExists("compartment_id"); ok && s.D.HasChange("compartment_id") {
func (s *DatascienceModelVersionSetResourceCrud) Delete() error {
	request := oci_datascience.DeleteModelVersionSetRequest{}
func (s *DatascienceModelVersionSetResourceCrud) SetData() error {
	if s.Res.CompartmentId != nil {
func (s *DatascienceModelVersionSetResourceCrud) updateCompartment(compartment interface{}) error {
	changeCompartmentRequest := oci_datascience.ChangeModelVersionSetCompartmentRequest{}

=== ./internal/service/datascience/datascience_models_data_source.go ===
func DatascienceModelsDataSource() *schema.Resource {
	return &schema.Resource{
func readDatascienceModels(d *schema.ResourceData, m interface{}) error {
	sync := &DatascienceModelsDataSourceCrud{}
func (s *DatascienceModelsDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *DatascienceModelsDataSourceCrud) Get() error {
	request := oci_datascience.ListModelsRequest{}
func (s *DatascienceModelsDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/datascience/register_resource.go ===
func RegisterResource() {
	tfresource.RegisterResource("oci_datascience_private_endpoint", DatasciencePrivateEndpointResource())

=== ./internal/service/datascience/datascience_project_resource.go ===
func DatascienceProjectResource() *schema.Resource {
	return &schema.Resource{
func createDatascienceProject(d *schema.ResourceData, m interface{}) error {
	sync := &DatascienceProjectResourceCrud{}
func readDatascienceProject(d *schema.ResourceData, m interface{}) error {
	sync := &DatascienceProjectResourceCrud{}
func updateDatascienceProject(d *schema.ResourceData, m interface{}) error {
	sync := &DatascienceProjectResourceCrud{}
func deleteDatascienceProject(d *schema.ResourceData, m interface{}) error {
	sync := &DatascienceProjectResourceCrud{}
func (s *DatascienceProjectResourceCrud) ID() string {
	return *s.Res.Id
func (s *DatascienceProjectResourceCrud) CreatedPending() []string {
	return []string{}
func (s *DatascienceProjectResourceCrud) CreatedTarget() []string {
	return []string{
func (s *DatascienceProjectResourceCrud) DeletedPending() []string {
	return []string{
func (s *DatascienceProjectResourceCrud) DeletedTarget() []string {
	return []string{
func (s *DatascienceProjectResourceCrud) Create() error {
	request := oci_datascience.CreateProjectRequest{}
func (s *DatascienceProjectResourceCrud) Get() error {
	request := oci_datascience.GetProjectRequest{}
func (s *DatascienceProjectResourceCrud) Update() error {
	if compartment, ok := s.D.GetOkExists("compartment_id"); ok && s.D.HasChange("compartment_id") {
func (s *DatascienceProjectResourceCrud) Delete() error {
	request := oci_datascience.DeleteProjectRequest{}
func (s *DatascienceProjectResourceCrud) SetData() error {
	if s.Res.CompartmentId != nil {
func (s *DatascienceProjectResourceCrud) updateCompartment(compartment interface{}) error {
	changeCompartmentRequest := oci_datascience.ChangeProjectCompartmentRequest{}

=== ./internal/service/datascience/datascience_pipeline_run_resource.go ===
func DatasciencePipelineRunResource() *schema.Resource {
	return &schema.Resource{
func createDatasciencePipelineRun(d *schema.ResourceData, m interface{}) error {
	sync := &DatasciencePipelineRunResourceCrud{}
func readDatasciencePipelineRun(d *schema.ResourceData, m interface{}) error {
	sync := &DatasciencePipelineRunResourceCrud{}
func updateDatasciencePipelineRun(d *schema.ResourceData, m interface{}) error {
	sync := &DatasciencePipelineRunResourceCrud{}
func deleteDatasciencePipelineRun(d *schema.ResourceData, m interface{}) error {
	sync := &DatasciencePipelineRunResourceCrud{}
func (s *DatasciencePipelineRunResourceCrud) ID() string {
	return *s.Res.Id
func (s *DatasciencePipelineRunResourceCrud) CreatedPending() []string {
	// invokeAsynchronously := true
func (s *DatasciencePipelineRunResourceCrud) CreatedTarget() []string {
	return []string{
func (s *DatasciencePipelineRunResourceCrud) DeletedPending() []string {
	return []string{
func (s *DatasciencePipelineRunResourceCrud) DeletedTarget() []string {
	return []string{
func (s *DatasciencePipelineRunResourceCrud) Create() error {
	request := oci_datascience.CreatePipelineRunRequest{}
func (s *DatasciencePipelineRunResourceCrud) Get() error {
	request := oci_datascience.GetPipelineRunRequest{}
func (s *DatasciencePipelineRunResourceCrud) Update() error {
	if compartment, ok := s.D.GetOkExists("compartment_id"); ok && s.D.HasChange("compartment_id") {
func (s *DatasciencePipelineRunResourceCrud) Delete() error {
	request := oci_datascience.DeletePipelineRunRequest{}
func (s *DatasciencePipelineRunResourceCrud) SetData() error {
	if s.Res.CompartmentId != nil {
func (s *DatasciencePipelineRunResourceCrud) mapToPipelineConfigurationDetails(fieldKeyFormat string) (oci_datascience.PipelineConfigurationDetails, error) {
	var baseObject oci_datascience.PipelineConfigurationDetails
func (s *DatasciencePipelineRunResourceCrud) mapToPipelineStepContainerConfigurationDetails(fieldKeyFormat string) (oci_datascience.PipelineContainerConfigurationDetails, error) {
	var baseObject oci_datascience.PipelineContainerConfigurationDetails
func (s *DatasciencePipelineRunResourceCrud) mapToPipelineLogConfigurationDetails(fieldKeyFormat string) (oci_datascience.PipelineLogConfigurationDetails, error) {
	result := oci_datascience.PipelineLogConfigurationDetails{}
func (s *DatasciencePipelineRunResourceCrud) mapToPipelineStepConfigurationDetails(fieldKeyFormat string) (oci_datascience.PipelineStepConfigurationDetails, error) {
	result := oci_datascience.PipelineStepConfigurationDetails{}
func (s *DatasciencePipelineRunResourceCrud) mapToPipelineStepOverrideDetails(fieldKeyFormat string) (oci_datascience.PipelineStepOverrideDetails, error) {
	result := oci_datascience.PipelineStepOverrideDetails{}
func (s *DatasciencePipelineRunResourceCrud) updateCompartment(compartment interface{}) error {
	changeCompartmentRequest := oci_datascience.ChangePipelineRunCompartmentRequest{}

=== ./internal/service/vn_monitoring/vn_monitoring_path_analyzer_test_resource.go ===
func VnMonitoringPathAnalyzerTestResource() *schema.Resource {
	return &schema.Resource{
func createVnMonitoringPathAnalyzerTest(d *schema.ResourceData, m interface{}) error {
	sync := &VnMonitoringPathAnalyzerTestResourceCrud{}
func readVnMonitoringPathAnalyzerTest(d *schema.ResourceData, m interface{}) error {
	sync := &VnMonitoringPathAnalyzerTestResourceCrud{}
func updateVnMonitoringPathAnalyzerTest(d *schema.ResourceData, m interface{}) error {
	sync := &VnMonitoringPathAnalyzerTestResourceCrud{}
func deleteVnMonitoringPathAnalyzerTest(d *schema.ResourceData, m interface{}) error {
	sync := &VnMonitoringPathAnalyzerTestResourceCrud{}
func (s *VnMonitoringPathAnalyzerTestResourceCrud) ID() string {
	return *s.Res.Id
func (s *VnMonitoringPathAnalyzerTestResourceCrud) CreatedPending() []string {
	return []string{}
func (s *VnMonitoringPathAnalyzerTestResourceCrud) CreatedTarget() []string {
	return []string{
func (s *VnMonitoringPathAnalyzerTestResourceCrud) DeletedPending() []string {
	return []string{}
func (s *VnMonitoringPathAnalyzerTestResourceCrud) DeletedTarget() []string {
	return []string{
func (s *VnMonitoringPathAnalyzerTestResourceCrud) Create() error {
	request := oci_vn_monitoring.CreatePathAnalyzerTestRequest{}
func (s *VnMonitoringPathAnalyzerTestResourceCrud) Get() error {
	request := oci_vn_monitoring.GetPathAnalyzerTestRequest{}
func (s *VnMonitoringPathAnalyzerTestResourceCrud) Update() error {
	if compartment, ok := s.D.GetOkExists("compartment_id"); ok && s.D.HasChange("compartment_id") {
func (s *VnMonitoringPathAnalyzerTestResourceCrud) Delete() error {
	request := oci_vn_monitoring.DeletePathAnalyzerTestRequest{}
func (s *VnMonitoringPathAnalyzerTestResourceCrud) SetData() error {
	if s.Res.CompartmentId != nil {
func (s *VnMonitoringPathAnalyzerTestResourceCrud) mapToEndpoint(fieldKeyFormat string) (oci_vn_monitoring.Endpoint, error) {
	var baseObject oci_vn_monitoring.Endpoint
func (s *VnMonitoringPathAnalyzerTestResourceCrud) mapToProtocolParameters(fieldKeyFormat string) (oci_vn_monitoring.ProtocolParameters, error) {
	var baseObject oci_vn_monitoring.ProtocolParameters
func (s *VnMonitoringPathAnalyzerTestResourceCrud) mapToQueryOptions(fieldKeyFormat string) (oci_vn_monitoring.QueryOptions, error) {
	result := oci_vn_monitoring.QueryOptions{}
func (s *VnMonitoringPathAnalyzerTestResourceCrud) updateCompartment(compartment interface{}) error {
	changeCompartmentRequest := oci_vn_monitoring.ChangePathAnalyzerTestCompartmentRequest{}

=== ./internal/service/vn_monitoring/vn_monitoring_path_analysi_resource.go ===
func VnMonitoringPathAnalysiResource() *schema.Resource {
	return &schema.Resource{
func createVnMonitoringPathAnalysi(d *schema.ResourceData, m interface{}) error {
	sync := &VnMonitoringPathAnalysiResourceCrud{}
func readVnMonitoringPathAnalysi(d *schema.ResourceData, m interface{}) error {
	return nil
func deleteVnMonitoringPathAnalysi(d *schema.ResourceData, m interface{}) error {
	return nil
func (s *VnMonitoringPathAnalysiResourceCrud) ID() string {
	return s.D.Id()
func (s *VnMonitoringPathAnalysiResourceCrud) Create() error {
	request := oci_vn_monitoring.GetPathAnalysisRequest{}
func (s *VnMonitoringPathAnalysiResourceCrud) getPathAnalysiFromWorkRequest(workId *string, retryPolicy *oci_common.RetryPolicy,
	actionTypeEnum oci_vn_monitoring.ActionTypeEnum, timeout time.Duration) error {
func (s *VnMonitoringPathAnalysiResourceCrud) SetData() error {
	return nil
func (s *VnMonitoringPathAnalysiResourceCrud) mapToEndpoint(fieldKeyFormat string) (oci_vn_monitoring.Endpoint, error) {
	var baseObject oci_vn_monitoring.Endpoint
func (s *VnMonitoringPathAnalysiResourceCrud) mapToProtocolParameters(fieldKeyFormat string) (oci_vn_monitoring.ProtocolParameters, error) {
	var baseObject oci_vn_monitoring.ProtocolParameters
func (s *VnMonitoringPathAnalysiResourceCrud) mapToQueryOptions(fieldKeyFormat string) (oci_vn_monitoring.QueryOptions, error) {
	result := oci_vn_monitoring.QueryOptions{}
func (s *VnMonitoringPathAnalysiResourceCrud) populateTopLevelPolymorphicGetPathAnalysisRequest(request *oci_vn_monitoring.GetPathAnalysisRequest) error {
	//discriminator

=== ./internal/service/vn_monitoring/vn_monitoring_path_analyzer_tests_data_source.go ===
func VnMonitoringPathAnalyzerTestsDataSource() *schema.Resource {
	return &schema.Resource{
func readVnMonitoringPathAnalyzerTests(d *schema.ResourceData, m interface{}) error {
	sync := &VnMonitoringPathAnalyzerTestsDataSourceCrud{}
func (s *VnMonitoringPathAnalyzerTestsDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *VnMonitoringPathAnalyzerTestsDataSourceCrud) Get() error {
	request := oci_vn_monitoring.ListPathAnalyzerTestsRequest{}
func (s *VnMonitoringPathAnalyzerTestsDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/vn_monitoring/vn_monitoring_path_analyzer_test_data_source.go ===
func VnMonitoringPathAnalyzerTestDataSource() *schema.Resource {
	fieldMap := make(map[string]*schema.Schema)
func readSingularVnMonitoringPathAnalyzerTest(d *schema.ResourceData, m interface{}) error {
	sync := &VnMonitoringPathAnalyzerTestDataSourceCrud{}
func (s *VnMonitoringPathAnalyzerTestDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *VnMonitoringPathAnalyzerTestDataSourceCrud) Get() error {
	request := oci_vn_monitoring.GetPathAnalyzerTestRequest{}
func (s *VnMonitoringPathAnalyzerTestDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/vn_monitoring/register_resource.go ===
func RegisterResource() {
	tfresource.RegisterResource("oci_vn_monitoring_path_analysi", VnMonitoringPathAnalysiResource())

=== ./internal/service/vault/vault_secret_version_data_source.go ===
func VaultSecretVersionDataSource() *schema.Resource {
	return &schema.Resource{
func readSingularVaultSecretVersion(d *schema.ResourceData, m interface{}) error {
	sync := &VaultSecretVersionDataSourceCrud{}
func (s *VaultSecretVersionDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *VaultSecretVersionDataSourceCrud) Get() error {
	request := oci_vault.GetSecretVersionRequest{}
func (s *VaultSecretVersionDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/vault/vault_secrets_data_source.go ===
func VaultSecretsDataSource() *schema.Resource {
	return &schema.Resource{
func readVaultSecrets(d *schema.ResourceData, m interface{}) error {
	sync := &VaultSecretsDataSourceCrud{}
func (s *VaultSecretsDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *VaultSecretsDataSourceCrud) Get() error {
	request := oci_vault.ListSecretsRequest{}
func (s *VaultSecretsDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/vault/vault_secret_resource.go ===
func VaultSecretResource() *schema.Resource {
	return &schema.Resource{
func createVaultSecret(d *schema.ResourceData, m interface{}) error {
	sync := &VaultSecretResourceCrud{}
func readVaultSecret(d *schema.ResourceData, m interface{}) error {
	sync := &VaultSecretResourceCrud{}
func updateVaultSecret(d *schema.ResourceData, m interface{}) error {
	sync := &VaultSecretResourceCrud{}
func deleteVaultSecret(d *schema.ResourceData, m interface{}) error {
	sync := &VaultSecretResourceCrud{}
func (s *VaultSecretResourceCrud) ID() string {
	return *s.Res.Id
func (s *VaultSecretResourceCrud) CreatedPending() []string {
	return []string{
func (s *VaultSecretResourceCrud) CreatedTarget() []string {
	return []string{
func (s *VaultSecretResourceCrud) DeletedPending() []string {
	return []string{
func (s *VaultSecretResourceCrud) DeletedTarget() []string {
	return []string{
func (s *VaultSecretResourceCrud) Create() error {
	request := oci_vault.CreateSecretRequest{}
func (s *VaultSecretResourceCrud) Get() error {
	request := oci_vault.GetSecretRequest{}
func (s *VaultSecretResourceCrud) Update() error {
	if compartment, ok := s.D.GetOkExists("compartment_id"); ok && s.D.HasChange("compartment_id") {
func (s *VaultSecretResourceCrud) Delete() error {
	request := oci_vault.ScheduleSecretDeletionRequest{}
func (s *VaultSecretResourceCrud) SetData() error {
	if s.Res.CompartmentId != nil {
func (s *VaultSecretResourceCrud) mapToRotationConfig(fieldKeyFormat string) (oci_vault.RotationConfig, error) {
	result := oci_vault.RotationConfig{}
func (s *VaultSecretResourceCrud) mapToSecretContentDetails(fieldKeyFormat string) (oci_vault.SecretContentDetails, error) {
	var baseObject oci_vault.SecretContentDetails
func (s *VaultSecretResourceCrud) mapToSecretRule(fieldKeyFormat string) (oci_vault.SecretRule, error) {
	var baseObject oci_vault.SecretRule
func (s *VaultSecretResourceCrud) mapToTargetSystemDetails(fieldKeyFormat string) (oci_vault.TargetSystemDetails, error) {
	var baseObject oci_vault.TargetSystemDetails
func (s *VaultSecretResourceCrud) updateCompartment(compartment interface{}) error {
	changeCompartmentRequest := oci_vault.ChangeSecretCompartmentRequest{}

=== ./internal/service/vault/vault_secret_data_source.go ===
func VaultSecretDataSource() *schema.Resource {
	fieldMap := make(map[string]*schema.Schema)
func readSingularVaultSecret(d *schema.ResourceData, m interface{}) error {
	sync := &VaultSecretDataSourceCrud{}
func (s *VaultSecretDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *VaultSecretDataSourceCrud) Get() error {
	request := oci_vault.GetSecretRequest{}
func (s *VaultSecretDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/vault/register_resource.go ===
func RegisterResource() {
	tfresource.RegisterResource("oci_vault_secret", VaultSecretResource())

=== ./internal/service/apm/apm_data_keys_data_source.go ===
func ApmDataKeysDataSource() *schema.Resource {
	return &schema.Resource{
func readApmDataKeys(d *schema.ResourceData, m interface{}) error {
	sync := &ApmDataKeysDataSourceCrud{}
func (s *ApmDataKeysDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *ApmDataKeysDataSourceCrud) Get() error {
	request := oci_apm.ListDataKeysRequest{}
func (s *ApmDataKeysDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/apm/apm_apm_domain_data_source.go ===
func ApmApmDomainDataSource() *schema.Resource {
	fieldMap := make(map[string]*schema.Schema)
func readSingularApmApmDomain(d *schema.ResourceData, m interface{}) error {
	sync := &ApmApmDomainDataSourceCrud{}
func (s *ApmApmDomainDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *ApmApmDomainDataSourceCrud) Get() error {
	request := oci_apm.GetApmDomainRequest{}
func (s *ApmApmDomainDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/apm/apm_apm_domains_data_source.go ===
func ApmApmDomainsDataSource() *schema.Resource {
	return &schema.Resource{
func readApmApmDomains(d *schema.ResourceData, m interface{}) error {
	sync := &ApmApmDomainsDataSourceCrud{}
func (s *ApmApmDomainsDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *ApmApmDomainsDataSourceCrud) Get() error {
	request := oci_apm.ListApmDomainsRequest{}
func (s *ApmApmDomainsDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/apm/apm_apm_domain_resource.go ===
func ApmApmDomainResource() *schema.Resource {
	return &schema.Resource{
func createApmApmDomain(d *schema.ResourceData, m interface{}) error {
	sync := &ApmApmDomainResourceCrud{}
func readApmApmDomain(d *schema.ResourceData, m interface{}) error {
	sync := &ApmApmDomainResourceCrud{}
func updateApmApmDomain(d *schema.ResourceData, m interface{}) error {
	sync := &ApmApmDomainResourceCrud{}
func deleteApmApmDomain(d *schema.ResourceData, m interface{}) error {
	sync := &ApmApmDomainResourceCrud{}
func (s *ApmApmDomainResourceCrud) ID() string {
	return *s.Res.Id
func (s *ApmApmDomainResourceCrud) CreatedPending() []string {
	return []string{
func (s *ApmApmDomainResourceCrud) CreatedTarget() []string {
	return []string{
func (s *ApmApmDomainResourceCrud) DeletedPending() []string {
	return []string{
func (s *ApmApmDomainResourceCrud) DeletedTarget() []string {
	return []string{
func (s *ApmApmDomainResourceCrud) Create() error {
	request := oci_apm.CreateApmDomainRequest{}
func (s *ApmApmDomainResourceCrud) getApmDomainFromWorkRequest(workId *string, retryPolicy *oci_common.RetryPolicy,
	actionTypeEnum oci_apm.ActionTypesEnum, timeout time.Duration) error {
func (s *ApmApmDomainResourceCrud) Get() error {
	request := oci_apm.GetApmDomainRequest{}
func (s *ApmApmDomainResourceCrud) Update() error {
	if compartment, ok := s.D.GetOkExists("compartment_id"); ok && s.D.HasChange("compartment_id") {
func (s *ApmApmDomainResourceCrud) Delete() error {
	request := oci_apm.DeleteApmDomainRequest{}
func (s *ApmApmDomainResourceCrud) SetData() error {
	if s.Res.CompartmentId != nil {
func (s *ApmApmDomainResourceCrud) updateCompartment(compartment interface{}) error {
	changeCompartmentRequest := oci_apm.ChangeApmDomainCompartmentRequest{}

=== ./internal/service/apm/register_resource.go ===
func RegisterResource() {
	tfresource.RegisterResource("oci_apm_apm_domain", ApmApmDomainResource())

=== ./internal/service/management_dashboard/management_dashboard_management_dashboards_export_data_source.go ===
func ManagementDashboardManagementDashboardsExportDataSource() *schema.Resource {
	return &schema.Resource{
func readSingularManagementDashboardManagementDashboardsExport(d *schema.ResourceData, m interface{}) error {
	sync := &ManagementDashboardManagementDashboardsExportDataSourceCrud{}
func (s *ManagementDashboardManagementDashboardsExportDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *ManagementDashboardManagementDashboardsExportDataSourceCrud) Get() error {
	request := oci_management_dashboard.ExportDashboardRequest{}
func (s *ManagementDashboardManagementDashboardsExportDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/management_dashboard/management_dashboard_management_dashboards_import_resource.go ===
func ManagementDashboardManagementDashboardsImportResource() *schema.Resource {
	return &schema.Resource{
func createManagementDashboardManagementDashboardsImport(d *schema.ResourceData, m interface{}) error {
	sync := &ManagementDashboardManagementDashboardsImportResourceCrud{}
func readManagementDashboardManagementDashboardsImport(d *schema.ResourceData, m interface{}) error {
	return nil
func deleteManagementDashboardManagementDashboardsImport(d *schema.ResourceData, m interface{}) error {
	return nil
func (s *ManagementDashboardManagementDashboardsImportResourceCrud) ID() string {
	return tfresource.GenerateDataSourceHashID("ManagementDashboardManagementDashboardsImportResource-", ManagementDashboardManagementDashboardsImportResource(), s.D)
func (s *ManagementDashboardManagementDashboardsImportResourceCrud) Create() error {
	request := oci_management_dashboard.ImportDashboardRequest{}
func (s *ManagementDashboardManagementDashboardsImportResourceCrud) SetData() error {
	return nil

=== ./internal/service/management_dashboard/register_resource.go ===
func RegisterResource() {
	tfresource.RegisterResource("oci_management_dashboard_management_dashboards_import", ManagementDashboardManagementDashboardsImportResource())

=== ./internal/service/integration/integration_integration_instance_private_endpoint_outbound_connection.go ===
func IntegrationPrivateEndpointOutboundConnectionResource() *schema.Resource {
	return &schema.Resource{
func deletePEOC(d *schema.ResourceData, m interface{}) error {
	c := m.(*client.OracleClients).IntegrationInstanceClient()
func createIntegrationPrivateEndpointOutboundConnection(d *schema.ResourceData, m interface{}) error {
	instanceId := d.Get("integration_instance_id").(string)
func readIntegrationPrivateEndpointOutboundConnection(d *schema.ResourceData, m interface{}) error {
	sync := &IntegrationPrivateEndpointOutboundConnectionResourceCrud{}
func updateIntegrationPrivateEndpointOutboundConnection(d *schema.ResourceData, m interface{}) error {
	return nil
func deleteIntegrationPrivateEndpointOutboundConnection(d *schema.ResourceData, m interface{}) error {
	sync := &IntegrationPrivateEndpointOutboundConnectionResourceCrud{}
func (s *IntegrationPrivateEndpointOutboundConnectionResourceCrud) ID() string {
	return toPEId(*s.Res.IntegrationInstanceId)
func (s *IntegrationPrivateEndpointOutboundConnectionResourceCrud) CreatedPending() []string {
	return []string{
func (s *IntegrationPrivateEndpointOutboundConnectionResourceCrud) CreatedTarget() []string {
	return []string{
func (s *IntegrationPrivateEndpointOutboundConnectionResourceCrud) DeletedPending() []string {
	return []string{
func (s *IntegrationPrivateEndpointOutboundConnectionResourceCrud) DeletedTarget() []string {
	return []string{
func (s *IntegrationPrivateEndpointOutboundConnectionResourceCrud) Create() error {
	request := oci_integration.ChangePrivateEndpointOutboundConnectionRequest{}
func (s *IntegrationPrivateEndpointOutboundConnectionResourceCrud) getIntegrationInstanceFromWorkRequest(workId *string, retryPolicy *oci_common.RetryPolicy,
	actionTypeEnum oci_integration.WorkRequestResourceActionTypeEnum, timeout time.Duration) error {
func (s *IntegrationPrivateEndpointOutboundConnectionResourceCrud) Get() error {
	request := oci_integration.GetIntegrationInstanceRequest{}
func (s *IntegrationPrivateEndpointOutboundConnectionResourceCrud) Update() error {
	return nil
func (s *IntegrationPrivateEndpointOutboundConnectionResourceCrud) Delete() error {
	request := oci_integration.ChangePrivateEndpointOutboundConnectionRequest{}
func (s *IntegrationPrivateEndpointOutboundConnectionResourceCrud) SetData() error {
	s.D.Set("integration_instance_id", s.Res.IntegrationInstanceId)

=== ./internal/service/integration/integration_integration_instance_data_source.go ===
func IntegrationIntegrationInstanceDataSource() *schema.Resource {
	fieldMap := make(map[string]*schema.Schema)
func readSingularIntegrationIntegrationInstance(d *schema.ResourceData, m interface{}) error {
	sync := &IntegrationIntegrationInstanceDataSourceCrud{}
func (s *IntegrationIntegrationInstanceDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *IntegrationIntegrationInstanceDataSourceCrud) Get() error {
	request := oci_integration.GetIntegrationInstanceRequest{}
func (s *IntegrationIntegrationInstanceDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/integration/integration_integration_instance_resource.go ===
func IntegrationIntegrationInstanceResource() *schema.Resource {
	return &schema.Resource{
func createIntegrationIntegrationInstance(d *schema.ResourceData, m interface{}) error {
	sync := &IntegrationIntegrationInstanceResourceCrud{}
func powerOffIntegrationInstance(d *schema.ResourceData, sync *IntegrationIntegrationInstanceResourceCrud) error {
	if err := sync.StopIntegerationInstance(); err != nil {
func readIntegrationIntegrationInstance(d *schema.ResourceData, m interface{}) error {
	sync := &IntegrationIntegrationInstanceResourceCrud{}
func updateIntegrationIntegrationInstance(d *schema.ResourceData, m interface{}) error {
	sync := &IntegrationIntegrationInstanceResourceCrud{}
func deleteIntegrationIntegrationInstance(d *schema.ResourceData, m interface{}) error {
	sync := &IntegrationIntegrationInstanceResourceCrud{}
func (s *IntegrationIntegrationInstanceResourceCrud) ID() string {
	return *s.Res.Id
func (s *IntegrationIntegrationInstanceResourceCrud) CreatedPending() []string {
	return []string{
func (s *IntegrationIntegrationInstanceResourceCrud) CreatedTarget() []string {
	return []string{
func (s *IntegrationIntegrationInstanceResourceCrud) DeletedPending() []string {
	return []string{
func (s *IntegrationIntegrationInstanceResourceCrud) DeletedTarget() []string {
	return []string{
func (s *IntegrationIntegrationInstanceResourceCrud) Create() error {
	request := oci_integration.CreateIntegrationInstanceRequest{}
func (s *IntegrationIntegrationInstanceResourceCrud) getIntegrationInstanceFromWorkRequest(workId *string, retryPolicy *oci_common.RetryPolicy,
	actionTypeEnum oci_integration.WorkRequestResourceActionTypeEnum, timeout time.Duration) error {
func integrationInstanceWaitForWorkRequest(wId *string, entityType string, action oci_integration.WorkRequestResourceActionTypeEnum,
	timeout time.Duration, disableFoundRetries bool, client *oci_integration.IntegrationInstanceClient) (*string, error) {
func getErrorFromIntegrationIntegrationInstanceWorkRequest(client *oci_integration.IntegrationInstanceClient, compartmentId *string, workId *string, retryPolicy *oci_common.RetryPolicy, entityType string, action oci_integration.WorkRequestResourceActionTypeEnum) error {
	response, err := client.ListWorkRequestErrors(context.Background(),
func (s *IntegrationIntegrationInstanceResourceCrud) Get() error {
	request := oci_integration.GetIntegrationInstanceRequest{}
func (s *IntegrationIntegrationInstanceResourceCrud) Update() error {
	if compartment, ok := s.D.GetOkExists("compartment_id"); ok && s.D.HasChange("compartment_id") {
func (s *IntegrationIntegrationInstanceResourceCrud) Delete() error {
	request := oci_integration.DeleteIntegrationInstanceRequest{}
func (s *IntegrationIntegrationInstanceResourceCrud) SetData() error {
	alternateCustomEndpoints := []interface{}{}
func (s *IntegrationIntegrationInstanceResourceCrud) AddOracleManagedCustomEndpoint() error {
	request := oci_integration.AddOracleManagedCustomEndpointRequest{}
func (s *IntegrationIntegrationInstanceResourceCrud) EnableProcessAutomation() error {
	request := oci_integration.EnableProcessAutomationRequest{}
func (s *IntegrationIntegrationInstanceResourceCrud) ExtendDataRetention() error {
	request := oci_integration.ExtendDataRetentionRequest{}
func (s *IntegrationIntegrationInstanceResourceCrud) RemoveOracleManagedCustomEndpoint() error {
	request := oci_integration.RemoveOracleManagedCustomEndpointRequest{}
func (s *IntegrationIntegrationInstanceResourceCrud) DisasterRecoveryFailover() error {
	request := oci_integration.DisasterRecoveryFailoverRequest{}
func (s *IntegrationIntegrationInstanceResourceCrud) mapToCreateCustomEndpointDetails(fieldKeyFormat string) (oci_integration.CreateCustomEndpointDetails, error) {
	result := oci_integration.CreateCustomEndpointDetails{}
func (s *IntegrationIntegrationInstanceResourceCrud) mapToUpdateCustomEndpointDetails(fieldKeyFormat string) (oci_integration.UpdateCustomEndpointDetails, error) {
	result := oci_integration.UpdateCustomEndpointDetails{}
func (s *IntegrationIntegrationInstanceResourceCrud) mapToCustomEndpointDetails(fieldKeyFormat string) (oci_integration.CustomEndpointDetails, error) {
	result := oci_integration.CustomEndpointDetails{}
func (s *IntegrationIntegrationInstanceResourceCrud) mapToNetworkEndpointDetails(fieldKeyFormat string) (oci_integration.NetworkEndpointDetails, error) {
	var baseObject oci_integration.NetworkEndpointDetails
func (s *IntegrationIntegrationInstanceResourceCrud) mapToVirtualCloudNetwork(fieldKeyFormat string) (oci_integration.VirtualCloudNetwork, error) {
	result := oci_integration.VirtualCloudNetwork{}
func (s *IntegrationIntegrationInstanceResourceCrud) updateCompartment(compartment interface{}) error {
	changeCompartmentRequest := oci_integration.ChangeIntegrationInstanceCompartmentRequest{}
func (s *IntegrationIntegrationInstanceResourceCrud) StartIntegerationInstance() error {
	state := oci_integration.IntegrationInstanceLifecycleStateActive
func (s *IntegrationIntegrationInstanceResourceCrud) StopIntegerationInstance() error {
	state := oci_integration.IntegrationInstanceLifecycleStateInactive

=== ./internal/service/integration/integration_integration_instances_data_source.go ===
func IntegrationIntegrationInstancesDataSource() *schema.Resource {
	return &schema.Resource{
func readIntegrationIntegrationInstances(d *schema.ResourceData, m interface{}) error {
	sync := &IntegrationIntegrationInstancesDataSourceCrud{}
func (s *IntegrationIntegrationInstancesDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *IntegrationIntegrationInstancesDataSourceCrud) Get() error {
	request := oci_integration.ListIntegrationInstancesRequest{}
func (s *IntegrationIntegrationInstancesDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/integration/integration_integration_instance_custom_endpoint.go ===
func IntegrationCustomEndpointResource() *schema.Resource {
	return &schema.Resource{
func createIntegrationCustomEndpoint(d *schema.ResourceData, m interface{}) error {
	instanceId := d.Get("integration_instance_id").(string)
func readIntegrationCustomEndpoint(d *schema.ResourceData, m interface{}) error {
	sync := &IntegrationCustomEndpointResourceCrud{}
func updateIntegrationCustomEndpoint(d *schema.ResourceData, m interface{}) error {
	return nil
func deleteIntegrationCustomEndpoint(d *schema.ResourceData, m interface{}) error {
	sync := &IntegrationCustomEndpointResourceCrud{}
func (s *IntegrationCustomEndpointResourceCrud) ID() string {
	return toCustomEndpointId(*s.Res.IntegrationInstanceId)
func (s *IntegrationCustomEndpointResourceCrud) CreatedPending() []string {
	return []string{
func (s *IntegrationCustomEndpointResourceCrud) CreatedTarget() []string {
	return []string{
func (s *IntegrationCustomEndpointResourceCrud) DeletedPending() []string {
	return []string{
func (s *IntegrationCustomEndpointResourceCrud) DeletedTarget() []string {
	return []string{
func (s *IntegrationCustomEndpointResourceCrud) Create() error {
	request := oci_integration.AddOracleManagedCustomEndpointRequest{}
func (s *IntegrationCustomEndpointResourceCrud) getIntegrationInstanceFromWorkRequest(workId *string, retryPolicy *oci_common.RetryPolicy,
	actionTypeEnum oci_integration.WorkRequestResourceActionTypeEnum, timeout time.Duration) error {
func (s *IntegrationCustomEndpointResourceCrud) Get() error {
	request := oci_integration.GetIntegrationInstanceRequest{}
func (s *IntegrationCustomEndpointResourceCrud) Update() error {
	return nil
func (s *IntegrationCustomEndpointResourceCrud) Delete() error {
	request := oci_integration.RemoveOracleManagedCustomEndpointRequest{}
func (s *IntegrationCustomEndpointResourceCrud) SetData() error {
	s.D.Set("integration_instance_id", s.Res.IntegrationInstanceId)

=== ./internal/service/integration/register_resource.go ===
func RegisterResource() {
	tfresource.RegisterResource("oci_integration_integration_instance", IntegrationIntegrationInstanceResource())

=== ./internal/service/capacity_management/capacity_management_occ_customer_groups_data_source.go ===
func CapacityManagementOccCustomerGroupsDataSource() *schema.Resource {
	return &schema.Resource{
func readCapacityManagementOccCustomerGroups(d *schema.ResourceData, m interface{}) error {
	sync := &CapacityManagementOccCustomerGroupsDataSourceCrud{}
func (s *CapacityManagementOccCustomerGroupsDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *CapacityManagementOccCustomerGroupsDataSourceCrud) Get() error {
	request := oci_capacity_management.ListOccCustomerGroupsRequest{}
func (s *CapacityManagementOccCustomerGroupsDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/capacity_management/capacity_management_internal_occ_handover_resource_block_details_data_source.go ===
func CapacityManagementInternalOccHandoverResourceBlockDetailsDataSource() *schema.Resource {
	return &schema.Resource{
func readCapacityManagementInternalOccHandoverResourceBlockDetails(d *schema.ResourceData, m interface{}) error {
	sync := &CapacityManagementInternalOccHandoverResourceBlockDetailsDataSourceCrud{}
func (s *CapacityManagementInternalOccHandoverResourceBlockDetailsDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *CapacityManagementInternalOccHandoverResourceBlockDetailsDataSourceCrud) Get() error {
	request := oci_capacity_management.ListInternalOccHandoverResourceBlockDetailsRequest{}
func (s *CapacityManagementInternalOccHandoverResourceBlockDetailsDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/capacity_management/capacity_management_internal_occ_handover_resource_blocks_data_source.go ===
func CapacityManagementInternalOccHandoverResourceBlocksDataSource() *schema.Resource {
	return &schema.Resource{
func readCapacityManagementInternalOccHandoverResourceBlocks(d *schema.ResourceData, m interface{}) error {
	sync := &CapacityManagementInternalOccHandoverResourceBlocksDataSourceCrud{}
func (s *CapacityManagementInternalOccHandoverResourceBlocksDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *CapacityManagementInternalOccHandoverResourceBlocksDataSourceCrud) Get() error {
	request := oci_capacity_management.ListInternalOccHandoverResourceBlocksRequest{}
func (s *CapacityManagementInternalOccHandoverResourceBlocksDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/capacity_management/capacity_management_occ_availability_catalog_resource.go ===
func CapacityManagementOccAvailabilityCatalogResource() *schema.Resource {
	return &schema.Resource{
func createCapacityManagementOccAvailabilityCatalog(d *schema.ResourceData, m interface{}) error {
	sync := &CapacityManagementOccAvailabilityCatalogResourceCrud{}
func readCapacityManagementOccAvailabilityCatalog(d *schema.ResourceData, m interface{}) error {
	sync := &CapacityManagementOccAvailabilityCatalogResourceCrud{}
func updateCapacityManagementOccAvailabilityCatalog(d *schema.ResourceData, m interface{}) error {
	sync := &CapacityManagementOccAvailabilityCatalogResourceCrud{}
func deleteCapacityManagementOccAvailabilityCatalog(d *schema.ResourceData, m interface{}) error {
	sync := &CapacityManagementOccAvailabilityCatalogResourceCrud{}
func (s *CapacityManagementOccAvailabilityCatalogResourceCrud) ID() string {
	return *s.Res.Id
func (s *CapacityManagementOccAvailabilityCatalogResourceCrud) CreatedPending() []string {
	return []string{
func (s *CapacityManagementOccAvailabilityCatalogResourceCrud) CreatedTarget() []string {
	return []string{
func (s *CapacityManagementOccAvailabilityCatalogResourceCrud) DeletedPending() []string {
	return []string{
func (s *CapacityManagementOccAvailabilityCatalogResourceCrud) DeletedTarget() []string {
	return []string{
func (s *CapacityManagementOccAvailabilityCatalogResourceCrud) Create() error {
	request := oci_capacity_management.CreateOccAvailabilityCatalogRequest{}
func (s *CapacityManagementOccAvailabilityCatalogResourceCrud) Get() error {
	request := oci_capacity_management.GetOccAvailabilityCatalogRequest{}
func (s *CapacityManagementOccAvailabilityCatalogResourceCrud) Update() error {
	request := oci_capacity_management.UpdateOccAvailabilityCatalogRequest{}
func (s *CapacityManagementOccAvailabilityCatalogResourceCrud) Delete() error {
	request := oci_capacity_management.DeleteOccAvailabilityCatalogRequest{}
func (s *CapacityManagementOccAvailabilityCatalogResourceCrud) SetData() error {
	s.D.Set("catalog_state", s.Res.CatalogState)
func (s *CapacityManagementOccAvailabilityCatalogResourceCrud) mapToMetadataDetails(fieldKeyFormat string) (oci_capacity_management.MetadataDetails, error) {
	result := oci_capacity_management.MetadataDetails{}

=== ./internal/service/capacity_management/capacity_management_namespace_occ_overviews_data_source.go ===
func CapacityManagementNamespaceOccOverviewsDataSource() *schema.Resource {
	return &schema.Resource{
func readCapacityManagementNamespaceOccOverviews(d *schema.ResourceData, m interface{}) error {
	sync := &CapacityManagementNamespaceOccOverviewsDataSourceCrud{}
func (s *CapacityManagementNamespaceOccOverviewsDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *CapacityManagementNamespaceOccOverviewsDataSourceCrud) Get() error {
	request := oci_capacity_management.ListOccOverviewsRequest{}
func (s *CapacityManagementNamespaceOccOverviewsDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/capacity_management/capacity_management_occ_handover_resource_blocks_data_source.go ===
func CapacityManagementOccHandoverResourceBlocksDataSource() *schema.Resource {
	return &schema.Resource{
func readCapacityManagementOccHandoverResourceBlocks(d *schema.ResourceData, m interface{}) error {
	sync := &CapacityManagementOccHandoverResourceBlocksDataSourceCrud{}
func (s *CapacityManagementOccHandoverResourceBlocksDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *CapacityManagementOccHandoverResourceBlocksDataSourceCrud) Get() error {
	request := oci_capacity_management.ListOccHandoverResourceBlocksRequest{}
func (s *CapacityManagementOccHandoverResourceBlocksDataSourceCrud) SetData() error {
	if s.Res == nil {
func OccHandoverResourceBlockSummaryToMap(obj oci_capacity_management.OccHandoverResourceBlockSummary) map[string]interface{} {
	result := map[string]interface{}{}

=== ./internal/service/capacity_management/capacity_management_occ_availability_catalog_content_data_source.go ===
func CapacityManagementOccAvailabilityCatalogContentDataSource() *schema.Resource {
	return &schema.Resource{
func readSingularCapacityManagementOccAvailabilityCatalogContent(d *schema.ResourceData, m interface{}) error {
	sync := &CapacityManagementOccAvailabilityCatalogContentDataSourceCrud{}
func (s *CapacityManagementOccAvailabilityCatalogContentDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *CapacityManagementOccAvailabilityCatalogContentDataSourceCrud) Get() error {
	request := oci_capacity_management.GetOccAvailabilityCatalogContentRequest{}
func (s *CapacityManagementOccAvailabilityCatalogContentDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/capacity_management/capacity_management_occ_capacity_requests_data_source.go ===
func CapacityManagementOccCapacityRequestsDataSource() *schema.Resource {
	return &schema.Resource{
func readCapacityManagementOccCapacityRequests(d *schema.ResourceData, m interface{}) error {
	sync := &CapacityManagementOccCapacityRequestsDataSourceCrud{}
func (s *CapacityManagementOccCapacityRequestsDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *CapacityManagementOccCapacityRequestsDataSourceCrud) Get() error {
	request := oci_capacity_management.ListOccCapacityRequestsRequest{}
func (s *CapacityManagementOccCapacityRequestsDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/capacity_management/capacity_management_occ_capacity_request_data_source.go ===
func CapacityManagementOccCapacityRequestDataSource() *schema.Resource {
	fieldMap := make(map[string]*schema.Schema)
func readSingularCapacityManagementOccCapacityRequest(d *schema.ResourceData, m interface{}) error {
	sync := &CapacityManagementOccCapacityRequestDataSourceCrud{}
func (s *CapacityManagementOccCapacityRequestDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *CapacityManagementOccCapacityRequestDataSourceCrud) Get() error {
	request := oci_capacity_management.GetOccCapacityRequestRequest{}
func (s *CapacityManagementOccCapacityRequestDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/capacity_management/capacity_management_internal_occ_availability_catalogs_data_source.go ===
func CapacityManagementInternalOccAvailabilityCatalogsDataSource() *schema.Resource {
	return &schema.Resource{
func readCapacityManagementInternalOccAvailabilityCatalogs(d *schema.ResourceData, m interface{}) error {
	sync := &CapacityManagementInternalOccAvailabilityCatalogsDataSourceCrud{}
func (s *CapacityManagementInternalOccAvailabilityCatalogsDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *CapacityManagementInternalOccAvailabilityCatalogsDataSourceCrud) Get() error {
	request := oci_capacity_management.ListOccAvailabilityCatalogsInternalRequest{}
func (s *CapacityManagementInternalOccAvailabilityCatalogsDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/capacity_management/capacity_management_occ_customer_group_resource.go ===
func CapacityManagementOccCustomerGroupResource() *schema.Resource {
	return &schema.Resource{
func createCapacityManagementOccCustomerGroup(d *schema.ResourceData, m interface{}) error {
	sync := &CapacityManagementOccCustomerGroupResourceCrud{}
func readCapacityManagementOccCustomerGroup(d *schema.ResourceData, m interface{}) error {
	sync := &CapacityManagementOccCustomerGroupResourceCrud{}
func updateCapacityManagementOccCustomerGroup(d *schema.ResourceData, m interface{}) error {
	sync := &CapacityManagementOccCustomerGroupResourceCrud{}
func deleteCapacityManagementOccCustomerGroup(d *schema.ResourceData, m interface{}) error {
	sync := &CapacityManagementOccCustomerGroupResourceCrud{}
func (s *CapacityManagementOccCustomerGroupResourceCrud) ID() string {
	return *s.Res.Id
func (s *CapacityManagementOccCustomerGroupResourceCrud) CreatedPending() []string {
	return []string{
func (s *CapacityManagementOccCustomerGroupResourceCrud) CreatedTarget() []string {
	return []string{
func (s *CapacityManagementOccCustomerGroupResourceCrud) DeletedPending() []string {
	return []string{
func (s *CapacityManagementOccCustomerGroupResourceCrud) DeletedTarget() []string {
	return []string{
func (s *CapacityManagementOccCustomerGroupResourceCrud) Create() error {
	request := oci_capacity_management.CreateOccCustomerGroupRequest{}
func (s *CapacityManagementOccCustomerGroupResourceCrud) Get() error {
	request := oci_capacity_management.GetOccCustomerGroupRequest{}
func (s *CapacityManagementOccCustomerGroupResourceCrud) Update() error {
	request := oci_capacity_management.UpdateOccCustomerGroupRequest{}
func (s *CapacityManagementOccCustomerGroupResourceCrud) Delete() error {
	request := oci_capacity_management.DeleteOccCustomerGroupRequest{}
func (s *CapacityManagementOccCustomerGroupResourceCrud) SetData() error {
	if s.Res.CompartmentId != nil {
func (s *CapacityManagementOccCustomerGroupResourceCrud) mapToCreateOccCustomerDetails(fieldKeyFormat string) (oci_capacity_management.CreateOccCustomerDetails, error) {
	result := oci_capacity_management.CreateOccCustomerDetails{}

=== ./internal/service/capacity_management/capacity_management_internal_namespace_occ_overviews_data_source.go ===
func CapacityManagementInternalNamespaceOccOverviewsDataSource() *schema.Resource {
	return &schema.Resource{
func readCapacityManagementInternalNamespaceOccOverviews(d *schema.ResourceData, m interface{}) error {
	sync := &CapacityManagementInternalNamespaceOccOverviewsDataSourceCrud{}
func (s *CapacityManagementInternalNamespaceOccOverviewsDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *CapacityManagementInternalNamespaceOccOverviewsDataSourceCrud) Get() error {
	request := oci_capacity_management.ListInternalNamespaceOccOverviewsRequest{}
func (s *CapacityManagementInternalNamespaceOccOverviewsDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/capacity_management/capacity_management_occ_capacity_request_resource.go ===
func CapacityManagementOccCapacityRequestResource() *schema.Resource {
	return &schema.Resource{
func createCapacityManagementOccCapacityRequest(d *schema.ResourceData, m interface{}) error {
	sync := &CapacityManagementOccCapacityRequestResourceCrud{}
func readCapacityManagementOccCapacityRequest(d *schema.ResourceData, m interface{}) error {
	sync := &CapacityManagementOccCapacityRequestResourceCrud{}
func updateCapacityManagementOccCapacityRequest(d *schema.ResourceData, m interface{}) error {
	sync := &CapacityManagementOccCapacityRequestResourceCrud{}
func deleteCapacityManagementOccCapacityRequest(d *schema.ResourceData, m interface{}) error {
	sync := &CapacityManagementOccCapacityRequestResourceCrud{}
func (s *CapacityManagementOccCapacityRequestResourceCrud) ID() string {
	return *s.Res.Id
func (s *CapacityManagementOccCapacityRequestResourceCrud) CreatedPending() []string {
	return []string{
func (s *CapacityManagementOccCapacityRequestResourceCrud) CreatedTarget() []string {
	return []string{
func (s *CapacityManagementOccCapacityRequestResourceCrud) DeletedPending() []string {
	return []string{
func (s *CapacityManagementOccCapacityRequestResourceCrud) DeletedTarget() []string {
	return []string{
func (s *CapacityManagementOccCapacityRequestResourceCrud) Create() error {
	request := oci_capacity_management.CreateOccCapacityRequestRequest{}
func (s *CapacityManagementOccCapacityRequestResourceCrud) Patch() error {
	request := oci_capacity_management.PatchOccCapacityRequestRequest{}
func (s *CapacityManagementOccCapacityRequestResourceCrud) Get() error {
	request := oci_capacity_management.GetOccCapacityRequestRequest{}
func (s *CapacityManagementOccCapacityRequestResourceCrud) Update() error {
	request := oci_capacity_management.UpdateOccCapacityRequestRequest{}
func (s *CapacityManagementOccCapacityRequestResourceCrud) Delete() error {
	request := oci_capacity_management.DeleteOccCapacityRequestRequest{}
func (s *CapacityManagementOccCapacityRequestResourceCrud) SetData() error {
	if s.Res.AvailabilityDomain != nil {
func (s *CapacityManagementOccCapacityRequestResourceCrud) mapToAssociatedOccHandoverResourceBlock(fieldKeyFormat string) (oci_capacity_management.AssociatedOccHandoverResourceBlock, error) {
	result := oci_capacity_management.AssociatedOccHandoverResourceBlock{}
func AssociatedOccHandoverResourceBlockToMap(obj oci_capacity_management.AssociatedOccHandoverResourceBlock) map[string]interface{} {
	result := map[string]interface{}{}
func (s *CapacityManagementOccCapacityRequestResourceCrud) mapToOccCapacityRequestBaseDetails(fieldKeyFormat string) (oci_capacity_management.OccCapacityRequestBaseDetails, error) {
	result := oci_capacity_management.OccCapacityRequestBaseDetails{}
func (s *CapacityManagementOccCapacityRequestResourceCrud) mapToPatchInstruction(fieldKeyFormat string) (oci_capacity_management.PatchInstruction, error) {
	var baseObject oci_capacity_management.PatchInstruction
func (s *CapacityManagementOccCapacityRequestResourceCrud) mapToobject(fieldKeyFormat string) (oci_capacity_management.OccCapacityRequest, error) {
	result := oci_capacity_management.OccCapacityRequest{}

=== ./internal/service/capacity_management/capacity_management_occ_availability_catalogs_data_source.go ===
func CapacityManagementOccAvailabilityCatalogsDataSource() *schema.Resource {
	return &schema.Resource{
func readCapacityManagementOccAvailabilityCatalogs(d *schema.ResourceData, m interface{}) error {
	sync := &CapacityManagementOccAvailabilityCatalogsDataSourceCrud{}
func (s *CapacityManagementOccAvailabilityCatalogsDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *CapacityManagementOccAvailabilityCatalogsDataSourceCrud) Get() error {
	request := oci_capacity_management.ListOccAvailabilityCatalogsRequest{}
func (s *CapacityManagementOccAvailabilityCatalogsDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/capacity_management/capacity_management_occ_availability_catalog_occ_availabilities_data_source.go ===
func CapacityManagementOccAvailabilityCatalogOccAvailabilitiesDataSource() *schema.Resource {
	return &schema.Resource{
func readCapacityManagementOccAvailabilityCatalogOccAvailabilities(d *schema.ResourceData, m interface{}) error {
	sync := &CapacityManagementOccAvailabilityCatalogOccAvailabilitiesDataSourceCrud{}
func (s *CapacityManagementOccAvailabilityCatalogOccAvailabilitiesDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *CapacityManagementOccAvailabilityCatalogOccAvailabilitiesDataSourceCrud) Get() error {
	request := oci_capacity_management.ListOccAvailabilitiesRequest{}
func (s *CapacityManagementOccAvailabilityCatalogOccAvailabilitiesDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/capacity_management/capacity_management_occ_handover_resource_block_details_data_source.go ===
func CapacityManagementOccHandoverResourceBlockDetailsDataSource() *schema.Resource {
	return &schema.Resource{
func readCapacityManagementOccHandoverResourceBlockDetails(d *schema.ResourceData, m interface{}) error {
	sync := &CapacityManagementOccHandoverResourceBlockDetailsDataSourceCrud{}
func (s *CapacityManagementOccHandoverResourceBlockDetailsDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *CapacityManagementOccHandoverResourceBlockDetailsDataSourceCrud) Get() error {
	request := oci_capacity_management.ListOccHandoverResourceBlockDetailsRequest{}
func (s *CapacityManagementOccHandoverResourceBlockDetailsDataSourceCrud) SetData() error {
	if s.Res == nil {
func OccHandoverResourceBlockDetailSummaryToMap(obj oci_capacity_management.OccHandoverResourceBlockDetailSummary) map[string]interface{} {
	result := map[string]interface{}{}

=== ./internal/service/capacity_management/capacity_management_occ_availability_catalog_data_source.go ===
func CapacityManagementOccAvailabilityCatalogDataSource() *schema.Resource {
	fieldMap := make(map[string]*schema.Schema)
func readSingularCapacityManagementOccAvailabilityCatalog(d *schema.ResourceData, m interface{}) error {
	sync := &CapacityManagementOccAvailabilityCatalogDataSourceCrud{}
func (s *CapacityManagementOccAvailabilityCatalogDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *CapacityManagementOccAvailabilityCatalogDataSourceCrud) Get() error {
	request := oci_capacity_management.GetOccAvailabilityCatalogRequest{}
func (s *CapacityManagementOccAvailabilityCatalogDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/capacity_management/capacity_management_occ_customer_group_occ_customer_resource.go ===
func CapacityManagementOccCustomerGroupOccCustomerResource() *schema.Resource {
	return &schema.Resource{
func createCapacityManagementOccCustomerGroupOccCustomer(d *schema.ResourceData, m interface{}) error {
	sync := &CapacityManagementOccCustomerGroupOccCustomerResourceCrud{}
func readCapacityManagementOccCustomerGroupOccCustomer(d *schema.ResourceData, m interface{}) error {
	return nil
func updateCapacityManagementOccCustomerGroupOccCustomer(d *schema.ResourceData, m interface{}) error {
	sync := &CapacityManagementOccCustomerGroupOccCustomerResourceCrud{}
func deleteCapacityManagementOccCustomerGroupOccCustomer(d *schema.ResourceData, m interface{}) error {
	sync := &CapacityManagementOccCustomerGroupOccCustomerResourceCrud{}
func (s *CapacityManagementOccCustomerGroupOccCustomerResourceCrud) ID() string {
	return *s.Res.TenancyId
func (s *CapacityManagementOccCustomerGroupOccCustomerResourceCrud) Create() error {
	request := oci_capacity_management.CreateOccCustomerRequest{}
func (s *CapacityManagementOccCustomerGroupOccCustomerResourceCrud) Update() error {
	request := oci_capacity_management.UpdateOccCustomerRequest{}
func (s *CapacityManagementOccCustomerGroupOccCustomerResourceCrud) Delete() error {
	request := oci_capacity_management.DeleteOccCustomerRequest{}
func (s *CapacityManagementOccCustomerGroupOccCustomerResourceCrud) SetData() error {
	if s.Res.Description != nil {

=== ./internal/service/capacity_management/capacity_management_occ_customer_group_data_source.go ===
func CapacityManagementOccCustomerGroupDataSource() *schema.Resource {
	fieldMap := make(map[string]*schema.Schema)
func readSingularCapacityManagementOccCustomerGroup(d *schema.ResourceData, m interface{}) error {
	sync := &CapacityManagementOccCustomerGroupDataSourceCrud{}
func (s *CapacityManagementOccCustomerGroupDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *CapacityManagementOccCustomerGroupDataSourceCrud) Get() error {
	request := oci_capacity_management.GetOccCustomerGroupRequest{}
func (s *CapacityManagementOccCustomerGroupDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/capacity_management/register_resource.go ===
func RegisterResource() {
	tfresource.RegisterResource("oci_capacity_management_occ_availability_catalog", CapacityManagementOccAvailabilityCatalogResource())

=== ./internal/service/network_firewall/network_firewall_network_firewall_policy_decryption_profiles_data_source.go ===
func NetworkFirewallNetworkFirewallPolicyDecryptionProfilesDataSource() *schema.Resource {
	return &schema.Resource{
func readNetworkFirewallNetworkFirewallPolicyDecryptionProfiles(d *schema.ResourceData, m interface{}) error {
	sync := &NetworkFirewallNetworkFirewallPolicyDecryptionProfilesDataSourceCrud{}
func (s *NetworkFirewallNetworkFirewallPolicyDecryptionProfilesDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *NetworkFirewallNetworkFirewallPolicyDecryptionProfilesDataSourceCrud) Get() error {
	request := oci_network_firewall.ListDecryptionProfilesRequest{}
func (s *NetworkFirewallNetworkFirewallPolicyDecryptionProfilesDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/network_firewall/network_firewall_network_firewall_policy_url_list_resource.go ===
func NetworkFirewallNetworkFirewallPolicyUrlListResource() *schema.Resource {
	return &schema.Resource{
func createNetworkFirewallNetworkFirewallPolicyUrlList(d *schema.ResourceData, m interface{}) error {
	sync := &NetworkFirewallNetworkFirewallPolicyUrlListResourceCrud{}
func readNetworkFirewallNetworkFirewallPolicyUrlList(d *schema.ResourceData, m interface{}) error {
	sync := &NetworkFirewallNetworkFirewallPolicyUrlListResourceCrud{}
func updateNetworkFirewallNetworkFirewallPolicyUrlList(d *schema.ResourceData, m interface{}) error {
	sync := &NetworkFirewallNetworkFirewallPolicyUrlListResourceCrud{}
func deleteNetworkFirewallNetworkFirewallPolicyUrlList(d *schema.ResourceData, m interface{}) error {
	sync := &NetworkFirewallNetworkFirewallPolicyUrlListResourceCrud{}
func (s *NetworkFirewallNetworkFirewallPolicyUrlListResourceCrud) ID() string {
	return GetNetworkFirewallPolicySubResourceCompositeId(s.D.Get("name").(string), s.D.Get("network_firewall_policy_id").(string), "urlLists")
func (s *NetworkFirewallNetworkFirewallPolicyUrlListResourceCrud) Create() error {
	request := oci_network_firewall.CreateUrlListRequest{}
func (s *NetworkFirewallNetworkFirewallPolicyUrlListResourceCrud) Get() error {
	request := oci_network_firewall.GetUrlListRequest{}
func (s *NetworkFirewallNetworkFirewallPolicyUrlListResourceCrud) Update() error {
	request := oci_network_firewall.UpdateUrlListRequest{}
func (s *NetworkFirewallNetworkFirewallPolicyUrlListResourceCrud) Delete() error {
	request := oci_network_firewall.DeleteUrlListRequest{}
func (s *NetworkFirewallNetworkFirewallPolicyUrlListResourceCrud) SetData() error {

func (s *NetworkFirewallNetworkFirewallPolicyUrlListResourceCrud) mapToUrlPattern(fieldKeyFormat string) (oci_network_firewall.UrlPattern, error) {
	var baseObject oci_network_firewall.UrlPattern

=== ./internal/service/network_firewall/network_firewall_network_firewall_policy_address_list_data_source.go ===
func NetworkFirewallNetworkFirewallPolicyAddressListDataSource() *schema.Resource {
	fieldMap := make(map[string]*schema.Schema)
func readSingularNetworkFirewallNetworkFirewallPolicyAddressList(d *schema.ResourceData, m interface{}) error {
	sync := &NetworkFirewallNetworkFirewallPolicyAddressListDataSourceCrud{}
func (s *NetworkFirewallNetworkFirewallPolicyAddressListDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *NetworkFirewallNetworkFirewallPolicyAddressListDataSourceCrud) Get() error {
	request := oci_network_firewall.GetAddressListRequest{}
func (s *NetworkFirewallNetworkFirewallPolicyAddressListDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/network_firewall/network_firewall_network_firewall_data_source.go ===
func NetworkFirewallNetworkFirewallDataSource() *schema.Resource {
	fieldMap := make(map[string]*schema.Schema)
func readSingularNetworkFirewallNetworkFirewall(d *schema.ResourceData, m interface{}) error {
	sync := &NetworkFirewallNetworkFirewallDataSourceCrud{}
func (s *NetworkFirewallNetworkFirewallDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *NetworkFirewallNetworkFirewallDataSourceCrud) Get() error {
	request := oci_network_firewall.GetNetworkFirewallRequest{}
func (s *NetworkFirewallNetworkFirewallDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/network_firewall/network_firewall_network_firewall_policy_application_resource.go ===
func NetworkFirewallNetworkFirewallPolicyApplicationResource() *schema.Resource {
	return &schema.Resource{
func createNetworkFirewallNetworkFirewallPolicyApplication(d *schema.ResourceData, m interface{}) error {
	sync := &NetworkFirewallNetworkFirewallPolicyApplicationResourceCrud{}
func readNetworkFirewallNetworkFirewallPolicyApplication(d *schema.ResourceData, m interface{}) error {
	sync := &NetworkFirewallNetworkFirewallPolicyApplicationResourceCrud{}
func updateNetworkFirewallNetworkFirewallPolicyApplication(d *schema.ResourceData, m interface{}) error {
	sync := &NetworkFirewallNetworkFirewallPolicyApplicationResourceCrud{}
func deleteNetworkFirewallNetworkFirewallPolicyApplication(d *schema.ResourceData, m interface{}) error {
	sync := &NetworkFirewallNetworkFirewallPolicyApplicationResourceCrud{}
func (s *NetworkFirewallNetworkFirewallPolicyApplicationResourceCrud) ID() string {
	return GetNetworkFirewallPolicySubResourceCompositeId(s.D.Get("name").(string), s.D.Get("network_firewall_policy_id").(string), "applications")
func (s *NetworkFirewallNetworkFirewallPolicyApplicationResourceCrud) Create() error {
	request := oci_network_firewall.CreateApplicationRequest{}
func (s *NetworkFirewallNetworkFirewallPolicyApplicationResourceCrud) Get() error {
	request := oci_network_firewall.GetApplicationRequest{}
func (s *NetworkFirewallNetworkFirewallPolicyApplicationResourceCrud) Update() error {
	request := oci_network_firewall.UpdateApplicationRequest{}
func (s *NetworkFirewallNetworkFirewallPolicyApplicationResourceCrud) Delete() error {
	request := oci_network_firewall.DeleteApplicationRequest{}
func (s *NetworkFirewallNetworkFirewallPolicyApplicationResourceCrud) SetData() error {

func (s *NetworkFirewallNetworkFirewallPolicyApplicationResourceCrud) populateTopLevelPolymorphicCreateApplicationRequest(request *oci_network_firewall.CreateApplicationRequest) error {
	//discriminator
func (s *NetworkFirewallNetworkFirewallPolicyApplicationResourceCrud) populateTopLevelPolymorphicUpdateApplicationRequest(request *oci_network_firewall.UpdateApplicationRequest) error {
	//discriminator

=== ./internal/service/network_firewall/network_firewall_network_firewall_policy_tunnel_inspection_rules_data_source.go ===
func NetworkFirewallNetworkFirewallPolicyTunnelInspectionRulesDataSource() *schema.Resource {
	return &schema.Resource{
func readNetworkFirewallNetworkFirewallPolicyTunnelInspectionRules(d *schema.ResourceData, m interface{}) error {
	sync := &NetworkFirewallNetworkFirewallPolicyTunnelInspectionRulesDataSourceCrud{}
func (s *NetworkFirewallNetworkFirewallPolicyTunnelInspectionRulesDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *NetworkFirewallNetworkFirewallPolicyTunnelInspectionRulesDataSourceCrud) Get() error {
	request := oci_network_firewall.ListTunnelInspectionRulesRequest{}
func (s *NetworkFirewallNetworkFirewallPolicyTunnelInspectionRulesDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/network_firewall/network_firewall_policy_resource_helper.go ===
func GetNetworkFirewallPolicySubResourceCompositeId(resourceName string, networkFirewallPolicyId string, resourceType string) string {
	resourceName = url.PathEscape(resourceName)
func parseNetworkFirewallPolicySubResourceCompositeId(compositeId string, resourceType string) (resourceName string, networkFirewallPolicyId string, err error) {
	parts := strings.Split(compositeId, "/")

=== ./internal/service/network_firewall/network_firewall_network_firewall_policy_resource.go ===
func NetworkFirewallNetworkFirewallPolicyResource() *schema.Resource {
	return &schema.Resource{
func createNetworkFirewallNetworkFirewallPolicy(d *schema.ResourceData, m interface{}) error {
	sync := &NetworkFirewallNetworkFirewallPolicyResourceCrud{}
func readNetworkFirewallNetworkFirewallPolicy(d *schema.ResourceData, m interface{}) error {
	sync := &NetworkFirewallNetworkFirewallPolicyResourceCrud{}
func updateNetworkFirewallNetworkFirewallPolicy(d *schema.ResourceData, m interface{}) error {
	sync := &NetworkFirewallNetworkFirewallPolicyResourceCrud{}
func deleteNetworkFirewallNetworkFirewallPolicy(d *schema.ResourceData, m interface{}) error {
	sync := &NetworkFirewallNetworkFirewallPolicyResourceCrud{}
func (s *NetworkFirewallNetworkFirewallPolicyResourceCrud) ID() string {
	return *s.Res.Id
func (s *NetworkFirewallNetworkFirewallPolicyResourceCrud) CreatedPending() []string {
	return []string{
func (s *NetworkFirewallNetworkFirewallPolicyResourceCrud) CreatedTarget() []string {
	return []string{
func (s *NetworkFirewallNetworkFirewallPolicyResourceCrud) DeletedPending() []string {
	return []string{
func (s *NetworkFirewallNetworkFirewallPolicyResourceCrud) DeletedTarget() []string {
	return []string{
func (s *NetworkFirewallNetworkFirewallPolicyResourceCrud) Create() error {
	request := oci_network_firewall.CreateNetworkFirewallPolicyRequest{}
func (s *NetworkFirewallNetworkFirewallPolicyResourceCrud) getNetworkFirewallPolicyFromWorkRequest(
	workId *string,
func (s *NetworkFirewallNetworkFirewallPolicyResourceCrud) Get() error {
	request := oci_network_firewall.GetNetworkFirewallPolicyRequest{}
func (s *NetworkFirewallNetworkFirewallPolicyResourceCrud) Update() error {
	if compartment, ok := s.D.GetOkExists("compartment_id"); ok && s.D.HasChange("compartment_id") {
func (s *NetworkFirewallNetworkFirewallPolicyResourceCrud) Delete() error {
	request := oci_network_firewall.DeleteNetworkFirewallPolicyRequest{}
func (s *NetworkFirewallNetworkFirewallPolicyResourceCrud) SetData() error {
	if s.Res.AttachedNetworkFirewallCount != nil {
func (s *NetworkFirewallNetworkFirewallPolicyResourceCrud) ApplyNetworkFirewallPolicy() error {
	request := oci_network_firewall.ApplyNetworkFirewallPolicyRequest{}
func (s *NetworkFirewallNetworkFirewallPolicyResourceCrud) CloneNetworkFirewallPolicy() error {
	request := oci_network_firewall.CloneNetworkFirewallPolicyRequest{}
func (s *NetworkFirewallNetworkFirewallPolicyResourceCrud) MigrateNetworkFirewallPolicy() error {
	request := oci_network_firewall.MigrateNetworkFirewallPolicyRequest{}
func (s *NetworkFirewallNetworkFirewallPolicyResourceCrud) updateCompartment(compartment interface{}) error {
	changeCompartmentRequest := oci_network_firewall.ChangeNetworkFirewallPolicyCompartmentRequest{}

=== ./internal/service/network_firewall/network_firewall_network_firewall_policy_decryption_profile_data_source.go ===
func NetworkFirewallNetworkFirewallPolicyDecryptionProfileDataSource() *schema.Resource {
	fieldMap := make(map[string]*schema.Schema)
func readSingularNetworkFirewallNetworkFirewallPolicyDecryptionProfile(d *schema.ResourceData, m interface{}) error {
	sync := &NetworkFirewallNetworkFirewallPolicyDecryptionProfileDataSourceCrud{}
func (s *NetworkFirewallNetworkFirewallPolicyDecryptionProfileDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *NetworkFirewallNetworkFirewallPolicyDecryptionProfileDataSourceCrud) Get() error {
	request := oci_network_firewall.GetDecryptionProfileRequest{}
func (s *NetworkFirewallNetworkFirewallPolicyDecryptionProfileDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/network_firewall/network_firewall_network_firewall_policy_decryption_rules_data_source.go ===
func NetworkFirewallNetworkFirewallPolicyDecryptionRulesDataSource() *schema.Resource {
	return &schema.Resource{
func readNetworkFirewallNetworkFirewallPolicyDecryptionRules(d *schema.ResourceData, m interface{}) error {
	sync := &NetworkFirewallNetworkFirewallPolicyDecryptionRulesDataSourceCrud{}
func (s *NetworkFirewallNetworkFirewallPolicyDecryptionRulesDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *NetworkFirewallNetworkFirewallPolicyDecryptionRulesDataSourceCrud) Get() error {
	request := oci_network_firewall.ListDecryptionRulesRequest{}
func (s *NetworkFirewallNetworkFirewallPolicyDecryptionRulesDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/network_firewall/network_firewall_network_firewall_policy_decryption_rule_resource.go ===
func NetworkFirewallNetworkFirewallPolicyDecryptionRuleResource() *schema.Resource {
	return &schema.Resource{
func createNetworkFirewallNetworkFirewallPolicyDecryptionRule(d *schema.ResourceData, m interface{}) error {
	sync := &NetworkFirewallNetworkFirewallPolicyDecryptionRuleResourceCrud{}
func readNetworkFirewallNetworkFirewallPolicyDecryptionRule(d *schema.ResourceData, m interface{}) error {
	sync := &NetworkFirewallNetworkFirewallPolicyDecryptionRuleResourceCrud{}
func updateNetworkFirewallNetworkFirewallPolicyDecryptionRule(d *schema.ResourceData, m interface{}) error {
	sync := &NetworkFirewallNetworkFirewallPolicyDecryptionRuleResourceCrud{}
func deleteNetworkFirewallNetworkFirewallPolicyDecryptionRule(d *schema.ResourceData, m interface{}) error {
	sync := &NetworkFirewallNetworkFirewallPolicyDecryptionRuleResourceCrud{}
func (s *NetworkFirewallNetworkFirewallPolicyDecryptionRuleResourceCrud) ID() string {
	return GetNetworkFirewallPolicySubResourceCompositeId(s.D.Get("name").(string), s.D.Get("network_firewall_policy_id").(string), "decryptionRules")
func (s *NetworkFirewallNetworkFirewallPolicyDecryptionRuleResourceCrud) Create() error {
	request := oci_network_firewall.CreateDecryptionRuleRequest{}
func (s *NetworkFirewallNetworkFirewallPolicyDecryptionRuleResourceCrud) Get() error {
	request := oci_network_firewall.GetDecryptionRuleRequest{}
func (s *NetworkFirewallNetworkFirewallPolicyDecryptionRuleResourceCrud) Update() error {
	request := oci_network_firewall.UpdateDecryptionRuleRequest{}
func (s *NetworkFirewallNetworkFirewallPolicyDecryptionRuleResourceCrud) Delete() error {
	request := oci_network_firewall.DeleteDecryptionRuleRequest{}
func (s *NetworkFirewallNetworkFirewallPolicyDecryptionRuleResourceCrud) SetData() error {

func (s *NetworkFirewallNetworkFirewallPolicyDecryptionRuleResourceCrud) mapToDecryptionRuleMatchCriteria(fieldKeyFormat string) (oci_network_firewall.DecryptionRuleMatchCriteria, error) {
	result := oci_network_firewall.DecryptionRuleMatchCriteria{}
func (s *NetworkFirewallNetworkFirewallPolicyDecryptionRuleResourceCrud) mapToRulePositionUpdate() (oci_network_firewall.RulePosition, error) {
	result := oci_network_firewall.RulePosition{}
func (s *NetworkFirewallNetworkFirewallPolicyDecryptionRuleResourceCrud) mapToRulePositionCreate(fieldKeyFormat string) (oci_network_firewall.RulePosition, error) {
	result := oci_network_firewall.RulePosition{}

=== ./internal/service/network_firewall/network_firewall_network_firewall_policy_application_group_data_source.go ===
func NetworkFirewallNetworkFirewallPolicyApplicationGroupDataSource() *schema.Resource {
	fieldMap := make(map[string]*schema.Schema)
func readSingularNetworkFirewallNetworkFirewallPolicyApplicationGroup(d *schema.ResourceData, m interface{}) error {
	sync := &NetworkFirewallNetworkFirewallPolicyApplicationGroupDataSourceCrud{}
func (s *NetworkFirewallNetworkFirewallPolicyApplicationGroupDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *NetworkFirewallNetworkFirewallPolicyApplicationGroupDataSourceCrud) Get() error {
	request := oci_network_firewall.GetApplicationGroupRequest{}
func (s *NetworkFirewallNetworkFirewallPolicyApplicationGroupDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/network_firewall/network_firewall_network_firewall_policy_tunnel_inspection_rule_resource.go ===
func NetworkFirewallNetworkFirewallPolicyTunnelInspectionRuleResource() *schema.Resource {
	return &schema.Resource{
func createNetworkFirewallNetworkFirewallPolicyTunnelInspectionRule(d *schema.ResourceData, m interface{}) error {
	sync := &NetworkFirewallNetworkFirewallPolicyTunnelInspectionRuleResourceCrud{}
func readNetworkFirewallNetworkFirewallPolicyTunnelInspectionRule(d *schema.ResourceData, m interface{}) error {
	sync := &NetworkFirewallNetworkFirewallPolicyTunnelInspectionRuleResourceCrud{}
func updateNetworkFirewallNetworkFirewallPolicyTunnelInspectionRule(d *schema.ResourceData, m interface{}) error {
	sync := &NetworkFirewallNetworkFirewallPolicyTunnelInspectionRuleResourceCrud{}
func deleteNetworkFirewallNetworkFirewallPolicyTunnelInspectionRule(d *schema.ResourceData, m interface{}) error {
	sync := &NetworkFirewallNetworkFirewallPolicyTunnelInspectionRuleResourceCrud{}
func (s *NetworkFirewallNetworkFirewallPolicyTunnelInspectionRuleResourceCrud) ID() string {
	return GetNetworkFirewallPolicySubResourceCompositeId(s.D.Get("name").(string), s.D.Get("network_firewall_policy_id").(string), "tunnelInspectionRules")
func (s *NetworkFirewallNetworkFirewallPolicyTunnelInspectionRuleResourceCrud) Create() error {
	request := oci_network_firewall.CreateTunnelInspectionRuleRequest{}
func (s *NetworkFirewallNetworkFirewallPolicyTunnelInspectionRuleResourceCrud) Get() error {
	request := oci_network_firewall.GetTunnelInspectionRuleRequest{}
func (s *NetworkFirewallNetworkFirewallPolicyTunnelInspectionRuleResourceCrud) Update() error {
	request := oci_network_firewall.UpdateTunnelInspectionRuleRequest{}
func (s *NetworkFirewallNetworkFirewallPolicyTunnelInspectionRuleResourceCrud) Delete() error {
	request := oci_network_firewall.DeleteTunnelInspectionRuleRequest{}
func (s *NetworkFirewallNetworkFirewallPolicyTunnelInspectionRuleResourceCrud) SetData() error {

func (s *NetworkFirewallNetworkFirewallPolicyTunnelInspectionRuleResourceCrud) mapToRulePositionUpdate() (oci_network_firewall.RulePosition, error) {
	result := oci_network_firewall.RulePosition{}
func (s *NetworkFirewallNetworkFirewallPolicyTunnelInspectionRuleResourceCrud) mapToRulePositionCreate(fieldKeyFormat string) (oci_network_firewall.RulePosition, error) {
	result := oci_network_firewall.RulePosition{}
func (s *NetworkFirewallNetworkFirewallPolicyTunnelInspectionRuleResourceCrud) mapToVxlanInspectionRuleMatchCriteria(fieldKeyFormat string) (oci_network_firewall.VxlanInspectionRuleMatchCriteria, error) {
	result := oci_network_firewall.VxlanInspectionRuleMatchCriteria{}
func (s *NetworkFirewallNetworkFirewallPolicyTunnelInspectionRuleResourceCrud) mapToVxlanInspectionRuleProfile(fieldKeyFormat string) (oci_network_firewall.VxlanInspectionRuleProfile, error) {
	result := oci_network_firewall.VxlanInspectionRuleProfile{}
func (s *NetworkFirewallNetworkFirewallPolicyTunnelInspectionRuleResourceCrud) populateTopLevelPolymorphicCreateTunnelInspectionRuleRequest(request *oci_network_firewall.CreateTunnelInspectionRuleRequest) error {
	//discriminator
func (s *NetworkFirewallNetworkFirewallPolicyTunnelInspectionRuleResourceCrud) populateTopLevelPolymorphicUpdateTunnelInspectionRuleRequest(request *oci_network_firewall.UpdateTunnelInspectionRuleRequest) error {
	//discriminator

=== ./internal/service/network_firewall/network_firewall_export.go ===
func getNetworkFirewallNetworkFirewallPolicyAddressListId(resource *tf_export.OCIResource) (string, error) {

func getNetworkFirewallNetworkFirewallPolicyUrlListId(resource *tf_export.OCIResource) (string, error) {

func getNetworkFirewallNetworkFirewallPolicyMappedSecretId(resource *tf_export.OCIResource) (string, error) {

func getNetworkFirewallNetworkFirewallPolicyApplicationGroupId(resource *tf_export.OCIResource) (string, error) {

func getNetworkFirewallNetworkFirewallPolicyDecryptionRuleId(resource *tf_export.OCIResource) (string, error) {

func getNetworkFirewallNetworkFirewallPolicySecurityRuleId(resource *tf_export.OCIResource) (string, error) {

func getNetworkFirewallNetworkFirewallPolicyApplicationId(resource *tf_export.OCIResource) (string, error) {

func getNetworkFirewallNetworkFirewallPolicyServiceListId(resource *tf_export.OCIResource) (string, error) {

func getNetworkFirewallNetworkFirewallPolicyServiceId(resource *tf_export.OCIResource) (string, error) {

func getNetworkFirewallNetworkFirewallPolicyDecryptionProfileId(resource *tf_export.OCIResource) (string, error) {

func getNetworkFirewallNetworkFirewallPolicyTunnelInspectionRuleId(resource *tf_export.OCIResource) (string, error) {


=== ./internal/service/network_firewall/network_firewall_network_firewall_policy_mapped_secret_data_source.go ===
func NetworkFirewallNetworkFirewallPolicyMappedSecretDataSource() *schema.Resource {
	fieldMap := make(map[string]*schema.Schema)
func readSingularNetworkFirewallNetworkFirewallPolicyMappedSecret(d *schema.ResourceData, m interface{}) error {
	sync := &NetworkFirewallNetworkFirewallPolicyMappedSecretDataSourceCrud{}
func (s *NetworkFirewallNetworkFirewallPolicyMappedSecretDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *NetworkFirewallNetworkFirewallPolicyMappedSecretDataSourceCrud) Get() error {
	request := oci_network_firewall.GetMappedSecretRequest{}
func (s *NetworkFirewallNetworkFirewallPolicyMappedSecretDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/network_firewall/network_firewall_network_firewall_policy_data_source.go ===
func NetworkFirewallNetworkFirewallPolicyDataSource() *schema.Resource {
	fieldMap := make(map[string]*schema.Schema)
func readSingularNetworkFirewallNetworkFirewallPolicy(d *schema.ResourceData, m interface{}) error {
	sync := &NetworkFirewallNetworkFirewallPolicyDataSourceCrud{}
func (s *NetworkFirewallNetworkFirewallPolicyDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *NetworkFirewallNetworkFirewallPolicyDataSourceCrud) Get() error {
	request := oci_network_firewall.GetNetworkFirewallPolicyRequest{}
func (s *NetworkFirewallNetworkFirewallPolicyDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/network_firewall/network_firewall_network_firewall_policy_mapped_secret_resource.go ===
func NetworkFirewallNetworkFirewallPolicyMappedSecretResource() *schema.Resource {
	return &schema.Resource{
func createNetworkFirewallNetworkFirewallPolicyMappedSecret(d *schema.ResourceData, m interface{}) error {
	sync := &NetworkFirewallNetworkFirewallPolicyMappedSecretResourceCrud{}
func readNetworkFirewallNetworkFirewallPolicyMappedSecret(d *schema.ResourceData, m interface{}) error {
	sync := &NetworkFirewallNetworkFirewallPolicyMappedSecretResourceCrud{}
func updateNetworkFirewallNetworkFirewallPolicyMappedSecret(d *schema.ResourceData, m interface{}) error {
	sync := &NetworkFirewallNetworkFirewallPolicyMappedSecretResourceCrud{}
func deleteNetworkFirewallNetworkFirewallPolicyMappedSecret(d *schema.ResourceData, m interface{}) error {
	sync := &NetworkFirewallNetworkFirewallPolicyMappedSecretResourceCrud{}
func (s *NetworkFirewallNetworkFirewallPolicyMappedSecretResourceCrud) ID() string {
	return GetNetworkFirewallPolicySubResourceCompositeId(s.D.Get("name").(string), s.D.Get("network_firewall_policy_id").(string), "mappedSecrets")
func (s *NetworkFirewallNetworkFirewallPolicyMappedSecretResourceCrud) Create() error {
	request := oci_network_firewall.CreateMappedSecretRequest{}
func (s *NetworkFirewallNetworkFirewallPolicyMappedSecretResourceCrud) Get() error {
	request := oci_network_firewall.GetMappedSecretRequest{}
func (s *NetworkFirewallNetworkFirewallPolicyMappedSecretResourceCrud) Update() error {
	request := oci_network_firewall.UpdateMappedSecretRequest{}
func (s *NetworkFirewallNetworkFirewallPolicyMappedSecretResourceCrud) Delete() error {
	request := oci_network_firewall.DeleteMappedSecretRequest{}
func (s *NetworkFirewallNetworkFirewallPolicyMappedSecretResourceCrud) SetData() error {

func (s *NetworkFirewallNetworkFirewallPolicyMappedSecretResourceCrud) populateTopLevelPolymorphicCreateMappedSecretRequest(request *oci_network_firewall.CreateMappedSecretRequest) error {
	//discriminator
func (s *NetworkFirewallNetworkFirewallPolicyMappedSecretResourceCrud) populateTopLevelPolymorphicUpdateMappedSecretRequest(request *oci_network_firewall.UpdateMappedSecretRequest) error {
	//discriminator

=== ./internal/service/network_firewall/network_firewall_network_firewall_policy_security_rule_data_source.go ===
func NetworkFirewallNetworkFirewallPolicySecurityRuleDataSource() *schema.Resource {
	fieldMap := make(map[string]*schema.Schema)
func readSingularNetworkFirewallNetworkFirewallPolicySecurityRule(d *schema.ResourceData, m interface{}) error {
	sync := &NetworkFirewallNetworkFirewallPolicySecurityRuleDataSourceCrud{}
func (s *NetworkFirewallNetworkFirewallPolicySecurityRuleDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *NetworkFirewallNetworkFirewallPolicySecurityRuleDataSourceCrud) Get() error {
	request := oci_network_firewall.GetSecurityRuleRequest{}
func (s *NetworkFirewallNetworkFirewallPolicySecurityRuleDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/network_firewall/network_firewall_network_firewall_policy_url_list_data_source.go ===
func NetworkFirewallNetworkFirewallPolicyUrlListDataSource() *schema.Resource {
	fieldMap := make(map[string]*schema.Schema)
func readSingularNetworkFirewallNetworkFirewallPolicyUrlList(d *schema.ResourceData, m interface{}) error {
	sync := &NetworkFirewallNetworkFirewallPolicyUrlListDataSourceCrud{}
func (s *NetworkFirewallNetworkFirewallPolicyUrlListDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *NetworkFirewallNetworkFirewallPolicyUrlListDataSourceCrud) Get() error {
	request := oci_network_firewall.GetUrlListRequest{}
func (s *NetworkFirewallNetworkFirewallPolicyUrlListDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/network_firewall/network_firewall_network_firewalls_data_source.go ===
func NetworkFirewallNetworkFirewallsDataSource() *schema.Resource {
	return &schema.Resource{
func readNetworkFirewallNetworkFirewalls(d *schema.ResourceData, m interface{}) error {
	sync := &NetworkFirewallNetworkFirewallsDataSourceCrud{}
func (s *NetworkFirewallNetworkFirewallsDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *NetworkFirewallNetworkFirewallsDataSourceCrud) Get() error {
	request := oci_network_firewall.ListNetworkFirewallsRequest{}
func (s *NetworkFirewallNetworkFirewallsDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/network_firewall/network_firewall_network_firewall_policy_decryption_rule_data_source.go ===
func NetworkFirewallNetworkFirewallPolicyDecryptionRuleDataSource() *schema.Resource {
	fieldMap := make(map[string]*schema.Schema)
func readSingularNetworkFirewallNetworkFirewallPolicyDecryptionRule(d *schema.ResourceData, m interface{}) error {
	sync := &NetworkFirewallNetworkFirewallPolicyDecryptionRuleDataSourceCrud{}
func (s *NetworkFirewallNetworkFirewallPolicyDecryptionRuleDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *NetworkFirewallNetworkFirewallPolicyDecryptionRuleDataSourceCrud) Get() error {
	request := oci_network_firewall.GetDecryptionRuleRequest{}
func (s *NetworkFirewallNetworkFirewallPolicyDecryptionRuleDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/network_firewall/network_firewall_network_firewall_policy_application_data_source.go ===
func NetworkFirewallNetworkFirewallPolicyApplicationDataSource() *schema.Resource {
	fieldMap := make(map[string]*schema.Schema)
func readSingularApplication(d *schema.ResourceData, m interface{}) error {
	sync := &NetworkFirewallNetworkFirewallPolicyApplicationDataSourceCrud{}
func (s *NetworkFirewallNetworkFirewallPolicyApplicationDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *NetworkFirewallNetworkFirewallPolicyApplicationDataSourceCrud) Get() error {
	request := oci_network_firewall.GetApplicationRequest{}
func (s *NetworkFirewallNetworkFirewallPolicyApplicationDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/network_firewall/network_firewall_network_firewall_policy_application_groups_data_source.go ===
func NetworkFirewallNetworkFirewallPolicyApplicationGroupsDataSource() *schema.Resource {
	return &schema.Resource{
func readNetworkFirewallNetworkFirewallPolicyApplicationGroups(d *schema.ResourceData, m interface{}) error {
	sync := &NetworkFirewallNetworkFirewallPolicyApplicationGroupsDataSourceCrud{}
func (s *NetworkFirewallNetworkFirewallPolicyApplicationGroupsDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *NetworkFirewallNetworkFirewallPolicyApplicationGroupsDataSourceCrud) Get() error {
	request := oci_network_firewall.ListApplicationGroupsRequest{}
func (s *NetworkFirewallNetworkFirewallPolicyApplicationGroupsDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/network_firewall/network_firewall_network_firewall_policy_service_resource.go ===
func NetworkFirewallNetworkFirewallPolicyServiceResource() *schema.Resource {
	return &schema.Resource{
func createNetworkFirewallNetworkFirewallPolicyService(d *schema.ResourceData, m interface{}) error {
	sync := &NetworkFirewallNetworkFirewallPolicyServiceResourceCrud{}
func readNetworkFirewallNetworkFirewallPolicyService(d *schema.ResourceData, m interface{}) error {
	sync := &NetworkFirewallNetworkFirewallPolicyServiceResourceCrud{}
func updateNetworkFirewallNetworkFirewallPolicyService(d *schema.ResourceData, m interface{}) error {
	sync := &NetworkFirewallNetworkFirewallPolicyServiceResourceCrud{}
func deleteNetworkFirewallNetworkFirewallPolicyService(d *schema.ResourceData, m interface{}) error {
	sync := &NetworkFirewallNetworkFirewallPolicyServiceResourceCrud{}
func (s *NetworkFirewallNetworkFirewallPolicyServiceResourceCrud) ID() string {
	return GetNetworkFirewallPolicySubResourceCompositeId(s.D.Get("name").(string), s.D.Get("network_firewall_policy_id").(string), "services")
func (s *NetworkFirewallNetworkFirewallPolicyServiceResourceCrud) Create() error {
	request := oci_network_firewall.CreateServiceRequest{}
func (s *NetworkFirewallNetworkFirewallPolicyServiceResourceCrud) Get() error {
	request := oci_network_firewall.GetServiceRequest{}
func (s *NetworkFirewallNetworkFirewallPolicyServiceResourceCrud) Update() error {
	request := oci_network_firewall.UpdateServiceRequest{}
func (s *NetworkFirewallNetworkFirewallPolicyServiceResourceCrud) Delete() error {
	request := oci_network_firewall.DeleteServiceRequest{}
func (s *NetworkFirewallNetworkFirewallPolicyServiceResourceCrud) SetData() error {

func (s *NetworkFirewallNetworkFirewallPolicyServiceResourceCrud) mapToPortRange(fieldKeyFormat string) (oci_network_firewall.PortRange, error) {
	result := oci_network_firewall.PortRange{}
func (s *NetworkFirewallNetworkFirewallPolicyServiceResourceCrud) populateTopLevelPolymorphicCreateServiceRequest(request *oci_network_firewall.CreateServiceRequest) error {
	//discriminator
func (s *NetworkFirewallNetworkFirewallPolicyServiceResourceCrud) populateTopLevelPolymorphicUpdateServiceRequest(request *oci_network_firewall.UpdateServiceRequest) error {
	//discriminator

=== ./internal/service/network_firewall/network_firewall_network_firewall_policy_service_data_source.go ===
func NetworkFirewallNetworkFirewallPolicyServiceDataSource() *schema.Resource {
	fieldMap := make(map[string]*schema.Schema)
func readSingularNetworkFirewallNetworkFirewallPolicyService(d *schema.ResourceData, m interface{}) error {
	sync := &NetworkFirewallNetworkFirewallPolicyServiceDataSourceCrud{}
func (s *NetworkFirewallNetworkFirewallPolicyServiceDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *NetworkFirewallNetworkFirewallPolicyServiceDataSourceCrud) Get() error {
	request := oci_network_firewall.GetServiceRequest{}
func (s *NetworkFirewallNetworkFirewallPolicyServiceDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/network_firewall/network_firewall_network_firewall_policy_tunnel_inspection_rule_data_source.go ===
func NetworkFirewallNetworkFirewallPolicyTunnelInspectionRuleDataSource() *schema.Resource {
	fieldMap := make(map[string]*schema.Schema)
func readSingularNetworkFirewallNetworkFirewallPolicyTunnelInspectionRule(d *schema.ResourceData, m interface{}) error {
	sync := &NetworkFirewallNetworkFirewallPolicyTunnelInspectionRuleDataSourceCrud{}
func (s *NetworkFirewallNetworkFirewallPolicyTunnelInspectionRuleDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *NetworkFirewallNetworkFirewallPolicyTunnelInspectionRuleDataSourceCrud) Get() error {
	request := oci_network_firewall.GetTunnelInspectionRuleRequest{}
func (s *NetworkFirewallNetworkFirewallPolicyTunnelInspectionRuleDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/network_firewall/network_firewall_network_firewall_policy_address_list_resource.go ===
func NetworkFirewallNetworkFirewallPolicyAddressListResource() *schema.Resource {
	return &schema.Resource{
func createNetworkFirewallNetworkFirewallPolicyAddressList(d *schema.ResourceData, m interface{}) error {
	sync := &NetworkFirewallNetworkFirewallPolicyAddressListResourceCrud{}
func readNetworkFirewallNetworkFirewallPolicyAddressList(d *schema.ResourceData, m interface{}) error {
	sync := &NetworkFirewallNetworkFirewallPolicyAddressListResourceCrud{}
func updateNetworkFirewallNetworkFirewallPolicyAddressList(d *schema.ResourceData, m interface{}) error {
	sync := &NetworkFirewallNetworkFirewallPolicyAddressListResourceCrud{}
func deleteNetworkFirewallNetworkFirewallPolicyAddressList(d *schema.ResourceData, m interface{}) error {
	sync := &NetworkFirewallNetworkFirewallPolicyAddressListResourceCrud{}
func (s *NetworkFirewallNetworkFirewallPolicyAddressListResourceCrud) ID() string {
	return GetNetworkFirewallPolicySubResourceCompositeId(s.D.Get("name").(string), s.D.Get("network_firewall_policy_id").(string), "addressLists")
func (s *NetworkFirewallNetworkFirewallPolicyAddressListResourceCrud) Create() error {
	request := oci_network_firewall.CreateAddressListRequest{}
func (s *NetworkFirewallNetworkFirewallPolicyAddressListResourceCrud) Get() error {
	request := oci_network_firewall.GetAddressListRequest{}
func (s *NetworkFirewallNetworkFirewallPolicyAddressListResourceCrud) Update() error {
	request := oci_network_firewall.UpdateAddressListRequest{}
func (s *NetworkFirewallNetworkFirewallPolicyAddressListResourceCrud) Delete() error {
	request := oci_network_firewall.DeleteAddressListRequest{}
func (s *NetworkFirewallNetworkFirewallPolicyAddressListResourceCrud) SetData() error {

func (s *NetworkFirewallNetworkFirewallPolicyAddressListResourceCrud) populateTopLevelPolymorphicUpdateAddressListRequest(request *oci_network_firewall.UpdateAddressListRequest) error {
	//discriminator

=== ./internal/service/network_firewall/network_firewall_network_firewall_policy_url_lists_data_source.go ===
func NetworkFirewallNetworkFirewallPolicyUrlListsDataSource() *schema.Resource {
	return &schema.Resource{
func readNetworkFirewallNetworkFirewallPolicyUrlLists(d *schema.ResourceData, m interface{}) error {
	sync := &NetworkFirewallNetworkFirewallPolicyUrlListsDataSourceCrud{}
func (s *NetworkFirewallNetworkFirewallPolicyUrlListsDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *NetworkFirewallNetworkFirewallPolicyUrlListsDataSourceCrud) Get() error {
	request := oci_network_firewall.ListUrlListsRequest{}
func (s *NetworkFirewallNetworkFirewallPolicyUrlListsDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/network_firewall/network_firewall_network_firewall_policy_applications_data_source.go ===
func NetworkFirewallNetworkFirewallPolicyApplicationsDataSource() *schema.Resource {
	return &schema.Resource{
func readNetworkFirewallNetworkFirewallPolicyApplications(d *schema.ResourceData, m interface{}) error {
	sync := &NetworkFirewallNetworkFirewallPolicyApplicationsDataSourceCrud{}
func (s *NetworkFirewallNetworkFirewallPolicyApplicationsDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *NetworkFirewallNetworkFirewallPolicyApplicationsDataSourceCrud) Get() error {
	request := oci_network_firewall.ListApplicationsRequest{}
func (s *NetworkFirewallNetworkFirewallPolicyApplicationsDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/network_firewall/network_firewall_network_firewall_policy_mapped_secrets_data_source.go ===
func NetworkFirewallNetworkFirewallPolicyMappedSecretsDataSource() *schema.Resource {
	return &schema.Resource{
func readNetworkFirewallNetworkFirewallPolicyMappedSecrets(d *schema.ResourceData, m interface{}) error {
	sync := &NetworkFirewallNetworkFirewallPolicyMappedSecretsDataSourceCrud{}
func (s *NetworkFirewallNetworkFirewallPolicyMappedSecretsDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *NetworkFirewallNetworkFirewallPolicyMappedSecretsDataSourceCrud) Get() error {
	request := oci_network_firewall.ListMappedSecretsRequest{}
func (s *NetworkFirewallNetworkFirewallPolicyMappedSecretsDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/network_firewall/network_firewall_network_firewall_policy_security_rule_resource.go ===
func NetworkFirewallNetworkFirewallPolicySecurityRuleResource() *schema.Resource {
	return &schema.Resource{
func createNetworkFirewallNetworkFirewallPolicySecurityRule(d *schema.ResourceData, m interface{}) error {
	sync := &NetworkFirewallNetworkFirewallPolicySecurityRuleResourceCrud{}
func readNetworkFirewallNetworkFirewallPolicySecurityRule(d *schema.ResourceData, m interface{}) error {
	sync := &NetworkFirewallNetworkFirewallPolicySecurityRuleResourceCrud{}
func updateNetworkFirewallNetworkFirewallPolicySecurityRule(d *schema.ResourceData, m interface{}) error {
	sync := &NetworkFirewallNetworkFirewallPolicySecurityRuleResourceCrud{}
func deleteNetworkFirewallNetworkFirewallPolicySecurityRule(d *schema.ResourceData, m interface{}) error {
	sync := &NetworkFirewallNetworkFirewallPolicySecurityRuleResourceCrud{}
func (s *NetworkFirewallNetworkFirewallPolicySecurityRuleResourceCrud) ID() string {
	return GetNetworkFirewallPolicySubResourceCompositeId(s.D.Get("name").(string), s.D.Get("network_firewall_policy_id").(string), "securityRules")
func (s *NetworkFirewallNetworkFirewallPolicySecurityRuleResourceCrud) Create() error {
	request := oci_network_firewall.CreateSecurityRuleRequest{}
func (s *NetworkFirewallNetworkFirewallPolicySecurityRuleResourceCrud) Get() error {
	request := oci_network_firewall.GetSecurityRuleRequest{}
func (s *NetworkFirewallNetworkFirewallPolicySecurityRuleResourceCrud) Update() error {
	request := oci_network_firewall.UpdateSecurityRuleRequest{}
func (s *NetworkFirewallNetworkFirewallPolicySecurityRuleResourceCrud) Delete() error {
	request := oci_network_firewall.DeleteSecurityRuleRequest{}
func (s *NetworkFirewallNetworkFirewallPolicySecurityRuleResourceCrud) SetData() error {

func (s *NetworkFirewallNetworkFirewallPolicySecurityRuleResourceCrud) mapToRulePositionUpdate() (oci_network_firewall.RulePosition, error) {
	result := oci_network_firewall.RulePosition{}
func (s *NetworkFirewallNetworkFirewallPolicySecurityRuleResourceCrud) mapToRulePositionCreate(fieldKeyFormat string) (oci_network_firewall.RulePosition, error) {
	result := oci_network_firewall.RulePosition{}
func (s *NetworkFirewallNetworkFirewallPolicySecurityRuleResourceCrud) mapToSecurityRuleMatchCriteria(fieldKeyFormat string) (oci_network_firewall.SecurityRuleMatchCriteria, error) {
	result := oci_network_firewall.SecurityRuleMatchCriteria{}

=== ./internal/service/network_firewall/network_firewall_network_firewall_policy_address_lists_data_source.go ===
func NetworkFirewallNetworkFirewallPolicyAddressListsDataSource() *schema.Resource {
	return &schema.Resource{
func readNetworkFirewallNetworkFirewallPolicyAddressLists(d *schema.ResourceData, m interface{}) error {
	sync := &NetworkFirewallNetworkFirewallPolicyAddressListsDataSourceCrud{}
func (s *NetworkFirewallNetworkFirewallPolicyAddressListsDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *NetworkFirewallNetworkFirewallPolicyAddressListsDataSourceCrud) Get() error {
	request := oci_network_firewall.ListAddressListsRequest{}
func (s *NetworkFirewallNetworkFirewallPolicyAddressListsDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/network_firewall/network_firewall_network_firewall_policy_decryption_profile_resource.go ===
func NetworkFirewallNetworkFirewallPolicyDecryptionProfileResource() *schema.Resource {
	return &schema.Resource{
func createNetworkFirewallNetworkFirewallPolicyDecryptionProfile(d *schema.ResourceData, m interface{}) error {
	sync := &NetworkFirewallNetworkFirewallPolicyDecryptionProfileResourceCrud{}
func readNetworkFirewallNetworkFirewallPolicyDecryptionProfile(d *schema.ResourceData, m interface{}) error {
	sync := &NetworkFirewallNetworkFirewallPolicyDecryptionProfileResourceCrud{}
func updateNetworkFirewallNetworkFirewallPolicyDecryptionProfile(d *schema.ResourceData, m interface{}) error {
	sync := &NetworkFirewallNetworkFirewallPolicyDecryptionProfileResourceCrud{}
func deleteNetworkFirewallNetworkFirewallPolicyDecryptionProfile(d *schema.ResourceData, m interface{}) error {
	sync := &NetworkFirewallNetworkFirewallPolicyDecryptionProfileResourceCrud{}
func (s *NetworkFirewallNetworkFirewallPolicyDecryptionProfileResourceCrud) ID() string {
	return GetNetworkFirewallPolicySubResourceCompositeId(s.D.Get("name").(string), s.D.Get("network_firewall_policy_id").(string), "decryptionProfiles")
func (s *NetworkFirewallNetworkFirewallPolicyDecryptionProfileResourceCrud) Create() error {
	request := oci_network_firewall.CreateDecryptionProfileRequest{}
func (s *NetworkFirewallNetworkFirewallPolicyDecryptionProfileResourceCrud) Get() error {
	request := oci_network_firewall.GetDecryptionProfileRequest{}
func (s *NetworkFirewallNetworkFirewallPolicyDecryptionProfileResourceCrud) Update() error {
	request := oci_network_firewall.UpdateDecryptionProfileRequest{}
func (s *NetworkFirewallNetworkFirewallPolicyDecryptionProfileResourceCrud) Delete() error {
	request := oci_network_firewall.DeleteDecryptionProfileRequest{}
func (s *NetworkFirewallNetworkFirewallPolicyDecryptionProfileResourceCrud) SetData() error {

func (s *NetworkFirewallNetworkFirewallPolicyDecryptionProfileResourceCrud) populateTopLevelPolymorphicCreateDecryptionProfileRequest(request *oci_network_firewall.CreateDecryptionProfileRequest) error {
	//discriminator
func (s *NetworkFirewallNetworkFirewallPolicyDecryptionProfileResourceCrud) populateTopLevelPolymorphicUpdateDecryptionProfileRequest(request *oci_network_firewall.UpdateDecryptionProfileRequest) error {
	//discriminator

=== ./internal/service/network_firewall/network_firewall_network_firewall_policy_security_rules_data_source.go ===
func NetworkFirewallNetworkFirewallPolicySecurityRulesDataSource() *schema.Resource {
	return &schema.Resource{
func readNetworkFirewallNetworkFirewallPolicySecurityRules(d *schema.ResourceData, m interface{}) error {
	sync := &NetworkFirewallNetworkFirewallPolicySecurityRulesDataSourceCrud{}
func (s *NetworkFirewallNetworkFirewallPolicySecurityRulesDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *NetworkFirewallNetworkFirewallPolicySecurityRulesDataSourceCrud) Get() error {
	request := oci_network_firewall.ListSecurityRulesRequest{}
func (s *NetworkFirewallNetworkFirewallPolicySecurityRulesDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/network_firewall/network_firewall_network_firewall_policy_service_list_resource.go ===
func NetworkFirewallNetworkFirewallPolicyServiceListResource() *schema.Resource {
	return &schema.Resource{
func createNetworkFirewallNetworkFirewallPolicyServiceList(d *schema.ResourceData, m interface{}) error {
	sync := &NetworkFirewallNetworkFirewallPolicyServiceListResourceCrud{}
func readNetworkFirewallNetworkFirewallPolicyServiceList(d *schema.ResourceData, m interface{}) error {
	sync := &NetworkFirewallNetworkFirewallPolicyServiceListResourceCrud{}
func updateNetworkFirewallNetworkFirewallPolicyServiceList(d *schema.ResourceData, m interface{}) error {
	sync := &NetworkFirewallNetworkFirewallPolicyServiceListResourceCrud{}
func deleteNetworkFirewallNetworkFirewallPolicyServiceList(d *schema.ResourceData, m interface{}) error {
	sync := &NetworkFirewallNetworkFirewallPolicyServiceListResourceCrud{}
func (s *NetworkFirewallNetworkFirewallPolicyServiceListResourceCrud) ID() string {
	return GetNetworkFirewallPolicySubResourceCompositeId(s.D.Get("name").(string), s.D.Get("network_firewall_policy_id").(string), "serviceLists")
func (s *NetworkFirewallNetworkFirewallPolicyServiceListResourceCrud) Create() error {
	request := oci_network_firewall.CreateServiceListRequest{}
func (s *NetworkFirewallNetworkFirewallPolicyServiceListResourceCrud) Get() error {
	request := oci_network_firewall.GetServiceListRequest{}
func (s *NetworkFirewallNetworkFirewallPolicyServiceListResourceCrud) Update() error {
	request := oci_network_firewall.UpdateServiceListRequest{}
func (s *NetworkFirewallNetworkFirewallPolicyServiceListResourceCrud) Delete() error {
	request := oci_network_firewall.DeleteServiceListRequest{}
func (s *NetworkFirewallNetworkFirewallPolicyServiceListResourceCrud) SetData() error {


=== ./internal/service/network_firewall/network_firewall_network_firewall_policies_data_source.go ===
func NetworkFirewallNetworkFirewallPoliciesDataSource() *schema.Resource {
	return &schema.Resource{
func readNetworkFirewallNetworkFirewallPolicies(d *schema.ResourceData, m interface{}) error {
	sync := &NetworkFirewallNetworkFirewallPoliciesDataSourceCrud{}
func (s *NetworkFirewallNetworkFirewallPoliciesDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *NetworkFirewallNetworkFirewallPoliciesDataSourceCrud) Get() error {
	request := oci_network_firewall.ListNetworkFirewallPoliciesRequest{}
func (s *NetworkFirewallNetworkFirewallPoliciesDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/network_firewall/network_firewall_network_firewall_policy_services_data_source.go ===
func NetworkFirewallNetworkFirewallPolicyServicesDataSource() *schema.Resource {
	return &schema.Resource{
func readNetworkFirewallNetworkFirewallPolicyServices(d *schema.ResourceData, m interface{}) error {
	sync := &NetworkFirewallNetworkFirewallPolicyServicesDataSourceCrud{}
func (s *NetworkFirewallNetworkFirewallPolicyServicesDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *NetworkFirewallNetworkFirewallPolicyServicesDataSourceCrud) Get() error {
	request := oci_network_firewall.ListServicesRequest{}
func (s *NetworkFirewallNetworkFirewallPolicyServicesDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/network_firewall/network_firewall_network_firewall_policy_service_list_data_source.go ===
func NetworkFirewallNetworkFirewallPolicyServiceListDataSource() *schema.Resource {
	fieldMap := make(map[string]*schema.Schema)
func readSingularNetworkFirewallNetworkFirewallPolicyServiceList(d *schema.ResourceData, m interface{}) error {
	sync := &NetworkFirewallNetworkFirewallPolicyServiceListDataSourceCrud{}
func (s *NetworkFirewallNetworkFirewallPolicyServiceListDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *NetworkFirewallNetworkFirewallPolicyServiceListDataSourceCrud) Get() error {
	request := oci_network_firewall.GetServiceListRequest{}
func (s *NetworkFirewallNetworkFirewallPolicyServiceListDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/network_firewall/network_firewall_network_firewall_resource.go ===
func NetworkFirewallNetworkFirewallResource() *schema.Resource {
	return &schema.Resource{
func createNetworkFirewallNetworkFirewall(d *schema.ResourceData, m interface{}) error {
	sync := &NetworkFirewallNetworkFirewallResourceCrud{}
func readNetworkFirewallNetworkFirewall(d *schema.ResourceData, m interface{}) error {
	sync := &NetworkFirewallNetworkFirewallResourceCrud{}
func updateNetworkFirewallNetworkFirewall(d *schema.ResourceData, m interface{}) error {
	sync := &NetworkFirewallNetworkFirewallResourceCrud{}
func deleteNetworkFirewallNetworkFirewall(d *schema.ResourceData, m interface{}) error {
	sync := &NetworkFirewallNetworkFirewallResourceCrud{}
func (s *NetworkFirewallNetworkFirewallResourceCrud) ID() string {
	return *s.Res.Id
func (s *NetworkFirewallNetworkFirewallResourceCrud) CreatedPending() []string {
	return []string{
func (s *NetworkFirewallNetworkFirewallResourceCrud) CreatedTarget() []string {
	return []string{
func (s *NetworkFirewallNetworkFirewallResourceCrud) DeletedPending() []string {
	return []string{
func (s *NetworkFirewallNetworkFirewallResourceCrud) DeletedTarget() []string {
	return []string{
func (s *NetworkFirewallNetworkFirewallResourceCrud) Create() error {
	request := oci_network_firewall.CreateNetworkFirewallRequest{}
func (s *NetworkFirewallNetworkFirewallResourceCrud) getNetworkFirewallFromWorkRequest(workId *string, retryPolicy *oci_common.RetryPolicy,
	actionTypeEnum oci_network_firewall.ActionTypeEnum, timeout time.Duration) error {
func (s *NetworkFirewallNetworkFirewallResourceCrud) Get() error {
	request := oci_network_firewall.GetNetworkFirewallRequest{}
func (s *NetworkFirewallNetworkFirewallResourceCrud) Update() error {
	if compartment, ok := s.D.GetOkExists("compartment_id"); ok && s.D.HasChange("compartment_id") {
func (s *NetworkFirewallNetworkFirewallResourceCrud) Delete() error {
	request := oci_network_firewall.DeleteNetworkFirewallRequest{}
func (s *NetworkFirewallNetworkFirewallResourceCrud) SetData() error {
	if s.Res.AvailabilityDomain != nil {
func (s *NetworkFirewallNetworkFirewallResourceCrud) updateCompartment(compartment interface{}) error {
	changeCompartmentRequest := oci_network_firewall.ChangeNetworkFirewallCompartmentRequest{}

=== ./internal/service/network_firewall/network_firewall_network_firewall_policy_service_lists_data_source.go ===
func NetworkFirewallNetworkFirewallPolicyServiceListsDataSource() *schema.Resource {
	return &schema.Resource{
func readNetworkFirewallNetworkFirewallPolicyServiceLists(d *schema.ResourceData, m interface{}) error {
	sync := &NetworkFirewallNetworkFirewallPolicyServiceListsDataSourceCrud{}
func (s *NetworkFirewallNetworkFirewallPolicyServiceListsDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *NetworkFirewallNetworkFirewallPolicyServiceListsDataSourceCrud) Get() error {
	request := oci_network_firewall.ListServiceListsRequest{}
func (s *NetworkFirewallNetworkFirewallPolicyServiceListsDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/network_firewall/register_resource.go ===
func RegisterResource() {
	tfresource.RegisterResource("oci_network_firewall_network_firewall", NetworkFirewallNetworkFirewallResource())

=== ./internal/service/network_firewall/network_firewall_network_firewall_policy_application_group_resource.go ===
func NetworkFirewallNetworkFirewallPolicyApplicationGroupResource() *schema.Resource {
	return &schema.Resource{
func createNetworkFirewallNetworkFirewallPolicyApplicationGroup(d *schema.ResourceData, m interface{}) error {
	sync := &NetworkFirewallNetworkFirewallPolicyApplicationGroupResourceCrud{}
func readNetworkFirewallNetworkFirewallPolicyApplicationGroup(d *schema.ResourceData, m interface{}) error {
	sync := &NetworkFirewallNetworkFirewallPolicyApplicationGroupResourceCrud{}
func updateNetworkFirewallNetworkFirewallPolicyApplicationGroup(d *schema.ResourceData, m interface{}) error {
	sync := &NetworkFirewallNetworkFirewallPolicyApplicationGroupResourceCrud{}
func deleteNetworkFirewallNetworkFirewallPolicyApplicationGroup(d *schema.ResourceData, m interface{}) error {
	sync := &NetworkFirewallNetworkFirewallPolicyApplicationGroupResourceCrud{}
func (s *NetworkFirewallNetworkFirewallPolicyApplicationGroupResourceCrud) ID() string {
	return GetNetworkFirewallPolicySubResourceCompositeId(s.D.Get("name").(string), s.D.Get("network_firewall_policy_id").(string), "applicationGroups")
func (s *NetworkFirewallNetworkFirewallPolicyApplicationGroupResourceCrud) Create() error {
	request := oci_network_firewall.CreateApplicationGroupRequest{}
func (s *NetworkFirewallNetworkFirewallPolicyApplicationGroupResourceCrud) Get() error {
	request := oci_network_firewall.GetApplicationGroupRequest{}
func (s *NetworkFirewallNetworkFirewallPolicyApplicationGroupResourceCrud) Update() error {
	request := oci_network_firewall.UpdateApplicationGroupRequest{}
func (s *NetworkFirewallNetworkFirewallPolicyApplicationGroupResourceCrud) Delete() error {
	request := oci_network_firewall.DeleteApplicationGroupRequest{}
func (s *NetworkFirewallNetworkFirewallPolicyApplicationGroupResourceCrud) SetData() error {


=== ./internal/service/apigateway/apigateway_usage_plan_resource.go ===
func ApigatewayUsagePlanResource() *schema.Resource {
	return &schema.Resource{
func createApigatewayUsagePlan(d *schema.ResourceData, m interface{}) error {
	sync := &ApigatewayUsagePlanResourceCrud{}
func readApigatewayUsagePlan(d *schema.ResourceData, m interface{}) error {
	sync := &ApigatewayUsagePlanResourceCrud{}
func updateApigatewayUsagePlan(d *schema.ResourceData, m interface{}) error {
	sync := &ApigatewayUsagePlanResourceCrud{}
func deleteApigatewayUsagePlan(d *schema.ResourceData, m interface{}) error {
	sync := &ApigatewayUsagePlanResourceCrud{}
func (s *ApigatewayUsagePlanResourceCrud) ID() string {
	return *s.Res.Id
func (s *ApigatewayUsagePlanResourceCrud) CreatedPending() []string {
	return []string{
func (s *ApigatewayUsagePlanResourceCrud) CreatedTarget() []string {
	return []string{
func (s *ApigatewayUsagePlanResourceCrud) DeletedPending() []string {
	return []string{
func (s *ApigatewayUsagePlanResourceCrud) DeletedTarget() []string {
	return []string{
func (s *ApigatewayUsagePlanResourceCrud) Create() error {
	request := oci_apigateway.CreateUsagePlanRequest{}
func (s *ApigatewayUsagePlanResourceCrud) getUsagePlanFromWorkRequest(workId *string, retryPolicy *oci_common.RetryPolicy,
	actionTypeEnum oci_apigateway.WorkRequestResourceActionTypeEnum, timeout time.Duration) error {
func usagePlanWaitForWorkRequest(wId *string, entityType string, action oci_apigateway.WorkRequestResourceActionTypeEnum,
	timeout time.Duration, disableFoundRetries bool, client *oci_apigateway.WorkRequestsClient) (*string, error) {
func getErrorFromApigatewayUsagePlanWorkRequest(client *oci_apigateway.WorkRequestsClient, workId *string, retryPolicy *oci_common.RetryPolicy, entityType string, action oci_apigateway.WorkRequestResourceActionTypeEnum) error {
	response, err := client.ListWorkRequestErrors(context.Background(),
func (s *ApigatewayUsagePlanResourceCrud) Get() error {
	request := oci_apigateway.GetUsagePlanRequest{}
func (s *ApigatewayUsagePlanResourceCrud) Update() error {
	if compartment, ok := s.D.GetOkExists("compartment_id"); ok && s.D.HasChange("compartment_id") {
func (s *ApigatewayUsagePlanResourceCrud) Delete() error {
	request := oci_apigateway.DeleteUsagePlanRequest{}
func (s *ApigatewayUsagePlanResourceCrud) SetData() error {
	if s.Res.CompartmentId != nil {
func (s *ApigatewayUsagePlanResourceCrud) mapToEntitlement(fieldKeyFormat string) (oci_apigateway.Entitlement, error) {
	result := oci_apigateway.Entitlement{}
func (s *ApigatewayUsagePlanResourceCrud) mapToQuota(fieldKeyFormat string) (oci_apigateway.Quota, error) {
	result := oci_apigateway.Quota{}
func (s *ApigatewayUsagePlanResourceCrud) mapToRateLimit(fieldKeyFormat string) (oci_apigateway.RateLimit, error) {
	result := oci_apigateway.RateLimit{}
func (s *ApigatewayUsagePlanResourceCrud) mapToEntitlementTarget(fieldKeyFormat string) (oci_apigateway.EntitlementTarget, error) {
	result := oci_apigateway.EntitlementTarget{}
func (s *ApigatewayUsagePlanResourceCrud) updateCompartment(compartment interface{}) error {
	changeCompartmentRequest := oci_apigateway.ChangeUsagePlanCompartmentRequest{}

=== ./internal/service/apigateway/apigateway_certificate_data_source.go ===
func ApigatewayCertificateDataSource() *schema.Resource {
	fieldMap := make(map[string]*schema.Schema)
func readSingularApigatewayCertificate(d *schema.ResourceData, m interface{}) error {
	sync := &ApigatewayCertificateDataSourceCrud{}
func (s *ApigatewayCertificateDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *ApigatewayCertificateDataSourceCrud) Get() error {
	request := oci_apigateway.GetCertificateRequest{}
func (s *ApigatewayCertificateDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/apigateway/apigateway_deployment_data_source.go ===
func ApigatewayDeploymentDataSource() *schema.Resource {
	fieldMap := make(map[string]*schema.Schema)
func readSingularApigatewayDeployment(d *schema.ResourceData, m interface{}) error {
	sync := &ApigatewayDeploymentDataSourceCrud{}
func (s *ApigatewayDeploymentDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *ApigatewayDeploymentDataSourceCrud) Get() error {
	request := oci_apigateway.GetDeploymentRequest{}
func (s *ApigatewayDeploymentDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/apigateway/apigateway_api_validation_data_source.go ===
func ApigatewayApiValidationDataSource() *schema.Resource {
	return &schema.Resource{
func readSingularApigatewayApiValidation(d *schema.ResourceData, m interface{}) error {
	sync := &ApigatewayApiValidationDataSourceCrud{}
func (s *ApigatewayApiValidationDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *ApigatewayApiValidationDataSourceCrud) Get() error {
	request := oci_apigateway.GetApiValidationsRequest{}
func (s *ApigatewayApiValidationDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/apigateway/apigateway_api_deployment_specification_data_source.go ===
func ApigatewayApiDeploymentSpecificationDataSource() *schema.Resource {
	return &schema.Resource{
func readSingularApigatewayApiDeploymentSpecification(d *schema.ResourceData, m interface{}) error {
	sync := &ApigatewayApiDeploymentSpecificationDataSourceCrud{}
func (s *ApigatewayApiDeploymentSpecificationDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *ApigatewayApiDeploymentSpecificationDataSourceCrud) Get() error {
	request := oci_apigateway.GetApiDeploymentSpecificationRequest{}
func (s *ApigatewayApiDeploymentSpecificationDataSourceCrud) SetData() error {
	if s.Res == nil {
func (s *ApigatewayApiDeploymentSpecificationDataSourceCrud) mapToHeaderFieldSpecification(fieldKeyFormat string) (oci_apigateway.HeaderFieldSpecification, error) {
	result := oci_apigateway.HeaderFieldSpecification{}
func (s *ApigatewayApiDeploymentSpecificationDataSourceCrud) mapToAdditionalValidationPolicy(fieldKeyFormat string) (oci_apigateway.AdditionalValidationPolicy, error) {
	result := oci_apigateway.AdditionalValidationPolicy{}
func (s *ApigatewayApiDeploymentSpecificationDataSourceCrud) mapToPublicKeySet(fieldKeyFormat string) (oci_apigateway.PublicKeySet, error) {
	var baseObject oci_apigateway.PublicKeySet
func (s *ApigatewayApiDeploymentSpecificationDataSourceCrud) mapToSelectionSourcePolicy(fieldKeyFormat string) (oci_apigateway.SelectionSourcePolicy, error) {
	var baseObject oci_apigateway.SelectionSourcePolicy
func (s *ApigatewayApiDeploymentSpecificationDataSourceCrud) mapToClientAppDetails(fieldKeyFormat string) (oci_apigateway.ClientAppDetails, error) {
	var baseObject oci_apigateway.ClientAppDetails
func (s *ApigatewayApiDeploymentSpecificationDataSourceCrud) mapToJsonWebTokenClaim(fieldKeyFormat string) (oci_apigateway.JsonWebTokenClaim, error) {
	result := oci_apigateway.JsonWebTokenClaim{}
func (s *ApigatewayApiDeploymentSpecificationDataSourceCrud) mapToSourceUriDetails(fieldKeyFormat string) (oci_apigateway.SourceUriDetails, error) {
	var baseObject oci_apigateway.SourceUriDetails
func (s *ApigatewayApiDeploymentSpecificationDataSourceCrud) mapToStaticPublicKey(fieldKeyFormat string) (oci_apigateway.StaticPublicKey, error) {
	var baseObject oci_apigateway.StaticPublicKey
func (s *ApigatewayApiDeploymentSpecificationDataSourceCrud) mapToTokenAuthenticationValidationPolicy(fieldKeyFormat string) (oci_apigateway.TokenAuthenticationValidationPolicy, error) {
	var baseObject oci_apigateway.TokenAuthenticationValidationPolicy
func (s *ApigatewayApiDeploymentSpecificationDataSourceCrud) mapToValidationFailurePolicy(fieldKeyFormat string) (oci_apigateway.ValidationFailurePolicy, error) {
	var baseObject oci_apigateway.ValidationFailurePolicy
func (s *ApigatewayApiDeploymentSpecificationDataSourceCrud) mapToHeaderTransformationPolicy(fieldKeyFormat string) (oci_apigateway.HeaderTransformationPolicy, error) {
	result := oci_apigateway.HeaderTransformationPolicy{}
func (s *ApigatewayApiDeploymentSpecificationDataSourceCrud) mapToFilterHeaderPolicy(fieldKeyFormat string) (oci_apigateway.FilterHeaderPolicy, error) {
	result := oci_apigateway.FilterHeaderPolicy{}
func (s *ApigatewayApiDeploymentSpecificationDataSourceCrud) mapToSetHeaderPolicy(fieldKeyFormat string) (oci_apigateway.SetHeaderPolicy, error) {
	result := oci_apigateway.SetHeaderPolicy{}
func (s *ApigatewayApiDeploymentSpecificationDataSourceCrud) mapToRenameHeaderPolicy(fieldKeyFormat string) (oci_apigateway.RenameHeaderPolicy, error) {
	result := oci_apigateway.RenameHeaderPolicy{}
func (s *ApigatewayApiDeploymentSpecificationDataSourceCrud) mapToRenameHeaderPolicyItem(fieldKeyFormat string) (oci_apigateway.RenameHeaderPolicyItem, error) {
	result := oci_apigateway.RenameHeaderPolicyItem{}
func (s *ApigatewayApiDeploymentSpecificationDataSourceCrud) mapToFilterHeaderPolicyItem(fieldKeyFormat string) (oci_apigateway.FilterHeaderPolicyItem, error) {
	result := oci_apigateway.FilterHeaderPolicyItem{}
func (s *ApigatewayApiDeploymentSpecificationDataSourceCrud) mapToSetHeaderPolicyItem(fieldKeyFormat string) (oci_apigateway.SetHeaderPolicyItem, error) {
	result := oci_apigateway.SetHeaderPolicyItem{}

=== ./internal/service/apigateway/apigateway_apis_data_source.go ===
func ApigatewayApisDataSource() *schema.Resource {
	return &schema.Resource{
func readApigatewayApis(d *schema.ResourceData, m interface{}) error {
	sync := &ApigatewayApisDataSourceCrud{}
func (s *ApigatewayApisDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *ApigatewayApisDataSourceCrud) Get() error {
	request := oci_apigateway.ListApisRequest{}
func (s *ApigatewayApisDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/apigateway/apigateway_certificates_data_source.go ===
func ApigatewayCertificatesDataSource() *schema.Resource {
	return &schema.Resource{
func readApigatewayCertificates(d *schema.ResourceData, m interface{}) error {
	sync := &ApigatewayCertificatesDataSourceCrud{}
func (s *ApigatewayCertificatesDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *ApigatewayCertificatesDataSourceCrud) Get() error {
	request := oci_apigateway.ListCertificatesRequest{}
func (s *ApigatewayCertificatesDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/apigateway/apigateway_api_content_data_source.go ===
func ApigatewayApiContentDataSource() *schema.Resource {
	return &schema.Resource{
func readSingularApigatewayApiContent(d *schema.ResourceData, m interface{}) error {
	sync := &ApigatewayApiContentDataSourceCrud{}
func (s *ApigatewayApiContentDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *ApigatewayApiContentDataSourceCrud) Get() error {
	request := oci_apigateway.GetApiContentRequest{}
func (s *ApigatewayApiContentDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/apigateway/apigateway_subscriber_resource.go ===
func ApigatewaySubscriberResource() *schema.Resource {
	return &schema.Resource{
func createApigatewaySubscriber(d *schema.ResourceData, m interface{}) error {
	sync := &ApigatewaySubscriberResourceCrud{}
func readApigatewaySubscriber(d *schema.ResourceData, m interface{}) error {
	sync := &ApigatewaySubscriberResourceCrud{}
func updateApigatewaySubscriber(d *schema.ResourceData, m interface{}) error {
	sync := &ApigatewaySubscriberResourceCrud{}
func deleteApigatewaySubscriber(d *schema.ResourceData, m interface{}) error {
	sync := &ApigatewaySubscriberResourceCrud{}
func (s *ApigatewaySubscriberResourceCrud) ID() string {
	return *s.Res.Id
func (s *ApigatewaySubscriberResourceCrud) CreatedPending() []string {
	return []string{
func (s *ApigatewaySubscriberResourceCrud) CreatedTarget() []string {
	return []string{
func (s *ApigatewaySubscriberResourceCrud) DeletedPending() []string {
	return []string{
func (s *ApigatewaySubscriberResourceCrud) DeletedTarget() []string {
	return []string{
func (s *ApigatewaySubscriberResourceCrud) Create() error {
	request := oci_apigateway.CreateSubscriberRequest{}
func (s *ApigatewaySubscriberResourceCrud) getSubscriberFromWorkRequest(workId *string, retryPolicy *oci_common.RetryPolicy,
	actionTypeEnum oci_apigateway.WorkRequestResourceActionTypeEnum, timeout time.Duration) error {
func subscriberWaitForWorkRequest(wId *string, entityType string, action oci_apigateway.WorkRequestResourceActionTypeEnum,
	timeout time.Duration, disableFoundRetries bool, client *oci_apigateway.WorkRequestsClient) (*string, error) {
func getErrorFromApigatewaySubscriberWorkRequest(client *oci_apigateway.WorkRequestsClient, workId *string, retryPolicy *oci_common.RetryPolicy, entityType string, action oci_apigateway.WorkRequestResourceActionTypeEnum) error {
	response, err := client.ListWorkRequestErrors(context.Background(),
func (s *ApigatewaySubscriberResourceCrud) Get() error {
	request := oci_apigateway.GetSubscriberRequest{}
func (s *ApigatewaySubscriberResourceCrud) Update() error {
	if compartment, ok := s.D.GetOkExists("compartment_id"); ok && s.D.HasChange("compartment_id") {
func (s *ApigatewaySubscriberResourceCrud) Delete() error {
	request := oci_apigateway.DeleteSubscriberRequest{}
func (s *ApigatewaySubscriberResourceCrud) SetData() error {
	clients := []interface{}{}
func (s *ApigatewaySubscriberResourceCrud) mapToClient(fieldKeyFormat string) (oci_apigateway.Client, error) {
	result := oci_apigateway.Client{}
func (s *ApigatewaySubscriberResourceCrud) updateCompartment(compartment interface{}) error {
	changeCompartmentRequest := oci_apigateway.ChangeSubscriberCompartmentRequest{}

=== ./internal/service/apigateway/apigateway_api_data_source.go ===
func ApigatewayApiDataSource() *schema.Resource {
	fieldMap := make(map[string]*schema.Schema)
func readSingularApigatewayApi(d *schema.ResourceData, m interface{}) error {
	sync := &ApigatewayApiDataSourceCrud{}
func (s *ApigatewayApiDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *ApigatewayApiDataSourceCrud) Get() error {
	request := oci_apigateway.GetApiRequest{}
func (s *ApigatewayApiDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/apigateway/apigateway_subscribers_data_source.go ===
func ApigatewaySubscribersDataSource() *schema.Resource {
	return &schema.Resource{
func readApigatewaySubscribers(d *schema.ResourceData, m interface{}) error {
	sync := &ApigatewaySubscribersDataSourceCrud{}
func (s *ApigatewaySubscribersDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *ApigatewaySubscribersDataSourceCrud) Get() error {
	request := oci_apigateway.ListSubscribersRequest{}
func (s *ApigatewaySubscribersDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/apigateway/apigateway_certificate_resource.go ===
func ApigatewayCertificateResource() *schema.Resource {
	return &schema.Resource{
func createApigatewayCertificate(d *schema.ResourceData, m interface{}) error {
	sync := &ApigatewayCertificateResourceCrud{}
func readApigatewayCertificate(d *schema.ResourceData, m interface{}) error {
	sync := &ApigatewayCertificateResourceCrud{}
func updateApigatewayCertificate(d *schema.ResourceData, m interface{}) error {
	sync := &ApigatewayCertificateResourceCrud{}
func deleteApigatewayCertificate(d *schema.ResourceData, m interface{}) error {
	sync := &ApigatewayCertificateResourceCrud{}
func (s *ApigatewayCertificateResourceCrud) ID() string {
	return *s.Res.Id
func (s *ApigatewayCertificateResourceCrud) CreatedPending() []string {
	return []string{
func (s *ApigatewayCertificateResourceCrud) CreatedTarget() []string {
	return []string{
func (s *ApigatewayCertificateResourceCrud) DeletedPending() []string {
	return []string{
func (s *ApigatewayCertificateResourceCrud) DeletedTarget() []string {
	return []string{
func (s *ApigatewayCertificateResourceCrud) Create() error {
	request := oci_apigateway.CreateCertificateRequest{}
func (s *ApigatewayCertificateResourceCrud) getCertificateFromWorkRequest(workId *string, retryPolicy *oci_common.RetryPolicy,
	actionTypeEnum oci_apigateway.WorkRequestResourceActionTypeEnum, timeout time.Duration) error {
func certificateWaitForWorkRequest(wId *string, entityType string, action oci_apigateway.WorkRequestResourceActionTypeEnum,
	timeout time.Duration, disableFoundRetries bool, client *oci_apigateway.WorkRequestsClient) (*string, error) {
func getErrorFromApigatewayCertificateWorkRequest(client *oci_apigateway.WorkRequestsClient, workId *string, retryPolicy *oci_common.RetryPolicy, entityType string, action oci_apigateway.WorkRequestResourceActionTypeEnum) error {
	response, err := client.ListWorkRequestErrors(context.Background(),
func (s *ApigatewayCertificateResourceCrud) Get() error {
	request := oci_apigateway.GetCertificateRequest{}
func (s *ApigatewayCertificateResourceCrud) Update() error {
	if compartment, ok := s.D.GetOkExists("compartment_id"); ok && s.D.HasChange("compartment_id") {
func (s *ApigatewayCertificateResourceCrud) Delete() error {
	request := oci_apigateway.DeleteCertificateRequest{}
func (s *ApigatewayCertificateResourceCrud) SetData() error {
	if s.Res.Certificate != nil {
func (s *ApigatewayCertificateResourceCrud) updateCompartment(compartment interface{}) error {
	changeCompartmentRequest := oci_apigateway.ChangeCertificateCompartmentRequest{}

=== ./internal/service/apigateway/apigateway_gateway_data_source.go ===
func ApigatewayGatewayDataSource() *schema.Resource {
	fieldMap := make(map[string]*schema.Schema)
func readSingularApigatewayGateway(d *schema.ResourceData, m interface{}) error {
	sync := &ApigatewayGatewayDataSourceCrud{}
func (s *ApigatewayGatewayDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *ApigatewayGatewayDataSourceCrud) Get() error {
	request := oci_apigateway.GetGatewayRequest{}
func (s *ApigatewayGatewayDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/apigateway/apigateway_deployment_resource.go ===
func ApigatewayDeploymentResource() *schema.Resource {
	return &schema.Resource{
func createApigatewayDeployment(d *schema.ResourceData, m interface{}) error {
	sync := &ApigatewayDeploymentResourceCrud{}
func readApigatewayDeployment(d *schema.ResourceData, m interface{}) error {
	sync := &ApigatewayDeploymentResourceCrud{}
func updateApigatewayDeployment(d *schema.ResourceData, m interface{}) error {
	sync := &ApigatewayDeploymentResourceCrud{}
func deleteApigatewayDeployment(d *schema.ResourceData, m interface{}) error {
	sync := &ApigatewayDeploymentResourceCrud{}
func (s *ApigatewayDeploymentResourceCrud) ID() string {
	return *s.Res.Id
func (s *ApigatewayDeploymentResourceCrud) CreatedPending() []string {
	return []string{
func (s *ApigatewayDeploymentResourceCrud) CreatedTarget() []string {
	return []string{
func (s *ApigatewayDeploymentResourceCrud) UpdatedPending() []string {
	return []string{
func (s *ApigatewayDeploymentResourceCrud) UpdatedTarget() []string {
	return []string{
func (s *ApigatewayDeploymentResourceCrud) DeletedPending() []string {
	return []string{
func (s *ApigatewayDeploymentResourceCrud) DeletedTarget() []string {
	return []string{
func (s *ApigatewayDeploymentResourceCrud) Create() error {
	request := oci_apigateway.CreateDeploymentRequest{}
func (s *ApigatewayDeploymentResourceCrud) getDeploymentFromWorkRequest(workId *string, retryPolicy *oci_common.RetryPolicy,
	actionTypeEnum oci_apigateway.WorkRequestResourceActionTypeEnum, timeout time.Duration) error {
func deploymentWaitForWorkRequest(wId *string, entityType string, action oci_apigateway.WorkRequestResourceActionTypeEnum,
	timeout time.Duration, disableFoundRetries bool, client *oci_apigateway.WorkRequestsClient) (*string, error) {
func getErrorFromApigatewayDeploymentWorkRequest(client *oci_apigateway.WorkRequestsClient, workId *string, retryPolicy *oci_common.RetryPolicy, entityType string, action oci_apigateway.WorkRequestResourceActionTypeEnum) error {
	response, err := client.ListWorkRequestErrors(context.Background(),
func (s *ApigatewayDeploymentResourceCrud) Get() error {
	request := oci_apigateway.GetDeploymentRequest{}
func (s *ApigatewayDeploymentResourceCrud) Update() error {
	if compartment, ok := s.D.GetOkExists("compartment_id"); ok && s.D.HasChange("compartment_id") {
func (s *ApigatewayDeploymentResourceCrud) Delete() error {
	request := oci_apigateway.DeleteDeploymentRequest{}
func (s *ApigatewayDeploymentResourceCrud) SetData() error {
	if s.Res.CompartmentId != nil {
func (s *ApigatewayDeploymentResourceCrud) mapToAccessLogPolicy(fieldKeyFormat string) (oci_apigateway.AccessLogPolicy, error) {
	result := oci_apigateway.AccessLogPolicy{}
func (s *ApigatewayDeploymentResourceCrud) mapToAdditionalValidationPolicy(fieldKeyFormat string) (oci_apigateway.AdditionalValidationPolicy, error) {
	result := oci_apigateway.AdditionalValidationPolicy{}
func (s *ApigatewayDeploymentResourceCrud) mapToApiSpecification(fieldKeyFormat string) (oci_apigateway.ApiSpecification, error) {
	result := oci_apigateway.ApiSpecification{}
func (s *ApigatewayDeploymentResourceCrud) mapToApiSpecificationLoggingPolicies(fieldKeyFormat string) (oci_apigateway.ApiSpecificationLoggingPolicies, error) {
	result := oci_apigateway.ApiSpecificationLoggingPolicies{}
func (s *ApigatewayDeploymentResourceCrud) mapToApiSpecificationRequestPolicies(fieldKeyFormat string) (oci_apigateway.ApiSpecificationRequestPolicies, error) {
	result := oci_apigateway.ApiSpecificationRequestPolicies{}
func (s *ApigatewayDeploymentResourceCrud) mapToApiSpecificationRoute(fieldKeyFormat string) (oci_apigateway.ApiSpecificationRoute, error) {
	result := oci_apigateway.ApiSpecificationRoute{}
func (s *ApigatewayDeploymentResourceCrud) mapToApiSpecificationRouteBackend(fieldKeyFormat string) (oci_apigateway.ApiSpecificationRouteBackend, error) {
	var baseObject oci_apigateway.ApiSpecificationRouteBackend
func (s *ApigatewayDeploymentResourceCrud) mapToDynamicRoutingTypeRoutingBackend(fieldKeyFormat string) (oci_apigateway.DynamicRoutingTypeRoutingBackend, error) {
	result := oci_apigateway.DynamicRoutingTypeRoutingBackend{}
func (s *ApigatewayDeploymentResourceCrud) mapToDynamicSelectionKey(fieldKeyFormat string) (oci_apigateway.DynamicSelectionKey, error) {
	var baseObject oci_apigateway.DynamicSelectionKey
func (s *ApigatewayDeploymentResourceCrud) mapToApiSpecificationRouteRequestPolicies(fieldKeyFormat string) (oci_apigateway.ApiSpecificationRouteRequestPolicies, error) {
	result := oci_apigateway.ApiSpecificationRouteRequestPolicies{}
func (s *ApigatewayDeploymentResourceCrud) mapToApiSpecificationRouteResponsePolicies(fieldKeyFormat string) (oci_apigateway.ApiSpecificationRouteResponsePolicies, error) {
	result := oci_apigateway.ApiSpecificationRouteResponsePolicies{}
func (s *ApigatewayDeploymentResourceCrud) mapToAuthenticationPolicy(fieldKeyFormat string) (oci_apigateway.AuthenticationPolicy, error) {
	var baseObject oci_apigateway.AuthenticationPolicy
func (s *ApigatewayDeploymentResourceCrud) mapToAuthenticationServerPolicy(fieldKeyFormat string) (oci_apigateway.AuthenticationServerPolicy, error) {
	result := oci_apigateway.AuthenticationServerPolicy{}
func (s *ApigatewayDeploymentResourceCrud) mapToContentValidation(fieldKeyFormat string) (oci_apigateway.ContentValidation, error) {
	var baseObject oci_apigateway.ContentValidation
func (s *ApigatewayDeploymentResourceCrud) mapToBodyValidationRequestPolicy(fieldKeyFormat string) (oci_apigateway.BodyValidationRequestPolicy, error) {
	result := oci_apigateway.BodyValidationRequestPolicy{}
func (s *ApigatewayDeploymentResourceCrud) mapToClientAppDetails(fieldKeyFormat string) (oci_apigateway.ClientAppDetails, error) {
	var baseObject oci_apigateway.ClientAppDetails
func (s *ApigatewayDeploymentResourceCrud) mapToCorsPolicy(fieldKeyFormat string) (oci_apigateway.CorsPolicy, error) {
	result := oci_apigateway.CorsPolicy{}
func (s *ApigatewayDeploymentResourceCrud) mapToDynamicAuthenticationPolicy(fieldKeyFormat string) (oci_apigateway.DynamicAuthenticationPolicy, error) {
	result := oci_apigateway.DynamicAuthenticationPolicy{}
func (s *ApigatewayDeploymentResourceCrud) mapToExecutionLogPolicy(fieldKeyFormat string) (oci_apigateway.ExecutionLogPolicy, error) {
	result := oci_apigateway.ExecutionLogPolicy{}
func (s *ApigatewayDeploymentResourceCrud) mapToFilterHeaderPolicy(fieldKeyFormat string) (oci_apigateway.FilterHeaderPolicy, error) {
	result := oci_apigateway.FilterHeaderPolicy{}
func (s *ApigatewayDeploymentResourceCrud) mapToFilterHeaderPolicyItem(fieldKeyFormat string) (oci_apigateway.FilterHeaderPolicyItem, error) {
	result := oci_apigateway.FilterHeaderPolicyItem{}
func (s *ApigatewayDeploymentResourceCrud) mapToFilterQueryParameterPolicy(fieldKeyFormat string) (oci_apigateway.FilterQueryParameterPolicy, error) {
	result := oci_apigateway.FilterQueryParameterPolicy{}
func (s *ApigatewayDeploymentResourceCrud) mapToFilterQueryParameterPolicyItem(fieldKeyFormat string) (oci_apigateway.FilterQueryParameterPolicyItem, error) {
	result := oci_apigateway.FilterQueryParameterPolicyItem{}
func (s *ApigatewayDeploymentResourceCrud) mapToHeaderFieldSpecification(fieldKeyFormat string) (oci_apigateway.HeaderFieldSpecification, error) {
	result := oci_apigateway.HeaderFieldSpecification{}
func (s *ApigatewayDeploymentResourceCrud) mapToHeaderTransformationPolicy(fieldKeyFormat string) (oci_apigateway.HeaderTransformationPolicy, error) {
	result := oci_apigateway.HeaderTransformationPolicy{}
func (s *ApigatewayDeploymentResourceCrud) mapToHeaderValidationItem(fieldKeyFormat string) (oci_apigateway.HeaderValidationItem, error) {
	result := oci_apigateway.HeaderValidationItem{}
func (s *ApigatewayDeploymentResourceCrud) mapToHeaderValidationRequestPolicy(fieldKeyFormat string) (oci_apigateway.HeaderValidationRequestPolicy, error) {
	result := oci_apigateway.HeaderValidationRequestPolicy{}
func (s *ApigatewayDeploymentResourceCrud) mapToJsonWebTokenClaim(fieldKeyFormat string) (oci_apigateway.JsonWebTokenClaim, error) {
	result := oci_apigateway.JsonWebTokenClaim{}
func (s *ApigatewayDeploymentResourceCrud) mapToMutualTlsDetails(fieldKeyFormat string) (oci_apigateway.MutualTlsDetails, error) {
	result := oci_apigateway.MutualTlsDetails{}
func (s *ApigatewayDeploymentResourceCrud) mapToPublicKeySet(fieldKeyFormat string) (oci_apigateway.PublicKeySet, error) {
	var baseObject oci_apigateway.PublicKeySet
func (s *ApigatewayDeploymentResourceCrud) mapToQueryParameterTransformationPolicy(fieldKeyFormat string) (oci_apigateway.QueryParameterTransformationPolicy, error) {
	result := oci_apigateway.QueryParameterTransformationPolicy{}
func (s *ApigatewayDeploymentResourceCrud) mapToQueryParameterValidationItem(fieldKeyFormat string) (oci_apigateway.QueryParameterValidationItem, error) {
	result := oci_apigateway.QueryParameterValidationItem{}
func (s *ApigatewayDeploymentResourceCrud) mapToQueryParameterValidationRequestPolicy(fieldKeyFormat string) (oci_apigateway.QueryParameterValidationRequestPolicy, error) {
	result := oci_apigateway.QueryParameterValidationRequestPolicy{}
func (s *ApigatewayDeploymentResourceCrud) mapToRateLimitingPolicy(fieldKeyFormat string) (oci_apigateway.RateLimitingPolicy, error) {
	result := oci_apigateway.RateLimitingPolicy{}
func (s *ApigatewayDeploymentResourceCrud) mapToRenameHeaderPolicy(fieldKeyFormat string) (oci_apigateway.RenameHeaderPolicy, error) {
	result := oci_apigateway.RenameHeaderPolicy{}
func (s *ApigatewayDeploymentResourceCrud) mapToRenameHeaderPolicyItem(fieldKeyFormat string) (oci_apigateway.RenameHeaderPolicyItem, error) {
	result := oci_apigateway.RenameHeaderPolicyItem{}
func (s *ApigatewayDeploymentResourceCrud) mapToRenameQueryParameterPolicy(fieldKeyFormat string) (oci_apigateway.RenameQueryParameterPolicy, error) {
	result := oci_apigateway.RenameQueryParameterPolicy{}
func (s *ApigatewayDeploymentResourceCrud) mapToRenameQueryParameterPolicyItem(fieldKeyFormat string) (oci_apigateway.RenameQueryParameterPolicyItem, error) {
	result := oci_apigateway.RenameQueryParameterPolicyItem{}
func (s *ApigatewayDeploymentResourceCrud) mapToResponseCacheLookupPolicy(fieldKeyFormat string) (oci_apigateway.ResponseCacheLookupPolicy, error) {
	var baseObject oci_apigateway.ResponseCacheLookupPolicy
func (s *ApigatewayDeploymentResourceCrud) mapToResponseCacheStorePolicy(fieldKeyFormat string) (oci_apigateway.ResponseCacheStorePolicy, error) {
	var baseObject oci_apigateway.ResponseCacheStorePolicy
func (s *ApigatewayDeploymentResourceCrud) mapToRouteAuthorizationPolicy(fieldKeyFormat string) (oci_apigateway.RouteAuthorizationPolicy, error) {
	var baseObject oci_apigateway.RouteAuthorizationPolicy
func (s *ApigatewayDeploymentResourceCrud) mapToSelectionSourcePolicy(fieldKeyFormat string) (oci_apigateway.SelectionSourcePolicy, error) {
	var baseObject oci_apigateway.SelectionSourcePolicy
func (s *ApigatewayDeploymentResourceCrud) mapToSetHeaderPolicy(fieldKeyFormat string) (oci_apigateway.SetHeaderPolicy, error) {
	result := oci_apigateway.SetHeaderPolicy{}
func (s *ApigatewayDeploymentResourceCrud) mapToSetHeaderPolicyItem(fieldKeyFormat string) (oci_apigateway.SetHeaderPolicyItem, error) {
	result := oci_apigateway.SetHeaderPolicyItem{}
func (s *ApigatewayDeploymentResourceCrud) mapToSetQueryParameterPolicy(fieldKeyFormat string) (oci_apigateway.SetQueryParameterPolicy, error) {
	result := oci_apigateway.SetQueryParameterPolicy{}
func (s *ApigatewayDeploymentResourceCrud) mapToSetQueryParameterPolicyItem(fieldKeyFormat string) (oci_apigateway.SetQueryParameterPolicyItem, error) {
	result := oci_apigateway.SetQueryParameterPolicyItem{}
func (s *ApigatewayDeploymentResourceCrud) mapToSourceUriDetails(fieldKeyFormat string) (oci_apigateway.SourceUriDetails, error) {
	var baseObject oci_apigateway.SourceUriDetails
func (s *ApigatewayDeploymentResourceCrud) mapToStaticPublicKey(fieldKeyFormat string) (oci_apigateway.StaticPublicKey, error) {
	var baseObject oci_apigateway.StaticPublicKey
func (s *ApigatewayDeploymentResourceCrud) mapToTokenAuthenticationValidationPolicy(fieldKeyFormat string) (oci_apigateway.TokenAuthenticationValidationPolicy, error) {
	var baseObject oci_apigateway.TokenAuthenticationValidationPolicy
func (s *ApigatewayDeploymentResourceCrud) mapToUsagePlansPolicy(fieldKeyFormat string) (oci_apigateway.UsagePlansPolicy, error) {
	result := oci_apigateway.UsagePlansPolicy{}
func (s *ApigatewayDeploymentResourceCrud) mapToValidationFailurePolicy(fieldKeyFormat string) (oci_apigateway.ValidationFailurePolicy, error) {
	var baseObject oci_apigateway.ValidationFailurePolicy
func (s *ApigatewayDeploymentResourceCrud) updateCompartment(compartment interface{}) error {
	changeCompartmentRequest := oci_apigateway.ChangeDeploymentCompartmentRequest{}

=== ./internal/service/apigateway/apigateway_gateways_data_source.go ===
func ApigatewayGatewaysDataSource() *schema.Resource {
	return &schema.Resource{
func readApigatewayGateways(d *schema.ResourceData, m interface{}) error {
	sync := &ApigatewayGatewaysDataSourceCrud{}
func (s *ApigatewayGatewaysDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *ApigatewayGatewaysDataSourceCrud) Get() error {
	request := oci_apigateway.ListGatewaysRequest{}
func (s *ApigatewayGatewaysDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/apigateway/apigateway_usage_plan_data_source.go ===
func ApigatewayUsagePlanDataSource() *schema.Resource {
	fieldMap := make(map[string]*schema.Schema)
func readSingularApigatewayUsagePlan(d *schema.ResourceData, m interface{}) error {
	sync := &ApigatewayUsagePlanDataSourceCrud{}
func (s *ApigatewayUsagePlanDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *ApigatewayUsagePlanDataSourceCrud) Get() error {
	request := oci_apigateway.GetUsagePlanRequest{}
func (s *ApigatewayUsagePlanDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/apigateway/apigateway_usage_plans_data_source.go ===
func ApigatewayUsagePlansDataSource() *schema.Resource {
	return &schema.Resource{
func readApigatewayUsagePlans(d *schema.ResourceData, m interface{}) error {
	sync := &ApigatewayUsagePlansDataSourceCrud{}
func (s *ApigatewayUsagePlansDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *ApigatewayUsagePlansDataSourceCrud) Get() error {
	request := oci_apigateway.ListUsagePlansRequest{}
func (s *ApigatewayUsagePlansDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/apigateway/apigateway_api_resource.go ===
func ApigatewayApiResource() *schema.Resource {
	return &schema.Resource{
func createApigatewayApi(d *schema.ResourceData, m interface{}) error {
	sync := &ApigatewayApiResourceCrud{}
func readApigatewayApi(d *schema.ResourceData, m interface{}) error {
	sync := &ApigatewayApiResourceCrud{}
func updateApigatewayApi(d *schema.ResourceData, m interface{}) error {
	sync := &ApigatewayApiResourceCrud{}
func deleteApigatewayApi(d *schema.ResourceData, m interface{}) error {
	sync := &ApigatewayApiResourceCrud{}
func (s *ApigatewayApiResourceCrud) ID() string {
	return *s.Res.Id
func (s *ApigatewayApiResourceCrud) CreatedPending() []string {
	return []string{
func (s *ApigatewayApiResourceCrud) CreatedTarget() []string {
	return []string{
func (s *ApigatewayApiResourceCrud) DeletedPending() []string {
	return []string{
func (s *ApigatewayApiResourceCrud) DeletedTarget() []string {
	return []string{
func (s *ApigatewayApiResourceCrud) Create() error {
	request := oci_apigateway.CreateApiRequest{}
func (s *ApigatewayApiResourceCrud) getApiFromWorkRequest(workId *string, retryPolicy *oci_common.RetryPolicy,
	actionTypeEnum oci_apigateway.WorkRequestResourceActionTypeEnum, timeout time.Duration) error {
func apiWaitForWorkRequest(wId *string, entityType string, action oci_apigateway.WorkRequestResourceActionTypeEnum,
	timeout time.Duration, disableFoundRetries bool, client *oci_apigateway.WorkRequestsClient) (*string, error) {
func getErrorFromApigatewayApiWorkRequest(client *oci_apigateway.WorkRequestsClient, workId *string, retryPolicy *oci_common.RetryPolicy, entityType string, action oci_apigateway.WorkRequestResourceActionTypeEnum) error {
	response, err := client.ListWorkRequestErrors(context.Background(),
func (s *ApigatewayApiResourceCrud) Get() error {
	request := oci_apigateway.GetApiRequest{}
func (s *ApigatewayApiResourceCrud) Update() error {
	if compartment, ok := s.D.GetOkExists("compartment_id"); ok && s.D.HasChange("compartment_id") {
func (s *ApigatewayApiResourceCrud) Delete() error {
	request := oci_apigateway.DeleteApiRequest{}
func (s *ApigatewayApiResourceCrud) SetData() error {
	if s.Res.CompartmentId != nil {
func (s *ApigatewayApiResourceCrud) updateCompartment(compartment interface{}) error {
	changeCompartmentRequest := oci_apigateway.ChangeApiCompartmentRequest{}
func apiResourceShouldRetryFunc(timeout time.Duration) func(response oci_common.OCIOperationResponse) bool {
	startTime := time.Now()

=== ./internal/service/apigateway/apigateway_gateway_resource.go ===
func ApigatewayGatewayResource() *schema.Resource {
	return &schema.Resource{
func createApigatewayGateway(d *schema.ResourceData, m interface{}) error {
	sync := &ApigatewayGatewayResourceCrud{}
func readApigatewayGateway(d *schema.ResourceData, m interface{}) error {
	sync := &ApigatewayGatewayResourceCrud{}
func updateApigatewayGateway(d *schema.ResourceData, m interface{}) error {
	sync := &ApigatewayGatewayResourceCrud{}
func deleteApigatewayGateway(d *schema.ResourceData, m interface{}) error {
	sync := &ApigatewayGatewayResourceCrud{}
func (s *ApigatewayGatewayResourceCrud) ID() string {
	return *s.Res.Id
func (s *ApigatewayGatewayResourceCrud) CreatedPending() []string {
	return []string{
func (s *ApigatewayGatewayResourceCrud) CreatedTarget() []string {
	return []string{
func (s *ApigatewayGatewayResourceCrud) DeletedPending() []string {
	return []string{
func (s *ApigatewayGatewayResourceCrud) DeletedTarget() []string {
	return []string{
func (s *ApigatewayGatewayResourceCrud) Create() error {
	request := oci_apigateway.CreateGatewayRequest{}
func (s *ApigatewayGatewayResourceCrud) getGatewayFromWorkRequest(workId *string, retryPolicy *oci_common.RetryPolicy,
	actionTypeEnum oci_apigateway.WorkRequestResourceActionTypeEnum, timeout time.Duration) error {
func gatewayWaitForWorkRequest(wId *string, entityType string, action oci_apigateway.WorkRequestResourceActionTypeEnum,
	timeout time.Duration, disableFoundRetries bool, client *oci_apigateway.WorkRequestsClient) (*string, error) {
func getErrorFromApigatewayGatewayWorkRequest(client *oci_apigateway.WorkRequestsClient, workId *string, retryPolicy *oci_common.RetryPolicy, entityType string, action oci_apigateway.WorkRequestResourceActionTypeEnum) error {
	response, err := client.ListWorkRequestErrors(context.Background(),
func (s *ApigatewayGatewayResourceCrud) Get() error {
	request := oci_apigateway.GetGatewayRequest{}
func (s *ApigatewayGatewayResourceCrud) Update() error {
	if compartment, ok := s.D.GetOkExists("compartment_id"); ok && s.D.HasChange("compartment_id") {
func (s *ApigatewayGatewayResourceCrud) Delete() error {
	request := oci_apigateway.DeleteGatewayRequest{}
func (s *ApigatewayGatewayResourceCrud) SetData() error {
	caBundles := []interface{}{}
func (s *ApigatewayGatewayResourceCrud) mapToCaBundle(fieldKeyFormat string) (oci_apigateway.CaBundle, error) {
	var baseObject oci_apigateway.CaBundle
func (s *ApigatewayGatewayResourceCrud) mapToResponseCacheDetails(fieldKeyFormat string) (oci_apigateway.ResponseCacheDetails, error) {
	var baseObject oci_apigateway.ResponseCacheDetails
func (s *ApigatewayGatewayResourceCrud) mapToResponseCacheRespServer(fieldKeyFormat string) (oci_apigateway.ResponseCacheRespServer, error) {
	result := oci_apigateway.ResponseCacheRespServer{}
func (s *ApigatewayGatewayResourceCrud) updateCompartment(compartment interface{}) error {
	changeCompartmentRequest := oci_apigateway.ChangeGatewayCompartmentRequest{}

=== ./internal/service/apigateway/apigateway_deployments_data_source.go ===
func ApigatewayDeploymentsDataSource() *schema.Resource {
	return &schema.Resource{
func readApigatewayDeployments(d *schema.ResourceData, m interface{}) error {
	sync := &ApigatewayDeploymentsDataSourceCrud{}
func (s *ApigatewayDeploymentsDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *ApigatewayDeploymentsDataSourceCrud) Get() error {
	request := oci_apigateway.ListDeploymentsRequest{}
func (s *ApigatewayDeploymentsDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/apigateway/apigateway_subscriber_data_source.go ===
func ApigatewaySubscriberDataSource() *schema.Resource {
	fieldMap := make(map[string]*schema.Schema)
func readSingularApigatewaySubscriber(d *schema.ResourceData, m interface{}) error {
	sync := &ApigatewaySubscriberDataSourceCrud{}
func (s *ApigatewaySubscriberDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *ApigatewaySubscriberDataSourceCrud) Get() error {
	request := oci_apigateway.GetSubscriberRequest{}
func (s *ApigatewaySubscriberDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/apigateway/register_resource.go ===
func RegisterResource() {
	tfresource.RegisterResource("oci_apigateway_api", ApigatewayApiResource())

=== ./internal/service/osub_organization_subscription/osub_organization_subscription_organization_subscriptions_data_source.go ===
func OsubOrganizationSubscriptionOrganizationSubscriptionsDataSource() *schema.Resource {
	return &schema.Resource{
func readOsubOrganizationSubscriptionOrganizationSubscriptions(d *schema.ResourceData, m interface{}) error {
	sync := &OsubOrganizationSubscriptionOrganizationSubscriptionsDataSourceCrud{}
func (s *OsubOrganizationSubscriptionOrganizationSubscriptionsDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *OsubOrganizationSubscriptionOrganizationSubscriptionsDataSourceCrud) Get() error {
	request := oci_osub_organization_subscription.ListOrganizationSubscriptionsRequest{}
func (s *OsubOrganizationSubscriptionOrganizationSubscriptionsDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/osub_organization_subscription/register_resource.go ===
func RegisterResource() {
}

=== ./internal/service/adm/adm_remediation_run_stages_data_source.go ===
func AdmRemediationRunStagesDataSource() *schema.Resource {
	return &schema.Resource{
func readAdmRemediationRunStages(d *schema.ResourceData, m interface{}) error {
	sync := &AdmRemediationRunStagesDataSourceCrud{}
func (s *AdmRemediationRunStagesDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *AdmRemediationRunStagesDataSourceCrud) Get() error {
	request := oci_adm.ListStagesRequest{}
func (s *AdmRemediationRunStagesDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/adm/adm_vulnerability_audit_application_dependency_vulnerabilities_data_source.go ===
func AdmVulnerabilityAuditApplicationDependencyVulnerabilitiesDataSource() *schema.Resource {
	return &schema.Resource{
func readAdmVulnerabilityAuditApplicationDependencyVulnerabilities(d *schema.ResourceData, m interface{}) error {
	sync := &AdmVulnerabilityAuditApplicationDependencyVulnerabilitiesDataSourceCrud{}
func (s *AdmVulnerabilityAuditApplicationDependencyVulnerabilitiesDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *AdmVulnerabilityAuditApplicationDependencyVulnerabilitiesDataSourceCrud) Get() error {
	request := oci_adm.ListApplicationDependencyVulnerabilitiesRequest{}
func (s *AdmVulnerabilityAuditApplicationDependencyVulnerabilitiesDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/adm/adm_vulnerability_audit_data_source.go ===
func AdmVulnerabilityAuditDataSource() *schema.Resource {
	fieldMap := make(map[string]*schema.Schema)
func readSingularAdmVulnerabilityAudit(d *schema.ResourceData, m interface{}) error {
	sync := &AdmVulnerabilityAuditDataSourceCrud{}
func (s *AdmVulnerabilityAuditDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *AdmVulnerabilityAuditDataSourceCrud) Get() error {
	request := oci_adm.GetVulnerabilityAuditRequest{}
func (s *AdmVulnerabilityAuditDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/adm/adm_vulnerability_audit_resource.go ===
func AdmVulnerabilityAuditResource() *schema.Resource {
	return &schema.Resource{
func createAdmVulnerabilityAudit(d *schema.ResourceData, m interface{}) error {
	sync := &AdmVulnerabilityAuditResourceCrud{}
func readAdmVulnerabilityAudit(d *schema.ResourceData, m interface{}) error {
	sync := &AdmVulnerabilityAuditResourceCrud{}
func updateAdmVulnerabilityAudit(d *schema.ResourceData, m interface{}) error {
	sync := &AdmVulnerabilityAuditResourceCrud{}
func deleteAdmVulnerabilityAudit(d *schema.ResourceData, m interface{}) error {
	sync := &AdmVulnerabilityAuditResourceCrud{}
func (s *AdmVulnerabilityAuditResourceCrud) ID() string {
	return *s.Res.Id
func (s *AdmVulnerabilityAuditResourceCrud) CreatedPending() []string {
	return []string{
func (s *AdmVulnerabilityAuditResourceCrud) CreatedTarget() []string {
	return []string{
func (s *AdmVulnerabilityAuditResourceCrud) DeletedPending() []string {
	return []string{
func (s *AdmVulnerabilityAuditResourceCrud) DeletedTarget() []string {
	return []string{
func (s *AdmVulnerabilityAuditResourceCrud) Create() error {
	request := oci_adm.CreateVulnerabilityAuditRequest{}
func (s *AdmVulnerabilityAuditResourceCrud) Get() error {
	request := oci_adm.GetVulnerabilityAuditRequest{}
func (s *AdmVulnerabilityAuditResourceCrud) Update() error {
	if compartment, ok := s.D.GetOkExists("compartment_id"); ok && s.D.HasChange("compartment_id") {
func (s *AdmVulnerabilityAuditResourceCrud) Delete() error {
	request := oci_adm.DeleteVulnerabilityAuditRequest{}
func (s *AdmVulnerabilityAuditResourceCrud) SetData() error {
	s.D.Set("build_type", s.Res.BuildType)
func (s *AdmVulnerabilityAuditResourceCrud) mapToApplicationDependency(fieldKeyFormat string) (oci_adm.ApplicationDependency, error) {
	result := oci_adm.ApplicationDependency{}
func (s *AdmVulnerabilityAuditResourceCrud) mapToUsageDataDetails(fieldKeyFormat string) (oci_adm.UsageDataDetails, error) {
	var baseObject oci_adm.UsageDataDetails
func (s *AdmVulnerabilityAuditResourceCrud) mapToVulnerabilityAuditConfiguration(fieldKeyFormat string) (oci_adm.VulnerabilityAuditConfiguration, error) {
	result := oci_adm.VulnerabilityAuditConfiguration{}
func (s *AdmVulnerabilityAuditResourceCrud) mapToVulnerabilityAuditSource(fieldKeyFormat string) (oci_adm.VulnerabilityAuditSource, error) {
	var baseObject oci_adm.VulnerabilityAuditSource
func (s *AdmVulnerabilityAuditResourceCrud) updateCompartment(compartment interface{}) error {
	changeCompartmentRequest := oci_adm.ChangeVulnerabilityAuditCompartmentRequest{}

=== ./internal/service/adm/adm_remediation_run_data_source.go ===
func AdmRemediationRunDataSource() *schema.Resource {
	fieldMap := make(map[string]*schema.Schema)
func readSingularAdmRemediationRun(d *schema.ResourceData, m interface{}) error {
	sync := &AdmRemediationRunDataSourceCrud{}
func (s *AdmRemediationRunDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *AdmRemediationRunDataSourceCrud) Get() error {
	request := oci_adm.GetRemediationRunRequest{}
func (s *AdmRemediationRunDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/adm/adm_remediation_run_resource.go ===
func AdmRemediationRunResource() *schema.Resource {
	return &schema.Resource{
func createAdmRemediationRun(d *schema.ResourceData, m interface{}) error {
	sync := &AdmRemediationRunResourceCrud{}
func readAdmRemediationRun(d *schema.ResourceData, m interface{}) error {
	sync := &AdmRemediationRunResourceCrud{}
func updateAdmRemediationRun(d *schema.ResourceData, m interface{}) error {
	sync := &AdmRemediationRunResourceCrud{}
func deleteAdmRemediationRun(d *schema.ResourceData, m interface{}) error {
	sync := &AdmRemediationRunResourceCrud{}
func (s *AdmRemediationRunResourceCrud) ID() string {
	return *s.Res.Id
func (s *AdmRemediationRunResourceCrud) CreatedPending() []string {
	return []string{
func (s *AdmRemediationRunResourceCrud) CreatedTarget() []string {
	return []string{
func (s *AdmRemediationRunResourceCrud) DeletedPending() []string {
	return []string{
func (s *AdmRemediationRunResourceCrud) DeletedTarget() []string {
	return []string{
func (s *AdmRemediationRunResourceCrud) Create() error {
	request := oci_adm.CreateRemediationRunRequest{}
func (s *AdmRemediationRunResourceCrud) Get() error {
	request := oci_adm.GetRemediationRunRequest{}
func (s *AdmRemediationRunResourceCrud) Update() error {

func (s *AdmRemediationRunResourceCrud) Delete() error {
	request := oci_adm.DeleteRemediationRunRequest{}
func (s *AdmRemediationRunResourceCrud) SetData() error {
	if s.Res.CompartmentId != nil {
func (s *AdmRemediationRunResourceCrud) CancelRemediationRun() error {
	request := oci_adm.CancelRemediationRunRequest{}
func (s *AdmRemediationRunResourceCrud) updateCompartment(compartment interface{}) error {
	changeCompartmentRequest := oci_adm.ChangeRemediationRunCompartmentRequest{}

=== ./internal/service/adm/adm_remediation_run_stage_data_source.go ===
func AdmRemediationRunStageDataSource() *schema.Resource {
	return &schema.Resource{
func readSingularAdmRemediationRunStage(d *schema.ResourceData, m interface{}) error {
	sync := &AdmRemediationRunStageDataSourceCrud{}
func (s *AdmRemediationRunStageDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *AdmRemediationRunStageDataSourceCrud) Get() error {
	request := oci_adm.GetStageRequest{}
func (s *AdmRemediationRunStageDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/adm/adm_knowledge_bases_data_source.go ===
func AdmKnowledgeBasesDataSource() *schema.Resource {
	return &schema.Resource{
func readAdmKnowledgeBases(d *schema.ResourceData, m interface{}) error {
	sync := &AdmKnowledgeBasesDataSourceCrud{}
func (s *AdmKnowledgeBasesDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *AdmKnowledgeBasesDataSourceCrud) Get() error {
	request := oci_adm.ListKnowledgeBasesRequest{}
func (s *AdmKnowledgeBasesDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/adm/adm_remediation_recipes_data_source.go ===
func AdmRemediationRecipesDataSource() *schema.Resource {
	return &schema.Resource{
func readAdmRemediationRecipes(d *schema.ResourceData, m interface{}) error {
	sync := &AdmRemediationRecipesDataSourceCrud{}
func (s *AdmRemediationRecipesDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *AdmRemediationRecipesDataSourceCrud) Get() error {
	request := oci_adm.ListRemediationRecipesRequest{}
func (s *AdmRemediationRecipesDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/adm/adm_knowledge_base_resource.go ===
func AdmKnowledgeBaseResource() *schema.Resource {
	return &schema.Resource{
func createAdmKnowledgeBase(d *schema.ResourceData, m interface{}) error {
	sync := &AdmKnowledgeBaseResourceCrud{}
func readAdmKnowledgeBase(d *schema.ResourceData, m interface{}) error {
	sync := &AdmKnowledgeBaseResourceCrud{}
func updateAdmKnowledgeBase(d *schema.ResourceData, m interface{}) error {
	sync := &AdmKnowledgeBaseResourceCrud{}
func deleteAdmKnowledgeBase(d *schema.ResourceData, m interface{}) error {
	sync := &AdmKnowledgeBaseResourceCrud{}
func (s *AdmKnowledgeBaseResourceCrud) ID() string {
	return *s.Res.Id
func (s *AdmKnowledgeBaseResourceCrud) CreatedPending() []string {
	return []string{
func (s *AdmKnowledgeBaseResourceCrud) CreatedTarget() []string {
	return []string{
func (s *AdmKnowledgeBaseResourceCrud) DeletedPending() []string {
	return []string{
func (s *AdmKnowledgeBaseResourceCrud) DeletedTarget() []string {
	return []string{
func (s *AdmKnowledgeBaseResourceCrud) Create() error {
	request := oci_adm.CreateKnowledgeBaseRequest{}
func (s *AdmKnowledgeBaseResourceCrud) getKnowledgeBaseFromWorkRequest(workId *string, retryPolicy *oci_common.RetryPolicy,
	actionTypeEnum oci_adm.ActionTypeEnum, timeout time.Duration) error {
func (s *AdmKnowledgeBaseResourceCrud) Get() error {
	request := oci_adm.GetKnowledgeBaseRequest{}
func (s *AdmKnowledgeBaseResourceCrud) Update() error {
	if compartment, ok := s.D.GetOkExists("compartment_id"); ok && s.D.HasChange("compartment_id") {
func (s *AdmKnowledgeBaseResourceCrud) Delete() error {
	request := oci_adm.DeleteKnowledgeBaseRequest{}
func (s *AdmKnowledgeBaseResourceCrud) SetData() error {
	if s.Res.CompartmentId != nil {
func (s *AdmKnowledgeBaseResourceCrud) updateCompartment(compartment interface{}) error {
	changeCompartmentRequest := oci_adm.ChangeKnowledgeBaseCompartmentRequest{}

=== ./internal/service/adm/adm_vulnerability_audits_data_source.go ===
func AdmVulnerabilityAuditsDataSource() *schema.Resource {
	return &schema.Resource{
func readAdmVulnerabilityAudits(d *schema.ResourceData, m interface{}) error {
	sync := &AdmVulnerabilityAuditsDataSourceCrud{}
func (s *AdmVulnerabilityAuditsDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *AdmVulnerabilityAuditsDataSourceCrud) Get() error {
	request := oci_adm.ListVulnerabilityAuditsRequest{}
func (s *AdmVulnerabilityAuditsDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/adm/adm_vulnerability_audit_application_dependency_vulnerability_data_source.go ===
func AdmVulnerabilityAuditApplicationDependencyVulnerabilityDataSource() *schema.Resource {
	return &schema.Resource{
func readSingularAdmVulnerabilityAuditApplicationDependencyVulnerability(d *schema.ResourceData, m interface{}) error {
	sync := &AdmVulnerabilityAuditApplicationDependencyVulnerabilityDataSourceCrud{}
func (s *AdmVulnerabilityAuditApplicationDependencyVulnerabilityDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *AdmVulnerabilityAuditApplicationDependencyVulnerabilityDataSourceCrud) Get() error {
	request := oci_adm.ListApplicationDependencyVulnerabilitiesRequest{}
func (s *AdmVulnerabilityAuditApplicationDependencyVulnerabilityDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/adm/adm_remediation_run_application_dependency_recommendations_data_source.go ===
func AdmRemediationRunApplicationDependencyRecommendationsDataSource() *schema.Resource {
	return &schema.Resource{
func readAdmRemediationRunApplicationDependencyRecommendations(d *schema.ResourceData, m interface{}) error {
	sync := &AdmRemediationRunApplicationDependencyRecommendationsDataSourceCrud{}
func (s *AdmRemediationRunApplicationDependencyRecommendationsDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *AdmRemediationRunApplicationDependencyRecommendationsDataSourceCrud) Get() error {
	request := oci_adm.ListApplicationDependencyRecommendationsRequest{}
func (s *AdmRemediationRunApplicationDependencyRecommendationsDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/adm/adm_knowledge_base_data_source.go ===
func AdmKnowledgeBaseDataSource() *schema.Resource {
	fieldMap := make(map[string]*schema.Schema)
func readSingularAdmKnowledgeBase(d *schema.ResourceData, m interface{}) error {
	sync := &AdmKnowledgeBaseDataSourceCrud{}
func (s *AdmKnowledgeBaseDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *AdmKnowledgeBaseDataSourceCrud) Get() error {
	request := oci_adm.GetKnowledgeBaseRequest{}
func (s *AdmKnowledgeBaseDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/adm/adm_remediation_recipe_data_source.go ===
func AdmRemediationRecipeDataSource() *schema.Resource {
	fieldMap := make(map[string]*schema.Schema)
func readSingularAdmRemediationRecipe(d *schema.ResourceData, m interface{}) error {
	sync := &AdmRemediationRecipeDataSourceCrud{}
func (s *AdmRemediationRecipeDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *AdmRemediationRecipeDataSourceCrud) Get() error {
	request := oci_adm.GetRemediationRecipeRequest{}
func (s *AdmRemediationRecipeDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/adm/adm_remediation_runs_data_source.go ===
func AdmRemediationRunsDataSource() *schema.Resource {
	return &schema.Resource{
func readAdmRemediationRuns(d *schema.ResourceData, m interface{}) error {
	sync := &AdmRemediationRunsDataSourceCrud{}
func (s *AdmRemediationRunsDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *AdmRemediationRunsDataSourceCrud) Get() error {
	request := oci_adm.ListRemediationRunsRequest{}
func (s *AdmRemediationRunsDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/adm/adm_remediation_recipe_resource.go ===
func AdmRemediationRecipeResource() *schema.Resource {
	return &schema.Resource{
func createAdmRemediationRecipe(d *schema.ResourceData, m interface{}) error {
	sync := &AdmRemediationRecipeResourceCrud{}
func readAdmRemediationRecipe(d *schema.ResourceData, m interface{}) error {
	sync := &AdmRemediationRecipeResourceCrud{}
func updateAdmRemediationRecipe(d *schema.ResourceData, m interface{}) error {
	sync := &AdmRemediationRecipeResourceCrud{}
func deleteAdmRemediationRecipe(d *schema.ResourceData, m interface{}) error {
	sync := &AdmRemediationRecipeResourceCrud{}
func (s *AdmRemediationRecipeResourceCrud) ID() string {
	return *s.Res.Id
func (s *AdmRemediationRecipeResourceCrud) CreatedPending() []string {
	return []string{
func (s *AdmRemediationRecipeResourceCrud) CreatedTarget() []string {
	return []string{
func (s *AdmRemediationRecipeResourceCrud) DeletedPending() []string {
	return []string{
func (s *AdmRemediationRecipeResourceCrud) DeletedTarget() []string {
	return []string{
func (s *AdmRemediationRecipeResourceCrud) Create() error {
	request := oci_adm.CreateRemediationRecipeRequest{}
func (s *AdmRemediationRecipeResourceCrud) getRemediationRecipeFromWorkRequest(workId *string, retryPolicy *oci_common.RetryPolicy,
	actionTypeEnum oci_adm.ActionTypeEnum, timeout time.Duration) error {
func (s *AdmRemediationRecipeResourceCrud) Get() error {
	request := oci_adm.GetRemediationRecipeRequest{}
func (s *AdmRemediationRecipeResourceCrud) Update() error {
	if compartment, ok := s.D.GetOkExists("compartment_id"); ok && s.D.HasChange("compartment_id") {
func (s *AdmRemediationRecipeResourceCrud) Delete() error {
	request := oci_adm.DeleteRemediationRecipeRequest{}
func (s *AdmRemediationRecipeResourceCrud) SetData() error {
	if s.Res.CompartmentId != nil {
func (s *AdmRemediationRecipeResourceCrud) StartRemediationRecipe() error {
	request := oci_adm.ActivateRemediationRecipeRequest{}
func (s *AdmRemediationRecipeResourceCrud) StopRemediationRecipe() error {
	request := oci_adm.DeactivateRemediationRecipeRequest{}
func (s *AdmRemediationRecipeResourceCrud) mapToDetectConfiguration(fieldKeyFormat string) (oci_adm.DetectConfiguration, error) {
	result := oci_adm.DetectConfiguration{}
func (s *AdmRemediationRecipeResourceCrud) mapToNetworkConfiguration(fieldKeyFormat string) (oci_adm.NetworkConfiguration, error) {
	result := oci_adm.NetworkConfiguration{}
func (s *AdmRemediationRecipeResourceCrud) mapToScmConfiguration(fieldKeyFormat string) (oci_adm.ScmConfiguration, error) {
	var baseObject oci_adm.ScmConfiguration
func (s *AdmRemediationRecipeResourceCrud) mapToVerifyConfiguration(fieldKeyFormat string) (oci_adm.VerifyConfiguration, error) {
	var baseObject oci_adm.VerifyConfiguration
func (s *AdmRemediationRecipeResourceCrud) updateCompartment(compartment interface{}) error {
	changeCompartmentRequest := oci_adm.ChangeRemediationRecipeCompartmentRequest{}

=== ./internal/service/adm/register_resource.go ===
func RegisterResource() {
	tfresource.RegisterResource("oci_adm_knowledge_base", AdmKnowledgeBaseResource())

=== ./internal/service/security_attribute/security_attribute_security_attribute_namespaces_data_source.go ===
func SecurityAttributeSecurityAttributeNamespacesDataSource() *schema.Resource {
	return &schema.Resource{
func readSecurityAttributeSecurityAttributeNamespaces(d *schema.ResourceData, m interface{}) error {
	sync := &SecurityAttributeSecurityAttributeNamespacesDataSourceCrud{}
func (s *SecurityAttributeSecurityAttributeNamespacesDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *SecurityAttributeSecurityAttributeNamespacesDataSourceCrud) Get() error {
	request := oci_security_attribute.ListSecurityAttributeNamespacesRequest{}
func (s *SecurityAttributeSecurityAttributeNamespacesDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/security_attribute/security_attribute_security_attribute_namespace_data_source.go ===
func SecurityAttributeSecurityAttributeNamespaceDataSource() *schema.Resource {
	fieldMap := make(map[string]*schema.Schema)
func readSingularSecurityAttributeSecurityAttributeNamespace(d *schema.ResourceData, m interface{}) error {
	sync := &SecurityAttributeSecurityAttributeNamespaceDataSourceCrud{}
func (s *SecurityAttributeSecurityAttributeNamespaceDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *SecurityAttributeSecurityAttributeNamespaceDataSourceCrud) Get() error {
	request := oci_security_attribute.GetSecurityAttributeNamespaceRequest{}
func (s *SecurityAttributeSecurityAttributeNamespaceDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/security_attribute/security_attribute_security_attribute_namespace_resource.go ===
func SecurityAttributeSecurityAttributeNamespaceResource() *schema.Resource {
	return &schema.Resource{
func createSecurityAttributeSecurityAttributeNamespace(d *schema.ResourceData, m interface{}) error {
	sync := &SecurityAttributeSecurityAttributeNamespaceResourceCrud{}
func readSecurityAttributeSecurityAttributeNamespace(d *schema.ResourceData, m interface{}) error {
	sync := &SecurityAttributeSecurityAttributeNamespaceResourceCrud{}
func updateSecurityAttributeSecurityAttributeNamespace(d *schema.ResourceData, m interface{}) error {
	sync := &SecurityAttributeSecurityAttributeNamespaceResourceCrud{}
func deleteSecurityAttributeSecurityAttributeNamespace(d *schema.ResourceData, m interface{}) error {
	sync := &SecurityAttributeSecurityAttributeNamespaceResourceCrud{}
func (s *SecurityAttributeSecurityAttributeNamespaceResourceCrud) ID() string {
	return *s.Res.Id
func (s *SecurityAttributeSecurityAttributeNamespaceResourceCrud) CreatedPending() []string {
	return []string{}
func (s *SecurityAttributeSecurityAttributeNamespaceResourceCrud) CreatedTarget() []string {
	return []string{
func (s *SecurityAttributeSecurityAttributeNamespaceResourceCrud) DeletedPending() []string {
	return []string{
func (s *SecurityAttributeSecurityAttributeNamespaceResourceCrud) DeletedTarget() []string {
	return []string{
func (s *SecurityAttributeSecurityAttributeNamespaceResourceCrud) Create() error {
	request := oci_security_attribute.CreateSecurityAttributeNamespaceRequest{}
func (s *SecurityAttributeSecurityAttributeNamespaceResourceCrud) Get() error {
	request := oci_security_attribute.GetSecurityAttributeNamespaceRequest{}
func (s *SecurityAttributeSecurityAttributeNamespaceResourceCrud) Update() error {
	if compartment, ok := s.D.GetOkExists("compartment_id"); ok && s.D.HasChange("compartment_id") {
func (s *SecurityAttributeSecurityAttributeNamespaceResourceCrud) Delete() error {
	request := oci_security_attribute.DeleteSecurityAttributeNamespaceRequest{}
func (s *SecurityAttributeSecurityAttributeNamespaceResourceCrud) SetData() error {
	if s.Res.CompartmentId != nil {
func (s *SecurityAttributeSecurityAttributeNamespaceResourceCrud) updateCompartment(compartment interface{}) error {
	changeCompartmentRequest := oci_security_attribute.ChangeSecurityAttributeNamespaceCompartmentRequest{}

=== ./internal/service/security_attribute/security_attribute_security_attribute_data_source.go ===
func SecurityAttributeSecurityAttributeDataSource() *schema.Resource {
	fieldMap := make(map[string]*schema.Schema)
func readSingularSecurityAttributeSecurityAttribute(d *schema.ResourceData, m interface{}) error {
	sync := &SecurityAttributeSecurityAttributeDataSourceCrud{}
func (s *SecurityAttributeSecurityAttributeDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *SecurityAttributeSecurityAttributeDataSourceCrud) Get() error {
	request := oci_security_attribute.GetSecurityAttributeRequest{}
func (s *SecurityAttributeSecurityAttributeDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/security_attribute/security_attribute_security_attributes_data_source.go ===
func SecurityAttributeSecurityAttributesDataSource() *schema.Resource {
	return &schema.Resource{
func readSecurityAttributeSecurityAttributes(d *schema.ResourceData, m interface{}) error {
	sync := &SecurityAttributeSecurityAttributesDataSourceCrud{}
func (s *SecurityAttributeSecurityAttributesDataSourceCrud) VoidState() {
	s.D.SetId("")
func (s *SecurityAttributeSecurityAttributesDataSourceCrud) Get() error {
	request := oci_security_attribute.ListSecurityAttributesRequest{}
func (s *SecurityAttributeSecurityAttributesDataSourceCrud) SetData() error {
	if s.Res == nil {

=== ./internal/service/security_attribute/security_attribute_export.go ===
func getSecurityAttributeSecurityAttributeId(resource *tf_export.OCIResource) (string, error) {


=== ./internal/service/security_attribute/security_attribute_security_attribute_resource.go ===
func SecurityAttributeSecurityAttributeResource() *schema.Resource {
	return &schema.Resource{
func createSecurityAttributeSecurityAttribute(d *schema.ResourceData, m interface{}) error {
	sync := &SecurityAttributeSecurityAttributeResourceCrud{}
func readSecurityAttributeSecurityAttribute(d *schema.ResourceData, m interface{}) error {
	sync := &SecurityAttributeSecurityAttributeResourceCrud{}
func updateSecurityAttributeSecurityAttribute(d *schema.ResourceData, m interface{}) error {
	sync := &SecurityAttributeSecurityAttributeResourceCrud{}
func deleteSecurityAttributeSecurityAttribute(d *schema.ResourceData, m interface{}) error {
	sync := &SecurityAttributeSecurityAttributeResourceCrud{}
func (s *SecurityAttributeSecurityAttributeResourceCrud) ID() string {
	return GetSecurityAttributeCompositeId(s.D.Get("name").(string), s.D.Get("security_attribute_namespace_id").(string))
func (s *SecurityAttributeSecurityAttributeResourceCrud) CreatedPending() []string {
	return []string{}
func (s *SecurityAttributeSecurityAttributeResourceCrud) CreatedTarget() []string {
	return []string{
func (s *SecurityAttributeSecurityAttributeResourceCrud) DeletedPending() []string {
	return []string{
func (s *SecurityAttributeSecurityAttributeResourceCrud) DeletedTarget() []string {
	return []string{
func (s *SecurityAttributeSecurityAttributeResourceCrud) Create() error {
	request := oci_security_attribute.CreateSecurityAttributeRequest{}
func (s *SecurityAttributeSecurityAttributeResourceCrud) getSecurityAttributeFromWorkRequest(workId *string, retryPolicy *oci_common.RetryPolicy,
	actionTypeEnum oci_security_attribute.WorkRequestResourceActionTypeEnum, timeout time.Duration) error {
func securityAttributeWaitForWorkRequest(wId *string, entityType string, action oci_security_attribute.WorkRequestResourceActionTypeEnum,
	timeout time.Duration, disableFoundRetries bool, client *oci_security_attribute.SecurityAttributeClient) (*string, error) {
func getErrorFromSecurityAttributeSecurityAttributeWorkRequest(client *oci_security_attribute.SecurityAttributeClient, workId *string, retryPolicy *oci_common.RetryPolicy, entityType string, action oci_security_attribute.WorkRequestResourceActionTypeEnum) error {
	response, err := client.ListSecurityAttributeWorkRequestErrors(context.Background(),
func (s *SecurityAttributeSecurityAttributeResourceCrud) Get() error {
	request := oci_security_attribute.GetSecurityAttributeRequest{}
func (s *SecurityAttributeSecurityAttributeResourceCrud) Update() error {
	request := oci_security_attribute.UpdateSecurityAttributeRequest{}
func (s *SecurityAttributeSecurityAttributeResourceCrud) Delete() error {
	request := oci_security_attribute.DeleteSecurityAttributeRequest{}
func (s *SecurityAttributeSecurityAttributeResourceCrud) SetData() error {

func (s *SecurityAttributeSecurityAttributeResourceCrud) mapToBaseSecurityAttributeValidator(fieldKeyFormat string) (oci_security_attribute.BaseSecurityAttributeValidator, error) {
	var baseObject oci_security_attribute.BaseSecurityAttributeValidator

=== ./internal/service/security_attribute/register_resource.go ===
func RegisterResource() {
	tfresource.RegisterResource("oci_security_attribute_security_attribute", SecurityAttributeSecurityAttributeResource())

=== ./internal/tfresource/crud_helpers_test.go ===
func (b ResourceCrud) Create() error {
	if b.id == "4" {
func (b ResourceCrud) ID() string {
	return ""
func (b ResourceCrud) SetData() error {
	return nil
func (b ResourceCrud) VoidState() {}
func (b ResourceCrud) GetMutex() *sync.Mutex {
	return &sync.Mutex{}
func (b ResourceCrud) State() string {
	if b.id == "1" {
func (b ResourceCrud) Get() error {
	if b.id == "2" {
func (b ResourceCrud) CreatedPending() []string {
	return []string{"FAILED", "b"}
func (b ResourceCrud) CreatedTarget() []string {
	return []string{"FAILED", "b"}
func (b ResourceCrud) setState(s StatefulResource) error {
	if b.id == "3" {
func (b ResourceCrud) ExtraWaitPostCreateDelete() time.Duration {
	timeoutDuration, _ := time.ParseDuration("1s")
func (b readResourceCrud) Create() error {
	return nil
func (b readResourceCrud) ID() string {
	return ""
func (b readResourceCrud) SetData() error {
	return nil
func (b readResourceCrud) VoidState() {}
func (b readResourceCrud) State() string {
	return "FAILED"
func (b readResourceCrud) Get() error {
	return nil
func (b readResourceCrud) DeletedPending() []string {
	return []string{"a", "b"}
func (b readResourceCrud) DeletedTarget() []string {
	return []string{"a", "b"}
func (b updateResourceCrud) Update() error {
	return nil
func (b updateResourceCrud) ID() string {
	return ""
func (b updateResourceCrud) SetData() error {
	return nil
func (b updateResourceCrud) VoidState() {}
func (b updateResourceCrud) State() string {
	return "FAILED"
func (b updateResourceCrud) Get() error {
	return nil
func (b updateResourceCrud) GetMutex() *sync.Mutex {
	return &sync.Mutex{}
func (b updateResourceCrud) UpdatedPending() []string {
	return []string{"a", "b"}
func (b updateResourceCrud) UpdatedTarget() []string {
	return []string{"a", "b"}
func (b deleteResourceCrud) Delete() error {
	return nil
func (b deleteResourceCrud) ID() string {
	return ""
func (b deleteResourceCrud) SetData() error {
	return nil
func (b deleteResourceCrud) VoidState() {}
func (b deleteResourceCrud) State() string {
	return "FAILED"
func (b deleteResourceCrud) Get() error {
	return nil
func (b deleteResourceCrud) GetMutex() *sync.Mutex {
	return &sync.Mutex{}
func (b deleteResourceCrud) DeletedPending() []string {
	return []string{"a", "b"}
func (b deleteResourceCrud) DeletedTarget() []string {
	return []string{"a", "b"}
func (b deleteResourceCrud) ExtraWaitPostCreateDelete() time.Duration {
	timeoutDuration, _ := time.ParseDuration("1s")
func (b deleteResourceCrud) ExtraWaitPostDelete() time.Duration {
	timeoutDuration, _ := time.ParseDuration("1s")
func (d *mockResourceData) GetOkExists(_ string) (interface{}, bool) {
	return "test", true
func (d *mockResourceData) SetId(_ string) {
}
func (d *mockResourceData) Timeout(_ string) time.Duration {
	timeoutDuration, _ := time.ParseDuration("10m")
func (d *mockResourceData) Partial(_ bool) {}
func (d *mockResourceData) HasChange(_ string) bool {
	if d.state == "1" {
func (d *mockResourceData) GetChange(_ string) (interface{}, interface{}) {
	if d.state == "2" {
func (t *TestResource) Get() error {
	t.ActualGetAttempts++
func TestUnitGetDataSourceItemSchema(t *testing.T) {
	reqSchema := &schema.Resource{
func TestUnitGetSingularDataSourceItemSchema(t *testing.T) {
	reqSchema := &schema.Resource{
func TestUnitconvertResourceFieldsToDatasourceFields(t *testing.T) {
	changeReqSchema := func(k string) *schema.Resource {
func TestUnitGenerateDataSourceHashID(t *testing.T) {
	reqSchema := &schema.Resource{
func TestUnitCreateResource(t *testing.T) {
	s := &ResourceCrud{}
func TestUnitReadResource(t *testing.T) {
	s := &readResourceCrud{}
func TestUnitUpdateResource(t *testing.T) {
	s := &updateResourceCrud{}
func TestUnitDeleteResource(t *testing.T) {
	s := &deleteResourceCrud{}
func TestUnitGetResourceIDFromWorkRequest(t *testing.T) {
	type output struct {
func TestUnitResourceRefreshForHybridPolling(t *testing.T) {
	s := &ResourceCrud{}
func TestUnitCreateResourceUsingHybridPolling(t *testing.T) {
	type args struct {
func TestUnitFilterMissingResourceError(t *testing.T) {
	type args struct {
func TestUnitGenerateDataSourceID(t *testing.T) {
	GenerateDataSourceID()
func TestUnitWaitForResourceCondition_basic(t *testing.T) {
	//if httpreplay.ModeRecordReplay() {

=== ./internal/tfresource/errors_test.go ===
func (msr *MockStatefulResource) ID() string {
	if msr.ShouldPanicIfCalledID {
func (msr *MockStatefulResource) setState(s StatefulResource) error {
	return nil
func (msr *MockStatefulResource) State() string {
	return "DummyState"
func (msr *MockStatefulResource) Get() error {
	return nil
func (msr *MockStatefulResource) SetData() error {
	return nil
func (msr *MockStatefulResource) VoidState() {
}
func TestUnitGetResourceDocsURL(t *testing.T) {
	expectedOutput := globalvar.TerraformDocumentLink
func TestUnitGetResourceOCID(t *testing.T) {
	temp := &MockStatefulResource{false}

=== ./internal/tfresource/filters.go ===
func DataSourceFiltersSchema() *schema.Schema {
	return &schema.Schema{

=== ./internal/tfresource/tags_helper.go ===
func DefinedTagsDiffSuppressFunction(key string, old string, new string, d *schema.ResourceData) bool {
	keyParts := strings.Split(key, ".")

=== ./internal/tfresource/retry_test.go ===
func TestUnitRetryIdentity409ErrorNotAuthorizedOrResourceAlreadyExists(t *testing.T) {
	if httpreplay.ModeRecordReplay() {

=== ./internal/tfresource/filters_test.go ===
func TestUnitApplyFilters_noResources(t *testing.T) {
	items := []map[string]interface{}{}
func TestUnitDataSourceFiltersSchema(t *testing.T) {
	schema := DataSourceFiltersSchema()
func CoreInstanceResource() *schema.Resource {
	return &schema.Resource{

=== ./internal/tfresource/register_helpers.go ===
func RegisterResource(name string, resourceSchema *schema.Resource) {
	if globalvar.OciResources == nil {
func RegisterDatasource(name string, datasourceSchema *schema.Resource) {
	if globalvar.OciDatasources == nil {

=== ./internal/tfresource/crud_helpers.go ===
func (s *BaseCrud) setState(sync StatefulResource) error {
	// Pseudo code:
func waitForStateRefreshForHybridPolling(workRequestClient workReqClient, workRequestIds *string, entityType string, action oci_work_requests.WorkRequestResourceActionTypeEnum,
	disableFoundRetries bool, sync StatefulResource, timeout time.Duration, operationName string, pending, target []string) error {
func ResourceRefreshForHybridPolling(workRequestClient workReqClient, workRequestIds *string, entityType string, action oci_work_requests.WorkRequestResourceActionTypeEnum,
	disableFoundRetries bool, d schemaResourceData, sync ResourceCreator) error {
func ResourceRefreshForHybridPollingPreserveStateOnFailures(workRequestClient workReqClient, workRequestIds *string, entityType string, action oci_work_requests.WorkRequestResourceActionTypeEnum,
	disableFoundRetries bool, d schemaResourceData, sync ResourceCreator) error {
func ResourceRefreshForHybridPollingOnDeletePreserveStateOnFailures(workRequestClient workReqClient, workRequestIds *string, entityType string, action oci_work_requests.WorkRequestResourceActionTypeEnum,
	disableFoundRetries bool, d schemaResourceData, sync ResourceDeleter) error {
func CreateResourceUsingHybridPolling(sync ResourceCreator) error {
	if e := sync.Create(); e != nil {
func CreateResource(d schemaResourceData, sync ResourceCreator) error {
	if synchronizedResource, ok := sync.(SynchronizedResource); ok {
func ReadResource(sync ResourceReader) error {
	if e := sync.Get(); e != nil {
func UpdateResourceUsingHybridPolling(d schemaResourceData, sync ResourceUpdater) error {
	if e := sync.Update(); e != nil {
func UpdateResource(d schemaResourceData, sync ResourceUpdater) error {
	if synchronizedResource, ok := sync.(SynchronizedResource); ok {
func DeleteResourceUsingHybridPolling(d schemaResourceData, sync ResourceDeleter) error {
	if e := sync.Delete(); e != nil {
func DeleteResource(d schemaResourceData, sync ResourceDeleter, readResource ...error) error {
	if synchronizedResource, ok := sync.(SynchronizedResource); ok {
func stateRefreshFunc(sync StatefulResource) resource.StateRefreshFunc {
	return func() (res interface{}, s string, e error) {
func WaitForUpdatedState(d schemaResourceData, sync ResourceUpdater) error {
	if stateful, ok := sync.(StatefullyUpdatedResource); ok {
func WaitForCreatedState(d schemaResourceData, sync ResourceCreator) error {
	d.SetId(sync.ID())
func WaitForStateRefresh(sync StatefulResource, timeout time.Duration, operationName string, pending, target []string) error {
	// TODO: try to move this onto sync
func FilterMissingResourceError(sync ResourceVoider, err *error) {
	if err != nil && strings.Contains((*err).Error(), "does not exist") {
func DbSystemHostnameDiffSuppress(key string, old string, new string, d *schema.ResourceData) bool {
	return EqualIgnoreCaseSuppressDiff(key, old, new, d) || NewIsPrefixOfOldDiffSuppress(key, old, new, d)
func NewIsPrefixOfOldDiffSuppress(key string, old string, new string, d *schema.ResourceData) bool {
	return strings.HasPrefix(strings.ToLower(old), strings.ToLower(new))
func DbVersionDiffSuppress(key string, old string, new string, d *schema.ResourceData) bool {
	if old == "" || new == "" {
func AdDiffSuppress(key string, old string, new string, d *schema.ResourceData) bool {
	const float64EqualityThreshold = 1e-6
func GiVersionDiffSuppress(key string, old string, new string, d *schema.ResourceData) bool {
	if old == "" || new == "" {
func MySqlVersionDiffSuppress(key string, old string, new string, d *schema.ResourceData) bool {
	if old == "" || new == "" {
func LoadBalancersSuppressDiff(key string, old string, new string, d *schema.ResourceData) bool {
	return loadBalancersSuppressDiff(d)
func loadBalancersSuppressDiff(d schemaResourceData) bool {
	return !d.HasChange("load_balancers")
func EqualIgnoreCaseSuppressDiff(key string, old string, new string, d *schema.ResourceData) bool {
	return strings.EqualFold(old, new)
func ListEqualIgnoreOrderSuppressDiff(key string, old string, new string, d *schema.ResourceData) bool {
	return listEqualIgnoreOrderSuppressDiff(key, d)
func listEqualIgnoreOrderSuppressDiff(key string, d schemaResourceData) bool {
	// Take only the field name, key might be field.#
func ListOfMapEqualIgnoreOrderSuppressDiff(key string, old string, new string, d *schema.ResourceData) bool {
	return listOfMapEqualIgnoreOrderSuppressDiff(key, d)
func listOfMapEqualIgnoreOrderSuppressDiff(key string, d schemaResourceData) bool {
	// Take only the field name, key might be field.#
func MaskedPasswordSuppressDiff(k, old, new string, d *schema.ResourceData) bool {
	// Check if the value is a masked password
func WalletSuppressDiff(k, old, new string, d *schema.ResourceData) bool {

func FieldDeprecatedButSupportedThroughAnotherResource(deprecatedFieldName string, newResourceName string) string {
	return fmt.Sprintf("The '%s' field has been deprecated. Please use the '%s' resource instead.", deprecatedFieldName, newResourceName)
func FieldDeprecatedButSupportedThroughAnotherDataSource(deprecatedFieldName string, newDataSourceName string) string {
	return fmt.Sprintf("The '%s' field has been deprecated. Please use the '%s' data source instead.", deprecatedFieldName, newDataSourceName)
func ResourceDeprecatedForAnother(deprecatedResourceName string, newResourceName string) string {
	return fmt.Sprintf("The '%s' resource has been deprecated. Please use '%s' instead.", deprecatedResourceName, newResourceName)
func ResourceDeprecated(deprecatedResourceName string) string {
	return fmt.Sprintf("The '%s' resource has been deprecated. It is no longer supported.", deprecatedResourceName)
func ResourceNotFoundErrorMessage(resourceName string, reason string) error {
	// Use this function to generate an error message for any resource that is not found.  The message is specially
func GenerateDataSourceID() string {
	// Important, if you don't have an ID, make one up for your datasource
func GenerateDataSourceHashID(idPrefix string, resourceSchema *schema.Resource, resourceData schemaResourceData) string {
	// Important, if you don't have an ID, make one up for your datasource
func WaitForResourceCondition(s ResourceFetcher, resourceChangedFunc func() bool, timeout time.Duration) error {
	backoffTime := time.Second
func GetDataSourceItemSchema(resourceSchema *schema.Resource) *schema.Resource {
	if _, idExists := resourceSchema.Schema["id"]; !idExists {
func GetSingularDataSourceItemSchema(resourceSchema *schema.Resource, addFieldMap map[string]*schema.Schema, readFunc schema.ReadFunc) *schema.Resource {
	if _, idExists := resourceSchema.Schema["id"]; !idExists {
func convertResourceFieldsToDatasourceFields(resourceSchema *schema.Resource) *schema.Resource {
	for _, fieldSchema := range resourceSchema.Schema {
func WaitForWorkRequestWithErrorHandling(workRequestClient workReqClient, workRequestIds *string, entityType string, action oci_work_requests.WorkRequestResourceActionTypeEnum,
	timeout time.Duration, disableFoundRetries bool) (*string, error) {
func WaitForWorkRequest(workRequestClient workReqClient, workRequestId *string, entityType string, action oci_work_requests.WorkRequestResourceActionTypeEnum,
	timeout time.Duration, disableFoundRetries bool, expectIdentifier bool) (*string, error) {
func GetResourceIDFromWorkRequest(workRequestClient workReqClient, workRequestId *string, entityType string,
	disableFoundRetries bool) *string {
func getWorkRequestErrors(workRequestClient workReqClient, workRequestId *string, retryPolicy *oci_common.RetryPolicy, entityType string, action oci_work_requests.WorkRequestResourceActionTypeEnum) error {
	response, err := workRequestClient.ListWorkRequestErrors(context.Background(), oci_work_requests.ListWorkRequestErrorsRequest{
func TimeDiffSuppressFunction(key string, old string, new string, d *schema.ResourceData) bool {
	oldTime, err := time.Parse(time.RFC3339Nano, old)
func Int64StringDiffSuppressFunction(key string, old string, new string, d *schema.ResourceData) bool {
	// We may get interpolation syntax in this function call as well; so be sure to check for errors.
func MonetaryDiffSuppress(key string, old string, new string, d *schema.ResourceData) bool {
	oldVal, err := strconv.ParseFloat(old, 10)
func AttachDiffSuppressFunction(key string, old string, new string, d *schema.ResourceData) bool {
	if new == "DETACH" {
func JsonStringDiffSuppressFunction(key, old, new string, d *schema.ResourceData) bool {
	var oldVal, newVal interface{}

=== ./internal/tfresource/errors.go ===
func handleMissingResourceError(sync ResourceVoider, err *error, readResource ...error) {

func getResourceDocsURL(sync interface{}) string {
	baseURL := globalvar.TerraformDocumentLink
func getResourceOCID(sync interface{}) string {
	defer func() {

=== ./internal/resourcediscovery/export_resource_helpers.go ===
func createResourceDiscoveryContext(clients *tf_client.OracleClients, args *tf_export.ExportCommandArgs, tenancyOcid string) (*tf_export.ResourceDiscoveryContext, error) {

func (r *resourceDiscoveryBaseStep) getOmittedResources() []*tf_export.OCIResource {
	return r.omittedResources
func (r *resourceDiscoveryBaseStep) getDiscoveredResources() []*tf_export.OCIResource {
	return r.discoveredResources
func createResourceHintsLookupMap() map[string]*tf_export.TerraformResourceHints {
	result := map[string]*tf_export.TerraformResourceHints{}

=== ./internal/resourcediscovery/export_compartment_test.go ===
func getTestCtx() *tf_export.ResourceDiscoveryContext {
	clients := getTestClients()
func testParentResource() *schema.Resource {
	return &schema.Resource{
func getTypeSetResourceSchema() *schema.Schema {
	return &schema.Schema{
func testChildResource() *schema.Resource {
	// Reuse the parent schema and add a parent dependency attribute
func testParentsDatasource() *schema.Resource {
	return &schema.Resource{
func testChildrenDatasource() *schema.Resource {
	// Convert child resource schema to datasource schema
func testParentsDatasourceWithError() *schema.Resource {
	return &schema.Resource{
func testParentsDatasourceWithPanic() *schema.Resource {
	return &schema.Resource{
func testChildResourceWithError() *schema.Resource {
	// Reuse the parent schema and add a parent dependency attribute
func createTestParent(d *schema.ResourceData, m interface{}) error {
	return nil
func readTestParent(d *schema.ResourceData, m interface{}) error {
	if resource, exists := parentResources[d.Id()]; exists {
func listTestParents(d *schema.ResourceData, m interface{}) error {
	results := make([]interface{}, len(parentResources))
func listTestParentsWithError(d *schema.ResourceData, m interface{}) error {
	return fmt.Errorf("could not find resources: error in listTestParentsWithError")
func listTestParentsWithPanic(d *schema.ResourceData, m interface{}) error {
	panic("panic from listTestParentsWithPanic")
func deleteTestParent(d *schema.ResourceData, m interface{}) error {
	return nil
func createTestChild(d *schema.ResourceData, m interface{}) error {
	return nil
func readTestChild(d *schema.ResourceData, m interface{}) error {
	modifyChildLock.RLock()
func readTestChildWithError(d *schema.ResourceData, m interface{}) error {
	return fmt.Errorf("could not find child with id %s", d.Id())
func listTestChildren(d *schema.ResourceData, m interface{}) error {

func deleteTestChild(d *schema.ResourceData, m interface{}) error {
	return nil
func testChildResourceWith404Error() *schema.Resource {
	// Reuse the parent schema and add a parent dependency attribute
func readTestChildWith404Error(d *schema.ResourceData, m interface{}) error {
	sync := &TestChildWith404ErrorResourceCrud{}
func (s TestChildWith404ErrorResourceCrud) Get() error {
	if s.D.Id() == resourceIdFor404ErrorResource {
func (s TestChildWith404ErrorResourceCrud) SetData() error {
	return nil
func initResourceDiscoveryTests() {
	tf_export.ResourceNameCount = map[string]int{}
func cleanupResourceDiscoveryTests() {
	delete(tf_export.ResourcesMap, "oci_test_parent")
func initTestResources() {
	numParentResources := 4
func getRootCompartmentResource() *tf_export.OCIResource {
	return &tf_export.OCIResource{
func getTestResourceId(resourceType string, id int) string {
	return fmt.Sprintf("ocid1.%s.abcdefghiklmnop.%d", resourceType, id)
func generateTestResourceFromSchema(id int, resourceSchemaMap map[string]*schema.Schema) map[string]interface{} {
	result := map[string]interface{}{}
func TestUnitRunExportCommandFilterResourceType_basic(t *testing.T) {
	initResourceDiscoveryTests()
func TestUnitFindResources_basic(t *testing.T) {
	initResourceDiscoveryTests()
func TestUnitFindResourcesInActiveLifeCycle_basic(t *testing.T) {
	initResourceDiscoveryTests()
func TestUnitFindResourcesInActiveLifeCycleWithGlobalVariableNotSet_basic(t *testing.T) {
	initResourceDiscoveryTests()
func TestUnitFindResources_filter(t *testing.T) {
	initResourceDiscoveryTests()
func TestUnitFindResources_404Error(t *testing.T) {
	initResourceDiscoveryTests()
func TestUnitFindResources_panic(t *testing.T) {
	// env var export_enable_tenancy_lookup=false needed for this test
func TestUnitFindResources_errorList(t *testing.T) {
	initResourceDiscoveryTests()
func TestUnitFindResources_restrictedOcids(t *testing.T) {
	initResourceDiscoveryTests()
func TestUnitFindResources_overrideFn(t *testing.T) {
	initResourceDiscoveryTests()
func TestUnitFindResources_processResourceFn(t *testing.T) {
	initResourceDiscoveryTests()
func TestUnitGenerateTerraformNameFromResource_basic(t *testing.T) {
	type testCase struct {
func TestUnitPrintResourceGraphResources(t *testing.T) {
	resourceGraphs := map[string]tf_export.TerraformResourceGraph{
func TestUnitRunListExportableResourcesCommand(t *testing.T) {

func TestUnitGetOciResource(t *testing.T) {
	childResource := testChildResource()
func TestUnitConvertResourceDataToMap(t *testing.T) {
	parentResource := testParentResource()
func TestUnitImportResource(t *testing.T) {
	compartmentId := "dummy_compartment_id"
func mockResourcesMap() map[string]*schema.Resource {
	r := &schema.Resource{
func TestUnitGetDiscoverResourceSteps(t *testing.T) {

func TestUnitGetDiscoverResourceWithGraphSteps(t *testing.T) {


=== ./internal/resourcediscovery/export_test_helper_test.go ===
func TestUnitResourceSupportImport(t *testing.T) {
	type expected struct {
func TestUnitExportCompartmentWithResourceName(t *testing.T) {
	type expected struct {

=== ./internal/resourcediscovery/export_compartment.go ===
func elapsed(what string, step *resourceDiscoveryBaseStep, stage ResourceDiscoveryStage) func() {
	start := time.Now()
func printResourceGraphResources(resourceGraphs map[string]tf_export.TerraformResourceGraph, scope string) error {
	for graphName, resourceGraph := range resourceGraphs {
func RunListExportableResourcesCommand() error {
	tf_export.ResourcesMap = tf_provider.ResourcesMap()
func getListOfNotDiscoveredResources(ctx *tf_export.ResourceDiscoveryContext) (error, Status) {
	notDiscoveredParentResources, notDiscoveredChildResources := ctx.PrintErrors()
func getExportConfig(d *schema.ResourceData) (interface{}, error) {
	clients := &tf_client.OracleClients{
func runExportCommand(ctx *tf_export.ResourceDiscoveryContext) error {
	utils.Logf("[INFO] Running export command\n")
func generateStateParallel(ctx *tf_export.ResourceDiscoveryContext, steps []resourceDiscoveryStep) error {

func generateState(ctx *tf_export.ResourceDiscoveryContext, steps []resourceDiscoveryStep) error {

func importResource(ctx *tf_export.ResourceDiscoveryContext, resource *tf_export.OCIResource, tmpStateOutputFile string) {
	utils.Logf("[INFO] ===> Importing resource '%s'", resource.GetTerraformReference())
func getDiscoverResourceSteps(ctx *tf_export.ResourceDiscoveryContext) ([]resourceDiscoveryStep, error) {
	if !ctx.TargetSpecificResources {
func getDiscoverResourceWithGraphSteps(ctx *tf_export.ResourceDiscoveryContext) ([]resourceDiscoveryStep, error) {
	defer elapsed("Building resource discovery graph", nil, 0)()
func runFilters(resources []*tf_export.OCIResource, filters []tf_export.ResourceFilter) ([]*tf_export.OCIResource, error) {

func findResources(ctx *tf_export.ResourceDiscoveryContext, root *tf_export.OCIResource, resourceGraph tf_export.TerraformResourceGraph, discoveryParallelism bool) (foundResources []*tf_export.OCIResource, err error) {
	// findResources will never return error, it will add the errors encountered to the errorList and print those after the discovery finishes
func readEnvironmentVars(d *schema.ResourceData) error {

func deleteInvalidReferences(referenceMap map[string]string, discoveredResources []*tf_export.OCIResource) {
	// intialize referenceResourceNameSet
func cleanupTempStateFiles(ctx *tf_export.ResourceDiscoveryContext) {


=== ./internal/resourcediscovery/tf_hcl_version_test.go ===
func TestUnitTfHclVersion11_getDataSourceHclString(t *testing.T) {
	type fields struct {
func TestUnitTfHclVersion12_getDataSourceHclString(t *testing.T) {
	type fields struct {

=== ./internal/resourcediscovery/export_resource_helpers_test.go ===
func TestUnitgetResourceHint(t *testing.T) {
	type args struct {

=== ./internal/resourcediscovery/export_test_helpers.go ===
func TestExportCompartmentWithResourceName(id *string, compartmentId *string, resourceName string) error {

func isResourceSupportImport(resourceName string) (support bool, err error) {
	if strings.Contains(resourceName, ".") {

=== ./internal/client/resourcemanager_clients.go ===
func initResourcemanagerResourceManagerClient(configProvider oci_common.ConfigurationProvider, configureClient ConfigureClient, serviceClientOverrides ServiceClientOverrides) (interface{}, error) {
	client, err := oci_resourcemanager.NewResourceManagerClientWithConfigurationProvider(configProvider)
func (m *OracleClients) ResourceManagerClient() *oci_resourcemanager.ResourceManagerClient {
	return m.GetClient("oci_resourcemanager.ResourceManagerClient").(*oci_resourcemanager.ResourceManagerClient)

=== ./internal/client/resource_scheduler_clients.go ===
func initResourceschedulerScheduleClient(configProvider oci_common.ConfigurationProvider, configureClient ConfigureClient, serviceClientOverrides ServiceClientOverrides) (interface{}, error) {
	client, err := oci_resource_scheduler.NewScheduleClientWithConfigurationProvider(configProvider)

=== ./internal/client/usage_proxy_clients.go ===
func initUsageResourcesClient(configProvider oci_common.ConfigurationProvider, configureClient ConfigureClient, serviceClientOverrides ServiceClientOverrides) (interface{}, error) {
	client, err := oci_usage_proxy.NewResourcesClientWithConfigurationProvider(configProvider)
func (m *OracleClients) ResourcesClient() *oci_usage_proxy.ResourcesClient {
	return m.GetClient("oci_usage_proxy.ResourcesClient").(*oci_usage_proxy.ResourcesClient)
